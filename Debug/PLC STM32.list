
PLC STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016868  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a70  080169f8  080169f8  000269f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019468  08019468  00030368  2**0
                  CONTENTS
  4 .ARM          00000000  08019468  08019468  00030368  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019468  08019468  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019468  08019468  00029468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801946c  0801946c  0002946c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08019470  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004474  20000368  080197d8  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200047dc  080197d8  000347dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b665f  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000123a6  00000000  00000000  000e69f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000283b4  00000000  00000000  000f8d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002600  00000000  00000000  00121158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004760  00000000  00000000  00123758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037067  00000000  00000000  00127eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000830f5  00000000  00000000  0015ef1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c96  00000000  00000000  001e2014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002c6caa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f18  00000000  00000000  002c6d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000368 	.word	0x20000368
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080169e0 	.word	0x080169e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	080169e0 	.word	0x080169e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <STM32_PLC_Start_Analog_Input>:
TIM_HandleTypeDef* handler_tim13;
SDADC_HandleTypeDef* handler_sdadc1;
SDADC_HandleTypeDef* handler_sdadc2;
SDADC_HandleTypeDef* handler_sdadc3;

void STM32_PLC_Start_Analog_Input(TIM_HandleTypeDef* htim12, TIM_HandleTypeDef* htim13, SDADC_HandleTypeDef* hsdadc1, SDADC_HandleTypeDef* hsdadc2, SDADC_HandleTypeDef* hsdadc3) {
 8000cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf8:	4688      	mov	r8, r1
 8000cfa:	4606      	mov	r6, r0
	 * Timer clock: 48 Mhz
	 * Prescaler: 0
	 * Counter: 48000 (0xbb80)
	 * Update frequency: 1000 Hz
	 */
	HAL_TIM_OC_Start(htim13, TIM_CHANNEL_1); /* TIM13 Channel 1 is trigger source for SDADC1 */
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4640      	mov	r0, r8
void STM32_PLC_Start_Analog_Input(TIM_HandleTypeDef* htim12, TIM_HandleTypeDef* htim13, SDADC_HandleTypeDef* hsdadc1, SDADC_HandleTypeDef* hsdadc2, SDADC_HandleTypeDef* hsdadc3) {
 8000d00:	4615      	mov	r5, r2
 8000d02:	461c      	mov	r4, r3
 8000d04:	9f06      	ldr	r7, [sp, #24]
	HAL_TIM_OC_Start(htim13, TIM_CHANNEL_1); /* TIM13 Channel 1 is trigger source for SDADC1 */
 8000d06:	f00d fc31 	bl	800e56c <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(htim12, TIM_CHANNEL_1); /* TIM12 Channel 1 is trigger source for SDADC2 */
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	f00d fc2d 	bl	800e56c <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(htim12, TIM_CHANNEL_2); /* TIM12 Channel 2 is trigger source for SDADC3 */
 8000d12:	2104      	movs	r1, #4
 8000d14:	4630      	mov	r0, r6
 8000d16:	f00d fc29 	bl	800e56c <HAL_TIM_OC_Start>
	if (HAL_SDADC_CalibrationStart(hsdadc1, SDADC_CALIBRATION_SEQ_1) != HAL_OK)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	f00c fa15 	bl	800d14c <HAL_SDADC_CalibrationStart>
 8000d22:	b108      	cbz	r0, 8000d28 <STM32_PLC_Start_Analog_Input+0x34>
		Error_Handler();
 8000d24:	f009 f8a8 	bl	8009e78 <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc1, HAL_MAX_DELAY) != HAL_OK)
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f00c fa32 	bl	800d196 <HAL_SDADC_PollForCalibEvent>
 8000d32:	b108      	cbz	r0, 8000d38 <STM32_PLC_Start_Analog_Input+0x44>
		Error_Handler();
 8000d34:	f009 f8a0 	bl	8009e78 <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc2, SDADC_CALIBRATION_SEQ_1) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f00c fa06 	bl	800d14c <HAL_SDADC_CalibrationStart>
 8000d40:	b108      	cbz	r0, 8000d46 <STM32_PLC_Start_Analog_Input+0x52>
		Error_Handler();
 8000d42:	f009 f899 	bl	8009e78 <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc2, HAL_MAX_DELAY) != HAL_OK)
 8000d46:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f00c fa23 	bl	800d196 <HAL_SDADC_PollForCalibEvent>
 8000d50:	b108      	cbz	r0, 8000d56 <STM32_PLC_Start_Analog_Input+0x62>
		Error_Handler();
 8000d52:	f009 f891 	bl	8009e78 <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc3, SDADC_CALIBRATION_SEQ_1) != HAL_OK)
 8000d56:	2100      	movs	r1, #0
 8000d58:	4638      	mov	r0, r7
 8000d5a:	f00c f9f7 	bl	800d14c <HAL_SDADC_CalibrationStart>
 8000d5e:	b108      	cbz	r0, 8000d64 <STM32_PLC_Start_Analog_Input+0x70>
		Error_Handler();
 8000d60:	f009 f88a 	bl	8009e78 <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc3, HAL_MAX_DELAY) != HAL_OK)
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	4638      	mov	r0, r7
 8000d6a:	f00c fa14 	bl	800d196 <HAL_SDADC_PollForCalibEvent>
 8000d6e:	b108      	cbz	r0, 8000d74 <STM32_PLC_Start_Analog_Input+0x80>
		Error_Handler();
 8000d70:	f009 f882 	bl	8009e78 <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc1, (uint32_t*)SDADC1_Single, 9) != HAL_OK)
 8000d74:	4912      	ldr	r1, [pc, #72]	; (8000dc0 <STM32_PLC_Start_Analog_Input+0xcc>)
 8000d76:	2209      	movs	r2, #9
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f00c fa31 	bl	800d1e0 <HAL_SDADC_InjectedStart_DMA>
 8000d7e:	b108      	cbz	r0, 8000d84 <STM32_PLC_Start_Analog_Input+0x90>
		Error_Handler();
 8000d80:	f009 f87a 	bl	8009e78 <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc2, (uint32_t*)SDADC2_Single, 3) != HAL_OK)
 8000d84:	490f      	ldr	r1, [pc, #60]	; (8000dc4 <STM32_PLC_Start_Analog_Input+0xd0>)
 8000d86:	2203      	movs	r2, #3
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f00c fa29 	bl	800d1e0 <HAL_SDADC_InjectedStart_DMA>
 8000d8e:	b108      	cbz	r0, 8000d94 <STM32_PLC_Start_Analog_Input+0xa0>
		Error_Handler();
 8000d90:	f009 f872 	bl	8009e78 <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc3, (uint32_t*)SDADC3_Differential, 5) != HAL_OK)
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <STM32_PLC_Start_Analog_Input+0xd4>)
 8000d96:	2205      	movs	r2, #5
 8000d98:	4638      	mov	r0, r7
 8000d9a:	f00c fa21 	bl	800d1e0 <HAL_SDADC_InjectedStart_DMA>
 8000d9e:	b108      	cbz	r0, 8000da4 <STM32_PLC_Start_Analog_Input+0xb0>
		Error_Handler();
 8000da0:	f009 f86a 	bl	8009e78 <Error_Handler>


	/* Save */
	handler_tim13 = htim13;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <STM32_PLC_Start_Analog_Input+0xd8>)
 8000da6:	f8c3 8000 	str.w	r8, [r3]
	handler_tim12 = htim12;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <STM32_PLC_Start_Analog_Input+0xdc>)
 8000dac:	601e      	str	r6, [r3, #0]
	handler_sdadc1 = hsdadc1;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <STM32_PLC_Start_Analog_Input+0xe0>)
 8000db0:	601d      	str	r5, [r3, #0]
	handler_sdadc2 = hsdadc2;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <STM32_PLC_Start_Analog_Input+0xe4>)
 8000db4:	601c      	str	r4, [r3, #0]
	handler_sdadc3 = hsdadc3;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <STM32_PLC_Start_Analog_Input+0xe8>)
 8000db8:	601f      	str	r7, [r3, #0]

}
 8000dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000384 	.word	0x20000384
 8000dc4:	20000396 	.word	0x20000396
 8000dc8:	2000039c 	.word	0x2000039c
 8000dcc:	20002cf4 	.word	0x20002cf4
 8000dd0:	20002cf0 	.word	0x20002cf0
 8000dd4:	20002ce8 	.word	0x20002ce8
 8000dd8:	20002ce4 	.word	0x20002ce4
 8000ddc:	20002cec 	.word	0x20002cec

08000de0 <STM32_PLC_Analog_Input_Set_Gain_Offset>:
/* Inline is only for optimization */
static inline int16_t* array_to_pointer(int16_t array[]){
	return array; /* This return the address */
}

void STM32_PLC_Analog_Input_Set_Gain_Offset(uint8_t sdadc, uint8_t configuration_index, uint8_t gain, uint16_t offset) {
 8000de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de4:	b085      	sub	sp, #20
 8000de6:	4604      	mov	r4, r0
 8000de8:	4689      	mov	r9, r1
 8000dea:	4690      	mov	r8, r2
	/* Initial */
	SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000dec:	2100      	movs	r1, #0
 8000dee:	2210      	movs	r2, #16
 8000df0:	4668      	mov	r0, sp
void STM32_PLC_Analog_Input_Set_Gain_Offset(uint8_t sdadc, uint8_t configuration_index, uint8_t gain, uint16_t offset) {
 8000df2:	461d      	mov	r5, r3
	SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000df4:	f011 fb24 	bl	8012440 <memset>
	SDADC_HandleTypeDef *handler;
	uint8_t length_DMA;
	uint32_t *array_DMA;

	/* Stop DMA */
	switch(sdadc){
 8000df8:	2c02      	cmp	r4, #2
 8000dfa:	d00f      	beq.n	8000e1c <STM32_PLC_Analog_Input_Set_Gain_Offset+0x3c>
 8000dfc:	2c03      	cmp	r4, #3
 8000dfe:	d02b      	beq.n	8000e58 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x78>
 8000e00:	4c39      	ldr	r4, [pc, #228]	; (8000ee8 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x108>)
		array_DMA = (uint32_t*)array_to_pointer((int16_t*)SDADC3_Differential);
		ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
		break;
	default:
		/* Stop DMA for SDADC1 */
		if(HAL_SDADC_InjectedStop_DMA(handler_sdadc1) != HAL_OK)
 8000e02:	6820      	ldr	r0, [r4, #0]
 8000e04:	f00c fa2a 	bl	800d25c <HAL_SDADC_InjectedStop_DMA>
 8000e08:	b108      	cbz	r0, 8000e0e <STM32_PLC_Analog_Input_Set_Gain_Offset+0x2e>
			Error_Handler();
 8000e0a:	f009 f835 	bl	8009e78 <Error_Handler>
		handler = handler_sdadc1;
		length_DMA = 9;
		array_DMA = (uint32_t*)array_to_pointer((int16_t*)SDADC1_Single);
		ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8000e0e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
		handler = handler_sdadc1;
 8000e12:	6824      	ldr	r4, [r4, #0]
		array_DMA = (uint32_t*)array_to_pointer((int16_t*)SDADC1_Single);
 8000e14:	4e35      	ldr	r6, [pc, #212]	; (8000eec <STM32_PLC_Analog_Input_Set_Gain_Offset+0x10c>)
		ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8000e16:	9300      	str	r3, [sp, #0]
		length_DMA = 9;
 8000e18:	2709      	movs	r7, #9
		break;
 8000e1a:	e014      	b.n	8000e46 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x66>
		if(HAL_TIM_OC_Stop(handler_tim12, TIM_CHANNEL_1))
 8000e1c:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x110>)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	f00d fc0b 	bl	800e63c <HAL_TIM_OC_Stop>
 8000e26:	b108      	cbz	r0, 8000e2c <STM32_PLC_Analog_Input_Set_Gain_Offset+0x4c>
			Error_Handler();
 8000e28:	f009 f826 	bl	8009e78 <Error_Handler>
		if(HAL_SDADC_InjectedStop_DMA(handler_sdadc2) != HAL_OK)
 8000e2c:	4c31      	ldr	r4, [pc, #196]	; (8000ef4 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x114>)
 8000e2e:	6820      	ldr	r0, [r4, #0]
 8000e30:	f00c fa14 	bl	800d25c <HAL_SDADC_InjectedStop_DMA>
 8000e34:	b108      	cbz	r0, 8000e3a <STM32_PLC_Analog_Input_Set_Gain_Offset+0x5a>
			Error_Handler();
 8000e36:	f009 f81f 	bl	8009e78 <Error_Handler>
		ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8000e3a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
		handler = handler_sdadc2;
 8000e3e:	6824      	ldr	r4, [r4, #0]
		array_DMA = (uint32_t*)array_to_pointer((int16_t*)SDADC2_Single);
 8000e40:	4e2d      	ldr	r6, [pc, #180]	; (8000ef8 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x118>)
		ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8000e42:	9300      	str	r3, [sp, #0]
		length_DMA = 3;
 8000e44:	2703      	movs	r7, #3
	}

	/* Set gain and offset */
	switch(gain){
 8000e46:	f1b8 0f06 	cmp.w	r8, #6
 8000e4a:	d849      	bhi.n	8000ee0 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x100>
 8000e4c:	e8df f008 	tbb	[pc, r8]
 8000e50:	3c393711 	.word	0x3c393711
 8000e54:	423f      	.short	0x423f
 8000e56:	45          	.byte	0x45
 8000e57:	00          	.byte	0x00
		if(HAL_SDADC_InjectedStop_DMA(handler_sdadc3) != HAL_OK)
 8000e58:	4c28      	ldr	r4, [pc, #160]	; (8000efc <STM32_PLC_Analog_Input_Set_Gain_Offset+0x11c>)
 8000e5a:	6820      	ldr	r0, [r4, #0]
 8000e5c:	f00c f9fe 	bl	800d25c <HAL_SDADC_InjectedStop_DMA>
 8000e60:	b108      	cbz	r0, 8000e66 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x86>
			Error_Handler();
 8000e62:	f009 f809 	bl	8009e78 <Error_Handler>
		ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 8000e66:	2300      	movs	r3, #0
		handler = handler_sdadc3;
 8000e68:	6824      	ldr	r4, [r4, #0]
		array_DMA = (uint32_t*)array_to_pointer((int16_t*)SDADC3_Differential);
 8000e6a:	4e25      	ldr	r6, [pc, #148]	; (8000f00 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x120>)
		ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 8000e6c:	9300      	str	r3, [sp, #0]
		length_DMA = 5;
 8000e6e:	2705      	movs	r7, #5
		break;
 8000e70:	e7e9      	b.n	8000e46 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x66>
	case 0:
		ConfParamStruct.Gain = SDADC_GAIN_1_2;
 8000e72:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
		break;
	case 1:
		ConfParamStruct.Gain = SDADC_GAIN_1;
 8000e76:	9301      	str	r3, [sp, #4]
		break;
	}
	ConfParamStruct.Offset = offset;

	/* Set calibration */
	if (HAL_SDADC_PrepareChannelConfig(handler, configuration_index, &ConfParamStruct) != HAL_OK)
 8000e78:	466a      	mov	r2, sp
 8000e7a:	4649      	mov	r1, r9
 8000e7c:	4620      	mov	r0, r4
	ConfParamStruct.Offset = offset;
 8000e7e:	9503      	str	r5, [sp, #12]
	if (HAL_SDADC_PrepareChannelConfig(handler, configuration_index, &ConfParamStruct) != HAL_OK)
 8000e80:	f00c f8a2 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 8000e84:	b108      	cbz	r0, 8000e8a <STM32_PLC_Analog_Input_Set_Gain_Offset+0xaa>
	    Error_Handler();
 8000e86:	f008 fff7 	bl	8009e78 <Error_Handler>

	/* Start ADC again */
	if (HAL_SDADC_CalibrationStart(handler, SDADC_CALIBRATION_SEQ_1) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f00c f95d 	bl	800d14c <HAL_SDADC_CalibrationStart>
 8000e92:	b108      	cbz	r0, 8000e98 <STM32_PLC_Analog_Input_Set_Gain_Offset+0xb8>
		Error_Handler();
 8000e94:	f008 fff0 	bl	8009e78 <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(handler, HAL_MAX_DELAY) != HAL_OK)
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f00c f97a 	bl	800d196 <HAL_SDADC_PollForCalibEvent>
 8000ea2:	b108      	cbz	r0, 8000ea8 <STM32_PLC_Analog_Input_Set_Gain_Offset+0xc8>
		Error_Handler();
 8000ea4:	f008 ffe8 	bl	8009e78 <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(handler, array_DMA, length_DMA) != HAL_OK)
 8000ea8:	463a      	mov	r2, r7
 8000eaa:	4631      	mov	r1, r6
 8000eac:	4620      	mov	r0, r4
 8000eae:	f00c f997 	bl	800d1e0 <HAL_SDADC_InjectedStart_DMA>
 8000eb2:	b108      	cbz	r0, 8000eb8 <STM32_PLC_Analog_Input_Set_Gain_Offset+0xd8>
		Error_Handler();
 8000eb4:	f008 ffe0 	bl	8009e78 <Error_Handler>
}
 8000eb8:	b005      	add	sp, #20
 8000eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ConfParamStruct.Gain = SDADC_GAIN_1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e7d9      	b.n	8000e76 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x96>
		ConfParamStruct.Gain = SDADC_GAIN_2;
 8000ec2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ec6:	e7d6      	b.n	8000e76 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x96>
		ConfParamStruct.Gain = SDADC_GAIN_4;
 8000ec8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ecc:	e7d3      	b.n	8000e76 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x96>
		ConfParamStruct.Gain = SDADC_GAIN_8;
 8000ece:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000ed2:	e7d0      	b.n	8000e76 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x96>
		ConfParamStruct.Gain = SDADC_GAIN_16;
 8000ed4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed8:	e7cd      	b.n	8000e76 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x96>
		ConfParamStruct.Gain = SDADC_GAIN_32;
 8000eda:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 8000ede:	e7ca      	b.n	8000e76 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x96>
		ConfParamStruct.Gain = SDADC_GAIN_1;
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	9501      	str	r5, [sp, #4]
		break;
 8000ee4:	e7c8      	b.n	8000e78 <STM32_PLC_Analog_Input_Set_Gain_Offset+0x98>
 8000ee6:	bf00      	nop
 8000ee8:	20002ce8 	.word	0x20002ce8
 8000eec:	20000384 	.word	0x20000384
 8000ef0:	20002cf0 	.word	0x20002cf0
 8000ef4:	20002ce4 	.word	0x20002ce4
 8000ef8:	20000396 	.word	0x20000396
 8000efc:	20002cec 	.word	0x20002cec
 8000f00:	2000039c 	.word	0x2000039c

08000f04 <STM32_PLC_Analog_Input_ADC_Get_Raw>:
	return SDADC_Single_Calibration_Gain[i]*((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) + SDADC_Single_Calibration_Bias[i];
}

/* Get raw ADC0 to ADC11 */
uint16_t STM32_PLC_Analog_Input_ADC_Get_Raw(uint8_t i) {
	if(i < 9)
 8000f04:	2808      	cmp	r0, #8
		return SDADC1_Single[i] + 0x8000;
 8000f06:	bf92      	itee	ls
 8000f08:	4b04      	ldrls	r3, [pc, #16]	; (8000f1c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x18>)
	else
		return SDADC2_Single[i-9] + 0x8000;
 8000f0a:	4b05      	ldrhi	r3, [pc, #20]	; (8000f20 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1c>)
 8000f0c:	3809      	subhi	r0, #9
 8000f0e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000f12:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8000f16:	b280      	uxth	r0, r0
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000384 	.word	0x20000384
 8000f20:	20000396 	.word	0x20000396

08000f24 <STM32_PLC_Analog_Input_ADC_Get>:
	return SDADC_Single_Calibration_Gain[i]*((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) + SDADC_Single_Calibration_Bias[i];
 8000f24:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <STM32_PLC_Analog_Input_ADC_Get+0x28>)
float STM32_PLC_Analog_Input_ADC_Get(uint8_t i) {
 8000f26:	b508      	push	{r3, lr}
	return SDADC_Single_Calibration_Gain[i]*((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) + SDADC_Single_Calibration_Bias[i];
 8000f28:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000f2c:	ed92 7a00 	vldr	s14, [r2]
 8000f30:	0081      	lsls	r1, r0, #2
 8000f32:	f7ff ffe7 	bl	8000f04 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <STM32_PLC_Analog_Input_ADC_Get+0x2c>)
 8000f38:	ee07 0a90 	vmov	s15, r0
 8000f3c:	440b      	add	r3, r1
 8000f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f42:	ed93 0a00 	vldr	s0, [r3]
}
 8000f46:	eea7 0a27 	vfma.f32	s0, s14, s15
 8000f4a:	bd08      	pop	{r3, pc}
 8000f4c:	20000400 	.word	0x20000400
 8000f50:	200003d0 	.word	0x200003d0

08000f54 <STM32_PLC_Analog_Input_ADC_Set_Calibration>:

/* Set calibration ADC0 to ADC11 */
void STM32_PLC_Analog_Input_ADC_Set_Calibration(uint8_t i, float min_value, float max_value, float bias_value) {
	SDADC_Single_Calibration_Gain[i] = (max_value - min_value) / (0xFFFF);
 8000f54:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8000f58:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f78 <STM32_PLC_Analog_Input_ADC_Set_Calibration+0x24>
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <STM32_PLC_Analog_Input_ADC_Set_Calibration+0x28>)
	SDADC_Single_Calibration_Bias[i] = bias_value;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <STM32_PLC_Analog_Input_ADC_Set_Calibration+0x2c>)
	SDADC_Single_Calibration_Gain[i] = (max_value - min_value) / (0xFFFF);
 8000f60:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000f64:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	SDADC_Single_Calibration_Bias[i] = bias_value;
 8000f68:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000f6c:	ed83 1a00 	vstr	s2, [r3]
	SDADC_Single_Calibration_Gain[i] = (max_value - min_value) / (0xFFFF);
 8000f70:	edc2 7a00 	vstr	s15, [r2]
}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	477fff00 	.word	0x477fff00
 8000f7c:	20000400 	.word	0x20000400
 8000f80:	200003d0 	.word	0x200003d0

08000f84 <STM32_PLC_Analog_Input_DADC_Get>:
	return SDADC_Differential_Calibration_Gain[i]*((float)STM32_PLC_Analog_Input_DADC_Get_Raw(i)) + SDADC_Differential_Calibration_Bias[i];
}

/* Get raw DADC0 to DADC4 */
int16_t STM32_PLC_Analog_Input_DADC_Get_Raw(uint8_t i) {
	return SDADC3_Differential[i];
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <STM32_PLC_Analog_Input_DADC_Get+0x2c>)
	return SDADC_Differential_Calibration_Gain[i]*((float)STM32_PLC_Analog_Input_DADC_Get_Raw(i)) + SDADC_Differential_Calibration_Bias[i];
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <STM32_PLC_Analog_Input_DADC_Get+0x30>)
	return SDADC3_Differential[i];
 8000f88:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8000f8c:	b21b      	sxth	r3, r3
	return SDADC_Differential_Calibration_Gain[i]*((float)STM32_PLC_Analog_Input_DADC_Get_Raw(i)) + SDADC_Differential_Calibration_Bias[i];
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <STM32_PLC_Analog_Input_DADC_Get+0x34>)
 8000f94:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000f98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa0:	ed92 7a00 	vldr	s14, [r2]
 8000fa4:	ed90 0a00 	vldr	s0, [r0]
}
 8000fa8:	eea7 0a27 	vfma.f32	s0, s14, s15
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000039c 	.word	0x2000039c
 8000fb4:	200003bc 	.word	0x200003bc
 8000fb8:	200003a8 	.word	0x200003a8

08000fbc <STM32_PLC_Analog_Input_DADC_Get_Raw>:
	return SDADC3_Differential[i];
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <STM32_PLC_Analog_Input_DADC_Get_Raw+0xc>)
 8000fbe:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8000fc2:	b200      	sxth	r0, r0
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000039c 	.word	0x2000039c

08000fcc <STM32_PLC_Analog_Input_DADC_Set_Calibration>:

/* Set calibration DADC0 to DADC4 */
void STM32_PLC_Analog_Input_DADC_Set_Calibration(uint8_t i, float min_value, float max_value, float bias_value) {
	SDADC_Differential_Calibration_Gain[i] = (max_value - min_value) / (0xFFFF);
 8000fcc:	ee30 0ac0 	vsub.f32	s0, s1, s0
 8000fd0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000ff0 <STM32_PLC_Analog_Input_DADC_Set_Calibration+0x24>
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <STM32_PLC_Analog_Input_DADC_Set_Calibration+0x28>)
	SDADC_Differential_Calibration_Bias[i] = bias_value;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <STM32_PLC_Analog_Input_DADC_Set_Calibration+0x2c>)
	SDADC_Differential_Calibration_Gain[i] = (max_value - min_value) / (0xFFFF);
 8000fd8:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8000fdc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	SDADC_Differential_Calibration_Bias[i] = bias_value;
 8000fe0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000fe4:	ed83 1a00 	vstr	s2, [r3]
	SDADC_Differential_Calibration_Gain[i] = (max_value - min_value) / (0xFFFF);
 8000fe8:	edc2 7a00 	vstr	s15, [r2]
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	477fff00 	.word	0x477fff00
 8000ff4:	200003bc 	.word	0x200003bc
 8000ff8:	200003a8 	.word	0x200003a8

08000ffc <STM32_PLC_Start_Analog_Output>:
#include "Functions.h"

static DAC_HandleTypeDef* hanalog1;
static DAC_HandleTypeDef* hanalog2;

void STM32_PLC_Start_Analog_Output(DAC_HandleTypeDef* hdac1, DAC_HandleTypeDef* hdac2, TIM_HandleTypeDef* htim6) {
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4604      	mov	r4, r0
	 * Timer clock: 48 Mhz
	 * Prescaler: 99
	 * Counter: 48000 (0xbb80)
	 * Update frequency: 10 Hz
	 */
	HAL_TIM_Base_Start(htim6);
 8001000:	4610      	mov	r0, r2
void STM32_PLC_Start_Analog_Output(DAC_HandleTypeDef* hdac1, DAC_HandleTypeDef* hdac2, TIM_HandleTypeDef* htim6) {
 8001002:	460d      	mov	r5, r1
	HAL_TIM_Base_Start(htim6);
 8001004:	f00c fdb0 	bl	800db68 <HAL_TIM_Base_Start>
	if(HAL_DAC_Start(hdac1, DAC1_CHANNEL_1) != HAL_OK)
 8001008:	2100      	movs	r1, #0
 800100a:	4620      	mov	r0, r4
 800100c:	f009 ff63 	bl	800aed6 <HAL_DAC_Start>
 8001010:	b108      	cbz	r0, 8001016 <STM32_PLC_Start_Analog_Output+0x1a>
		Error_Handler();
 8001012:	f008 ff31 	bl	8009e78 <Error_Handler>
	if(HAL_DAC_Start(hdac1, DAC1_CHANNEL_2) != HAL_OK)
 8001016:	2110      	movs	r1, #16
 8001018:	4620      	mov	r0, r4
 800101a:	f009 ff5c 	bl	800aed6 <HAL_DAC_Start>
 800101e:	b108      	cbz	r0, 8001024 <STM32_PLC_Start_Analog_Output+0x28>
		Error_Handler();
 8001020:	f008 ff2a 	bl	8009e78 <Error_Handler>
	if(HAL_DAC_Start(hdac2, DAC2_CHANNEL_1) != HAL_OK)
 8001024:	2100      	movs	r1, #0
 8001026:	4628      	mov	r0, r5
 8001028:	f009 ff55 	bl	800aed6 <HAL_DAC_Start>
 800102c:	b108      	cbz	r0, 8001032 <STM32_PLC_Start_Analog_Output+0x36>
		Error_Handler();
 800102e:	f008 ff23 	bl	8009e78 <Error_Handler>
	hanalog1 = hdac1;
 8001032:	4b02      	ldr	r3, [pc, #8]	; (800103c <STM32_PLC_Start_Analog_Output+0x40>)
 8001034:	601c      	str	r4, [r3, #0]
	hanalog2 = hdac2;
 8001036:	4b02      	ldr	r3, [pc, #8]	; (8001040 <STM32_PLC_Start_Analog_Output+0x44>)
 8001038:	601d      	str	r5, [r3, #0]
}
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	20000430 	.word	0x20000430
 8001040:	20000434 	.word	0x20000434

08001044 <STM32_PLC_Analog_Output_Set>:

void STM32_PLC_Analog_Output_Set(uint8_t i, uint16_t output) {
	switch(i){
 8001044:	2801      	cmp	r0, #1
void STM32_PLC_Analog_Output_Set(uint8_t i, uint16_t output) {
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
	switch(i){
 800104a:	d007      	beq.n	800105c <STM32_PLC_Analog_Output_Set+0x18>
 800104c:	2802      	cmp	r0, #2
 800104e:	d008      	beq.n	8001062 <STM32_PLC_Analog_Output_Set+0x1e>
 8001050:	b958      	cbnz	r0, 800106a <STM32_PLC_Analog_Output_Set+0x26>
	case 0:
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, output);
 8001052:	4601      	mov	r1, r0
		break;
	case 1:
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, output);
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <STM32_PLC_Analog_Output_Set+0x28>)
		break;
	case 2:
		HAL_DAC_SetValue(hanalog2, DAC2_CHANNEL_1, DAC_ALIGN_12B_R, output);
 8001056:	6800      	ldr	r0, [r0, #0]
 8001058:	f009 bf2b 	b.w	800aeb2 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, output);
 800105c:	2200      	movs	r2, #0
 800105e:	2110      	movs	r1, #16
 8001060:	e7f8      	b.n	8001054 <STM32_PLC_Analog_Output_Set+0x10>
		HAL_DAC_SetValue(hanalog2, DAC2_CHANNEL_1, DAC_ALIGN_12B_R, output);
 8001062:	2200      	movs	r2, #0
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <STM32_PLC_Analog_Output_Set+0x2c>)
 8001066:	4611      	mov	r1, r2
 8001068:	e7f5      	b.n	8001056 <STM32_PLC_Analog_Output_Set+0x12>
		break;
	}
}
 800106a:	4770      	bx	lr
 800106c:	20000430 	.word	0x20000430
 8001070:	20000434 	.word	0x20000434

08001074 <STM32_PLC_Analog_Output_Reset>:

void STM32_PLC_Analog_Output_Reset() {
 8001074:	b508      	push	{r3, lr}
	for(uint8_t i = 0; i < 3; i++)
		STM32_PLC_Analog_Output_Set(i, 0);
 8001076:	2100      	movs	r1, #0
 8001078:	4608      	mov	r0, r1
 800107a:	f7ff ffe3 	bl	8001044 <STM32_PLC_Analog_Output_Set>
 800107e:	2100      	movs	r1, #0
 8001080:	2001      	movs	r0, #1
 8001082:	f7ff ffdf 	bl	8001044 <STM32_PLC_Analog_Output_Set>
}
 8001086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		STM32_PLC_Analog_Output_Set(i, 0);
 800108a:	2100      	movs	r1, #0
 800108c:	2002      	movs	r0, #2
 800108e:	f7ff bfd9 	b.w	8001044 <STM32_PLC_Analog_Output_Set>
	...

08001094 <STM32_PLC_Analog_Output_Get>:

uint16_t STM32_PLC_Analog_Output_Get(uint8_t i) {
	switch(i){
 8001094:	2801      	cmp	r0, #1
uint16_t STM32_PLC_Analog_Output_Get(uint8_t i) {
 8001096:	b508      	push	{r3, lr}
 8001098:	4601      	mov	r1, r0
	switch(i){
 800109a:	d008      	beq.n	80010ae <STM32_PLC_Analog_Output_Get+0x1a>
 800109c:	2802      	cmp	r0, #2
 800109e:	d008      	beq.n	80010b2 <STM32_PLC_Analog_Output_Get+0x1e>
 80010a0:	b950      	cbnz	r0, 80010b8 <STM32_PLC_Analog_Output_Get+0x24>
	case 0:
		return HAL_DAC_GetValue(hanalog1, DAC1_CHANNEL_1);
	case 1:
		return HAL_DAC_GetValue(hanalog1, DAC1_CHANNEL_2);
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <STM32_PLC_Analog_Output_Get+0x28>)
	case 2:
		return HAL_DAC_GetValue(hanalog2, DAC1_CHANNEL_2);
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	f009 ff3c 	bl	800af22 <HAL_DAC_GetValue>
 80010aa:	b280      	uxth	r0, r0
	default:
		return 0;
	}
}
 80010ac:	bd08      	pop	{r3, pc}
		return HAL_DAC_GetValue(hanalog1, DAC1_CHANNEL_2);
 80010ae:	2110      	movs	r1, #16
 80010b0:	e7f7      	b.n	80010a2 <STM32_PLC_Analog_Output_Get+0xe>
		return HAL_DAC_GetValue(hanalog2, DAC1_CHANNEL_2);
 80010b2:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <STM32_PLC_Analog_Output_Get+0x2c>)
 80010b4:	2110      	movs	r1, #16
 80010b6:	e7f5      	b.n	80010a4 <STM32_PLC_Analog_Output_Get+0x10>
	switch(i){
 80010b8:	2000      	movs	r0, #0
 80010ba:	e7f7      	b.n	80010ac <STM32_PLC_Analog_Output_Get+0x18>
 80010bc:	20000430 	.word	0x20000430
 80010c0:	20000434 	.word	0x20000434

080010c4 <STM32_PLC_Start_CAN>:
static CAN_HandleTypeDef *can_handler;
static J1939 *j1939_handler;
static void Create_CAN_Filter(CAN_HandleTypeDef *hcan);
static void Create_CAN_Interrupt(CAN_HandleTypeDef *hcan);

void STM32_PLC_Start_CAN(CAN_HandleTypeDef *hcan, J1939 *j1939) {
 80010c4:	b510      	push	{r4, lr}
	can_handler = hcan;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <STM32_PLC_Start_CAN+0x54>)
 80010c8:	6018      	str	r0, [r3, #0]
	j1939_handler = j1939;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <STM32_PLC_Start_CAN+0x58>)
void STM32_PLC_Start_CAN(CAN_HandleTypeDef *hcan, J1939 *j1939) {
 80010cc:	b08a      	sub	sp, #40	; 0x28
	j1939_handler = j1939;
 80010ce:	6019      	str	r1, [r3, #0]
}


static void Create_CAN_Filter(CAN_HandleTypeDef *hcan) {
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80010d0:	2300      	movs	r3, #0
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010d2:	2201      	movs	r2, #1
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
	sFilterConfig.FilterIdHigh = 0x0000;
	sFilterConfig.FilterIdLow = 0x0000;
 80010d8:	e9cd 3300 	strd	r3, r3, [sp]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80010dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010e0:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 80010e2:	4669      	mov	r1, sp
	sFilterConfig.SlaveStartFilterBank = 14;
 80010e4:	230e      	movs	r3, #14
void STM32_PLC_Start_CAN(CAN_HandleTypeDef *hcan, J1939 *j1939) {
 80010e6:	4604      	mov	r4, r0
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010e8:	9207      	str	r2, [sp, #28]
	sFilterConfig.FilterActivation = ENABLE;
 80010ea:	9208      	str	r2, [sp, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80010ec:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 80010ee:	f009 fbe6 	bl	800a8be <HAL_CAN_ConfigFilter>
 80010f2:	b108      	cbz	r0, 80010f8 <STM32_PLC_Start_CAN+0x34>
		Error_Handler();
 80010f4:	f008 fec0 	bl	8009e78 <Error_Handler>
	if (HAL_CAN_Start(hcan) != HAL_OK)
 80010f8:	4620      	mov	r0, r4
 80010fa:	f009 fc4f 	bl	800a99c <HAL_CAN_Start>
 80010fe:	b108      	cbz	r0, 8001104 <STM32_PLC_Start_CAN+0x40>
		Error_Handler();
 8001100:	f008 feba 	bl	8009e78 <Error_Handler>
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001104:	2102      	movs	r1, #2
 8001106:	4620      	mov	r0, r4
 8001108:	f009 fd3d 	bl	800ab86 <HAL_CAN_ActivateNotification>
 800110c:	b108      	cbz	r0, 8001112 <STM32_PLC_Start_CAN+0x4e>
			Error_Handler();
 800110e:	f008 feb3 	bl	8009e78 <Error_Handler>
}
 8001112:	b00a      	add	sp, #40	; 0x28
 8001114:	bd10      	pop	{r4, pc}
 8001116:	bf00      	nop
 8001118:	20000438 	.word	0x20000438
 800111c:	2000043c 	.word	0x2000043c

08001120 <STM32_PLC_CAN_Transmit>:
HAL_StatusTypeDef STM32_PLC_CAN_Transmit(uint8_t TxData[], CAN_TxHeaderTypeDef *TxHeader) {
 8001120:	b507      	push	{r0, r1, r2, lr}
 8001122:	4602      	mov	r2, r0
	return HAL_CAN_AddTxMessage(can_handler, TxHeader, TxData, &TxMailbox);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <STM32_PLC_CAN_Transmit+0x14>)
 8001126:	ab01      	add	r3, sp, #4
 8001128:	6800      	ldr	r0, [r0, #0]
 800112a:	f009 fc65 	bl	800a9f8 <HAL_CAN_AddTxMessage>
}
 800112e:	b003      	add	sp, #12
 8001130:	f85d fb04 	ldr.w	pc, [sp], #4
 8001134:	20000438 	.word	0x20000438

08001138 <STM32_PLC_CAN_Get_ID_Data>:
void STM32_PLC_CAN_Get_ID_Data(uint32_t* ID, uint8_t data[], bool* is_new_message) {
 8001138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800113c:	b08a      	sub	sp, #40	; 0x28
 800113e:	af00      	add	r7, sp, #0
 8001140:	4605      	mov	r5, r0
 8001142:	4688      	mov	r8, r1
 8001144:	4616      	mov	r6, r2
	CAN_RxHeaderTypeDef RxHeader = {0};
 8001146:	2100      	movs	r1, #0
 8001148:	221c      	movs	r2, #28
 800114a:	f107 000c 	add.w	r0, r7, #12
 800114e:	f011 f977 	bl	8012440 <memset>
	HAL_StatusTypeDef status = HAL_CAN_GetRxMessage(can_handler, CAN_RX_FIFO0, &RxHeader, RxData);
 8001152:	4836      	ldr	r0, [pc, #216]	; (800122c <STM32_PLC_CAN_Get_ID_Data+0xf4>)
	uint8_t RxData[8] = {0};
 8001154:	2100      	movs	r1, #0
	HAL_StatusTypeDef status = HAL_CAN_GetRxMessage(can_handler, CAN_RX_FIFO0, &RxHeader, RxData);
 8001156:	6800      	ldr	r0, [r0, #0]
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	f107 020c 	add.w	r2, r7, #12
	uint8_t RxData[8] = {0};
 800115e:	e9c7 1101 	strd	r1, r1, [r7, #4]
	HAL_StatusTypeDef status = HAL_CAN_GetRxMessage(can_handler, CAN_RX_FIFO0, &RxHeader, RxData);
 8001162:	f009 fc99 	bl	800aa98 <HAL_CAN_GetRxMessage>
	if (status != HAL_OK)
 8001166:	b108      	cbz	r0, 800116c <STM32_PLC_CAN_Get_ID_Data+0x34>
		Error_Handler();
 8001168:	f008 fe86 	bl	8009e78 <Error_Handler>
	if(RxHeader.DLC == 0){
 800116c:	69fc      	ldr	r4, [r7, #28]
 800116e:	b924      	cbnz	r4, 800117a <STM32_PLC_CAN_Get_ID_Data+0x42>
		*is_new_message = false;
 8001170:	7034      	strb	r4, [r6, #0]
}
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*ID = RxHeader.ExtId;
 800117a:	e9d7 c203 	ldrd	ip, r2, [r7, #12]
	if(RxHeader.IDE == CAN_ID_STD)
 800117e:	697b      	ldr	r3, [r7, #20]
		*ID = RxHeader.StdId;
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf14      	ite	ne
 8001184:	4611      	movne	r1, r2
 8001186:	4661      	moveq	r1, ip
 8001188:	6029      	str	r1, [r5, #0]
	memcpy(data, RxData, 8);
 800118a:	f107 0504 	add.w	r5, r7, #4
 800118e:	cd03      	ldmia	r5!, {r0, r1}
 8001190:	f8c8 1004 	str.w	r1, [r8, #4]
	*is_new_message = true;
 8001194:	f04f 0101 	mov.w	r1, #1
	memcpy(data, RxData, 8);
 8001198:	f8c8 0000 	str.w	r0, [r8]
	if(RxHeader.IDE == CAN_ID_STD){
 800119c:	466d      	mov	r5, sp
	*is_new_message = true;
 800119e:	7031      	strb	r1, [r6, #0]
	if(RxHeader.IDE == CAN_ID_STD){
 80011a0:	b2e6      	uxtb	r6, r4
 80011a2:	d121      	bne.n	80011e8 <STM32_PLC_CAN_Get_ID_Data+0xb0>
		uint8_t send_data[4 + RxHeader.DLC];
 80011a4:	f104 020b 	add.w	r2, r4, #11
 80011a8:	f022 0207 	bic.w	r2, r2, #7
 80011ac:	ebad 0d02 	sub.w	sp, sp, r2
 80011b0:	1d21      	adds	r1, r4, #4
 80011b2:	4668      	mov	r0, sp
		send_data[0] = 0; /* We sending a CAN-bus message to PC. See #define at USB.c */
 80011b4:	f88d 3000 	strb.w	r3, [sp]
		send_data[1] = RxHeader.StdId << 8; /* MSB */
 80011b8:	f88d 3001 	strb.w	r3, [sp, #1]
		send_data[2] = RxHeader.StdId; /* LSB */
 80011bc:	f88d c002 	strb.w	ip, [sp, #2]
		send_data[3] = RxHeader.DLC;
 80011c0:	f88d 6003 	strb.w	r6, [sp, #3]
		for(uint8_t i = 0; i < RxHeader.DLC; i++)
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d804      	bhi.n	80011d6 <STM32_PLC_CAN_Get_ID_Data+0x9e>
		CDC_Transmit_FS(send_data, sizeof(send_data));
 80011cc:	b289      	uxth	r1, r1
 80011ce:	f010 ff01 	bl	8011fd4 <CDC_Transmit_FS>
 80011d2:	46ad      	mov	sp, r5
 80011d4:	e7cd      	b.n	8001172 <STM32_PLC_CAN_Get_ID_Data+0x3a>
			send_data[4+i] = RxData[i];
 80011d6:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80011da:	18c6      	adds	r6, r0, r3
 80011dc:	4463      	add	r3, ip
 80011de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011e2:	7133      	strb	r3, [r6, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	e7ed      	b.n	80011c4 <STM32_PLC_CAN_Get_ID_Data+0x8c>
		uint8_t send_data[7 + RxHeader.DLC];
 80011e8:	f104 030e 	add.w	r3, r4, #14
 80011ec:	f023 0307 	bic.w	r3, r3, #7
 80011f0:	ebad 0d03 	sub.w	sp, sp, r3
		send_data[0] = 0; /* We sending a CAN-bus message to PC. See #define at USB.c */
 80011f4:	2300      	movs	r3, #0
		uint8_t send_data[7 + RxHeader.DLC];
 80011f6:	1de1      	adds	r1, r4, #7
 80011f8:	4668      	mov	r0, sp
		send_data[0] = 0; /* We sending a CAN-bus message to PC. See #define at USB.c */
 80011fa:	f88d 3000 	strb.w	r3, [sp]
		send_data[1] = RxHeader.ExtId << 24; /* MSB */
 80011fe:	f88d 3001 	strb.w	r3, [sp, #1]
		send_data[2] = RxHeader.ExtId << 16;
 8001202:	f88d 3002 	strb.w	r3, [sp, #2]
		send_data[3] = RxHeader.ExtId << 8;
 8001206:	f88d 3003 	strb.w	r3, [sp, #3]
		send_data[4] = RxHeader.ExtId; /* LSB */
 800120a:	f88d 2004 	strb.w	r2, [sp, #4]
		send_data[5] = RxHeader.DLC;
 800120e:	f88d 6005 	strb.w	r6, [sp, #5]
		for(uint8_t i = 0; i < RxHeader.DLC; i++)
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	429c      	cmp	r4, r3
 8001218:	d9d8      	bls.n	80011cc <STM32_PLC_CAN_Get_ID_Data+0x94>
			send_data[6+i] = RxData[i];
 800121a:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800121e:	18c6      	adds	r6, r0, r3
 8001220:	4463      	add	r3, ip
 8001222:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001226:	71b3      	strb	r3, [r6, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	e7f2      	b.n	8001212 <STM32_PLC_CAN_Get_ID_Data+0xda>
 800122c:	20000438 	.word	0x20000438

08001230 <HAL_CAN_RxFifo0MsgPendingCallback>:
	Open_SAE_J1939_Listen_For_Messages(j1939_handler);
 8001230:	4b01      	ldr	r3, [pc, #4]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	f001 b9a0 	b.w	8002578 <Open_SAE_J1939_Listen_For_Messages>
 8001238:	2000043c 	.word	0x2000043c

0800123c <STM32_PLC_Digital_Input_Get>:
 *      Author: Daniel Mårtensson
 */

#include "Functions.h"

bool STM32_PLC_Digital_Input_Get(uint8_t i) {
 800123c:	b508      	push	{r3, lr}
 800123e:	2807      	cmp	r0, #7
 8001240:	d820      	bhi.n	8001284 <STM32_PLC_Digital_Input_Get+0x48>
 8001242:	e8df f000 	tbb	[pc, r0]
 8001246:	0c04      	.short	0x0c04
 8001248:	1412100e 	.word	0x1412100e
 800124c:	1c18      	.short	0x1c18
	switch (i) {
	case 0:
		return HAL_GPIO_ReadPin(DI0_GPIO_Port, DI0_Pin);
 800124e:	2104      	movs	r1, #4
	case 1:
		return HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <STM32_PLC_Digital_Input_Get+0x4c>)
	case 5:
		return HAL_GPIO_ReadPin(DI5_GPIO_Port, DI5_Pin);
	case 6:
		return HAL_GPIO_ReadPin(DI6_GPIO_Port, DI6_Pin);
	case 7:
		return HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
 8001252:	f00a f83b 	bl	800b2cc <HAL_GPIO_ReadPin>
 8001256:	3800      	subs	r0, #0
 8001258:	bf18      	it	ne
 800125a:	2001      	movne	r0, #1
	default:
		return 0;
	}
}
 800125c:	bd08      	pop	{r3, pc}
		return HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 800125e:	2108      	movs	r1, #8
 8001260:	e7f6      	b.n	8001250 <STM32_PLC_Digital_Input_Get+0x14>
		return HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 8001262:	2110      	movs	r1, #16
 8001264:	e7f4      	b.n	8001250 <STM32_PLC_Digital_Input_Get+0x14>
		return HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 8001266:	2120      	movs	r1, #32
 8001268:	e7f2      	b.n	8001250 <STM32_PLC_Digital_Input_Get+0x14>
		return HAL_GPIO_ReadPin(DI4_GPIO_Port, DI4_Pin);
 800126a:	2140      	movs	r1, #64	; 0x40
 800126c:	e7f0      	b.n	8001250 <STM32_PLC_Digital_Input_Get+0x14>
		return HAL_GPIO_ReadPin(DI5_GPIO_Port, DI5_Pin);
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <STM32_PLC_Digital_Input_Get+0x50>)
 8001270:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001274:	e7ed      	b.n	8001252 <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI6_GPIO_Port, DI6_Pin);
 8001276:	f44f 7100 	mov.w	r1, #512	; 0x200
		return HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <STM32_PLC_Digital_Input_Get+0x54>)
 800127c:	e7e9      	b.n	8001252 <STM32_PLC_Digital_Input_Get+0x16>
 800127e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001282:	e7fa      	b.n	800127a <STM32_PLC_Digital_Input_Get+0x3e>
bool STM32_PLC_Digital_Input_Get(uint8_t i) {
 8001284:	2000      	movs	r0, #0
 8001286:	e7e9      	b.n	800125c <STM32_PLC_Digital_Input_Get+0x20>
 8001288:	48001000 	.word	0x48001000
 800128c:	48000800 	.word	0x48000800
 8001290:	48001400 	.word	0x48001400

08001294 <STM32_PLC_Digital_Input_Get_Stop>:

bool STM32_PLC_Digital_Input_Get_Stop() {
 8001294:	b508      	push	{r3, lr}
	return HAL_GPIO_ReadPin(STOP_LOGGING_CONTROL_GPIO_Port, STOP_LOGGING_CONTROL_Pin);
 8001296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <STM32_PLC_Digital_Input_Get_Stop+0x14>)
 800129c:	f00a f816 	bl	800b2cc <HAL_GPIO_ReadPin>
}
 80012a0:	3800      	subs	r0, #0
 80012a2:	bf18      	it	ne
 80012a4:	2001      	movne	r0, #1
 80012a6:	bd08      	pop	{r3, pc}
 80012a8:	48000800 	.word	0x48000800

080012ac <STM32_PLC_Start_Encoder>:
static TIM_HandleTypeDef* tim4_handle;
static TIM_HandleTypeDef* tim19_handle;
static uint16_t encoder_pulses_per_revolution[2] = {0};
static int16_t encoder[2] = {0};

void STM32_PLC_Start_Encoder(TIM_HandleTypeDef* htim4, TIM_HandleTypeDef* htim19) {
 80012ac:	b538      	push	{r3, r4, r5, lr}
 80012ae:	460c      	mov	r4, r1
	/* Encoder - Prescaler does not effect encoder */
	if(HAL_TIM_Encoder_Start(htim4, TIM_CHANNEL_ALL) != HAL_OK)
 80012b0:	213c      	movs	r1, #60	; 0x3c
void STM32_PLC_Start_Encoder(TIM_HandleTypeDef* htim4, TIM_HandleTypeDef* htim19) {
 80012b2:	4605      	mov	r5, r0
	if(HAL_TIM_Encoder_Start(htim4, TIM_CHANNEL_ALL) != HAL_OK)
 80012b4:	f00c fc8d 	bl	800dbd2 <HAL_TIM_Encoder_Start>
 80012b8:	b108      	cbz	r0, 80012be <STM32_PLC_Start_Encoder+0x12>
		Error_Handler();
 80012ba:	f008 fddd 	bl	8009e78 <Error_Handler>
	if(HAL_TIM_Encoder_Start(htim19, TIM_CHANNEL_ALL) != HAL_OK)
 80012be:	213c      	movs	r1, #60	; 0x3c
 80012c0:	4620      	mov	r0, r4
 80012c2:	f00c fc86 	bl	800dbd2 <HAL_TIM_Encoder_Start>
 80012c6:	b108      	cbz	r0, 80012cc <STM32_PLC_Start_Encoder+0x20>
		Error_Handler();
 80012c8:	f008 fdd6 	bl	8009e78 <Error_Handler>

	/* Save */
	tim4_handle = htim4;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <STM32_PLC_Start_Encoder+0x2c>)
 80012ce:	601d      	str	r5, [r3, #0]
	tim19_handle = htim19;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <STM32_PLC_Start_Encoder+0x30>)
 80012d2:	601c      	str	r4, [r3, #0]
}
 80012d4:	bd38      	pop	{r3, r4, r5, pc}
 80012d6:	bf00      	nop
 80012d8:	2000044c 	.word	0x2000044c
 80012dc:	20000448 	.word	0x20000448

080012e0 <STM32_PLC_Encoder_Get_Raw>:
	float pulses = (float)encoder_pulses_per_revolution[i];
	return ((float)STM32_PLC_Encoder_Get_Raw(i))/pulses;
}

int16_t STM32_PLC_Encoder_Get_Raw(uint8_t i) {
	if(i == 0)
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <STM32_PLC_Encoder_Get_Raw+0x2c>)
 80012e2:	b948      	cbnz	r0, 80012f8 <STM32_PLC_Encoder_Get_Raw+0x18>
		encoder[i] += __HAL_TIM_GET_COUNTER(tim4_handle);
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <STM32_PLC_Encoder_Get_Raw+0x30>)
 80012e6:	8819      	ldrh	r1, [r3, #0]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012ee:	440a      	add	r2, r1
 80012f0:	801a      	strh	r2, [r3, #0]
	else
		encoder[i] += __HAL_TIM_GET_COUNTER(tim19_handle);
	return encoder[i];
}
 80012f2:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80012f6:	4770      	bx	lr
		encoder[i] += __HAL_TIM_GET_COUNTER(tim19_handle);
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <STM32_PLC_Encoder_Get_Raw+0x34>)
 80012fa:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001304:	440a      	add	r2, r1
 8001306:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 800130a:	e7f2      	b.n	80012f2 <STM32_PLC_Encoder_Get_Raw+0x12>
 800130c:	20000440 	.word	0x20000440
 8001310:	2000044c 	.word	0x2000044c
 8001314:	20000448 	.word	0x20000448

08001318 <STM32_PLC_Encoder_Get>:
float STM32_PLC_Encoder_Get(uint8_t i) {
 8001318:	b508      	push	{r3, lr}
	if(encoder_pulses_per_revolution[i] == 0)
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <STM32_PLC_Encoder_Get+0x30>)
 800131c:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 8001320:	b912      	cbnz	r2, 8001328 <STM32_PLC_Encoder_Get+0x10>
		encoder_pulses_per_revolution[i] = 1;
 8001322:	2201      	movs	r2, #1
 8001324:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
	float pulses = (float)encoder_pulses_per_revolution[i];
 8001328:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return ((float)STM32_PLC_Encoder_Get_Raw(i))/pulses;
 8001334:	f7ff ffd4 	bl	80012e0 <STM32_PLC_Encoder_Get_Raw>
 8001338:	ee07 0a10 	vmov	s14, r0
 800133c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
 8001340:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001344:	bd08      	pop	{r3, pc}
 8001346:	bf00      	nop
 8001348:	20000444 	.word	0x20000444

0800134c <STM32_PLC_Encoder_Set_Pulses_Per_Revolutions>:

void STM32_PLC_Encoder_Set_Pulses_Per_Revolutions(uint8_t i, uint16_t pulses_per_revolution) {
	encoder_pulses_per_revolution[i] = pulses_per_revolution;
 800134c:	4b01      	ldr	r3, [pc, #4]	; (8001354 <STM32_PLC_Encoder_Set_Pulses_Per_Revolutions+0x8>)
 800134e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
}
 8001352:	4770      	bx	lr
 8001354:	20000444 	.word	0x20000444

08001358 <STM32_PLC_Initial_Startup>:
 */

#include "Functions.h"
#include "Touch Screen/Touch_screen.h"

void STM32_PLC_Initial_Startup(J1939 *j1939) {
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	ed2d 8b02 	vpush	{d8}
 800135e:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 8001362:	4605      	mov	r5, r0

	/* Mount SD card */
	FRESULT status = STM32_PLC_SD_Mont_Card();
 8001364:	f000 fe3a 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
	char text[700];
	if(status != FR_OK){
 8001368:	4602      	mov	r2, r0
 800136a:	b130      	cbz	r0, 800137a <STM32_PLC_Initial_Startup+0x22>
		sprintf(text, "SD mount error with FatFS code:%i", status);
 800136c:	49c5      	ldr	r1, [pc, #788]	; (8001684 <STM32_PLC_Initial_Startup+0x32c>)
 800136e:	a833      	add	r0, sp, #204	; 0xcc
 8001370:	f011 fcd8 	bl	8012d24 <siprintf>
		STM32_PLC_LCD_Show_Information_OK_Dialog(text);
 8001374:	a833      	add	r0, sp, #204	; 0xcc
 8001376:	f002 f9cd 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
	}

	/* Calibration setup */
	float Scale_X, Scale_Y, Bias_X, Bias_Y;
	sprintf(text, "0%s0%s0%s0%s", DELIMITER, DELIMITER, DELIMITER, DELIMITER);
 800137a:	4cc3      	ldr	r4, [pc, #780]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 800137c:	49c3      	ldr	r1, [pc, #780]	; (800168c <STM32_PLC_Initial_Startup+0x334>)
 800137e:	4623      	mov	r3, r4
 8001380:	4622      	mov	r2, r4
 8001382:	e9cd 4400 	strd	r4, r4, [sp]
 8001386:	a833      	add	r0, sp, #204	; 0xcc
 8001388:	f011 fccc 	bl	8012d24 <siprintf>
	status = STM32_PLC_SD_Create_New_File_With_Read_Write("TOUCH.TXT", text, false);
 800138c:	2200      	movs	r2, #0
 800138e:	48c0      	ldr	r0, [pc, #768]	; (8001690 <STM32_PLC_Initial_Startup+0x338>)
 8001390:	a933      	add	r1, sp, #204	; 0xcc
 8001392:	f000 fe8d 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	if(status == FR_OK) {
 8001396:	4602      	mov	r2, r0
 8001398:	2800      	cmp	r0, #0
 800139a:	f040 8281 	bne.w	80018a0 <STM32_PLC_Initial_Startup+0x548>
		/* File just has been created */
		STM32_PLC_LCD_Calibrate_Touch();
 800139e:	f000 fbed 	bl	8001b7c <STM32_PLC_LCD_Calibrate_Touch>
		STM32_PLC_LCD_Get_Touch_Calibration_Parameters(&Scale_X, &Scale_Y, &Bias_X, &Bias_Y);
 80013a2:	ab18      	add	r3, sp, #96	; 0x60
 80013a4:	aa17      	add	r2, sp, #92	; 0x5c
 80013a6:	a916      	add	r1, sp, #88	; 0x58
 80013a8:	a815      	add	r0, sp, #84	; 0x54
 80013aa:	f000 fbe9 	bl	8001b80 <STM32_PLC_LCD_Get_Touch_Calibration_Parameters>
		sprintf(text, "%f%s%f%s%f%s%f", Scale_X, DELIMITER, Scale_Y, DELIMITER, Bias_X, DELIMITER, Bias_Y);
 80013ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 80013b0:	f7ff f8ca 	bl	8000548 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80013ba:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80013be:	f7ff f8c3 	bl	8000548 <__aeabi_f2d>
 80013c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80013c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80013c8:	9408      	str	r4, [sp, #32]
 80013ca:	f7ff f8bd 	bl	8000548 <__aeabi_f2d>
 80013ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80013d2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80013d4:	9404      	str	r4, [sp, #16]
 80013d6:	f7ff f8b7 	bl	8000548 <__aeabi_f2d>
 80013da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80013de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013e2:	9400      	str	r4, [sp, #0]
 80013e4:	49ab      	ldr	r1, [pc, #684]	; (8001694 <STM32_PLC_Initial_Startup+0x33c>)
 80013e6:	a833      	add	r0, sp, #204	; 0xcc
 80013e8:	f011 fc9c 	bl	8012d24 <siprintf>
		STM32_PLC_SD_Open_Existing_File_With_Write("TOUCH.TXT");
 80013ec:	48a8      	ldr	r0, [pc, #672]	; (8001690 <STM32_PLC_Initial_Startup+0x338>)
 80013ee:	f000 fe17 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
		STM32_PLC_SD_Write_File(text);
 80013f2:	a833      	add	r0, sp, #204	; 0xcc
 80013f4:	f000 fe56 	bl	80020a4 <STM32_PLC_SD_Write_File>
		STM32_PLC_SD_Close_File();
 80013f8:	f000 fe1a 	bl	8002030 <STM32_PLC_SD_Close_File>
		sprintf(text, "SD write/read error with FatFS code:%i", status);
		STM32_PLC_LCD_Show_Information_OK_Dialog(text);
	}

	/* Program select */
	STM32_PLC_SD_Create_New_File_With_Read_Write("PROGRAM.TXT", "0", false);
 80013fc:	2200      	movs	r2, #0
 80013fe:	49a6      	ldr	r1, [pc, #664]	; (8001698 <STM32_PLC_Initial_Startup+0x340>)
 8001400:	48a6      	ldr	r0, [pc, #664]	; (800169c <STM32_PLC_Initial_Startup+0x344>)
	float parameters[20] = {0};
	for(uint8_t i = 0; i < 20; i++)
		if(i == 0)
			parameters[i] = atoff(strtok(text, DELIMITER));
		else
			parameters[i] = atoff(strtok(NULL, DELIMITER));
 8001402:	4fa1      	ldr	r7, [pc, #644]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
	STM32_PLC_SD_Create_New_File_With_Read_Write("PROGRAM.TXT", "0", false);
 8001404:	f000 fe54 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Read("PROGRAM.TXT");
 8001408:	48a4      	ldr	r0, [pc, #656]	; (800169c <STM32_PLC_Initial_Startup+0x344>)
 800140a:	f000 fe01 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 800140e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001412:	a833      	add	r0, sp, #204	; 0xcc
 8001414:	f000 fe40 	bl	8002098 <STM32_PLC_SD_Read_File>
	uint8_t program_number = atoi(text);
 8001418:	a833      	add	r0, sp, #204	; 0xcc
 800141a:	f010 ffd4 	bl	80123c6 <atoi>
	STM32_PLC_LCD_Set_Control_Program(program_number);
 800141e:	b2c2      	uxtb	r2, r0
 8001420:	4610      	mov	r0, r2
 8001422:	9212      	str	r2, [sp, #72]	; 0x48
 8001424:	f002 fca8 	bl	8003d78 <STM32_PLC_LCD_Set_Control_Program>
	STM32_PLC_SD_Close_File();
 8001428:	f000 fe02 	bl	8002030 <STM32_PLC_SD_Close_File>
	sprintf(filename, "PROGRAM%i.TXT", program_number);
 800142c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800142e:	499c      	ldr	r1, [pc, #624]	; (80016a0 <STM32_PLC_Initial_Startup+0x348>)
 8001430:	a81a      	add	r0, sp, #104	; 0x68
 8001432:	f011 fc77 	bl	8012d24 <siprintf>
	sprintf(text, "0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0%s0", DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER);
 8001436:	4b94      	ldr	r3, [pc, #592]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 8001438:	499a      	ldr	r1, [pc, #616]	; (80016a4 <STM32_PLC_Initial_Startup+0x34c>)
 800143a:	9400      	str	r4, [sp, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001442:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001446:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800144a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800144e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001452:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001456:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800145a:	a833      	add	r0, sp, #204	; 0xcc
 800145c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8001460:	f011 fc60 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Create_New_File_With_Read_Write(filename, text, false);
 8001464:	2200      	movs	r2, #0
 8001466:	a933      	add	r1, sp, #204	; 0xcc
 8001468:	a81a      	add	r0, sp, #104	; 0x68
 800146a:	f000 fe21 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Read(filename);
 800146e:	a81a      	add	r0, sp, #104	; 0x68
 8001470:	f000 fdce 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 8001474:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001478:	a833      	add	r0, sp, #204	; 0xcc
 800147a:	f000 fe0d 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 800147e:	f000 fdd7 	bl	8002030 <STM32_PLC_SD_Close_File>
	float parameters[20] = {0};
 8001482:	2250      	movs	r2, #80	; 0x50
 8001484:	2100      	movs	r1, #0
 8001486:	a81f      	add	r0, sp, #124	; 0x7c
 8001488:	f010 ffda 	bl	8012440 <memset>
 800148c:	2600      	movs	r6, #0
			parameters[i] = atoff(strtok(text, DELIMITER));
 800148e:	4639      	mov	r1, r7
		if(i == 0)
 8001490:	2e00      	cmp	r6, #0
 8001492:	f040 823e 	bne.w	8001912 <STM32_PLC_Initial_Startup+0x5ba>
			parameters[i] = atoff(strtok(text, DELIMITER));
 8001496:	a833      	add	r0, sp, #204	; 0xcc
 8001498:	f012 faee 	bl	8013a78 <strtok>
 800149c:	f010 ff90 	bl	80123c0 <atoff>
 80014a0:	ed8d 0a1f 	vstr	s0, [sp, #124]	; 0x7c
	for(uint8_t i = 0; i < 20; i++)
 80014a4:	3601      	adds	r6, #1
 80014a6:	2e14      	cmp	r6, #20
 80014a8:	d1f1      	bne.n	800148e <STM32_PLC_Initial_Startup+0x136>
	STM32_PLC_LCD_Set_Program_Parameters(parameters);
 80014aa:	a81f      	add	r0, sp, #124	; 0x7c
 80014ac:	f002 fc6a 	bl	8003d84 <STM32_PLC_LCD_Set_Program_Parameters>

	/* Analog input settings */
	sprintf(text, "0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0%s0,0,0", DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER);
 80014b0:	4b75      	ldr	r3, [pc, #468]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 80014b2:	497d      	ldr	r1, [pc, #500]	; (80016a8 <STM32_PLC_Initial_Startup+0x350>)
 80014b4:	461a      	mov	r2, r3
 80014b6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80014ba:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80014be:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80014c2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80014c6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80014ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80014ce:	e9cd 4400 	strd	r4, r4, [sp]
 80014d2:	a833      	add	r0, sp, #204	; 0xcc
 80014d4:	f011 fc26 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Create_New_File_With_Read_Write("ANALOG.TXT", text, false);
 80014d8:	2200      	movs	r2, #0
 80014da:	a933      	add	r1, sp, #204	; 0xcc
 80014dc:	4873      	ldr	r0, [pc, #460]	; (80016ac <STM32_PLC_Initial_Startup+0x354>)
 80014de:	f000 fde7 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Read("ANALOG.TXT");
 80014e2:	4872      	ldr	r0, [pc, #456]	; (80016ac <STM32_PLC_Initial_Startup+0x354>)
 80014e4:	f000 fd94 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 80014e8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80014ec:	a833      	add	r0, sp, #204	; 0xcc
 80014ee:	f000 fdd3 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 80014f2:	f000 fd9d 	bl	8002030 <STM32_PLC_SD_Close_File>
	/* Collect analog values */
	char delimiters[4];
	sprintf(delimiters, "%s,", DELIMITER); /* Multiple delimiter */
 80014f6:	4a64      	ldr	r2, [pc, #400]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 80014f8:	496d      	ldr	r1, [pc, #436]	; (80016b0 <STM32_PLC_Initial_Startup+0x358>)
 80014fa:	a819      	add	r0, sp, #100	; 0x64
 80014fc:	f011 fc12 	bl	8012d24 <siprintf>
 8001500:	2600      	movs	r6, #0
 8001502:	b2f7      	uxtb	r7, r6
	float min_max_bias[3]; /* 3 values per each analog input channel */
	for(uint8_t i = 0; i < 17; i++) {
		if(i == 0){
			min_max_bias[0] = atoff(strtok(text, delimiters));
 8001504:	a919      	add	r1, sp, #100	; 0x64
		if(i == 0){
 8001506:	2e00      	cmp	r6, #0
 8001508:	f040 820e 	bne.w	8001928 <STM32_PLC_Initial_Startup+0x5d0>
			min_max_bias[0] = atoff(strtok(text, delimiters));
 800150c:	a833      	add	r0, sp, #204	; 0xcc
 800150e:	f012 fab3 	bl	8013a78 <strtok>
 8001512:	f010 ff55 	bl	80123c0 <atoff>
			min_max_bias[1] = atoff(strtok(NULL, delimiters));
 8001516:	a919      	add	r1, sp, #100	; 0x64
 8001518:	4630      	mov	r0, r6
			min_max_bias[0] = atoff(strtok(text, delimiters));
 800151a:	eeb0 8a40 	vmov.f32	s16, s0
			min_max_bias[1] = atoff(strtok(NULL, delimiters));
 800151e:	f012 faab 	bl	8013a78 <strtok>
 8001522:	f010 ff4d 	bl	80123c0 <atoff>
			min_max_bias[2] = atoff(strtok(NULL, delimiters));
 8001526:	a919      	add	r1, sp, #100	; 0x64
 8001528:	4630      	mov	r0, r6
			min_max_bias[1] = atoff(strtok(NULL, delimiters));
 800152a:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
			min_max_bias[2] = atoff(strtok(NULL, delimiters));
 800152e:	f012 faa3 	bl	8013a78 <strtok>
 8001532:	f010 ff45 	bl	80123c0 <atoff>
 8001536:	eddd 0a12 	vldr	s1, [sp, #72]	; 0x48
 800153a:	eeb0 1a40 	vmov.f32	s2, s0
			min_max_bias[0] = atoff(strtok(NULL, delimiters));
			min_max_bias[1] = atoff(strtok(NULL, delimiters));
			min_max_bias[2] = atoff(strtok(NULL, delimiters));
		}
		if(i <= 11)
			STM32_PLC_Analog_Input_ADC_Set_Calibration(i, min_max_bias[0], min_max_bias[1], min_max_bias[2]);
 800153e:	eeb0 0a48 	vmov.f32	s0, s16
 8001542:	4638      	mov	r0, r7
 8001544:	f7ff fd06 	bl	8000f54 <STM32_PLC_Analog_Input_ADC_Set_Calibration>
	for(uint8_t i = 0; i < 17; i++) {
 8001548:	3601      	adds	r6, #1
 800154a:	2e11      	cmp	r6, #17
 800154c:	d1d9      	bne.n	8001502 <STM32_PLC_Initial_Startup+0x1aa>
		else
			STM32_PLC_Analog_Input_DADC_Set_Calibration(i - 12, min_max_bias[0], min_max_bias[1], min_max_bias[2]);
	}

	/* SDADC settings */
	sprintf(text, "0,0%s0,0%s0,0%s0,0%s0,0%s0,0%s0,0%s0,0%s0,0", DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER);
 800154e:	4b4e      	ldr	r3, [pc, #312]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 8001550:	4958      	ldr	r1, [pc, #352]	; (80016b4 <STM32_PLC_Initial_Startup+0x35c>)
 8001552:	461a      	mov	r2, r3
 8001554:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001558:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800155c:	e9cd 4400 	strd	r4, r4, [sp]
 8001560:	a833      	add	r0, sp, #204	; 0xcc
 8001562:	f011 fbdf 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Create_New_File_With_Read_Write("SDADC.TXT", text, false);
 8001566:	2200      	movs	r2, #0
 8001568:	a933      	add	r1, sp, #204	; 0xcc
 800156a:	4853      	ldr	r0, [pc, #332]	; (80016b8 <STM32_PLC_Initial_Startup+0x360>)
 800156c:	f000 fda0 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Read("SDADC.TXT");
 8001570:	4851      	ldr	r0, [pc, #324]	; (80016b8 <STM32_PLC_Initial_Startup+0x360>)
 8001572:	f000 fd4d 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 8001576:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800157a:	a833      	add	r0, sp, #204	; 0xcc
 800157c:	f000 fd8c 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 8001580:	f000 fd56 	bl	8002030 <STM32_PLC_SD_Close_File>
			break;
		}
	}

	/* PWM settings */
	sprintf(text, "0%s0", DELIMITER);
 8001584:	4a40      	ldr	r2, [pc, #256]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 8001586:	494d      	ldr	r1, [pc, #308]	; (80016bc <STM32_PLC_Initial_Startup+0x364>)
 8001588:	a833      	add	r0, sp, #204	; 0xcc
 800158a:	f011 fbcb 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Create_New_File_With_Read_Write("PWM.TXT", text, false);
 800158e:	2200      	movs	r2, #0
 8001590:	a933      	add	r1, sp, #204	; 0xcc
 8001592:	484b      	ldr	r0, [pc, #300]	; (80016c0 <STM32_PLC_Initial_Startup+0x368>)
 8001594:	f000 fd8c 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Read("PWM.TXT");
 8001598:	4849      	ldr	r0, [pc, #292]	; (80016c0 <STM32_PLC_Initial_Startup+0x368>)
 800159a:	f000 fd39 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 800159e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80015a2:	a833      	add	r0, sp, #204	; 0xcc
 80015a4:	f000 fd78 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 80015a8:	f000 fd42 	bl	8002030 <STM32_PLC_SD_Close_File>
	uint16_t prescaler_PWM_0_3 = atoi(strtok(text, DELIMITER));
 80015ac:	4936      	ldr	r1, [pc, #216]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 80015ae:	a833      	add	r0, sp, #204	; 0xcc
 80015b0:	f012 fa62 	bl	8013a78 <strtok>
 80015b4:	f010 ff07 	bl	80123c6 <atoi>
	uint16_t prescaler_PWM_4_7 = atoi(strtok(NULL, DELIMITER));
 80015b8:	4933      	ldr	r1, [pc, #204]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
	uint16_t prescaler_PWM_0_3 = atoi(strtok(text, DELIMITER));
 80015ba:	4607      	mov	r7, r0
	uint16_t prescaler_PWM_4_7 = atoi(strtok(NULL, DELIMITER));
 80015bc:	2000      	movs	r0, #0
 80015be:	f012 fa5b 	bl	8013a78 <strtok>
 80015c2:	f010 ff00 	bl	80123c6 <atoi>
 80015c6:	4606      	mov	r6, r0
	STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler_PWM_0_3);
 80015c8:	b2b8      	uxth	r0, r7
 80015ca:	f000 fbb3 	bl	8001d34 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>
	STM32_PLC_PWM4_To_PWM7_Set_Prescaler(prescaler_PWM_4_7);
 80015ce:	b2b0      	uxth	r0, r6
 80015d0:	f000 fbba 	bl	8001d48 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>

	/* Encoder settings */
	sprintf(text, "1%s1", DELIMITER); /* Important that they cannot be zeros */
 80015d4:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 80015d6:	493b      	ldr	r1, [pc, #236]	; (80016c4 <STM32_PLC_Initial_Startup+0x36c>)
 80015d8:	a833      	add	r0, sp, #204	; 0xcc
 80015da:	f011 fba3 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Create_New_File_With_Read_Write("ENCODER.TXT", text, false);
 80015de:	2200      	movs	r2, #0
 80015e0:	a933      	add	r1, sp, #204	; 0xcc
 80015e2:	4839      	ldr	r0, [pc, #228]	; (80016c8 <STM32_PLC_Initial_Startup+0x370>)
 80015e4:	f000 fd64 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Read("ENCODER.TXT");
 80015e8:	4837      	ldr	r0, [pc, #220]	; (80016c8 <STM32_PLC_Initial_Startup+0x370>)
 80015ea:	f000 fd11 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 80015ee:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80015f2:	a833      	add	r0, sp, #204	; 0xcc
 80015f4:	f000 fd50 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 80015f8:	f000 fd1a 	bl	8002030 <STM32_PLC_SD_Close_File>
	uint16_t pulses_per_revolution_0 = atoi(strtok(text, DELIMITER));
 80015fc:	4922      	ldr	r1, [pc, #136]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 80015fe:	a833      	add	r0, sp, #204	; 0xcc
 8001600:	f012 fa3a 	bl	8013a78 <strtok>
 8001604:	f010 fedf 	bl	80123c6 <atoi>
	uint16_t pulses_per_revolution_1 = atoi(strtok(NULL, DELIMITER));
 8001608:	491f      	ldr	r1, [pc, #124]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
	uint16_t pulses_per_revolution_0 = atoi(strtok(text, DELIMITER));
 800160a:	4607      	mov	r7, r0
	uint16_t pulses_per_revolution_1 = atoi(strtok(NULL, DELIMITER));
 800160c:	2000      	movs	r0, #0
 800160e:	f012 fa33 	bl	8013a78 <strtok>
 8001612:	f010 fed8 	bl	80123c6 <atoi>
	STM32_PLC_Encoder_Set_Pulses_Per_Revolutions(0, pulses_per_revolution_0);
 8001616:	b2b9      	uxth	r1, r7
	uint16_t pulses_per_revolution_1 = atoi(strtok(NULL, DELIMITER));
 8001618:	4606      	mov	r6, r0
	STM32_PLC_Encoder_Set_Pulses_Per_Revolutions(0, pulses_per_revolution_0);
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fe96 	bl	800134c <STM32_PLC_Encoder_Set_Pulses_Per_Revolutions>
	STM32_PLC_Encoder_Set_Pulses_Per_Revolutions(1, pulses_per_revolution_1);
 8001620:	b2b1      	uxth	r1, r6
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff fe92 	bl	800134c <STM32_PLC_Encoder_Set_Pulses_Per_Revolutions>

	/* SAE J1939 Name */
	sprintf(text, "0%s0%s0%s0%s0%s0%s0%s0%s0", DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER);
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 800162a:	4928      	ldr	r1, [pc, #160]	; (80016cc <STM32_PLC_Initial_Startup+0x374>)
 800162c:	461a      	mov	r2, r3
 800162e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001632:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001636:	e9cd 4400 	strd	r4, r4, [sp]
 800163a:	a833      	add	r0, sp, #204	; 0xcc
 800163c:	f011 fb72 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Create_New_File_With_Read_Write("NAME.TXT", text, false);
 8001640:	2200      	movs	r2, #0
 8001642:	a933      	add	r1, sp, #204	; 0xcc
 8001644:	4822      	ldr	r0, [pc, #136]	; (80016d0 <STM32_PLC_Initial_Startup+0x378>)
 8001646:	f000 fd33 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Read("NAME.TXT");
 800164a:	4821      	ldr	r0, [pc, #132]	; (80016d0 <STM32_PLC_Initial_Startup+0x378>)
 800164c:	f000 fce0 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 8001650:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001654:	a833      	add	r0, sp, #204	; 0xcc
 8001656:	f000 fd1f 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 800165a:	f000 fce9 	bl	8002030 <STM32_PLC_SD_Close_File>
	j1939->this_name.identity_number = atoi(strtok(text, DELIMITER));
 800165e:	490a      	ldr	r1, [pc, #40]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
 8001660:	a833      	add	r0, sp, #204	; 0xcc
 8001662:	f012 fa09 	bl	8013a78 <strtok>
 8001666:	f010 feae 	bl	80123c6 <atoi>
	j1939->this_name.manufacturer_code = atoi(strtok(NULL, DELIMITER));
 800166a:	4907      	ldr	r1, [pc, #28]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
	j1939->this_name.identity_number = atoi(strtok(text, DELIMITER));
 800166c:	f8c5 0ad0 	str.w	r0, [r5, #2768]	; 0xad0
	j1939->this_name.manufacturer_code = atoi(strtok(NULL, DELIMITER));
 8001670:	2000      	movs	r0, #0
 8001672:	f012 fa01 	bl	8013a78 <strtok>
 8001676:	f010 fea6 	bl	80123c6 <atoi>
	j1939->this_name.function_instance = atoi(strtok(NULL, DELIMITER));
 800167a:	4903      	ldr	r1, [pc, #12]	; (8001688 <STM32_PLC_Initial_Startup+0x330>)
	j1939->this_name.manufacturer_code = atoi(strtok(NULL, DELIMITER));
 800167c:	f8a5 0ad4 	strh.w	r0, [r5, #2772]	; 0xad4
	j1939->this_name.function_instance = atoi(strtok(NULL, DELIMITER));
 8001680:	2000      	movs	r0, #0
 8001682:	e027      	b.n	80016d4 <STM32_PLC_Initial_Startup+0x37c>
 8001684:	08016c8f 	.word	0x08016c8f
 8001688:	08016cb1 	.word	0x08016cb1
 800168c:	08016cb4 	.word	0x08016cb4
 8001690:	08016cc1 	.word	0x08016cc1
 8001694:	080171eb 	.word	0x080171eb
 8001698:	08016dbb 	.word	0x08016dbb
 800169c:	08016cf2 	.word	0x08016cf2
 80016a0:	08016cfe 	.word	0x08016cfe
 80016a4:	08016d0c 	.word	0x08016d0c
 80016a8:	08016d47 	.word	0x08016d47
 80016ac:	08016dbd 	.word	0x08016dbd
 80016b0:	08016dc8 	.word	0x08016dc8
 80016b4:	08016dcc 	.word	0x08016dcc
 80016b8:	08016df8 	.word	0x08016df8
 80016bc:	08016d42 	.word	0x08016d42
 80016c0:	08016e02 	.word	0x08016e02
 80016c4:	08016e0a 	.word	0x08016e0a
 80016c8:	08016e0f 	.word	0x08016e0f
 80016cc:	08016d2d 	.word	0x08016d2d
 80016d0:	08016e1b 	.word	0x08016e1b
 80016d4:	f012 f9d0 	bl	8013a78 <strtok>
 80016d8:	f010 fe75 	bl	80123c6 <atoi>
	j1939->this_name.ECU_instance = atoi(strtok(NULL, DELIMITER));
 80016dc:	49a4      	ldr	r1, [pc, #656]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
	j1939->this_name.function_instance = atoi(strtok(NULL, DELIMITER));
 80016de:	f885 0ad6 	strb.w	r0, [r5, #2774]	; 0xad6
	j1939->this_name.ECU_instance = atoi(strtok(NULL, DELIMITER));
 80016e2:	2000      	movs	r0, #0
 80016e4:	f012 f9c8 	bl	8013a78 <strtok>
 80016e8:	f010 fe6d 	bl	80123c6 <atoi>
	j1939->this_name.function = atoi(strtok(NULL, DELIMITER));
 80016ec:	49a0      	ldr	r1, [pc, #640]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
	j1939->this_name.ECU_instance = atoi(strtok(NULL, DELIMITER));
 80016ee:	f885 0ad7 	strb.w	r0, [r5, #2775]	; 0xad7
	j1939->this_name.function = atoi(strtok(NULL, DELIMITER));
 80016f2:	2000      	movs	r0, #0
 80016f4:	f012 f9c0 	bl	8013a78 <strtok>
 80016f8:	f010 fe65 	bl	80123c6 <atoi>
	j1939->this_name.vehicle_system = atoi(strtok(NULL, DELIMITER));
 80016fc:	499c      	ldr	r1, [pc, #624]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
	j1939->this_name.function = atoi(strtok(NULL, DELIMITER));
 80016fe:	f885 0ad8 	strb.w	r0, [r5, #2776]	; 0xad8
	j1939->this_name.vehicle_system = atoi(strtok(NULL, DELIMITER));
 8001702:	2000      	movs	r0, #0
 8001704:	f012 f9b8 	bl	8013a78 <strtok>
 8001708:	f010 fe5d 	bl	80123c6 <atoi>
	j1939->this_name.arbitrary_address_capable = atoi(strtok(NULL, DELIMITER));
 800170c:	4998      	ldr	r1, [pc, #608]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
	j1939->this_name.vehicle_system = atoi(strtok(NULL, DELIMITER));
 800170e:	f885 0ad9 	strb.w	r0, [r5, #2777]	; 0xad9
	j1939->this_name.arbitrary_address_capable = atoi(strtok(NULL, DELIMITER));
 8001712:	2000      	movs	r0, #0
 8001714:	f012 f9b0 	bl	8013a78 <strtok>
 8001718:	f010 fe55 	bl	80123c6 <atoi>
	j1939->this_name.industry_group = atoi(strtok(NULL, DELIMITER));
 800171c:	4994      	ldr	r1, [pc, #592]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
	j1939->this_name.arbitrary_address_capable = atoi(strtok(NULL, DELIMITER));
 800171e:	f885 0ada 	strb.w	r0, [r5, #2778]	; 0xada
	j1939->this_name.industry_group = atoi(strtok(NULL, DELIMITER));
 8001722:	2000      	movs	r0, #0
 8001724:	f012 f9a8 	bl	8013a78 <strtok>
 8001728:	f010 fe4d 	bl	80123c6 <atoi>
	j1939->this_name.vehicle_system_instance = atoi(strtok(NULL, DELIMITER));
 800172c:	4990      	ldr	r1, [pc, #576]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
	j1939->this_name.industry_group = atoi(strtok(NULL, DELIMITER));
 800172e:	f885 0adb 	strb.w	r0, [r5, #2779]	; 0xadb
	j1939->this_name.vehicle_system_instance = atoi(strtok(NULL, DELIMITER));
 8001732:	2000      	movs	r0, #0
 8001734:	f012 f9a0 	bl	8013a78 <strtok>
 8001738:	f010 fe45 	bl	80123c6 <atoi>

	/* Read identifications */
	sprintf(text, "0%s0%s0%s0%s0%s0%s0%s0%s0", DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER);
 800173c:	4b8c      	ldr	r3, [pc, #560]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
	j1939->this_name.vehicle_system_instance = atoi(strtok(NULL, DELIMITER));
 800173e:	f885 0adc 	strb.w	r0, [r5, #2780]	; 0xadc
	sprintf(text, "0%s0%s0%s0%s0%s0%s0%s0%s0", DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER, DELIMITER);
 8001742:	461a      	mov	r2, r3
 8001744:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001748:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800174c:	e9cd 4400 	strd	r4, r4, [sp]
 8001750:	4988      	ldr	r1, [pc, #544]	; (8001974 <STM32_PLC_Initial_Startup+0x61c>)
 8001752:	a833      	add	r0, sp, #204	; 0xcc
 8001754:	f011 fae6 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Create_New_File_With_Read_Write("ID.TXT", text, false);
 8001758:	2200      	movs	r2, #0
 800175a:	a933      	add	r1, sp, #204	; 0xcc
 800175c:	4886      	ldr	r0, [pc, #536]	; (8001978 <STM32_PLC_Initial_Startup+0x620>)
 800175e:	f000 fca7 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Read("ID.TXT");
 8001762:	4885      	ldr	r0, [pc, #532]	; (8001978 <STM32_PLC_Initial_Startup+0x620>)
 8001764:	f000 fc54 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 8001768:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800176c:	a833      	add	r0, sp, #204	; 0xcc
 800176e:	f000 fc93 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 8001772:	f000 fc5d 	bl	8002030 <STM32_PLC_SD_Close_File>

	/* Software identification */
	char *software_identification = strtok(text, DELIMITER);
 8001776:	497e      	ldr	r1, [pc, #504]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 8001778:	a833      	add	r0, sp, #204	; 0xcc
 800177a:	f012 f97d 	bl	8013a78 <strtok>
 800177e:	9012      	str	r0, [sp, #72]	; 0x48
	j1939->this_identifications.software_identification.number_of_fields = strlen(software_identification); /* Specify the length of software ID is a SAE J1939 standard, compared to ECU/Component identification */
 8001780:	f7fe fd26 	bl	80001d0 <strlen>
	memcpy(j1939->this_identifications.software_identification.identifications, (uint8_t*)software_identification, j1939->this_identifications.software_identification.number_of_fields);
 8001784:	9912      	ldr	r1, [sp, #72]	; 0x48
	j1939->this_identifications.software_identification.number_of_fields = strlen(software_identification); /* Specify the length of software ID is a SAE J1939 standard, compared to ECU/Component identification */
 8001786:	f885 0c1c 	strb.w	r0, [r5, #3100]	; 0xc1c
	memcpy(j1939->this_identifications.software_identification.identifications, (uint8_t*)software_identification, j1939->this_identifications.software_identification.number_of_fields);
 800178a:	b2c2      	uxtb	r2, r0
 800178c:	f605 401d 	addw	r0, r5, #3101	; 0xc1d
 8001790:	f010 fe48 	bl	8012424 <memcpy>

	/* ECU identification */
	char *ecu_part_number = strtok(NULL, DELIMITER);
 8001794:	4976      	ldr	r1, [pc, #472]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 8001796:	2000      	movs	r0, #0
 8001798:	f012 f96e 	bl	8013a78 <strtok>
 800179c:	9012      	str	r0, [sp, #72]	; 0x48
	memcpy(j1939->this_identifications.ecu_identification.ecu_part_number, (uint8_t*)ecu_part_number, strlen(ecu_part_number));
 800179e:	f7fe fd17 	bl	80001d0 <strlen>
 80017a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80017a4:	4602      	mov	r2, r0
 80017a6:	f605 403d 	addw	r0, r5, #3133	; 0xc3d
 80017aa:	f010 fe3b 	bl	8012424 <memcpy>
	char *ecu_serial_number = strtok(NULL, DELIMITER);
 80017ae:	4970      	ldr	r1, [pc, #448]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 80017b0:	2000      	movs	r0, #0
 80017b2:	f012 f961 	bl	8013a78 <strtok>
 80017b6:	9012      	str	r0, [sp, #72]	; 0x48
	memcpy(j1939->this_identifications.ecu_identification.ecu_serial_number, (uint8_t*)ecu_serial_number, strlen(ecu_serial_number));
 80017b8:	f7fe fd0a 	bl	80001d0 <strlen>
 80017bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80017be:	4602      	mov	r2, r0
 80017c0:	f605 405b 	addw	r0, r5, #3163	; 0xc5b
 80017c4:	f010 fe2e 	bl	8012424 <memcpy>
	char *ecu_location = strtok(NULL, DELIMITER);
 80017c8:	4969      	ldr	r1, [pc, #420]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 80017ca:	2000      	movs	r0, #0
 80017cc:	f012 f954 	bl	8013a78 <strtok>
 80017d0:	9012      	str	r0, [sp, #72]	; 0x48
	memcpy(j1939->this_identifications.ecu_identification.ecu_location, (uint8_t*)ecu_location, strlen(ecu_location));
 80017d2:	f7fe fcfd 	bl	80001d0 <strlen>
 80017d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80017d8:	4602      	mov	r2, r0
 80017da:	f605 4079 	addw	r0, r5, #3193	; 0xc79
 80017de:	f010 fe21 	bl	8012424 <memcpy>
	char *ecu_type = strtok(NULL, DELIMITER);
 80017e2:	4963      	ldr	r1, [pc, #396]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 80017e4:	2000      	movs	r0, #0
 80017e6:	f012 f947 	bl	8013a78 <strtok>
 80017ea:	9012      	str	r0, [sp, #72]	; 0x48
	memcpy(j1939->this_identifications.ecu_identification.ecu_type, (uint8_t*)ecu_type, strlen(ecu_type));
 80017ec:	f7fe fcf0 	bl	80001d0 <strlen>
 80017f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80017f2:	4602      	mov	r2, r0
 80017f4:	f605 4097 	addw	r0, r5, #3223	; 0xc97
 80017f8:	f010 fe14 	bl	8012424 <memcpy>

	/* Component identification */
	char *component_product_date = strtok(NULL, DELIMITER);
 80017fc:	495c      	ldr	r1, [pc, #368]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 80017fe:	2000      	movs	r0, #0
 8001800:	f012 f93a 	bl	8013a78 <strtok>
 8001804:	9012      	str	r0, [sp, #72]	; 0x48
	memcpy(j1939->this_identifications.component_identification.component_product_date, (uint8_t*)component_product_date, strlen(component_product_date));
 8001806:	f7fe fce3 	bl	80001d0 <strlen>
 800180a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800180c:	4602      	mov	r2, r0
 800180e:	f605 40b7 	addw	r0, r5, #3255	; 0xcb7
 8001812:	f010 fe07 	bl	8012424 <memcpy>
	char *component_model_name = strtok(NULL, DELIMITER);
 8001816:	4956      	ldr	r1, [pc, #344]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 8001818:	2000      	movs	r0, #0
 800181a:	f012 f92d 	bl	8013a78 <strtok>
 800181e:	9012      	str	r0, [sp, #72]	; 0x48
	memcpy(j1939->this_identifications.component_identification.component_model_name, (uint8_t*)component_model_name, strlen(component_model_name));
 8001820:	f7fe fcd6 	bl	80001d0 <strlen>
 8001824:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001826:	4602      	mov	r2, r0
 8001828:	f605 40d5 	addw	r0, r5, #3285	; 0xcd5
 800182c:	f010 fdfa 	bl	8012424 <memcpy>
	char *component_serial_number = strtok(NULL, DELIMITER);
 8001830:	494f      	ldr	r1, [pc, #316]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 8001832:	2000      	movs	r0, #0
 8001834:	f012 f920 	bl	8013a78 <strtok>
 8001838:	9012      	str	r0, [sp, #72]	; 0x48
	memcpy(j1939->this_identifications.component_identification.component_serial_number, (uint8_t*)component_serial_number, strlen(component_serial_number));
 800183a:	f7fe fcc9 	bl	80001d0 <strlen>
 800183e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001840:	4602      	mov	r2, r0
 8001842:	f605 40f3 	addw	r0, r5, #3315	; 0xcf3
 8001846:	f010 fded 	bl	8012424 <memcpy>
	char *component_unit_name = strtok(NULL, DELIMITER);
 800184a:	4949      	ldr	r1, [pc, #292]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 800184c:	2000      	movs	r0, #0
 800184e:	f012 f913 	bl	8013a78 <strtok>
 8001852:	9012      	str	r0, [sp, #72]	; 0x48
	memcpy(j1939->this_identifications.component_identification.component_unit_name, (uint8_t*)component_unit_name, strlen(component_unit_name));
 8001854:	f7fe fcbc 	bl	80001d0 <strlen>
 8001858:	9912      	ldr	r1, [sp, #72]	; 0x48
 800185a:	4602      	mov	r2, r0
 800185c:	f605 5011 	addw	r0, r5, #3345	; 0xd11
 8001860:	f010 fde0 	bl	8012424 <memcpy>

	/* ECU address */
	STM32_PLC_SD_Create_New_File_With_Read_Write("ADDRESS.TXT", "0", false);
 8001864:	2200      	movs	r2, #0
 8001866:	4945      	ldr	r1, [pc, #276]	; (800197c <STM32_PLC_Initial_Startup+0x624>)
 8001868:	4845      	ldr	r0, [pc, #276]	; (8001980 <STM32_PLC_Initial_Startup+0x628>)
 800186a:	f000 fc21 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Read("ADDRESS.TXT");
 800186e:	4844      	ldr	r0, [pc, #272]	; (8001980 <STM32_PLC_Initial_Startup+0x628>)
 8001870:	f000 fbce 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 8001874:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001878:	a833      	add	r0, sp, #204	; 0xcc
 800187a:	f000 fc0d 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 800187e:	f000 fbd7 	bl	8002030 <STM32_PLC_SD_Close_File>
	j1939->this_ECU_address = atoi(strtok(text, DELIMITER));
 8001882:	493b      	ldr	r1, [pc, #236]	; (8001970 <STM32_PLC_Initial_Startup+0x618>)
 8001884:	a833      	add	r0, sp, #204	; 0xcc
 8001886:	f012 f8f7 	bl	8013a78 <strtok>
 800188a:	f010 fd9c 	bl	80123c6 <atoi>
 800188e:	f885 0ae0 	strb.w	r0, [r5, #2784]	; 0xae0

	/* Unmount SD card */
	STM32_PLC_SD_Unmount_Card();
 8001892:	f000 fb93 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>

}
 8001896:	f50d 7d63 	add.w	sp, sp, #908	; 0x38c
 800189a:	ecbd 8b02 	vpop	{d8}
 800189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (status == FR_EXIST) {
 80018a0:	2808      	cmp	r0, #8
 80018a2:	d12e      	bne.n	8001902 <STM32_PLC_Initial_Startup+0x5aa>
		STM32_PLC_SD_Open_Existing_File_With_Read("TOUCH.TXT");
 80018a4:	4837      	ldr	r0, [pc, #220]	; (8001984 <STM32_PLC_Initial_Startup+0x62c>)
 80018a6:	f000 fbb3 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
		STM32_PLC_SD_Read_File(text, sizeof(text));
 80018aa:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80018ae:	a833      	add	r0, sp, #204	; 0xcc
 80018b0:	f000 fbf2 	bl	8002098 <STM32_PLC_SD_Read_File>
		Scale_X = atoff(strtok(text, DELIMITER));
 80018b4:	4621      	mov	r1, r4
 80018b6:	a833      	add	r0, sp, #204	; 0xcc
 80018b8:	f012 f8de 	bl	8013a78 <strtok>
 80018bc:	f010 fd80 	bl	80123c0 <atoff>
		Scale_Y = atoff(strtok(NULL, DELIMITER));
 80018c0:	4621      	mov	r1, r4
 80018c2:	2000      	movs	r0, #0
		Scale_X = atoff(strtok(text, DELIMITER));
 80018c4:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
		Scale_Y = atoff(strtok(NULL, DELIMITER));
 80018c8:	f012 f8d6 	bl	8013a78 <strtok>
 80018cc:	f010 fd78 	bl	80123c0 <atoff>
		Bias_X = atoff(strtok(NULL, DELIMITER));
 80018d0:	4621      	mov	r1, r4
 80018d2:	2000      	movs	r0, #0
		Scale_Y = atoff(strtok(NULL, DELIMITER));
 80018d4:	ed8d 0a16 	vstr	s0, [sp, #88]	; 0x58
		Bias_X = atoff(strtok(NULL, DELIMITER));
 80018d8:	f012 f8ce 	bl	8013a78 <strtok>
 80018dc:	f010 fd70 	bl	80123c0 <atoff>
		Bias_Y = atoff(strtok(NULL, DELIMITER));
 80018e0:	4621      	mov	r1, r4
 80018e2:	2000      	movs	r0, #0
		Bias_X = atoff(strtok(NULL, DELIMITER));
 80018e4:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
		Bias_Y = atoff(strtok(NULL, DELIMITER));
 80018e8:	f012 f8c6 	bl	8013a78 <strtok>
 80018ec:	f010 fd68 	bl	80123c0 <atoff>
		STM32_PLC_LCD_Set_Touch_Calibration_Parameters(&Scale_X, &Scale_Y, &Bias_X, &Bias_Y);
 80018f0:	ab18      	add	r3, sp, #96	; 0x60
 80018f2:	aa17      	add	r2, sp, #92	; 0x5c
 80018f4:	a916      	add	r1, sp, #88	; 0x58
 80018f6:	a815      	add	r0, sp, #84	; 0x54
		Bias_Y = atoff(strtok(NULL, DELIMITER));
 80018f8:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
		STM32_PLC_LCD_Set_Touch_Calibration_Parameters(&Scale_X, &Scale_Y, &Bias_X, &Bias_Y);
 80018fc:	f000 f942 	bl	8001b84 <STM32_PLC_LCD_Set_Touch_Calibration_Parameters>
 8001900:	e57c      	b.n	80013fc <STM32_PLC_Initial_Startup+0xa4>
		sprintf(text, "SD write/read error with FatFS code:%i", status);
 8001902:	4921      	ldr	r1, [pc, #132]	; (8001988 <STM32_PLC_Initial_Startup+0x630>)
 8001904:	a833      	add	r0, sp, #204	; 0xcc
 8001906:	f011 fa0d 	bl	8012d24 <siprintf>
		STM32_PLC_LCD_Show_Information_OK_Dialog(text);
 800190a:	a833      	add	r0, sp, #204	; 0xcc
 800190c:	f001 ff02 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
 8001910:	e574      	b.n	80013fc <STM32_PLC_Initial_Startup+0xa4>
			parameters[i] = atoff(strtok(NULL, DELIMITER));
 8001912:	2000      	movs	r0, #0
 8001914:	f012 f8b0 	bl	8013a78 <strtok>
 8001918:	f010 fd52 	bl	80123c0 <atoff>
 800191c:	ab1f      	add	r3, sp, #124	; 0x7c
 800191e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001922:	ed83 0a00 	vstr	s0, [r3]
 8001926:	e5bd      	b.n	80014a4 <STM32_PLC_Initial_Startup+0x14c>
			min_max_bias[0] = atoff(strtok(NULL, delimiters));
 8001928:	2000      	movs	r0, #0
 800192a:	f012 f8a5 	bl	8013a78 <strtok>
 800192e:	f010 fd47 	bl	80123c0 <atoff>
			min_max_bias[1] = atoff(strtok(NULL, delimiters));
 8001932:	a919      	add	r1, sp, #100	; 0x64
 8001934:	2000      	movs	r0, #0
			min_max_bias[0] = atoff(strtok(NULL, delimiters));
 8001936:	eeb0 8a40 	vmov.f32	s16, s0
			min_max_bias[1] = atoff(strtok(NULL, delimiters));
 800193a:	f012 f89d 	bl	8013a78 <strtok>
 800193e:	f010 fd3f 	bl	80123c0 <atoff>
			min_max_bias[2] = atoff(strtok(NULL, delimiters));
 8001942:	a919      	add	r1, sp, #100	; 0x64
 8001944:	2000      	movs	r0, #0
			min_max_bias[1] = atoff(strtok(NULL, delimiters));
 8001946:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
			min_max_bias[2] = atoff(strtok(NULL, delimiters));
 800194a:	f012 f895 	bl	8013a78 <strtok>
 800194e:	f010 fd37 	bl	80123c0 <atoff>
		if(i <= 11)
 8001952:	2f0b      	cmp	r7, #11
 8001954:	eddd 0a12 	vldr	s1, [sp, #72]	; 0x48
			min_max_bias[2] = atoff(strtok(NULL, delimiters));
 8001958:	eeb0 1a40 	vmov.f32	s2, s0
		if(i <= 11)
 800195c:	f67f adef 	bls.w	800153e <STM32_PLC_Initial_Startup+0x1e6>
			STM32_PLC_Analog_Input_DADC_Set_Calibration(i - 12, min_max_bias[0], min_max_bias[1], min_max_bias[2]);
 8001960:	f1a7 000c 	sub.w	r0, r7, #12
 8001964:	eeb0 0a48 	vmov.f32	s0, s16
 8001968:	b2c0      	uxtb	r0, r0
 800196a:	f7ff fb2f 	bl	8000fcc <STM32_PLC_Analog_Input_DADC_Set_Calibration>
 800196e:	e5eb      	b.n	8001548 <STM32_PLC_Initial_Startup+0x1f0>
 8001970:	08016cb1 	.word	0x08016cb1
 8001974:	08016d2d 	.word	0x08016d2d
 8001978:	08016e24 	.word	0x08016e24
 800197c:	08016dbb 	.word	0x08016dbb
 8001980:	08016e2b 	.word	0x08016e2b
 8001984:	08016cc1 	.word	0x08016cc1
 8001988:	08016ccb 	.word	0x08016ccb

0800198c <compute_frequency>:
	 * T1: 0x0    - T0: 0xFFFF
	 * T1: 0x7FFF - T0: 0x7FFF
	 * T1: 0x0	  -	T0: 0x0
	 */
	uint16_t difference;
	if(input_capture[1] > input_capture[0]) {
 800198c:	8842      	ldrh	r2, [r0, #2]
 800198e:	8803      	ldrh	r3, [r0, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d90e      	bls.n	80019b2 <compute_frequency+0x26>
		difference = input_capture[1] - input_capture[0];
 8001994:	1ad3      	subs	r3, r2, r3
		return (float) 1/(difference*0.0001f);
	} else if(input_capture[1] < input_capture[0]) {
		difference = 0xFFFF - input_capture[1] + input_capture[0] + 1;
		return (float) 1/(difference*0.0001f);
 8001996:	b29b      	uxth	r3, r3
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80019c0 <compute_frequency+0x34>
 80019a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019ac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80019b0:	4770      	bx	lr
	} else if(input_capture[1] < input_capture[0]) {
 80019b2:	d201      	bcs.n	80019b8 <compute_frequency+0x2c>
		difference = 0xFFFF - input_capture[1] + input_capture[0] + 1;
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	e7ee      	b.n	8001996 <compute_frequency+0xa>
	} else {
		return 1/(65335*0.0001f);
 80019b8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80019c4 <compute_frequency+0x38>
	}
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	38d1b717 	.word	0x38d1b717
 80019c4:	3e1cbb0f 	.word	0x3e1cbb0f

080019c8 <STM32_PLC_Start_Input_Capture>:
void STM32_PLC_Start_Input_Capture(TIM_HandleTypeDef* htim17, TIM_HandleTypeDef* htim16) {
 80019c8:	b510      	push	{r4, lr}
	if(HAL_TIM_IC_Start_DMA(htim16, TIM_CHANNEL_1, (uint32_t*)input_capture1, 2) != HAL_OK)
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <STM32_PLC_Start_Input_Capture+0x30>)
void STM32_PLC_Start_Input_Capture(TIM_HandleTypeDef* htim17, TIM_HandleTypeDef* htim16) {
 80019cc:	4604      	mov	r4, r0
	if(HAL_TIM_IC_Start_DMA(htim16, TIM_CHANNEL_1, (uint32_t*)input_capture1, 2) != HAL_OK)
 80019ce:	2302      	movs	r3, #2
void STM32_PLC_Start_Input_Capture(TIM_HandleTypeDef* htim17, TIM_HandleTypeDef* htim16) {
 80019d0:	4608      	mov	r0, r1
	if(HAL_TIM_IC_Start_DMA(htim16, TIM_CHANNEL_1, (uint32_t*)input_capture1, 2) != HAL_OK)
 80019d2:	2100      	movs	r1, #0
 80019d4:	f00c fe76 	bl	800e6c4 <HAL_TIM_IC_Start_DMA>
 80019d8:	b108      	cbz	r0, 80019de <STM32_PLC_Start_Input_Capture+0x16>
		Error_Handler();
 80019da:	f008 fa4d 	bl	8009e78 <Error_Handler>
	if(HAL_TIM_IC_Start_DMA(htim17, TIM_CHANNEL_1, (uint32_t*)input_capture0, 2) != HAL_OK)
 80019de:	4a07      	ldr	r2, [pc, #28]	; (80019fc <STM32_PLC_Start_Input_Capture+0x34>)
 80019e0:	2302      	movs	r3, #2
 80019e2:	2100      	movs	r1, #0
 80019e4:	4620      	mov	r0, r4
 80019e6:	f00c fe6d 	bl	800e6c4 <HAL_TIM_IC_Start_DMA>
 80019ea:	b118      	cbz	r0, 80019f4 <STM32_PLC_Start_Input_Capture+0x2c>
}
 80019ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Error_Handler();
 80019f0:	f008 ba42 	b.w	8009e78 <Error_Handler>
}
 80019f4:	bd10      	pop	{r4, pc}
 80019f6:	bf00      	nop
 80019f8:	20000454 	.word	0x20000454
 80019fc:	20000450 	.word	0x20000450

08001a00 <STM32_PLC_Input_Capture_Get>:

float STM32_PLC_Input_Capture_Get(uint8_t i) {
	if(i == 0)
 8001a00:	b910      	cbnz	r0, 8001a08 <STM32_PLC_Input_Capture_Get+0x8>
		return compute_frequency((uint16_t*)input_capture0);
 8001a02:	4802      	ldr	r0, [pc, #8]	; (8001a0c <STM32_PLC_Input_Capture_Get+0xc>)
	else
		return compute_frequency((uint16_t*)input_capture1);
 8001a04:	f7ff bfc2 	b.w	800198c <compute_frequency>
 8001a08:	4801      	ldr	r0, [pc, #4]	; (8001a10 <STM32_PLC_Input_Capture_Get+0x10>)
 8001a0a:	e7fb      	b.n	8001a04 <STM32_PLC_Input_Capture_Get+0x4>
 8001a0c:	20000450 	.word	0x20000450
 8001a10:	20000454 	.word	0x20000454

08001a14 <STM32_PLC_Start_LCD>:
 * CPHA = 1 Edge
 * Prescaler = 8 (be careful for this. Lower than 8 can cause trouble with the touch)
 * First bit = MBS first
 * CPOL = Low
 */
void STM32_PLC_Start_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *LCD_RESET_PORT, uint16_t LCD_RESET_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	f8dd c018 	ldr.w	ip, [sp, #24]
	/* Copy SPI settings */
	lcd.lcdSpi = lcdSpi;
 8001a1a:	4c57      	ldr	r4, [pc, #348]	; (8001b78 <STM32_PLC_Start_LCD+0x164>)
void STM32_PLC_Start_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *LCD_RESET_PORT, uint16_t LCD_RESET_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001a1c:	9e08      	ldr	r6, [sp, #32]
 8001a1e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
	lcd.LCD_CS_PORT = LCD_CS_PORT;
	lcd.LCD_CS_PIN = LCD_CS_PIN;
 8001a22:	81a3      	strh	r3, [r4, #12]
	lcd.LCD_CS_PORT = LCD_CS_PORT;
 8001a24:	e9c4 0201 	strd	r0, r2, [r4, #4]
void STM32_PLC_Start_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *LCD_RESET_PORT, uint16_t LCD_RESET_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001a28:	460d      	mov	r5, r1
	lcd.LCD_DC_PORT = LCD_DC_PORT;
	lcd.LCD_DC_PIN = LCD_DC_PIN;
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 8001a2a:	4660      	mov	r0, ip
void STM32_PLC_Start_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *LCD_RESET_PORT, uint16_t LCD_RESET_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001a2c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	lcd.LCD_DC_PORT = LCD_DC_PORT;
 8001a30:	f8c4 c010 	str.w	ip, [r4, #16]
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
	lcd.LCD_DC_PIN = LCD_DC_PIN;
 8001a36:	82a1      	strh	r1, [r4, #20]
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 8001a38:	f009 fc4e 	bl	800b2d8 <HAL_GPIO_WritePin>
	lcd.LCD_RESET_PORT = LCD_RESET_PORT;
	lcd.LCD_RESET_PIN = LCD_RESET_PIN;
	HAL_GPIO_WritePin(lcd.LCD_RESET_PORT, lcd.LCD_RESET_PIN, GPIO_PIN_SET); /* Turn LCD ON */
 8001a3c:	4630      	mov	r0, r6
	lcd.LCD_RESET_PORT = LCD_RESET_PORT;
 8001a3e:	61a6      	str	r6, [r4, #24]
	lcd._cp437 = 0; // False
	lcd.rotationNum = 1;
 8001a40:	4626      	mov	r6, r4
	HAL_GPIO_WritePin(lcd.LCD_RESET_PORT, lcd.LCD_RESET_PIN, GPIO_PIN_SET); /* Turn LCD ON */
 8001a42:	4639      	mov	r1, r7
 8001a44:	2201      	movs	r2, #1
	lcd.LCD_RESET_PIN = LCD_RESET_PIN;
 8001a46:	83a7      	strh	r7, [r4, #28]
	lcd.rotationNum = 1;
 8001a48:	2701      	movs	r7, #1
	HAL_GPIO_WritePin(lcd.LCD_RESET_PORT, lcd.LCD_RESET_PIN, GPIO_PIN_SET); /* Turn LCD ON */
 8001a4a:	f009 fc45 	bl	800b2d8 <HAL_GPIO_WritePin>
	lcd.rotationNum = 1;
 8001a4e:	f826 7b3c 	strh.w	r7, [r6], #60

	/* Reset */
	ILI9341_send_command(ILI9341_RESET);                                     /* software reset command */
 8001a52:	4638      	mov	r0, r7
 8001a54:	f006 fa90 	bl	8007f78 <ILI9341_send_command>
	HAL_Delay(100);
 8001a58:	2064      	movs	r0, #100	; 0x64
 8001a5a:	f008 fea1 	bl	800a7a0 <HAL_Delay>
	ILI9341_send_command(ILI9341_DISPLAY_OFF);                               /* display off */
 8001a5e:	2028      	movs	r0, #40	; 0x28
 8001a60:	f006 fa8a 	bl	8007f78 <ILI9341_send_command>

	/* Power Control */
	ILI9341_send_command(ILI9341_POWER1);                                    /* power control */
 8001a64:	20c0      	movs	r0, #192	; 0xc0
 8001a66:	f006 fa87 	bl	8007f78 <ILI9341_send_command>
	ILI9341_send_data(0x26);                                                 /* GVDD = 4.75v */
 8001a6a:	2026      	movs	r0, #38	; 0x26
 8001a6c:	f006 fa52 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_POWER2);                                    /* power control */
 8001a70:	20c1      	movs	r0, #193	; 0xc1
 8001a72:	f006 fa81 	bl	8007f78 <ILI9341_send_command>
	ILI9341_send_data(0x11);                                                 /* AVDD = VCIx2, VGH = VCIx7, VGL =-VCIx3 */
 8001a76:	2011      	movs	r0, #17
 8001a78:	f006 fa4c 	bl	8007f14 <ILI9341_send_data>

	/* VCOM */
	ILI9341_send_command(ILI9341_VCOM1);                                     /* VCOM control */
 8001a7c:	20c5      	movs	r0, #197	; 0xc5
 8001a7e:	f006 fa7b 	bl	8007f78 <ILI9341_send_command>
	ILI9341_send_data(0x35);                                                 /* Set the VCOMH voltage (0x35 = 4.025v) */
 8001a82:	2035      	movs	r0, #53	; 0x35
 8001a84:	f006 fa46 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_data(0x3e);                                                 /* Set the VCOML voltage (0x3E = -0.950v) */
 8001a88:	203e      	movs	r0, #62	; 0x3e
 8001a8a:	f006 fa43 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_VCOM2);                                     /* VCOM control */
 8001a8e:	20c7      	movs	r0, #199	; 0xc7
 8001a90:	f006 fa72 	bl	8007f78 <ILI9341_send_command>
	ILI9341_send_data(0xbe);
 8001a94:	20be      	movs	r0, #190	; 0xbe
 8001a96:	f006 fa3d 	bl	8007f14 <ILI9341_send_data>

	/* Memory Access Control */
	ILI9341_send_command(ILI9341_MAC);
 8001a9a:	2036      	movs	r0, #54	; 0x36
 8001a9c:	f006 fa6c 	bl	8007f78 <ILI9341_send_command>
	ILI9341_send_data(0x48);
 8001aa0:	2048      	movs	r0, #72	; 0x48
 8001aa2:	f006 fa37 	bl	8007f14 <ILI9341_send_data>

	/* Pixel Format Set - 16-bit per pixel */
	ILI9341_send_command(ILI9341_PIXEL_FORMAT);
 8001aa6:	203a      	movs	r0, #58	; 0x3a
 8001aa8:	f006 fa66 	bl	8007f78 <ILI9341_send_command>
	ILI9341_send_data(0x55);
 8001aac:	2055      	movs	r0, #85	; 0x55
 8001aae:	f006 fa31 	bl	8007f14 <ILI9341_send_data>

	ILI9341_send_command(ILI9341_FRC);
 8001ab2:	20b1      	movs	r0, #177	; 0xb1
 8001ab4:	f006 fa60 	bl	8007f78 <ILI9341_send_command>
	ILI9341_send_data(0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f006 fa2b 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_data(0x1F);
 8001abe:	201f      	movs	r0, #31
 8001ac0:	f006 fa28 	bl	8007f14 <ILI9341_send_data>

	/* DDRAM */
	ILI9341_send_command(ILI9341_COLUMN_ADDR);                               /* column set */
 8001ac4:	202a      	movs	r0, #42	; 0x2a
 8001ac6:	f006 fa57 	bl	8007f78 <ILI9341_send_command>
	ILI9341_send_data(0x00);                                                 /* x0_HIGH---0 */
 8001aca:	2000      	movs	r0, #0
 8001acc:	f006 fa22 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* x0_LOW----0 */
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f006 fa1f 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* x1_HIGH---240 */
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f006 fa1c 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_data(0xEF);                                                 /* x1_LOW----240 */
 8001adc:	20ef      	movs	r0, #239	; 0xef
 8001ade:	f006 fa19 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_PAGE_ADDR);                                 /* page address set */
 8001ae2:	202b      	movs	r0, #43	; 0x2b
 8001ae4:	f006 fa48 	bl	8007f78 <ILI9341_send_command>
	ILI9341_send_data(0x00);                                                 /* y0_HIGH---0 */
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f006 fa13 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* y0_LOW----0 */
 8001aee:	2000      	movs	r0, #0
 8001af0:	f006 fa10 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_data(0x01);                                                 /* y1_HIGH---320 */
 8001af4:	4638      	mov	r0, r7
 8001af6:	f006 fa0d 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_data(0x3F);                                                 /* y1_LOW----320 */
 8001afa:	203f      	movs	r0, #63	; 0x3f
 8001afc:	f006 fa0a 	bl	8007f14 <ILI9341_send_data>

	ILI9341_send_command(ILI9341_TEARING_OFF);                               /* tearing effect off */
 8001b00:	2034      	movs	r0, #52	; 0x34
 8001b02:	f006 fa39 	bl	8007f78 <ILI9341_send_command>
	//LCD_write_cmd(ILI9341_TEARING_ON);                                    /* tearing effect on */
	//LCD_write_cmd(ILI9341_DISPLAY_INVERSION);                             /* display inversion */
	ILI9341_send_command(ILI9341_Entry_Mode_Set);                            /* entry mode set */
 8001b06:	20b7      	movs	r0, #183	; 0xb7
 8001b08:	f006 fa36 	bl	8007f78 <ILI9341_send_command>
	/* Deep Standby Mode: OFF
	 * Set the output level of gate driver G1-G320: Normal display
	 * Low voltage detection: Disable
	 */
	ILI9341_send_data(0x07);
 8001b0c:	2007      	movs	r0, #7
 8001b0e:	f006 fa01 	bl	8007f14 <ILI9341_send_data>

	/* Display */
	ILI9341_send_command(ILI9341_DFC);                                       /* display function control */
 8001b12:	20b6      	movs	r0, #182	; 0xb6
 8001b14:	f006 fa30 	bl	8007f78 <ILI9341_send_command>
	/* Set the scan mode in non-display area
	 * Determine source/VCOM output in a non-display area in the partial display mode
	 */
	ILI9341_send_data(0x0a);
 8001b18:	200a      	movs	r0, #10
 8001b1a:	f006 f9fb 	bl	8007f14 <ILI9341_send_data>
	 * Sets the direction of scan by the gate driver in the range determined by SCN and NL
	 * Select the shift direction of outputs from the source driver
	 * Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
	 * Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
	 */
	ILI9341_send_data(0x82);
 8001b1e:	2082      	movs	r0, #130	; 0x82
 8001b20:	f006 f9f8 	bl	8007f14 <ILI9341_send_data>
	/* Sets the number of lines to drive the LCD at an interval of 8 lines */
	ILI9341_send_data(0x27);
 8001b24:	2027      	movs	r0, #39	; 0x27
 8001b26:	f006 f9f5 	bl	8007f14 <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* clock divisor */
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f006 f9f2 	bl	8007f14 <ILI9341_send_data>

	ILI9341_send_command(ILI9341_SLEEP_OUT);                                 /* sleep out */
 8001b30:	2011      	movs	r0, #17
 8001b32:	f006 fa21 	bl	8007f78 <ILI9341_send_command>
	HAL_Delay(100);
 8001b36:	2064      	movs	r0, #100	; 0x64
 8001b38:	f008 fe32 	bl	800a7a0 <HAL_Delay>
	ILI9341_send_command(ILI9341_DISPLAY_ON);                                /* display on */
 8001b3c:	2029      	movs	r0, #41	; 0x29
 8001b3e:	f006 fa1b 	bl	8007f78 <ILI9341_send_command>
	HAL_Delay(100);
 8001b42:	2064      	movs	r0, #100	; 0x64
 8001b44:	f008 fe2c 	bl	800a7a0 <HAL_Delay>
	ILI9341_send_command(ILI9341_GRAM);                                      /* memory write */
 8001b48:	202c      	movs	r0, #44	; 0x2c
 8001b4a:	f006 fa15 	bl	8007f78 <ILI9341_send_command>
	HAL_Delay(5);
 8001b4e:	2005      	movs	r0, #5
 8001b50:	f008 fe26 	bl	800a7a0 <HAL_Delay>

	/* Touch Screen SPI */
	TS_TOUCH_RAW_Def myRawTouchDef = {0};
	TS_TOUCH_RAW_Def localRawTouch = {0};
	TS_CALIBRATE_Def myTS_Calibrate = {0};
	lcd.myTS_Calibrate = myTS_Calibrate;
 8001b54:	221c      	movs	r2, #28
 8001b56:	2100      	movs	r1, #0
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f010 fc71 	bl	8012440 <memset>
	lcd.localRawTouch = localRawTouch;
 8001b5e:	2300      	movs	r3, #0
	lcd.myRawTouchDef = myRawTouchDef;
 8001b60:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
	lcd.touchSpi = touchSpi;
	lcd.TOUCH_CS_PORT = TOUCH_CS_PORT;
 8001b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b66:	6263      	str	r3, [r4, #36]	; 0x24
	lcd.TOUCH_CS_PIN = TOUCH_CS_PIN;
 8001b68:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001b6c:	8523      	strh	r3, [r4, #40]	; 0x28
	lcd.CMD_Default = 0x84;
 8001b6e:	2384      	movs	r3, #132	; 0x84
	lcd.touchSpi = touchSpi;
 8001b70:	6225      	str	r5, [r4, #32]
	lcd.CMD_Default = 0x84;
 8001b72:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8001b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b78:	20002cf8 	.word	0x20002cf8

08001b7c <STM32_PLC_LCD_Calibrate_Touch>:

void STM32_PLC_LCD_Calibrate_Touch() {
	TSC2046_Calibrate();
 8001b7c:	f006 bdbc 	b.w	80086f8 <TSC2046_Calibrate>

08001b80 <STM32_PLC_LCD_Get_Touch_Calibration_Parameters>:
}

void STM32_PLC_LCD_Get_Touch_Calibration_Parameters(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y){
	TSC2046_GetTouchCalibrationParameters(Scale_X, Scale_Y, Bias_X, Bias_Y);
 8001b80:	f006 bd1a 	b.w	80085b8 <TSC2046_GetTouchCalibrationParameters>

08001b84 <STM32_PLC_LCD_Set_Touch_Calibration_Parameters>:
}

void STM32_PLC_LCD_Set_Touch_Calibration_Parameters(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y){
	TSC2046_SetTouchCalibrationParameters(Scale_X, Scale_Y, Bias_X, Bias_Y);
 8001b84:	f006 bd26 	b.w	80085d4 <TSC2046_SetTouchCalibrationParameters>

08001b88 <LED>:
	binary[1] = (program_number >> 1) & 0b0001;
	binary[0] = program_number & 0b0001;
	LED(binary);
}

void LED(uint8_t binary[]) {
 8001b88:	b510      	push	{r4, lr}
 8001b8a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, binary[0]);
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	7822      	ldrb	r2, [r4, #0]
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <LED+0x3c>)
 8001b92:	f009 fba1 	bl	800b2d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, binary[1]);
 8001b96:	7862      	ldrb	r2, [r4, #1]
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <LED+0x3c>)
 8001b9a:	2140      	movs	r1, #64	; 0x40
 8001b9c:	f009 fb9c 	bl	800b2d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, binary[2]);
 8001ba0:	78a2      	ldrb	r2, [r4, #2]
 8001ba2:	4808      	ldr	r0, [pc, #32]	; (8001bc4 <LED+0x3c>)
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	f009 fb97 	bl	800b2d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, binary[3]);
 8001baa:	78e2      	ldrb	r2, [r4, #3]
 8001bac:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <LED+0x40>)
 8001bae:	2110      	movs	r1, #16
 8001bb0:	f009 fb92 	bl	800b2d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, binary[4]);
 8001bb4:	7922      	ldrb	r2, [r4, #4]
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <LED+0x40>)
}
 8001bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, binary[4]);
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	f009 bb8b 	b.w	800b2d8 <HAL_GPIO_WritePin>
 8001bc2:	bf00      	nop
 8001bc4:	48000c00 	.word	0x48000c00
 8001bc8:	48000400 	.word	0x48000400

08001bcc <STM32_PLC_LED>:
void STM32_PLC_LED(uint8_t program_number){
 8001bcc:	b507      	push	{r0, r1, r2, lr}
	binary[4] = program_number >> 4;
 8001bce:	0903      	lsrs	r3, r0, #4
 8001bd0:	f88d 3004 	strb.w	r3, [sp, #4]
	binary[3] = (program_number >> 3) & 0b01;
 8001bd4:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001bd8:	f88d 3003 	strb.w	r3, [sp, #3]
	binary[2] = (program_number >> 2) & 0b001;
 8001bdc:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001be0:	f88d 3002 	strb.w	r3, [sp, #2]
	binary[1] = (program_number >> 1) & 0b0001;
 8001be4:	f3c0 0340 	ubfx	r3, r0, #1, #1
	binary[0] = program_number & 0b0001;
 8001be8:	f000 0001 	and.w	r0, r0, #1
 8001bec:	f88d 0000 	strb.w	r0, [sp]
	LED(binary);
 8001bf0:	4668      	mov	r0, sp
	binary[1] = (program_number >> 1) & 0b0001;
 8001bf2:	f88d 3001 	strb.w	r3, [sp, #1]
	LED(binary);
 8001bf6:	f7ff ffc7 	bl	8001b88 <LED>
}
 8001bfa:	b003      	add	sp, #12
 8001bfc:	f85d fb04 	ldr.w	pc, [sp], #4

08001c00 <STM32_PLC_Start_PWM>:

static TIM_HandleTypeDef *PWM_TIM_0_3;
static TIM_HandleTypeDef *PWM_TIM_4_7;
static uint16_t PWM[8] = { 0 };

void STM32_PLC_Start_PWM(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim5) {
 8001c00:	b538      	push	{r3, r4, r5, lr}
 8001c02:	460c      	mov	r4, r1
	/* See PWM frequencies at PWM_frequency_settings_frame.c */
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1)  != HAL_OK)
 8001c04:	2100      	movs	r1, #0
void STM32_PLC_Start_PWM(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim5) {
 8001c06:	4605      	mov	r5, r0
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1)  != HAL_OK)
 8001c08:	f00c fd16 	bl	800e638 <HAL_TIM_PWM_Start>
 8001c0c:	b108      	cbz	r0, 8001c12 <STM32_PLC_Start_PWM+0x12>
		Error_Handler();
 8001c0e:	f008 f933 	bl	8009e78 <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2)  != HAL_OK)
 8001c12:	2104      	movs	r1, #4
 8001c14:	4628      	mov	r0, r5
 8001c16:	f00c fd0f 	bl	800e638 <HAL_TIM_PWM_Start>
 8001c1a:	b108      	cbz	r0, 8001c20 <STM32_PLC_Start_PWM+0x20>
			Error_Handler();
 8001c1c:	f008 f92c 	bl	8009e78 <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3)  != HAL_OK)
 8001c20:	2108      	movs	r1, #8
 8001c22:	4628      	mov	r0, r5
 8001c24:	f00c fd08 	bl	800e638 <HAL_TIM_PWM_Start>
 8001c28:	b108      	cbz	r0, 8001c2e <STM32_PLC_Start_PWM+0x2e>
			Error_Handler();
 8001c2a:	f008 f925 	bl	8009e78 <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4)  != HAL_OK)
 8001c2e:	210c      	movs	r1, #12
 8001c30:	4628      	mov	r0, r5
 8001c32:	f00c fd01 	bl	800e638 <HAL_TIM_PWM_Start>
 8001c36:	b108      	cbz	r0, 8001c3c <STM32_PLC_Start_PWM+0x3c>
			Error_Handler();
 8001c38:	f008 f91e 	bl	8009e78 <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_1)  != HAL_OK)
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f00c fcfa 	bl	800e638 <HAL_TIM_PWM_Start>
 8001c44:	b108      	cbz	r0, 8001c4a <STM32_PLC_Start_PWM+0x4a>
		Error_Handler();
 8001c46:	f008 f917 	bl	8009e78 <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_2)  != HAL_OK)
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f00c fcf3 	bl	800e638 <HAL_TIM_PWM_Start>
 8001c52:	b108      	cbz	r0, 8001c58 <STM32_PLC_Start_PWM+0x58>
			Error_Handler();
 8001c54:	f008 f910 	bl	8009e78 <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_3)  != HAL_OK)
 8001c58:	2108      	movs	r1, #8
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f00c fcec 	bl	800e638 <HAL_TIM_PWM_Start>
 8001c60:	b108      	cbz	r0, 8001c66 <STM32_PLC_Start_PWM+0x66>
			Error_Handler();
 8001c62:	f008 f909 	bl	8009e78 <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_4)  != HAL_OK)
 8001c66:	210c      	movs	r1, #12
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f00c fce5 	bl	800e638 <HAL_TIM_PWM_Start>
 8001c6e:	b108      	cbz	r0, 8001c74 <STM32_PLC_Start_PWM+0x74>
			Error_Handler();
 8001c70:	f008 f902 	bl	8009e78 <Error_Handler>
	PWM_TIM_4_7 = htim2;
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <STM32_PLC_Start_PWM+0x80>)
 8001c76:	601d      	str	r5, [r3, #0]
	PWM_TIM_0_3 = htim5;
 8001c78:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <STM32_PLC_Start_PWM+0x84>)
 8001c7a:	601c      	str	r4, [r3, #0]
}
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000046c 	.word	0x2000046c
 8001c84:	20000468 	.word	0x20000468

08001c88 <STM32_PLC_PWM_Set>:

void STM32_PLC_PWM_Set(uint8_t i, uint16_t ON_Period) {
	switch (i) {
 8001c88:	2807      	cmp	r0, #7
 8001c8a:	d83c      	bhi.n	8001d06 <STM32_PLC_PWM_Set+0x7e>
 8001c8c:	e8df f000 	tbb	[pc, r0]
 8001c90:	19120b04 	.word	0x19120b04
 8001c94:	352e2720 	.word	0x352e2720
	case 0:
		PWM_TIM_0_3->Instance->CCR1 = ON_Period;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <STM32_PLC_PWM_Set+0x80>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6359      	str	r1, [r3, #52]	; 0x34
		PWM[0] = ON_Period;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <STM32_PLC_PWM_Set+0x84>)
 8001ca2:	8019      	strh	r1, [r3, #0]
		break;
 8001ca4:	4770      	bx	lr
	case 1:
		PWM_TIM_0_3->Instance->CCR2 = ON_Period;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <STM32_PLC_PWM_Set+0x80>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6399      	str	r1, [r3, #56]	; 0x38
		PWM[1] = ON_Period;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <STM32_PLC_PWM_Set+0x84>)
 8001cb0:	8059      	strh	r1, [r3, #2]
		break;
 8001cb2:	4770      	bx	lr
	case 2:
		PWM_TIM_0_3->Instance->CCR3 = ON_Period;
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <STM32_PLC_PWM_Set+0x80>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	63d9      	str	r1, [r3, #60]	; 0x3c
		PWM[2] = ON_Period;
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <STM32_PLC_PWM_Set+0x84>)
 8001cbe:	8099      	strh	r1, [r3, #4]
		break;
 8001cc0:	4770      	bx	lr
	case 3:
		PWM_TIM_0_3->Instance->CCR4 = ON_Period;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <STM32_PLC_PWM_Set+0x80>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6419      	str	r1, [r3, #64]	; 0x40
		PWM[3] = ON_Period;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <STM32_PLC_PWM_Set+0x84>)
 8001ccc:	80d9      	strh	r1, [r3, #6]
		break;
 8001cce:	4770      	bx	lr
	case 4:
		PWM_TIM_4_7->Instance->CCR1 = ON_Period;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <STM32_PLC_PWM_Set+0x88>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6359      	str	r1, [r3, #52]	; 0x34
		PWM[4] = ON_Period;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <STM32_PLC_PWM_Set+0x84>)
 8001cda:	8119      	strh	r1, [r3, #8]
		break;
 8001cdc:	4770      	bx	lr
	case 5:
		PWM_TIM_4_7->Instance->CCR2 = ON_Period;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <STM32_PLC_PWM_Set+0x88>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6399      	str	r1, [r3, #56]	; 0x38
		PWM[5] = ON_Period;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <STM32_PLC_PWM_Set+0x84>)
 8001ce8:	8159      	strh	r1, [r3, #10]
		break;
 8001cea:	4770      	bx	lr
	case 6:
		PWM_TIM_4_7->Instance->CCR3 = ON_Period;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <STM32_PLC_PWM_Set+0x88>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	63d9      	str	r1, [r3, #60]	; 0x3c
		PWM[6] = ON_Period;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <STM32_PLC_PWM_Set+0x84>)
 8001cf6:	8199      	strh	r1, [r3, #12]
		break;
 8001cf8:	4770      	bx	lr
	case 7:
		PWM_TIM_4_7->Instance->CCR4 = ON_Period;
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <STM32_PLC_PWM_Set+0x88>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6419      	str	r1, [r3, #64]	; 0x40
		PWM[7] = ON_Period;
 8001d02:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <STM32_PLC_PWM_Set+0x84>)
 8001d04:	81d9      	strh	r1, [r3, #14]
		break;
	}
}
 8001d06:	4770      	bx	lr
 8001d08:	20000468 	.word	0x20000468
 8001d0c:	20000458 	.word	0x20000458
 8001d10:	2000046c 	.word	0x2000046c

08001d14 <STM32_PLC_PWM_Get>:

uint16_t STM32_PLC_PWM_Get(uint8_t i) {
	return PWM[i];
}
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <STM32_PLC_PWM_Get+0x8>)
 8001d16:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8001d1a:	4770      	bx	lr
 8001d1c:	20000458 	.word	0x20000458

08001d20 <STM32_PLC_PWM_Reset>:

void STM32_PLC_PWM_Reset() {
 8001d20:	b508      	push	{r3, lr}
 8001d22:	2200      	movs	r2, #0
	for(uint8_t i = 0; i < 8; i++)
		STM32_PLC_PWM_Set(i, 0);
 8001d24:	b2d0      	uxtb	r0, r2
 8001d26:	2100      	movs	r1, #0
 8001d28:	f7ff ffae 	bl	8001c88 <STM32_PLC_PWM_Set>
	for(uint8_t i = 0; i < 8; i++)
 8001d2c:	3201      	adds	r2, #1
 8001d2e:	2a08      	cmp	r2, #8
 8001d30:	d1f8      	bne.n	8001d24 <STM32_PLC_PWM_Reset+0x4>
}
 8001d32:	bd08      	pop	{r3, pc}

08001d34 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>:

void STM32_PLC_PWM0_To_PWM3_Set_Prescaler(uint16_t prescaler) {
	PWM_TIM_0_3->Instance->CNT = 0xFFFF;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler+0x10>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24
	PWM_TIM_0_3->Instance->PSC = prescaler;
 8001d40:	6298      	str	r0, [r3, #40]	; 0x28
}
 8001d42:	4770      	bx	lr
 8001d44:	20000468 	.word	0x20000468

08001d48 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>:

void STM32_PLC_PWM4_To_PWM7_Set_Prescaler(uint16_t prescaler) {
	PWM_TIM_4_7->Instance->CNT = 0xFFFF;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler+0x10>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24
	PWM_TIM_4_7->Instance->PSC = prescaler;
 8001d54:	6298      	str	r0, [r3, #40]	; 0x28
}
 8001d56:	4770      	bx	lr
 8001d58:	2000046c 	.word	0x2000046c

08001d5c <STM32_PLC_Pulse_Count_Set>:
#include "Functions.h"

static uint32_t pulse_count[4] = {0};

void STM32_PLC_Pulse_Count_Set(uint8_t i){
	pulse_count[i]++;
 8001d5c:	4a03      	ldr	r2, [pc, #12]	; (8001d6c <STM32_PLC_Pulse_Count_Set+0x10>)
 8001d5e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001d62:	3301      	adds	r3, #1
 8001d64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000470 	.word	0x20000470

08001d70 <STM32_PLC_Pulse_Count_Get>:

uint32_t STM32_PLC_Pulse_Count_Get(uint8_t i){
	return pulse_count[i];
}
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <STM32_PLC_Pulse_Count_Get+0x8>)
 8001d72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001d76:	4770      	bx	lr
 8001d78:	20000470 	.word	0x20000470

08001d7c <STM32_PLC_Pulse_Count_Reset>:

void STM32_PLC_Pulse_Count_Reset(){
	memset(pulse_count, 0, sizeof(pulse_count));
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <STM32_PLC_Pulse_Count_Reset+0xc>)
 8001d7e:	2210      	movs	r2, #16
 8001d80:	2100      	movs	r1, #0
 8001d82:	f010 bb5d 	b.w	8012440 <memset>
 8001d86:	bf00      	nop
 8001d88:	20000470 	.word	0x20000470

08001d8c <STM32_PLC_Start_RTC>:
#include "Functions.h"

static RTC_HandleTypeDef *real_time_clock;

void STM32_PLC_Start_RTC(RTC_HandleTypeDef *hrtc) {
	real_time_clock = hrtc;
 8001d8c:	4b01      	ldr	r3, [pc, #4]	; (8001d94 <STM32_PLC_Start_RTC+0x8>)
 8001d8e:	6018      	str	r0, [r3, #0]
}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000480 	.word	0x20000480

08001d98 <STM32_PLC_RTC_Get_Date>:

void STM32_PLC_RTC_Get_Date(uint8_t *date, uint8_t *month, uint8_t *year) {
 8001d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	RTC_DateTypeDef sDate = {0};
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <STM32_PLC_RTC_Get_Date+0x2c>)
void STM32_PLC_RTC_Get_Date(uint8_t *date, uint8_t *month, uint8_t *year) {
 8001d9c:	4606      	mov	r6, r0
 8001d9e:	460d      	mov	r5, r1
 8001da0:	4614      	mov	r4, r2
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001da2:	6818      	ldr	r0, [r3, #0]
	RTC_DateTypeDef sDate = {0};
 8001da4:	2200      	movs	r2, #0
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001da6:	a901      	add	r1, sp, #4
	RTC_DateTypeDef sDate = {0};
 8001da8:	9201      	str	r2, [sp, #4]
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001daa:	f00a ffd5 	bl	800cd58 <HAL_RTC_GetDate>
	*date = sDate.Date;
 8001dae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001db2:	7033      	strb	r3, [r6, #0]
	*month = sDate.Month;
 8001db4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001db8:	702b      	strb	r3, [r5, #0]
	*year = sDate.Year;
 8001dba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001dbe:	7023      	strb	r3, [r4, #0]
}
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}
 8001dc4:	20000480 	.word	0x20000480

08001dc8 <STM32_PLC_RTC_Set_Date>:

void STM32_PLC_RTC_Set_Date(uint8_t date, uint8_t week_day, uint8_t month, uint8_t year) {
 8001dc8:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
	sDate.Date = date;
	sDate.Month = month;
	sDate.Year = year;
 8001dca:	f88d 3007 	strb.w	r3, [sp, #7]
	sDate.WeekDay = week_day;
	HAL_RTC_SetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <STM32_PLC_RTC_Set_Date+0x24>)
	sDate.Date = date;
 8001dd0:	f88d 0006 	strb.w	r0, [sp, #6]
	sDate.Month = month;
 8001dd4:	f88d 2005 	strb.w	r2, [sp, #5]
	sDate.WeekDay = week_day;
 8001dd8:	f88d 1004 	strb.w	r1, [sp, #4]
	HAL_RTC_SetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	2200      	movs	r2, #0
 8001de0:	a901      	add	r1, sp, #4
 8001de2:	f00a fe8d 	bl	800cb00 <HAL_RTC_SetDate>
}
 8001de6:	b003      	add	sp, #12
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dec:	20000480 	.word	0x20000480

08001df0 <STM32_PLC_RTC_Get_Time>:

void STM32_PLC_RTC_Get_Time(uint8_t *seconds, uint8_t *minutes, uint8_t *hours) {
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	4606      	mov	r6, r0
 8001df6:	460d      	mov	r5, r1
 8001df8:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2214      	movs	r2, #20
 8001dfe:	a801      	add	r0, sp, #4
 8001e00:	f010 fb1e 	bl	8012440 <memset>
	HAL_RTC_GetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <STM32_PLC_RTC_Get_Time+0x38>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	a901      	add	r1, sp, #4
 8001e0c:	f00a ff7f 	bl	800cd0e <HAL_RTC_GetTime>
	*seconds = sTime.Seconds;
 8001e10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001e14:	7033      	strb	r3, [r6, #0]
	*minutes = sTime.Minutes;
 8001e16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001e1a:	702b      	strb	r3, [r5, #0]
	*hours = sTime.Hours;
 8001e1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e20:	7023      	strb	r3, [r4, #0]
}
 8001e22:	b006      	add	sp, #24
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
 8001e26:	bf00      	nop
 8001e28:	20000480 	.word	0x20000480

08001e2c <STM32_PLC_RTC_Set_Time>:

void STM32_PLC_RTC_Set_Time(uint8_t seconds, uint8_t minutes, uint8_t hours) {
 8001e2c:	b570      	push	{r4, r5, r6, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	4606      	mov	r6, r0
 8001e32:	460d      	mov	r5, r1
 8001e34:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8001e36:	2100      	movs	r1, #0
 8001e38:	2210      	movs	r2, #16
 8001e3a:	a802      	add	r0, sp, #8
 8001e3c:	f010 fb00 	bl	8012440 <memset>
	sTime.Seconds = seconds;
	sTime.Minutes = minutes;
	sTime.Hours = hours;
	sTime.TimeFormat = RTC_FORMAT_BIN;
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <STM32_PLC_RTC_Set_Time+0x34>)
	sTime.Seconds = seconds;
 8001e42:	f88d 6006 	strb.w	r6, [sp, #6]
	sTime.TimeFormat = RTC_FORMAT_BIN;
 8001e46:	2200      	movs	r2, #0
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001e48:	6818      	ldr	r0, [r3, #0]
	sTime.Minutes = minutes;
 8001e4a:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001e4e:	a901      	add	r1, sp, #4
	sTime.Hours = hours;
 8001e50:	f88d 4004 	strb.w	r4, [sp, #4]
	sTime.TimeFormat = RTC_FORMAT_BIN;
 8001e54:	f88d 2007 	strb.w	r2, [sp, #7]
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001e58:	f00a fde1 	bl	800ca1e <HAL_RTC_SetTime>
}
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
 8001e60:	20000480 	.word	0x20000480

08001e64 <STM32_PLC_RTC_Set_AlarmA>:

void STM32_PLC_RTC_Set_AlarmA(uint8_t minutes, uint8_t hours, uint8_t date) {
 8001e64:	b570      	push	{r4, r5, r6, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	4605      	mov	r5, r0
 8001e6a:	460e      	mov	r6, r1
 8001e6c:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001e6e:	2100      	movs	r1, #0
 8001e70:	221c      	movs	r2, #28
 8001e72:	a802      	add	r0, sp, #8
 8001e74:	f010 fae4 	bl	8012440 <memset>
	sAlarm.AlarmTime.TimeFormat = RTC_FORMAT_BIN;
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
	sAlarm.AlarmDateWeekDay = date;
	sAlarm.Alarm = RTC_ALARM_A;
 8001e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_RTC_SetAlarm(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <STM32_PLC_RTC_Set_AlarmA+0x3c>)
	sAlarm.AlarmTime.Hours = hours;
 8001e80:	f88d 6000 	strb.w	r6, [sp]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e84:	2200      	movs	r2, #0
	HAL_RTC_SetAlarm(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e86:	6818      	ldr	r0, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8001e88:	f88d 5001 	strb.w	r5, [sp, #1]
	HAL_RTC_SetAlarm(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e8c:	4669      	mov	r1, sp
	sAlarm.AlarmTime.Seconds = 0;
 8001e8e:	f8ad 2002 	strh.w	r2, [sp, #2]
	sAlarm.AlarmTime.SubSeconds = 0;
 8001e92:	9201      	str	r2, [sp, #4]
	sAlarm.AlarmDateWeekDay = date;
 8001e94:	f88d 4020 	strb.w	r4, [sp, #32]
	HAL_RTC_SetAlarm(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e98:	f00a fe92 	bl	800cbc0 <HAL_RTC_SetAlarm>
}
 8001e9c:	b00a      	add	sp, #40	; 0x28
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	20000480 	.word	0x20000480

08001ea4 <STM32_PLC_RTC_Set_AlarmB>:

void STM32_PLC_RTC_Set_AlarmB(uint8_t minutes, uint8_t hours, uint8_t week_day) {
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	4605      	mov	r5, r0
 8001eaa:	460e      	mov	r6, r1
 8001eac:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001eae:	2100      	movs	r1, #0
 8001eb0:	221c      	movs	r2, #28
 8001eb2:	a802      	add	r0, sp, #8
 8001eb4:	f010 fac4 	bl	8012440 <memset>
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	sAlarm.AlarmTime.TimeFormat = RTC_FORMAT_BIN;
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ebc:	9307      	str	r3, [sp, #28]
	sAlarm.AlarmDateWeekDay = week_day;
	sAlarm.Alarm = RTC_ALARM_B;
 8001ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec2:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_RTC_SetAlarm(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <STM32_PLC_RTC_Set_AlarmB+0x44>)
	sAlarm.AlarmTime.Hours = hours;
 8001ec6:	f88d 6000 	strb.w	r6, [sp]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001eca:	2200      	movs	r2, #0
	HAL_RTC_SetAlarm(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001ecc:	6818      	ldr	r0, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8001ece:	f88d 5001 	strb.w	r5, [sp, #1]
	HAL_RTC_SetAlarm(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001ed2:	4669      	mov	r1, sp
	sAlarm.AlarmTime.Seconds = 0;
 8001ed4:	f8ad 2002 	strh.w	r2, [sp, #2]
	sAlarm.AlarmTime.SubSeconds = 0;
 8001ed8:	9201      	str	r2, [sp, #4]
	sAlarm.AlarmDateWeekDay = week_day;
 8001eda:	f88d 4020 	strb.w	r4, [sp, #32]
	HAL_RTC_SetAlarm(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001ede:	f00a fe6f 	bl	800cbc0 <HAL_RTC_SetAlarm>
}
 8001ee2:	b00a      	add	sp, #40	; 0x28
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000480 	.word	0x20000480

08001eec <STM32_PLC_RTC_Get_AlarmAB>:

bool STM32_PLC_RTC_Get_AlarmAB(uint32_t alarm, uint8_t *minutes, uint8_t *hours, uint8_t *date, uint8_t *week_day){
 8001eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/* Get the alarm, time and date */
	RTC_AlarmTypeDef sAlarm = {0};
	HAL_RTC_GetAlarm(real_time_clock, &sAlarm, alarm, RTC_FORMAT_BIN);
 8001ef0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001fb4 <STM32_PLC_RTC_Get_AlarmAB+0xc8>
bool STM32_PLC_RTC_Get_AlarmAB(uint32_t alarm, uint8_t *minutes, uint8_t *hours, uint8_t *date, uint8_t *week_day){
 8001ef4:	b091      	sub	sp, #68	; 0x44
 8001ef6:	4607      	mov	r7, r0
 8001ef8:	460d      	mov	r5, r1
 8001efa:	4616      	mov	r6, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001efc:	2100      	movs	r1, #0
 8001efe:	2228      	movs	r2, #40	; 0x28
 8001f00:	a806      	add	r0, sp, #24
bool STM32_PLC_RTC_Get_AlarmAB(uint32_t alarm, uint8_t *minutes, uint8_t *hours, uint8_t *date, uint8_t *week_day){
 8001f02:	4698      	mov	r8, r3
	RTC_AlarmTypeDef sAlarm = {0};
 8001f04:	f010 fa9c 	bl	8012440 <memset>
	HAL_RTC_GetAlarm(real_time_clock, &sAlarm, alarm, RTC_FORMAT_BIN);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	463a      	mov	r2, r7
 8001f0c:	a906      	add	r1, sp, #24
 8001f0e:	f8d9 0000 	ldr.w	r0, [r9]
 8001f12:	f00a ff3e 	bl	800cd92 <HAL_RTC_GetAlarm>
	RTC_TimeTypeDef sTime = {0};
 8001f16:	2214      	movs	r2, #20
 8001f18:	2100      	movs	r1, #0
 8001f1a:	a801      	add	r0, sp, #4
 8001f1c:	f010 fa90 	bl	8012440 <memset>
	HAL_RTC_GetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
	RTC_DateTypeDef sDate = {0};
 8001f20:	2400      	movs	r4, #0
	HAL_RTC_GetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001f22:	2200      	movs	r2, #0
 8001f24:	a901      	add	r1, sp, #4
 8001f26:	f8d9 0000 	ldr.w	r0, [r9]
 8001f2a:	f00a fef0 	bl	800cd0e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001f2e:	f8d9 0000 	ldr.w	r0, [r9]
	RTC_DateTypeDef sDate = {0};
 8001f32:	9400      	str	r4, [sp, #0]
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001f34:	4622      	mov	r2, r4
 8001f36:	4669      	mov	r1, sp
 8001f38:	f00a ff0e 	bl	800cd58 <HAL_RTC_GetDate>
	switch(alarm) {
 8001f3c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8001f40:	d006      	beq.n	8001f50 <STM32_PLC_RTC_Get_AlarmAB+0x64>
 8001f42:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8001f46:	d01d      	beq.n	8001f84 <STM32_PLC_RTC_Get_AlarmAB+0x98>
		*date = sAlarm.AlarmDateWeekDay;
		/* Notice that hours and date need to be equal but minutes need to be equal or greater */
		if(sTime.Hours == *hours && sTime.Minutes >= *minutes && sDate.Date == *date)
			return true;
		else
			return false;
 8001f48:	2000      	movs	r0, #0
		else
			return false;
	default:
		return false;
	}
}
 8001f4a:	b011      	add	sp, #68	; 0x44
 8001f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*minutes = sAlarm.AlarmTime.Minutes;
 8001f50:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001f54:	702b      	strb	r3, [r5, #0]
		*hours = sAlarm.AlarmTime.Hours;
 8001f56:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001f5a:	7033      	strb	r3, [r6, #0]
		*date = sAlarm.AlarmDateWeekDay;
 8001f5c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001f60:	f888 3000 	strb.w	r3, [r8]
		if(sTime.Hours == *hours && sTime.Minutes >= *minutes && sDate.Date == *date)
 8001f64:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001f68:	7832      	ldrb	r2, [r6, #0]
 8001f6a:	4291      	cmp	r1, r2
 8001f6c:	d1ec      	bne.n	8001f48 <STM32_PLC_RTC_Get_AlarmAB+0x5c>
 8001f6e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8001f72:	782a      	ldrb	r2, [r5, #0]
 8001f74:	4291      	cmp	r1, r2
 8001f76:	d3e7      	bcc.n	8001f48 <STM32_PLC_RTC_Get_AlarmAB+0x5c>
 8001f78:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1e3      	bne.n	8001f48 <STM32_PLC_RTC_Get_AlarmAB+0x5c>
			return true;
 8001f80:	2001      	movs	r0, #1
 8001f82:	e7e2      	b.n	8001f4a <STM32_PLC_RTC_Get_AlarmAB+0x5e>
		*minutes = sAlarm.AlarmTime.Minutes;
 8001f84:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001f88:	702b      	strb	r3, [r5, #0]
		*week_day = sAlarm.AlarmDateWeekDay;
 8001f8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
		*hours = sAlarm.AlarmTime.Hours;
 8001f8c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001f90:	7033      	strb	r3, [r6, #0]
		*week_day = sAlarm.AlarmDateWeekDay;
 8001f92:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001f96:	7013      	strb	r3, [r2, #0]
		if(sTime.Hours == *hours && sTime.Minutes >= *minutes && sDate.WeekDay == *week_day)
 8001f98:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001f9c:	7832      	ldrb	r2, [r6, #0]
 8001f9e:	4291      	cmp	r1, r2
 8001fa0:	d1d2      	bne.n	8001f48 <STM32_PLC_RTC_Get_AlarmAB+0x5c>
 8001fa2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8001fa6:	782a      	ldrb	r2, [r5, #0]
 8001fa8:	4291      	cmp	r1, r2
 8001faa:	d3cd      	bcc.n	8001f48 <STM32_PLC_RTC_Get_AlarmAB+0x5c>
 8001fac:	f89d 2000 	ldrb.w	r2, [sp]
 8001fb0:	e7e4      	b.n	8001f7c <STM32_PLC_RTC_Get_AlarmAB+0x90>
 8001fb2:	bf00      	nop
 8001fb4:	20000480 	.word	0x20000480

08001fb8 <STM32_PLC_Start_SD>:
/* These are extern inside fatfs.h */
FATFS USERFatFS;
FIL USERFile;

void STM32_PLC_Start_SD(SPI_HandleTypeDef *hspi, GPIO_TypeDef *SD_CS_PORT, uint16_t SD_CS_PIN) {
	SD_init(hspi, SD_CS_PORT, SD_CS_PIN);
 8001fb8:	f00d bd54 	b.w	800fa64 <SD_init>

08001fbc <STM32_PLC_SD_Unmount_Card>:
		}
	}
	return status;
}

FRESULT STM32_PLC_SD_Unmount_Card() {
 8001fbc:	b507      	push	{r0, r1, r2, lr}
	FRESULT status = f_mount(NULL, "", 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4905      	ldr	r1, [pc, #20]	; (8001fd8 <STM32_PLC_SD_Unmount_Card+0x1c>)
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f00f fb98 	bl	80116f8 <f_mount>
 8001fc8:	9001      	str	r0, [sp, #4]
	MX_FATFS_DeInit();
 8001fca:	f00d fc61 	bl	800f890 <MX_FATFS_DeInit>
	return status;
}
 8001fce:	9801      	ldr	r0, [sp, #4]
 8001fd0:	b003      	add	sp, #12
 8001fd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fd6:	bf00      	nop
 8001fd8:	08017795 	.word	0x08017795

08001fdc <STM32_PLC_SD_Mont_Card>:
FRESULT STM32_PLC_SD_Mont_Card() {
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		status = f_mount(&USERFatFS, "", 1);
 8001fde:	4e0a      	ldr	r6, [pc, #40]	; (8002008 <STM32_PLC_SD_Mont_Card+0x2c>)
 8001fe0:	4f0a      	ldr	r7, [pc, #40]	; (800200c <STM32_PLC_SD_Mont_Card+0x30>)
FRESULT STM32_PLC_SD_Mont_Card() {
 8001fe2:	24ff      	movs	r4, #255	; 0xff
		MX_FATFS_Init();
 8001fe4:	f00d fc60 	bl	800f8a8 <MX_FATFS_Init>
		status = f_mount(&USERFatFS, "", 1);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4631      	mov	r1, r6
 8001fec:	4638      	mov	r0, r7
 8001fee:	f00f fb83 	bl	80116f8 <f_mount>
		if(status == FR_OK){
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	b128      	cbz	r0, 8002002 <STM32_PLC_SD_Mont_Card+0x26>
			STM32_PLC_SD_Unmount_Card();
 8001ff6:	3c01      	subs	r4, #1
 8001ff8:	f7ff ffe0 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	while(attempt < 255) {
 8001ffc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002000:	d1f0      	bne.n	8001fe4 <STM32_PLC_SD_Mont_Card+0x8>
}
 8002002:	4628      	mov	r0, r5
 8002004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002006:	bf00      	nop
 8002008:	08017795 	.word	0x08017795
 800200c:	20002f7c 	.word	0x20002f7c

08002010 <STM32_PLC_SD_Open_Existing_File_With_Read>:

FRESULT STM32_PLC_SD_Open_Existing_File_With_Read(char filename[]) {
 8002010:	4601      	mov	r1, r0
	return f_open(&USERFile, filename, FA_READ); /* Posix "r" */
 8002012:	2201      	movs	r2, #1
 8002014:	4801      	ldr	r0, [pc, #4]	; (800201c <STM32_PLC_SD_Open_Existing_File_With_Read+0xc>)
 8002016:	f00f bba5 	b.w	8011764 <f_open>
 800201a:	bf00      	nop
 800201c:	20002d50 	.word	0x20002d50

08002020 <STM32_PLC_SD_Open_Existing_File_With_Write>:
}

/* TODO: byt namn på detta till STM32_PLC_SD_Create_File_With_Write */
FRESULT STM32_PLC_SD_Open_Existing_File_With_Write(char filename[]) {
 8002020:	4601      	mov	r1, r0
	return f_open(&USERFile, filename, FA_CREATE_ALWAYS | FA_WRITE); /* Posix "w" */
 8002022:	220a      	movs	r2, #10
 8002024:	4801      	ldr	r0, [pc, #4]	; (800202c <STM32_PLC_SD_Open_Existing_File_With_Write+0xc>)
 8002026:	f00f bb9d 	b.w	8011764 <f_open>
 800202a:	bf00      	nop
 800202c:	20002d50 	.word	0x20002d50

08002030 <STM32_PLC_SD_Close_File>:
	}
	return status;
}

FRESULT STM32_PLC_SD_Close_File() {
	return f_close(&USERFile);
 8002030:	4801      	ldr	r0, [pc, #4]	; (8002038 <STM32_PLC_SD_Close_File+0x8>)
 8002032:	f00f be8c 	b.w	8011d4e <f_close>
 8002036:	bf00      	nop
 8002038:	20002d50 	.word	0x20002d50

0800203c <STM32_PLC_SD_Check_Space>:
}

FRESULT STM32_PLC_SD_Check_Space(uint32_t *total_space, uint32_t *free_space) {
 800203c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800203e:	4607      	mov	r7, r0
	FATFS *pfs;
	DWORD fre_clust;
	FRESULT status = f_getfree("", &fre_clust, &pfs);
 8002040:	466a      	mov	r2, sp
FRESULT STM32_PLC_SD_Check_Space(uint32_t *total_space, uint32_t *free_space) {
 8002042:	460d      	mov	r5, r1
	FRESULT status = f_getfree("", &fre_clust, &pfs);
 8002044:	4812      	ldr	r0, [pc, #72]	; (8002090 <STM32_PLC_SD_Check_Space+0x54>)
 8002046:	a901      	add	r1, sp, #4
 8002048:	f00f fe92 	bl	8011d70 <f_getfree>
	*total_space = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800204c:	9e00      	ldr	r6, [sp, #0]
	FRESULT status = f_getfree("", &fre_clust, &pfs);
 800204e:	4604      	mov	r4, r0
	*total_space = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002050:	f8d6 0214 	ldr.w	r0, [r6, #532]	; 0x214
 8002054:	f896 3202 	ldrb.w	r3, [r6, #514]	; 0x202
 8002058:	3802      	subs	r0, #2
 800205a:	4358      	muls	r0, r3
 800205c:	f7fe fa52 	bl	8000504 <__aeabi_ui2d>
 8002060:	2200      	movs	r2, #0
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <STM32_PLC_SD_Check_Space+0x58>)
 8002064:	f7fe fac8 	bl	80005f8 <__aeabi_dmul>
 8002068:	f7fe fd9e 	bl	8000ba8 <__aeabi_d2uiz>
 800206c:	6038      	str	r0, [r7, #0]
	*free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 800206e:	f896 3202 	ldrb.w	r3, [r6, #514]	; 0x202
 8002072:	9801      	ldr	r0, [sp, #4]
 8002074:	4358      	muls	r0, r3
 8002076:	f7fe fa45 	bl	8000504 <__aeabi_ui2d>
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <STM32_PLC_SD_Check_Space+0x58>)
 800207c:	2200      	movs	r2, #0
 800207e:	f7fe fabb 	bl	80005f8 <__aeabi_dmul>
 8002082:	f7fe fd91 	bl	8000ba8 <__aeabi_d2uiz>
 8002086:	6028      	str	r0, [r5, #0]
	return status;
}
 8002088:	4620      	mov	r0, r4
 800208a:	b003      	add	sp, #12
 800208c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208e:	bf00      	nop
 8002090:	08017795 	.word	0x08017795
 8002094:	3fe00000 	.word	0x3fe00000

08002098 <STM32_PLC_SD_Read_File>:

/* Return text "error" or "eof" if it's end of file (eof) */
char* STM32_PLC_SD_Read_File(char text[], int len) {
	return f_gets(text, len, &USERFile);
 8002098:	4a01      	ldr	r2, [pc, #4]	; (80020a0 <STM32_PLC_SD_Read_File+0x8>)
 800209a:	f00f bed1 	b.w	8011e40 <f_gets>
 800209e:	bf00      	nop
 80020a0:	20002d50 	.word	0x20002d50

080020a4 <STM32_PLC_SD_Write_File>:
}

/* Return -1 with End of File (EOF) */
int STM32_PLC_SD_Write_File(char text[]) {
	return f_puts(text, &USERFile);
 80020a4:	4901      	ldr	r1, [pc, #4]	; (80020ac <STM32_PLC_SD_Write_File+0x8>)
 80020a6:	f00f bef0 	b.w	8011e8a <f_puts>
 80020aa:	bf00      	nop
 80020ac:	20002d50 	.word	0x20002d50

080020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>:
FRESULT STM32_PLC_SD_Create_New_File_With_Read_Write(char filename[], char initial_string[], bool overwrite) {
 80020b0:	b538      	push	{r3, r4, r5, lr}
 80020b2:	460d      	mov	r5, r1
	if(overwrite){
 80020b4:	b16a      	cbz	r2, 80020d2 <STM32_PLC_SD_Create_New_File_With_Read_Write+0x22>
		status = f_open(&USERFile, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE); /* Posix "w+" */
 80020b6:	220b      	movs	r2, #11
		status = f_open(&USERFile, filename, FA_CREATE_NEW | FA_READ | FA_WRITE); /* Posix "w+x" */
 80020b8:	4601      	mov	r1, r0
 80020ba:	4807      	ldr	r0, [pc, #28]	; (80020d8 <STM32_PLC_SD_Create_New_File_With_Read_Write+0x28>)
 80020bc:	f00f fb52 	bl	8011764 <f_open>
 80020c0:	4604      	mov	r4, r0
	if(status == FR_OK) {
 80020c2:	b920      	cbnz	r0, 80020ce <STM32_PLC_SD_Create_New_File_With_Read_Write+0x1e>
		STM32_PLC_SD_Write_File(initial_string);
 80020c4:	4628      	mov	r0, r5
 80020c6:	f7ff ffed 	bl	80020a4 <STM32_PLC_SD_Write_File>
		STM32_PLC_SD_Close_File();
 80020ca:	f7ff ffb1 	bl	8002030 <STM32_PLC_SD_Close_File>
}
 80020ce:	4620      	mov	r0, r4
 80020d0:	bd38      	pop	{r3, r4, r5, pc}
		status = f_open(&USERFile, filename, FA_CREATE_NEW | FA_READ | FA_WRITE); /* Posix "w+x" */
 80020d2:	2207      	movs	r2, #7
 80020d4:	e7f0      	b.n	80020b8 <STM32_PLC_SD_Create_New_File_With_Read_Write+0x8>
 80020d6:	bf00      	nop
 80020d8:	20002d50 	.word	0x20002d50

080020dc <CDC_ReceiveCallback>:
 * __weak void CDC_ReceiveCallback(uint8_t* receive_buf, uint32_t receive_len){
 *
 * }
 * is there below
 */
void CDC_ReceiveCallback(uint8_t* receive_buf, uint32_t receive_len){
 80020dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/*
	 * The protocol:
	 * receive_buf[0] = Determine what type of message
	 * receive_buf[1..receive_len] = The data
	 */
	uint8_t message_type = receive_buf[0];
 80020e0:	7805      	ldrb	r5, [r0, #0]
void CDC_ReceiveCallback(uint8_t* receive_buf, uint32_t receive_len){
 80020e2:	b092      	sub	sp, #72	; 0x48
 80020e4:	4604      	mov	r4, r0
	uint8_t index = 0;
	CAN_TxHeaderTypeDef TxHeader = {0};
 80020e6:	2218      	movs	r2, #24
 80020e8:	2100      	movs	r1, #0
 80020ea:	4668      	mov	r0, sp
 80020ec:	f010 f9a8 	bl	8012440 <memset>
	uint8_t send_data_array[47];
	switch(message_type){
 80020f0:	2d03      	cmp	r5, #3
 80020f2:	d818      	bhi.n	8002126 <CDC_ReceiveCallback+0x4a>
 80020f4:	e8df f005 	tbb	[pc, r5]
 80020f8:	4f403102 	.word	0x4f403102
		 * receive_buf[4] = ID                                      Remove this if you are using standard ID
		 * receive_buf[5] = ID LSB                                  Least significant bit
		 * receive_buf[6] = DLC                                     Length of data message
		 * receive_buf[7..7+DLC]                                    Data
		 */
		if(receive_buf[1] == 0){
 80020fc:	7863      	ldrb	r3, [r4, #1]
 80020fe:	a806      	add	r0, sp, #24
 8002100:	b9cb      	cbnz	r3, 8002136 <CDC_ReceiveCallback+0x5a>
			TxHeader.IDE = CAN_ID_STD;
			TxHeader.StdId = (receive_buf[2] << 8) | receive_buf[3];
 8002102:	8862      	ldrh	r2, [r4, #2]
 8002104:	7921      	ldrb	r1, [r4, #4]
			TxHeader.IDE = CAN_ID_STD;
 8002106:	9302      	str	r3, [sp, #8]
			TxHeader.StdId = (receive_buf[2] << 8) | receive_buf[3];
 8002108:	ba52      	rev16	r2, r2
 800210a:	b292      	uxth	r2, r2
 800210c:	9200      	str	r2, [sp, #0]
			TxHeader.DLC = receive_buf[4];
 800210e:	9104      	str	r1, [sp, #16]
			for(uint8_t i = 0; i < receive_buf[4]; i++)
 8002110:	3404      	adds	r4, #4
 8002112:	b2da      	uxtb	r2, r3
 8002114:	428a      	cmp	r2, r1
 8002116:	d309      	bcc.n	800212c <CDC_ReceiveCallback+0x50>
			TxHeader.ExtId = (receive_buf[2] << 24) | (receive_buf[3] << 16) | (receive_buf[4] << 8) | receive_buf[5];
			TxHeader.DLC = receive_buf[6];
			for(uint8_t i = 0; i < receive_buf[6]; i++)
				send_data_array[i] = receive_buf[7 + i];
		}
		TxHeader.RTR = CAN_RTR_DATA;                                /* Data frame */
 8002118:	2300      	movs	r3, #0
		TxHeader.TransmitGlobalTime = DISABLE;
		STM32_PLC_CAN_Transmit(send_data_array, &TxHeader);
 800211a:	4669      	mov	r1, sp
		TxHeader.RTR = CAN_RTR_DATA;                                /* Data frame */
 800211c:	9303      	str	r3, [sp, #12]
		TxHeader.TransmitGlobalTime = DISABLE;
 800211e:	f88d 3014 	strb.w	r3, [sp, #20]
		STM32_PLC_CAN_Transmit(send_data_array, &TxHeader);
 8002122:	f7fe fffd 	bl	8001120 <STM32_PLC_CAN_Transmit>
			index += 2;
		}
		CDC_Transmit_FS(send_data_array, 1 + 8 + 8*2 + 5*2 + 2*4 + 2*2);
		break;
	}
}
 8002126:	b012      	add	sp, #72	; 0x48
 8002128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				send_data_array[i] = receive_buf[5 + i];
 800212c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8002130:	54c2      	strb	r2, [r0, r3]
			for(uint8_t i = 0; i < receive_buf[4]; i++)
 8002132:	3301      	adds	r3, #1
 8002134:	e7ed      	b.n	8002112 <CDC_ReceiveCallback+0x36>
			TxHeader.IDE = CAN_ID_EXT;
 8002136:	2304      	movs	r3, #4
 8002138:	9302      	str	r3, [sp, #8]
			TxHeader.ExtId = (receive_buf[2] << 24) | (receive_buf[3] << 16) | (receive_buf[4] << 8) | receive_buf[5];
 800213a:	f8d4 3002 	ldr.w	r3, [r4, #2]
			TxHeader.DLC = receive_buf[6];
 800213e:	f814 2f06 	ldrb.w	r2, [r4, #6]!
 8002142:	9204      	str	r2, [sp, #16]
 8002144:	ba1b      	rev	r3, r3
			TxHeader.ExtId = (receive_buf[2] << 24) | (receive_buf[3] << 16) | (receive_buf[4] << 8) | receive_buf[5];
 8002146:	9301      	str	r3, [sp, #4]
			for(uint8_t i = 0; i < receive_buf[6]; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	b2d9      	uxtb	r1, r3
 800214c:	428a      	cmp	r2, r1
 800214e:	d9e3      	bls.n	8002118 <CDC_ReceiveCallback+0x3c>
				send_data_array[i] = receive_buf[7 + i];
 8002150:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002154:	54c1      	strb	r1, [r0, r3]
			for(uint8_t i = 0; i < receive_buf[6]; i++)
 8002156:	3301      	adds	r3, #1
 8002158:	e7f7      	b.n	800214a <CDC_ReceiveCallback+0x6e>
	CAN_TxHeaderTypeDef TxHeader = {0};
 800215a:	2500      	movs	r5, #0
			STM32_PLC_PWM_Set(i, (receive_buf[index+1] << 8) | receive_buf[index]);
 800215c:	1c66      	adds	r6, r4, #1
 800215e:	f816 1015 	ldrb.w	r1, [r6, r5, lsl #1]
 8002162:	f814 3015 	ldrb.w	r3, [r4, r5, lsl #1]
 8002166:	b2e8      	uxtb	r0, r5
 8002168:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800216c:	3501      	adds	r5, #1
 800216e:	f7ff fd8b 	bl	8001c88 <STM32_PLC_PWM_Set>
		for(uint8_t i = 0; i < 8; i++){
 8002172:	2d08      	cmp	r5, #8
 8002174:	d1f3      	bne.n	800215e <CDC_ReceiveCallback+0x82>
 8002176:	e7d6      	b.n	8002126 <CDC_ReceiveCallback+0x4a>
	CAN_TxHeaderTypeDef TxHeader = {0};
 8002178:	2500      	movs	r5, #0
			STM32_PLC_Analog_Output_Set(i, (receive_buf[index+1] << 8 ) | receive_buf[index]);
 800217a:	1c66      	adds	r6, r4, #1
 800217c:	f816 1015 	ldrb.w	r1, [r6, r5, lsl #1]
 8002180:	f814 3015 	ldrb.w	r3, [r4, r5, lsl #1]
 8002184:	b2e8      	uxtb	r0, r5
 8002186:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800218a:	3501      	adds	r5, #1
 800218c:	f7fe ff5a 	bl	8001044 <STM32_PLC_Analog_Output_Set>
		for(uint8_t i = 0; i < 3; i++){
 8002190:	2d03      	cmp	r5, #3
 8002192:	d1f3      	bne.n	800217c <CDC_ReceiveCallback+0xa0>
 8002194:	e7c7      	b.n	8002126 <CDC_ReceiveCallback+0x4a>
		send_data_array[index] = SEND_BACK_MEASUREMENT_MESSAGE;
 8002196:	ac06      	add	r4, sp, #24
 8002198:	2303      	movs	r3, #3
 800219a:	f88d 3018 	strb.w	r3, [sp, #24]
 800219e:	4627      	mov	r7, r4
 80021a0:	2500      	movs	r5, #0
 80021a2:	4626      	mov	r6, r4
			send_data_array[index] = STM32_PLC_Digital_Input_Get(i);
 80021a4:	b2e8      	uxtb	r0, r5
 80021a6:	f7ff f849 	bl	800123c <STM32_PLC_Digital_Input_Get>
 80021aa:	3501      	adds	r5, #1
		for(uint8_t i = 0; i < 8; i++){
 80021ac:	2d08      	cmp	r5, #8
			send_data_array[index] = STM32_PLC_Digital_Input_Get(i);
 80021ae:	f807 0f01 	strb.w	r0, [r7, #1]!
		for(uint8_t i = 0; i < 8; i++){
 80021b2:	d1f7      	bne.n	80021a4 <CDC_ReceiveCallback+0xc8>
 80021b4:	4627      	mov	r7, r4
 80021b6:	2500      	movs	r5, #0
 80021b8:	fa5f f885 	uxtb.w	r8, r5
			send_data_array[index] = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 80021bc:	4640      	mov	r0, r8
 80021be:	f7fe fea1 	bl	8000f04 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 80021c2:	7278      	strb	r0, [r7, #9]
			send_data_array[index+1] = STM32_PLC_Analog_Input_ADC_Get_Raw(i) >> 8;
 80021c4:	4640      	mov	r0, r8
 80021c6:	f7fe fe9d 	bl	8000f04 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 80021ca:	3501      	adds	r5, #1
 80021cc:	0a00      	lsrs	r0, r0, #8
		for(uint8_t i = 0; i < 8; i++){
 80021ce:	2d08      	cmp	r5, #8
			send_data_array[index+1] = STM32_PLC_Analog_Input_ADC_Get_Raw(i) >> 8;
 80021d0:	72b8      	strb	r0, [r7, #10]
		for(uint8_t i = 0; i < 8; i++){
 80021d2:	f107 0702 	add.w	r7, r7, #2
 80021d6:	d1ef      	bne.n	80021b8 <CDC_ReceiveCallback+0xdc>
 80021d8:	2500      	movs	r5, #0
 80021da:	b2ef      	uxtb	r7, r5
			send_data_array[index] = STM32_PLC_Analog_Input_DADC_Get_Raw(i);
 80021dc:	4638      	mov	r0, r7
 80021de:	f7fe feed 	bl	8000fbc <STM32_PLC_Analog_Input_DADC_Get_Raw>
 80021e2:	7660      	strb	r0, [r4, #25]
			send_data_array[index+1] = STM32_PLC_Analog_Input_DADC_Get_Raw(i) >> 8;
 80021e4:	4638      	mov	r0, r7
 80021e6:	f7fe fee9 	bl	8000fbc <STM32_PLC_Analog_Input_DADC_Get_Raw>
 80021ea:	3501      	adds	r5, #1
 80021ec:	1200      	asrs	r0, r0, #8
		for(uint8_t i = 0; i < 5; i++){
 80021ee:	2d05      	cmp	r5, #5
			send_data_array[index+1] = STM32_PLC_Analog_Input_DADC_Get_Raw(i) >> 8;
 80021f0:	76a0      	strb	r0, [r4, #26]
		for(uint8_t i = 0; i < 5; i++){
 80021f2:	f104 0402 	add.w	r4, r4, #2
 80021f6:	d1f0      	bne.n	80021da <CDC_ReceiveCallback+0xfe>
			union_f_u8.f = STM32_PLC_Input_Capture_Get(i);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7ff fc01 	bl	8001a00 <STM32_PLC_Input_Capture_Get>
 80021fe:	4d1d      	ldr	r5, [pc, #116]	; (8002274 <CDC_ReceiveCallback+0x198>)
			index += 2;
 8002200:	2423      	movs	r4, #35	; 0x23
			union_f_u8.f = STM32_PLC_Input_Capture_Get(i);
 8002202:	ed85 0a00 	vstr	s0, [r5]
 8002206:	462b      	mov	r3, r5
 8002208:	462f      	mov	r7, r5
				send_data_array[index] = union_f_u8.u8[i];
 800220a:	aa12      	add	r2, sp, #72	; 0x48
 800220c:	4422      	add	r2, r4
				index++;
 800220e:	3401      	adds	r4, #1
 8002210:	b2e4      	uxtb	r4, r4
				send_data_array[index] = union_f_u8.u8[i];
 8002212:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002216:	f802 1c30 	strb.w	r1, [r2, #-48]
			for(uint8_t i = 0; i < 4; i++){
 800221a:	2c27      	cmp	r4, #39	; 0x27
 800221c:	d1f5      	bne.n	800220a <CDC_ReceiveCallback+0x12e>
			union_f_u8.f = STM32_PLC_Input_Capture_Get(i);
 800221e:	2001      	movs	r0, #1
 8002220:	f7ff fbee 	bl	8001a00 <STM32_PLC_Input_Capture_Get>
 8002224:	ed87 0a00 	vstr	s0, [r7]
				send_data_array[index] = union_f_u8.u8[i];
 8002228:	ab12      	add	r3, sp, #72	; 0x48
 800222a:	4423      	add	r3, r4
				index++;
 800222c:	3401      	adds	r4, #1
 800222e:	b2e4      	uxtb	r4, r4
				send_data_array[index] = union_f_u8.u8[i];
 8002230:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002234:	f803 2c30 	strb.w	r2, [r3, #-48]
			for(uint8_t i = 0; i < 4; i++){
 8002238:	2c2b      	cmp	r4, #43	; 0x2b
 800223a:	d1f5      	bne.n	8002228 <CDC_ReceiveCallback+0x14c>
			send_data_array[index] = STM32_PLC_Encoder_Get_Raw(i);
 800223c:	2000      	movs	r0, #0
 800223e:	f7ff f84f 	bl	80012e0 <STM32_PLC_Encoder_Get_Raw>
 8002242:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
			send_data_array[index+1] = STM32_PLC_Encoder_Get_Raw(i) >> 8;
 8002246:	2000      	movs	r0, #0
 8002248:	f7ff f84a 	bl	80012e0 <STM32_PLC_Encoder_Get_Raw>
 800224c:	1200      	asrs	r0, r0, #8
 800224e:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
			send_data_array[index] = STM32_PLC_Encoder_Get_Raw(i);
 8002252:	2001      	movs	r0, #1
 8002254:	f7ff f844 	bl	80012e0 <STM32_PLC_Encoder_Get_Raw>
 8002258:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
			send_data_array[index+1] = STM32_PLC_Encoder_Get_Raw(i) >> 8;
 800225c:	2001      	movs	r0, #1
 800225e:	f7ff f83f 	bl	80012e0 <STM32_PLC_Encoder_Get_Raw>
 8002262:	1200      	asrs	r0, r0, #8
 8002264:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
		CDC_Transmit_FS(send_data_array, 1 + 8 + 8*2 + 5*2 + 2*4 + 2*2);
 8002268:	212f      	movs	r1, #47	; 0x2f
 800226a:	4630      	mov	r0, r6
 800226c:	f00f feb2 	bl	8011fd4 <CDC_Transmit_FS>
}
 8002270:	e759      	b.n	8002126 <CDC_ReceiveCallback+0x4a>
 8002272:	bf00      	nop
 8002274:	200031ac 	.word	0x200031ac

08002278 <CAN_Send_Message>:
	internal_DLC[buffer_index_receive] = 0;
	buffer_index_receive++;										/* When this is 256, then it will be come 0 again */
}
#endif

ENUM_J1939_STATUS_CODES CAN_Send_Message(uint32_t ID, uint8_t data[], uint8_t delay) {
 8002278:	b530      	push	{r4, r5, lr}
	ENUM_J1939_STATUS_CODES status;
	#if PROCESSOR_CHOICE == STM32
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;											/* Here we are sending 8 bytes */
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 800227a:	2300      	movs	r3, #0
ENUM_J1939_STATUS_CODES CAN_Send_Message(uint32_t ID, uint8_t data[], uint8_t delay) {
 800227c:	b087      	sub	sp, #28
 800227e:	4615      	mov	r5, r2
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 8002280:	2208      	movs	r2, #8
 8002282:	e9cd 3203 	strd	r3, r2, [sp, #12]
ENUM_J1939_STATUS_CODES CAN_Send_Message(uint32_t ID, uint8_t data[], uint8_t delay) {
 8002286:	4604      	mov	r4, r0
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 8002288:	2204      	movs	r2, #4
ENUM_J1939_STATUS_CODES CAN_Send_Message(uint32_t ID, uint8_t data[], uint8_t delay) {
 800228a:	4608      	mov	r0, r1
	TxHeader.TransmitGlobalTime = DISABLE;
	TxHeader.ExtId = ID;
	TxHeader.StdId = 0x00; 										/* Not used */
	status = STM32_PLC_CAN_Transmit(data, &TxHeader);
 800228c:	4669      	mov	r1, sp
	TxHeader.StdId = 0x00; 										/* Not used */
 800228e:	e9cd 3400 	strd	r3, r4, [sp]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 8002292:	9202      	str	r2, [sp, #8]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002294:	f88d 3014 	strb.w	r3, [sp, #20]
	status = STM32_PLC_CAN_Transmit(data, &TxHeader);
 8002298:	f7fe ff42 	bl	8001120 <STM32_PLC_CAN_Transmit>
 800229c:	4604      	mov	r4, r0
	HAL_Delay(delay);											/* A delay for messages are required sometimes */
 800229e:	4628      	mov	r0, r5
 80022a0:	f008 fa7e 	bl	800a7a0 <HAL_Delay>
	#else
	/* If no processor are used, use internal feedback for debugging */
	status = Internal_Transmit(ID, data, 8);
	#endif
	return status;
}
 80022a4:	4620      	mov	r0, r4
 80022a6:	b007      	add	sp, #28
 80022a8:	bd30      	pop	{r4, r5, pc}

080022aa <CAN_Send_Request>:

/* Send a PGN request
 * PGN: 0x00EA00 (59904)
 */
ENUM_J1939_STATUS_CODES CAN_Send_Request(uint32_t ID, uint8_t PGN[], uint8_t delay) {
 80022aa:	b530      	push	{r4, r5, lr}
	ENUM_J1939_STATUS_CODES status;
	#if PROCESSOR_CHOICE == STM32
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 3;											/* Here we are only sending 3 bytes */
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 80022ac:	2300      	movs	r3, #0
ENUM_J1939_STATUS_CODES CAN_Send_Request(uint32_t ID, uint8_t PGN[], uint8_t delay) {
 80022ae:	b087      	sub	sp, #28
 80022b0:	4615      	mov	r5, r2
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 80022b2:	2203      	movs	r2, #3
 80022b4:	e9cd 3203 	strd	r3, r2, [sp, #12]
ENUM_J1939_STATUS_CODES CAN_Send_Request(uint32_t ID, uint8_t PGN[], uint8_t delay) {
 80022b8:	4604      	mov	r4, r0
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 80022ba:	2204      	movs	r2, #4
ENUM_J1939_STATUS_CODES CAN_Send_Request(uint32_t ID, uint8_t PGN[], uint8_t delay) {
 80022bc:	4608      	mov	r0, r1
	TxHeader.TransmitGlobalTime = DISABLE;
	TxHeader.ExtId = ID;
	TxHeader.StdId = 0x00; 										/* Not used */
	status = STM32_PLC_CAN_Transmit(PGN, &TxHeader);
 80022be:	4669      	mov	r1, sp
	TxHeader.StdId = 0x00; 										/* Not used */
 80022c0:	e9cd 3400 	strd	r3, r4, [sp]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 80022c4:	9202      	str	r2, [sp, #8]
	TxHeader.TransmitGlobalTime = DISABLE;
 80022c6:	f88d 3014 	strb.w	r3, [sp, #20]
	status = STM32_PLC_CAN_Transmit(PGN, &TxHeader);
 80022ca:	f7fe ff29 	bl	8001120 <STM32_PLC_CAN_Transmit>
 80022ce:	4604      	mov	r4, r0
	HAL_Delay(delay);											/* A delay for messages are required sometimes */
 80022d0:	4628      	mov	r0, r5
 80022d2:	f008 fa65 	bl	800a7a0 <HAL_Delay>
	#else
	/* If no processor are used, use internal feedback for debugging */
	status = Internal_Transmit(ID, PGN, 3);
	#endif
	return status;
}
 80022d6:	4620      	mov	r0, r4
 80022d8:	b007      	add	sp, #28
 80022da:	bd30      	pop	{r4, r5, pc}

080022dc <CAN_Read_Message>:

/* Read the current CAN-bus message. Returning false if the message has been read before, else true */
bool CAN_Read_Message(uint32_t *ID, uint8_t data[]) {
 80022dc:	b507      	push	{r0, r1, r2, lr}
	bool is_new_message;
	#if PROCESSOR_CHOICE == STM32
	STM32_PLC_CAN_Get_ID_Data(ID, data, &is_new_message);
 80022de:	f10d 0207 	add.w	r2, sp, #7
 80022e2:	f7fe ff29 	bl	8001138 <STM32_PLC_CAN_Get_ID_Data>
	#else
	/* If no processor are used, use internal feedback for debugging */
	Internal_Receive(ID, data, &is_new_message);
	#endif
	return is_new_message;
}
 80022e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80022ea:	b003      	add	sp, #12
 80022ec:	f85d fb04 	ldr.w	pc, [sp], #4

080022f0 <FLASH_EEPROM_RAM_Memory>:
	/* Implement your memory handler function for the AVR platform */
	#else
	/* If no processor are used, use internal feedback for debugging */
	*command = STATUS_DM15_PROCEED;
	#endif
}
 80022f0:	4770      	bx	lr

080022f2 <ISO_11783_Send_Auxiliary_Valve_Command>:

/*
 * Send an auxiliary valve command to all ECU
 * PGN: 0x00FE30 (65072) to 0x00FE3F (65087)
 */
ENUM_J1939_STATUS_CODES ISO_11783_Send_Auxiliary_Valve_Command(J1939 *j1939, uint8_t valve_number, uint8_t standard_flow, uint8_t fail_safe_mode, uint8_t valve_state) {
 80022f2:	b507      	push	{r0, r1, r2, lr}
	uint32_t ID = (0x0CFE << 16) | ((0x30 + valve_number) << 8) | j1939->this_ECU_address;
	uint8_t data[8];
	data[0] = standard_flow;
 80022f4:	f88d 2000 	strb.w	r2, [sp]
	uint32_t ID = (0x0CFE << 16) | ((0x30 + valve_number) << 8) | j1939->this_ECU_address;
 80022f8:	f890 0ae0 	ldrb.w	r0, [r0, #2784]	; 0xae0
	data[1] = 0xFF; 												/* Reserved */
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 80022fc:	f89d 2010 	ldrb.w	r2, [sp, #16]
	uint32_t ID = (0x0CFE << 16) | ((0x30 + valve_number) << 8) | j1939->this_ECU_address;
 8002300:	3130      	adds	r1, #48	; 0x30
 8002302:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 8002306:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
	data[1] = 0xFF; 												/* Reserved */
 800230a:	21ff      	movs	r1, #255	; 0xff
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 800230c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;			/* All reserved */
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002310:	f040 604f 	orr.w	r0, r0, #217055232	; 0xcf00000
	data[1] = 0xFF; 												/* Reserved */
 8002314:	f88d 1001 	strb.w	r1, [sp, #1]
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 8002318:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;			/* All reserved */
 800231c:	f88d 1003 	strb.w	r1, [sp, #3]
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002324:	2200      	movs	r2, #0
 8002326:	4669      	mov	r1, sp
 8002328:	f440 2060 	orr.w	r0, r0, #917504	; 0xe0000
	data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;			/* All reserved */
 800232c:	9301      	str	r3, [sp, #4]
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 800232e:	f7ff ffa3 	bl	8002278 <CAN_Send_Message>
}
 8002332:	b003      	add	sp, #12
 8002334:	f85d fb04 	ldr.w	pc, [sp], #4

08002338 <ISO_11783_Read_Auxiliary_Valve_Command>:

/*
 * Read an auxiliary valve command from any ECU - Broadcast in other words
 * PGN: 0x00FE30 (65072) to 0x00FE3F (65087)
 */
void ISO_11783_Read_Auxiliary_Valve_Command(J1939 *j1939, uint8_t SA, uint8_t valve_number, uint8_t data[]) {
 8002338:	b510      	push	{r4, lr}
 800233a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	j1939->from_other_ecu_auxiliary_valve_command[valve_number].standard_flow = data[0];
 800233e:	781c      	ldrb	r4, [r3, #0]
 8002340:	f882 4a88 	strb.w	r4, [r2, #2696]	; 0xa88
	j1939->from_other_ecu_auxiliary_valve_command[valve_number].fail_safe_mode = data[2] >> 6;
 8002344:	7898      	ldrb	r0, [r3, #2]
 8002346:	0980      	lsrs	r0, r0, #6
 8002348:	f882 0a89 	strb.w	r0, [r2, #2697]	; 0xa89
	j1939->from_other_ecu_auxiliary_valve_command[valve_number].valve_state = data[2] & 0b00001111;
 800234c:	789b      	ldrb	r3, [r3, #2]
	j1939->from_other_ecu_auxiliary_valve_command[valve_number].from_ecu_address = SA;
 800234e:	f882 1a8b 	strb.w	r1, [r2, #2699]	; 0xa8b
	j1939->from_other_ecu_auxiliary_valve_command[valve_number].valve_state = data[2] & 0b00001111;
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	f882 3a8a 	strb.w	r3, [r2, #2698]	; 0xa8a
}
 800235a:	bd10      	pop	{r4, pc}

0800235c <ISO_11783_Response_Request_Auxiliary_Valve_Estimated_Flow>:

/*
 * Response the request auxiliary valve estimated flow to all ECU
 * PGN: 0x00FE10 (65040) to 0x00FE1F (65055)
 */
ENUM_J1939_STATUS_CODES ISO_11783_Response_Request_Auxiliary_Valve_Estimated_Flow(J1939 *j1939, uint8_t valve_number) {
 800235c:	b513      	push	{r0, r1, r4, lr}
	uint32_t ID = (0x0CFE << 16) | ((0x10 + valve_number) << 8) | j1939->this_ECU_address;
 800235e:	f890 4ae0 	ldrb.w	r4, [r0, #2784]	; 0xae0
 8002362:	f101 0310 	add.w	r3, r1, #16
 8002366:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	uint8_t data[8];
	data[0] = j1939->this_auxiliary_valve_estimated_flow[valve_number].extend_estimated_flow_standard;
 800236a:	2306      	movs	r3, #6
 800236c:	fb03 0101 	mla	r1, r3, r1, r0
	data[1] = j1939->this_auxiliary_valve_estimated_flow[valve_number].retract_estimated_flow_standard;
	data[2] = (j1939->this_auxiliary_valve_estimated_flow[valve_number].fail_safe_mode << 6) | (0b11 << 4) | j1939->this_auxiliary_valve_estimated_flow[valve_number].valve_state; 	/* Bit 5 and 6 are reserved */
	data[3] = j1939->this_auxiliary_valve_estimated_flow[valve_number].limit << 5;
	data[4] = data[5] = data[6] = data[7] = 0xFF;					/* All reserved */
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002370:	f044 604f 	orr.w	r0, r4, #217055232	; 0xcf00000
	data[0] = j1939->this_auxiliary_valve_estimated_flow[valve_number].extend_estimated_flow_standard;
 8002374:	f8b1 3d30 	ldrh.w	r3, [r1, #3376]	; 0xd30
	data[2] = (j1939->this_auxiliary_valve_estimated_flow[valve_number].fail_safe_mode << 6) | (0b11 << 4) | j1939->this_auxiliary_valve_estimated_flow[valve_number].valve_state; 	/* Bit 5 and 6 are reserved */
 8002378:	f891 2d33 	ldrb.w	r2, [r1, #3379]	; 0xd33
	data[0] = j1939->this_auxiliary_valve_estimated_flow[valve_number].extend_estimated_flow_standard;
 800237c:	f8ad 3000 	strh.w	r3, [sp]
	data[2] = (j1939->this_auxiliary_valve_estimated_flow[valve_number].fail_safe_mode << 6) | (0b11 << 4) | j1939->this_auxiliary_valve_estimated_flow[valve_number].valve_state; 	/* Bit 5 and 6 are reserved */
 8002380:	f891 3d32 	ldrb.w	r3, [r1, #3378]	; 0xd32
 8002384:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002388:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800238c:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = j1939->this_auxiliary_valve_estimated_flow[valve_number].limit << 5;
 8002390:	f891 3d34 	ldrb.w	r3, [r1, #3380]	; 0xd34
 8002394:	015b      	lsls	r3, r3, #5
 8002396:	f88d 3003 	strb.w	r3, [sp, #3]
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 800239a:	2200      	movs	r2, #0
	data[4] = data[5] = data[6] = data[7] = 0xFF;					/* All reserved */
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 80023a0:	4669      	mov	r1, sp
 80023a2:	f440 2060 	orr.w	r0, r0, #917504	; 0xe0000
	data[4] = data[5] = data[6] = data[7] = 0xFF;					/* All reserved */
 80023a6:	9301      	str	r3, [sp, #4]
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 80023a8:	f7ff ff66 	bl	8002278 <CAN_Send_Message>
}
 80023ac:	b002      	add	sp, #8
 80023ae:	bd10      	pop	{r4, pc}

080023b0 <ISO_11783_Read_Response_Request_Auxiliary_Estimated_Flow>:

/*
 * Read a response request auxiliary valve estimated flow from any ECU - Broadcast in other words
 * PGN: 0x00FE10 (65040) to 0x00FE1F (65055)
 */
void ISO_11783_Read_Response_Request_Auxiliary_Estimated_Flow(J1939 *j1939, uint8_t SA, uint8_t valve_number, uint8_t data[]) {
 80023b0:	b530      	push	{r4, r5, lr}
	j1939->from_other_ecu_auxiliary_valve_estimated_flow[valve_number].extend_estimated_flow_standard = data[0];
 80023b2:	2506      	movs	r5, #6
 80023b4:	fb05 0202 	mla	r2, r5, r2, r0
 80023b8:	781c      	ldrb	r4, [r3, #0]
 80023ba:	f882 499c 	strb.w	r4, [r2, #2460]	; 0x99c
	j1939->from_other_ecu_auxiliary_valve_estimated_flow[valve_number].retract_estimated_flow_standard = data[1];
 80023be:	7858      	ldrb	r0, [r3, #1]
 80023c0:	f882 099d 	strb.w	r0, [r2, #2461]	; 0x99d
	j1939->from_other_ecu_auxiliary_valve_estimated_flow[valve_number].fail_safe_mode = data[2] >> 6;
 80023c4:	7898      	ldrb	r0, [r3, #2]
 80023c6:	40e8      	lsrs	r0, r5
 80023c8:	f882 099f 	strb.w	r0, [r2, #2463]	; 0x99f
	j1939->from_other_ecu_auxiliary_valve_estimated_flow[valve_number].valve_state = data[2] & 0b00001111;
 80023cc:	7898      	ldrb	r0, [r3, #2]
 80023ce:	f000 000f 	and.w	r0, r0, #15
 80023d2:	f882 099e 	strb.w	r0, [r2, #2462]	; 0x99e
	j1939->from_other_ecu_auxiliary_valve_estimated_flow[valve_number].limit = data[3] >> 5;
 80023d6:	78db      	ldrb	r3, [r3, #3]
	j1939->from_other_ecu_auxiliary_valve_estimated_flow[valve_number].from_ecu_address = SA;
 80023d8:	f882 19a1 	strb.w	r1, [r2, #2465]	; 0x9a1
	j1939->from_other_ecu_auxiliary_valve_estimated_flow[valve_number].limit = data[3] >> 5;
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	f882 39a0 	strb.w	r3, [r2, #2464]	; 0x9a0
}
 80023e2:	bd30      	pop	{r4, r5, pc}

080023e4 <ISO_11783_Response_Request_Auxiliary_Valve_Measured_Position>:

/*
 * Response the request auxiliary valve measured position to all ECU
 * PGN: 0x00FF20 (65312) to 0x00FF2F (65327)
 */
ENUM_J1939_STATUS_CODES ISO_11783_Response_Request_Auxiliary_Valve_Measured_Position(J1939 *j1939, uint8_t valve_number) {
 80023e4:	b513      	push	{r0, r1, r4, lr}
	uint32_t ID = (0x0CFF << 16) | ((0x20 + valve_number) << 8) | j1939->this_ECU_address;
 80023e6:	f101 0320 	add.w	r3, r1, #32
 80023ea:	f890 4ae0 	ldrb.w	r4, [r0, #2784]	; 0xae0
 80023ee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80023f2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	uint8_t data[8];
	data[0] = j1939->this_auxiliary_valve_measured_position[valve_number].measured_position_procent;
 80023f6:	f8b1 3d90 	ldrh.w	r3, [r1, #3472]	; 0xd90
 80023fa:	f8ad 3000 	strh.w	r3, [sp]
	data[1] = j1939->this_auxiliary_valve_measured_position[valve_number].measured_position_procent >> 8;
	data[2] = j1939->this_auxiliary_valve_measured_position[valve_number].valve_state;
 80023fe:	f891 3d92 	ldrb.w	r3, [r1, #3474]	; 0xd92
 8002402:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = j1939->this_auxiliary_valve_measured_position[valve_number].measured_position_micrometer;
 8002406:	f8b1 3d94 	ldrh.w	r3, [r1, #3476]	; 0xd94
 800240a:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = j1939->this_auxiliary_valve_measured_position[valve_number].measured_position_micrometer >> 8;
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = data[6] = data[7] = 0xFF;								/* All reserved */
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002414:	f044 604f 	orr.w	r0, r4, #217055232	; 0xcf00000
	data[5] = data[6] = data[7] = 0xFF;								/* All reserved */
 8002418:	23ff      	movs	r3, #255	; 0xff
 800241a:	f88d 3005 	strb.w	r3, [sp, #5]
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 800241e:	2200      	movs	r2, #0
	data[5] = data[6] = data[7] = 0xFF;								/* All reserved */
 8002420:	f64f 73ff 	movw	r3, #65535	; 0xffff
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002424:	4669      	mov	r1, sp
 8002426:	f440 2070 	orr.w	r0, r0, #983040	; 0xf0000
	data[5] = data[6] = data[7] = 0xFF;								/* All reserved */
 800242a:	f8ad 3006 	strh.w	r3, [sp, #6]
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 800242e:	f7ff ff23 	bl	8002278 <CAN_Send_Message>
}
 8002432:	b002      	add	sp, #8
 8002434:	bd10      	pop	{r4, pc}

08002436 <ISO_11783_Read_Response_Request_Auxiliary_Valve_Measured_Position>:

/*
 * Read a response request auxiliary valve measured position from any ECU - Broadcast in other words
 * PGN: 0x00FF20 (65312) to 0x00FF2F (65327)
 */
void ISO_11783_Read_Response_Request_Auxiliary_Valve_Measured_Position(J1939 *j1939, uint8_t SA, uint8_t valve_number, uint8_t data[]) {
 8002436:	b510      	push	{r4, lr}
 8002438:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	j1939->from_other_ecu_auxiliary_valve_measured_position[valve_number].measured_position_procent = (data[1] << 8) | data[0];
 800243c:	785c      	ldrb	r4, [r3, #1]
 800243e:	7818      	ldrb	r0, [r3, #0]
 8002440:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002444:	f8a2 09fc 	strh.w	r0, [r2, #2556]	; 0x9fc
	j1939->from_other_ecu_auxiliary_valve_measured_position[valve_number].valve_state = data[2];
 8002448:	7898      	ldrb	r0, [r3, #2]
 800244a:	f882 09fe 	strb.w	r0, [r2, #2558]	; 0x9fe
	j1939->from_other_ecu_auxiliary_valve_measured_position[valve_number].measured_position_micrometer = (data[4] << 8) | data[3];
 800244e:	7918      	ldrb	r0, [r3, #4]
 8002450:	78db      	ldrb	r3, [r3, #3]
	j1939->from_other_ecu_auxiliary_valve_measured_position[valve_number].from_ecu_address = SA;
 8002452:	f882 1a02 	strb.w	r1, [r2, #2562]	; 0xa02
	j1939->from_other_ecu_auxiliary_valve_measured_position[valve_number].measured_position_micrometer = (data[4] << 8) | data[3];
 8002456:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800245a:	f8a2 3a00 	strh.w	r3, [r2, #2560]	; 0xa00
}
 800245e:	bd10      	pop	{r4, pc}

08002460 <ISO_11783_Send_General_Purpose_Valve_Command>:

/*
 * Send a general purpose valve command to an ECU
 * PGN: 0x00C400 (50176)
 */
ENUM_J1939_STATUS_CODES ISO_11783_Send_General_Purpose_Valve_Command(J1939 *j1939, uint8_t DA, uint8_t standard_flow, uint8_t fail_safe_mode, uint8_t valve_state, uint16_t extended_flow) {
 8002460:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t ID = (0x0CC4 << 16) | (DA << 8) | j1939->this_ECU_address;
 8002462:	f890 5ae0 	ldrb.w	r5, [r0, #2784]	; 0xae0
	uint8_t data[8];
	data[0] = standard_flow;
 8002466:	f88d 2000 	strb.w	r2, [sp]
	data[1] = 0xFF; 												/* Reserved */
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 800246a:	f89d 2018 	ldrb.w	r2, [sp, #24]
ENUM_J1939_STATUS_CODES ISO_11783_Send_General_Purpose_Valve_Command(J1939 *j1939, uint8_t DA, uint8_t standard_flow, uint8_t fail_safe_mode, uint8_t valve_state, uint16_t extended_flow) {
 800246e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
	data[3] = extended_flow;
 8002472:	f88d 4003 	strb.w	r4, [sp, #3]
	uint32_t ID = (0x0CC4 << 16) | (DA << 8) | j1939->this_ECU_address;
 8002476:	ea45 2001 	orr.w	r0, r5, r1, lsl #8
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 800247a:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
	data[1] = 0xFF; 												/* Reserved */
 800247e:	21ff      	movs	r1, #255	; 0xff
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 8002480:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	data[4] = extended_flow >> 8;
	data[5] = data[6] = data[7] = 0xFF;								/* All reserved */
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002484:	f040 604c 	orr.w	r0, r0, #213909504	; 0xcc00000
	data[1] = 0xFF; 												/* Reserved */
 8002488:	f88d 1001 	strb.w	r1, [sp, #1]
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 800248c:	f88d 3002 	strb.w	r3, [sp, #2]
	data[5] = data[6] = data[7] = 0xFF;								/* All reserved */
 8002490:	f88d 1005 	strb.w	r1, [sp, #5]
 8002494:	f64f 73ff 	movw	r3, #65535	; 0xffff
	data[4] = extended_flow >> 8;
 8002498:	0a24      	lsrs	r4, r4, #8
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 800249a:	2200      	movs	r2, #0
 800249c:	4669      	mov	r1, sp
 800249e:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
	data[4] = extended_flow >> 8;
 80024a2:	f88d 4004 	strb.w	r4, [sp, #4]
	data[5] = data[6] = data[7] = 0xFF;								/* All reserved */
 80024a6:	f8ad 3006 	strh.w	r3, [sp, #6]
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 80024aa:	f7ff fee5 	bl	8002278 <CAN_Send_Message>
}
 80024ae:	b003      	add	sp, #12
 80024b0:	bd30      	pop	{r4, r5, pc}

080024b2 <ISO_11783_Read_General_Purpose_Valve_Command>:
/*
 * Read a general purpose valve command from an ECU
 * PGN: 0x00C400 (50176)
 */
void ISO_11783_Read_General_Purpose_Valve_Command(J1939 *j1939, uint8_t SA, uint8_t data[]) {
	j1939->from_other_ecu_general_purpose_valve_command.standard_flow = data[0];
 80024b2:	7813      	ldrb	r3, [r2, #0]
 80024b4:	f880 3ac8 	strb.w	r3, [r0, #2760]	; 0xac8
	j1939->from_other_ecu_general_purpose_valve_command.fail_safe_mode = data[2] >> 6;
 80024b8:	7893      	ldrb	r3, [r2, #2]
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	f880 3ac9 	strb.w	r3, [r0, #2761]	; 0xac9
	j1939->from_other_ecu_general_purpose_valve_command.valve_state = data[2] & 0b00001111;
 80024c0:	7893      	ldrb	r3, [r2, #2]
void ISO_11783_Read_General_Purpose_Valve_Command(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 80024c2:	b510      	push	{r4, lr}
	j1939->from_other_ecu_general_purpose_valve_command.valve_state = data[2] & 0b00001111;
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	f880 3aca 	strb.w	r3, [r0, #2762]	; 0xaca
	j1939->from_other_ecu_general_purpose_valve_command.extended_flow = (data[4] << 8) | data[3];
 80024cc:	7914      	ldrb	r4, [r2, #4]
 80024ce:	78d3      	ldrb	r3, [r2, #3]
	j1939->from_other_ecu_general_purpose_valve_command.from_ecu_address = SA;
 80024d0:	f880 1ace 	strb.w	r1, [r0, #2766]	; 0xace
	j1939->from_other_ecu_general_purpose_valve_command.extended_flow = (data[4] << 8) | data[3];
 80024d4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80024d8:	f8a0 3acc 	strh.w	r3, [r0, #2764]	; 0xacc
}
 80024dc:	bd10      	pop	{r4, pc}

080024de <ISO_11783_Response_Request_General_Purpose_Valve_Estimated_Flow>:

/*
 * Response the request general purpose valve estimated flow to an ECU
 * PGN: 0x00C600 (50688)
 */
ENUM_J1939_STATUS_CODES ISO_11783_Response_Request_General_Purpose_Valve_Estimated_Flow(J1939 *j1939, uint8_t DA) {
 80024de:	b513      	push	{r0, r1, r4, lr}
	uint32_t ID = (0x0CC6 << 16) | (DA << 8) | j1939->this_ECU_address;
 80024e0:	f890 3ae0 	ldrb.w	r3, [r0, #2784]	; 0xae0
	uint8_t data[8];
	data[0] = j1939->this_general_purpose_valve_estimated_flow.extend_estimated_flow_standard;
	data[1] = j1939->this_general_purpose_valve_estimated_flow.retract_estimated_flow_standard;
	data[2] = (j1939->this_general_purpose_valve_estimated_flow.fail_safe_mode << 6) | (0b11 << 4) | j1939->this_general_purpose_valve_estimated_flow.valve_state; 	/* Bit 5 and 6 are reserved */
 80024e4:	f890 2e13 	ldrb.w	r2, [r0, #3603]	; 0xe13
	uint32_t ID = (0x0CC6 << 16) | (DA << 8) | j1939->this_ECU_address;
 80024e8:	ea43 2401 	orr.w	r4, r3, r1, lsl #8
	data[0] = j1939->this_general_purpose_valve_estimated_flow.extend_estimated_flow_standard;
 80024ec:	f8b0 3e10 	ldrh.w	r3, [r0, #3600]	; 0xe10
 80024f0:	f8ad 3000 	strh.w	r3, [sp]
	data[2] = (j1939->this_general_purpose_valve_estimated_flow.fail_safe_mode << 6) | (0b11 << 4) | j1939->this_general_purpose_valve_estimated_flow.valve_state; 	/* Bit 5 and 6 are reserved */
 80024f4:	f890 3e12 	ldrb.w	r3, [r0, #3602]	; 0xe12
 80024f8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024fc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002500:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = j1939->this_general_purpose_valve_estimated_flow.limit << 5;
 8002504:	f890 3e14 	ldrb.w	r3, [r0, #3604]	; 0xe14
 8002508:	015b      	lsls	r3, r3, #5
 800250a:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = j1939->this_general_purpose_valve_estimated_flow.extend_estimated_flow_extended;
 800250e:	f8b0 3e16 	ldrh.w	r3, [r0, #3606]	; 0xe16
 8002512:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[5] = j1939->this_general_purpose_valve_estimated_flow.extend_estimated_flow_extended >> 8;
	data[6] = j1939->this_general_purpose_valve_estimated_flow.retract_estimated_flow_extended;
 8002516:	f8b0 3e18 	ldrh.w	r3, [r0, #3608]	; 0xe18
 800251a:	f8ad 3006 	strh.w	r3, [sp, #6]
	data[7] = j1939->this_general_purpose_valve_estimated_flow.retract_estimated_flow_extended >> 8;
	return CAN_Send_Message(ID, data, 0);
 800251e:	f044 604c 	orr.w	r0, r4, #213909504	; 0xcc00000
 8002522:	2200      	movs	r2, #0
 8002524:	4669      	mov	r1, sp
 8002526:	f440 20c0 	orr.w	r0, r0, #393216	; 0x60000
 800252a:	f7ff fea5 	bl	8002278 <CAN_Send_Message>
}
 800252e:	b002      	add	sp, #8
 8002530:	bd10      	pop	{r4, pc}

08002532 <ISO_11783_Read_Response_Request_General_Purpose_Valve_Estimated_Flow>:
/*
 * Read a response request general purpose valve estimated flow from an ECU
 * PGN: 0x00C600 (50688)
 */
void ISO_11783_Read_Response_Request_General_Purpose_Valve_Estimated_Flow(J1939 *j1939, uint8_t SA, uint8_t data[]) {
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.extend_estimated_flow_standard = data[0];
 8002532:	7813      	ldrb	r3, [r2, #0]
 8002534:	f880 3a7c 	strb.w	r3, [r0, #2684]	; 0xa7c
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.retract_estimated_flow_standard = data[1];
 8002538:	7853      	ldrb	r3, [r2, #1]
 800253a:	f880 3a7d 	strb.w	r3, [r0, #2685]	; 0xa7d
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.fail_safe_mode = data[2] >> 6;
 800253e:	7893      	ldrb	r3, [r2, #2]
 8002540:	099b      	lsrs	r3, r3, #6
 8002542:	f880 3a7f 	strb.w	r3, [r0, #2687]	; 0xa7f
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.valve_state = data[2] & 0b00001111;
 8002546:	7893      	ldrb	r3, [r2, #2]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	f880 3a7e 	strb.w	r3, [r0, #2686]	; 0xa7e
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.limit = data[3] >> 5;
 8002550:	78d3      	ldrb	r3, [r2, #3]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	f880 3a80 	strb.w	r3, [r0, #2688]	; 0xa80
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.extend_estimated_flow_extended = (data[5] << 8) | data[4];
 8002558:	7913      	ldrb	r3, [r2, #4]
void ISO_11783_Read_Response_Request_General_Purpose_Valve_Estimated_Flow(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 800255a:	b510      	push	{r4, lr}
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.extend_estimated_flow_extended = (data[5] << 8) | data[4];
 800255c:	7954      	ldrb	r4, [r2, #5]
 800255e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002562:	f8a0 3a82 	strh.w	r3, [r0, #2690]	; 0xa82
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.retract_estimated_flow_extended = (data[7] << 8) | data[6];
 8002566:	79d4      	ldrb	r4, [r2, #7]
 8002568:	7993      	ldrb	r3, [r2, #6]
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.from_ecu_address = SA;
 800256a:	f880 1a86 	strb.w	r1, [r0, #2694]	; 0xa86
	j1939->from_other_ecu_general_purpose_valve_estimated_flow.retract_estimated_flow_extended = (data[7] << 8) | data[6];
 800256e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002572:	f8a0 3a84 	strh.w	r3, [r0, #2692]	; 0xa84
}
 8002576:	bd10      	pop	{r4, pc}

08002578 <Open_SAE_J1939_Listen_For_Messages>:

#include "../ISO 11783/ISO 11783-7 Application Layer/Application_Layer.h"
#include "Open_SAE_J1939.h"

/* This function should be called all the time */
void Open_SAE_J1939_Listen_For_Messages(J1939* j1939) {
 8002578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint32_t ID = 0;
 800257a:	2300      	movs	r3, #0
void Open_SAE_J1939_Listen_For_Messages(J1939* j1939) {
 800257c:	4604      	mov	r4, r0
	uint8_t data[8] = {0};
	if(CAN_Read_Message(&ID, data)){
 800257e:	a902      	add	r1, sp, #8
 8002580:	a801      	add	r0, sp, #4
	uint8_t data[8] = {0};
 8002582:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002586:	9303      	str	r3, [sp, #12]
	if(CAN_Read_Message(&ID, data)){
 8002588:	f7ff fea8 	bl	80022dc <CAN_Read_Message>
 800258c:	b1a0      	cbz	r0, 80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		uint8_t id0 = ID >> 24;
 800258e:	9901      	ldr	r1, [sp, #4]
 8002590:	0e08      	lsrs	r0, r1, #24
		uint8_t id1 = ID >> 16;
		uint8_t DA = ID >> 8; 	/* Destination address which is this ECU. if DA = 0xFF = broadcast to all ECU. Sometimes DA can be an ID number too */
		uint8_t SA = ID; 		/* Source address of the ECU that we got the message from */

		/* Read request from other ECU */
		if (id0 == 0x18 && id1 == 0xEA && (DA == j1939->this_ECU_address || DA == 0xFF))
 8002592:	2818      	cmp	r0, #24
		uint8_t id1 = ID >> 16;
 8002594:	f3c1 4307 	ubfx	r3, r1, #16, #8
		uint8_t DA = ID >> 8; 	/* Destination address which is this ECU. if DA = 0xFF = broadcast to all ECU. Sometimes DA can be an ID number too */
 8002598:	f3c1 2207 	ubfx	r2, r1, #8, #8
		uint8_t SA = ID; 		/* Source address of the ECU that we got the message from */
 800259c:	b2c9      	uxtb	r1, r1
		if (id0 == 0x18 && id1 == 0xEA && (DA == j1939->this_ECU_address || DA == 0xFF))
 800259e:	d12e      	bne.n	80025fe <Open_SAE_J1939_Listen_For_Messages+0x86>
 80025a0:	2bea      	cmp	r3, #234	; 0xea
 80025a2:	d10b      	bne.n	80025bc <Open_SAE_J1939_Listen_For_Messages+0x44>
 80025a4:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d001      	beq.n	80025b0 <Open_SAE_J1939_Listen_For_Messages+0x38>
 80025ac:	2aff      	cmp	r2, #255	; 0xff
 80025ae:	d103      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Request(j1939, SA, data);
 80025b0:	aa02      	add	r2, sp, #8
 80025b2:	4620      	mov	r0, r4
 80025b4:	f000 f8fb 	bl	80027ae <SAE_J1939_Read_Request>
			ISO_11783_Read_General_Purpose_Valve_Command(j1939, SA, data);										/* General Purpose Valve Command have only one valve */
		else if (id0 == 0x0 && id1 == 0x2 && (DA == j1939->this_ECU_address || DA == 0xFF))
			SAE_J1939_Read_Address_Delete(j1939, data);															/* Not a SAE J1939 standard */
		/* Add more else if statement here */
	}
}
 80025b8:	b004      	add	sp, #16
 80025ba:	bd10      	pop	{r4, pc}
		else if (id0 == 0x18 && id1 == 0xD9 && DA == j1939->this_ECU_address)
 80025bc:	2bd9      	cmp	r3, #217	; 0xd9
 80025be:	d108      	bne.n	80025d2 <Open_SAE_J1939_Listen_For_Messages+0x5a>
 80025c0:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d1f7      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Request_DM14(j1939, SA, data);
 80025c8:	aa02      	add	r2, sp, #8
 80025ca:	4620      	mov	r0, r4
 80025cc:	f000 fcfb 	bl	8002fc6 <SAE_J1939_Read_Request_DM14>
 80025d0:	e7f2      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if(id0 == 0x18 && id1 == 0xE8 && DA == j1939->this_ECU_address)
 80025d2:	2be8      	cmp	r3, #232	; 0xe8
 80025d4:	d108      	bne.n	80025e8 <Open_SAE_J1939_Listen_For_Messages+0x70>
 80025d6:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
 80025da:	4293      	cmp	r3, r2
 80025dc:	d1ec      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Acknowledgement(j1939, SA, data);
 80025de:	aa02      	add	r2, sp, #8
 80025e0:	4620      	mov	r0, r4
 80025e2:	f000 f8af 	bl	8002744 <SAE_J1939_Read_Acknowledgement>
 80025e6:	e7e7      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x18 && id1 == 0xD8 && DA == j1939->this_ECU_address)
 80025e8:	2bd8      	cmp	r3, #216	; 0xd8
 80025ea:	d120      	bne.n	800262e <Open_SAE_J1939_Listen_For_Messages+0xb6>
 80025ec:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d1e1      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Response_DM15(j1939, SA, data);
 80025f4:	aa02      	add	r2, sp, #8
 80025f6:	4620      	mov	r0, r4
 80025f8:	f000 fd6e 	bl	80030d8 <SAE_J1939_Read_Response_DM15>
 80025fc:	e7dc      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if(id0 == 0x1C && id1 == 0xEC && DA == j1939->this_ECU_address)
 80025fe:	281c      	cmp	r0, #28
 8002600:	d14c      	bne.n	800269c <Open_SAE_J1939_Listen_For_Messages+0x124>
 8002602:	2bec      	cmp	r3, #236	; 0xec
 8002604:	d108      	bne.n	8002618 <Open_SAE_J1939_Listen_For_Messages+0xa0>
 8002606:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
 800260a:	4293      	cmp	r3, r2
 800260c:	d1d4      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Transport_Protocol_Connection_Management(j1939, SA, data);
 800260e:	aa02      	add	r2, sp, #8
 8002610:	4620      	mov	r0, r4
 8002612:	f000 f993 	bl	800293c <SAE_J1939_Read_Transport_Protocol_Connection_Management>
 8002616:	e7cf      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x1C && id1 == 0xEB && DA == j1939->this_ECU_address)
 8002618:	2beb      	cmp	r3, #235	; 0xeb
 800261a:	d1cd      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
 800261c:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
 8002620:	4293      	cmp	r3, r2
 8002622:	d1c9      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Transport_Protocol_Data_Transfer(j1939, SA, data);
 8002624:	aa02      	add	r2, sp, #8
 8002626:	4620      	mov	r0, r4
 8002628:	f000 f9aa 	bl	8002980 <SAE_J1939_Read_Transport_Protocol_Data_Transfer>
 800262c:	e7c4      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x18 && id1 == 0xEE && DA == 0xFF && SA != 0xFE)
 800262e:	2bee      	cmp	r3, #238	; 0xee
 8002630:	d10b      	bne.n	800264a <Open_SAE_J1939_Listen_For_Messages+0xd2>
 8002632:	2aff      	cmp	r2, #255	; 0xff
 8002634:	d1c0      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
 8002636:	29fe      	cmp	r1, #254	; 0xfe
			SAE_J1939_Read_Response_Request_Address_Claimed(j1939, SA, data);									/* This is a broadcast response request */
 8002638:	aa02      	add	r2, sp, #8
 800263a:	4620      	mov	r0, r4
		else if (id0 == 0x18 && id1 == 0xEE && DA == 0xFF && SA != 0xFE)
 800263c:	d002      	beq.n	8002644 <Open_SAE_J1939_Listen_For_Messages+0xcc>
			SAE_J1939_Read_Response_Request_Address_Claimed(j1939, SA, data);									/* This is a broadcast response request */
 800263e:	f000 fef3 	bl	8003428 <SAE_J1939_Read_Response_Request_Address_Claimed>
 8002642:	e7b9      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Address_Not_Claimed(j1939, SA, data);												/* This is error */
 8002644:	f000 ffb0 	bl	80035a8 <SAE_J1939_Read_Address_Not_Claimed>
 8002648:	e7b6      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x18 && id1 == 0xFE && DA == 0xCA)
 800264a:	2bfe      	cmp	r3, #254	; 0xfe
 800264c:	d116      	bne.n	800267c <Open_SAE_J1939_Listen_For_Messages+0x104>
 800264e:	2aca      	cmp	r2, #202	; 0xca
 8002650:	d105      	bne.n	800265e <Open_SAE_J1939_Listen_For_Messages+0xe6>
			SAE_J1939_Read_Response_Request_DM1(j1939, SA, data, 1); 											/* Assume that errors_dm1_active = 1 */
 8002652:	2301      	movs	r3, #1
 8002654:	aa02      	add	r2, sp, #8
 8002656:	4620      	mov	r0, r4
 8002658:	f000 fc70 	bl	8002f3c <SAE_J1939_Read_Response_Request_DM1>
 800265c:	e7ac      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x18 && id1 == 0xFE && DA == 0xCB)
 800265e:	2acb      	cmp	r2, #203	; 0xcb
 8002660:	d105      	bne.n	800266e <Open_SAE_J1939_Listen_For_Messages+0xf6>
			SAE_J1939_Read_Response_Request_DM2(j1939, SA, data, 1); 											/* Assume that errors_dm2_active = 1 */
 8002662:	2301      	movs	r3, #1
 8002664:	aa02      	add	r2, sp, #8
 8002666:	4620      	mov	r0, r4
 8002668:	f000 fe4a 	bl	8003300 <SAE_J1939_Read_Response_Request_DM2>
 800266c:	e7a4      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x18 && id1 == 0xFE && DA == 0xDA)
 800266e:	2ada      	cmp	r2, #218	; 0xda
 8002670:	d10d      	bne.n	800268e <Open_SAE_J1939_Listen_For_Messages+0x116>
			SAE_J1939_Read_Response_Request_Software_Identification(j1939, SA, data);
 8002672:	aa02      	add	r2, sp, #8
 8002674:	4620      	mov	r0, r4
 8002676:	f000 fbd5 	bl	8002e24 <SAE_J1939_Read_Response_Request_Software_Identification>
 800267a:	e79d      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x18 && id1 == 0xFD && DA == 0xC5)
 800267c:	2bfd      	cmp	r3, #253	; 0xfd
 800267e:	d19b      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
 8002680:	2ac5      	cmp	r2, #197	; 0xc5
 8002682:	d199      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Response_Request_ECU_Identification(j1939, SA, data);
 8002684:	aa02      	add	r2, sp, #8
 8002686:	4620      	mov	r0, r4
 8002688:	f000 fb4e 	bl	8002d28 <SAE_J1939_Read_Response_Request_ECU_Identification>
 800268c:	e794      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x18 && id1 == 0xFE && DA == 0xEB)
 800268e:	2aeb      	cmp	r2, #235	; 0xeb
 8002690:	d192      	bne.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Response_Request_Component_Identification(j1939, SA, data);
 8002692:	aa02      	add	r2, sp, #8
 8002694:	4620      	mov	r0, r4
 8002696:	f000 fab9 	bl	8002c0c <SAE_J1939_Read_Response_Request_Component_Identification>
 800269a:	e78d      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x0C && id1 == 0xFE && DA >= 0x10 && DA <= 0x1F)
 800269c:	280c      	cmp	r0, #12
 800269e:	d13f      	bne.n	8002720 <Open_SAE_J1939_Listen_For_Messages+0x1a8>
 80026a0:	2bfe      	cmp	r3, #254	; 0xfe
 80026a2:	d10a      	bne.n	80026ba <Open_SAE_J1939_Listen_For_Messages+0x142>
 80026a4:	f1a2 0310 	sub.w	r3, r2, #16
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d820      	bhi.n	80026ee <Open_SAE_J1939_Listen_For_Messages+0x176>
			ISO_11783_Read_Response_Request_Auxiliary_Estimated_Flow(j1939, SA, DA & 0xF, data);				/* DA & 0xF = Valve number. Total 16 valves from 0 to 15 */
 80026ac:	ab02      	add	r3, sp, #8
 80026ae:	f002 020f 	and.w	r2, r2, #15
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7ff fe7c 	bl	80023b0 <ISO_11783_Read_Response_Request_Auxiliary_Estimated_Flow>
 80026b8:	e77e      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x0C && id1 == 0xC6 && DA == j1939->this_ECU_address)
 80026ba:	2bc6      	cmp	r3, #198	; 0xc6
 80026bc:	d109      	bne.n	80026d2 <Open_SAE_J1939_Listen_For_Messages+0x15a>
 80026be:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
 80026c2:	4293      	cmp	r3, r2
 80026c4:	f47f af78 	bne.w	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			ISO_11783_Read_Response_Request_General_Purpose_Valve_Estimated_Flow(j1939, SA, data);
 80026c8:	aa02      	add	r2, sp, #8
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff ff31 	bl	8002532 <ISO_11783_Read_Response_Request_General_Purpose_Valve_Estimated_Flow>
 80026d0:	e772      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x0C && id1 == 0xFF && DA >= 0x20 && DA <= 0x2F)
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d117      	bne.n	8002706 <Open_SAE_J1939_Listen_For_Messages+0x18e>
 80026d6:	f1a2 0320 	sub.w	r3, r2, #32
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f63f af6c 	bhi.w	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			ISO_11783_Read_Response_Request_Auxiliary_Valve_Measured_Position(j1939, SA, DA & 0xF, data); 		/* DA & 0xF = Valve number. Total 16 valves from 0 to 15 */
 80026e0:	ab02      	add	r3, sp, #8
 80026e2:	f002 020f 	and.w	r2, r2, #15
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7ff fea5 	bl	8002436 <ISO_11783_Read_Response_Request_Auxiliary_Valve_Measured_Position>
 80026ec:	e764      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x0C && id1 == 0xFE && DA >= 0x30 && DA <= 0x3F)
 80026ee:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	f63f af60 	bhi.w	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			ISO_11783_Read_Auxiliary_Valve_Command(j1939, SA, DA & 0xF, data); 									/* DA & 0xF = Valve number. Total 16 valves from 0 to 15 */
 80026f8:	ab02      	add	r3, sp, #8
 80026fa:	f002 020f 	and.w	r2, r2, #15
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff fe1a 	bl	8002338 <ISO_11783_Read_Auxiliary_Valve_Command>
 8002704:	e758      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x0C && id1 == 0xC4 && DA == j1939->this_ECU_address)
 8002706:	2bc4      	cmp	r3, #196	; 0xc4
 8002708:	f47f af56 	bne.w	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
 800270c:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
 8002710:	4293      	cmp	r3, r2
 8002712:	f47f af51 	bne.w	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			ISO_11783_Read_General_Purpose_Valve_Command(j1939, SA, data);										/* General Purpose Valve Command have only one valve */
 8002716:	aa02      	add	r2, sp, #8
 8002718:	4620      	mov	r0, r4
 800271a:	f7ff feca 	bl	80024b2 <ISO_11783_Read_General_Purpose_Valve_Command>
 800271e:	e74b      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
		else if (id0 == 0x0 && id1 == 0x2 && (DA == j1939->this_ECU_address || DA == 0xFF))
 8002720:	2800      	cmp	r0, #0
 8002722:	f47f af49 	bne.w	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
 8002726:	2b02      	cmp	r3, #2
 8002728:	f47f af46 	bne.w	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
 800272c:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
 8002730:	4293      	cmp	r3, r2
 8002732:	d002      	beq.n	800273a <Open_SAE_J1939_Listen_For_Messages+0x1c2>
 8002734:	2aff      	cmp	r2, #255	; 0xff
 8002736:	f47f af3f 	bne.w	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>
			SAE_J1939_Read_Address_Delete(j1939, data);															/* Not a SAE J1939 standard */
 800273a:	a902      	add	r1, sp, #8
 800273c:	4620      	mov	r0, r4
 800273e:	f000 fee7 	bl	8003510 <SAE_J1939_Read_Address_Delete>
}
 8002742:	e739      	b.n	80025b8 <Open_SAE_J1939_Listen_For_Messages+0x40>

08002744 <SAE_J1939_Read_Acknowledgement>:
/*
 * Store acknowledgement information from other ECU about PGN request to other ECU
 * PGN: 0x00E800 (59392)
 */
void SAE_J1939_Read_Acknowledgement(J1939 *j1939, uint8_t SA, uint8_t data[]) {
	j1939->from_other_ecu_acknowledgement.control_byte = data[0];
 8002744:	7813      	ldrb	r3, [r2, #0]
 8002746:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
	j1939->from_other_ecu_acknowledgement.group_function_value = data[1];				/* The cause of the control byte */
 800274a:	7853      	ldrb	r3, [r2, #1]
 800274c:	f880 3115 	strb.w	r3, [r0, #277]	; 0x115
	j1939->from_other_ecu_acknowledgement.address = data[4]; 							/* The source address from the ECU */
 8002750:	7913      	ldrb	r3, [r2, #4]
 8002752:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
	j1939->from_other_ecu_acknowledgement.PGN_of_requested_info = (data[7] << 16) | (data[6] << 8) | data[5];
 8002756:	7993      	ldrb	r3, [r2, #6]
 8002758:	79d1      	ldrb	r1, [r2, #7]
 800275a:	7952      	ldrb	r2, [r2, #5]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
}
 8002768:	4770      	bx	lr

0800276a <SAE_J1939_Send_Acknowledgement>:

/*
 * Send back a acknowledgement to other ECU about the their PGN request
 * PGN: 0x00E800 (59392)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Acknowledgement(J1939 *j1939, uint8_t DA, uint8_t control_byte, uint8_t group_function_value, uint32_t PGN_of_requested_info) {
 800276a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t ID = (0x18E8 << 16) | (DA << 8) | j1939->this_ECU_address;
 800276c:	f890 5ae0 	ldrb.w	r5, [r0, #2784]	; 0xae0
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Acknowledgement(J1939 *j1939, uint8_t DA, uint8_t control_byte, uint8_t group_function_value, uint32_t PGN_of_requested_info) {
 8002770:	9c06      	ldr	r4, [sp, #24]
	uint8_t data[8];
	data[0] = control_byte;
	data[1] = group_function_value;											/* The cause of the control byte */
 8002772:	f88d 3001 	strb.w	r3, [sp, #1]
	uint32_t ID = (0x18E8 << 16) | (DA << 8) | j1939->this_ECU_address;
 8002776:	ea45 2001 	orr.w	r0, r5, r1, lsl #8
	data[2] = 0xFF;															/* Reserved */
 800277a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	data[3] = 0xFF;															/* Reserved */
	data[4] = j1939->this_ECU_address;										/* This source address */
	data[5] = PGN_of_requested_info;
	data[6] = PGN_of_requested_info >> 8;
	data[7] = PGN_of_requested_info >> 16;
	return CAN_Send_Message(ID, data, 0);									/* 0 ms delay */
 800277e:	f040 50c7 	orr.w	r0, r0, #417333248	; 0x18e00000
	data[0] = control_byte;
 8002782:	f88d 2000 	strb.w	r2, [sp]
	data[2] = 0xFF;															/* Reserved */
 8002786:	f8ad 3002 	strh.w	r3, [sp, #2]
	data[5] = PGN_of_requested_info;
 800278a:	f88d 4005 	strb.w	r4, [sp, #5]
	data[6] = PGN_of_requested_info >> 8;
 800278e:	0a23      	lsrs	r3, r4, #8
	return CAN_Send_Message(ID, data, 0);									/* 0 ms delay */
 8002790:	2200      	movs	r2, #0
	data[7] = PGN_of_requested_info >> 16;
 8002792:	0c24      	lsrs	r4, r4, #16
	return CAN_Send_Message(ID, data, 0);									/* 0 ms delay */
 8002794:	4669      	mov	r1, sp
 8002796:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
	data[4] = j1939->this_ECU_address;										/* This source address */
 800279a:	f88d 5004 	strb.w	r5, [sp, #4]
	data[6] = PGN_of_requested_info >> 8;
 800279e:	f88d 3006 	strb.w	r3, [sp, #6]
	data[7] = PGN_of_requested_info >> 16;
 80027a2:	f88d 4007 	strb.w	r4, [sp, #7]
	return CAN_Send_Message(ID, data, 0);									/* 0 ms delay */
 80027a6:	f7ff fd67 	bl	8002278 <CAN_Send_Message>
}
 80027aa:	b003      	add	sp, #12
 80027ac:	bd30      	pop	{r4, r5, pc}

080027ae <SAE_J1939_Read_Request>:

/*
 * Read a PGN request from another ECU about PGN information at this ECU. All listed PGN should be here
 * PGN: 0x00EA00 (59904)
 */
void SAE_J1939_Read_Request(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 80027ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t PGN = (data[2] << 16) | (data[1] << 8) | data[0];
 80027b0:	7854      	ldrb	r4, [r2, #1]
 80027b2:	7893      	ldrb	r3, [r2, #2]
 80027b4:	0224      	lsls	r4, r4, #8
 80027b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80027ba:	7813      	ldrb	r3, [r2, #0]
 80027bc:	431c      	orrs	r4, r3
	if (PGN == PGN_ACKNOWLEDGEMENT) {
 80027be:	f5b4 4f68 	cmp.w	r4, #59392	; 0xe800
void SAE_J1939_Read_Request(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 80027c2:	4605      	mov	r5, r0
 80027c4:	460e      	mov	r6, r1
	if (PGN == PGN_ACKNOWLEDGEMENT) {
 80027c6:	d106      	bne.n	80027d6 <SAE_J1939_Read_Request+0x28>
	} else if (PGN == PGN_DM3) {
		SAE_J1939_Response_Request_DM3(j1939, SA);
	} else if (PGN == PGN_REQUEST) {
		SAE_J1939_Send_Acknowledgement(j1939, SA, CONTROL_BYTE_ACKNOWLEDGEMENT_PGN_SUPPORTED, GROUP_FUNCTION_VALUE_NORMAL, PGN);
	} else if (PGN == PGN_TP_CM) {
		SAE_J1939_Send_Acknowledgement(j1939, SA, CONTROL_BYTE_ACKNOWLEDGEMENT_PGN_SUPPORTED, GROUP_FUNCTION_VALUE_NORMAL, PGN);
 80027c8:	2300      	movs	r3, #0
 80027ca:	9400      	str	r4, [sp, #0]
 80027cc:	461a      	mov	r2, r3
	} else if (PGN == PGN_ECU_IDENTIFICATION) {
		SAE_J1939_Response_Request_ECU_Identification(j1939, SA);
	} else if (PGN == PGN_COMPONENT_IDENTIFICATION) {
		SAE_J1939_Response_Request_Component_Identification(j1939, SA);
	} else {
		SAE_J1939_Send_Acknowledgement(j1939, SA, CONTROL_BYTE_ACKNOWLEDGEMENT_PGN_NOT_SUPPORTED, GROUP_FUNCTION_VALUE_NO_CAUSE, PGN);
 80027ce:	f7ff ffcc 	bl	800276a <SAE_J1939_Send_Acknowledgement>
	}
	/* Add more else if statements here */
}
 80027d2:	b002      	add	sp, #8
 80027d4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (PGN == PGN_ADDRESS_CLAIMED){
 80027d6:	f5b4 4f6e 	cmp.w	r4, #60928	; 0xee00
 80027da:	d104      	bne.n	80027e6 <SAE_J1939_Read_Request+0x38>
}
 80027dc:	b002      	add	sp, #8
 80027de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SAE_J1939_Response_Request_Address_Claimed(j1939);
 80027e2:	f000 bde7 	b.w	80033b4 <SAE_J1939_Response_Request_Address_Claimed>
	} else if (PGN == PGN_COMMANDED_ADDRESS) {
 80027e6:	f64f 63d8 	movw	r3, #65240	; 0xfed8
 80027ea:	429c      	cmp	r4, r3
 80027ec:	d0ec      	beq.n	80027c8 <SAE_J1939_Read_Request+0x1a>
	} else if (PGN == PGN_ADDRESS_DELETE) {
 80027ee:	2c02      	cmp	r4, #2
 80027f0:	d0ea      	beq.n	80027c8 <SAE_J1939_Read_Request+0x1a>
	} else if (PGN == PGN_DM1) {
 80027f2:	f64f 63ca 	movw	r3, #65226	; 0xfeca
 80027f6:	429c      	cmp	r4, r3
 80027f8:	d104      	bne.n	8002804 <SAE_J1939_Read_Request+0x56>
}
 80027fa:	b002      	add	sp, #8
 80027fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SAE_J1939_Response_Request_DM1(j1939, SA);
 8002800:	f000 bb24 	b.w	8002e4c <SAE_J1939_Response_Request_DM1>
	} else if (PGN == PGN_DM2) {
 8002804:	f64f 63cb 	movw	r3, #65227	; 0xfecb
 8002808:	429c      	cmp	r4, r3
 800280a:	d107      	bne.n	800281c <SAE_J1939_Read_Request+0x6e>
		SAE_J1939_Response_Request_DM2(j1939, SA);
 800280c:	f000 fd00 	bl	8003210 <SAE_J1939_Response_Request_DM2>
		SAE_J1939_Send_Acknowledgement(j1939, SA, CONTROL_BYTE_ACKNOWLEDGEMENT_PGN_SUPPORTED, GROUP_FUNCTION_VALUE_NORMAL, PGN);
 8002810:	9400      	str	r4, [sp, #0]
		SAE_J1939_Send_Acknowledgement(j1939, SA, CONTROL_BYTE_ACKNOWLEDGEMENT_PGN_SUPPORTED, GROUP_FUNCTION_VALUE_NORMAL, PGN);
 8002812:	2300      	movs	r3, #0
 8002814:	461a      	mov	r2, r3
		SAE_J1939_Send_Acknowledgement(j1939, SA, CONTROL_BYTE_ACKNOWLEDGEMENT_PGN_NOT_SUPPORTED, GROUP_FUNCTION_VALUE_NO_CAUSE, PGN);
 8002816:	4631      	mov	r1, r6
 8002818:	4628      	mov	r0, r5
 800281a:	e7d8      	b.n	80027ce <SAE_J1939_Read_Request+0x20>
	} else if (PGN == PGN_DM3) {
 800281c:	f64f 63cc 	movw	r3, #65228	; 0xfecc
 8002820:	429c      	cmp	r4, r3
 8002822:	d104      	bne.n	800282e <SAE_J1939_Read_Request+0x80>
}
 8002824:	b002      	add	sp, #8
 8002826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SAE_J1939_Response_Request_DM3(j1939, SA);
 800282a:	f000 bdae 	b.w	800338a <SAE_J1939_Response_Request_DM3>
	} else if (PGN == PGN_REQUEST) {
 800282e:	f5b4 4f6a 	cmp.w	r4, #59904	; 0xea00
 8002832:	d0c9      	beq.n	80027c8 <SAE_J1939_Read_Request+0x1a>
	} else if (PGN == PGN_TP_CM) {
 8002834:	f5b4 4f6c 	cmp.w	r4, #60416	; 0xec00
 8002838:	d0c6      	beq.n	80027c8 <SAE_J1939_Read_Request+0x1a>
	} else if (PGN == PGN_TP_DT) {
 800283a:	f5b4 4f6b 	cmp.w	r4, #60160	; 0xeb00
 800283e:	d103      	bne.n	8002848 <SAE_J1939_Read_Request+0x9a>
		SAE_J1939_Send_Acknowledgement(j1939, SA, CONTROL_BYTE_ACKNOWLEDGEMENT_PGN_SUPPORTED, GROUP_FUNCTION_VALUE_NORMAL, PGN);
 8002840:	f44f 436b 	mov.w	r3, #60160	; 0xeb00
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	e7e4      	b.n	8002812 <SAE_J1939_Read_Request+0x64>
	} else if (PGN >= PGN_AUXILIARY_VALVE_ESTIMATED_FLOW_0 && PGN <= PGN_AUXILIARY_VALVE_ESTIMATED_FLOW_15) {
 8002848:	f5a4 437e 	sub.w	r3, r4, #65024	; 0xfe00
 800284c:	3b10      	subs	r3, #16
 800284e:	2b0f      	cmp	r3, #15
 8002850:	d806      	bhi.n	8002860 <SAE_J1939_Read_Request+0xb2>
		ISO_11783_Response_Request_Auxiliary_Valve_Estimated_Flow(j1939, PGN & 0xF); /* PGN & 0xF = valve_number */
 8002852:	f004 010f 	and.w	r1, r4, #15
}
 8002856:	b002      	add	sp, #8
 8002858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ISO_11783_Response_Request_Auxiliary_Valve_Estimated_Flow(j1939, PGN & 0xF); /* PGN & 0xF = valve_number */
 800285c:	f7ff bd7e 	b.w	800235c <ISO_11783_Response_Request_Auxiliary_Valve_Estimated_Flow>
	} else if (PGN == PGN_GENERAL_PURPOSE_VALVE_ESTIMATED_FLOW){
 8002860:	f5b4 4f46 	cmp.w	r4, #50688	; 0xc600
 8002864:	d104      	bne.n	8002870 <SAE_J1939_Read_Request+0xc2>
}
 8002866:	b002      	add	sp, #8
 8002868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ISO_11783_Response_Request_General_Purpose_Valve_Estimated_Flow(j1939, SA);
 800286c:	f7ff be37 	b.w	80024de <ISO_11783_Response_Request_General_Purpose_Valve_Estimated_Flow>
	} else if (PGN >= PGN_AUXILIARY_VALVE_MEASURED_POSITION_0 && PGN <= PGN_AUXILIARY_VALVE_MEASURED_POSITION_15) {
 8002870:	f5a4 437f 	sub.w	r3, r4, #65280	; 0xff00
 8002874:	3b20      	subs	r3, #32
 8002876:	2b0f      	cmp	r3, #15
 8002878:	d806      	bhi.n	8002888 <SAE_J1939_Read_Request+0xda>
		ISO_11783_Response_Request_Auxiliary_Valve_Measured_Position(j1939, PGN & 0xF); /* PGN & 0xF = valve_number */
 800287a:	f004 010f 	and.w	r1, r4, #15
}
 800287e:	b002      	add	sp, #8
 8002880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ISO_11783_Response_Request_Auxiliary_Valve_Measured_Position(j1939, PGN & 0xF); /* PGN & 0xF = valve_number */
 8002884:	f7ff bdae 	b.w	80023e4 <ISO_11783_Response_Request_Auxiliary_Valve_Measured_Position>
	} else if (PGN == PGN_SOFTWARE_IDENTIFICATION) {
 8002888:	f64f 63da 	movw	r3, #65242	; 0xfeda
 800288c:	429c      	cmp	r4, r3
 800288e:	d104      	bne.n	800289a <SAE_J1939_Read_Request+0xec>
}
 8002890:	b002      	add	sp, #8
 8002892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SAE_J1939_Response_Request_Software_Identification(j1939, SA);
 8002896:	f000 ba67 	b.w	8002d68 <SAE_J1939_Response_Request_Software_Identification>
	} else if (PGN == PGN_ECU_IDENTIFICATION) {
 800289a:	f64f 53c5 	movw	r3, #64965	; 0xfdc5
 800289e:	429c      	cmp	r4, r3
 80028a0:	d104      	bne.n	80028ac <SAE_J1939_Read_Request+0xfe>
}
 80028a2:	b002      	add	sp, #8
 80028a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SAE_J1939_Response_Request_ECU_Identification(j1939, SA);
 80028a8:	f000 b9d0 	b.w	8002c4c <SAE_J1939_Response_Request_ECU_Identification>
	} else if (PGN == PGN_COMPONENT_IDENTIFICATION) {
 80028ac:	f64f 63eb 	movw	r3, #65259	; 0xfeeb
 80028b0:	429c      	cmp	r4, r3
 80028b2:	d104      	bne.n	80028be <SAE_J1939_Read_Request+0x110>
}
 80028b4:	b002      	add	sp, #8
 80028b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SAE_J1939_Response_Request_Component_Identification(j1939, SA);
 80028ba:	f000 b939 	b.w	8002b30 <SAE_J1939_Response_Request_Component_Identification>
		SAE_J1939_Send_Acknowledgement(j1939, SA, CONTROL_BYTE_ACKNOWLEDGEMENT_PGN_NOT_SUPPORTED, GROUP_FUNCTION_VALUE_NO_CAUSE, PGN);
 80028be:	9400      	str	r4, [sp, #0]
 80028c0:	23ff      	movs	r3, #255	; 0xff
 80028c2:	2201      	movs	r2, #1
 80028c4:	e7a7      	b.n	8002816 <SAE_J1939_Read_Request+0x68>

080028c6 <SAE_J1939_Send_Request>:

/*
 * Request PGN information at other ECU
 * PGN: 0x00EA00 (59904)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Request(J1939* j1939, uint8_t DA, uint32_t PGN_code) {
 80028c6:	b507      	push	{r0, r1, r2, lr}
	uint8_t PGN[3];
	PGN[0] = PGN_code;														/* PGN least significant bit */
	PGN[1] = PGN_code >> 8;													/* PGN mid bit */
	PGN[2] = PGN_code >> 16;												/* PGN most significant bit */
	uint32_t ID = (0x18EA << 16) | (DA << 8) | j1939->this_ECU_address;
 80028c8:	f890 3ae0 	ldrb.w	r3, [r0, #2784]	; 0xae0
	PGN[0] = PGN_code;														/* PGN least significant bit */
 80028cc:	f8ad 2004 	strh.w	r2, [sp, #4]
	uint32_t ID = (0x18EA << 16) | (DA << 8) | j1939->this_ECU_address;
 80028d0:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
	PGN[2] = PGN_code >> 16;												/* PGN most significant bit */
 80028d4:	0c12      	lsrs	r2, r2, #16
	return CAN_Send_Request(ID, PGN, 100);									/* 100 ms delay */
 80028d6:	f040 50c7 	orr.w	r0, r0, #417333248	; 0x18e00000
	PGN[2] = PGN_code >> 16;												/* PGN most significant bit */
 80028da:	f88d 2006 	strb.w	r2, [sp, #6]
	return CAN_Send_Request(ID, PGN, 100);									/* 100 ms delay */
 80028de:	a901      	add	r1, sp, #4
 80028e0:	2264      	movs	r2, #100	; 0x64
 80028e2:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 80028e6:	f7ff fce0 	bl	80022aa <CAN_Send_Request>
}
 80028ea:	b003      	add	sp, #12
 80028ec:	f85d fb04 	ldr.w	pc, [sp], #4

080028f0 <SAE_J1939_Send_Transport_Protocol_Connection_Management>:

/*
 * Send information to other ECU about how much sequence data packages this ECU is going to send to other ECU
 * PGN: 0x00EC00 (60416)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Connection_Management(J1939 *j1939, uint8_t DA, uint8_t control_byte, uint16_t total_message_size, uint8_t number_of_packages, uint32_t PGN_of_the_packeted_message) {
 80028f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t ID = (0x1CEC << 16) | (DA << 8) | j1939->this_ECU_address;
 80028f2:	f890 5ae0 	ldrb.w	r5, [r0, #2784]	; 0xae0
	uint8_t data[8];
	data[0] = control_byte;
	data[1] = total_message_size;
 80028f6:	f88d 3001 	strb.w	r3, [sp, #1]
	data[2] = total_message_size >> 8;
 80028fa:	0a1b      	lsrs	r3, r3, #8
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Connection_Management(J1939 *j1939, uint8_t DA, uint8_t control_byte, uint16_t total_message_size, uint8_t number_of_packages, uint32_t PGN_of_the_packeted_message) {
 80028fc:	9c07      	ldr	r4, [sp, #28]
	data[2] = total_message_size >> 8;
 80028fe:	f88d 3002 	strb.w	r3, [sp, #2]
	uint32_t ID = (0x1CEC << 16) | (DA << 8) | j1939->this_ECU_address;
 8002902:	ea45 2001 	orr.w	r0, r5, r1, lsl #8
	data[3] = number_of_packages;
 8002906:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800290a:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = 0xFF; 														/* Reserved */
	data[5] = PGN_of_the_packeted_message;
	data[6] = PGN_of_the_packeted_message >> 8;
	data[7] = PGN_of_the_packeted_message >> 16;
	return CAN_Send_Message(ID, data, 100);									/* 100 ms delay */
 800290e:	f040 50e7 	orr.w	r0, r0, #484442112	; 0x1ce00000
	data[4] = 0xFF; 														/* Reserved */
 8002912:	23ff      	movs	r3, #255	; 0xff
	data[0] = control_byte;
 8002914:	f88d 2000 	strb.w	r2, [sp]
	data[4] = 0xFF; 														/* Reserved */
 8002918:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = PGN_of_the_packeted_message;
 800291c:	f88d 4005 	strb.w	r4, [sp, #5]
	data[6] = PGN_of_the_packeted_message >> 8;
 8002920:	0a23      	lsrs	r3, r4, #8
	return CAN_Send_Message(ID, data, 100);									/* 100 ms delay */
 8002922:	2264      	movs	r2, #100	; 0x64
	data[7] = PGN_of_the_packeted_message >> 16;
 8002924:	0c24      	lsrs	r4, r4, #16
	return CAN_Send_Message(ID, data, 100);									/* 100 ms delay */
 8002926:	4669      	mov	r1, sp
 8002928:	f440 2040 	orr.w	r0, r0, #786432	; 0xc0000
	data[6] = PGN_of_the_packeted_message >> 8;
 800292c:	f88d 3006 	strb.w	r3, [sp, #6]
	data[7] = PGN_of_the_packeted_message >> 16;
 8002930:	f88d 4007 	strb.w	r4, [sp, #7]
	return CAN_Send_Message(ID, data, 100);									/* 100 ms delay */
 8002934:	f7ff fca0 	bl	8002278 <CAN_Send_Message>
}
 8002938:	b003      	add	sp, #12
 800293a:	bd30      	pop	{r4, r5, pc}

0800293c <SAE_J1939_Read_Transport_Protocol_Connection_Management>:
void SAE_J1939_Read_Transport_Protocol_Connection_Management(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 800293c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	j1939->from_other_ecu_tp_cm.control_byte = data[0];
 800293e:	7817      	ldrb	r7, [r2, #0]
 8002940:	f880 711c 	strb.w	r7, [r0, #284]	; 0x11c
	j1939->from_other_ecu_tp_cm.total_message_size = (data[2] << 8) | data[1];
 8002944:	7894      	ldrb	r4, [r2, #2]
 8002946:	7853      	ldrb	r3, [r2, #1]
 8002948:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800294c:	f8a0 311e 	strh.w	r3, [r0, #286]	; 0x11e
	j1939->from_other_ecu_tp_cm.number_of_packages = data[3];
 8002950:	78d6      	ldrb	r6, [r2, #3]
 8002952:	f880 6120 	strb.w	r6, [r0, #288]	; 0x120
	j1939->from_other_ecu_tp_cm.PGN_of_the_packeted_message = (data[7] << 16) | (data[6] << 8) | data[5];
 8002956:	7994      	ldrb	r4, [r2, #6]
 8002958:	f892 c007 	ldrb.w	ip, [r2, #7]
 800295c:	7952      	ldrb	r2, [r2, #5]
	j1939->from_other_ecu_tp_cm.from_ecu_address = SA;
 800295e:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
	j1939->from_other_ecu_tp_cm.PGN_of_the_packeted_message = (data[7] << 16) | (data[6] << 8) | data[5];
 8002962:	0224      	lsls	r4, r4, #8
 8002964:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8002968:	4322      	orrs	r2, r4
	if(j1939->from_other_ecu_tp_cm.control_byte == CONTROL_BYTE_TP_CM_RTS)
 800296a:	2f10      	cmp	r7, #16
	j1939->from_other_ecu_tp_cm.PGN_of_the_packeted_message = (data[7] << 16) | (data[6] << 8) | data[5];
 800296c:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
	if(j1939->from_other_ecu_tp_cm.control_byte == CONTROL_BYTE_TP_CM_RTS)
 8002970:	d104      	bne.n	800297c <SAE_J1939_Read_Transport_Protocol_Connection_Management+0x40>
		SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, SA, CONTROL_BYTE_TP_CM_CTS, j1939->from_other_ecu_tp_cm.total_message_size, j1939->from_other_ecu_tp_cm.number_of_packages, j1939->from_other_ecu_tp_cm.PGN_of_the_packeted_message);
 8002972:	e9cd 6200 	strd	r6, r2, [sp]
 8002976:	2211      	movs	r2, #17
 8002978:	f7ff ffba 	bl	80028f0 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
}
 800297c:	b003      	add	sp, #12
 800297e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002980 <SAE_J1939_Read_Transport_Protocol_Data_Transfer>:

/*
 * Store the sequence data packages from other ECU
 * PGN: 0x00EB00 (60160)
 */
void SAE_J1939_Read_Transport_Protocol_Data_Transfer(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 8002980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002984:	b085      	sub	sp, #20
 8002986:	4604      	mov	r4, r0
	/* Save the sequence data */
	j1939->from_other_ecu_tp_dt.sequence_number = data[0];
	j1939->from_other_ecu_tp_dt.from_ecu_address = SA;
	uint8_t index = data[0] - 1;
 8002988:	4615      	mov	r5, r2
	j1939->from_other_ecu_tp_dt.sequence_number = data[0];
 800298a:	7810      	ldrb	r0, [r2, #0]
 800298c:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
	j1939->from_other_ecu_tp_dt.from_ecu_address = SA;
 8002990:	f884 174d 	strb.w	r1, [r4, #1869]	; 0x74d
	uint8_t index = data[0] - 1;
 8002994:	f815 3b07 	ldrb.w	r3, [r5], #7
 8002998:	3b01      	subs	r3, #1
void SAE_J1939_Read_Transport_Protocol_Data_Transfer(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 800299a:	af02      	add	r7, sp, #8
 800299c:	fa54 f383 	uxtab	r3, r4, r3
	for (uint8_t i = 1; i < 8; i++)
		j1939->from_other_ecu_tp_dt.data[i-1][index] = data[i];
 80029a0:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 80029a4:	f883 612d 	strb.w	r6, [r3, #301]	; 0x12d
	for (uint8_t i = 1; i < 8; i++)
 80029a8:	42aa      	cmp	r2, r5
 80029aa:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 80029ae:	d1f7      	bne.n	80029a0 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x20>

	/* Check if we have completed our message - Return = Not completed */
	if (j1939->from_other_ecu_tp_cm.number_of_packages != j1939->from_other_ecu_tp_dt.sequence_number || j1939->from_other_ecu_tp_cm.number_of_packages == 0)
 80029b0:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 80029b4:	4298      	cmp	r0, r3
 80029b6:	d13b      	bne.n	8002a30 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0xb0>
 80029b8:	b3d0      	cbz	r0, 8002a30 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0xb0>
		return;

	/* Our message are complete - Build it and call it complete_data[total_message_size] */
	uint32_t PGN = j1939->from_other_ecu_tp_cm.PGN_of_the_packeted_message;
	uint16_t total_message_size = j1939->from_other_ecu_tp_cm.total_message_size;
 80029ba:	f8b4 911e 	ldrh.w	r9, [r4, #286]	; 0x11e
	uint32_t PGN = j1939->from_other_ecu_tp_cm.PGN_of_the_packeted_message;
 80029be:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
	uint8_t complete_data[total_message_size];
 80029c2:	f109 0307 	add.w	r3, r9, #7
 80029c6:	46e8      	mov	r8, sp
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 80029ce:	469d      	mov	sp, r3
	uint16_t inserted_bytes = 0;
	for (uint8_t i = 0; i < j1939->from_other_ecu_tp_dt.sequence_number; i++)
 80029d0:	2300      	movs	r3, #0
	uint8_t complete_data[total_message_size];
 80029d2:	ad02      	add	r5, sp, #8
	uint16_t inserted_bytes = 0;
 80029d4:	469c      	mov	ip, r3
	for (uint8_t i = 0; i < j1939->from_other_ecu_tp_dt.sequence_number; i++)
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	4290      	cmp	r0, r2
 80029da:	d82d      	bhi.n	8002a38 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0xb8>
		for (uint8_t j = 0; j < 7; j++)
			if (inserted_bytes < total_message_size)
				complete_data[inserted_bytes++] = j1939->from_other_ecu_tp_dt.data[j][i];

	/* Send an end of message ACK back */
	if(j1939->from_other_ecu_tp_cm.control_byte == CONTROL_BYTE_TP_CM_RTS)
 80029dc:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d107      	bne.n	80029f4 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x74>
		SAE_J1939_Send_Acknowledgement(j1939, SA, CONTROL_BYTE_TP_CM_EndOfMsgACK, GROUP_FUNCTION_VALUE_NORMAL, PGN);
 80029e4:	9600      	str	r6, [sp, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	6079      	str	r1, [r7, #4]
 80029ea:	2213      	movs	r2, #19
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7ff febc 	bl	800276a <SAE_J1939_Send_Acknowledgement>
 80029f2:	6879      	ldr	r1, [r7, #4]

	/* Check what type of function that message want this ECU to do */
	switch (PGN) {
 80029f4:	f64f 63cb 	movw	r3, #65227	; 0xfecb
 80029f8:	429e      	cmp	r6, r3
 80029fa:	d04b      	beq.n	8002a94 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x114>
 80029fc:	d833      	bhi.n	8002a66 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0xe6>
 80029fe:	f64f 53c5 	movw	r3, #64965	; 0xfdc5
 8002a02:	429e      	cmp	r6, r3
 8002a04:	d056      	beq.n	8002ab4 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x134>
 8002a06:	f64f 63ca 	movw	r3, #65226	; 0xfeca
 8002a0a:	429e      	cmp	r6, r3
 8002a0c:	d03c      	beq.n	8002a88 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x108>
 8002a0e:	f5b6 4f57 	cmp.w	r6, #55040	; 0xd700
 8002a12:	d045      	beq.n	8002aa0 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x120>
		break;
		/* Add more here */
	}

	/* Delete TP DT and TP CM */
	memset(&j1939->from_other_ecu_tp_dt, 0, sizeof(j1939->from_other_ecu_tp_dt));
 8002a14:	f240 6222 	movw	r2, #1570	; 0x622
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f504 7096 	add.w	r0, r4, #300	; 0x12c
 8002a1e:	f00f fd0f 	bl	8012440 <memset>
	memset(&j1939->from_other_ecu_tp_cm, 0, sizeof(j1939->from_other_ecu_tp_cm));
 8002a22:	2210      	movs	r2, #16
 8002a24:	2100      	movs	r1, #0
 8002a26:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8002a2a:	f00f fd09 	bl	8012440 <memset>
 8002a2e:	46c5      	mov	sp, r8
}
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a38:	eb04 0e03 	add.w	lr, r4, r3
	for (uint8_t i = 0; i < j1939->from_other_ecu_tp_dt.sequence_number; i++)
 8002a3c:	2207      	movs	r2, #7
			if (inserted_bytes < total_message_size)
 8002a3e:	45e1      	cmp	r9, ip
				complete_data[inserted_bytes++] = j1939->from_other_ecu_tp_dt.data[j][i];
 8002a40:	bf82      	ittt	hi
 8002a42:	f89e b12d 	ldrbhi.w	fp, [lr, #301]	; 0x12d
 8002a46:	f805 b00c 	strbhi.w	fp, [r5, ip]
 8002a4a:	f10c 0a01 	addhi.w	sl, ip, #1
 8002a4e:	f102 32ff 	add.w	r2, r2, #4294967295
 8002a52:	bf88      	it	hi
 8002a54:	fa1f fc8a 	uxthhi.w	ip, sl
		for (uint8_t j = 0; j < 7; j++)
 8002a58:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8002a5c:	f10e 0ee0 	add.w	lr, lr, #224	; 0xe0
 8002a60:	d1ed      	bne.n	8002a3e <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0xbe>
	for (uint8_t i = 0; i < j1939->from_other_ecu_tp_dt.sequence_number; i++)
 8002a62:	3301      	adds	r3, #1
 8002a64:	e7b7      	b.n	80029d6 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x56>
	switch (PGN) {
 8002a66:	f64f 63da 	movw	r3, #65242	; 0xfeda
 8002a6a:	429e      	cmp	r6, r3
 8002a6c:	d01d      	beq.n	8002aaa <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x12a>
 8002a6e:	f64f 63eb 	movw	r3, #65259	; 0xfeeb
 8002a72:	429e      	cmp	r6, r3
 8002a74:	d023      	beq.n	8002abe <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x13e>
 8002a76:	f64f 63d8 	movw	r3, #65240	; 0xfed8
 8002a7a:	429e      	cmp	r6, r3
 8002a7c:	d1ca      	bne.n	8002a14 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x94>
		SAE_J1939_Read_Commanded_Address(j1939, complete_data);								/* Insert new name and new address to this ECU */
 8002a7e:	4629      	mov	r1, r5
 8002a80:	4620      	mov	r0, r4
 8002a82:	f000 fe16 	bl	80036b2 <SAE_J1939_Read_Commanded_Address>
		break;
 8002a86:	e7c5      	b.n	8002a14 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x94>
		SAE_J1939_Read_Response_Request_DM1(j1939, SA, complete_data, complete_data[8]); 	/* Sequence number is the last index */
 8002a88:	7a2b      	ldrb	r3, [r5, #8]
 8002a8a:	462a      	mov	r2, r5
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f000 fa55 	bl	8002f3c <SAE_J1939_Read_Response_Request_DM1>
		break;
 8002a92:	e7bf      	b.n	8002a14 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x94>
		SAE_J1939_Read_Response_Request_DM2(j1939, SA, complete_data, complete_data[8]); 	/* Sequence number is the last index */
 8002a94:	7a2b      	ldrb	r3, [r5, #8]
 8002a96:	462a      	mov	r2, r5
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f000 fc31 	bl	8003300 <SAE_J1939_Read_Response_Request_DM2>
		break;
 8002a9e:	e7b9      	b.n	8002a14 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x94>
		SAE_J1939_Read_Binary_Data_Transfer_DM16(j1939, SA, complete_data);
 8002aa0:	462a      	mov	r2, r5
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f000 fb99 	bl	80031da <SAE_J1939_Read_Binary_Data_Transfer_DM16>
		break;
 8002aa8:	e7b4      	b.n	8002a14 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x94>
		SAE_J1939_Read_Response_Request_Software_Identification(j1939, SA, complete_data);
 8002aaa:	462a      	mov	r2, r5
 8002aac:	4620      	mov	r0, r4
 8002aae:	f000 f9b9 	bl	8002e24 <SAE_J1939_Read_Response_Request_Software_Identification>
		break;
 8002ab2:	e7af      	b.n	8002a14 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x94>
		SAE_J1939_Read_Response_Request_ECU_Identification(j1939, SA, complete_data);
 8002ab4:	462a      	mov	r2, r5
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f000 f936 	bl	8002d28 <SAE_J1939_Read_Response_Request_ECU_Identification>
		break;
 8002abc:	e7aa      	b.n	8002a14 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x94>
		SAE_J1939_Read_Response_Request_Component_Identification(j1939, SA, complete_data);
 8002abe:	462a      	mov	r2, r5
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f000 f8a3 	bl	8002c0c <SAE_J1939_Read_Response_Request_Component_Identification>
		break;
 8002ac6:	e7a5      	b.n	8002a14 <SAE_J1939_Read_Transport_Protocol_Data_Transfer+0x94>

08002ac8 <SAE_J1939_Send_Transport_Protocol_Data_Transfer>:

/*
 * Send sequence data packages to other ECU
 * PGN: 0x00EB00 (60160)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Data_Transfer(J1939 *j1939, uint8_t DA, uint8_t data[], uint16_t total_message_size, uint8_t number_of_packages){
 8002ac8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002acc:	4698      	mov	r8, r3
	uint32_t ID = (0x1CEB << 16) | (DA << 8) | j1939->this_ECU_address;
 8002ace:	f890 3ae0 	ldrb.w	r3, [r0, #2784]	; 0xae0
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Data_Transfer(J1939 *j1939, uint8_t DA, uint8_t data[], uint16_t total_message_size, uint8_t number_of_packages){
 8002ad2:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	uint32_t ID = (0x1CEB << 16) | (DA << 8) | j1939->this_ECU_address;
 8002ad6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8002ada:	f041 54e7 	orr.w	r4, r1, #484442112	; 0x1ce00000
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Data_Transfer(J1939 *j1939, uint8_t DA, uint8_t data[], uint16_t total_message_size, uint8_t number_of_packages){
 8002ade:	4617      	mov	r7, r2
	uint32_t ID = (0x1CEB << 16) | (DA << 8) | j1939->this_ECU_address;
 8002ae0:	f444 2430 	orr.w	r4, r4, #720896	; 0xb0000
	uint8_t package[8];
	uint16_t bytes_sent = 0;
	ENUM_J1939_STATUS_CODES status = STATUS_SEND_OK;
	for(uint8_t i = 1; i <= number_of_packages; i++) {
 8002ae4:	2501      	movs	r5, #1
	uint16_t bytes_sent = 0;
 8002ae6:	2600      	movs	r6, #0
		package[0] = i; 													/* Number of package */
		for(uint8_t j = 0; j < 7; j++)
			if(bytes_sent < total_message_size)
				package[j+1] = data[bytes_sent++];							/* Data */
			 else
				package[j+1] = 0xFF; 										/* Reserved */
 8002ae8:	f04f 0aff 	mov.w	sl, #255	; 0xff
	for(uint8_t i = 1; i <= number_of_packages; i++) {
 8002aec:	454d      	cmp	r5, r9
 8002aee:	d903      	bls.n	8002af8 <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x30>

		status = CAN_Send_Message(ID, package, 100);						/* 100 ms delay */
		if(status != STATUS_SEND_OK)
			return status;
	}
	return status;
 8002af0:	2000      	movs	r0, #0
}
 8002af2:	b002      	add	sp, #8
 8002af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		package[0] = i; 													/* Number of package */
 8002af8:	f88d 5000 	strb.w	r5, [sp]
 8002afc:	2301      	movs	r3, #1
			if(bytes_sent < total_message_size)
 8002afe:	45b0      	cmp	r8, r6
				package[j+1] = data[bytes_sent++];							/* Data */
 8002b00:	bf85      	ittet	hi
 8002b02:	5db9      	ldrbhi	r1, [r7, r6]
 8002b04:	f80d 1003 	strbhi.w	r1, [sp, r3]
				package[j+1] = 0xFF; 										/* Reserved */
 8002b08:	f80d a003 	strbls.w	sl, [sp, r3]
				package[j+1] = data[bytes_sent++];							/* Data */
 8002b0c:	1c72      	addhi	r2, r6, #1
 8002b0e:	f103 0301 	add.w	r3, r3, #1
 8002b12:	bf88      	it	hi
 8002b14:	b296      	uxthhi	r6, r2
		for(uint8_t j = 0; j < 7; j++)
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d1f1      	bne.n	8002afe <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x36>
		status = CAN_Send_Message(ID, package, 100);						/* 100 ms delay */
 8002b1a:	2264      	movs	r2, #100	; 0x64
 8002b1c:	4669      	mov	r1, sp
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f7ff fbaa 	bl	8002278 <CAN_Send_Message>
		if(status != STATUS_SEND_OK)
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d1e4      	bne.n	8002af2 <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x2a>
	for(uint8_t i = 1; i <= number_of_packages; i++) {
 8002b28:	3501      	adds	r5, #1
 8002b2a:	b2ed      	uxtb	r5, r5
 8002b2c:	e7de      	b.n	8002aec <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x24>
	...

08002b30 <SAE_J1939_Response_Request_Component_Identification>:

/*
 * Response the request of the component identification about this ECU
 * PGN: 0x00FEEB (65259)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_Component_Identification(J1939* j1939, uint8_t DA){
 8002b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b34:	b087      	sub	sp, #28
	/* Find the length of the array fields */
	uint8_t length_of_each_field = j1939->this_identifications.component_identification.length_of_each_field;
 8002b36:	f890 3cb6 	ldrb.w	r3, [r0, #3254]	; 0xcb6
	if (length_of_each_field < 2) {
 8002b3a:	2b01      	cmp	r3, #1
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_Component_Identification(J1939* j1939, uint8_t DA){
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	4604      	mov	r4, r0
	if (length_of_each_field < 2) {
 8002b40:	d81b      	bhi.n	8002b7a <SAE_J1939_Response_Request_Component_Identification+0x4a>
 8002b42:	f890 0cd5 	ldrb.w	r0, [r0, #3285]	; 0xcd5
 8002b46:	f894 2d11 	ldrb.w	r2, [r4, #3345]	; 0xd11
		/* If each field have the length 1, then we can send component identification as it was a normal message */
		uint32_t ID = (0x18FEEB << 8) | j1939->this_ECU_address;
 8002b4a:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
		uint8_t data[8];
		data[0] = j1939->this_identifications.component_identification.component_product_date[0];
		data[1] = j1939->this_identifications.component_identification.component_model_name[0];
 8002b4e:	7278      	strb	r0, [r7, #9]
		data[3] = j1939->this_identifications.component_identification.component_unit_name[0];
		data[4] = 0xFF;													/* Reserved */
		data[5] = 0xFF;													/* Reserved */
		data[6] = 0xFF;													/* Reserved */
		data[7] = 0xFF;													/* Reserved */
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002b50:	482d      	ldr	r0, [pc, #180]	; (8002c08 <SAE_J1939_Response_Request_Component_Identification+0xd8>)
 8002b52:	f894 1cf3 	ldrb.w	r1, [r4, #3315]	; 0xcf3
		data[3] = j1939->this_identifications.component_identification.component_unit_name[0];
 8002b56:	72fa      	strb	r2, [r7, #11]
		data[4] = 0xFF;													/* Reserved */
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
		data[0] = j1939->this_identifications.component_identification.component_product_date[0];
 8002b5c:	f894 4cb7 	ldrb.w	r4, [r4, #3255]	; 0xcb7
		data[2] = j1939->this_identifications.component_identification.component_serial_number[0];
 8002b60:	72b9      	strb	r1, [r7, #10]
		data[4] = 0xFF;													/* Reserved */
 8002b62:	60fa      	str	r2, [r7, #12]
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002b64:	f107 0108 	add.w	r1, r7, #8
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4318      	orrs	r0, r3
		data[0] = j1939->this_identifications.component_identification.component_product_date[0];
 8002b6c:	723c      	strb	r4, [r7, #8]
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002b6e:	f7ff fb83 	bl	8002278 <CAN_Send_Message>
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_COMPONENT_IDENTIFICATION);
		if(status != STATUS_SEND_OK)
			return status;
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
	}
}
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t data[length_of_each_field*4];							/* Total 4 fields */
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	3207      	adds	r2, #7
 8002b7e:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
	} else {
 8002b82:	466d      	mov	r5, sp
		uint8_t data[length_of_each_field*4];							/* Total 4 fields */
 8002b84:	ebad 0d02 	sub.w	sp, sp, r2
 8002b88:	f600 4cb7 	addw	ip, r0, #3255	; 0xcb7
 8002b8c:	ae02      	add	r6, sp, #8
			data[length_of_each_field*2 + i] = j1939->this_identifications.component_identification.component_serial_number[i];
 8002b8e:	ea4f 0943 	mov.w	r9, r3, lsl #1
			data[length_of_each_field*3 + i] = j1939->this_identifications.component_identification.component_unit_name[i];
 8002b92:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8002b96:	f10d 0007 	add.w	r0, sp, #7
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002b9a:	2200      	movs	r2, #0
			data[i] = j1939->this_identifications.component_identification.component_product_date[i];
 8002b9c:	f81c 8b01 	ldrb.w	r8, [ip], #1
 8002ba0:	f800 8f01 	strb.w	r8, [r0, #1]!
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002ba4:	3201      	adds	r2, #1
			data[length_of_each_field + i] = j1939->this_identifications.component_identification.component_model_name[i];
 8002ba6:	f89c 801d 	ldrb.w	r8, [ip, #29]
 8002baa:	f800 8003 	strb.w	r8, [r0, r3]
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002bae:	b2d2      	uxtb	r2, r2
			data[length_of_each_field*2 + i] = j1939->this_identifications.component_identification.component_serial_number[i];
 8002bb0:	f89c 803b 	ldrb.w	r8, [ip, #59]	; 0x3b
 8002bb4:	f800 8009 	strb.w	r8, [r0, r9]
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002bb8:	4293      	cmp	r3, r2
			data[length_of_each_field*3 + i] = j1939->this_identifications.component_identification.component_unit_name[i];
 8002bba:	f89c 8059 	ldrb.w	r8, [ip, #89]	; 0x59
 8002bbe:	f800 800e 	strb.w	r8, [r0, lr]
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002bc2:	d1eb      	bne.n	8002b9c <SAE_J1939_Response_Request_Component_Identification+0x6c>
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	3201      	adds	r2, #1
 8002bca:	0093      	lsls	r3, r2, #2
		uint8_t number_of_packages = total_message_size % 8 > 1 ? total_message_size/8 + 1 : total_message_size/8; /* Rounding up */
 8002bcc:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8002bd0:	07d2      	lsls	r2, r2, #31
 8002bd2:	bf44      	itt	mi
 8002bd4:	f108 0801 	addmi.w	r8, r8, #1
 8002bd8:	fa5f f888 	uxtbmi.w	r8, r8
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_COMPONENT_IDENTIFICATION);
 8002bdc:	f64f 62eb 	movw	r2, #65259	; 0xfeeb
 8002be0:	e9cd 8200 	strd	r8, r2, [sp]
 8002be4:	4620      	mov	r0, r4
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	6079      	str	r1, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f7ff fe80 	bl	80028f0 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
		if(status != STATUS_SEND_OK)
 8002bf0:	e9d7 3100 	ldrd	r3, r1, [r7]
 8002bf4:	b928      	cbnz	r0, 8002c02 <SAE_J1939_Response_Request_Component_Identification+0xd2>
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
 8002bf6:	f8cd 8000 	str.w	r8, [sp]
 8002bfa:	4632      	mov	r2, r6
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f7ff ff63 	bl	8002ac8 <SAE_J1939_Send_Transport_Protocol_Data_Transfer>
 8002c02:	46ad      	mov	sp, r5
 8002c04:	e7b5      	b.n	8002b72 <SAE_J1939_Response_Request_Component_Identification+0x42>
 8002c06:	bf00      	nop
 8002c08:	18feeb00 	.word	0x18feeb00

08002c0c <SAE_J1939_Read_Response_Request_Component_Identification>:

/*
 * Store the component identification about other ECU
 * PGN: 0x00FEEB (65259)
 */
void SAE_J1939_Read_Response_Request_Component_Identification(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Component identification have 4 fixed fields in the J1939 struct */
	uint8_t length_of_each_field = j1939->from_other_ecu_identifications.component_identification.length_of_each_field;
 8002c0e:	f890 6922 	ldrb.w	r6, [r0, #2338]	; 0x922
	for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002c12:	3a01      	subs	r2, #1
		j1939->from_other_ecu_identifications.component_identification.component_product_date[i] = data[i];
		j1939->from_other_ecu_identifications.component_identification.component_model_name[i] = data[i + length_of_each_field];
		j1939->from_other_ecu_identifications.component_identification.component_serial_number[i] = data[i + length_of_each_field*2];
 8002c14:	ea4f 0c46 	mov.w	ip, r6, lsl #1
		j1939->from_other_ecu_identifications.component_identification.component_unit_name[i] = data[i + length_of_each_field*3];
 8002c18:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002c1c:	f600 1423 	addw	r4, r0, #2339	; 0x923
	for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002c20:	2500      	movs	r5, #0
 8002c22:	b2ef      	uxtb	r7, r5
 8002c24:	42be      	cmp	r6, r7
 8002c26:	d802      	bhi.n	8002c2e <SAE_J1939_Read_Response_Request_Component_Identification+0x22>
	}
	j1939->from_other_ecu_identifications.component_identification.from_ecu_address = SA;
 8002c28:	f880 199b 	strb.w	r1, [r0, #2459]	; 0x99b
}
 8002c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		j1939->from_other_ecu_identifications.component_identification.component_product_date[i] = data[i];
 8002c2e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8002c32:	f804 7b01 	strb.w	r7, [r4], #1
		j1939->from_other_ecu_identifications.component_identification.component_model_name[i] = data[i + length_of_each_field];
 8002c36:	5d97      	ldrb	r7, [r2, r6]
 8002c38:	7767      	strb	r7, [r4, #29]
		j1939->from_other_ecu_identifications.component_identification.component_serial_number[i] = data[i + length_of_each_field*2];
 8002c3a:	f812 700c 	ldrb.w	r7, [r2, ip]
 8002c3e:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
		j1939->from_other_ecu_identifications.component_identification.component_unit_name[i] = data[i + length_of_each_field*3];
 8002c42:	5cd7      	ldrb	r7, [r2, r3]
 8002c44:	f884 7059 	strb.w	r7, [r4, #89]	; 0x59
	for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002c48:	3501      	adds	r5, #1
 8002c4a:	e7ea      	b.n	8002c22 <SAE_J1939_Read_Response_Request_Component_Identification+0x16>

08002c4c <SAE_J1939_Response_Request_ECU_Identification>:

/*
 * Response the request of the ECU identification about this ECU
 * PGN: 0x00FDC5 (64965)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_ECU_Identification(J1939* j1939, uint8_t DA) {
 8002c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c50:	b087      	sub	sp, #28
	/* Find the length of the array fields */
	uint8_t length_of_each_field = j1939->this_identifications.ecu_identification.length_of_each_field;
 8002c52:	f890 3c3c 	ldrb.w	r3, [r0, #3132]	; 0xc3c
	if (length_of_each_field < 2) {
 8002c56:	2b01      	cmp	r3, #1
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_ECU_Identification(J1939* j1939, uint8_t DA) {
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	4604      	mov	r4, r0
	if (length_of_each_field < 2) {
 8002c5c:	d81b      	bhi.n	8002c96 <SAE_J1939_Response_Request_ECU_Identification+0x4a>
 8002c5e:	f890 0c5b 	ldrb.w	r0, [r0, #3163]	; 0xc5b
 8002c62:	f894 2c97 	ldrb.w	r2, [r4, #3223]	; 0xc97
		/* If each field have the length 1, then we can send ECU identification as it was a normal message */
		uint32_t ID = (0x18FDC5 << 8) | j1939->this_ECU_address;
 8002c66:	f894 3ae0 	ldrb.w	r3, [r4, #2784]	; 0xae0
		uint8_t data[8];
		data[0] = j1939->this_identifications.ecu_identification.ecu_part_number[0];
		data[1] = j1939->this_identifications.ecu_identification.ecu_serial_number[0];
 8002c6a:	7278      	strb	r0, [r7, #9]
		data[3] = j1939->this_identifications.ecu_identification.ecu_type[0];
		data[4] = 0xFF;													/* Reserved */
		data[5] = 0xFF;													/* Reserved */
		data[6] = 0xFF;													/* Reserved */
		data[7] = 0xFF;													/* Reserved */
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002c6c:	482d      	ldr	r0, [pc, #180]	; (8002d24 <SAE_J1939_Response_Request_ECU_Identification+0xd8>)
 8002c6e:	f894 1c79 	ldrb.w	r1, [r4, #3193]	; 0xc79
		data[3] = j1939->this_identifications.ecu_identification.ecu_type[0];
 8002c72:	72fa      	strb	r2, [r7, #11]
		data[4] = 0xFF;													/* Reserved */
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
		data[0] = j1939->this_identifications.ecu_identification.ecu_part_number[0];
 8002c78:	f894 4c3d 	ldrb.w	r4, [r4, #3133]	; 0xc3d
		data[2] = j1939->this_identifications.ecu_identification.ecu_location[0];
 8002c7c:	72b9      	strb	r1, [r7, #10]
		data[4] = 0xFF;													/* Reserved */
 8002c7e:	60fa      	str	r2, [r7, #12]
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002c80:	f107 0108 	add.w	r1, r7, #8
 8002c84:	2200      	movs	r2, #0
 8002c86:	4318      	orrs	r0, r3
		data[0] = j1939->this_identifications.ecu_identification.ecu_part_number[0];
 8002c88:	723c      	strb	r4, [r7, #8]
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002c8a:	f7ff faf5 	bl	8002278 <CAN_Send_Message>
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_ECU_IDENTIFICATION);
		if(status != STATUS_SEND_OK)
			return status;
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
	}
}
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t data[length_of_each_field*4];							/* Total 4 fields */
 8002c96:	009a      	lsls	r2, r3, #2
 8002c98:	3207      	adds	r2, #7
 8002c9a:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
	} else {
 8002c9e:	466d      	mov	r5, sp
		uint8_t data[length_of_each_field*4];							/* Total 4 fields */
 8002ca0:	ebad 0d02 	sub.w	sp, sp, r2
 8002ca4:	f600 4c3d 	addw	ip, r0, #3133	; 0xc3d
 8002ca8:	ae02      	add	r6, sp, #8
			data[length_of_each_field*2 + i] = j1939->this_identifications.ecu_identification.ecu_location[i];
 8002caa:	ea4f 0943 	mov.w	r9, r3, lsl #1
			data[length_of_each_field*3 + i] = j1939->this_identifications.ecu_identification.ecu_type[i];
 8002cae:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8002cb2:	f10d 0007 	add.w	r0, sp, #7
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002cb6:	2200      	movs	r2, #0
			data[i] = j1939->this_identifications.ecu_identification.ecu_part_number[i];
 8002cb8:	f81c 8b01 	ldrb.w	r8, [ip], #1
 8002cbc:	f800 8f01 	strb.w	r8, [r0, #1]!
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002cc0:	3201      	adds	r2, #1
			data[length_of_each_field + i] = j1939->this_identifications.ecu_identification.ecu_serial_number[i];
 8002cc2:	f89c 801d 	ldrb.w	r8, [ip, #29]
 8002cc6:	f800 8003 	strb.w	r8, [r0, r3]
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002cca:	b2d2      	uxtb	r2, r2
			data[length_of_each_field*2 + i] = j1939->this_identifications.ecu_identification.ecu_location[i];
 8002ccc:	f89c 803b 	ldrb.w	r8, [ip, #59]	; 0x3b
 8002cd0:	f800 8009 	strb.w	r8, [r0, r9]
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002cd4:	4293      	cmp	r3, r2
			data[length_of_each_field*3 + i] = j1939->this_identifications.ecu_identification.ecu_type[i];
 8002cd6:	f89c 8059 	ldrb.w	r8, [ip, #89]	; 0x59
 8002cda:	f800 800e 	strb.w	r8, [r0, lr]
		for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002cde:	d1eb      	bne.n	8002cb8 <SAE_J1939_Response_Request_ECU_Identification+0x6c>
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	3201      	adds	r2, #1
 8002ce6:	0093      	lsls	r3, r2, #2
		uint8_t number_of_packages = total_message_size % 8 > 1 ? total_message_size/8 + 1 : total_message_size/8; /* Rounding up */
 8002ce8:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8002cec:	07d2      	lsls	r2, r2, #31
 8002cee:	bf44      	itt	mi
 8002cf0:	f108 0801 	addmi.w	r8, r8, #1
 8002cf4:	fa5f f888 	uxtbmi.w	r8, r8
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_ECU_IDENTIFICATION);
 8002cf8:	f64f 52c5 	movw	r2, #64965	; 0xfdc5
 8002cfc:	e9cd 8200 	strd	r8, r2, [sp]
 8002d00:	4620      	mov	r0, r4
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	6079      	str	r1, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f7ff fdf2 	bl	80028f0 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
		if(status != STATUS_SEND_OK)
 8002d0c:	e9d7 3100 	ldrd	r3, r1, [r7]
 8002d10:	b928      	cbnz	r0, 8002d1e <SAE_J1939_Response_Request_ECU_Identification+0xd2>
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
 8002d12:	f8cd 8000 	str.w	r8, [sp]
 8002d16:	4632      	mov	r2, r6
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7ff fed5 	bl	8002ac8 <SAE_J1939_Send_Transport_Protocol_Data_Transfer>
 8002d1e:	46ad      	mov	sp, r5
 8002d20:	e7b5      	b.n	8002c8e <SAE_J1939_Response_Request_ECU_Identification+0x42>
 8002d22:	bf00      	nop
 8002d24:	18fdc500 	.word	0x18fdc500

08002d28 <SAE_J1939_Read_Response_Request_ECU_Identification>:

/*
 * Store the ECU identification about other ECU
 * PGN: 0x00FDC5 (64965)
 */
void SAE_J1939_Read_Response_Request_ECU_Identification(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* ECU identification have 6 fixed fields in the J1939 struct */
	uint8_t length_of_each_field = j1939->from_other_ecu_identifications.ecu_identification.length_of_each_field;
 8002d2a:	f890 68a8 	ldrb.w	r6, [r0, #2216]	; 0x8a8
	for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002d2e:	3a01      	subs	r2, #1
		j1939->from_other_ecu_identifications.ecu_identification.ecu_part_number[i] = data[i];
		j1939->from_other_ecu_identifications.ecu_identification.ecu_serial_number[i] = data[i + length_of_each_field];
		j1939->from_other_ecu_identifications.ecu_identification.ecu_location[i] = data[i + length_of_each_field*2];
 8002d30:	ea4f 0c46 	mov.w	ip, r6, lsl #1
		j1939->from_other_ecu_identifications.ecu_identification.ecu_type[i] = data[i + length_of_each_field*3];
 8002d34:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002d38:	f600 04a9 	addw	r4, r0, #2217	; 0x8a9
	for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002d3c:	2500      	movs	r5, #0
 8002d3e:	b2ef      	uxtb	r7, r5
 8002d40:	42be      	cmp	r6, r7
 8002d42:	d802      	bhi.n	8002d4a <SAE_J1939_Read_Response_Request_ECU_Identification+0x22>
	}
	j1939->from_other_ecu_identifications.ecu_identification.from_ecu_address = SA;
 8002d44:	f880 1921 	strb.w	r1, [r0, #2337]	; 0x921
}
 8002d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		j1939->from_other_ecu_identifications.ecu_identification.ecu_part_number[i] = data[i];
 8002d4a:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8002d4e:	f804 7b01 	strb.w	r7, [r4], #1
		j1939->from_other_ecu_identifications.ecu_identification.ecu_serial_number[i] = data[i + length_of_each_field];
 8002d52:	5d97      	ldrb	r7, [r2, r6]
 8002d54:	7767      	strb	r7, [r4, #29]
		j1939->from_other_ecu_identifications.ecu_identification.ecu_location[i] = data[i + length_of_each_field*2];
 8002d56:	f812 700c 	ldrb.w	r7, [r2, ip]
 8002d5a:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
		j1939->from_other_ecu_identifications.ecu_identification.ecu_type[i] = data[i + length_of_each_field*3];
 8002d5e:	5cd7      	ldrb	r7, [r2, r3]
 8002d60:	f884 7059 	strb.w	r7, [r4, #89]	; 0x59
	for(uint8_t i = 0; i < length_of_each_field; i++) {
 8002d64:	3501      	adds	r5, #1
 8002d66:	e7ea      	b.n	8002d3e <SAE_J1939_Read_Response_Request_ECU_Identification+0x16>

08002d68 <SAE_J1939_Response_Request_Software_Identification>:

/*
 * Response the request of the software identification about this ECU
 * PGN: 0x00FEDA (65242)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_Software_Identification(J1939* j1939, uint8_t DA) {
 8002d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d6c:	b087      	sub	sp, #28
	uint8_t number_of_fields = j1939->this_identifications.software_identification.number_of_fields;
 8002d6e:	f890 3c1c 	ldrb.w	r3, [r0, #3100]	; 0xc1c
	if (number_of_fields < 9) {
 8002d72:	2b08      	cmp	r3, #8
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_Software_Identification(J1939* j1939, uint8_t DA) {
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	4604      	mov	r4, r0
 8002d78:	f600 421d 	addw	r2, r0, #3101	; 0xc1d
	if (number_of_fields < 9) {
 8002d7c:	d818      	bhi.n	8002db0 <SAE_J1939_Response_Request_Software_Identification+0x48>
		uint32_t ID = (0x18FEDA << 8) | j1939->this_ECU_address;
 8002d7e:	f890 1ae0 	ldrb.w	r1, [r0, #2784]	; 0xae0
 8002d82:	4827      	ldr	r0, [pc, #156]	; (8002e20 <SAE_J1939_Response_Request_Software_Identification+0xb8>)
		uint8_t data[8];
		data[0] = number_of_fields;
 8002d84:	723b      	strb	r3, [r7, #8]
		uint32_t ID = (0x18FEDA << 8) | j1939->this_ECU_address;
 8002d86:	4308      	orrs	r0, r1
		for(uint8_t i = 0; i < 7; i++)
 8002d88:	4613      	mov	r3, r2
 8002d8a:	f604 4424 	addw	r4, r4, #3108	; 0xc24
 8002d8e:	f107 0209 	add.w	r2, r7, #9
			data[i+1] = j1939->this_identifications.software_identification.identifications[i];
 8002d92:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002d96:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint8_t i = 0; i < 7; i++)
 8002d9a:	42a3      	cmp	r3, r4
 8002d9c:	d1f9      	bne.n	8002d92 <SAE_J1939_Response_Request_Software_Identification+0x2a>
		return CAN_Send_Message(ID, data, 0);								/* 0 ms delay */
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f107 0108 	add.w	r1, r7, #8
 8002da4:	f7ff fa68 	bl	8002278 <CAN_Send_Message>
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_SOFTWARE_IDENTIFICATION);
		if(status != STATUS_SEND_OK)
			return status;
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
	}
}
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t data[1 + number_of_fields];									/* 1 for number_of_fields */
 8002db0:	f103 0008 	add.w	r0, r3, #8
 8002db4:	f400 70fc 	and.w	r0, r0, #504	; 0x1f8
	} else {
 8002db8:	466d      	mov	r5, sp
		uint8_t data[1 + number_of_fields];									/* 1 for number_of_fields */
 8002dba:	ebad 0d00 	sub.w	sp, sp, r0
 8002dbe:	ae02      	add	r6, sp, #8
		data[total_message_size++] = number_of_fields;
 8002dc0:	f88d 3008 	strb.w	r3, [sp, #8]
		for(uint8_t i = 0; i < number_of_fields; i++)
 8002dc4:	f10d 0c09 	add.w	ip, sp, #9
 8002dc8:	2000      	movs	r0, #0
 8002dca:	3001      	adds	r0, #1
 8002dcc:	b2c0      	uxtb	r0, r0
			data[total_message_size++] = j1939->this_identifications.software_identification.identifications[i];
 8002dce:	f812 eb01 	ldrb.w	lr, [r2], #1
 8002dd2:	f80c eb01 	strb.w	lr, [ip], #1
		for(uint8_t i = 0; i < number_of_fields; i++)
 8002dd6:	4283      	cmp	r3, r0
 8002dd8:	d1f7      	bne.n	8002dca <SAE_J1939_Response_Request_Software_Identification+0x62>
 8002dda:	f103 39ff 	add.w	r9, r3, #4294967295
 8002dde:	fa5f f989 	uxtb.w	r9, r9
 8002de2:	f109 0902 	add.w	r9, r9, #2
		uint8_t number_of_packages = total_message_size % 8 > 1 ? total_message_size/8 + 1 : total_message_size/8; /* Rounding up */
 8002de6:	ea4f 08d9 	mov.w	r8, r9, lsr #3
 8002dea:	f019 0f06 	tst.w	r9, #6
 8002dee:	bf18      	it	ne
 8002df0:	f108 0801 	addne.w	r8, r8, #1
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_SOFTWARE_IDENTIFICATION);
 8002df4:	f64f 63da 	movw	r3, #65242	; 0xfeda
 8002df8:	e9cd 8300 	strd	r8, r3, [sp]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	6079      	str	r1, [r7, #4]
 8002e00:	464b      	mov	r3, r9
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff fd74 	bl	80028f0 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
		if(status != STATUS_SEND_OK)
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	b930      	cbnz	r0, 8002e1a <SAE_J1939_Response_Request_Software_Identification+0xb2>
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
 8002e0c:	f8cd 8000 	str.w	r8, [sp]
 8002e10:	464b      	mov	r3, r9
 8002e12:	4632      	mov	r2, r6
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff fe57 	bl	8002ac8 <SAE_J1939_Send_Transport_Protocol_Data_Transfer>
 8002e1a:	46ad      	mov	sp, r5
 8002e1c:	e7c4      	b.n	8002da8 <SAE_J1939_Response_Request_Software_Identification+0x40>
 8002e1e:	bf00      	nop
 8002e20:	18feda00 	.word	0x18feda00

08002e24 <SAE_J1939_Read_Response_Request_Software_Identification>:

/*
 * Store the software identification about other ECU
 * PGN: 0x00FEDA (65242)
 */
void SAE_J1939_Read_Response_Request_Software_Identification(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 8002e24:	b510      	push	{r4, lr}
	j1939->from_other_ecu_identifications.software_identification.number_of_fields = data[0];			/* How many fields we have */
 8002e26:	7813      	ldrb	r3, [r2, #0]
 8002e28:	f880 3888 	strb.w	r3, [r0, #2184]	; 0x888
	j1939->from_other_ecu_identifications.software_identification.from_ecu_address = SA;
 8002e2c:	f880 18a7 	strb.w	r1, [r0, #2215]	; 0x8a7
	for(uint8_t i = 0; i < data[0]; i++)
 8002e30:	2100      	movs	r1, #0
 8002e32:	7814      	ldrb	r4, [r2, #0]
 8002e34:	b2cb      	uxtb	r3, r1
 8002e36:	429c      	cmp	r4, r3
 8002e38:	d800      	bhi.n	8002e3c <SAE_J1939_Read_Response_Request_Software_Identification+0x18>
		j1939->from_other_ecu_identifications.software_identification.identifications[i] = data[i+1];	/* 1 for the number of fields */
}
 8002e3a:	bd10      	pop	{r4, pc}
		j1939->from_other_ecu_identifications.software_identification.identifications[i] = data[i+1];	/* 1 for the number of fields */
 8002e3c:	18d4      	adds	r4, r2, r3
 8002e3e:	4403      	add	r3, r0
 8002e40:	7864      	ldrb	r4, [r4, #1]
 8002e42:	f883 4889 	strb.w	r4, [r3, #2185]	; 0x889
	for(uint8_t i = 0; i < data[0]; i++)
 8002e46:	3101      	adds	r1, #1
 8002e48:	e7f3      	b.n	8002e32 <SAE_J1939_Read_Response_Request_Software_Identification+0xe>
	...

08002e4c <SAE_J1939_Response_Request_DM1>:

/*
 * Response the request of DM1 information to other ECU about this ECU
 * PGN: 0x00FECA (65226)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_DM1(J1939* j1939, uint8_t DA) {
 8002e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e50:	f890 2ae9 	ldrb.w	r2, [r0, #2793]	; 0xae9
 8002e54:	f890 3ae8 	ldrb.w	r3, [r0, #2792]	; 0xae8
 8002e58:	f890 7aec 	ldrb.w	r7, [r0, #2796]	; 0xaec
 8002e5c:	f890 caf4 	ldrb.w	ip, [r0, #2804]	; 0xaf4
	if(j1939->this_dm.errors_dm1_active < 2) {
 8002e60:	f890 6ae4 	ldrb.w	r6, [r0, #2788]	; 0xae4
 8002e64:	f890 8af5 	ldrb.w	r8, [r0, #2805]	; 0xaf5
 8002e68:	f8b0 eaf0 	ldrh.w	lr, [r0, #2800]	; 0xaf0
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8002e72:	f890 3aeb 	ldrb.w	r3, [r0, #2795]	; 0xaeb
 8002e76:	431a      	orrs	r2, r3
 8002e78:	f890 3aea 	ldrb.w	r3, [r0, #2794]	; 0xaea
 8002e7c:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8002e80:	f890 3aed 	ldrb.w	r3, [r0, #2797]	; 0xaed
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8002e8a:	f890 7aef 	ldrb.w	r7, [r0, #2799]	; 0xaef
 8002e8e:	433b      	orrs	r3, r7
 8002e90:	f890 7aee 	ldrb.w	r7, [r0, #2798]	; 0xaee
 8002e94:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 8002e98:	f8d0 7af0 	ldr.w	r7, [r0, #2800]	; 0xaf0
 8002e9c:	0aff      	lsrs	r7, r7, #11
 8002e9e:	f007 07e0 	and.w	r7, r7, #224	; 0xe0
 8002ea2:	ea47 070c 	orr.w	r7, r7, ip
 8002ea6:	f890 caf6 	ldrb.w	ip, [r0, #2806]	; 0xaf6
 8002eaa:	2e01      	cmp	r6, #1
 8002eac:	ea4c 1cc8 	orr.w	ip, ip, r8, lsl #7
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_DM1(J1939* j1939, uint8_t DA) {
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	460d      	mov	r5, r1
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	fa5f fc8c 	uxtb.w	ip, ip
	if(j1939->this_dm.errors_dm1_active < 2) {
 8002ebe:	d818      	bhi.n	8002ef2 <SAE_J1939_Response_Request_DM1+0xa6>
		uint32_t ID = (0x18FECA << 8) | j1939->this_ECU_address;
 8002ec0:	f890 4ae0 	ldrb.w	r4, [r0, #2784]	; 0xae0
		data[3] = j1939->this_dm.dm1.SPN >> 8;
		data[4] = ((j1939->this_dm.dm1.SPN >> 11) & 0b11100000) | j1939->this_dm.dm1.FMI;
		data[5] = (j1939->this_dm.dm1.SPN_conversion_method << 7) | j1939->this_dm.dm1.occurrence_count;
		data[6] = 0xFF;													/* Reserved */
		data[7] = 0xFF;													/* Reserved */
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002ec4:	481c      	ldr	r0, [pc, #112]	; (8002f38 <SAE_J1939_Response_Request_DM1+0xec>)
		data[0] = (j1939->this_dm.dm1.SAE_lamp_status_malfunction_indicator << 6) | (j1939->this_dm.dm1.SAE_lamp_status_red_stop << 4) | (j1939->this_dm.dm1.SAE_lamp_status_amber_warning << 2) | (j1939->this_dm.dm1.SAE_lamp_status_protect_lamp);
 8002ec6:	f88d 200c 	strb.w	r2, [sp, #12]
		data[1] = (j1939->this_dm.dm1.SAE_flash_lamp_malfunction_indicator << 6) | (j1939->this_dm.dm1.SAE_flash_lamp_red_stop << 4) | (j1939->this_dm.dm1.SAE_flash_lamp_amber_warning << 2) | (j1939->this_dm.dm1.SAE_flash_lamp_protect_lamp);
 8002eca:	f88d 300d 	strb.w	r3, [sp, #13]
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002ece:	2200      	movs	r2, #0
		data[6] = 0xFF;													/* Reserved */
 8002ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002ed4:	a903      	add	r1, sp, #12
 8002ed6:	4320      	orrs	r0, r4
		data[2] = j1939->this_dm.dm1.SPN;
 8002ed8:	f8ad e00e 	strh.w	lr, [sp, #14]
		data[4] = ((j1939->this_dm.dm1.SPN >> 11) & 0b11100000) | j1939->this_dm.dm1.FMI;
 8002edc:	f88d 7010 	strb.w	r7, [sp, #16]
		data[5] = (j1939->this_dm.dm1.SPN_conversion_method << 7) | j1939->this_dm.dm1.occurrence_count;
 8002ee0:	f88d c011 	strb.w	ip, [sp, #17]
		data[6] = 0xFF;													/* Reserved */
 8002ee4:	f8ad 3012 	strh.w	r3, [sp, #18]
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8002ee8:	f7ff f9c6 	bl	8002278 <CAN_Send_Message>
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM1);
		if(status != STATUS_SEND_OK)
			return status;
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
	}
}
 8002eec:	b006      	add	sp, #24
 8002eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data[1] = (j1939->this_dm.dm1.SAE_flash_lamp_malfunction_indicator << 6) | (j1939->this_dm.dm1.SAE_flash_lamp_red_stop << 4) | (j1939->this_dm.dm1.SAE_flash_lamp_amber_warning << 2) | (j1939->this_dm.dm1.SAE_flash_lamp_protect_lamp);
 8002ef2:	f88d 300d 	strb.w	r3, [sp, #13]
		data[6] = 0xFF;							/* Reserved */
 8002ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002efa:	f8ad 3012 	strh.w	r3, [sp, #18]
		data[8] = j1939->this_dm.errors_dm1_active;
 8002efe:	f88d 6014 	strb.w	r6, [sp, #20]
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM1);
 8002f02:	f64f 63ca 	movw	r3, #65226	; 0xfeca
 8002f06:	2602      	movs	r6, #2
 8002f08:	e9cd 6300 	strd	r6, r3, [sp]
		data[0] = (j1939->this_dm.dm1.SAE_lamp_status_malfunction_indicator << 6) | (j1939->this_dm.dm1.SAE_lamp_status_red_stop << 4) | (j1939->this_dm.dm1.SAE_lamp_status_amber_warning << 2) | (j1939->this_dm.dm1.SAE_lamp_status_protect_lamp);
 8002f0c:	f88d 200c 	strb.w	r2, [sp, #12]
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM1);
 8002f10:	2309      	movs	r3, #9
 8002f12:	2220      	movs	r2, #32
		data[2] = j1939->this_dm.dm1.SPN;
 8002f14:	f8ad e00e 	strh.w	lr, [sp, #14]
		data[4] = ((j1939->this_dm.dm1.SPN >> 11) & 0b11100000) | j1939->this_dm.dm1.FMI;
 8002f18:	f88d 7010 	strb.w	r7, [sp, #16]
		data[5] = (j1939->this_dm.dm1.SPN_conversion_method << 7) | j1939->this_dm.dm1.occurrence_count;
 8002f1c:	f88d c011 	strb.w	ip, [sp, #17]
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM1);
 8002f20:	f7ff fce6 	bl	80028f0 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
		if(status != STATUS_SEND_OK)
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d1e1      	bne.n	8002eec <SAE_J1939_Response_Request_DM1+0xa0>
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
 8002f28:	9600      	str	r6, [sp, #0]
 8002f2a:	2309      	movs	r3, #9
 8002f2c:	aa03      	add	r2, sp, #12
 8002f2e:	4629      	mov	r1, r5
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7ff fdc9 	bl	8002ac8 <SAE_J1939_Send_Transport_Protocol_Data_Transfer>
 8002f36:	e7d9      	b.n	8002eec <SAE_J1939_Response_Request_DM1+0xa0>
 8002f38:	18feca00 	.word	0x18feca00

08002f3c <SAE_J1939_Read_Response_Request_DM1>:

/*
 * Store the last DM1 information about other ECU. At least we know how many errors are active
 * PGN: 0x00FECA (65226)
 */
void SAE_J1939_Read_Response_Request_DM1(J1939 *j1939, uint8_t SA, uint8_t data[], uint8_t errors_dm1_active) {
 8002f3c:	b530      	push	{r4, r5, lr}
	j1939->from_other_ecu_dm.dm1.SAE_lamp_status_malfunction_indicator = data[0] >> 6;
 8002f3e:	7814      	ldrb	r4, [r2, #0]
 8002f40:	09a4      	lsrs	r4, r4, #6
 8002f42:	f880 4754 	strb.w	r4, [r0, #1876]	; 0x754
	j1939->from_other_ecu_dm.dm1.SAE_lamp_status_red_stop = (data[0] >> 4) & 0b00000011;
 8002f46:	7814      	ldrb	r4, [r2, #0]
 8002f48:	f3c4 1401 	ubfx	r4, r4, #4, #2
 8002f4c:	f880 4755 	strb.w	r4, [r0, #1877]	; 0x755
	j1939->from_other_ecu_dm.dm1.SAE_lamp_status_amber_warning = (data[0] >> 2) & 0b00000011;
 8002f50:	7814      	ldrb	r4, [r2, #0]
 8002f52:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8002f56:	f880 4756 	strb.w	r4, [r0, #1878]	; 0x756
	j1939->from_other_ecu_dm.dm1.SAE_lamp_status_protect_lamp = data[0] & 0b00000011;
 8002f5a:	7814      	ldrb	r4, [r2, #0]
 8002f5c:	f004 0403 	and.w	r4, r4, #3
 8002f60:	f880 4757 	strb.w	r4, [r0, #1879]	; 0x757
	j1939->from_other_ecu_dm.dm1.SAE_flash_lamp_malfunction_indicator = data[1] >> 6;
 8002f64:	7854      	ldrb	r4, [r2, #1]
 8002f66:	09a4      	lsrs	r4, r4, #6
 8002f68:	f880 4758 	strb.w	r4, [r0, #1880]	; 0x758
	j1939->from_other_ecu_dm.dm1.SAE_flash_lamp_red_stop = (data[1] >> 4) & 0b00000011;
 8002f6c:	7854      	ldrb	r4, [r2, #1]
 8002f6e:	f3c4 1401 	ubfx	r4, r4, #4, #2
 8002f72:	f880 4759 	strb.w	r4, [r0, #1881]	; 0x759
	j1939->from_other_ecu_dm.dm1.SAE_flash_lamp_amber_warning = (data[1] >> 2) & 0b00000011;
 8002f76:	7854      	ldrb	r4, [r2, #1]
 8002f78:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8002f7c:	f880 475a 	strb.w	r4, [r0, #1882]	; 0x75a
	j1939->from_other_ecu_dm.dm1.SAE_flash_lamp_protect_lamp = data[1] & 0b00000011;
 8002f80:	7854      	ldrb	r4, [r2, #1]
 8002f82:	f004 0403 	and.w	r4, r4, #3
 8002f86:	f880 475b 	strb.w	r4, [r0, #1883]	; 0x75b
	j1939->from_other_ecu_dm.dm1.SPN = ((data[4] & 0b11100000) << 11) | (data[3] << 8) | data[2];
 8002f8a:	7914      	ldrb	r4, [r2, #4]
 8002f8c:	8855      	ldrh	r5, [r2, #2]
 8002f8e:	02e4      	lsls	r4, r4, #11
 8002f90:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
 8002f94:	432c      	orrs	r4, r5
 8002f96:	f8c0 475c 	str.w	r4, [r0, #1884]	; 0x75c
	j1939->from_other_ecu_dm.dm1.FMI = data[4] & 0b00011111;
 8002f9a:	7914      	ldrb	r4, [r2, #4]
 8002f9c:	f004 041f 	and.w	r4, r4, #31
 8002fa0:	f880 4760 	strb.w	r4, [r0, #1888]	; 0x760
	j1939->from_other_ecu_dm.dm1.SPN_conversion_method = data[5] >> 7;
 8002fa4:	7955      	ldrb	r5, [r2, #5]
 8002fa6:	09ed      	lsrs	r5, r5, #7
 8002fa8:	f880 5761 	strb.w	r5, [r0, #1889]	; 0x761
	j1939->from_other_ecu_dm.dm1.occurrence_count = data[5] & 0b01111111;
 8002fac:	7952      	ldrb	r2, [r2, #5]
	j1939->from_other_ecu_dm.dm1.from_ecu_address = SA;
 8002fae:	f880 1763 	strb.w	r1, [r0, #1891]	; 0x763

	/* Check if we have no fault cause */
	if(j1939->from_other_ecu_dm.dm1.FMI == FMI_NOT_AVAILABLE)
 8002fb2:	2c1f      	cmp	r4, #31
	j1939->from_other_ecu_dm.dm1.occurrence_count = data[5] & 0b01111111;
 8002fb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		j1939->from_other_ecu_dm.errors_dm1_active = 0;
 8002fb8:	bf08      	it	eq
 8002fba:	2300      	moveq	r3, #0
	j1939->from_other_ecu_dm.dm1.occurrence_count = data[5] & 0b01111111;
 8002fbc:	f880 2762 	strb.w	r2, [r0, #1890]	; 0x762
	if(j1939->from_other_ecu_dm.dm1.FMI == FMI_NOT_AVAILABLE)
 8002fc0:	f880 3750 	strb.w	r3, [r0, #1872]	; 0x750
	else
		j1939->from_other_ecu_dm.errors_dm1_active = errors_dm1_active;
}
 8002fc4:	bd30      	pop	{r4, r5, pc}

08002fc6 <SAE_J1939_Read_Request_DM14>:

/*
 * Read the request of DM14 memory request to other ECU about this ECU
 * PGN: 0x00D900 (55552)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Read_Request_DM14(J1939 *j1939, uint8_t DA, uint8_t data[]) {
 8002fc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fca:	b08b      	sub	sp, #44	; 0x2c
 8002fcc:	460d      	mov	r5, r1
	/* These are information the ECU want to have */
	uint16_t number_of_requested_bytes = ((data[1] & 0b11100000) << 3) | data[0];
 8002fce:	7851      	ldrb	r1, [r2, #1]
 8002fd0:	00ce      	lsls	r6, r1, #3
 8002fd2:	f406 63e0 	and.w	r3, r6, #1792	; 0x700
 8002fd6:	7816      	ldrb	r6, [r2, #0]
ENUM_J1939_STATUS_CODES SAE_J1939_Read_Request_DM14(J1939 *j1939, uint8_t DA, uint8_t data[]) {
 8002fd8:	af04      	add	r7, sp, #16
	uint16_t number_of_requested_bytes = ((data[1] & 0b11100000) << 3) | data[0];
 8002fda:	431e      	orrs	r6, r3
	uint8_t pointer_type = (data[1] >> 4) & 0b0001;
	uint8_t command = (data[1] >> 1) & 0b0000111;
 8002fdc:	f3c1 0342 	ubfx	r3, r1, #1, #3
 8002fe0:	73bb      	strb	r3, [r7, #14]
	uint32_t pointer = (data[4] << 16) | (data[3] << 8) | data[2];
 8002fe2:	78d3      	ldrb	r3, [r2, #3]
	uint16_t number_of_requested_bytes = ((data[1] & 0b11100000) << 3) | data[0];
 8002fe4:	823e      	strh	r6, [r7, #16]
ENUM_J1939_STATUS_CODES SAE_J1939_Read_Request_DM14(J1939 *j1939, uint8_t DA, uint8_t data[]) {
 8002fe6:	4604      	mov	r4, r0
	uint32_t pointer = (data[4] << 16) | (data[3] << 8) | data[2];
 8002fe8:	7910      	ldrb	r0, [r2, #4]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002ff0:	7890      	ldrb	r0, [r2, #2]
 8002ff2:	4303      	orrs	r3, r0
 8002ff4:	617b      	str	r3, [r7, #20]
	uint8_t pointer_extension = data[5];
 8002ff6:	7953      	ldrb	r3, [r2, #5]
	uint16_t key = (data[7] << 8) | data[6];
 8002ff8:	79d0      	ldrb	r0, [r2, #7]
	uint8_t pointer_extension = data[5];
 8002ffa:	73fb      	strb	r3, [r7, #15]
	uint16_t key = (data[7] << 8) | data[6];
 8002ffc:	7993      	ldrb	r3, [r2, #6]
 8002ffe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003002:	827b      	strh	r3, [r7, #18]

	/* Load up the amount of bytes we want to send via DM16 */
	uint8_t number_of_occurences = number_of_requested_bytes;
	uint8_t raw_binary_data[number_of_requested_bytes];
 8003004:	1df3      	adds	r3, r6, #7
 8003006:	466a      	mov	r2, sp
 8003008:	08db      	lsrs	r3, r3, #3
 800300a:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 800300e:	469d      	mov	sp, r3

	/* Here we ask the flash, eeprom or ram and use pointers */
	FLASH_EEPROM_RAM_Memory(&number_of_requested_bytes, pointer_type, &command, &pointer, &pointer_extension, &key, raw_binary_data);
 8003010:	f107 0312 	add.w	r3, r7, #18
 8003014:	9301      	str	r3, [sp, #4]
	uint8_t raw_binary_data[number_of_requested_bytes];
 8003016:	f10d 0b10 	add.w	fp, sp, #16
	FLASH_EEPROM_RAM_Memory(&number_of_requested_bytes, pointer_type, &command, &pointer, &pointer_extension, &key, raw_binary_data);
 800301a:	f107 030f 	add.w	r3, r7, #15
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f107 020e 	add.w	r2, r7, #14
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800302c:	f107 0010 	add.w	r0, r7, #16
 8003030:	f8cd b008 	str.w	fp, [sp, #8]
 8003034:	f7ff f95c 	bl	80022f0 <FLASH_EEPROM_RAM_Memory>

	/* Prepare a DM15 PGN: 0x00D800 response back to DA */
	uint16_t number_of_allowed_bytes = number_of_requested_bytes;
	uint8_t status = command;
	uint32_t EDC_parameter = pointer;
	uint8_t EDCP_extention = pointer_extension;
 8003038:	f897 900f 	ldrb.w	r9, [r7, #15]
	uint16_t seed = key;
 800303c:	f8b7 a012 	ldrh.w	sl, [r7, #18]
	uint32_t EDC_parameter = pointer;
 8003040:	697b      	ldr	r3, [r7, #20]
	uint16_t number_of_allowed_bytes = number_of_requested_bytes;
 8003042:	f8b7 8010 	ldrh.w	r8, [r7, #16]
	uint32_t EDC_parameter = pointer;
 8003046:	607b      	str	r3, [r7, #4]
	status = SAE_J1939_Send_Response_DM15(j1939, DA, number_of_allowed_bytes, status, EDC_parameter, EDCP_extention, seed);
 8003048:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	7bbb      	ldrb	r3, [r7, #14]
 8003052:	4642      	mov	r2, r8
 8003054:	4629      	mov	r1, r5
 8003056:	4620      	mov	r0, r4
 8003058:	f000 f818 	bl	800308c <SAE_J1939_Send_Response_DM15>

	/* Check if our message was OK - Send DM16 binary data transfer */
	if(status == STATUS_DM15_PROCEED) {
 800305c:	b980      	cbnz	r0, 8003080 <SAE_J1939_Read_Request_DM14+0xba>
		if(SAE_J1939_Send_Binary_Data_Transfer_DM16(j1939, DA, number_of_occurences, raw_binary_data) == STATUS_SEND_OK)
 800305e:	465b      	mov	r3, fp
 8003060:	b2f2      	uxtb	r2, r6
 8003062:	4629      	mov	r1, r5
 8003064:	4620      	mov	r0, r4
 8003066:	f000 f858 	bl	800311a <SAE_J1939_Send_Binary_Data_Transfer_DM16>
			status = SAE_J1939_Send_Response_DM15(j1939, DA, number_of_allowed_bytes, STATUS_DM15_OPERATION_COMPLETED, EDC_parameter, EDCP_extention, seed);
 800306a:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	9300      	str	r3, [sp, #0]
		if(SAE_J1939_Send_Binary_Data_Transfer_DM16(j1939, DA, number_of_occurences, raw_binary_data) == STATUS_SEND_OK)
 8003072:	b948      	cbnz	r0, 8003088 <SAE_J1939_Read_Request_DM14+0xc2>
			status = SAE_J1939_Send_Response_DM15(j1939, DA, number_of_allowed_bytes, STATUS_DM15_OPERATION_COMPLETED, EDC_parameter, EDCP_extention, seed);
 8003074:	2304      	movs	r3, #4
		else
			status = SAE_J1939_Send_Response_DM15(j1939, DA, number_of_allowed_bytes, STATUS_DM15_OPERATION_FAILED, EDC_parameter, EDCP_extention, seed);
 8003076:	4642      	mov	r2, r8
 8003078:	4629      	mov	r1, r5
 800307a:	4620      	mov	r0, r4
 800307c:	f000 f806 	bl	800308c <SAE_J1939_Send_Response_DM15>
	}
	return status;

}
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			status = SAE_J1939_Send_Response_DM15(j1939, DA, number_of_allowed_bytes, STATUS_DM15_OPERATION_FAILED, EDC_parameter, EDCP_extention, seed);
 8003088:	2305      	movs	r3, #5
 800308a:	e7f4      	b.n	8003076 <SAE_J1939_Read_Request_DM14+0xb0>

0800308c <SAE_J1939_Send_Response_DM15>:

/*
 * Send a memory response. This will be sent after a DM14 memory request
 * PGN: 0x00D800 (55296)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Response_DM15(J1939 *j1939, uint8_t DA, uint16_t number_of_allowed_bytes, uint8_t status, uint32_t EDC_parameter, uint8_t EDCP_extention, uint16_t seed) {
 800308c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t ID = (0x18D8 << 16) | (DA << 8) | j1939->this_ECU_address;
	uint8_t response_data[8];
	response_data[0] = number_of_allowed_bytes;
	response_data[1] = (number_of_allowed_bytes >> 3) | (0b1 << 4) | (status << 1) | 0b1;	/* bit 5 and 1 are reserved */
 800308e:	005b      	lsls	r3, r3, #1
	uint32_t ID = (0x18D8 << 16) | (DA << 8) | j1939->this_ECU_address;
 8003090:	f890 5ae0 	ldrb.w	r5, [r0, #2784]	; 0xae0
	response_data[0] = number_of_allowed_bytes;
 8003094:	f88d 2000 	strb.w	r2, [sp]
	response_data[1] = (number_of_allowed_bytes >> 3) | (0b1 << 4) | (status << 1) | 0b1;	/* bit 5 and 1 are reserved */
 8003098:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Response_DM15(J1939 *j1939, uint8_t DA, uint16_t number_of_allowed_bytes, uint8_t status, uint32_t EDC_parameter, uint8_t EDCP_extention, uint16_t seed) {
 800309c:	9c06      	ldr	r4, [sp, #24]
	response_data[2] = EDC_parameter;
 800309e:	f8ad 4002 	strh.w	r4, [sp, #2]
	uint32_t ID = (0x18D8 << 16) | (DA << 8) | j1939->this_ECU_address;
 80030a2:	ea45 2001 	orr.w	r0, r5, r1, lsl #8
	response_data[1] = (number_of_allowed_bytes >> 3) | (0b1 << 4) | (status << 1) | 0b1;	/* bit 5 and 1 are reserved */
 80030a6:	f042 0311 	orr.w	r3, r2, #17
 80030aa:	f88d 3001 	strb.w	r3, [sp, #1]
	response_data[3] = EDC_parameter >> 8;
	response_data[4] = EDC_parameter >> 16;
	response_data[5] = EDCP_extention;
	response_data[6] = seed;
	response_data[7] = seed >> 8;
	return CAN_Send_Message(ID, response_data, 0); 											/* 0 ms delay */
 80030ae:	f040 50c6 	orr.w	r0, r0, #415236096	; 0x18c00000
	response_data[5] = EDCP_extention;
 80030b2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80030b6:	f88d 3005 	strb.w	r3, [sp, #5]
	response_data[4] = EDC_parameter >> 16;
 80030ba:	0c24      	lsrs	r4, r4, #16
	response_data[6] = seed;
 80030bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	response_data[4] = EDC_parameter >> 16;
 80030c0:	f88d 4004 	strb.w	r4, [sp, #4]
	return CAN_Send_Message(ID, response_data, 0); 											/* 0 ms delay */
 80030c4:	2200      	movs	r2, #0
 80030c6:	4669      	mov	r1, sp
 80030c8:	f440 10c0 	orr.w	r0, r0, #1572864	; 0x180000
	response_data[6] = seed;
 80030cc:	f8ad 3006 	strh.w	r3, [sp, #6]
	return CAN_Send_Message(ID, response_data, 0); 											/* 0 ms delay */
 80030d0:	f7ff f8d2 	bl	8002278 <CAN_Send_Message>
}
 80030d4:	b003      	add	sp, #12
 80030d6:	bd30      	pop	{r4, r5, pc}

080030d8 <SAE_J1939_Read_Response_DM15>:
/*
 * Store the DM15 information about other ECU (This is actually the response after DM14 request according to J1939 standard)
 * PGN: 0x00D800 (55296)
 */
void SAE_J1939_Read_Response_DM15(J1939 *j1939, uint8_t SA, uint8_t data[]) {
	j1939->from_other_ecu_dm.dm15.number_of_allowed_bytes = (data[1] >> 3) | data[0];
 80030d8:	7813      	ldrb	r3, [r2, #0]
void SAE_J1939_Read_Response_DM15(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 80030da:	b510      	push	{r4, lr}
	j1939->from_other_ecu_dm.dm15.number_of_allowed_bytes = (data[1] >> 3) | data[0];
 80030dc:	7854      	ldrb	r4, [r2, #1]
 80030de:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
 80030e2:	f8a0 3774 	strh.w	r3, [r0, #1908]	; 0x774
	j1939->from_other_ecu_dm.dm15.status = (data[1] >> 1) & 0b0000111;
 80030e6:	7853      	ldrb	r3, [r2, #1]
 80030e8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80030ec:	f880 3776 	strb.w	r3, [r0, #1910]	; 0x776
	j1939->from_other_ecu_dm.dm15.EDC_parameter = (data[4] << 16) | (data[3] << 8) | data[2];
 80030f0:	78d3      	ldrb	r3, [r2, #3]
 80030f2:	7914      	ldrb	r4, [r2, #4]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80030fa:	7894      	ldrb	r4, [r2, #2]
 80030fc:	4323      	orrs	r3, r4
 80030fe:	f8c0 3778 	str.w	r3, [r0, #1912]	; 0x778
	j1939->from_other_ecu_dm.dm15.EDCP_extention = data[5];
 8003102:	7953      	ldrb	r3, [r2, #5]
 8003104:	f880 377c 	strb.w	r3, [r0, #1916]	; 0x77c
	j1939->from_other_ecu_dm.dm15.seed = (data[7] << 8) | data[6];
 8003108:	79d4      	ldrb	r4, [r2, #7]
 800310a:	7993      	ldrb	r3, [r2, #6]
	j1939->from_other_ecu_dm.dm15.from_ecu_address = SA;
 800310c:	f880 1780 	strb.w	r1, [r0, #1920]	; 0x780
	j1939->from_other_ecu_dm.dm15.seed = (data[7] << 8) | data[6];
 8003110:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003114:	f8a0 377e 	strh.w	r3, [r0, #1918]	; 0x77e
}
 8003118:	bd10      	pop	{r4, pc}

0800311a <SAE_J1939_Send_Binary_Data_Transfer_DM16>:
#include "Diagnostics_Layer.h"

/* Send binary data transfer. This will be sent after DM15 memory response (if it was proceeded)
 * PGN: 0x00D700 (55040)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Binary_Data_Transfer_DM16(J1939 *j1939, uint8_t DA, uint8_t number_of_occurences, uint8_t raw_binary_data[]) {
 800311a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(number_of_occurences < 8) {
 800311e:	2a07      	cmp	r2, #7
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Binary_Data_Transfer_DM16(J1939 *j1939, uint8_t DA, uint8_t number_of_occurences, uint8_t raw_binary_data[]) {
 8003120:	b085      	sub	sp, #20
 8003122:	4605      	mov	r5, r0
 8003124:	af02      	add	r7, sp, #8
 8003126:	f102 0c08 	add.w	ip, r2, #8
	if(number_of_occurences < 8) {
 800312a:	d821      	bhi.n	8003170 <SAE_J1939_Send_Binary_Data_Transfer_DM16+0x56>
		uint32_t ID = (0x18D7 << 16) | (DA << 8) | j1939->this_ECU_address;
 800312c:	f890 4ae0 	ldrb.w	r4, [r0, #2784]	; 0xae0
		uint8_t data[number_of_occurences + 1];								/* number_of_occurences must be 7 */
 8003130:	f40c 7cfc 	and.w	ip, ip, #504	; 0x1f8
		uint32_t ID = (0x18D7 << 16) | (DA << 8) | j1939->this_ECU_address;
 8003134:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	if(number_of_occurences < 8) {
 8003138:	466e      	mov	r6, sp
		uint8_t data[number_of_occurences + 1];								/* number_of_occurences must be 7 */
 800313a:	ebad 0d0c 	sub.w	sp, sp, ip
		uint32_t ID = (0x18D7 << 16) | (DA << 8) | j1939->this_ECU_address;
 800313e:	f041 50c6 	orr.w	r0, r1, #415236096	; 0x18c00000
		data[0] = number_of_occurences;										/* How much binary data we want to send */
 8003142:	f88d 2008 	strb.w	r2, [sp, #8]
		uint32_t ID = (0x18D7 << 16) | (DA << 8) | j1939->this_ECU_address;
 8003146:	f440 10b8 	orr.w	r0, r0, #1507328	; 0x170000
		uint8_t data[number_of_occurences + 1];								/* number_of_occurences must be 7 */
 800314a:	a902      	add	r1, sp, #8
		for(uint8_t i = 0; i < number_of_occurences; i++)
 800314c:	f10d 0409 	add.w	r4, sp, #9
 8003150:	441a      	add	r2, r3
 8003152:	4293      	cmp	r3, r2
 8003154:	d107      	bne.n	8003166 <SAE_J1939_Send_Binary_Data_Transfer_DM16+0x4c>
			data[i+1] = raw_binary_data[i];
		return CAN_Send_Message(ID, data, 0);								/* 0 ms delay */
 8003156:	2200      	movs	r2, #0
 8003158:	f7ff f88e 	bl	8002278 <CAN_Send_Message>
 800315c:	46b5      	mov	sp, r6
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM16);
		if(status != STATUS_SEND_OK)
			return status;
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
	}
}
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data[i+1] = raw_binary_data[i];
 8003166:	f813 5b01 	ldrb.w	r5, [r3], #1
 800316a:	f804 5b01 	strb.w	r5, [r4], #1
		for(uint8_t i = 0; i < number_of_occurences; i++)
 800316e:	e7f0      	b.n	8003152 <SAE_J1939_Send_Binary_Data_Transfer_DM16+0x38>
		uint8_t data[number_of_occurences + 1];								/* If number_of_occurences = 255, then data have 256 elements */
 8003170:	f40c 7cfc 	and.w	ip, ip, #504	; 0x1f8
	}else{
 8003174:	466c      	mov	r4, sp
		uint8_t data[number_of_occurences + 1];								/* If number_of_occurences = 255, then data have 256 elements */
 8003176:	ebad 0d0c 	sub.w	sp, sp, ip
 800317a:	ae02      	add	r6, sp, #8
		data[total_message_size++] = number_of_occurences;
 800317c:	f88d 2008 	strb.w	r2, [sp, #8]
		for(uint8_t i = 0; i < number_of_occurences; i++)
 8003180:	3b01      	subs	r3, #1
 8003182:	f10d 0c09 	add.w	ip, sp, #9
 8003186:	2000      	movs	r0, #0
			data[total_message_size++] = raw_binary_data[i];				/* When i = 0, then total_message_size = 1 */
 8003188:	4681      	mov	r9, r0
		for(uint8_t i = 0; i < number_of_occurences; i++)
 800318a:	3001      	adds	r0, #1
 800318c:	b2c0      	uxtb	r0, r0
			data[total_message_size++] = raw_binary_data[i];				/* When i = 0, then total_message_size = 1 */
 800318e:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8003192:	f80c eb01 	strb.w	lr, [ip], #1
		for(uint8_t i = 0; i < number_of_occurences; i++)
 8003196:	4282      	cmp	r2, r0
 8003198:	d1f6      	bne.n	8003188 <SAE_J1939_Send_Binary_Data_Transfer_DM16+0x6e>
 800319a:	f109 0902 	add.w	r9, r9, #2
		uint8_t number_of_packages = total_message_size % 8 > 1 ? total_message_size/8 + 1 : total_message_size/8; /* Rounding up */
 800319e:	f3c9 08c7 	ubfx	r8, r9, #3, #8
 80031a2:	f019 0f06 	tst.w	r9, #6
 80031a6:	bf1c      	itt	ne
 80031a8:	f108 0801 	addne.w	r8, r8, #1
 80031ac:	fa5f f888 	uxtbne.w	r8, r8
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM16);
 80031b0:	f44f 4357 	mov.w	r3, #55040	; 0xd700
 80031b4:	e9cd 8300 	strd	r8, r3, [sp]
 80031b8:	2220      	movs	r2, #32
 80031ba:	6079      	str	r1, [r7, #4]
 80031bc:	464b      	mov	r3, r9
 80031be:	4628      	mov	r0, r5
 80031c0:	f7ff fb96 	bl	80028f0 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
		if(status != STATUS_SEND_OK)
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	b930      	cbnz	r0, 80031d6 <SAE_J1939_Send_Binary_Data_Transfer_DM16+0xbc>
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
 80031c8:	f8cd 8000 	str.w	r8, [sp]
 80031cc:	464b      	mov	r3, r9
 80031ce:	4632      	mov	r2, r6
 80031d0:	4628      	mov	r0, r5
 80031d2:	f7ff fc79 	bl	8002ac8 <SAE_J1939_Send_Transport_Protocol_Data_Transfer>
 80031d6:	46a5      	mov	sp, r4
 80031d8:	e7c1      	b.n	800315e <SAE_J1939_Send_Binary_Data_Transfer_DM16+0x44>

080031da <SAE_J1939_Read_Binary_Data_Transfer_DM16>:

/*
 * Read binary data transfer
 * PGN: 0x00D700 (55040)
 */
void SAE_J1939_Read_Binary_Data_Transfer_DM16(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 80031da:	b570      	push	{r4, r5, r6, lr}
	j1939->from_other_ecu_dm.dm16.number_of_occurences = data[0];
 80031dc:	4614      	mov	r4, r2
 80031de:	f200 7085 	addw	r0, r0, #1925	; 0x785
 80031e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80031e6:	f800 3c01 	strb.w	r3, [r0, #-1]
	j1939->from_other_ecu_dm.dm16.from_ecu_address = SA;
 80031ea:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
 80031ee:	2300      	movs	r3, #0
	for(uint8_t i = 0; i < 255; i++)
		if(i < data[0])
			j1939->from_other_ecu_dm.dm16.raw_binary_data[i] = data[i+1];
		else
			j1939->from_other_ecu_dm.dm16.raw_binary_data[i] = 0xFF;					/* No data */
 80031f0:	21ff      	movs	r1, #255	; 0xff
		if(i < data[0])
 80031f2:	7816      	ldrb	r6, [r2, #0]
 80031f4:	b2dd      	uxtb	r5, r3
 80031f6:	42ae      	cmp	r6, r5
			j1939->from_other_ecu_dm.dm16.raw_binary_data[i] = data[i+1];
 80031f8:	bf84      	itt	hi
 80031fa:	5ce5      	ldrbhi	r5, [r4, r3]
 80031fc:	7005      	strbhi	r5, [r0, #0]
			j1939->from_other_ecu_dm.dm16.raw_binary_data[i] = 0xFF;					/* No data */
 80031fe:	f103 0301 	add.w	r3, r3, #1
 8003202:	bf98      	it	ls
 8003204:	7001      	strbls	r1, [r0, #0]
	for(uint8_t i = 0; i < 255; i++)
 8003206:	2bff      	cmp	r3, #255	; 0xff
 8003208:	f100 0001 	add.w	r0, r0, #1
 800320c:	d1f1      	bne.n	80031f2 <SAE_J1939_Read_Binary_Data_Transfer_DM16+0x18>
}
 800320e:	bd70      	pop	{r4, r5, r6, pc}

08003210 <SAE_J1939_Response_Request_DM2>:

/*
 * Response the request of DM2 information to other ECU about this ECU
 * PGN: 0x00FECB (65227)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_DM2(J1939 *j1939, uint8_t DA) {
 8003210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003214:	f890 2af9 	ldrb.w	r2, [r0, #2809]	; 0xaf9
 8003218:	f890 3af8 	ldrb.w	r3, [r0, #2808]	; 0xaf8
 800321c:	f890 7afc 	ldrb.w	r7, [r0, #2812]	; 0xafc
 8003220:	f890 cb04 	ldrb.w	ip, [r0, #2820]	; 0xb04
	if(j1939->this_dm.errors_dm2_active < 2) {
 8003224:	f890 6ae5 	ldrb.w	r6, [r0, #2789]	; 0xae5
 8003228:	f890 8b05 	ldrb.w	r8, [r0, #2821]	; 0xb05
 800322c:	f8b0 eb00 	ldrh.w	lr, [r0, #2816]	; 0xb00
 8003230:	0112      	lsls	r2, r2, #4
 8003232:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8003236:	f890 3afb 	ldrb.w	r3, [r0, #2811]	; 0xafb
 800323a:	431a      	orrs	r2, r3
 800323c:	f890 3afa 	ldrb.w	r3, [r0, #2810]	; 0xafa
 8003240:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8003244:	f890 3afd 	ldrb.w	r3, [r0, #2813]	; 0xafd
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 800324e:	f890 7aff 	ldrb.w	r7, [r0, #2815]	; 0xaff
 8003252:	433b      	orrs	r3, r7
 8003254:	f890 7afe 	ldrb.w	r7, [r0, #2814]	; 0xafe
 8003258:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 800325c:	f8d0 7b00 	ldr.w	r7, [r0, #2816]	; 0xb00
 8003260:	0aff      	lsrs	r7, r7, #11
 8003262:	f007 07e0 	and.w	r7, r7, #224	; 0xe0
 8003266:	ea47 070c 	orr.w	r7, r7, ip
 800326a:	f890 cb06 	ldrb.w	ip, [r0, #2822]	; 0xb06
 800326e:	2e01      	cmp	r6, #1
 8003270:	ea4c 1cc8 	orr.w	ip, ip, r8, lsl #7
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_DM2(J1939 *j1939, uint8_t DA) {
 8003274:	b086      	sub	sp, #24
 8003276:	4604      	mov	r4, r0
 8003278:	460d      	mov	r5, r1
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	b2db      	uxtb	r3, r3
 800327e:	fa5f fc8c 	uxtb.w	ip, ip
	if(j1939->this_dm.errors_dm2_active < 2) {
 8003282:	d818      	bhi.n	80032b6 <SAE_J1939_Response_Request_DM2+0xa6>
		uint32_t ID = (0x18FECB << 8) | j1939->this_ECU_address;
 8003284:	f890 4ae0 	ldrb.w	r4, [r0, #2784]	; 0xae0
		data[3] = j1939->this_dm.dm2.SPN >> 8;
		data[4] = ((j1939->this_dm.dm2.SPN >> 11) & 0b11100000) | j1939->this_dm.dm2.FMI;
		data[5] = (j1939->this_dm.dm2.SPN_conversion_method << 7) | j1939->this_dm.dm2.occurrence_count;
		data[6] = 0xFF;													/* Reserved */
		data[7] = 0xFF;													/* Reserved */
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8003288:	481c      	ldr	r0, [pc, #112]	; (80032fc <SAE_J1939_Response_Request_DM2+0xec>)
		data[0] = (j1939->this_dm.dm2.SAE_lamp_status_malfunction_indicator << 6) | (j1939->this_dm.dm2.SAE_lamp_status_red_stop << 4) | (j1939->this_dm.dm2.SAE_lamp_status_amber_warning << 2) | (j1939->this_dm.dm2.SAE_lamp_status_protect_lamp);
 800328a:	f88d 200c 	strb.w	r2, [sp, #12]
		data[1] = (j1939->this_dm.dm2.SAE_flash_lamp_malfunction_indicator << 6) | (j1939->this_dm.dm2.SAE_flash_lamp_red_stop << 4) | (j1939->this_dm.dm2.SAE_flash_lamp_amber_warning << 2) | (j1939->this_dm.dm2.SAE_flash_lamp_protect_lamp);
 800328e:	f88d 300d 	strb.w	r3, [sp, #13]
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8003292:	2200      	movs	r2, #0
		data[6] = 0xFF;													/* Reserved */
 8003294:	f64f 73ff 	movw	r3, #65535	; 0xffff
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8003298:	a903      	add	r1, sp, #12
 800329a:	4320      	orrs	r0, r4
		data[2] = j1939->this_dm.dm2.SPN;
 800329c:	f8ad e00e 	strh.w	lr, [sp, #14]
		data[4] = ((j1939->this_dm.dm2.SPN >> 11) & 0b11100000) | j1939->this_dm.dm2.FMI;
 80032a0:	f88d 7010 	strb.w	r7, [sp, #16]
		data[5] = (j1939->this_dm.dm2.SPN_conversion_method << 7) | j1939->this_dm.dm2.occurrence_count;
 80032a4:	f88d c011 	strb.w	ip, [sp, #17]
		data[6] = 0xFF;													/* Reserved */
 80032a8:	f8ad 3012 	strh.w	r3, [sp, #18]
		return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 80032ac:	f7fe ffe4 	bl	8002278 <CAN_Send_Message>
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM2);
		if(status != STATUS_SEND_OK)
			return status;
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
	}
}
 80032b0:	b006      	add	sp, #24
 80032b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data[1] = (j1939->this_dm.dm2.SAE_flash_lamp_malfunction_indicator << 6) | (j1939->this_dm.dm2.SAE_flash_lamp_red_stop << 4) | (j1939->this_dm.dm2.SAE_flash_lamp_amber_warning << 2) | (j1939->this_dm.dm2.SAE_flash_lamp_protect_lamp);
 80032b6:	f88d 300d 	strb.w	r3, [sp, #13]
		data[6] = 0xFF;							/* Reserved */
 80032ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032be:	f8ad 3012 	strh.w	r3, [sp, #18]
		data[8] = j1939->this_dm.errors_dm2_active;
 80032c2:	f88d 6014 	strb.w	r6, [sp, #20]
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM2);
 80032c6:	f64f 63cb 	movw	r3, #65227	; 0xfecb
 80032ca:	2602      	movs	r6, #2
 80032cc:	e9cd 6300 	strd	r6, r3, [sp]
		data[0] = (j1939->this_dm.dm2.SAE_lamp_status_malfunction_indicator << 6) | (j1939->this_dm.dm2.SAE_lamp_status_red_stop << 4) | (j1939->this_dm.dm2.SAE_lamp_status_amber_warning << 2) | (j1939->this_dm.dm2.SAE_lamp_status_protect_lamp);
 80032d0:	f88d 200c 	strb.w	r2, [sp, #12]
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM2);
 80032d4:	2309      	movs	r3, #9
 80032d6:	2220      	movs	r2, #32
		data[2] = j1939->this_dm.dm2.SPN;
 80032d8:	f8ad e00e 	strh.w	lr, [sp, #14]
		data[4] = ((j1939->this_dm.dm2.SPN >> 11) & 0b11100000) | j1939->this_dm.dm2.FMI;
 80032dc:	f88d 7010 	strb.w	r7, [sp, #16]
		data[5] = (j1939->this_dm.dm2.SPN_conversion_method << 7) | j1939->this_dm.dm2.occurrence_count;
 80032e0:	f88d c011 	strb.w	ip, [sp, #17]
		ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_DM2);
 80032e4:	f7ff fb04 	bl	80028f0 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
		if(status != STATUS_SEND_OK)
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d1e1      	bne.n	80032b0 <SAE_J1939_Response_Request_DM2+0xa0>
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
 80032ec:	9600      	str	r6, [sp, #0]
 80032ee:	2309      	movs	r3, #9
 80032f0:	aa03      	add	r2, sp, #12
 80032f2:	4629      	mov	r1, r5
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7ff fbe7 	bl	8002ac8 <SAE_J1939_Send_Transport_Protocol_Data_Transfer>
 80032fa:	e7d9      	b.n	80032b0 <SAE_J1939_Response_Request_DM2+0xa0>
 80032fc:	18fecb00 	.word	0x18fecb00

08003300 <SAE_J1939_Read_Response_Request_DM2>:

/*
 * Store the last DM2 information about other ECU. At least we know how many errors are active
 * PGN: 0x00FECB (65227)
 */
void SAE_J1939_Read_Response_Request_DM2(J1939 *j1939, uint8_t SA, uint8_t data[], uint8_t errors_dm2_active) {
 8003300:	b530      	push	{r4, r5, lr}
	j1939->from_other_ecu_dm.dm2.SAE_lamp_status_malfunction_indicator = data[0] >> 6;
 8003302:	7814      	ldrb	r4, [r2, #0]
 8003304:	09a4      	lsrs	r4, r4, #6
 8003306:	f880 4764 	strb.w	r4, [r0, #1892]	; 0x764
	j1939->from_other_ecu_dm.dm2.SAE_lamp_status_red_stop = (data[0] >> 4) & 0b00000011;
 800330a:	7814      	ldrb	r4, [r2, #0]
 800330c:	f3c4 1401 	ubfx	r4, r4, #4, #2
 8003310:	f880 4765 	strb.w	r4, [r0, #1893]	; 0x765
	j1939->from_other_ecu_dm.dm2.SAE_lamp_status_amber_warning = (data[0] >> 2) & 0b00000011;
 8003314:	7814      	ldrb	r4, [r2, #0]
 8003316:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800331a:	f880 4766 	strb.w	r4, [r0, #1894]	; 0x766
	j1939->from_other_ecu_dm.dm2.SAE_lamp_status_protect_lamp = data[0] & 0b00000011;
 800331e:	7814      	ldrb	r4, [r2, #0]
 8003320:	f004 0403 	and.w	r4, r4, #3
 8003324:	f880 4767 	strb.w	r4, [r0, #1895]	; 0x767
	j1939->from_other_ecu_dm.dm2.SAE_flash_lamp_malfunction_indicator = data[1] >> 6;
 8003328:	7854      	ldrb	r4, [r2, #1]
 800332a:	09a4      	lsrs	r4, r4, #6
 800332c:	f880 4768 	strb.w	r4, [r0, #1896]	; 0x768
	j1939->from_other_ecu_dm.dm2.SAE_flash_lamp_red_stop = (data[1] >> 4) & 0b00000011;
 8003330:	7854      	ldrb	r4, [r2, #1]
 8003332:	f3c4 1401 	ubfx	r4, r4, #4, #2
 8003336:	f880 4769 	strb.w	r4, [r0, #1897]	; 0x769
	j1939->from_other_ecu_dm.dm2.SAE_flash_lamp_amber_warning = (data[1] >> 2) & 0b00000011;
 800333a:	7854      	ldrb	r4, [r2, #1]
 800333c:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8003340:	f880 476a 	strb.w	r4, [r0, #1898]	; 0x76a
	j1939->from_other_ecu_dm.dm2.SAE_flash_lamp_protect_lamp = data[1] & 0b00000011;
 8003344:	7854      	ldrb	r4, [r2, #1]
 8003346:	f004 0403 	and.w	r4, r4, #3
 800334a:	f880 476b 	strb.w	r4, [r0, #1899]	; 0x76b
	j1939->from_other_ecu_dm.dm2.SPN = ((data[4] & 0b11100000) << 11) | (data[3] << 8) | data[2];
 800334e:	7914      	ldrb	r4, [r2, #4]
 8003350:	8855      	ldrh	r5, [r2, #2]
 8003352:	02e4      	lsls	r4, r4, #11
 8003354:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
 8003358:	432c      	orrs	r4, r5
 800335a:	f8c0 476c 	str.w	r4, [r0, #1900]	; 0x76c
	j1939->from_other_ecu_dm.dm2.FMI = data[4] & 0b00011111;
 800335e:	7914      	ldrb	r4, [r2, #4]
 8003360:	f004 041f 	and.w	r4, r4, #31
 8003364:	f880 4770 	strb.w	r4, [r0, #1904]	; 0x770
	j1939->from_other_ecu_dm.dm2.SPN_conversion_method = data[5] >> 7;
 8003368:	7955      	ldrb	r5, [r2, #5]
 800336a:	09ed      	lsrs	r5, r5, #7
 800336c:	f880 5771 	strb.w	r5, [r0, #1905]	; 0x771
	j1939->from_other_ecu_dm.dm2.occurrence_count = data[5] & 0b01111111;
 8003370:	7952      	ldrb	r2, [r2, #5]
	j1939->from_other_ecu_dm.dm2.from_ecu_address = SA;
 8003372:	f880 1773 	strb.w	r1, [r0, #1907]	; 0x773

	/* Check if we have no fault cause */
	if(j1939->from_other_ecu_dm.dm2.FMI == FMI_NOT_AVAILABLE)
 8003376:	2c1f      	cmp	r4, #31
	j1939->from_other_ecu_dm.dm2.occurrence_count = data[5] & 0b01111111;
 8003378:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		j1939->from_other_ecu_dm.errors_dm2_active = 0;
 800337c:	bf08      	it	eq
 800337e:	2300      	moveq	r3, #0
	j1939->from_other_ecu_dm.dm2.occurrence_count = data[5] & 0b01111111;
 8003380:	f880 2772 	strb.w	r2, [r0, #1906]	; 0x772
	if(j1939->from_other_ecu_dm.dm2.FMI == FMI_NOT_AVAILABLE)
 8003384:	f880 3751 	strb.w	r3, [r0, #1873]	; 0x751
	else
		j1939->from_other_ecu_dm.errors_dm2_active = errors_dm2_active;
}
 8003388:	bd30      	pop	{r4, r5, pc}

0800338a <SAE_J1939_Response_Request_DM3>:

/*
 * Response the request of DM3 (clear DM2, which is previously active errors from DM1 codes) to other ECU about this ECU
 * PGN: 0x00FECC (65228)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_DM3(J1939* j1939, uint8_t DA) {
 800338a:	b538      	push	{r3, r4, r5, lr}
	memset(&j1939->this_dm.dm2, 0, sizeof(j1939->this_dm.dm2)); 			/* This set all fields of dm2 to 0 */
 800338c:	2210      	movs	r2, #16
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_DM3(J1939* j1939, uint8_t DA) {
 800338e:	4604      	mov	r4, r0
 8003390:	460d      	mov	r5, r1
	memset(&j1939->this_dm.dm2, 0, sizeof(j1939->this_dm.dm2)); 			/* This set all fields of dm2 to 0 */
 8003392:	f600 20f8 	addw	r0, r0, #2808	; 0xaf8
 8003396:	2100      	movs	r1, #0
 8003398:	f00f f852 	bl	8012440 <memset>
	j1939->this_dm.errors_dm2_active = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	f884 3ae5 	strb.w	r3, [r4, #2789]	; 0xae5
	j1939->this_dm.dm2.FMI = FMI_NOT_AVAILABLE;								/* Important, else we will at least have 1 error active */
 80033a2:	231f      	movs	r3, #31
 80033a4:	f884 3b04 	strb.w	r3, [r4, #2820]	; 0xb04

	/* Send DM2 codes to the ECU who send the request */
	return SAE_J1939_Response_Request_DM2(j1939, DA);
 80033a8:	4629      	mov	r1, r5
 80033aa:	4620      	mov	r0, r4
}
 80033ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return SAE_J1939_Response_Request_DM2(j1939, DA);
 80033b0:	f7ff bf2e 	b.w	8003210 <SAE_J1939_Response_Request_DM2>

080033b4 <SAE_J1939_Response_Request_Address_Claimed>:

/*
 * Response the request address claimed about this ECU to all ECU - Broadcast. This function must be called at the ECU start up according to J1939 standard
 * PGN: 0x00EE00 (60928)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_Address_Claimed(J1939 *j1939) {
 80033b4:	b513      	push	{r0, r1, r4, lr}
	uint32_t ID = (0x18EEFF << 8) | j1939->this_ECU_address;
	uint8_t data[8];
	data[0] = j1939->this_name.identity_number;
 80033b6:	f8b0 3ad0 	ldrh.w	r3, [r0, #2768]	; 0xad0
	data[1] = j1939->this_name.identity_number >> 8;
	data[2] = (j1939->this_name.identity_number >> 16) |  (j1939->this_name.manufacturer_code << 5);
 80033ba:	f8b0 2ad2 	ldrh.w	r2, [r0, #2770]	; 0xad2
	data[0] = j1939->this_name.identity_number;
 80033be:	f8ad 3000 	strh.w	r3, [sp]
	data[2] = (j1939->this_name.identity_number >> 16) |  (j1939->this_name.manufacturer_code << 5);
 80033c2:	f8b0 3ad4 	ldrh.w	r3, [r0, #2772]	; 0xad4
	uint32_t ID = (0x18EEFF << 8) | j1939->this_ECU_address;
 80033c6:	f890 4ae0 	ldrb.w	r4, [r0, #2784]	; 0xae0
	data[2] = (j1939->this_name.identity_number >> 16) |  (j1939->this_name.manufacturer_code << 5);
 80033ca:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	data[3] = j1939->this_name.manufacturer_code >> 3;
 80033ce:	08db      	lsrs	r3, r3, #3
	data[2] = (j1939->this_name.identity_number >> 16) |  (j1939->this_name.manufacturer_code << 5);
 80033d0:	f88d 2002 	strb.w	r2, [sp, #2]
	data[3] = j1939->this_name.manufacturer_code >> 3;
 80033d4:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = (j1939->this_name.function_instance << 3) | j1939->this_name.ECU_instance;
 80033d8:	f890 2ad6 	ldrb.w	r2, [r0, #2774]	; 0xad6
 80033dc:	f890 3ad7 	ldrb.w	r3, [r0, #2775]	; 0xad7
 80033e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80033e4:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = j1939->this_name.function;
 80033e8:	f890 3ad8 	ldrb.w	r3, [r0, #2776]	; 0xad8
 80033ec:	f88d 3005 	strb.w	r3, [sp, #5]
	data[6] = j1939->this_name.vehicle_system << 1;
 80033f0:	f890 3ad9 	ldrb.w	r3, [r0, #2777]	; 0xad9
	data[7] = (j1939->this_name.arbitrary_address_capable << 7) | (j1939->this_name.industry_group << 4) | j1939->this_name.vehicle_system_instance;
 80033f4:	f890 2ada 	ldrb.w	r2, [r0, #2778]	; 0xada
	data[6] = j1939->this_name.vehicle_system << 1;
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	f88d 3006 	strb.w	r3, [sp, #6]
	data[7] = (j1939->this_name.arbitrary_address_capable << 7) | (j1939->this_name.industry_group << 4) | j1939->this_name.vehicle_system_instance;
 80033fe:	f890 3adb 	ldrb.w	r3, [r0, #2779]	; 0xadb
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8003408:	f890 2adc 	ldrb.w	r2, [r0, #2780]	; 0xadc
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 800340c:	4805      	ldr	r0, [pc, #20]	; (8003424 <SAE_J1939_Response_Request_Address_Claimed+0x70>)
	data[7] = (j1939->this_name.arbitrary_address_capable << 7) | (j1939->this_name.industry_group << 4) | j1939->this_name.vehicle_system_instance;
 800340e:	4313      	orrs	r3, r2
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8003410:	4669      	mov	r1, sp
 8003412:	2200      	movs	r2, #0
 8003414:	4320      	orrs	r0, r4
	data[7] = (j1939->this_name.arbitrary_address_capable << 7) | (j1939->this_name.industry_group << 4) | j1939->this_name.vehicle_system_instance;
 8003416:	f88d 3007 	strb.w	r3, [sp, #7]
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 800341a:	f7fe ff2d 	bl	8002278 <CAN_Send_Message>
}
 800341e:	b002      	add	sp, #8
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	18eeff00 	.word	0x18eeff00

08003428 <SAE_J1939_Read_Response_Request_Address_Claimed>:

/*
 * Store the address claimed information about other ECU
 * PGN: 0x00EE00 (60928)
 */
void SAE_J1939_Read_Response_Request_Address_Claimed(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 8003428:	b430      	push	{r4, r5}
	/* Check if it's the same address */
	if(j1939->this_ECU_address == SA){
 800342a:	f890 4ae0 	ldrb.w	r4, [r0, #2784]	; 0xae0
 800342e:	428c      	cmp	r4, r1
void SAE_J1939_Read_Response_Request_Address_Claimed(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 8003430:	4603      	mov	r3, r0
	if(j1939->this_ECU_address == SA){
 8003432:	d102      	bne.n	800343a <SAE_J1939_Read_Response_Request_Address_Claimed+0x12>
	for (uint8_t i = 0; i < 255; i++)
		if (j1939->ECU_address[i] == SA)
			exist = true;
	if (!exist)
		j1939->ECU_address[j1939->number_of_ECU++] = SA;	/* For every new ECU address, count how many ECU */
}
 8003434:	bc30      	pop	{r4, r5}
		SAE_J1939_Send_Address_Not_Claimed(j1939);
 8003436:	f000 b87f 	b.w	8003538 <SAE_J1939_Send_Address_Not_Claimed>
	j1939->from_other_ecu_name.identity_number = ((data[2] & 0b00011111) << 16) | (data[1] << 8) | data[0];
 800343a:	7890      	ldrb	r0, [r2, #2]
 800343c:	8814      	ldrh	r4, [r2, #0]
 800343e:	0400      	lsls	r0, r0, #16
 8003440:	f400 10f8 	and.w	r0, r0, #2031616	; 0x1f0000
 8003444:	4320      	orrs	r0, r4
 8003446:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	j1939->from_other_ecu_name.manufacturer_code = (data[3] << 3) | (data[2] >> 5);
 800344a:	7890      	ldrb	r0, [r2, #2]
 800344c:	78d4      	ldrb	r4, [r2, #3]
 800344e:	0940      	lsrs	r0, r0, #5
 8003450:	ea40 00c4 	orr.w	r0, r0, r4, lsl #3
 8003454:	f8a3 0108 	strh.w	r0, [r3, #264]	; 0x108
	j1939->from_other_ecu_name.function_instance = data[4] >> 3;
 8003458:	7910      	ldrb	r0, [r2, #4]
 800345a:	08c0      	lsrs	r0, r0, #3
 800345c:	f883 010a 	strb.w	r0, [r3, #266]	; 0x10a
	j1939->from_other_ecu_name.ECU_instance = data[4] & 0b00000111;
 8003460:	7910      	ldrb	r0, [r2, #4]
 8003462:	f000 0007 	and.w	r0, r0, #7
 8003466:	f883 010b 	strb.w	r0, [r3, #267]	; 0x10b
	j1939->from_other_ecu_name.function = data[5];
 800346a:	7950      	ldrb	r0, [r2, #5]
 800346c:	f883 010c 	strb.w	r0, [r3, #268]	; 0x10c
	j1939->from_other_ecu_name.vehicle_system = data[6] >> 1;
 8003470:	7990      	ldrb	r0, [r2, #6]
 8003472:	0840      	lsrs	r0, r0, #1
 8003474:	f883 010d 	strb.w	r0, [r3, #269]	; 0x10d
	j1939->from_other_ecu_name.arbitrary_address_capable = data[7] >> 7;
 8003478:	79d0      	ldrb	r0, [r2, #7]
 800347a:	09c0      	lsrs	r0, r0, #7
 800347c:	f883 010e 	strb.w	r0, [r3, #270]	; 0x10e
	j1939->from_other_ecu_name.industry_group = (data[7] >> 4) & 0b0111;
 8003480:	79d0      	ldrb	r0, [r2, #7]
 8003482:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8003486:	f883 010f 	strb.w	r0, [r3, #271]	; 0x10f
	j1939->from_other_ecu_name.vehicle_system_instance = data[7] & 0b00001111;
 800348a:	79d2      	ldrb	r2, [r2, #7]
	j1939->from_other_ecu_name.from_ecu_address = SA;
 800348c:	f883 1111 	strb.w	r1, [r3, #273]	; 0x111
	j1939->from_other_ecu_name.vehicle_system_instance = data[7] & 0b00001111;
 8003490:	f002 020f 	and.w	r2, r2, #15
 8003494:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	for (uint8_t i = 0; i < 255; i++)
 8003498:	1c98      	adds	r0, r3, #2
 800349a:	f203 1401 	addw	r4, r3, #257	; 0x101
	bool exist = false;
 800349e:	2200      	movs	r2, #0
		if (j1939->ECU_address[i] == SA)
 80034a0:	f810 5b01 	ldrb.w	r5, [r0], #1
			exist = true;
 80034a4:	428d      	cmp	r5, r1
 80034a6:	bf08      	it	eq
 80034a8:	2201      	moveq	r2, #1
	for (uint8_t i = 0; i < 255; i++)
 80034aa:	42a0      	cmp	r0, r4
 80034ac:	d1f8      	bne.n	80034a0 <SAE_J1939_Read_Response_Request_Address_Claimed+0x78>
	if (!exist)
 80034ae:	b922      	cbnz	r2, 80034ba <SAE_J1939_Read_Response_Request_Address_Claimed+0x92>
		j1939->ECU_address[j1939->number_of_ECU++] = SA;	/* For every new ECU address, count how many ECU */
 80034b0:	7818      	ldrb	r0, [r3, #0]
 80034b2:	1c42      	adds	r2, r0, #1
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	4403      	add	r3, r0
 80034b8:	7099      	strb	r1, [r3, #2]
}
 80034ba:	bc30      	pop	{r4, r5}
 80034bc:	4770      	bx	lr

080034be <SAE_J1939_Send_Address_Delete>:

/*
 * This is not a SAE J1939 standard. It's only for deleting the j1939->ECU_address
 * PGN: 0x000002 (2)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Address_Delete(J1939 *j1939, uint8_t DA, uint8_t old_ECU_address) {
 80034be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034c0:	1c83      	adds	r3, r0, #2
 80034c2:	f200 1501 	addw	r5, r0, #257	; 0x101
	/* Delete (other) ECU address in this ECU */
	for(uint8_t i = 0; i < 255; i++){
		if(old_ECU_address == j1939->ECU_address[i]){
			j1939->ECU_address[i] = 0xFF;
 80034c6:	26ff      	movs	r6, #255	; 0xff
		if(old_ECU_address == j1939->ECU_address[i]){
 80034c8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80034cc:	4294      	cmp	r4, r2
			j1939->ECU_address[i] = 0xFF;
 80034ce:	bf01      	itttt	eq
 80034d0:	f803 6c01 	strbeq.w	r6, [r3, #-1]
			j1939->number_of_ECU--;
 80034d4:	7804      	ldrbeq	r4, [r0, #0]
 80034d6:	f104 34ff 	addeq.w	r4, r4, #4294967295
 80034da:	7004      	strbeq	r4, [r0, #0]
	for(uint8_t i = 0; i < 255; i++){
 80034dc:	42ab      	cmp	r3, r5
 80034de:	d1f3      	bne.n	80034c8 <SAE_J1939_Send_Address_Delete+0xa>
		}
	}

	/* Send delete command to other ECU */
	uint32_t ID = (0x0002 << 16) | (DA << 8) | j1939->this_ECU_address;
 80034e0:	f890 3ae0 	ldrb.w	r3, [r0, #2784]	; 0xae0
	uint8_t data[8];
	data[0] = old_ECU_address;
 80034e4:	f88d 2000 	strb.w	r2, [sp]
	uint32_t ID = (0x0002 << 16) | (DA << 8) | j1939->this_ECU_address;
 80034e8:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
	data[1] = data[2] = data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF; /*Reserved */
 80034ec:	23ff      	movs	r3, #255	; 0xff
 80034ee:	f88d 3001 	strb.w	r3, [sp, #1]
 80034f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034f6:	f8ad 3002 	strh.w	r3, [sp, #2]
	return CAN_Send_Message(ID, data, 0);
 80034fa:	2200      	movs	r2, #0
	data[1] = data[2] = data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF; /*Reserved */
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
	return CAN_Send_Message(ID, data, 0);
 8003500:	4669      	mov	r1, sp
 8003502:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
	data[1] = data[2] = data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF; /*Reserved */
 8003506:	9301      	str	r3, [sp, #4]
	return CAN_Send_Message(ID, data, 0);
 8003508:	f7fe feb6 	bl	8002278 <CAN_Send_Message>
}
 800350c:	b002      	add	sp, #8
 800350e:	bd70      	pop	{r4, r5, r6, pc}

08003510 <SAE_J1939_Read_Address_Delete>:

/*
 * This is not a SAE J1939 standard. It's only for deleting the j1939->ECU_address
 * PGN: 0x000002 (2)
 */
void SAE_J1939_Read_Address_Delete(J1939 *j1939, uint8_t data[]) {
 8003510:	b530      	push	{r4, r5, lr}
 8003512:	1c83      	adds	r3, r0, #2
	uint8_t old_ECU_address = data[0];
 8003514:	780c      	ldrb	r4, [r1, #0]
	for(uint8_t i = 0; i < 255; i++){
		if(old_ECU_address == j1939->ECU_address[i]){
			j1939->ECU_address[i] = 0xFF;
 8003516:	25ff      	movs	r5, #255	; 0xff
 8003518:	f200 1101 	addw	r1, r0, #257	; 0x101
		if(old_ECU_address == j1939->ECU_address[i]){
 800351c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003520:	42a2      	cmp	r2, r4
			j1939->ECU_address[i] = 0xFF;
 8003522:	bf01      	itttt	eq
 8003524:	f803 5c01 	strbeq.w	r5, [r3, #-1]
			j1939->number_of_ECU--;
 8003528:	7802      	ldrbeq	r2, [r0, #0]
 800352a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800352e:	7002      	strbeq	r2, [r0, #0]
	for(uint8_t i = 0; i < 255; i++){
 8003530:	428b      	cmp	r3, r1
 8003532:	d1f3      	bne.n	800351c <SAE_J1939_Read_Address_Delete+0xc>
		}
	}
}
 8003534:	bd30      	pop	{r4, r5, pc}
	...

08003538 <SAE_J1939_Send_Address_Not_Claimed>:

/*
 * Send Address Not Claimed if the address conflicts with each other
 * PGN: 0x00EE00 (60928)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Address_Not_Claimed(J1939 *j1939) {
 8003538:	b507      	push	{r0, r1, r2, lr}
	uint32_t ID = 0x18EEFFFE;
	uint8_t data[8];
	data[0] = j1939->this_name.identity_number;
 800353a:	f8b0 3ad0 	ldrh.w	r3, [r0, #2768]	; 0xad0
	data[1] = j1939->this_name.identity_number >> 8;
	data[2] = (j1939->this_name.identity_number >> 16) |  (j1939->this_name.manufacturer_code << 5);
 800353e:	f8b0 2ad2 	ldrh.w	r2, [r0, #2770]	; 0xad2
	data[0] = j1939->this_name.identity_number;
 8003542:	f8ad 3000 	strh.w	r3, [sp]
	data[2] = (j1939->this_name.identity_number >> 16) |  (j1939->this_name.manufacturer_code << 5);
 8003546:	f8b0 3ad4 	ldrh.w	r3, [r0, #2772]	; 0xad4
 800354a:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	data[3] = j1939->this_name.manufacturer_code >> 3;
 800354e:	08db      	lsrs	r3, r3, #3
	data[2] = (j1939->this_name.identity_number >> 16) |  (j1939->this_name.manufacturer_code << 5);
 8003550:	f88d 2002 	strb.w	r2, [sp, #2]
	data[3] = j1939->this_name.manufacturer_code >> 3;
 8003554:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = (j1939->this_name.function_instance << 3) | j1939->this_name.ECU_instance;
 8003558:	f890 2ad6 	ldrb.w	r2, [r0, #2774]	; 0xad6
 800355c:	f890 3ad7 	ldrb.w	r3, [r0, #2775]	; 0xad7
 8003560:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003564:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = j1939->this_name.function;
 8003568:	f890 3ad8 	ldrb.w	r3, [r0, #2776]	; 0xad8
 800356c:	f88d 3005 	strb.w	r3, [sp, #5]
	data[6] = j1939->this_name.vehicle_system << 1;
 8003570:	f890 3ad9 	ldrb.w	r3, [r0, #2777]	; 0xad9
	data[7] = (j1939->this_name.arbitrary_address_capable << 7) | (j1939->this_name.industry_group << 4) | j1939->this_name.vehicle_system_instance;
 8003574:	f890 2ada 	ldrb.w	r2, [r0, #2778]	; 0xada
	data[6] = j1939->this_name.vehicle_system << 1;
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	f88d 3006 	strb.w	r3, [sp, #6]
	data[7] = (j1939->this_name.arbitrary_address_capable << 7) | (j1939->this_name.industry_group << 4) | j1939->this_name.vehicle_system_instance;
 800357e:	f890 3adb 	ldrb.w	r3, [r0, #2779]	; 0xadb
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8003588:	f890 2adc 	ldrb.w	r2, [r0, #2780]	; 0xadc
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 800358c:	4805      	ldr	r0, [pc, #20]	; (80035a4 <SAE_J1939_Send_Address_Not_Claimed+0x6c>)
	data[7] = (j1939->this_name.arbitrary_address_capable << 7) | (j1939->this_name.industry_group << 4) | j1939->this_name.vehicle_system_instance;
 800358e:	4313      	orrs	r3, r2
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8003590:	4669      	mov	r1, sp
 8003592:	2200      	movs	r2, #0
	data[7] = (j1939->this_name.arbitrary_address_capable << 7) | (j1939->this_name.industry_group << 4) | j1939->this_name.vehicle_system_instance;
 8003594:	f88d 3007 	strb.w	r3, [sp, #7]
	return CAN_Send_Message(ID, data, 0);							/* 0 ms delay */
 8003598:	f7fe fe6e 	bl	8002278 <CAN_Send_Message>
}
 800359c:	b003      	add	sp, #12
 800359e:	f85d fb04 	ldr.w	pc, [sp], #4
 80035a2:	bf00      	nop
 80035a4:	18eefffe 	.word	0x18eefffe

080035a8 <SAE_J1939_Read_Address_Not_Claimed>:
/*
 * Store the address not claimed information about other ECU. In this case, SA will always be 0xFE = 254
 * PGN: 0x00EE00 (60928)
 */
void SAE_J1939_Read_Address_Not_Claimed(J1939 *j1939, uint8_t SA, uint8_t data[]) {
	j1939->from_other_ecu_name.identity_number = ((data[2] & 0b00011111) << 16) | (data[1] << 8) | data[0];
 80035a8:	7893      	ldrb	r3, [r2, #2]
void SAE_J1939_Read_Address_Not_Claimed(J1939 *j1939, uint8_t SA, uint8_t data[]) {
 80035aa:	b510      	push	{r4, lr}
	j1939->from_other_ecu_name.identity_number = ((data[2] & 0b00011111) << 16) | (data[1] << 8) | data[0];
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	8814      	ldrh	r4, [r2, #0]
 80035b0:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80035b4:	4323      	orrs	r3, r4
 80035b6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	j1939->from_other_ecu_name.manufacturer_code = (data[3] << 3) | (data[2] >> 5);
 80035ba:	7893      	ldrb	r3, [r2, #2]
 80035bc:	78d4      	ldrb	r4, [r2, #3]
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 80035c4:	f8a0 3108 	strh.w	r3, [r0, #264]	; 0x108
	j1939->from_other_ecu_name.function_instance = data[4] >> 3;
 80035c8:	7913      	ldrb	r3, [r2, #4]
 80035ca:	08db      	lsrs	r3, r3, #3
 80035cc:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
	j1939->from_other_ecu_name.ECU_instance = data[4] & 0b00000111;
 80035d0:	7913      	ldrb	r3, [r2, #4]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
	j1939->from_other_ecu_name.function = data[5];
 80035da:	7953      	ldrb	r3, [r2, #5]
 80035dc:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
	j1939->from_other_ecu_name.vehicle_system = data[6] >> 1;
 80035e0:	7993      	ldrb	r3, [r2, #6]
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	f880 310d 	strb.w	r3, [r0, #269]	; 0x10d
	j1939->from_other_ecu_name.arbitrary_address_capable = data[7] >> 7;
 80035e8:	79d3      	ldrb	r3, [r2, #7]
 80035ea:	09db      	lsrs	r3, r3, #7
 80035ec:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
	j1939->from_other_ecu_name.industry_group = (data[7] >> 4) & 0b0111;
 80035f0:	79d3      	ldrb	r3, [r2, #7]
 80035f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80035f6:	f880 310f 	strb.w	r3, [r0, #271]	; 0x10f
	j1939->from_other_ecu_name.vehicle_system_instance = data[7] & 0b00001111;
 80035fa:	79d3      	ldrb	r3, [r2, #7]
	j1939->from_other_ecu_name.from_ecu_address = SA;
 80035fc:	f880 1111 	strb.w	r1, [r0, #273]	; 0x111
	j1939->from_other_ecu_name.vehicle_system_instance = data[7] & 0b00001111;
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
	j1939->number_of_cannot_claim_address++;
 8003608:	7843      	ldrb	r3, [r0, #1]
 800360a:	3301      	adds	r3, #1
 800360c:	7043      	strb	r3, [r0, #1]
}
 800360e:	bd10      	pop	{r4, pc}

08003610 <SAE_J1939_Send_Commanded_Address>:

/*
 * Send commanded address to another ECU
 * PGN: 0x00FED8 (65240)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003612:	b087      	sub	sp, #28
 8003614:	4605      	mov	r5, r0
 8003616:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	/* Multiple messages - Use Transport Protocol Connection Management BAM */
	uint8_t number_of_packages = 2;
	uint8_t total_message_size = 9;
	uint8_t data[9];
	data[0] = identity_number;
 800361a:	f8ad 300c 	strh.w	r3, [sp, #12]
	data[1] = identity_number >> 8;
	data[2] = (identity_number >> 16) |  (manufacturer_code << 5);
 800361e:	0167      	lsls	r7, r4, #5
 8003620:	ea47 4313 	orr.w	r3, r7, r3, lsr #16
	data[3] = manufacturer_code >> 3;
 8003624:	08e4      	lsrs	r4, r4, #3
	data[2] = (identity_number >> 16) |  (manufacturer_code << 5);
 8003626:	f88d 300e 	strb.w	r3, [sp, #14]
	data[3] = manufacturer_code >> 3;
 800362a:	f88d 400f 	strb.w	r4, [sp, #15]
	data[4] = (function_instance << 3) | ECU_instance;
 800362e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003632:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	data[5] = function;
	data[6] = vehicle_system << 1;
	data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
	data[8] = new_ECU_address;								/* New address of the ECU we are sending to*/
 8003636:	f88d 2014 	strb.w	r2, [sp, #20]
	data[4] = (function_instance << 3) | ECU_instance;
 800363a:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 800363e:	f88d 3010 	strb.w	r3, [sp, #16]
	data[5] = function;
 8003642:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8003646:	f88d 3011 	strb.w	r3, [sp, #17]
	data[6] = vehicle_system << 1;
 800364a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 800364e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	data[6] = vehicle_system << 1;
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	f88d 3012 	strb.w	r3, [sp, #18]
	data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 8003658:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800365c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003660:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 8003664:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 8003668:	f88d 3013 	strb.w	r3, [sp, #19]
	ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_COMMANDED_ADDRESS);
 800366c:	2702      	movs	r7, #2
 800366e:	f64f 63d8 	movw	r3, #65240	; 0xfed8
 8003672:	e9cd 7300 	strd	r7, r3, [sp]
 8003676:	2220      	movs	r2, #32
 8003678:	2309      	movs	r3, #9
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 800367a:	460e      	mov	r6, r1
	ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA, CONTROL_BYTE_TP_CM_BAM, total_message_size, number_of_packages, PGN_COMMANDED_ADDRESS);
 800367c:	f7ff f938 	bl	80028f0 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
	if(status != STATUS_SEND_OK)
 8003680:	4604      	mov	r4, r0
 8003682:	b998      	cbnz	r0, 80036ac <SAE_J1939_Send_Commanded_Address+0x9c>
		return status;
	status = SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA, data, total_message_size, number_of_packages);
 8003684:	9700      	str	r7, [sp, #0]
 8003686:	2309      	movs	r3, #9
 8003688:	aa03      	add	r2, sp, #12
 800368a:	4631      	mov	r1, r6
 800368c:	4628      	mov	r0, r5
 800368e:	f7ff fa1b 	bl	8002ac8 <SAE_J1939_Send_Transport_Protocol_Data_Transfer>
	if(status == STATUS_SEND_OK) {
 8003692:	4604      	mov	r4, r0
 8003694:	b950      	cbnz	r0, 80036ac <SAE_J1939_Send_Commanded_Address+0x9c>
		/* Send to all ECU that the address DA unused */
		SAE_J1939_Send_Address_Delete(j1939, 0xFF, DA);
 8003696:	4632      	mov	r2, r6
 8003698:	21ff      	movs	r1, #255	; 0xff
 800369a:	4628      	mov	r0, r5
 800369c:	f7ff ff0f 	bl	80034be <SAE_J1939_Send_Address_Delete>
		/* According to J1939 standard, request for Address Claimed (broadcast) must be sent after a Commanded Address so we can get back the new ECU address */
		SAE_J1939_Send_Request(j1939, 0xFF, PGN_ADDRESS_CLAIMED);
 80036a0:	f44f 426e 	mov.w	r2, #60928	; 0xee00
 80036a4:	21ff      	movs	r1, #255	; 0xff
 80036a6:	4628      	mov	r0, r5
 80036a8:	f7ff f90d 	bl	80028c6 <SAE_J1939_Send_Request>
	}
	return status;
}
 80036ac:	4620      	mov	r0, r4
 80036ae:	b007      	add	sp, #28
 80036b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036b2 <SAE_J1939_Read_Commanded_Address>:
/*
 * Read the commanded address from another ECU. Will always be called from Transport Protocol Data Transfer due to 9 bytes of data
 * PGN: 0x00FED8 (65240)
 */
void SAE_J1939_Read_Commanded_Address(J1939 *j1939, uint8_t data[]) {
	j1939->this_name.identity_number = ((data[2] & 0b00011111) << 16) | (data[1] << 8) | data[0];
 80036b2:	788b      	ldrb	r3, [r1, #2]
 80036b4:	880a      	ldrh	r2, [r1, #0]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c0 3ad0 	str.w	r3, [r0, #2768]	; 0xad0
	j1939->this_name.manufacturer_code = (data[3] << 3) | (data[2] >> 5);
 80036c2:	788b      	ldrb	r3, [r1, #2]
 80036c4:	78ca      	ldrb	r2, [r1, #3]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80036cc:	f8a0 3ad4 	strh.w	r3, [r0, #2772]	; 0xad4
	j1939->this_name.function_instance = data[4] >> 3;
 80036d0:	790b      	ldrb	r3, [r1, #4]
 80036d2:	08db      	lsrs	r3, r3, #3
 80036d4:	f880 3ad6 	strb.w	r3, [r0, #2774]	; 0xad6
	j1939->this_name.ECU_instance = data[4] & 0b00000111;
 80036d8:	790b      	ldrb	r3, [r1, #4]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	f880 3ad7 	strb.w	r3, [r0, #2775]	; 0xad7
	j1939->this_name.function = data[5];
 80036e2:	794b      	ldrb	r3, [r1, #5]
 80036e4:	f880 3ad8 	strb.w	r3, [r0, #2776]	; 0xad8
	j1939->this_name.vehicle_system = data[6] >> 1;
 80036e8:	798b      	ldrb	r3, [r1, #6]
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	f880 3ad9 	strb.w	r3, [r0, #2777]	; 0xad9
	j1939->this_name.arbitrary_address_capable = data[7] >> 7;
 80036f0:	79cb      	ldrb	r3, [r1, #7]
 80036f2:	09db      	lsrs	r3, r3, #7
 80036f4:	f880 3ada 	strb.w	r3, [r0, #2778]	; 0xada
	j1939->this_name.industry_group = (data[7] >> 4) & 0b0111;
 80036f8:	79cb      	ldrb	r3, [r1, #7]
 80036fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80036fe:	f880 3adb 	strb.w	r3, [r0, #2779]	; 0xadb
	j1939->this_name.vehicle_system_instance = data[7] & 0b00001111;
 8003702:	79cb      	ldrb	r3, [r1, #7]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	f880 3adc 	strb.w	r3, [r0, #2780]	; 0xadc
	j1939->this_ECU_address = data[8]; 						/* New address of this ECU */
 800370c:	7a0b      	ldrb	r3, [r1, #8]
 800370e:	f880 3ae0 	strb.w	r3, [r0, #2784]	; 0xae0
}
 8003712:	4770      	bx	lr

08003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Information_OK_Dialog(char information[]) {
 8003714:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	ILI9341_set_rotation(2);

	/* Big blue frame */
	ILI9341_fill_rect(40, 80, 290, 160, COLOR_BLUE);
 8003718:	261f      	movs	r6, #31
uint8_t STM32_PLC_LCD_Show_Information_OK_Dialog(char information[]) {
 800371a:	4605      	mov	r5, r0
	ILI9341_set_rotation(2);
 800371c:	2002      	movs	r0, #2
	ILI9341_hollow_rect(40, 80, 290, 160, COLOR_BLACK);
 800371e:	2400      	movs	r4, #0
	ILI9341_set_rotation(2);
 8003720:	f004 fe8e 	bl	8008440 <ILI9341_set_rotation>
	ILI9341_fill_rect(40, 80, 290, 160, COLOR_BLUE);
 8003724:	9600      	str	r6, [sp, #0]
 8003726:	23a0      	movs	r3, #160	; 0xa0
 8003728:	f44f 7291 	mov.w	r2, #290	; 0x122
 800372c:	2150      	movs	r1, #80	; 0x50
 800372e:	2028      	movs	r0, #40	; 0x28
 8003730:	f004 fc9e 	bl	8008070 <ILI9341_fill_rect>

	/* White big frame */
	ILI9341_fill_rect(42, 82, 288, 158, COLOR_WHITE);
 8003734:	f64f 78ff 	movw	r8, #65535	; 0xffff
	ILI9341_hollow_rect(40, 80, 290, 160, COLOR_BLACK);
 8003738:	9400      	str	r4, [sp, #0]
 800373a:	23a0      	movs	r3, #160	; 0xa0
 800373c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8003740:	2150      	movs	r1, #80	; 0x50
 8003742:	2028      	movs	r0, #40	; 0x28
 8003744:	f004 fd16 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_fill_rect(42, 82, 288, 158, COLOR_WHITE);
 8003748:	f8cd 8000 	str.w	r8, [sp]
 800374c:	239e      	movs	r3, #158	; 0x9e
 800374e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8003752:	2152      	movs	r1, #82	; 0x52
 8003754:	202a      	movs	r0, #42	; 0x2a
 8003756:	f004 fc8b 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(42, 82, 288, 158, COLOR_BLACK);
 800375a:	9400      	str	r4, [sp, #0]
 800375c:	239e      	movs	r3, #158	; 0x9e
 800375e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8003762:	2152      	movs	r1, #82	; 0x52
 8003764:	202a      	movs	r0, #42	; 0x2a
 8003766:	f004 fd05 	bl	8008174 <ILI9341_hollow_rect>

	/* Small question background frame */
	ILI9341_fill_rect(45, 85, 285, 106, COLOR_BLUE);
 800376a:	9600      	str	r6, [sp, #0]
 800376c:	236a      	movs	r3, #106	; 0x6a
 800376e:	f240 121d 	movw	r2, #285	; 0x11d
 8003772:	2155      	movs	r1, #85	; 0x55
 8003774:	202d      	movs	r0, #45	; 0x2d
 8003776:	f004 fc7b 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(45, 85, 285, 106, COLOR_BLACK);

	/* Text */
	ILI9341_print_text("Information", 105, 88, COLOR_BLACK, COLOR_BLUE, 2);
 800377a:	2702      	movs	r7, #2
	ILI9341_hollow_rect(45, 85, 285, 106, COLOR_BLACK);
 800377c:	9400      	str	r4, [sp, #0]
 800377e:	236a      	movs	r3, #106	; 0x6a
 8003780:	f240 121d 	movw	r2, #285	; 0x11d
 8003784:	2155      	movs	r1, #85	; 0x55
 8003786:	202d      	movs	r0, #45	; 0x2d
 8003788:	f004 fcf4 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Information", 105, 88, COLOR_BLACK, COLOR_BLUE, 2);
 800378c:	4623      	mov	r3, r4
 800378e:	e9cd 6700 	strd	r6, r7, [sp]
 8003792:	4817      	ldr	r0, [pc, #92]	; (80037f0 <STM32_PLC_LCD_Show_Information_OK_Dialog+0xdc>)
 8003794:	2258      	movs	r2, #88	; 0x58
 8003796:	2169      	movs	r1, #105	; 0x69
 8003798:	f004 fd86 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text(information, 50, 110, COLOR_BLACK, COLOR_WHITE, 1);
 800379c:	2301      	movs	r3, #1
 800379e:	e9cd 8300 	strd	r8, r3, [sp]
 80037a2:	4628      	mov	r0, r5
 80037a4:	4623      	mov	r3, r4

	/* OK button */
	ILI9341_fill_rect(145, 129, 180, 150, COLOR_LGRAY);
 80037a6:	f24c 6518 	movw	r5, #50712	; 0xc618
	ILI9341_print_text(information, 50, 110, COLOR_BLACK, COLOR_WHITE, 1);
 80037aa:	226e      	movs	r2, #110	; 0x6e
 80037ac:	2132      	movs	r1, #50	; 0x32
 80037ae:	f004 fd7b 	bl	80082a8 <ILI9341_print_text>
	ILI9341_fill_rect(145, 129, 180, 150, COLOR_LGRAY);
 80037b2:	9500      	str	r5, [sp, #0]
 80037b4:	2396      	movs	r3, #150	; 0x96
 80037b6:	22b4      	movs	r2, #180	; 0xb4
 80037b8:	2181      	movs	r1, #129	; 0x81
 80037ba:	2091      	movs	r0, #145	; 0x91
 80037bc:	f004 fc58 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(145, 129, 180, 150, COLOR_BLACK);
 80037c0:	9400      	str	r4, [sp, #0]
 80037c2:	2396      	movs	r3, #150	; 0x96
 80037c4:	22b4      	movs	r2, #180	; 0xb4
 80037c6:	2181      	movs	r1, #129	; 0x81
 80037c8:	2091      	movs	r0, #145	; 0x91
 80037ca:	f004 fcd3 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("OK", 152, 132, COLOR_BLACK, COLOR_LGRAY, 2);
 80037ce:	4623      	mov	r3, r4
 80037d0:	e9cd 5700 	strd	r5, r7, [sp]
 80037d4:	4807      	ldr	r0, [pc, #28]	; (80037f4 <STM32_PLC_LCD_Show_Information_OK_Dialog+0xe0>)
 80037d6:	2284      	movs	r2, #132	; 0x84
 80037d8:	2198      	movs	r1, #152	; 0x98
 80037da:	f004 fd65 	bl	80082a8 <ILI9341_print_text>

	/* Logic */
	return STM32_PLC_LCD_Call_One_Button_Logic(145, 129, 180, 150);
 80037de:	2396      	movs	r3, #150	; 0x96
 80037e0:	22b4      	movs	r2, #180	; 0xb4
 80037e2:	2181      	movs	r1, #129	; 0x81
 80037e4:	2091      	movs	r0, #145	; 0x91
}
 80037e6:	b002      	add	sp, #8
 80037e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return STM32_PLC_LCD_Call_One_Button_Logic(145, 129, 180, 150);
 80037ec:	f005 bbfe 	b.w	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
 80037f0:	08016e37 	.word	0x08016e37
 80037f4:	08016e43 	.word	0x08016e43

080037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Question_Yes_No_Dialog(char question[]) {
 80037f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	ILI9341_set_rotation(2);

	/* Big blue frame */
	ILI9341_fill_rect(40, 80, 290, 160, COLOR_BLUE);
 80037fc:	271f      	movs	r7, #31
uint8_t STM32_PLC_LCD_Show_Question_Yes_No_Dialog(char question[]) {
 80037fe:	4605      	mov	r5, r0
	ILI9341_set_rotation(2);
 8003800:	2002      	movs	r0, #2
	ILI9341_hollow_rect(40, 80, 290, 160, COLOR_BLACK);
 8003802:	2400      	movs	r4, #0
	ILI9341_set_rotation(2);
 8003804:	f004 fe1c 	bl	8008440 <ILI9341_set_rotation>
	ILI9341_fill_rect(40, 80, 290, 160, COLOR_BLUE);
 8003808:	9700      	str	r7, [sp, #0]
 800380a:	23a0      	movs	r3, #160	; 0xa0
 800380c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8003810:	2150      	movs	r1, #80	; 0x50
 8003812:	2028      	movs	r0, #40	; 0x28
 8003814:	f004 fc2c 	bl	8008070 <ILI9341_fill_rect>

	/* White big frame */
	ILI9341_fill_rect(42, 82, 288, 158, COLOR_WHITE);
 8003818:	f64f 78ff 	movw	r8, #65535	; 0xffff
	ILI9341_hollow_rect(40, 80, 290, 160, COLOR_BLACK);
 800381c:	9400      	str	r4, [sp, #0]
 800381e:	23a0      	movs	r3, #160	; 0xa0
 8003820:	f44f 7291 	mov.w	r2, #290	; 0x122
 8003824:	2150      	movs	r1, #80	; 0x50
 8003826:	2028      	movs	r0, #40	; 0x28
 8003828:	f004 fca4 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_fill_rect(42, 82, 288, 158, COLOR_WHITE);
 800382c:	f8cd 8000 	str.w	r8, [sp]
 8003830:	239e      	movs	r3, #158	; 0x9e
 8003832:	f44f 7290 	mov.w	r2, #288	; 0x120
 8003836:	2152      	movs	r1, #82	; 0x52
 8003838:	202a      	movs	r0, #42	; 0x2a
 800383a:	f004 fc19 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(42, 82, 288, 158, COLOR_BLACK);
 800383e:	9400      	str	r4, [sp, #0]
 8003840:	239e      	movs	r3, #158	; 0x9e
 8003842:	f44f 7290 	mov.w	r2, #288	; 0x120
 8003846:	2152      	movs	r1, #82	; 0x52
 8003848:	202a      	movs	r0, #42	; 0x2a
 800384a:	f004 fc93 	bl	8008174 <ILI9341_hollow_rect>

	/* Small question background frame */
	ILI9341_fill_rect(45, 85, 285, 106, COLOR_BLUE);
 800384e:	9700      	str	r7, [sp, #0]
 8003850:	236a      	movs	r3, #106	; 0x6a
 8003852:	f240 121d 	movw	r2, #285	; 0x11d
 8003856:	2155      	movs	r1, #85	; 0x55
 8003858:	202d      	movs	r0, #45	; 0x2d
 800385a:	f004 fc09 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(45, 85, 285, 106, COLOR_BLACK);

	/* Text */
	ILI9341_print_text("Question", 115, 88, COLOR_BLACK, COLOR_BLUE, 2);
 800385e:	2602      	movs	r6, #2
	ILI9341_hollow_rect(45, 85, 285, 106, COLOR_BLACK);
 8003860:	9400      	str	r4, [sp, #0]
 8003862:	236a      	movs	r3, #106	; 0x6a
 8003864:	f240 121d 	movw	r2, #285	; 0x11d
 8003868:	2155      	movs	r1, #85	; 0x55
 800386a:	202d      	movs	r0, #45	; 0x2d
 800386c:	f004 fc82 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Question", 115, 88, COLOR_BLACK, COLOR_BLUE, 2);
 8003870:	4623      	mov	r3, r4
 8003872:	e9cd 7600 	strd	r7, r6, [sp]
 8003876:	4825      	ldr	r0, [pc, #148]	; (800390c <STM32_PLC_LCD_Show_Question_Yes_No_Dialog+0x114>)
 8003878:	2258      	movs	r2, #88	; 0x58
 800387a:	2173      	movs	r1, #115	; 0x73
 800387c:	f004 fd14 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text(question, 50, 110, COLOR_BLACK, COLOR_WHITE, 1);
 8003880:	2301      	movs	r3, #1
 8003882:	e9cd 8300 	strd	r8, r3, [sp]
 8003886:	4628      	mov	r0, r5
 8003888:	4623      	mov	r3, r4

	/* Yes button */
	ILI9341_fill_rect(120, 129, 160, 150, COLOR_LGRAY);
 800388a:	f24c 6518 	movw	r5, #50712	; 0xc618
	ILI9341_print_text(question, 50, 110, COLOR_BLACK, COLOR_WHITE, 1);
 800388e:	226e      	movs	r2, #110	; 0x6e
 8003890:	2132      	movs	r1, #50	; 0x32
 8003892:	f004 fd09 	bl	80082a8 <ILI9341_print_text>
	ILI9341_fill_rect(120, 129, 160, 150, COLOR_LGRAY);
 8003896:	9500      	str	r5, [sp, #0]
 8003898:	2396      	movs	r3, #150	; 0x96
 800389a:	22a0      	movs	r2, #160	; 0xa0
 800389c:	2181      	movs	r1, #129	; 0x81
 800389e:	2078      	movs	r0, #120	; 0x78
 80038a0:	f004 fbe6 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(120, 129, 160, 150, COLOR_BLACK);
 80038a4:	9400      	str	r4, [sp, #0]
 80038a6:	2396      	movs	r3, #150	; 0x96
 80038a8:	22a0      	movs	r2, #160	; 0xa0
 80038aa:	2181      	movs	r1, #129	; 0x81
 80038ac:	2078      	movs	r0, #120	; 0x78
 80038ae:	f004 fc61 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Yes", 122, 132, COLOR_BLACK, COLOR_LGRAY, 2);
 80038b2:	4623      	mov	r3, r4
 80038b4:	e9cd 5600 	strd	r5, r6, [sp]
 80038b8:	4815      	ldr	r0, [pc, #84]	; (8003910 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog+0x118>)
 80038ba:	2284      	movs	r2, #132	; 0x84
 80038bc:	217a      	movs	r1, #122	; 0x7a
 80038be:	f004 fcf3 	bl	80082a8 <ILI9341_print_text>

	/* No button */
	ILI9341_fill_rect(168, 129, 208, 150, COLOR_LGRAY);
 80038c2:	9500      	str	r5, [sp, #0]
 80038c4:	2396      	movs	r3, #150	; 0x96
 80038c6:	22d0      	movs	r2, #208	; 0xd0
 80038c8:	2181      	movs	r1, #129	; 0x81
 80038ca:	20a8      	movs	r0, #168	; 0xa8
 80038cc:	f004 fbd0 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(168, 129, 208, 150, COLOR_BLACK);
 80038d0:	9400      	str	r4, [sp, #0]
 80038d2:	2396      	movs	r3, #150	; 0x96
 80038d4:	22d0      	movs	r2, #208	; 0xd0
 80038d6:	2181      	movs	r1, #129	; 0x81
 80038d8:	20a8      	movs	r0, #168	; 0xa8
 80038da:	f004 fc4b 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("No", 176, 132, COLOR_BLACK, COLOR_LGRAY, 2);
 80038de:	4623      	mov	r3, r4
 80038e0:	e9cd 5600 	strd	r5, r6, [sp]
 80038e4:	480b      	ldr	r0, [pc, #44]	; (8003914 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog+0x11c>)
 80038e6:	2284      	movs	r2, #132	; 0x84
 80038e8:	21b0      	movs	r1, #176	; 0xb0
 80038ea:	f004 fcdd 	bl	80082a8 <ILI9341_print_text>
	uint8_t b1_y2 = 150;
	uint8_t b2_x1 = 168;
	uint8_t b2_y1 = 129;
	uint8_t b2_x2 = 208;
	uint8_t b2_y2 = 150;
	return STM32_PLC_LCD_Call_Two_Button_Logic(b1_x1, b1_y1, b1_x2, b1_y2, b2_x1, b2_y1, b2_x2, b2_y2);
 80038ee:	2396      	movs	r3, #150	; 0x96
 80038f0:	22d0      	movs	r2, #208	; 0xd0
 80038f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038f6:	2181      	movs	r1, #129	; 0x81
 80038f8:	22a8      	movs	r2, #168	; 0xa8
 80038fa:	e9cd 2100 	strd	r2, r1, [sp]
 80038fe:	2078      	movs	r0, #120	; 0x78
 8003900:	22a0      	movs	r2, #160	; 0xa0
 8003902:	f005 fb9d 	bl	8009040 <STM32_PLC_LCD_Call_Two_Button_Logic>
}
 8003906:	b004      	add	sp, #16
 8003908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800390c:	08016e46 	.word	0x08016e46
 8003910:	080171a7 	.word	0x080171a7
 8003914:	08018263 	.word	0x08018263

08003918 <STM32_PLC_LCD_Show_Analog_Calibration_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Analog_Calibration_Frame(uint8_t *frame_id) {
 8003918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391c:	ed2d 8b04 	vpush	{d8-d9}
 8003920:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003924:	240f      	movs	r4, #15
 8003926:	9400      	str	r4, [sp, #0]
 8003928:	23ea      	movs	r3, #234	; 0xea
 800392a:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800392e:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Analog_Calibration_Frame(uint8_t *frame_id) {
 8003930:	4681      	mov	r9, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003932:	2033      	movs	r0, #51	; 0x33
 8003934:	f004 fb9c 	bl	8008070 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set analog calibration for input 0 to 16", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003938:	2501      	movs	r5, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 800393a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800393e:	f240 1209 	movw	r2, #265	; 0x109
 8003942:	211e      	movs	r1, #30
 8003944:	2032      	movs	r0, #50	; 0x32
 8003946:	f004 fbcf 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set analog calibration for input 0 to 16", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800394a:	e9cd 4500 	strd	r4, r5, [sp]
 800394e:	48cb      	ldr	r0, [pc, #812]	; (8003c7c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x364>)
 8003950:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003954:	220a      	movs	r2, #10
 8003956:	2137      	movs	r1, #55	; 0x37
 8003958:	f004 fca6 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Values order:Min Max Bias", 55, 20, COLOR_YELLOW, COLOR_NAVY, 1);
 800395c:	e9cd 4500 	strd	r4, r5, [sp]
 8003960:	48c7      	ldr	r0, [pc, #796]	; (8003c80 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x368>)
 8003962:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003966:	2214      	movs	r2, #20
 8003968:	2137      	movs	r1, #55	; 0x37
 800396a:	f004 fc9d 	bl	80082a8 <ILI9341_print_text>

	/* Read */
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 800396e:	f7fe fb35 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8003972:	4604      	mov	r4, r0
 8003974:	b160      	cbz	r0, 8003990 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x78>
		STM32_PLC_LCD_Show_Information_OK_Dialog("Could not mount SD card");
 8003976:	48c3      	ldr	r0, [pc, #780]	; (8003c84 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x36c>)
 8003978:	f7ff fecc 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
	}

	/* Exit */
	STM32_PLC_SD_Close_File();
	STM32_PLC_SD_Unmount_Card();
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800397c:	2100      	movs	r1, #0
 800397e:	4648      	mov	r0, r9
 8003980:	f001 fc86 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>

}
 8003984:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 8003988:	ecbd 8b04 	vpop	{d8-d9}
 800398c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32_PLC_SD_Open_Existing_File_With_Read("ANALOG.TXT");
 8003990:	48bd      	ldr	r0, [pc, #756]	; (8003c88 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x370>)
 8003992:	f7fe fb3d 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	sprintf(delimiters, "%s,", DELIMITER); /* Multiple delimiter */
 8003996:	ae0b      	add	r6, sp, #44	; 0x2c
	STM32_PLC_SD_Read_File(text, sizeof(text));
 8003998:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800399c:	a84d      	add	r0, sp, #308	; 0x134
 800399e:	f7fe fb7b 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 80039a2:	f7fe fb45 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 80039a6:	f7fe fb09 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	sprintf(delimiters, "%s,", DELIMITER); /* Multiple delimiter */
 80039aa:	4ab8      	ldr	r2, [pc, #736]	; (8003c8c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x374>)
 80039ac:	49b8      	ldr	r1, [pc, #736]	; (8003c90 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x378>)
 80039ae:	4630      	mov	r0, r6
 80039b0:	f00f f9b8 	bl	8012d24 <siprintf>
	for(uint8_t i = 0; i < 17; i++) {
 80039b4:	f10d 0868 	add.w	r8, sp, #104	; 0x68
	sprintf(delimiters, "%s,", DELIMITER); /* Multiple delimiter */
 80039b8:	4647      	mov	r7, r8
 80039ba:	4625      	mov	r5, r4
	uint16_t y = 25;
 80039bc:	f04f 0b19 	mov.w	fp, #25
		if(i == 0){
 80039c0:	f10b 0a0a 	add.w	sl, fp, #10
 80039c4:	fa1f fb8a 	uxth.w	fp, sl
 80039c8:	b2eb      	uxtb	r3, r5
 80039ca:	fa0f fa8a 	sxth.w	sl, sl
 80039ce:	2d00      	cmp	r5, #0
 80039d0:	f040 810e 	bne.w	8003bf0 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x2d8>
			min_max_bias[0 + 3*i] = atoff(strtok(text, delimiters));
 80039d4:	4631      	mov	r1, r6
 80039d6:	a84d      	add	r0, sp, #308	; 0x134
 80039d8:	f010 f84e 	bl	8013a78 <strtok>
 80039dc:	f00e fcf0 	bl	80123c0 <atoff>
			min_max_bias[1 + 3*i] = atoff(strtok(NULL, delimiters));
 80039e0:	4631      	mov	r1, r6
 80039e2:	4628      	mov	r0, r5
			min_max_bias[0 + 3*i] = atoff(strtok(text, delimiters));
 80039e4:	ed8d 0a1a 	vstr	s0, [sp, #104]	; 0x68
			min_max_bias[1 + 3*i] = atoff(strtok(NULL, delimiters));
 80039e8:	f010 f846 	bl	8013a78 <strtok>
 80039ec:	f00e fce8 	bl	80123c0 <atoff>
			min_max_bias[2 + 3*i] = atoff(strtok(NULL, delimiters));
 80039f0:	4631      	mov	r1, r6
 80039f2:	4628      	mov	r0, r5
			min_max_bias[1 + 3*i] = atoff(strtok(NULL, delimiters));
 80039f4:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
			min_max_bias[2 + 3*i] = atoff(strtok(NULL, delimiters));
 80039f8:	f010 f83e 	bl	8013a78 <strtok>
 80039fc:	f00e fce0 	bl	80123c0 <atoff>
 8003a00:	ed8d 0a1c 	vstr	s0, [sp, #112]	; 0x70
			sprintf(line_text, "%i=ADC%i:%0.2f %0.2f %0.2f", i, i, min_max_bias[0 + i*3], min_max_bias[1 + i*3], min_max_bias[2 + i*3]);
 8003a04:	68b8      	ldr	r0, [r7, #8]
 8003a06:	f7fc fd9f 	bl	8000548 <__aeabi_f2d>
 8003a0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fc fd9a 	bl	8000548 <__aeabi_f2d>
 8003a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	f7fc fd95 	bl	8000548 <__aeabi_f2d>
 8003a1e:	e9cd 0100 	strd	r0, r1, [sp]
 8003a22:	499c      	ldr	r1, [pc, #624]	; (8003c94 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x37c>)
 8003a24:	462b      	mov	r3, r5
 8003a26:	462a      	mov	r2, r5
			sprintf(line_text, "%i=DADC%i:%0.2f %0.2f %0.2f", i, i-12, min_max_bias[0 + i*3], min_max_bias[1 + i*3], min_max_bias[2 + i*3]);
 8003a28:	a80d      	add	r0, sp, #52	; 0x34
 8003a2a:	f00f f97b 	bl	8012d24 <siprintf>
			ILI9341_print_text(line_text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003a2e:	230f      	movs	r3, #15
 8003a30:	2201      	movs	r2, #1
 8003a32:	e9cd 3200 	strd	r3, r2, [sp]
 8003a36:	2137      	movs	r1, #55	; 0x37
 8003a38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	a80d      	add	r0, sp, #52	; 0x34
 8003a40:	f004 fc32 	bl	80082a8 <ILI9341_print_text>
	for(uint8_t i = 0; i < 17; i++) {
 8003a44:	f1bb 0fc3 	cmp.w	fp, #195	; 0xc3
 8003a48:	f105 0501 	add.w	r5, r5, #1
 8003a4c:	f107 070c 	add.w	r7, r7, #12
 8003a50:	d1b6      	bne.n	80039c0 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0xa8>
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8003a52:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
 8003a56:	23e6      	movs	r3, #230	; 0xe6
 8003a58:	f240 1211 	movw	r2, #273	; 0x111
 8003a5c:	21cd      	movs	r1, #205	; 0xcd
 8003a5e:	2055      	movs	r0, #85	; 0x55
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8003a60:	2600      	movs	r6, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8003a62:	9500      	str	r5, [sp, #0]
 8003a64:	f004 fb04 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8003a68:	23e6      	movs	r3, #230	; 0xe6
 8003a6a:	f240 1211 	movw	r2, #273	; 0x111
 8003a6e:	21cd      	movs	r1, #205	; 0xcd
 8003a70:	2055      	movs	r0, #85	; 0x55
 8003a72:	9600      	str	r6, [sp, #0]
 8003a74:	f004 fb7e 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Select setting", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e9cd 5300 	strd	r5, r3, [sp]
 8003a7e:	4886      	ldr	r0, [pc, #536]	; (8003c98 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x380>)
 8003a80:	4633      	mov	r3, r6
 8003a82:	22d2      	movs	r2, #210	; 0xd2
 8003a84:	215f      	movs	r1, #95	; 0x5f
 8003a86:	f004 fc0f 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 8003a8a:	23e6      	movs	r3, #230	; 0xe6
 8003a8c:	f240 1211 	movw	r2, #273	; 0x111
 8003a90:	21cd      	movs	r1, #205	; 0xcd
 8003a92:	2055      	movs	r0, #85	; 0x55
 8003a94:	f005 faaa 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to change settings?") == 0) {
 8003a98:	4880      	ldr	r0, [pc, #512]	; (8003c9c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x384>)
 8003a9a:	f7ff fead 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	f43f af6c 	beq.w	800397c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x64>
	float number_value = 0;
 8003aa4:	2500      	movs	r5, #0
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 0 and 16") == 0) {
 8003aa6:	4b7e      	ldr	r3, [pc, #504]	; (8003ca0 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x388>)
	float number_value = 0;
 8003aa8:	950c      	str	r5, [sp, #48]	; 0x30
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 0 and 16") == 0) {
 8003aaa:	aa0c      	add	r2, sp, #48	; 0x30
 8003aac:	4631      	mov	r1, r6
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f003 fe78 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	f43f af61 	beq.w	800397c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x64>
	if(number_value < 0)
 8003aba:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8003abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	f140 80cb 	bpl.w	8003c60 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x348>
	number_value = 0;
 8003aca:	950c      	str	r5, [sp, #48]	; 0x30
		sprintf(text, "Enter min value for ADC%i", analog_input_index);
 8003acc:	4975      	ldr	r1, [pc, #468]	; (8003ca4 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x38c>)
 8003ace:	4622      	mov	r2, r4
		sprintf(text, "Enter min value for DADC%i", analog_input_index-12);
 8003ad0:	a84d      	add	r0, sp, #308	; 0x134
 8003ad2:	f00f f927 	bl	8012d24 <siprintf>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, text) == 0) {
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	ab4d      	add	r3, sp, #308	; 0x134
 8003ada:	aa0c      	add	r2, sp, #48	; 0x30
 8003adc:	4608      	mov	r0, r1
 8003ade:	f003 fe61 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	f43f af4a 	beq.w	800397c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x64>
	if(analog_input_index <= 11)
 8003ae8:	2c0b      	cmp	r4, #11
		sprintf(text, "Enter max value for ADC%i", analog_input_index);
 8003aea:	bf94      	ite	ls
 8003aec:	496e      	ldrls	r1, [pc, #440]	; (8003ca8 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x390>)
		sprintf(text, "Enter max value for DADC%i", analog_input_index-12);
 8003aee:	496f      	ldrhi	r1, [pc, #444]	; (8003cac <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x394>)
	float min_value = number_value;
 8003af0:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
	number_value = 0;
 8003af4:	950c      	str	r5, [sp, #48]	; 0x30
		sprintf(text, "Enter max value for ADC%i", analog_input_index);
 8003af6:	bf94      	ite	ls
 8003af8:	4622      	movls	r2, r4
		sprintf(text, "Enter max value for DADC%i", analog_input_index-12);
 8003afa:	f1a4 020c 	subhi.w	r2, r4, #12
 8003afe:	a84d      	add	r0, sp, #308	; 0x134
 8003b00:	f00f f910 	bl	8012d24 <siprintf>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, text) == 0) {
 8003b04:	2101      	movs	r1, #1
 8003b06:	ab4d      	add	r3, sp, #308	; 0x134
 8003b08:	aa0c      	add	r2, sp, #48	; 0x30
 8003b0a:	4608      	mov	r0, r1
 8003b0c:	f003 fe4a 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	f43f af33 	beq.w	800397c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x64>
	if(analog_input_index <= 11)
 8003b16:	2c0b      	cmp	r4, #11
		sprintf(text, "Enter bias value for ADC%i", analog_input_index);
 8003b18:	bf94      	ite	ls
 8003b1a:	4965      	ldrls	r1, [pc, #404]	; (8003cb0 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x398>)
		sprintf(text, "Enter bias value for DADC%i", analog_input_index-12);
 8003b1c:	4965      	ldrhi	r1, [pc, #404]	; (8003cb4 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x39c>)
	float max_value = number_value;
 8003b1e:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
	number_value = 0;
 8003b22:	950c      	str	r5, [sp, #48]	; 0x30
		sprintf(text, "Enter bias value for ADC%i", analog_input_index);
 8003b24:	bf94      	ite	ls
 8003b26:	4622      	movls	r2, r4
		sprintf(text, "Enter bias value for DADC%i", analog_input_index-12);
 8003b28:	f1a4 020c 	subhi.w	r2, r4, #12
 8003b2c:	a84d      	add	r0, sp, #308	; 0x134
 8003b2e:	f00f f8f9 	bl	8012d24 <siprintf>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, text) == 0) {
 8003b32:	2101      	movs	r1, #1
 8003b34:	ab4d      	add	r3, sp, #308	; 0x134
 8003b36:	aa0c      	add	r2, sp, #48	; 0x30
 8003b38:	4608      	mov	r0, r1
 8003b3a:	f003 fe33 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	f43f af1c 	beq.w	800397c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x64>
	if(analog_input_index <= 11)
 8003b44:	2c0b      	cmp	r4, #11
	float bias_value = number_value;
 8003b46:	ed9d 9a0c 	vldr	s18, [sp, #48]	; 0x30
	if(analog_input_index <= 11)
 8003b4a:	f200 80c7 	bhi.w	8003cdc <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x3c4>
		STM32_PLC_Analog_Input_ADC_Set_Calibration(analog_input_index, min_value, max_value, bias_value);
 8003b4e:	eeb0 1a49 	vmov.f32	s2, s18
 8003b52:	eef0 0a68 	vmov.f32	s1, s17
 8003b56:	eeb0 0a48 	vmov.f32	s0, s16
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7fd f9fa 	bl	8000f54 <STM32_PLC_Analog_Input_ADC_Set_Calibration>
		analog_input_index = 16;
 8003b60:	4643      	mov	r3, r8
 8003b62:	2200      	movs	r2, #0
		if(analog_input_index == i){
 8003b64:	b2d1      	uxtb	r1, r2
 8003b66:	428c      	cmp	r4, r1
			min_max_bias[0 + i*3] = min_value;
 8003b68:	f102 0201 	add.w	r2, r2, #1
 8003b6c:	bf02      	ittt	eq
 8003b6e:	ed83 8a00 	vstreq	s16, [r3]
			min_max_bias[1 + i*3] = max_value;
 8003b72:	edc3 8a01 	vstreq	s17, [r3, #4]
			min_max_bias[2 + i*3] = bias_value;
 8003b76:	ed83 9a02 	vstreq	s18, [r3, #8]
	for(uint8_t i = 0; i < 17; i++) {
 8003b7a:	2a11      	cmp	r2, #17
 8003b7c:	f103 030c 	add.w	r3, r3, #12
 8003b80:	d1f0      	bne.n	8003b64 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x24c>
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 8003b82:	f7fe fa2b 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8003b86:	4604      	mov	r4, r0
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	f47f aef4 	bne.w	8003976 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x5e>
	STM32_PLC_SD_Open_Existing_File_With_Write("ANALOG.TXT");
 8003b8e:	483e      	ldr	r0, [pc, #248]	; (8003c88 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x370>)
			sprintf(text, "%0.2f,%0.2f,%0.2f", min_max_bias[0 + 3*i], min_max_bias[1 + 3*i], min_max_bias[2 + 3*i]);
 8003b90:	4d49      	ldr	r5, [pc, #292]	; (8003cb8 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x3a0>)
			sprintf(text, "%0.2f,%0.2f,%0.2f%s", min_max_bias[0 + 3*i], min_max_bias[1 + 3*i], min_max_bias[2 + 3*i], DELIMITER);
 8003b92:	4e3e      	ldr	r6, [pc, #248]	; (8003c8c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x374>)
 8003b94:	4f49      	ldr	r7, [pc, #292]	; (8003cbc <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x3a4>)
	STM32_PLC_SD_Open_Existing_File_With_Write("ANALOG.TXT");
 8003b96:	f7fe fa43 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
		if(i <= 15)
 8003b9a:	2c10      	cmp	r4, #16
 8003b9c:	f000 80ad 	beq.w	8003cfa <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x3e2>
			sprintf(text, "%0.2f,%0.2f,%0.2f%s", min_max_bias[0 + 3*i], min_max_bias[1 + 3*i], min_max_bias[2 + 3*i], DELIMITER);
 8003ba0:	f8d8 0000 	ldr.w	r0, [r8]
 8003ba4:	f7fc fcd0 	bl	8000548 <__aeabi_f2d>
 8003ba8:	9604      	str	r6, [sp, #16]
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003bb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003bb6:	f7fc fcc7 	bl	8000548 <__aeabi_f2d>
 8003bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bbe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003bc2:	f7fc fcc1 	bl	8000548 <__aeabi_f2d>
 8003bc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bca:	e9cd 0100 	strd	r0, r1, [sp]
 8003bce:	4639      	mov	r1, r7
 8003bd0:	a84d      	add	r0, sp, #308	; 0x134
 8003bd2:	f00f f8a7 	bl	8012d24 <siprintf>
		STM32_PLC_SD_Write_File(text);
 8003bd6:	a84d      	add	r0, sp, #308	; 0x134
 8003bd8:	3401      	adds	r4, #1
 8003bda:	f7fe fa63 	bl	80020a4 <STM32_PLC_SD_Write_File>
	for(uint8_t i = 0; i < 17; i++) {
 8003bde:	2c11      	cmp	r4, #17
 8003be0:	f108 080c 	add.w	r8, r8, #12
 8003be4:	d1d9      	bne.n	8003b9a <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x282>
	STM32_PLC_SD_Close_File();
 8003be6:	f7fe fa23 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8003bea:	f7fe f9e7 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
 8003bee:	e6c5      	b.n	800397c <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x64>
			min_max_bias[0 + 3*i] = atoff(strtok(NULL, delimiters));
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf6:	f00f ff3f 	bl	8013a78 <strtok>
 8003bfa:	f00e fbe1 	bl	80123c0 <atoff>
			min_max_bias[1 + 3*i] = atoff(strtok(NULL, delimiters));
 8003bfe:	4631      	mov	r1, r6
			min_max_bias[0 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c00:	ed87 0a00 	vstr	s0, [r7]
			min_max_bias[1 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c04:	2000      	movs	r0, #0
			min_max_bias[0 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c06:	ed8d 0a06 	vstr	s0, [sp, #24]
			min_max_bias[1 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c0a:	f00f ff35 	bl	8013a78 <strtok>
 8003c0e:	f00e fbd7 	bl	80123c0 <atoff>
			min_max_bias[2 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c12:	4631      	mov	r1, r6
			min_max_bias[1 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c14:	ed87 0a01 	vstr	s0, [r7, #4]
			min_max_bias[2 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c18:	2000      	movs	r0, #0
			min_max_bias[1 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c1a:	ed8d 0a08 	vstr	s0, [sp, #32]
			min_max_bias[2 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c1e:	f00f ff2b 	bl	8013a78 <strtok>
 8003c22:	f00e fbcd 	bl	80123c0 <atoff>
		if(i <= 11){
 8003c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
			min_max_bias[2 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c28:	ed87 0a02 	vstr	s0, [r7, #8]
		if(i <= 11){
 8003c2c:	2b0b      	cmp	r3, #11
			min_max_bias[2 + 3*i] = atoff(strtok(NULL, delimiters));
 8003c2e:	ee10 0a10 	vmov	r0, s0
		if(i <= 11){
 8003c32:	f67f aee7 	bls.w	8003a04 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0xec>
			sprintf(line_text, "%i=DADC%i:%0.2f %0.2f %0.2f", i, i-12, min_max_bias[0 + i*3], min_max_bias[1 + i*3], min_max_bias[2 + i*3]);
 8003c36:	f1a5 030c 	sub.w	r3, r5, #12
 8003c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c3c:	f7fc fc84 	bl	8000548 <__aeabi_f2d>
 8003c40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c44:	9808      	ldr	r0, [sp, #32]
 8003c46:	f7fc fc7f 	bl	8000548 <__aeabi_f2d>
 8003c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c4e:	9806      	ldr	r0, [sp, #24]
 8003c50:	f7fc fc7a 	bl	8000548 <__aeabi_f2d>
 8003c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c56:	e9cd 0100 	strd	r0, r1, [sp]
 8003c5a:	462a      	mov	r2, r5
 8003c5c:	4918      	ldr	r1, [pc, #96]	; (8003cc0 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x3a8>)
 8003c5e:	e6e3      	b.n	8003a28 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x110>
	else if(number_value > 16)
 8003c60:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6c:	dd2c      	ble.n	8003cc8 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x3b0>
	number_value = 0;
 8003c6e:	950c      	str	r5, [sp, #48]	; 0x30
		analog_input_index = 16;
 8003c70:	2410      	movs	r4, #16
		sprintf(text, "Enter min value for DADC%i", analog_input_index-12);
 8003c72:	4914      	ldr	r1, [pc, #80]	; (8003cc4 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x3ac>)
 8003c74:	f1a4 020c 	sub.w	r2, r4, #12
 8003c78:	e72a      	b.n	8003ad0 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x1b8>
 8003c7a:	bf00      	nop
 8003c7c:	08016e4f 	.word	0x08016e4f
 8003c80:	08016e78 	.word	0x08016e78
 8003c84:	08016e92 	.word	0x08016e92
 8003c88:	08016dbd 	.word	0x08016dbd
 8003c8c:	08016cb1 	.word	0x08016cb1
 8003c90:	08016dc8 	.word	0x08016dc8
 8003c94:	08016eaa 	.word	0x08016eaa
 8003c98:	08016ee1 	.word	0x08016ee1
 8003c9c:	08016ef0 	.word	0x08016ef0
 8003ca0:	08016f10 	.word	0x08016f10
 8003ca4:	08016f34 	.word	0x08016f34
 8003ca8:	08016f69 	.word	0x08016f69
 8003cac:	08016f83 	.word	0x08016f83
 8003cb0:	08016f9e 	.word	0x08016f9e
 8003cb4:	08016fb9 	.word	0x08016fb9
 8003cb8:	08016fe9 	.word	0x08016fe9
 8003cbc:	08016fd5 	.word	0x08016fd5
 8003cc0:	08016ec5 	.word	0x08016ec5
 8003cc4:	08016f4e 	.word	0x08016f4e
		analog_input_index = (uint8_t) number_value;
 8003cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	number_value = 0;
 8003ccc:	950c      	str	r5, [sp, #48]	; 0x30
		analog_input_index = (uint8_t) number_value;
 8003cce:	edcd 7a06 	vstr	s15, [sp, #24]
 8003cd2:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if(analog_input_index <= 11)
 8003cd6:	2c0b      	cmp	r4, #11
 8003cd8:	d8cb      	bhi.n	8003c72 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x35a>
 8003cda:	e6f7      	b.n	8003acc <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x1b4>
	else if (analog_input_index >= 12 && analog_input_index <= 16)
 8003cdc:	f1a4 000c 	sub.w	r0, r4, #12
 8003ce0:	b2c0      	uxtb	r0, r0
 8003ce2:	2804      	cmp	r0, #4
 8003ce4:	f63f af3c 	bhi.w	8003b60 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x248>
		STM32_PLC_Analog_Input_DADC_Set_Calibration(analog_input_index - 12, min_value, max_value, bias_value);
 8003ce8:	eeb0 1a49 	vmov.f32	s2, s18
 8003cec:	eef0 0a68 	vmov.f32	s1, s17
 8003cf0:	eeb0 0a48 	vmov.f32	s0, s16
 8003cf4:	f7fd f96a 	bl	8000fcc <STM32_PLC_Analog_Input_DADC_Set_Calibration>
 8003cf8:	e732      	b.n	8003b60 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x248>
			sprintf(text, "%0.2f,%0.2f,%0.2f", min_max_bias[0 + 3*i], min_max_bias[1 + 3*i], min_max_bias[2 + 3*i]);
 8003cfa:	984a      	ldr	r0, [sp, #296]	; 0x128
 8003cfc:	f7fc fc24 	bl	8000548 <__aeabi_f2d>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	984c      	ldr	r0, [sp, #304]	; 0x130
 8003d06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d0a:	f7fc fc1d 	bl	8000548 <__aeabi_f2d>
 8003d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d12:	984b      	ldr	r0, [sp, #300]	; 0x12c
 8003d14:	f7fc fc18 	bl	8000548 <__aeabi_f2d>
 8003d18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d1c:	e9cd 0100 	strd	r0, r1, [sp]
 8003d20:	4629      	mov	r1, r5
 8003d22:	a84d      	add	r0, sp, #308	; 0x134
 8003d24:	f00e fffe 	bl	8012d24 <siprintf>
 8003d28:	e755      	b.n	8003bd6 <STM32_PLC_LCD_Show_Analog_Calibration_Frame+0x2be>
 8003d2a:	bf00      	nop

08003d2c <set_parameters.constprop.0>:
	default:
		break;
	}
}

static uint8_t set_parameters(float parameters[], char title[][60], uint8_t index_title, uint8_t amount_of_controllers, bool only_integer_at_index[]) {
 8003d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
				decimalbutton_show = true;
			}
			if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, text) == 0) {
				return 0;
			}
			parameters[i*index_title + j] = number_value;
 8003d30:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8003d74 <set_parameters.constprop.0+0x48>
static uint8_t set_parameters(float parameters[], char title[][60], uint8_t index_title, uint8_t amount_of_controllers, bool only_integer_at_index[]) {
 8003d34:	b091      	sub	sp, #68	; 0x44
 8003d36:	4607      	mov	r7, r0
 8003d38:	461e      	mov	r6, r3
 8003d3a:	2500      	movs	r5, #0
			sprintf(text, title[j], i);
 8003d3c:	f04f 083c 	mov.w	r8, #60	; 0x3c
 8003d40:	b2ec      	uxtb	r4, r5
 8003d42:	2200      	movs	r2, #0
 8003d44:	fb08 7104 	mla	r1, r8, r4, r7
 8003d48:	a801      	add	r0, sp, #4
 8003d4a:	f00e ffeb 	bl	8012d24 <siprintf>
			if(only_integer_at_index[j]){
 8003d4e:	5d31      	ldrb	r1, [r6, r4]
 8003d50:	f081 0101 	eor.w	r1, r1, #1
			if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, text) == 0) {
 8003d54:	ab01      	add	r3, sp, #4
 8003d56:	466a      	mov	r2, sp
 8003d58:	4608      	mov	r0, r1
 8003d5a:	f003 fd23 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8003d5e:	3501      	adds	r5, #1
 8003d60:	b910      	cbnz	r0, 8003d68 <set_parameters.constprop.0+0x3c>
		}
	}
	return 1;
}
 8003d62:	b011      	add	sp, #68	; 0x44
 8003d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			parameters[i*index_title + j] = number_value;
 8003d68:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 8003d6c:	9b00      	ldr	r3, [sp, #0]
 8003d6e:	6023      	str	r3, [r4, #0]
		for(uint8_t j = 0; i < index_title; j++){
 8003d70:	e7e6      	b.n	8003d40 <set_parameters.constprop.0+0x14>
 8003d72:	bf00      	nop
 8003d74:	200004ac 	.word	0x200004ac

08003d78 <STM32_PLC_LCD_Set_Control_Program>:
	prg = program_number;
 8003d78:	4b01      	ldr	r3, [pc, #4]	; (8003d80 <STM32_PLC_LCD_Set_Control_Program+0x8>)
 8003d7a:	7018      	strb	r0, [r3, #0]
	STM32_PLC_LED(program_number);
 8003d7c:	f7fd bf26 	b.w	8001bcc <STM32_PLC_LED>
 8003d80:	200004a8 	.word	0x200004a8

08003d84 <STM32_PLC_LCD_Set_Program_Parameters>:
void STM32_PLC_LCD_Set_Program_Parameters(float parameters[]){
 8003d84:	4601      	mov	r1, r0
	memcpy(program_parameters, parameters, sizeof(program_parameters));
 8003d86:	2250      	movs	r2, #80	; 0x50
 8003d88:	4801      	ldr	r0, [pc, #4]	; (8003d90 <STM32_PLC_LCD_Set_Program_Parameters+0xc>)
 8003d8a:	f00e bb4b 	b.w	8012424 <memcpy>
 8003d8e:	bf00      	nop
 8003d90:	200004ac 	.word	0x200004ac

08003d94 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame>:
void STM32_PLC_LCD_Show_Control_Program_Settings_Frame(uint8_t *frame_id) {
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	f2ad 5de4 	subw	sp, sp, #1508	; 0x5e4
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003d9a:	250f      	movs	r5, #15
 8003d9c:	23ea      	movs	r3, #234	; 0xea
 8003d9e:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8003da2:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Control_Program_Settings_Frame(uint8_t *frame_id) {
 8003da4:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003da6:	9500      	str	r5, [sp, #0]
 8003da8:	2033      	movs	r0, #51	; 0x33
	ILI9341_print_text("Select control program", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003daa:	2701      	movs	r7, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003dac:	f004 f960 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003db0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003db4:	f240 1209 	movw	r2, #265	; 0x109
 8003db8:	211e      	movs	r1, #30
 8003dba:	2032      	movs	r0, #50	; 0x32
 8003dbc:	f004 f994 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Select control program", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003dc0:	48a8      	ldr	r0, [pc, #672]	; (8004064 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2d0>)
 8003dc2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003dc6:	220a      	movs	r2, #10
 8003dc8:	2137      	movs	r1, #55	; 0x37
 8003dca:	e9cd 5700 	strd	r5, r7, [sp]
 8003dce:	f004 fa6b 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program0:No program", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8003dd2:	48a5      	ldr	r0, [pc, #660]	; (8004068 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2d4>)
 8003dd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003dd8:	2223      	movs	r2, #35	; 0x23
 8003dda:	2137      	movs	r1, #55	; 0x37
 8003ddc:	e9cd 5700 	strd	r5, r7, [sp]
 8003de0:	f004 fa62 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program1:PI control", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8003de4:	48a1      	ldr	r0, [pc, #644]	; (800406c <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2d8>)
 8003de6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003dea:	222d      	movs	r2, #45	; 0x2d
 8003dec:	2137      	movs	r1, #55	; 0x37
 8003dee:	e9cd 5700 	strd	r5, r7, [sp]
 8003df2:	f004 fa59 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program2:Pulse count", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8003df6:	2237      	movs	r2, #55	; 0x37
 8003df8:	4611      	mov	r1, r2
 8003dfa:	489d      	ldr	r0, [pc, #628]	; (8004070 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2dc>)
 8003dfc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e00:	e9cd 5700 	strd	r5, r7, [sp]
 8003e04:	f004 fa50 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program3:MRAC control", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e08:	489a      	ldr	r0, [pc, #616]	; (8004074 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2e0>)
 8003e0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e0e:	2241      	movs	r2, #65	; 0x41
 8003e10:	2137      	movs	r1, #55	; 0x37
 8003e12:	e9cd 5700 	strd	r5, r7, [sp]
 8003e16:	f004 fa47 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program4:ON/OFF control", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e1a:	4897      	ldr	r0, [pc, #604]	; (8004078 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2e4>)
 8003e1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e20:	224b      	movs	r2, #75	; 0x4b
 8003e22:	2137      	movs	r1, #55	; 0x37
 8003e24:	e9cd 5700 	strd	r5, r7, [sp]
 8003e28:	f004 fa3e 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program5:Input and output PWM", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e2c:	4893      	ldr	r0, [pc, #588]	; (800407c <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2e8>)
 8003e2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e32:	2255      	movs	r2, #85	; 0x55
 8003e34:	2137      	movs	r1, #55	; 0x37
 8003e36:	e9cd 5700 	strd	r5, r7, [sp]
 8003e3a:	f004 fa35 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program6:Input and output Analog", 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e3e:	4890      	ldr	r0, [pc, #576]	; (8004080 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2ec>)
 8003e40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e44:	225f      	movs	r2, #95	; 0x5f
 8003e46:	2137      	movs	r1, #55	; 0x37
 8003e48:	e9cd 5700 	strd	r5, r7, [sp]
 8003e4c:	f004 fa2c 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program7:Digital output alarm", 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e50:	488c      	ldr	r0, [pc, #560]	; (8004084 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2f0>)
 8003e52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e56:	2269      	movs	r2, #105	; 0x69
 8003e58:	2137      	movs	r1, #55	; 0x37
 8003e5a:	e9cd 5700 	strd	r5, r7, [sp]
 8003e5e:	f004 fa23 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program8:Auxiliary valve command", 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e62:	4889      	ldr	r0, [pc, #548]	; (8004088 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2f4>)
 8003e64:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e68:	2273      	movs	r2, #115	; 0x73
 8003e6a:	2137      	movs	r1, #55	; 0x37
 8003e6c:	e9cd 5700 	strd	r5, r7, [sp]
 8003e70:	f004 fa1a 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Program9:General purpose valve command", 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e74:	4885      	ldr	r0, [pc, #532]	; (800408c <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2f8>)
 8003e76:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e7a:	227d      	movs	r2, #125	; 0x7d
 8003e7c:	2137      	movs	r1, #55	; 0x37
 8003e7e:	e9cd 5700 	strd	r5, r7, [sp]
 8003e82:	f004 fa11 	bl	80082a8 <ILI9341_print_text>
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 8003e86:	f7fe f8a9 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	b148      	cbz	r0, 8003ea2 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x10e>
		STM32_PLC_LCD_Show_Information_OK_Dialog("Could not mount SD card");
 8003e8e:	4880      	ldr	r0, [pc, #512]	; (8004090 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x2fc>)
 8003e90:	f7ff fc40 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8003e94:	2100      	movs	r1, #0
 8003e96:	4630      	mov	r0, r6
 8003e98:	f001 f9fa 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 8003e9c:	f20d 5de4 	addw	sp, sp, #1508	; 0x5e4
 8003ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	STM32_PLC_SD_Open_Existing_File_With_Read("PROGRAM.TXT");
 8003ea2:	487c      	ldr	r0, [pc, #496]	; (8004094 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x300>)
 8003ea4:	f7fe f8b4 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 8003ea8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003eac:	a8fb      	add	r0, sp, #1004	; 0x3ec
 8003eae:	f7fe f8f3 	bl	8002098 <STM32_PLC_SD_Read_File>
	sprintf(text, "Selected program=%i", atoi(text));
 8003eb2:	a8fb      	add	r0, sp, #1004	; 0x3ec
 8003eb4:	f00e fa87 	bl	80123c6 <atoi>
 8003eb8:	4977      	ldr	r1, [pc, #476]	; (8004098 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x304>)
 8003eba:	4602      	mov	r2, r0
 8003ebc:	a8fb      	add	r0, sp, #1004	; 0x3ec
 8003ebe:	f00e ff31 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ec2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ec6:	2291      	movs	r2, #145	; 0x91
 8003ec8:	2137      	movs	r1, #55	; 0x37
 8003eca:	e9cd 5700 	strd	r5, r7, [sp]
 8003ece:	a8fb      	add	r0, sp, #1004	; 0x3ec
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 8003ed0:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ed4:	f004 f9e8 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_SD_Close_File();
 8003ed8:	f7fe f8aa 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8003edc:	f7fe f86e 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 8003ee0:	23dc      	movs	r3, #220	; 0xdc
 8003ee2:	f240 1211 	movw	r2, #273	; 0x111
 8003ee6:	21c3      	movs	r1, #195	; 0xc3
 8003ee8:	2055      	movs	r0, #85	; 0x55
 8003eea:	9500      	str	r5, [sp, #0]
 8003eec:	f004 f8c0 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 8003ef0:	23dc      	movs	r3, #220	; 0xdc
 8003ef2:	f240 1211 	movw	r2, #273	; 0x111
 8003ef6:	21c3      	movs	r1, #195	; 0xc3
 8003ef8:	2055      	movs	r0, #85	; 0x55
 8003efa:	9400      	str	r4, [sp, #0]
 8003efc:	f004 f93a 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Select program", 95, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8003f00:	2302      	movs	r3, #2
 8003f02:	e9cd 5300 	strd	r5, r3, [sp]
 8003f06:	4865      	ldr	r0, [pc, #404]	; (800409c <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x308>)
 8003f08:	4623      	mov	r3, r4
 8003f0a:	22c8      	movs	r2, #200	; 0xc8
 8003f0c:	215f      	movs	r1, #95	; 0x5f
 8003f0e:	f004 f9cb 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 195, 273, 220);
 8003f12:	23dc      	movs	r3, #220	; 0xdc
 8003f14:	f240 1211 	movw	r2, #273	; 0x111
 8003f18:	21c3      	movs	r1, #195	; 0xc3
 8003f1a:	2055      	movs	r0, #85	; 0x55
 8003f1c:	f005 f866 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set program?") == 0) {
 8003f20:	485f      	ldr	r0, [pc, #380]	; (80040a0 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x30c>)
 8003f22:	f7ff fc69 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d0b4      	beq.n	8003e94 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x100>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter program number between 0 and 9") == 0) {
 8003f2a:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x310>)
 8003f2c:	aa4f      	add	r2, sp, #316	; 0x13c
 8003f2e:	4621      	mov	r1, r4
 8003f30:	4620      	mov	r0, r4
 8003f32:	f003 fc37 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d0ac      	beq.n	8003e94 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x100>
	if(number_value < 0)
 8003f3a:	eddd 7a4f 	vldr	s15, [sp, #316]	; 0x13c
 8003f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f46:	d40d      	bmi.n	8003f64 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x1d0>
	else if(number_value > 9)
 8003f48:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		program_number = (uint8_t) number_value;
 8003f54:	bfd7      	itett	le
 8003f56:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		program_number = 9;
 8003f5a:	2409      	movgt	r4, #9
		program_number = (uint8_t) number_value;
 8003f5c:	edcd 7a4c 	vstrle	s15, [sp, #304]	; 0x130
 8003f60:	f89d 4130 	ldrble.w	r4, [sp, #304]	; 0x130
	STM32_PLC_LCD_Set_Control_Program(program_number);
 8003f64:	4620      	mov	r0, r4
 8003f66:	f7ff ff07 	bl	8003d78 <STM32_PLC_LCD_Set_Control_Program>
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 8003f6a:	f7fe f837 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d18d      	bne.n	8003e8e <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0xfa>
	STM32_PLC_SD_Open_Existing_File_With_Write("PROGRAM.TXT");
 8003f72:	4848      	ldr	r0, [pc, #288]	; (8004094 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x300>)
 8003f74:	f7fe f854 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
	sprintf(text, "%i", program_number);
 8003f78:	494b      	ldr	r1, [pc, #300]	; (80040a8 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x314>)
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	a8fb      	add	r0, sp, #1004	; 0x3ec
 8003f7e:	f00e fed1 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Write_File(text);
 8003f82:	a8fb      	add	r0, sp, #1004	; 0x3ec
 8003f84:	f7fe f88e 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Close_File();
 8003f88:	f7fe f852 	bl	8002030 <STM32_PLC_SD_Close_File>
	if(program_number == 0) {
 8003f8c:	b984      	cbnz	r4, 8003fb0 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x21c>
		memset(PI_I, 0, sizeof(PI_I));
 8003f8e:	4b47      	ldr	r3, [pc, #284]	; (80040ac <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x318>)
 8003f90:	e9c3 4400 	strd	r4, r4, [r3]
 8003f94:	609c      	str	r4, [r3, #8]
		memset(MRAC_I1, 0, sizeof(MRAC_I1));
 8003f96:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x31c>)
 8003f98:	e9c3 4400 	strd	r4, r4, [r3]
 8003f9c:	609c      	str	r4, [r3, #8]
		memset(MRAC_I2, 0, sizeof(MRAC_I2));
 8003f9e:	4b45      	ldr	r3, [pc, #276]	; (80040b4 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x320>)
 8003fa0:	e9c3 4400 	strd	r4, r4, [r3]
 8003fa4:	609c      	str	r4, [r3, #8]
		STM32_PLC_Pulse_Count_Reset();
 8003fa6:	f7fd fee9 	bl	8001d7c <STM32_PLC_Pulse_Count_Reset>
		number_value = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	934f      	str	r3, [sp, #316]	; 0x13c
 8003fae:	e00e      	b.n	8003fce <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x23a>
	if(program_number == 1 || program_number == 2 || program_number == 3 || program_number == 4 || program_number == 9) {
 8003fb0:	1e63      	subs	r3, r4, #1
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d901      	bls.n	8003fbc <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x228>
 8003fb8:	2c09      	cmp	r4, #9
 8003fba:	d1f6      	bne.n	8003faa <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x216>
		if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter program parameters? 0:No 1:Yes") == 0) {
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4b3e      	ldr	r3, [pc, #248]	; (80040b8 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x324>)
 8003fc0:	aa4f      	add	r2, sp, #316	; 0x13c
 8003fc2:	4608      	mov	r0, r1
 8003fc4:	f003 fbee 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	f43f af63 	beq.w	8003e94 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x100>
	if(number_value < 0)
 8003fce:	eddd 7a4f 	vldr	s15, [sp, #316]	; 0x13c
 8003fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fda:	f100 8110 	bmi.w	80041fe <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x46a>
	else if(number_value > 1)
 8003fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	dc08      	bgt.n	8003ffe <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x26a>
		status = (uint8_t)number_value;
 8003fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff0:	edcd 7a4c 	vstr	s15, [sp, #304]	; 0x130
	if(status == 1){
 8003ff4:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	f040 8100 	bne.w	80041fe <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x46a>
		char title_1[4][60] = {"Enter setpoint for PI%i", "Set proportional gain P%i", "Set integral gain G%i", "Anti-winup%i enabled NO:0 or YES:1"};
 8003ffe:	492f      	ldr	r1, [pc, #188]	; (80040bc <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x328>)
 8004000:	22f0      	movs	r2, #240	; 0xf0
 8004002:	a8bf      	add	r0, sp, #764	; 0x2fc
 8004004:	f00e fa0e 	bl	8012424 <memcpy>
		char title_2[2][60] = {"Set high threshold%i", "Set low threshold%i"};
 8004008:	492d      	ldr	r1, [pc, #180]	; (80040c0 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x32c>)
 800400a:	2278      	movs	r2, #120	; 0x78
 800400c:	a865      	add	r0, sp, #404	; 0x194
 800400e:	f00e fa09 	bl	8012424 <memcpy>
		char title_3[2][60] = {"Set setpoint for MRAC%i", "Set integral gain G%i"};
 8004012:	492c      	ldr	r1, [pc, #176]	; (80040c4 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x330>)
 8004014:	2278      	movs	r2, #120	; 0x78
 8004016:	a883      	add	r0, sp, #524	; 0x20c
 8004018:	f00e fa04 	bl	8012424 <memcpy>
		char title_4[2][60] = {"Set setpoint for ON/OFF%i", "Set max threshold%i"};
 800401c:	2278      	movs	r2, #120	; 0x78
 800401e:	492a      	ldr	r1, [pc, #168]	; (80040c8 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x334>)
 8004020:	a8a1      	add	r0, sp, #644	; 0x284
 8004022:	f00e f9ff 	bl	8012424 <memcpy>
		char title_9[1][60] = {"Enter DA%i between 0 and 253"};
 8004026:	4b29      	ldr	r3, [pc, #164]	; (80040cc <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x338>)
 8004028:	aa56      	add	r2, sp, #344	; 0x158
 800402a:	f103 0738 	add.w	r7, r3, #56	; 0x38
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	4615      	mov	r5, r2
 8004034:	c503      	stmia	r5!, {r0, r1}
 8004036:	3308      	adds	r3, #8
 8004038:	42bb      	cmp	r3, r7
 800403a:	462a      	mov	r2, r5
 800403c:	d1f7      	bne.n	800402e <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x29a>
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	6028      	str	r0, [r5, #0]
		bool only_integer_at_index[4] = {false};
 8004042:	2300      	movs	r3, #0
 8004044:	9350      	str	r3, [sp, #320]	; 0x140
		switch(program_number){
 8004046:	1e63      	subs	r3, r4, #1
 8004048:	2b08      	cmp	r3, #8
 800404a:	d84d      	bhi.n	80040e8 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x354>
 800404c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004050:	00da0040 	.word	0x00da0040
 8004054:	00e400df 	.word	0x00e400df
 8004058:	004c004c 	.word	0x004c004c
 800405c:	004c004c 	.word	0x004c004c
 8004060:	00e9      	.short	0x00e9
 8004062:	bf00      	nop
 8004064:	08016ffb 	.word	0x08016ffb
 8004068:	08017012 	.word	0x08017012
 800406c:	08017026 	.word	0x08017026
 8004070:	0801703a 	.word	0x0801703a
 8004074:	0801704f 	.word	0x0801704f
 8004078:	08017065 	.word	0x08017065
 800407c:	0801707d 	.word	0x0801707d
 8004080:	0801709b 	.word	0x0801709b
 8004084:	080170bc 	.word	0x080170bc
 8004088:	080170da 	.word	0x080170da
 800408c:	080170fb 	.word	0x080170fb
 8004090:	08016e92 	.word	0x08016e92
 8004094:	08016cf2 	.word	0x08016cf2
 8004098:	08017122 	.word	0x08017122
 800409c:	08017136 	.word	0x08017136
 80040a0:	08017145 	.word	0x08017145
 80040a4:	08017161 	.word	0x08017161
 80040a8:	08017bda 	.word	0x08017bda
 80040ac:	2000049c 	.word	0x2000049c
 80040b0:	20000484 	.word	0x20000484
 80040b4:	20000490 	.word	0x20000490
 80040b8:	08017186 	.word	0x08017186
 80040bc:	080169f8 	.word	0x080169f8
 80040c0:	08016ae8 	.word	0x08016ae8
 80040c4:	08016b60 	.word	0x08016b60
 80040c8:	08016bd8 	.word	0x08016bd8
 80040cc:	08016c50 	.word	0x08016c50
			only_integer_at_index[3] = true;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f88d 3143 	strb.w	r3, [sp, #323]	; 0x143
			status = set_parameters(program_parameters, title_1, PI_CONTROLLER_PARAMETER_LENGTH, AMOUNT_OF_PI_CONTROLLERS, only_integer_at_index);
 80040d6:	2203      	movs	r2, #3
 80040d8:	ab50      	add	r3, sp, #320	; 0x140
 80040da:	2104      	movs	r1, #4
 80040dc:	a8bf      	add	r0, sp, #764	; 0x2fc
			status = set_parameters(program_parameters, title_9, GENERAL_PURPOSE_VALVE_CONTROL_PARAMETER_LENGTH, AMOUNT_OF_GENERAL_PURPOSE_VALVE_CONTROL, only_integer_at_index);
 80040de:	f7ff fe25 	bl	8003d2c <set_parameters.constprop.0>
		if(status == 1){
 80040e2:	2801      	cmp	r0, #1
 80040e4:	f040 808b 	bne.w	80041fe <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x46a>
			sprintf(filename, "PROGRAM%i.TXT", program_number);
 80040e8:	4622      	mov	r2, r4
					program_parameters[0], DELIMITER,
 80040ea:	4c51      	ldr	r4, [pc, #324]	; (8004230 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x49c>)
			sprintf(filename, "PROGRAM%i.TXT", program_number);
 80040ec:	4951      	ldr	r1, [pc, #324]	; (8004234 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x4a0>)
			sprintf(text, "%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f",
 80040ee:	4d52      	ldr	r5, [pc, #328]	; (8004238 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x4a4>)
			sprintf(filename, "PROGRAM%i.TXT", program_number);
 80040f0:	a851      	add	r0, sp, #324	; 0x144
 80040f2:	f00e fe17 	bl	8012d24 <siprintf>
			sprintf(text, "%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f%s%f",
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	f7fc fa26 	bl	8000548 <__aeabi_f2d>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004102:	e9cd 234c 	strd	r2, r3, [sp, #304]	; 0x130
 8004106:	f7fc fa1f 	bl	8000548 <__aeabi_f2d>
 800410a:	e9cd 014a 	strd	r0, r1, [sp, #296]	; 0x128
 800410e:	9548      	str	r5, [sp, #288]	; 0x120
 8004110:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004112:	f7fc fa19 	bl	8000548 <__aeabi_f2d>
 8004116:	e9cd 0146 	strd	r0, r1, [sp, #280]	; 0x118
 800411a:	9544      	str	r5, [sp, #272]	; 0x110
 800411c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800411e:	f7fc fa13 	bl	8000548 <__aeabi_f2d>
 8004122:	e9cd 0142 	strd	r0, r1, [sp, #264]	; 0x108
 8004126:	9540      	str	r5, [sp, #256]	; 0x100
 8004128:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800412a:	f7fc fa0d 	bl	8000548 <__aeabi_f2d>
 800412e:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8004132:	953c      	str	r5, [sp, #240]	; 0xf0
 8004134:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004136:	f7fc fa07 	bl	8000548 <__aeabi_f2d>
 800413a:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 800413e:	9538      	str	r5, [sp, #224]	; 0xe0
 8004140:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004142:	f7fc fa01 	bl	8000548 <__aeabi_f2d>
 8004146:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 800414a:	9534      	str	r5, [sp, #208]	; 0xd0
 800414c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800414e:	f7fc f9fb 	bl	8000548 <__aeabi_f2d>
 8004152:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8004156:	9530      	str	r5, [sp, #192]	; 0xc0
 8004158:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800415a:	f7fc f9f5 	bl	8000548 <__aeabi_f2d>
 800415e:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
 8004162:	952c      	str	r5, [sp, #176]	; 0xb0
 8004164:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004166:	f7fc f9ef 	bl	8000548 <__aeabi_f2d>
 800416a:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
 800416e:	9528      	str	r5, [sp, #160]	; 0xa0
 8004170:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004172:	f7fc f9e9 	bl	8000548 <__aeabi_f2d>
 8004176:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 800417a:	9524      	str	r5, [sp, #144]	; 0x90
 800417c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800417e:	f7fc f9e3 	bl	8000548 <__aeabi_f2d>
 8004182:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
 8004186:	9520      	str	r5, [sp, #128]	; 0x80
 8004188:	6a20      	ldr	r0, [r4, #32]
 800418a:	f7fc f9dd 	bl	8000548 <__aeabi_f2d>
 800418e:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8004192:	951c      	str	r5, [sp, #112]	; 0x70
 8004194:	69e0      	ldr	r0, [r4, #28]
 8004196:	f7fc f9d7 	bl	8000548 <__aeabi_f2d>
 800419a:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 800419e:	9518      	str	r5, [sp, #96]	; 0x60
 80041a0:	69a0      	ldr	r0, [r4, #24]
 80041a2:	f7fc f9d1 	bl	8000548 <__aeabi_f2d>
 80041a6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80041aa:	9514      	str	r5, [sp, #80]	; 0x50
 80041ac:	6960      	ldr	r0, [r4, #20]
 80041ae:	f7fc f9cb 	bl	8000548 <__aeabi_f2d>
 80041b2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80041b6:	9510      	str	r5, [sp, #64]	; 0x40
 80041b8:	6920      	ldr	r0, [r4, #16]
 80041ba:	f7fc f9c5 	bl	8000548 <__aeabi_f2d>
 80041be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80041c2:	950c      	str	r5, [sp, #48]	; 0x30
 80041c4:	68e0      	ldr	r0, [r4, #12]
 80041c6:	f7fc f9bf 	bl	8000548 <__aeabi_f2d>
 80041ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80041ce:	9508      	str	r5, [sp, #32]
 80041d0:	68a0      	ldr	r0, [r4, #8]
 80041d2:	f7fc f9b9 	bl	8000548 <__aeabi_f2d>
 80041d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80041da:	9504      	str	r5, [sp, #16]
 80041dc:	6860      	ldr	r0, [r4, #4]
 80041de:	f7fc f9b3 	bl	8000548 <__aeabi_f2d>
 80041e2:	e9dd 234c 	ldrd	r2, r3, [sp, #304]	; 0x130
 80041e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041ea:	9500      	str	r5, [sp, #0]
 80041ec:	4913      	ldr	r1, [pc, #76]	; (800423c <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x4a8>)
 80041ee:	a8fb      	add	r0, sp, #1004	; 0x3ec
 80041f0:	f00e fd98 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Create_New_File_With_Read_Write(filename, text, true);	/* true means that it creates an initial string */
 80041f4:	2201      	movs	r2, #1
 80041f6:	a9fb      	add	r1, sp, #1004	; 0x3ec
 80041f8:	a851      	add	r0, sp, #324	; 0x144
 80041fa:	f7fd ff59 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Unmount_Card();
 80041fe:	f7fd fedd 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
 8004202:	e647      	b.n	8003e94 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x100>
			status = set_parameters(program_parameters, title_2, PULSE_COUNTER_PARAMETER_LENGTH, AMOUNT_OF_PULSE_COUNTERS, only_integer_at_index);
 8004204:	ab50      	add	r3, sp, #320	; 0x140
 8004206:	2204      	movs	r2, #4
 8004208:	2102      	movs	r1, #2
 800420a:	a865      	add	r0, sp, #404	; 0x194
 800420c:	e767      	b.n	80040de <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x34a>
			status = set_parameters(program_parameters, title_3, MRAC_CONTROLLER_PARAMETER_LENGTH, AMOUNT_OF_MRAC_CONTROLLERS, only_integer_at_index);
 800420e:	ab50      	add	r3, sp, #320	; 0x140
 8004210:	2203      	movs	r2, #3
 8004212:	2102      	movs	r1, #2
 8004214:	a883      	add	r0, sp, #524	; 0x20c
 8004216:	e762      	b.n	80040de <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x34a>
			status = set_parameters(program_parameters, title_4, ON_OFF_CONTROLLER_PARAMETER_LENGTH, AMOUNT_OF_ON_OFF_CONTROLLERS, only_integer_at_index);
 8004218:	ab50      	add	r3, sp, #320	; 0x140
 800421a:	2204      	movs	r2, #4
 800421c:	2102      	movs	r1, #2
 800421e:	a8a1      	add	r0, sp, #644	; 0x284
 8004220:	e75d      	b.n	80040de <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x34a>
			only_integer_at_index[0] = true;
 8004222:	2101      	movs	r1, #1
 8004224:	f88d 1140 	strb.w	r1, [sp, #320]	; 0x140
			status = set_parameters(program_parameters, title_9, GENERAL_PURPOSE_VALVE_CONTROL_PARAMETER_LENGTH, AMOUNT_OF_GENERAL_PURPOSE_VALVE_CONTROL, only_integer_at_index);
 8004228:	ab50      	add	r3, sp, #320	; 0x140
 800422a:	2204      	movs	r2, #4
 800422c:	a856      	add	r0, sp, #344	; 0x158
 800422e:	e756      	b.n	80040de <STM32_PLC_LCD_Show_Control_Program_Settings_Frame+0x34a>
 8004230:	200004ac 	.word	0x200004ac
 8004234:	08016cfe 	.word	0x08016cfe
 8004238:	08016cb1 	.word	0x08016cb1
 800423c:	080171ab 	.word	0x080171ab

08004240 <STM32_PLC_LCD_Execute_Control_Program>:
void STM32_PLC_LCD_Execute_Control_Program(J1939 *j1939) {
 8004240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004244:	ed2d 8b08 	vpush	{d8-d11}
 8004248:	b086      	sub	sp, #24
 800424a:	4605      	mov	r5, r0
	if(STM32_PLC_Digital_Input_Get_Stop()){
 800424c:	f7fd f822 	bl	8001294 <STM32_PLC_Digital_Input_Get_Stop>
 8004250:	b140      	cbz	r0, 8004264 <STM32_PLC_LCD_Execute_Control_Program+0x24>
		STM32_PLC_PWM_Reset();
 8004252:	f7fd fd65 	bl	8001d20 <STM32_PLC_PWM_Reset>
		STM32_PLC_Analog_Output_Reset();
 8004256:	f7fc ff0d 	bl	8001074 <STM32_PLC_Analog_Output_Reset>
}
 800425a:	b006      	add	sp, #24
 800425c:	ecbd 8b08 	vpop	{d8-d11}
 8004260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (prg) {
 8004264:	4bcb      	ldr	r3, [pc, #812]	; (8004594 <STM32_PLC_LCD_Execute_Control_Program+0x354>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	3b01      	subs	r3, #1
 800426a:	2b08      	cmp	r3, #8
 800426c:	d8f5      	bhi.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
 800426e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004272:	0009      	.short	0x0009
 8004274:	00840057 	.word	0x00840057
 8004278:	00ec00cc 	.word	0x00ec00cc
 800427c:	011b010d 	.word	0x011b010d
 8004280:	016e0156 	.word	0x016e0156
 8004284:	4dc4      	ldr	r5, [pc, #784]	; (8004598 <STM32_PLC_LCD_Execute_Control_Program+0x358>)
 8004286:	4fc5      	ldr	r7, [pc, #788]	; (800459c <STM32_PLC_LCD_Execute_Control_Program+0x35c>)
			if(output >= 0xFFFF)
 8004288:	ed9f 9ac5 	vldr	s18, [pc, #788]	; 80045a0 <STM32_PLC_LCD_Execute_Control_Program+0x360>
			if(anti_windup_enabled && error <= 0)
 800428c:	eddf 9ac5 	vldr	s19, [pc, #788]	; 80045a4 <STM32_PLC_LCD_Execute_Control_Program+0x364>
	switch (prg) {
 8004290:	2600      	movs	r6, #0
			if(anti_windup_enabled && error <= 0)
 8004292:	f04f 0800 	mov.w	r8, #0
 8004296:	b2f0      	uxtb	r0, r6
			float setpoint = program_parameters[0 + i*PI_CONTROLLER_PARAMETER_LENGTH];
 8004298:	edd5 8a00 	vldr	s17, [r5]
			float proportional_gain = program_parameters[1 + i*PI_CONTROLLER_PARAMETER_LENGTH];
 800429c:	edd5 aa01 	vldr	s21, [r5, #4]
			float integral_gain = program_parameters[2 + i*PI_CONTROLLER_PARAMETER_LENGTH];
 80042a0:	ed95 ba02 	vldr	s22, [r5, #8]
			float input = STM32_PLC_Analog_Input_ADC_Get(i);
 80042a4:	9003      	str	r0, [sp, #12]
			bool anti_windup_enabled = program_parameters[3 + i*PI_CONTROLLER_PARAMETER_LENGTH] > 0.9f ? true : false; /* 0.9 because float 1.0 is not always 1.0 */
 80042a6:	ed95 aa03 	vldr	s20, [r5, #12]
			float input = STM32_PLC_Analog_Input_ADC_Get(i);
 80042aa:	f7fc fe3b 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
			PI_I[i] += integral_gain*error;
 80042ae:	edd7 7a00 	vldr	s15, [r7]
			if(output >= 0xFFFF)
 80042b2:	9803      	ldr	r0, [sp, #12]
			float error = setpoint - input;
 80042b4:	ee78 8ac0 	vsub.f32	s17, s17, s0
			PI_I[i] += integral_gain*error;
 80042b8:	eeeb 7a28 	vfma.f32	s15, s22, s17
 80042bc:	ece7 7a01 	vstmia	r7!, {s15}
			float output = proportional_gain*error + PI_I[i];
 80042c0:	eeea 7aa8 	vfma.f32	s15, s21, s17
			if(output >= 0xFFFF)
 80042c4:	eef4 7ac9 	vcmpe.f32	s15, s18
 80042c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042cc:	da23      	bge.n	8004316 <STM32_PLC_LCD_Execute_Control_Program+0xd6>
			else if(output <= 0)
 80042ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	d921      	bls.n	800431c <STM32_PLC_LCD_Execute_Control_Program+0xdc>
				ON_Period = (uint16_t)output;
 80042d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042dc:	ee17 3a90 	vmov	r3, s15
 80042e0:	b29c      	uxth	r4, r3
			STM32_PLC_PWM_Set(i, ON_Period);
 80042e2:	4621      	mov	r1, r4
 80042e4:	9003      	str	r0, [sp, #12]
 80042e6:	f7fd fccf 	bl	8001c88 <STM32_PLC_PWM_Set>
			STM32_PLC_Analog_Output_Set(i, ON_Period/16); /* Down scale 16-bit to 12-bit */
 80042ea:	9803      	ldr	r0, [sp, #12]
 80042ec:	0921      	lsrs	r1, r4, #4
 80042ee:	f7fc fea9 	bl	8001044 <STM32_PLC_Analog_Output_Set>
			if(anti_windup_enabled && error <= 0)
 80042f2:	eeb4 aae9 	vcmpe.f32	s20, s19
 80042f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fa:	dd06      	ble.n	800430a <STM32_PLC_LCD_Execute_Control_Program+0xca>
 80042fc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				PI_I[i] = 0;
 8004304:	bf98      	it	ls
 8004306:	f847 8c04 	strls.w	r8, [r7, #-4]
		for(uint8_t i = 0; i < AMOUNT_OF_PI_CONTROLLERS; i++){
 800430a:	3601      	adds	r6, #1
 800430c:	2e03      	cmp	r6, #3
 800430e:	f105 0510 	add.w	r5, r5, #16
 8004312:	d1c0      	bne.n	8004296 <STM32_PLC_LCD_Execute_Control_Program+0x56>
 8004314:	e7a1      	b.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
				ON_Period = 0xFFFF;
 8004316:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800431a:	e7e2      	b.n	80042e2 <STM32_PLC_LCD_Execute_Control_Program+0xa2>
				ON_Period = 0;
 800431c:	2400      	movs	r4, #0
 800431e:	e7e0      	b.n	80042e2 <STM32_PLC_LCD_Execute_Control_Program+0xa2>
 8004320:	4e9d      	ldr	r6, [pc, #628]	; (8004598 <STM32_PLC_LCD_Execute_Control_Program+0x358>)
	switch (prg) {
 8004322:	2500      	movs	r5, #0
 8004324:	b2ec      	uxtb	r4, r5
			float input = STM32_PLC_Analog_Input_ADC_Get(i);
 8004326:	4620      	mov	r0, r4
			float high_threshold = program_parameters[0 + i*PULSE_COUNTER_PARAMETER_LENGTH];
 8004328:	ed96 9a00 	vldr	s18, [r6]
			float low_threshold = program_parameters[1 + i*PULSE_COUNTER_PARAMETER_LENGTH];
 800432c:	edd6 8a01 	vldr	s17, [r6, #4]
			float input = STM32_PLC_Analog_Input_ADC_Get(i);
 8004330:	f7fc fdf8 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
			bool start = STM32_PLC_Digital_Input_Get(i);
 8004334:	4620      	mov	r0, r4
			float input = STM32_PLC_Analog_Input_ADC_Get(i);
 8004336:	eeb0 8a40 	vmov.f32	s16, s0
			bool start = STM32_PLC_Digital_Input_Get(i);
 800433a:	f7fc ff7f 	bl	800123c <STM32_PLC_Digital_Input_Get>
			if(input > high_threshold){
 800433e:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			bool start = STM32_PLC_Digital_Input_Get(i);
 8004346:	4607      	mov	r7, r0
			if(input > high_threshold){
 8004348:	d506      	bpl.n	8004358 <STM32_PLC_LCD_Execute_Control_Program+0x118>
				STM32_PLC_PWM_Set(i, 0);
 800434a:	4620      	mov	r0, r4
 800434c:	2100      	movs	r1, #0
 800434e:	f7fd fc9b 	bl	8001c88 <STM32_PLC_PWM_Set>
				STM32_PLC_Pulse_Count_Set(i);
 8004352:	4620      	mov	r0, r4
 8004354:	f7fd fd02 	bl	8001d5c <STM32_PLC_Pulse_Count_Set>
			if(input <= low_threshold || start){
 8004358:	eef4 8ac8 	vcmpe.f32	s17, s16
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	da00      	bge.n	8004364 <STM32_PLC_LCD_Execute_Control_Program+0x124>
 8004362:	b127      	cbz	r7, 800436e <STM32_PLC_LCD_Execute_Control_Program+0x12e>
				STM32_PLC_PWM_Set(i, 0xFFFF);
 8004364:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004368:	4620      	mov	r0, r4
 800436a:	f7fd fc8d 	bl	8001c88 <STM32_PLC_PWM_Set>
		for(uint8_t i = 0; i < AMOUNT_OF_PULSE_COUNTERS; i++) {
 800436e:	3501      	adds	r5, #1
 8004370:	2d04      	cmp	r5, #4
 8004372:	f106 0608 	add.w	r6, r6, #8
 8004376:	d1d5      	bne.n	8004324 <STM32_PLC_LCD_Execute_Control_Program+0xe4>
 8004378:	e76f      	b.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
 800437a:	4e87      	ldr	r6, [pc, #540]	; (8004598 <STM32_PLC_LCD_Execute_Control_Program+0x358>)
 800437c:	4f8a      	ldr	r7, [pc, #552]	; (80045a8 <STM32_PLC_LCD_Execute_Control_Program+0x368>)
 800437e:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80045b0 <STM32_PLC_LCD_Execute_Control_Program+0x370>
			if(output >= 0xFFFF)
 8004382:	ed9f 9a87 	vldr	s18, [pc, #540]	; 80045a0 <STM32_PLC_LCD_Execute_Control_Program+0x360>
	switch (prg) {
 8004386:	2500      	movs	r5, #0
 8004388:	b2e8      	uxtb	r0, r5
			float setpoint = program_parameters[0 + i*MRAC_CONTROLLER_PARAMETER_LENGTH];
 800438a:	edd6 8a00 	vldr	s17, [r6]
			float integral_gain = program_parameters[1 + i*MRAC_CONTROLLER_PARAMETER_LENGTH];
 800438e:	ed96 8a01 	vldr	s16, [r6, #4]
			float input = STM32_PLC_Analog_Input_ADC_Get(i);
 8004392:	9003      	str	r0, [sp, #12]
 8004394:	f7fc fdc6 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
			MRAC_I1[i] -= integral_gain*setpoint*error;
 8004398:	ee28 7a68 	vnmul.f32	s14, s16, s17
			float error = setpoint - input;
 800439c:	ee78 6ac0 	vsub.f32	s13, s17, s0
			MRAC_I1[i] -= integral_gain*setpoint*error;
 80043a0:	edd7 7a00 	vldr	s15, [r7]
			if(output >= 0xFFFF)
 80043a4:	9803      	ldr	r0, [sp, #12]
			MRAC_I1[i] -= integral_gain*setpoint*error;
 80043a6:	eee7 7a26 	vfma.f32	s15, s14, s13
			MRAC_I2[i] += integral_gain*input*error;
 80043aa:	ee28 8a00 	vmul.f32	s16, s16, s0
 80043ae:	ed98 7a00 	vldr	s14, [r8]
			MRAC_I1[i] -= integral_gain*setpoint*error;
 80043b2:	ece7 7a01 	vstmia	r7!, {s15}
			MRAC_I2[i] += integral_gain*input*error;
 80043b6:	eea8 7a26 	vfma.f32	s14, s16, s13
			float output = setpoint*MRAC_I1[i] - input*MRAC_I2[i];
 80043ba:	ee20 0a47 	vnmul.f32	s0, s0, s14
			MRAC_I2[i] += integral_gain*input*error;
 80043be:	eca8 7a01 	vstmia	r8!, {s14}
			float output = setpoint*MRAC_I1[i] - input*MRAC_I2[i];
 80043c2:	eea7 0aa8 	vfma.f32	s0, s15, s17
			if(output >= 0xFFFF)
 80043c6:	eeb4 0ac9 	vcmpe.f32	s0, s18
 80043ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ce:	da17      	bge.n	8004400 <STM32_PLC_LCD_Execute_Control_Program+0x1c0>
			else if(output <= 0)
 80043d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80043d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d8:	d915      	bls.n	8004406 <STM32_PLC_LCD_Execute_Control_Program+0x1c6>
				ON_Period = (uint16_t)output;
 80043da:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80043de:	ee10 3a10 	vmov	r3, s0
 80043e2:	b29c      	uxth	r4, r3
			STM32_PLC_PWM_Set(i, ON_Period);
 80043e4:	4621      	mov	r1, r4
 80043e6:	9003      	str	r0, [sp, #12]
 80043e8:	3501      	adds	r5, #1
 80043ea:	f7fd fc4d 	bl	8001c88 <STM32_PLC_PWM_Set>
			STM32_PLC_Analog_Output_Set(i, ON_Period/16); /* Down scale 16-bit to 12-bit */
 80043ee:	9803      	ldr	r0, [sp, #12]
 80043f0:	0921      	lsrs	r1, r4, #4
 80043f2:	f7fc fe27 	bl	8001044 <STM32_PLC_Analog_Output_Set>
		for(uint8_t i = 0; i < AMOUNT_OF_MRAC_CONTROLLERS; i++) {
 80043f6:	2d03      	cmp	r5, #3
 80043f8:	f106 0608 	add.w	r6, r6, #8
 80043fc:	d1c4      	bne.n	8004388 <STM32_PLC_LCD_Execute_Control_Program+0x148>
 80043fe:	e72c      	b.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
				ON_Period = 0xFFFF;
 8004400:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004404:	e7ee      	b.n	80043e4 <STM32_PLC_LCD_Execute_Control_Program+0x1a4>
				ON_Period = 0;
 8004406:	2400      	movs	r4, #0
 8004408:	e7ec      	b.n	80043e4 <STM32_PLC_LCD_Execute_Control_Program+0x1a4>
 800440a:	4d63      	ldr	r5, [pc, #396]	; (8004598 <STM32_PLC_LCD_Execute_Control_Program+0x358>)
	switch (prg) {
 800440c:	2400      	movs	r4, #0
 800440e:	b2e0      	uxtb	r0, r4
			uint16_t input = STM32_PLC_Analog_Input_ADC_Get(i);
 8004410:	9003      	str	r0, [sp, #12]
 8004412:	f7fc fd87 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8004416:	eebc 0ac0 	vcvt.u32.f32	s0, s0
			float high_threshold = program_parameters[i];
 800441a:	ecf5 7a01 	vldmia	r5!, {s15}
			if(input >= high_threshold)
 800441e:	9803      	ldr	r0, [sp, #12]
 8004420:	ee10 3a10 	vmov	r3, s0
 8004424:	b29b      	uxth	r3, r3
 8004426:	ee00 3a10 	vmov	s0, r3
 800442a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800442e:	3401      	adds	r4, #1
 8004430:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				STM32_PLC_PWM_Set(i, 0xFFFF);
 8004438:	bfac      	ite	ge
 800443a:	f64f 71ff 	movwge	r1, #65535	; 0xffff
				STM32_PLC_PWM_Set(i, 0);
 800443e:	2100      	movlt	r1, #0
 8004440:	f7fd fc22 	bl	8001c88 <STM32_PLC_PWM_Set>
		for(uint8_t i = 0; i < AMOUNT_OF_ON_OFF_CONTROLLERS; i++){
 8004444:	2c04      	cmp	r4, #4
 8004446:	d1e2      	bne.n	800440e <STM32_PLC_LCD_Execute_Control_Program+0x1ce>
 8004448:	e707      	b.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
	switch (prg) {
 800444a:	2600      	movs	r6, #0
 800444c:	b2f4      	uxtb	r4, r6
			bool single_operation = STM32_PLC_Digital_Input_Get(i);
 800444e:	4620      	mov	r0, r4
 8004450:	f7fc fef4 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8004454:	4605      	mov	r5, r0
			uint16_t input = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 8004456:	4620      	mov	r0, r4
 8004458:	f7fc fd54 	bl	8000f04 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 800445c:	4601      	mov	r1, r0
			if(single_operation){
 800445e:	b135      	cbz	r5, 800446e <STM32_PLC_LCD_Execute_Control_Program+0x22e>
				STM32_PLC_PWM_Set(i, input);              /* 0% - 100 % */
 8004460:	4620      	mov	r0, r4
 8004462:	3601      	adds	r6, #1
				STM32_PLC_PWM_Set(i+i+1, 0x8000 + input/2); /* 50% - 100% */
 8004464:	f7fd fc10 	bl	8001c88 <STM32_PLC_PWM_Set>
		for(uint8_t i = 0; i < AMOUNT_OF_INPUT_OUTPUT_PWM; i++){
 8004468:	2e04      	cmp	r6, #4
 800446a:	d1ef      	bne.n	800444c <STM32_PLC_LCD_Execute_Control_Program+0x20c>
 800446c:	e6f5      	b.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
				STM32_PLC_PWM_Set(i+i, 0x8000 - input/2);   /* 50 - 0% */
 800446e:	f3c0 054f 	ubfx	r5, r0, #1, #16
 8004472:	0064      	lsls	r4, r4, #1
 8004474:	b2e4      	uxtb	r4, r4
 8004476:	f5c5 4100 	rsb	r1, r5, #32768	; 0x8000
 800447a:	4620      	mov	r0, r4
 800447c:	b289      	uxth	r1, r1
				STM32_PLC_PWM_Set(i+i+1, 0x8000 + input/2); /* 50% - 100% */
 800447e:	3401      	adds	r4, #1
				STM32_PLC_PWM_Set(i+i, 0x8000 - input/2);   /* 50 - 0% */
 8004480:	f7fd fc02 	bl	8001c88 <STM32_PLC_PWM_Set>
				STM32_PLC_PWM_Set(i+i+1, 0x8000 + input/2); /* 50% - 100% */
 8004484:	f485 4100 	eor.w	r1, r5, #32768	; 0x8000
 8004488:	b2e0      	uxtb	r0, r4
 800448a:	e7ea      	b.n	8004462 <STM32_PLC_LCD_Execute_Control_Program+0x222>
	switch (prg) {
 800448c:	2400      	movs	r4, #0
 800448e:	b2e5      	uxtb	r5, r4
			uint16_t input = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 8004490:	4628      	mov	r0, r5
 8004492:	f7fc fd37 	bl	8000f04 <STM32_PLC_Analog_Input_ADC_Get_Raw>
			STM32_PLC_Analog_Output_Set(i, input/16);	/* Down scale 16-bit to 12-bit */
 8004496:	3401      	adds	r4, #1
 8004498:	f3c0 110f 	ubfx	r1, r0, #4, #16
 800449c:	4628      	mov	r0, r5
 800449e:	f7fc fdd1 	bl	8001044 <STM32_PLC_Analog_Output_Set>
		for(uint8_t i = 0; i < AMOUNT_OF_INPUT_OUTPUT_ANALOG; i++){
 80044a2:	2c03      	cmp	r4, #3
 80044a4:	d1f3      	bne.n	800448e <STM32_PLC_LCD_Execute_Control_Program+0x24e>
 80044a6:	e6d8      	b.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
		bool alarm_A_active = STM32_PLC_RTC_Get_AlarmAB(RTC_ALARM_A, &minutes, &hours, &date, &week_day);
 80044a8:	f10d 0417 	add.w	r4, sp, #23
 80044ac:	9400      	str	r4, [sp, #0]
 80044ae:	f10d 0316 	add.w	r3, sp, #22
 80044b2:	f10d 0215 	add.w	r2, sp, #21
 80044b6:	a905      	add	r1, sp, #20
 80044b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80044bc:	f7fd fd16 	bl	8001eec <STM32_PLC_RTC_Get_AlarmAB>
		bool alarm_B_active = STM32_PLC_RTC_Get_AlarmAB(RTC_ALARM_B, &minutes, &hours, &date, &week_day);
 80044c0:	9400      	str	r4, [sp, #0]
		bool alarm_A_active = STM32_PLC_RTC_Get_AlarmAB(RTC_ALARM_A, &minutes, &hours, &date, &week_day);
 80044c2:	4605      	mov	r5, r0
		bool alarm_B_active = STM32_PLC_RTC_Get_AlarmAB(RTC_ALARM_B, &minutes, &hours, &date, &week_day);
 80044c4:	f10d 0316 	add.w	r3, sp, #22
 80044c8:	f10d 0215 	add.w	r2, sp, #21
 80044cc:	a905      	add	r1, sp, #20
 80044ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80044d2:	f7fd fd0b 	bl	8001eec <STM32_PLC_RTC_Get_AlarmAB>
 80044d6:	4604      	mov	r4, r0
		if(alarm_A_active){
 80044d8:	b19d      	cbz	r5, 8004502 <STM32_PLC_LCD_Execute_Control_Program+0x2c2>
			STM32_PLC_PWM_Set(0, 0xFFFF); /* PWM0 100% */
 80044da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044de:	2000      	movs	r0, #0
 80044e0:	f7fd fbd2 	bl	8001c88 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(1, 0);      /* PWM1 0% */
 80044e4:	2100      	movs	r1, #0
			STM32_PLC_PWM_Set(1, 0xFFFF); /* PWM1 100% */
 80044e6:	2001      	movs	r0, #1
 80044e8:	f7fd fbce 	bl	8001c88 <STM32_PLC_PWM_Set>
		if(alarm_B_active){
 80044ec:	b184      	cbz	r4, 8004510 <STM32_PLC_LCD_Execute_Control_Program+0x2d0>
			STM32_PLC_PWM_Set(2, 0xFFFF); /* PWM2 100% */
 80044ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044f2:	2002      	movs	r0, #2
 80044f4:	f7fd fbc8 	bl	8001c88 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(3, 0);      /* PWM3 0% */
 80044f8:	2100      	movs	r1, #0
			STM32_PLC_PWM_Set(3, 0xFFFF); /* PWM3 100% */
 80044fa:	2003      	movs	r0, #3
 80044fc:	f7fd fbc4 	bl	8001c88 <STM32_PLC_PWM_Set>
 8004500:	e6ab      	b.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
			STM32_PLC_PWM_Set(0, 0);      /* PWM0 0% */
 8004502:	4629      	mov	r1, r5
 8004504:	4628      	mov	r0, r5
 8004506:	f7fd fbbf 	bl	8001c88 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(1, 0xFFFF); /* PWM1 100% */
 800450a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800450e:	e7ea      	b.n	80044e6 <STM32_PLC_LCD_Execute_Control_Program+0x2a6>
			STM32_PLC_PWM_Set(2, 0);      /* PWM2 0% */
 8004510:	4621      	mov	r1, r4
 8004512:	2002      	movs	r0, #2
 8004514:	f7fd fbb8 	bl	8001c88 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(3, 0xFFFF); /* PWM3 100% */
 8004518:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800451c:	e7ed      	b.n	80044fa <STM32_PLC_LCD_Execute_Control_Program+0x2ba>
	switch (prg) {
 800451e:	2600      	movs	r6, #0
			uint8_t standard_flow = input/257; /* Down scale 16-bit to 8-bit */
 8004520:	f240 1801 	movw	r8, #257	; 0x101
 8004524:	b2f7      	uxtb	r7, r6
			uint16_t input = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 8004526:	4638      	mov	r0, r7
 8004528:	f7fc fcec 	bl	8000f04 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 800452c:	4604      	mov	r4, r0
			bool digital = STM32_PLC_Digital_Input_Get(i);
 800452e:	4638      	mov	r0, r7
 8004530:	f7fc fe84 	bl	800123c <STM32_PLC_Digital_Input_Get>
			uint8_t standard_flow = input/257; /* Down scale 16-bit to 8-bit */
 8004534:	fbb4 f2f8 	udiv	r2, r4, r8
			ISO_11783_Send_Auxiliary_Valve_Command(j1939, valve_number, standard_flow, fail_safe_mode, valve_state);
 8004538:	9000      	str	r0, [sp, #0]
 800453a:	2300      	movs	r3, #0
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	4639      	mov	r1, r7
 8004540:	4628      	mov	r0, r5
 8004542:	3601      	adds	r6, #1
 8004544:	f7fd fed5 	bl	80022f2 <ISO_11783_Send_Auxiliary_Valve_Command>
		for(uint8_t i = 0; i < AMOUNT_OF_AUXILIARY_VALVE_CONTROL; i++){
 8004548:	2e04      	cmp	r6, #4
 800454a:	d1eb      	bne.n	8004524 <STM32_PLC_LCD_Execute_Control_Program+0x2e4>
 800454c:	e685      	b.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
 800454e:	4f12      	ldr	r7, [pc, #72]	; (8004598 <STM32_PLC_LCD_Execute_Control_Program+0x358>)
			uint8_t DA = (uint8_t) (program_parameters[i] + 0.1f); /* Destination address. DA will always be an integer e.g 199.9999 will be 200 */
 8004550:	ed9f 8a16 	vldr	s16, [pc, #88]	; 80045ac <STM32_PLC_LCD_Execute_Control_Program+0x36c>
	switch (prg) {
 8004554:	2400      	movs	r4, #0
 8004556:	fa5f f884 	uxtb.w	r8, r4
			uint16_t input = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 800455a:	4640      	mov	r0, r8
 800455c:	f7fc fcd2 	bl	8000f04 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 8004560:	4606      	mov	r6, r0
			bool DI = STM32_PLC_Digital_Input_Get(i);
 8004562:	4640      	mov	r0, r8
 8004564:	f7fc fe6a 	bl	800123c <STM32_PLC_Digital_Input_Get>
			uint8_t DA = (uint8_t) (program_parameters[i] + 0.1f); /* Destination address. DA will always be an integer e.g 199.9999 will be 200 */
 8004568:	ecf7 7a01 	vldmia	r7!, {s15}
 800456c:	ee77 7a88 	vadd.f32	s15, s15, s16
			ISO_11783_Send_General_Purpose_Valve_Command(j1939, DA, standard_flow, fail_safe_mode, valve_state, extended_flow);
 8004570:	2300      	movs	r3, #0
			uint8_t DA = (uint8_t) (program_parameters[i] + 0.1f); /* Destination address. DA will always be an integer e.g 199.9999 will be 200 */
 8004572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			ISO_11783_Send_General_Purpose_Valve_Command(j1939, DA, standard_flow, fail_safe_mode, valve_state, extended_flow);
 8004576:	e9cd 0600 	strd	r0, r6, [sp]
			uint8_t DA = (uint8_t) (program_parameters[i] + 0.1f); /* Destination address. DA will always be an integer e.g 199.9999 will be 200 */
 800457a:	edcd 7a03 	vstr	s15, [sp, #12]
			ISO_11783_Send_General_Purpose_Valve_Command(j1939, DA, standard_flow, fail_safe_mode, valve_state, extended_flow);
 800457e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004582:	461a      	mov	r2, r3
 8004584:	4628      	mov	r0, r5
 8004586:	3401      	adds	r4, #1
 8004588:	f7fd ff6a 	bl	8002460 <ISO_11783_Send_General_Purpose_Valve_Command>
		for(uint8_t i = 0; i < AMOUNT_OF_GENERAL_PURPOSE_VALVE_CONTROL; i++){
 800458c:	2c04      	cmp	r4, #4
 800458e:	d1e2      	bne.n	8004556 <STM32_PLC_LCD_Execute_Control_Program+0x316>
 8004590:	e663      	b.n	800425a <STM32_PLC_LCD_Execute_Control_Program+0x1a>
 8004592:	bf00      	nop
 8004594:	200004a8 	.word	0x200004a8
 8004598:	200004ac 	.word	0x200004ac
 800459c:	2000049c 	.word	0x2000049c
 80045a0:	477fff00 	.word	0x477fff00
 80045a4:	3f666666 	.word	0x3f666666
 80045a8:	20000484 	.word	0x20000484
 80045ac:	3dcccccd 	.word	0x3dcccccd
 80045b0:	20000490 	.word	0x20000490

080045b4 <show_numpad_question>:

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint8_t min_value, uint8_t max_value, uint8_t *value){
 80045b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045b6:	460f      	mov	r7, r1
	bool minusbutton_show = false;
	bool decimalbutton_show = false;
	float number_value;
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 80045b8:	2100      	movs	r1, #0
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint8_t min_value, uint8_t max_value, uint8_t *value){
 80045ba:	4615      	mov	r5, r2
 80045bc:	461c      	mov	r4, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 80045be:	aa01      	add	r2, sp, #4
 80045c0:	4603      	mov	r3, r0
 80045c2:	4608      	mov	r0, r1
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint8_t min_value, uint8_t max_value, uint8_t *value){
 80045c4:	9e08      	ldr	r6, [sp, #32]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 80045c6:	f003 f8ed 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 80045ca:	4601      	mov	r1, r0
 80045cc:	b928      	cbnz	r0, 80045da <show_numpad_question+0x26>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80045ce:	4638      	mov	r0, r7
 80045d0:	f000 fe5e 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
		return 1;
 80045d4:	2001      	movs	r0, #1
	else if(number_value > max_value)
		*value = max_value;
	else
		*value = (uint32_t) number_value;
	return 0;
}
 80045d6:	b003      	add	sp, #12
 80045d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(number_value < min_value)
 80045da:	ee07 5a10 	vmov	s14, r5
 80045de:	eddd 7a01 	vldr	s15, [sp, #4]
 80045e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80045e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ee:	dd02      	ble.n	80045f6 <show_numpad_question+0x42>
		*value = min_value;
 80045f0:	7035      	strb	r5, [r6, #0]
	return 0;
 80045f2:	2000      	movs	r0, #0
 80045f4:	e7ef      	b.n	80045d6 <show_numpad_question+0x22>
	else if(number_value > max_value)
 80045f6:	ee07 4a10 	vmov	s14, r4
 80045fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80045fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*value = (uint32_t) number_value;
 8004606:	bfd7      	itett	le
 8004608:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		*value = max_value;
 800460c:	7034      	strbgt	r4, [r6, #0]
		*value = (uint32_t) number_value;
 800460e:	ee17 3a90 	vmovle	r3, s15
 8004612:	7033      	strble	r3, [r6, #0]
 8004614:	e7ed      	b.n	80045f2 <show_numpad_question+0x3e>
	...

08004618 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame>:
void STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(uint8_t *frame_id) {
 8004618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461c:	b091      	sub	sp, #68	; 0x44
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800461e:	f04f 080f 	mov.w	r8, #15
 8004622:	f8cd 8000 	str.w	r8, [sp]
 8004626:	23ea      	movs	r3, #234	; 0xea
 8004628:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800462c:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(uint8_t *frame_id) {
 800462e:	4604      	mov	r4, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004630:	2033      	movs	r0, #51	; 0x33
	ILI9341_print_text("Configure the date and time and alarm", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004632:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004634:	f003 fd1c 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8004638:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800463c:	f240 1209 	movw	r2, #265	; 0x109
 8004640:	211e      	movs	r1, #30
 8004642:	2032      	movs	r0, #50	; 0x32
 8004644:	f003 fd50 	bl	80080e8 <ILI9341_draw_horizontal_line>
	STM32_PLC_RTC_Get_Date(&date, &month, &year);
 8004648:	f10d 0a11 	add.w	sl, sp, #17
	ILI9341_print_text("Configure the date and time and alarm", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800464c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004650:	e9cd 8500 	strd	r8, r5, [sp]
 8004654:	48ad      	ldr	r0, [pc, #692]	; (800490c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2f4>)
 8004656:	220a      	movs	r2, #10
 8004658:	2137      	movs	r1, #55	; 0x37
 800465a:	f003 fe25 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 800465e:	f10d 0715 	add.w	r7, sp, #21
 8004662:	f10d 0616 	add.w	r6, sp, #22
	STM32_PLC_RTC_Get_Date(&date, &month, &year);
 8004666:	4652      	mov	r2, sl
 8004668:	f10d 0112 	add.w	r1, sp, #18
 800466c:	a805      	add	r0, sp, #20
 800466e:	f7fd fb93 	bl	8001d98 <STM32_PLC_RTC_Get_Date>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 8004672:	463a      	mov	r2, r7
 8004674:	4631      	mov	r1, r6
 8004676:	f10d 0017 	add.w	r0, sp, #23
 800467a:	f7fd fbb9 	bl	8001df0 <STM32_PLC_RTC_Get_Time>
	ILI9341_print_text("Current date and time:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800467e:	e9cd 8500 	strd	r8, r5, [sp]
 8004682:	48a3      	ldr	r0, [pc, #652]	; (8004910 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2f8>)
 8004684:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004688:	2223      	movs	r2, #35	; 0x23
 800468a:	2137      	movs	r1, #55	; 0x37
 800468c:	f003 fe0c 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Date:%i-%i-%i Time:%i:%i:%i", year + 2000, month, date, hours, minutes, seconds);
 8004690:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004694:	9303      	str	r3, [sp, #12]
 8004696:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800469a:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800469e:	9302      	str	r3, [sp, #8]
 80046a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80046aa:	499a      	ldr	r1, [pc, #616]	; (8004914 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2fc>)
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80046b2:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80046b6:	a806      	add	r0, sp, #24
 80046b8:	f00e fb34 	bl	8012d24 <siprintf>
	bool active = STM32_PLC_RTC_Get_AlarmAB(RTC_ALARM_A, &minutes, &hours, &date, &week_day);
 80046bc:	f10d 0913 	add.w	r9, sp, #19
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 80046c0:	e9cd 8500 	strd	r8, r5, [sp]
 80046c4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046c8:	222d      	movs	r2, #45	; 0x2d
 80046ca:	2137      	movs	r1, #55	; 0x37
 80046cc:	a806      	add	r0, sp, #24
 80046ce:	f003 fdeb 	bl	80082a8 <ILI9341_print_text>
	bool active = STM32_PLC_RTC_Get_AlarmAB(RTC_ALARM_A, &minutes, &hours, &date, &week_day);
 80046d2:	ab05      	add	r3, sp, #20
 80046d4:	463a      	mov	r2, r7
 80046d6:	4631      	mov	r1, r6
 80046d8:	f8cd 9000 	str.w	r9, [sp]
 80046dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80046e0:	f7fd fc04 	bl	8001eec <STM32_PLC_RTC_Get_AlarmAB>
	ILI9341_print_text("Current alarm A:", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 80046e4:	2237      	movs	r2, #55	; 0x37
	bool active = STM32_PLC_RTC_Get_AlarmAB(RTC_ALARM_A, &minutes, &hours, &date, &week_day);
 80046e6:	4683      	mov	fp, r0
	ILI9341_print_text("Current alarm A:", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 80046e8:	4611      	mov	r1, r2
 80046ea:	e9cd 8500 	strd	r8, r5, [sp]
 80046ee:	488a      	ldr	r0, [pc, #552]	; (8004918 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x300>)
 80046f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046f4:	f003 fdd8 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Date:%i Time:%i:%i Active:%i", date, hours, minutes, active);
 80046f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80046fc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8004700:	4986      	ldr	r1, [pc, #536]	; (800491c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x304>)
 8004702:	f8cd b004 	str.w	fp, [sp, #4]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	a806      	add	r0, sp, #24
 800470a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800470e:	f00e fb09 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8004712:	e9cd 8500 	strd	r8, r5, [sp]
 8004716:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800471a:	2241      	movs	r2, #65	; 0x41
 800471c:	2137      	movs	r1, #55	; 0x37
 800471e:	a806      	add	r0, sp, #24
 8004720:	f003 fdc2 	bl	80082a8 <ILI9341_print_text>
	active = STM32_PLC_RTC_Get_AlarmAB(RTC_ALARM_B, &minutes, &hours, &date, &week_day);
 8004724:	ab05      	add	r3, sp, #20
 8004726:	463a      	mov	r2, r7
 8004728:	4631      	mov	r1, r6
 800472a:	f8cd 9000 	str.w	r9, [sp]
 800472e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004732:	f7fd fbdb 	bl	8001eec <STM32_PLC_RTC_Get_AlarmAB>
	ILI9341_print_text("Current alarm B:", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8004736:	e9cd 8500 	strd	r8, r5, [sp]
	active = STM32_PLC_RTC_Get_AlarmAB(RTC_ALARM_B, &minutes, &hours, &date, &week_day);
 800473a:	4683      	mov	fp, r0
	ILI9341_print_text("Current alarm B:", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800473c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004740:	4877      	ldr	r0, [pc, #476]	; (8004920 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x308>)
 8004742:	224b      	movs	r2, #75	; 0x4b
 8004744:	2137      	movs	r1, #55	; 0x37
 8004746:	f003 fdaf 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Week day:%i Time:%i:%i Active:%i", week_day, hours, minutes, active);
 800474a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800474e:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8004752:	4974      	ldr	r1, [pc, #464]	; (8004924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x30c>)
 8004754:	f8cd b004 	str.w	fp, [sp, #4]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	a806      	add	r0, sp, #24
 800475c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8004760:	f00e fae0 	bl	8012d24 <siprintf>
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8004764:	f44f 6bfc 	mov.w	fp, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8004768:	e9cd 8500 	strd	r8, r5, [sp]
 800476c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004770:	2255      	movs	r2, #85	; 0x55
 8004772:	2137      	movs	r1, #55	; 0x37
 8004774:	a806      	add	r0, sp, #24
 8004776:	f003 fd97 	bl	80082a8 <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 800477a:	f04f 0800 	mov.w	r8, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 800477e:	23dc      	movs	r3, #220	; 0xdc
 8004780:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004784:	21c3      	movs	r1, #195	; 0xc3
 8004786:	2041      	movs	r0, #65	; 0x41
 8004788:	f8cd b000 	str.w	fp, [sp]
 800478c:	f003 fc70 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8004790:	23dc      	movs	r3, #220	; 0xdc
 8004792:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004796:	21c3      	movs	r1, #195	; 0xc3
 8004798:	2041      	movs	r0, #65	; 0x41
 800479a:	f8cd 8000 	str.w	r8, [sp]
 800479e:	f003 fce9 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Set date time alarm", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80047a2:	2302      	movs	r3, #2
 80047a4:	e9cd b300 	strd	fp, r3, [sp]
 80047a8:	485f      	ldr	r0, [pc, #380]	; (8004928 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x310>)
 80047aa:	4643      	mov	r3, r8
 80047ac:	22c8      	movs	r2, #200	; 0xc8
 80047ae:	2146      	movs	r1, #70	; 0x46
 80047b0:	f003 fd7a 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 80047b4:	21c3      	movs	r1, #195	; 0xc3
 80047b6:	23dc      	movs	r3, #220	; 0xdc
 80047b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047bc:	2041      	movs	r0, #65	; 0x41
 80047be:	f004 fc15 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set date and time?") == 0) {
 80047c2:	485a      	ldr	r0, [pc, #360]	; (800492c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x314>)
 80047c4:	f7ff f818 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80047c8:	4601      	mov	r1, r0
 80047ca:	b928      	cbnz	r0, 80047d8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1c0>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80047cc:	4620      	mov	r0, r4
 80047ce:	f000 fd5f 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 80047d2:	b011      	add	sp, #68	; 0x44
 80047d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(show_numpad_question("Enter year between 0 and 99", frame_id, 0, 99, &year))
 80047d8:	4855      	ldr	r0, [pc, #340]	; (8004930 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x318>)
 80047da:	f8cd a000 	str.w	sl, [sp]
 80047de:	2363      	movs	r3, #99	; 0x63
 80047e0:	4642      	mov	r2, r8
 80047e2:	4621      	mov	r1, r4
 80047e4:	f7ff fee6 	bl	80045b4 <show_numpad_question>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d1f2      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	if(show_numpad_question("Enter month between 1 and 12", frame_id, 1, 11, &month))
 80047ec:	f10d 0312 	add.w	r3, sp, #18
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4850      	ldr	r0, [pc, #320]	; (8004934 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x31c>)
 80047f4:	230b      	movs	r3, #11
 80047f6:	462a      	mov	r2, r5
 80047f8:	4621      	mov	r1, r4
 80047fa:	f7ff fedb 	bl	80045b4 <show_numpad_question>
 80047fe:	2800      	cmp	r0, #0
 8004800:	d1e7      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	if(show_numpad_question("Enter week day between 1 and 7", frame_id, 1, 7, &week_day))
 8004802:	484d      	ldr	r0, [pc, #308]	; (8004938 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x320>)
 8004804:	f8cd 9000 	str.w	r9, [sp]
 8004808:	2307      	movs	r3, #7
 800480a:	462a      	mov	r2, r5
 800480c:	4621      	mov	r1, r4
 800480e:	f7ff fed1 	bl	80045b4 <show_numpad_question>
 8004812:	2800      	cmp	r0, #0
 8004814:	d1dd      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	if(show_numpad_question("Enter date between 1 and 31", frame_id, 1, 31, &date))
 8004816:	ab05      	add	r3, sp, #20
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	462a      	mov	r2, r5
 800481c:	4847      	ldr	r0, [pc, #284]	; (800493c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x324>)
 800481e:	231f      	movs	r3, #31
 8004820:	4621      	mov	r1, r4
 8004822:	f7ff fec7 	bl	80045b4 <show_numpad_question>
 8004826:	4602      	mov	r2, r0
 8004828:	2800      	cmp	r0, #0
 800482a:	d1d2      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	if(show_numpad_question("Enter hours between 0 and 23", frame_id, 0, 23, &hours))
 800482c:	4844      	ldr	r0, [pc, #272]	; (8004940 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x328>)
 800482e:	9700      	str	r7, [sp, #0]
 8004830:	2317      	movs	r3, #23
 8004832:	4621      	mov	r1, r4
 8004834:	f7ff febe 	bl	80045b4 <show_numpad_question>
 8004838:	4602      	mov	r2, r0
 800483a:	2800      	cmp	r0, #0
 800483c:	d1c9      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	if(show_numpad_question("Enter minutes between 0 and 59", frame_id, 0, 59, &minutes))
 800483e:	4841      	ldr	r0, [pc, #260]	; (8004944 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x32c>)
 8004840:	9600      	str	r6, [sp, #0]
 8004842:	233b      	movs	r3, #59	; 0x3b
 8004844:	4621      	mov	r1, r4
 8004846:	f7ff feb5 	bl	80045b4 <show_numpad_question>
 800484a:	4680      	mov	r8, r0
 800484c:	2800      	cmp	r0, #0
 800484e:	d1c0      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	STM32_PLC_RTC_Set_Date(date, week_day, month, year);
 8004850:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8004854:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8004858:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800485c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8004860:	f7fd fab2 	bl	8001dc8 <STM32_PLC_RTC_Set_Date>
	STM32_PLC_RTC_Set_Time(0, minutes, hours);
 8004864:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004868:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800486c:	4640      	mov	r0, r8
 800486e:	f7fd fadd 	bl	8001e2c <STM32_PLC_RTC_Set_Time>
	if(show_numpad_question("Alarm A:Enter hours between 0 and 23", frame_id, 0, 23, &hours))
 8004872:	4642      	mov	r2, r8
 8004874:	4834      	ldr	r0, [pc, #208]	; (8004948 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x330>)
 8004876:	9700      	str	r7, [sp, #0]
 8004878:	2317      	movs	r3, #23
 800487a:	4621      	mov	r1, r4
 800487c:	f7ff fe9a 	bl	80045b4 <show_numpad_question>
 8004880:	4602      	mov	r2, r0
 8004882:	2800      	cmp	r0, #0
 8004884:	d1a5      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	if(show_numpad_question("Alarm A:Enter minutes between 0 and 59", frame_id, 0, 59, &minutes))
 8004886:	4831      	ldr	r0, [pc, #196]	; (800494c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x334>)
 8004888:	9600      	str	r6, [sp, #0]
 800488a:	233b      	movs	r3, #59	; 0x3b
 800488c:	4621      	mov	r1, r4
 800488e:	f7ff fe91 	bl	80045b4 <show_numpad_question>
 8004892:	2800      	cmp	r0, #0
 8004894:	d19d      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	if(show_numpad_question("Alarm A:Enter date between 1 and 31", frame_id, 1, 31, &date))
 8004896:	ab05      	add	r3, sp, #20
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	482d      	ldr	r0, [pc, #180]	; (8004950 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x338>)
 800489c:	231f      	movs	r3, #31
 800489e:	462a      	mov	r2, r5
 80048a0:	4621      	mov	r1, r4
 80048a2:	f7ff fe87 	bl	80045b4 <show_numpad_question>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d193      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	STM32_PLC_RTC_Set_AlarmA(minutes, hours, date);
 80048aa:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80048ae:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80048b2:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80048b6:	f7fd fad5 	bl	8001e64 <STM32_PLC_RTC_Set_AlarmA>
	if(show_numpad_question("Alarm B:Enter hours between 0 and 23", frame_id, 0, 23, &hours))
 80048ba:	2200      	movs	r2, #0
 80048bc:	4825      	ldr	r0, [pc, #148]	; (8004954 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x33c>)
 80048be:	9700      	str	r7, [sp, #0]
 80048c0:	2317      	movs	r3, #23
 80048c2:	4621      	mov	r1, r4
 80048c4:	f7ff fe76 	bl	80045b4 <show_numpad_question>
 80048c8:	4602      	mov	r2, r0
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d181      	bne.n	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	if(show_numpad_question("Alarm B:Enter minutes between 0 and 59", frame_id, 0, 59, &minutes))
 80048ce:	4822      	ldr	r0, [pc, #136]	; (8004958 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x340>)
 80048d0:	9600      	str	r6, [sp, #0]
 80048d2:	233b      	movs	r3, #59	; 0x3b
 80048d4:	4621      	mov	r1, r4
 80048d6:	f7ff fe6d 	bl	80045b4 <show_numpad_question>
 80048da:	2800      	cmp	r0, #0
 80048dc:	f47f af79 	bne.w	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	if(show_numpad_question("Alarm B:Enter week day between 1 and 7", frame_id, 1, 7, &week_day))
 80048e0:	481e      	ldr	r0, [pc, #120]	; (800495c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x344>)
 80048e2:	f8cd 9000 	str.w	r9, [sp]
 80048e6:	2307      	movs	r3, #7
 80048e8:	2201      	movs	r2, #1
 80048ea:	4621      	mov	r1, r4
 80048ec:	f7ff fe62 	bl	80045b4 <show_numpad_question>
 80048f0:	4605      	mov	r5, r0
 80048f2:	2800      	cmp	r0, #0
 80048f4:	f47f af6d 	bne.w	80047d2 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ba>
	STM32_PLC_RTC_Set_AlarmB(minutes, hours, week_day);
 80048f8:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80048fc:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8004900:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8004904:	f7fd face 	bl	8001ea4 <STM32_PLC_RTC_Set_AlarmB>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004908:	4629      	mov	r1, r5
 800490a:	e75f      	b.n	80047cc <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1b4>
 800490c:	080171fa 	.word	0x080171fa
 8004910:	08017220 	.word	0x08017220
 8004914:	08017237 	.word	0x08017237
 8004918:	08017253 	.word	0x08017253
 800491c:	08017264 	.word	0x08017264
 8004920:	08017281 	.word	0x08017281
 8004924:	08017292 	.word	0x08017292
 8004928:	080172b3 	.word	0x080172b3
 800492c:	080172c7 	.word	0x080172c7
 8004930:	080172e9 	.word	0x080172e9
 8004934:	08017305 	.word	0x08017305
 8004938:	080173e6 	.word	0x080173e6
 800493c:	08017376 	.word	0x08017376
 8004940:	0801732a 	.word	0x0801732a
 8004944:	0801734f 	.word	0x0801734f
 8004948:	08017322 	.word	0x08017322
 800494c:	08017347 	.word	0x08017347
 8004950:	0801736e 	.word	0x0801736e
 8004954:	08017392 	.word	0x08017392
 8004958:	080173b7 	.word	0x080173b7
 800495c:	080173de 	.word	0x080173de

08004960 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(uint8_t *frame_id) {
 8004960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004964:	ed2d 8b02 	vpush	{d8}
 8004968:	b093      	sub	sp, #76	; 0x4c
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800496a:	260f      	movs	r6, #15
 800496c:	23ea      	movs	r3, #234	; 0xea
 800496e:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8004972:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(uint8_t *frame_id) {
 8004974:	4680      	mov	r8, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004976:	9600      	str	r6, [sp, #0]
 8004978:	2033      	movs	r0, #51	; 0x33
 800497a:	f003 fb79 	bl	8008070 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set encoder revolution", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800497e:	2401      	movs	r4, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8004980:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004984:	f240 1209 	movw	r2, #265	; 0x109
 8004988:	211e      	movs	r1, #30
 800498a:	2032      	movs	r0, #50	; 0x32
 800498c:	f003 fbac 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set encoder revolution", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004990:	4879      	ldr	r0, [pc, #484]	; (8004b78 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x218>)
 8004992:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004996:	220a      	movs	r2, #10
 8004998:	2137      	movs	r1, #55	; 0x37
 800499a:	e9cd 6400 	strd	r6, r4, [sp]
 800499e:	f003 fc83 	bl	80082a8 <ILI9341_print_text>

	/* Show all calibration inputs */
	ILI9341_print_text("Encoder counts between:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 80049a2:	4876      	ldr	r0, [pc, #472]	; (8004b7c <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x21c>)
 80049a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049a8:	2223      	movs	r2, #35	; 0x23
 80049aa:	2137      	movs	r1, #55	; 0x37
 80049ac:	e9cd 6400 	strd	r6, r4, [sp]
 80049b0:	f003 fc7a 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("-32767 to 32767", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 80049b4:	4872      	ldr	r0, [pc, #456]	; (8004b80 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x220>)
 80049b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049ba:	222d      	movs	r2, #45	; 0x2d
 80049bc:	2137      	movs	r1, #55	; 0x37
 80049be:	e9cd 6400 	strd	r6, r4, [sp]
 80049c2:	f003 fc71 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Set how many pulses one", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 80049c6:	2237      	movs	r2, #55	; 0x37
 80049c8:	4611      	mov	r1, r2
 80049ca:	486e      	ldr	r0, [pc, #440]	; (8004b84 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x224>)
 80049cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049d0:	e9cd 6400 	strd	r6, r4, [sp]
 80049d4:	f003 fc68 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("revolution is for encoder:", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80049d8:	486b      	ldr	r0, [pc, #428]	; (8004b88 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x228>)
 80049da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049de:	2241      	movs	r2, #65	; 0x41
 80049e0:	2137      	movs	r1, #55	; 0x37
 80049e2:	e9cd 6400 	strd	r6, r4, [sp]
 80049e6:	f003 fc5f 	bl	80082a8 <ILI9341_print_text>

	/* Show selected frequency */
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 80049ea:	f7fd faf7 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 80049ee:	4605      	mov	r5, r0
 80049f0:	b158      	cbz	r0, 8004a0a <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0xaa>
		STM32_PLC_LCD_Show_Information_OK_Dialog("Could not mount SD card");
 80049f2:	4866      	ldr	r0, [pc, #408]	; (8004b8c <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x22c>)
 80049f4:	f7fe fe8e 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
	STM32_PLC_SD_Open_Existing_File_With_Write("ENCODER.TXT");
	sprintf(text, "%i%s%i", pulses_per_revolution_0, DELIMITER, pulses_per_revolution_1);
	STM32_PLC_SD_Write_File(text);
	STM32_PLC_SD_Close_File();
	STM32_PLC_SD_Unmount_Card();
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80049f8:	2100      	movs	r1, #0
 80049fa:	4640      	mov	r0, r8
 80049fc:	f000 fc48 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 8004a00:	b013      	add	sp, #76	; 0x4c
 8004a02:	ecbd 8b02 	vpop	{d8}
 8004a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	STM32_PLC_SD_Open_Existing_File_With_Read("ENCODER.TXT");
 8004a0a:	4861      	ldr	r0, [pc, #388]	; (8004b90 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x230>)
 8004a0c:	f7fd fb00 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 8004a10:	2132      	movs	r1, #50	; 0x32
 8004a12:	a805      	add	r0, sp, #20
 8004a14:	f7fd fb40 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 8004a18:	f7fd fb0a 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8004a1c:	f7fd face 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	uint16_t pulses_per_revolution_0 = atoi(strtok(text, DELIMITER));
 8004a20:	495c      	ldr	r1, [pc, #368]	; (8004b94 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x234>)
 8004a22:	a805      	add	r0, sp, #20
 8004a24:	f00f f828 	bl	8013a78 <strtok>
 8004a28:	f00d fccd 	bl	80123c6 <atoi>
	uint16_t pulses_per_revolution_1 = atoi(strtok(NULL, DELIMITER));
 8004a2c:	4959      	ldr	r1, [pc, #356]	; (8004b94 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x234>)
	uint16_t pulses_per_revolution_0 = atoi(strtok(text, DELIMITER));
 8004a2e:	4681      	mov	r9, r0
	uint16_t pulses_per_revolution_1 = atoi(strtok(NULL, DELIMITER));
 8004a30:	4628      	mov	r0, r5
 8004a32:	f00f f821 	bl	8013a78 <strtok>
 8004a36:	f00d fcc6 	bl	80123c6 <atoi>
	ILI9341_print_text("Current settings:", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a3a:	e9cd 6400 	strd	r6, r4, [sp]
	uint16_t pulses_per_revolution_1 = atoi(strtok(NULL, DELIMITER));
 8004a3e:	4607      	mov	r7, r0
	ILI9341_print_text("Current settings:", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a44:	4854      	ldr	r0, [pc, #336]	; (8004b98 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x238>)
 8004a46:	224b      	movs	r2, #75	; 0x4b
 8004a48:	2137      	movs	r1, #55	; 0x37
 8004a4a:	f003 fc2d 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Encoder0:%i Encoder1:%i", pulses_per_revolution_0, pulses_per_revolution_1);
 8004a4e:	4953      	ldr	r1, [pc, #332]	; (8004b9c <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x23c>)
 8004a50:	b2bb      	uxth	r3, r7
 8004a52:	fa1f f289 	uxth.w	r2, r9
 8004a56:	a805      	add	r0, sp, #20
 8004a58:	f00e f964 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a5c:	e9cd 6400 	strd	r6, r4, [sp]
 8004a60:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a64:	2255      	movs	r2, #85	; 0x55
 8004a66:	2137      	movs	r1, #55	; 0x37
 8004a68:	a805      	add	r0, sp, #20
	ILI9341_fill_rect(90, 195, 273, 220, COLOR_GREEN);
 8004a6a:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a6e:	f003 fc1b 	bl	80082a8 <ILI9341_print_text>
	ILI9341_fill_rect(90, 195, 273, 220, COLOR_GREEN);
 8004a72:	23dc      	movs	r3, #220	; 0xdc
 8004a74:	f240 1211 	movw	r2, #273	; 0x111
 8004a78:	21c3      	movs	r1, #195	; 0xc3
 8004a7a:	205a      	movs	r0, #90	; 0x5a
 8004a7c:	9600      	str	r6, [sp, #0]
 8004a7e:	f003 faf7 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(90, 195, 273, 220, COLOR_BLACK);
 8004a82:	23dc      	movs	r3, #220	; 0xdc
 8004a84:	f240 1211 	movw	r2, #273	; 0x111
 8004a88:	21c3      	movs	r1, #195	; 0xc3
 8004a8a:	205a      	movs	r0, #90	; 0x5a
 8004a8c:	9500      	str	r5, [sp, #0]
 8004a8e:	f003 fb71 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Select encoder", 100, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8004a92:	2302      	movs	r3, #2
 8004a94:	e9cd 6300 	strd	r6, r3, [sp]
 8004a98:	4841      	ldr	r0, [pc, #260]	; (8004ba0 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x240>)
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	22c8      	movs	r2, #200	; 0xc8
 8004a9e:	2164      	movs	r1, #100	; 0x64
 8004aa0:	f003 fc02 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(90, 195, 273, 220);
 8004aa4:	23dc      	movs	r3, #220	; 0xdc
 8004aa6:	f240 1211 	movw	r2, #273	; 0x111
 8004aaa:	21c3      	movs	r1, #195	; 0xc3
 8004aac:	205a      	movs	r0, #90	; 0x5a
 8004aae:	f004 fa9d 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set encoder revolution?") == 0) {
 8004ab2:	483c      	ldr	r0, [pc, #240]	; (8004ba4 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x244>)
 8004ab4:	f7fe fea0 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d09d      	beq.n	80049f8 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x98>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 1 and 32767") == 0) {
 8004abc:	4b3a      	ldr	r3, [pc, #232]	; (8004ba8 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x248>)
 8004abe:	aa04      	add	r2, sp, #16
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f002 fe6e 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d095      	beq.n	80049f8 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x98>
	if(number_value < 1)
 8004acc:	eddd 7a04 	vldr	s15, [sp, #16]
 8004ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004adc:	eeb0 8a47 	vmov.f32	s16, s14
 8004ae0:	d40d      	bmi.n	8004afe <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x19e>
	else if(number_value > 32767)
 8004ae2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004bac <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x24c>
 8004ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		pulses_per_revolution = (uint16_t) number_value;
 8004aee:	bfd7      	itett	le
 8004af0:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		pulses_per_revolution = 32767;
 8004af4:	f647 74ff 	movwgt	r4, #32767	; 0x7fff
		pulses_per_revolution = (uint16_t) number_value;
 8004af8:	ee17 3a90 	vmovle	r3, s15
 8004afc:	b29c      	uxthle	r4, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Set setting for Encoder0=0 or Encoder1=1") == 0) {
 8004afe:	2100      	movs	r1, #0
 8004b00:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x250>)
 8004b02:	aa04      	add	r2, sp, #16
 8004b04:	4608      	mov	r0, r1
 8004b06:	f002 fe4d 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	f43f af74 	beq.w	80049f8 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x98>
	if(number_value < 0)
 8004b10:	eddd 7a04 	vldr	s15, [sp, #16]
 8004b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1c:	d40b      	bmi.n	8004b36 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1d6>
	else if(number_value > 1)
 8004b1e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		encoder_choice = (uint8_t) number_value;
 8004b26:	bfd7      	itett	le
 8004b28:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		encoder_choice = 1;
 8004b2c:	2501      	movgt	r5, #1
		encoder_choice = (uint8_t) number_value;
 8004b2e:	edcd 7a03 	vstrle	s15, [sp, #12]
 8004b32:	f89d 500c 	ldrble.w	r5, [sp, #12]
	STM32_PLC_Encoder_Set_Pulses_Per_Revolutions(encoder_choice, pulses_per_revolution);
 8004b36:	4621      	mov	r1, r4
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f7fc fc07 	bl	800134c <STM32_PLC_Encoder_Set_Pulses_Per_Revolutions>
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 8004b3e:	f7fd fa4d 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f47f af55 	bne.w	80049f2 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x92>
	if(encoder_choice == 0)
 8004b48:	b995      	cbnz	r5, 8004b70 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x210>
	uint16_t pulses_per_revolution_1 = atoi(strtok(NULL, DELIMITER));
 8004b4a:	b2bf      	uxth	r7, r7
	STM32_PLC_SD_Open_Existing_File_With_Write("ENCODER.TXT");
 8004b4c:	4810      	ldr	r0, [pc, #64]	; (8004b90 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x230>)
 8004b4e:	f7fd fa67 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
	sprintf(text, "%i%s%i", pulses_per_revolution_0, DELIMITER, pulses_per_revolution_1);
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x234>)
 8004b54:	4917      	ldr	r1, [pc, #92]	; (8004bb4 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x254>)
 8004b56:	9700      	str	r7, [sp, #0]
 8004b58:	4622      	mov	r2, r4
 8004b5a:	a805      	add	r0, sp, #20
 8004b5c:	f00e f8e2 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Write_File(text);
 8004b60:	a805      	add	r0, sp, #20
 8004b62:	f7fd fa9f 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Close_File();
 8004b66:	f7fd fa63 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8004b6a:	f7fd fa27 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
 8004b6e:	e743      	b.n	80049f8 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x98>
		pulses_per_revolution_1 = pulses_per_revolution;
 8004b70:	4627      	mov	r7, r4
	uint16_t pulses_per_revolution_0 = atoi(strtok(text, DELIMITER));
 8004b72:	fa1f f489 	uxth.w	r4, r9
 8004b76:	e7e9      	b.n	8004b4c <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1ec>
 8004b78:	08017405 	.word	0x08017405
 8004b7c:	0801741c 	.word	0x0801741c
 8004b80:	08017434 	.word	0x08017434
 8004b84:	08017444 	.word	0x08017444
 8004b88:	0801745c 	.word	0x0801745c
 8004b8c:	08016e92 	.word	0x08016e92
 8004b90:	08016e0f 	.word	0x08016e0f
 8004b94:	08016cb1 	.word	0x08016cb1
 8004b98:	08017477 	.word	0x08017477
 8004b9c:	08017489 	.word	0x08017489
 8004ba0:	080174a1 	.word	0x080174a1
 8004ba4:	080174b0 	.word	0x080174b0
 8004ba8:	080174d7 	.word	0x080174d7
 8004bac:	46fffe00 	.word	0x46fffe00
 8004bb0:	080174fe 	.word	0x080174fe
 8004bb4:	08018982 	.word	0x08018982

08004bb8 <STM32_PLC_LCD_Show_Logging_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Logging_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	ed2d 8b02 	vpush	{d8}
 8004bc0:	b0dd      	sub	sp, #372	; 0x174
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004bc2:	270f      	movs	r7, #15
 8004bc4:	23ea      	movs	r3, #234	; 0xea
 8004bc6:	f44f 729d 	mov.w	r2, #314	; 0x13a
void STM32_PLC_LCD_Show_Logging_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004bca:	ee08 0a10 	vmov	s16, r0
 8004bce:	460d      	mov	r5, r1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004bd0:	2033      	movs	r0, #51	; 0x33
 8004bd2:	2106      	movs	r1, #6
 8004bd4:	9700      	str	r7, [sp, #0]
 8004bd6:	f003 fa4b 	bl	8008070 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	char text[200];
	ILI9341_print_text("Logging to a SD card", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004bda:	2601      	movs	r6, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8004bdc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004be0:	f240 1209 	movw	r2, #265	; 0x109
 8004be4:	211e      	movs	r1, #30
 8004be6:	2032      	movs	r0, #50	; 0x32
 8004be8:	f003 fa7e 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Logging to a SD card", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004bec:	4860      	ldr	r0, [pc, #384]	; (8004d70 <STM32_PLC_LCD_Show_Logging_Frame+0x1b8>)
 8004bee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004bf2:	220a      	movs	r2, #10
 8004bf4:	2137      	movs	r1, #55	; 0x37
 8004bf6:	e9cd 7600 	strd	r7, r6, [sp]
 8004bfa:	f003 fb55 	bl	80082a8 <ILI9341_print_text>

	/* Check the space */
	uint32_t total_space;
	uint32_t free_space;
	FRESULT status = STM32_PLC_SD_Mont_Card();
 8004bfe:	f7fd f9ed 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
	if(status == FR_OK) {
 8004c02:	4604      	mov	r4, r0
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d14e      	bne.n	8004ca6 <STM32_PLC_LCD_Show_Logging_Frame+0xee>
		STM32_PLC_SD_Check_Space(&total_space, &free_space);
 8004c08:	a928      	add	r1, sp, #160	; 0xa0
 8004c0a:	a827      	add	r0, sp, #156	; 0x9c
 8004c0c:	f7fd fa16 	bl	800203c <STM32_PLC_SD_Check_Space>
		sprintf(text, "Total space:%lu", total_space);
 8004c10:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8004c12:	4958      	ldr	r1, [pc, #352]	; (8004d74 <STM32_PLC_LCD_Show_Logging_Frame+0x1bc>)
 8004c14:	a82a      	add	r0, sp, #168	; 0xa8
 8004c16:	f00e f885 	bl	8012d24 <siprintf>
		ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8004c1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004c1e:	e9cd 7600 	strd	r7, r6, [sp]
 8004c22:	2223      	movs	r2, #35	; 0x23
 8004c24:	2137      	movs	r1, #55	; 0x37
 8004c26:	a82a      	add	r0, sp, #168	; 0xa8
 8004c28:	f003 fb3e 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "Free space:%lu", free_space);
 8004c2c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004c2e:	4952      	ldr	r1, [pc, #328]	; (8004d78 <STM32_PLC_LCD_Show_Logging_Frame+0x1c0>)
 8004c30:	a82a      	add	r0, sp, #168	; 0xa8
 8004c32:	f00e f877 	bl	8012d24 <siprintf>
		ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8004c36:	e9cd 7600 	strd	r7, r6, [sp]
 8004c3a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004c3e:	222d      	movs	r2, #45	; 0x2d
 8004c40:	2137      	movs	r1, #55	; 0x37
 8004c42:	a82a      	add	r0, sp, #168	; 0xa8
	/* Star logging button */
	uint8_t x1 = 95;
	uint8_t y1 = 205;
	uint16_t x2 = 260;
	uint8_t y2 = 230;
	ILI9341_fill_rect(x1, y1, x2, y2, COLOR_GREEN);
 8004c44:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
		ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8004c48:	f003 fb2e 	bl	80082a8 <ILI9341_print_text>
	ILI9341_fill_rect(x1, y1, x2, y2, COLOR_GREEN);
 8004c4c:	23e6      	movs	r3, #230	; 0xe6
 8004c4e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c52:	21cd      	movs	r1, #205	; 0xcd
 8004c54:	205f      	movs	r0, #95	; 0x5f
 8004c56:	9700      	str	r7, [sp, #0]
 8004c58:	f003 fa0a 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(x1, y1, x2, y2, COLOR_BLACK);
 8004c5c:	23e6      	movs	r3, #230	; 0xe6
 8004c5e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c62:	21cd      	movs	r1, #205	; 0xcd
 8004c64:	205f      	movs	r0, #95	; 0x5f
 8004c66:	9400      	str	r4, [sp, #0]
 8004c68:	f003 fa84 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Start logging", 100, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e9cd 7300 	strd	r7, r3, [sp]
 8004c72:	4842      	ldr	r0, [pc, #264]	; (8004d7c <STM32_PLC_LCD_Show_Logging_Frame+0x1c4>)
 8004c74:	4623      	mov	r3, r4
 8004c76:	22d2      	movs	r2, #210	; 0xd2
 8004c78:	2164      	movs	r1, #100	; 0x64
 8004c7a:	f003 fb15 	bl	80082a8 <ILI9341_print_text>

	/* Logic for request button */
	STM32_PLC_LCD_Call_One_Button_Logic(x1, y1, x2, y2);
 8004c7e:	23e6      	movs	r3, #230	; 0xe6
 8004c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c84:	21cd      	movs	r1, #205	; 0xcd
 8004c86:	205f      	movs	r0, #95	; 0x5f
 8004c88:	f004 f9b0 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to log to file?") == 0) {
 8004c8c:	483c      	ldr	r0, [pc, #240]	; (8004d80 <STM32_PLC_LCD_Show_Logging_Frame+0x1c8>)
 8004c8e:	f7fe fdb3 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8004c92:	b9d0      	cbnz	r0, 8004cca <STM32_PLC_LCD_Show_Logging_Frame+0x112>
	/* This causes that PWM, analog output is OFF - Safety */
	STM32_PLC_PWM_Reset();
	STM32_PLC_Analog_Output_Reset();

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004c94:	2100      	movs	r1, #0
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 fafa 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 8004c9c:	b05d      	add	sp, #372	; 0x174
 8004c9e:	ecbd 8b02 	vpop	{d8}
 8004ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ILI9341_print_text("Error:Could get the space", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8004ca6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004caa:	e9cd 7600 	strd	r7, r6, [sp]
 8004cae:	4835      	ldr	r0, [pc, #212]	; (8004d84 <STM32_PLC_LCD_Show_Logging_Frame+0x1cc>)
 8004cb0:	2223      	movs	r2, #35	; 0x23
 8004cb2:	2137      	movs	r1, #55	; 0x37
 8004cb4:	f003 faf8 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "SD mount error with FatFS code:%i", status);
 8004cb8:	4933      	ldr	r1, [pc, #204]	; (8004d88 <STM32_PLC_LCD_Show_Logging_Frame+0x1d0>)
 8004cba:	4622      	mov	r2, r4
 8004cbc:	a82a      	add	r0, sp, #168	; 0xa8
 8004cbe:	f00e f831 	bl	8012d24 <siprintf>
		STM32_PLC_LCD_Show_Information_OK_Dialog(text);
 8004cc2:	a82a      	add	r0, sp, #168	; 0xa8
 8004cc4:	f7fe fd26 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004cc8:	e7e4      	b.n	8004c94 <STM32_PLC_LCD_Show_Logging_Frame+0xdc>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter a log number") == 0) {
 8004cca:	4b30      	ldr	r3, [pc, #192]	; (8004d8c <STM32_PLC_LCD_Show_Logging_Frame+0x1d4>)
 8004ccc:	aa29      	add	r2, sp, #164	; 0xa4
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f002 fd67 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d0dc      	beq.n	8004c94 <STM32_PLC_LCD_Show_Logging_Frame+0xdc>
	sprintf(text, "%i.CSV", (uint16_t)number_value);
 8004cda:	eddd 7a29 	vldr	s15, [sp, #164]	; 0xa4
 8004cde:	492c      	ldr	r1, [pc, #176]	; (8004d90 <STM32_PLC_LCD_Show_Logging_Frame+0x1d8>)
 8004ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce4:	a82a      	add	r0, sp, #168	; 0xa8
 8004ce6:	ee17 3a90 	vmov	r3, s15
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	f00e f81a 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Create_New_File_With_Read_Write(text, "", true);
 8004cf0:	4928      	ldr	r1, [pc, #160]	; (8004d94 <STM32_PLC_LCD_Show_Logging_Frame+0x1dc>)
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	a82a      	add	r0, sp, #168	; 0xa8
 8004cf6:	f7fd f9db 	bl	80020b0 <STM32_PLC_SD_Create_New_File_With_Read_Write>
	STM32_PLC_SD_Open_Existing_File_With_Write(text);
 8004cfa:	a82a      	add	r0, sp, #168	; 0xa8
 8004cfc:	f7fd f990 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
	STM32_PLC_SD_Write_File("ID,Day,Hour,Minute,Second,Millisecond,");
 8004d00:	4825      	ldr	r0, [pc, #148]	; (8004d98 <STM32_PLC_LCD_Show_Logging_Frame+0x1e0>)
 8004d02:	f7fd f9cf 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File("ADC0,ADC1,ADC2,ADC3,ADC4,ADC5,ADC6,ADC7,ADC8,ADC9,ADC10,ADC11,");
 8004d06:	4825      	ldr	r0, [pc, #148]	; (8004d9c <STM32_PLC_LCD_Show_Logging_Frame+0x1e4>)
 8004d08:	f7fd f9cc 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File("DADC0,DADC1,DADC2,DADC3,DADC4,");
 8004d0c:	4824      	ldr	r0, [pc, #144]	; (8004da0 <STM32_PLC_LCD_Show_Logging_Frame+0x1e8>)
 8004d0e:	f7fd f9c9 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File("I0,I1,I2,I3,I4,I5,I6,I7,");
 8004d12:	4824      	ldr	r0, [pc, #144]	; (8004da4 <STM32_PLC_LCD_Show_Logging_Frame+0x1ec>)
 8004d14:	f7fd f9c6 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File("E0,E1,");
 8004d18:	4823      	ldr	r0, [pc, #140]	; (8004da8 <STM32_PLC_LCD_Show_Logging_Frame+0x1f0>)
 8004d1a:	f7fd f9c3 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File("IC0,IC1,");
 8004d1e:	4823      	ldr	r0, [pc, #140]	; (8004dac <STM32_PLC_LCD_Show_Logging_Frame+0x1f4>)
 8004d20:	f7fd f9c0 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File("DAC0,DAC1,DAC2,");
 8004d24:	4822      	ldr	r0, [pc, #136]	; (8004db0 <STM32_PLC_LCD_Show_Logging_Frame+0x1f8>)
 8004d26:	f7fd f9bd 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File("PWM0,PWM1,PWM2,PWM3,PWM4,PWM5,PWM6,PWM7,PULSE0,PULSE1,PULSE2,PULSE3\n");
 8004d2a:	4822      	ldr	r0, [pc, #136]	; (8004db4 <STM32_PLC_LCD_Show_Logging_Frame+0x1fc>)
 8004d2c:	f7fd f9ba 	bl	80020a4 <STM32_PLC_SD_Write_File>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter sample time between 1 and 65535") == 0) {
 8004d30:	4b21      	ldr	r3, [pc, #132]	; (8004db8 <STM32_PLC_LCD_Show_Logging_Frame+0x200>)
 8004d32:	aa29      	add	r2, sp, #164	; 0xa4
 8004d34:	4621      	mov	r1, r4
 8004d36:	4620      	mov	r0, r4
 8004d38:	f002 fd34 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d0a9      	beq.n	8004c94 <STM32_PLC_LCD_Show_Logging_Frame+0xdc>
	if(number_value < 1)
 8004d40:	eddd 7a29 	vldr	s15, [sp, #164]	; 0xa4
 8004d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d50:	d436      	bmi.n	8004dc0 <STM32_PLC_LCD_Show_Logging_Frame+0x208>
	else if(number_value > 0xFFFF)
 8004d52:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004dbc <STM32_PLC_LCD_Show_Logging_Frame+0x204>
 8004d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5e:	f300 828e 	bgt.w	800527e <STM32_PLC_LCD_Show_Logging_Frame+0x6c6>
		sample_time = (uint16_t) number_value;
 8004d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d66:	ee17 3a90 	vmov	r3, s15
 8004d6a:	b29b      	uxth	r3, r3
		sample_time = 0xFFFF;
 8004d6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d6e:	e028      	b.n	8004dc2 <STM32_PLC_LCD_Show_Logging_Frame+0x20a>
 8004d70:	08017527 	.word	0x08017527
 8004d74:	0801753c 	.word	0x0801753c
 8004d78:	0801754c 	.word	0x0801754c
 8004d7c:	0801755b 	.word	0x0801755b
 8004d80:	08017569 	.word	0x08017569
 8004d84:	08017585 	.word	0x08017585
 8004d88:	08016c8f 	.word	0x08016c8f
 8004d8c:	0801759f 	.word	0x0801759f
 8004d90:	080175b2 	.word	0x080175b2
 8004d94:	08017795 	.word	0x08017795
 8004d98:	080175b9 	.word	0x080175b9
 8004d9c:	080175e0 	.word	0x080175e0
 8004da0:	0801761f 	.word	0x0801761f
 8004da4:	0801763e 	.word	0x0801763e
 8004da8:	08017657 	.word	0x08017657
 8004dac:	0801765e 	.word	0x0801765e
 8004db0:	08017667 	.word	0x08017667
 8004db4:	08017677 	.word	0x08017677
 8004db8:	080176bc 	.word	0x080176bc
 8004dbc:	477fff00 	.word	0x477fff00
		sample_time = 1;
 8004dc0:	961b      	str	r6, [sp, #108]	; 0x6c
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004dc2:	240f      	movs	r4, #15
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 fa62 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004dcc:	9400      	str	r4, [sp, #0]
 8004dce:	23ea      	movs	r3, #234	; 0xea
 8004dd0:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8004dd4:	2106      	movs	r1, #6
 8004dd6:	2033      	movs	r0, #51	; 0x33
 8004dd8:	f003 f94a 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8004ddc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004de0:	f240 1209 	movw	r2, #265	; 0x109
 8004de4:	211e      	movs	r1, #30
 8004de6:	2032      	movs	r0, #50	; 0x32
 8004de8:	f003 f97e 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Logging values and time", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004dec:	2301      	movs	r3, #1
 8004dee:	e9cd 4300 	strd	r4, r3, [sp]
	ILI9341_fill_rect(x1, y1, x2, y2, COLOR_RED);
 8004df2:	f44f 4678 	mov.w	r6, #63488	; 0xf800
	ILI9341_print_text("Logging values and time", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004df6:	48c9      	ldr	r0, [pc, #804]	; (800511c <STM32_PLC_LCD_Show_Logging_Frame+0x564>)
 8004df8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004dfc:	220a      	movs	r2, #10
 8004dfe:	2137      	movs	r1, #55	; 0x37
	ILI9341_hollow_rect(x1, y1, x2, y2, COLOR_BLACK);
 8004e00:	2400      	movs	r4, #0
	ILI9341_print_text("Logging values and time", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e02:	f003 fa51 	bl	80082a8 <ILI9341_print_text>
	ILI9341_fill_rect(x1, y1, x2, y2, COLOR_RED);
 8004e06:	9600      	str	r6, [sp, #0]
 8004e08:	23e6      	movs	r3, #230	; 0xe6
 8004e0a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e0e:	21cd      	movs	r1, #205	; 0xcd
 8004e10:	205f      	movs	r0, #95	; 0x5f
 8004e12:	f003 f92d 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(x1, y1, x2, y2, COLOR_BLACK);
 8004e16:	23e6      	movs	r3, #230	; 0xe6
 8004e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e1c:	21cd      	movs	r1, #205	; 0xcd
 8004e1e:	205f      	movs	r0, #95	; 0x5f
 8004e20:	9400      	str	r4, [sp, #0]
 8004e22:	f003 f9a7 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Stop logging", 105, 210, COLOR_BLACK, COLOR_RED, 2);
 8004e26:	2302      	movs	r3, #2
 8004e28:	e9cd 6300 	strd	r6, r3, [sp]
 8004e2c:	48bc      	ldr	r0, [pc, #752]	; (8005120 <STM32_PLC_LCD_Show_Logging_Frame+0x568>)
 8004e2e:	4623      	mov	r3, r4
 8004e30:	22d2      	movs	r2, #210	; 0xd2
 8004e32:	2169      	movs	r1, #105	; 0x69
 8004e34:	f003 fa38 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_Pulse_Count_Reset();
 8004e38:	f7fc ffa0 	bl	8001d7c <STM32_PLC_Pulse_Count_Reset>
	uint8_t seconds = 0;
 8004e3c:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
	uint8_t days = 0;
 8004e40:	46a3      	mov	fp, r4
	uint8_t hours = 0;
 8004e42:	9417      	str	r4, [sp, #92]	; 0x5c
	uint32_t ID = 0; /* This is the primary key for counting how many samples we have */
 8004e44:	941e      	str	r4, [sp, #120]	; 0x78
	uint16_t counter = 0;
 8004e46:	4626      	mov	r6, r4
	uint16_t milliseconds = 0;
 8004e48:	9418      	str	r4, [sp, #96]	; 0x60
	while (!STM32_PLC_Digital_Input_Get_Stop()) {
 8004e4a:	f7fc fa23 	bl	8001294 <STM32_PLC_Digital_Input_Get_Stop>
 8004e4e:	4604      	mov	r4, r0
 8004e50:	2800      	cmp	r0, #0
 8004e52:	f040 820b 	bne.w	800526c <STM32_PLC_LCD_Show_Logging_Frame+0x6b4>
		STM32_PLC_LCD_Execute_Control_Program(j1939);
 8004e56:	ee18 0a10 	vmov	r0, s16
 8004e5a:	f7ff f9f1 	bl	8004240 <STM32_PLC_LCD_Execute_Control_Program>
		if(counter >= sample_time) {
 8004e5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e60:	42b3      	cmp	r3, r6
 8004e62:	f200 81b1 	bhi.w	80051c8 <STM32_PLC_LCD_Show_Logging_Frame+0x610>
			ID++;
 8004e66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			sprintf(text, "%lu,%i,%i,%i,%i,%i,",
 8004e68:	49ae      	ldr	r1, [pc, #696]	; (8005124 <STM32_PLC_LCD_Show_Logging_Frame+0x56c>)
			ID++;
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	931e      	str	r3, [sp, #120]	; 0x78
			sprintf(text, "%lu,%i,%i,%i,%i,%i,",
 8004e6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004e70:	9303      	str	r3, [sp, #12]
 8004e72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e74:	9302      	str	r3, [sp, #8]
 8004e76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e7c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	a82a      	add	r0, sp, #168	; 0xa8
 8004e82:	465b      	mov	r3, fp
 8004e84:	f00d ff4e 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Write_File(text);
 8004e88:	a82a      	add	r0, sp, #168	; 0xa8
 8004e8a:	f7fd f90b 	bl	80020a4 <STM32_PLC_SD_Write_File>
					STM32_PLC_Analog_Input_ADC_Get(0),
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7fc f848 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(1),
 8004e94:	2001      	movs	r0, #1
					STM32_PLC_Analog_Input_ADC_Get(0),
 8004e96:	ed8d 0a24 	vstr	s0, [sp, #144]	; 0x90
					STM32_PLC_Analog_Input_ADC_Get(1),
 8004e9a:	f7fc f843 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(2),
 8004e9e:	2002      	movs	r0, #2
					STM32_PLC_Analog_Input_ADC_Get(1),
 8004ea0:	ed8d 0a1c 	vstr	s0, [sp, #112]	; 0x70
					STM32_PLC_Analog_Input_ADC_Get(2),
 8004ea4:	f7fc f83e 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(3),
 8004ea8:	2003      	movs	r0, #3
					STM32_PLC_Analog_Input_ADC_Get(2),
 8004eaa:	ed8d 0a1f 	vstr	s0, [sp, #124]	; 0x7c
					STM32_PLC_Analog_Input_ADC_Get(3),
 8004eae:	f7fc f839 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(4),
 8004eb2:	2004      	movs	r0, #4
					STM32_PLC_Analog_Input_ADC_Get(3),
 8004eb4:	ed8d 0a20 	vstr	s0, [sp, #128]	; 0x80
					STM32_PLC_Analog_Input_ADC_Get(4),
 8004eb8:	f7fc f834 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(5),
 8004ebc:	2005      	movs	r0, #5
					STM32_PLC_Analog_Input_ADC_Get(4),
 8004ebe:	ee10 6a10 	vmov	r6, s0
					STM32_PLC_Analog_Input_ADC_Get(5),
 8004ec2:	f7fc f82f 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(6),
 8004ec6:	2006      	movs	r0, #6
					STM32_PLC_Analog_Input_ADC_Get(5),
 8004ec8:	ee10 7a10 	vmov	r7, s0
					STM32_PLC_Analog_Input_ADC_Get(6),
 8004ecc:	f7fc f82a 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(7),
 8004ed0:	2007      	movs	r0, #7
					STM32_PLC_Analog_Input_ADC_Get(6),
 8004ed2:	ee10 8a10 	vmov	r8, s0
					STM32_PLC_Analog_Input_ADC_Get(7),
 8004ed6:	f7fc f825 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(8),
 8004eda:	2008      	movs	r0, #8
					STM32_PLC_Analog_Input_ADC_Get(7),
 8004edc:	ee10 9a10 	vmov	r9, s0
					STM32_PLC_Analog_Input_ADC_Get(8),
 8004ee0:	f7fc f820 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(9),
 8004ee4:	2009      	movs	r0, #9
					STM32_PLC_Analog_Input_ADC_Get(8),
 8004ee6:	ee10 aa10 	vmov	sl, s0
					STM32_PLC_Analog_Input_ADC_Get(9),
 8004eea:	f7fc f81b 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(10),
 8004eee:	200a      	movs	r0, #10
					STM32_PLC_Analog_Input_ADC_Get(9),
 8004ef0:	ed8d 0a21 	vstr	s0, [sp, #132]	; 0x84
					STM32_PLC_Analog_Input_ADC_Get(10),
 8004ef4:	f7fc f816 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
					STM32_PLC_Analog_Input_ADC_Get(11));
 8004ef8:	200b      	movs	r0, #11
					STM32_PLC_Analog_Input_ADC_Get(10),
 8004efa:	ed8d 0a22 	vstr	s0, [sp, #136]	; 0x88
					STM32_PLC_Analog_Input_ADC_Get(11));
 8004efe:	f7fc f811 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
			sprintf(text, "%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,",
 8004f02:	9924      	ldr	r1, [sp, #144]	; 0x90
					STM32_PLC_Analog_Input_ADC_Get(11));
 8004f04:	ed8d 0a23 	vstr	s0, [sp, #140]	; 0x8c
			sprintf(text, "%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,",
 8004f08:	4608      	mov	r0, r1
 8004f0a:	f7fb fb1d 	bl	8000548 <__aeabi_f2d>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004f14:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8004f18:	f7fb fb16 	bl	8000548 <__aeabi_f2d>
 8004f1c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8004f20:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004f22:	f7fb fb11 	bl	8000548 <__aeabi_f2d>
 8004f26:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004f2a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004f2c:	f7fb fb0c 	bl	8000548 <__aeabi_f2d>
 8004f30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f34:	4650      	mov	r0, sl
 8004f36:	f7fb fb07 	bl	8000548 <__aeabi_f2d>
 8004f3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004f3e:	4648      	mov	r0, r9
 8004f40:	f7fb fb02 	bl	8000548 <__aeabi_f2d>
 8004f44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004f48:	4640      	mov	r0, r8
 8004f4a:	f7fb fafd 	bl	8000548 <__aeabi_f2d>
 8004f4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f52:	4638      	mov	r0, r7
 8004f54:	f7fb faf8 	bl	8000548 <__aeabi_f2d>
 8004f58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f7fb faf3 	bl	8000548 <__aeabi_f2d>
 8004f62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f66:	9820      	ldr	r0, [sp, #128]	; 0x80
 8004f68:	f7fb faee 	bl	8000548 <__aeabi_f2d>
 8004f6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f70:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004f72:	f7fb fae9 	bl	8000548 <__aeabi_f2d>
 8004f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f7a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004f7c:	f7fb fae4 	bl	8000548 <__aeabi_f2d>
 8004f80:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8004f84:	e9cd 0100 	strd	r0, r1, [sp]
 8004f88:	4967      	ldr	r1, [pc, #412]	; (8005128 <STM32_PLC_LCD_Show_Logging_Frame+0x570>)
 8004f8a:	a82a      	add	r0, sp, #168	; 0xa8
 8004f8c:	f00d feca 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Write_File(text);
 8004f90:	a82a      	add	r0, sp, #168	; 0xa8
 8004f92:	f7fd f887 	bl	80020a4 <STM32_PLC_SD_Write_File>
					STM32_PLC_Analog_Input_DADC_Get(0),
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7fb fff4 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
					STM32_PLC_Analog_Input_DADC_Get(1),
 8004f9c:	2001      	movs	r0, #1
					STM32_PLC_Analog_Input_DADC_Get(0),
 8004f9e:	ee10 aa10 	vmov	sl, s0
					STM32_PLC_Analog_Input_DADC_Get(1),
 8004fa2:	f7fb ffef 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
					STM32_PLC_Analog_Input_DADC_Get(2),
 8004fa6:	2002      	movs	r0, #2
					STM32_PLC_Analog_Input_DADC_Get(1),
 8004fa8:	ee10 6a10 	vmov	r6, s0
					STM32_PLC_Analog_Input_DADC_Get(2),
 8004fac:	f7fb ffea 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
					STM32_PLC_Analog_Input_DADC_Get(3),
 8004fb0:	2003      	movs	r0, #3
					STM32_PLC_Analog_Input_DADC_Get(2),
 8004fb2:	ee10 7a10 	vmov	r7, s0
					STM32_PLC_Analog_Input_DADC_Get(3),
 8004fb6:	f7fb ffe5 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
					STM32_PLC_Analog_Input_DADC_Get(4));
 8004fba:	2004      	movs	r0, #4
					STM32_PLC_Analog_Input_DADC_Get(3),
 8004fbc:	ee10 8a10 	vmov	r8, s0
					STM32_PLC_Analog_Input_DADC_Get(4));
 8004fc0:	f7fb ffe0 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
			sprintf(text, "%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,",
 8004fc4:	4650      	mov	r0, sl
					STM32_PLC_Analog_Input_DADC_Get(4));
 8004fc6:	ee10 9a10 	vmov	r9, s0
			sprintf(text, "%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,",
 8004fca:	f7fb fabd 	bl	8000548 <__aeabi_f2d>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4648      	mov	r0, r9
 8004fd4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8004fd8:	f7fb fab6 	bl	8000548 <__aeabi_f2d>
 8004fdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	f7fb fab1 	bl	8000548 <__aeabi_f2d>
 8004fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fea:	4638      	mov	r0, r7
 8004fec:	f7fb faac 	bl	8000548 <__aeabi_f2d>
 8004ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f7fb faa7 	bl	8000548 <__aeabi_f2d>
 8004ffa:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8004ffe:	e9cd 0100 	strd	r0, r1, [sp]
 8005002:	494a      	ldr	r1, [pc, #296]	; (800512c <STM32_PLC_LCD_Show_Logging_Frame+0x574>)
 8005004:	a82a      	add	r0, sp, #168	; 0xa8
 8005006:	f00d fe8d 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Write_File(text);
 800500a:	a82a      	add	r0, sp, #168	; 0xa8
 800500c:	f7fd f84a 	bl	80020a4 <STM32_PLC_SD_Write_File>
					STM32_PLC_Digital_Input_Get(0),
 8005010:	4620      	mov	r0, r4
 8005012:	f7fc f913 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8005016:	901f      	str	r0, [sp, #124]	; 0x7c
					STM32_PLC_Digital_Input_Get(1),
 8005018:	2001      	movs	r0, #1
 800501a:	f7fc f90f 	bl	800123c <STM32_PLC_Digital_Input_Get>
 800501e:	901c      	str	r0, [sp, #112]	; 0x70
					STM32_PLC_Digital_Input_Get(2),
 8005020:	2002      	movs	r0, #2
 8005022:	f7fc f90b 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8005026:	4606      	mov	r6, r0
					STM32_PLC_Digital_Input_Get(3),
 8005028:	2003      	movs	r0, #3
 800502a:	f7fc f907 	bl	800123c <STM32_PLC_Digital_Input_Get>
 800502e:	4607      	mov	r7, r0
					STM32_PLC_Digital_Input_Get(4),
 8005030:	2004      	movs	r0, #4
 8005032:	f7fc f903 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8005036:	4680      	mov	r8, r0
					STM32_PLC_Digital_Input_Get(5),
 8005038:	2005      	movs	r0, #5
 800503a:	f7fc f8ff 	bl	800123c <STM32_PLC_Digital_Input_Get>
 800503e:	4681      	mov	r9, r0
					STM32_PLC_Digital_Input_Get(6),
 8005040:	2006      	movs	r0, #6
 8005042:	f7fc f8fb 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8005046:	4682      	mov	sl, r0
					STM32_PLC_Digital_Input_Get(7));
 8005048:	2007      	movs	r0, #7
 800504a:	f7fc f8f7 	bl	800123c <STM32_PLC_Digital_Input_Get>
			sprintf(text, "%i,%i,%i,%i,%i,%i,%i,%i,",
 800504e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005050:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005052:	4937      	ldr	r1, [pc, #220]	; (8005130 <STM32_PLC_LCD_Show_Logging_Frame+0x578>)
 8005054:	e9cd a004 	strd	sl, r0, [sp, #16]
 8005058:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800505c:	e9cd 6700 	strd	r6, r7, [sp]
 8005060:	a82a      	add	r0, sp, #168	; 0xa8
 8005062:	f00d fe5f 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Write_File(text);
 8005066:	a82a      	add	r0, sp, #168	; 0xa8
 8005068:	f7fd f81c 	bl	80020a4 <STM32_PLC_SD_Write_File>
					STM32_PLC_Encoder_Get(0),
 800506c:	4620      	mov	r0, r4
 800506e:	f7fc f953 	bl	8001318 <STM32_PLC_Encoder_Get>
					STM32_PLC_Encoder_Get(1));
 8005072:	2001      	movs	r0, #1
					STM32_PLC_Encoder_Get(0),
 8005074:	ee10 7a10 	vmov	r7, s0
					STM32_PLC_Encoder_Get(1));
 8005078:	f7fc f94e 	bl	8001318 <STM32_PLC_Encoder_Get>
			sprintf(text, "%f,%f,",
 800507c:	4638      	mov	r0, r7
					STM32_PLC_Encoder_Get(1));
 800507e:	ee10 6a10 	vmov	r6, s0
			sprintf(text, "%f,%f,",
 8005082:	f7fb fa61 	bl	8000548 <__aeabi_f2d>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4630      	mov	r0, r6
 800508c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8005090:	f7fb fa5a 	bl	8000548 <__aeabi_f2d>
 8005094:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005098:	e9cd 0100 	strd	r0, r1, [sp]
 800509c:	4925      	ldr	r1, [pc, #148]	; (8005134 <STM32_PLC_LCD_Show_Logging_Frame+0x57c>)
 800509e:	a82a      	add	r0, sp, #168	; 0xa8
 80050a0:	f00d fe40 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Write_File(text);
 80050a4:	a82a      	add	r0, sp, #168	; 0xa8
 80050a6:	f7fc fffd 	bl	80020a4 <STM32_PLC_SD_Write_File>
					STM32_PLC_Input_Capture_Get(0),
 80050aa:	4620      	mov	r0, r4
 80050ac:	f7fc fca8 	bl	8001a00 <STM32_PLC_Input_Capture_Get>
					STM32_PLC_Input_Capture_Get(1));
 80050b0:	2001      	movs	r0, #1
					STM32_PLC_Input_Capture_Get(0),
 80050b2:	ee10 7a10 	vmov	r7, s0
					STM32_PLC_Input_Capture_Get(1));
 80050b6:	f7fc fca3 	bl	8001a00 <STM32_PLC_Input_Capture_Get>
			sprintf(text, "%f,%f,",
 80050ba:	4638      	mov	r0, r7
					STM32_PLC_Input_Capture_Get(1));
 80050bc:	ee10 6a10 	vmov	r6, s0
			sprintf(text, "%f,%f,",
 80050c0:	f7fb fa42 	bl	8000548 <__aeabi_f2d>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4630      	mov	r0, r6
 80050ca:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80050ce:	f7fb fa3b 	bl	8000548 <__aeabi_f2d>
 80050d2:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80050d6:	e9cd 0100 	strd	r0, r1, [sp]
 80050da:	4916      	ldr	r1, [pc, #88]	; (8005134 <STM32_PLC_LCD_Show_Logging_Frame+0x57c>)
 80050dc:	a82a      	add	r0, sp, #168	; 0xa8
 80050de:	f00d fe21 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Write_File(text);
 80050e2:	a82a      	add	r0, sp, #168	; 0xa8
 80050e4:	f7fc ffde 	bl	80020a4 <STM32_PLC_SD_Write_File>
					STM32_PLC_Analog_Output_Get(0),
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7fb ffd3 	bl	8001094 <STM32_PLC_Analog_Output_Get>
 80050ee:	901f      	str	r0, [sp, #124]	; 0x7c
					STM32_PLC_Analog_Output_Get(1),
 80050f0:	2001      	movs	r0, #1
 80050f2:	f7fb ffcf 	bl	8001094 <STM32_PLC_Analog_Output_Get>
 80050f6:	901c      	str	r0, [sp, #112]	; 0x70
					STM32_PLC_Analog_Output_Get(2));
 80050f8:	2002      	movs	r0, #2
 80050fa:	f7fb ffcb 	bl	8001094 <STM32_PLC_Analog_Output_Get>
			sprintf(text, "%i,%i,%i,",
 80050fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005100:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005102:	490d      	ldr	r1, [pc, #52]	; (8005138 <STM32_PLC_LCD_Show_Logging_Frame+0x580>)
 8005104:	9000      	str	r0, [sp, #0]
 8005106:	a82a      	add	r0, sp, #168	; 0xa8
 8005108:	f00d fe0c 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Write_File(text);
 800510c:	a82a      	add	r0, sp, #168	; 0xa8
 800510e:	f7fc ffc9 	bl	80020a4 <STM32_PLC_SD_Write_File>
					STM32_PLC_PWM_Get(0),
 8005112:	4620      	mov	r0, r4
 8005114:	f7fc fdfe 	bl	8001d14 <STM32_PLC_PWM_Get>
 8005118:	e010      	b.n	800513c <STM32_PLC_LCD_Show_Logging_Frame+0x584>
 800511a:	bf00      	nop
 800511c:	080176e2 	.word	0x080176e2
 8005120:	080176fa 	.word	0x080176fa
 8005124:	08017707 	.word	0x08017707
 8005128:	0801771b 	.word	0x0801771b
 800512c:	08017745 	.word	0x08017745
 8005130:	08017764 	.word	0x08017764
 8005134:	0801777d 	.word	0x0801777d
 8005138:	08017773 	.word	0x08017773
 800513c:	901f      	str	r0, [sp, #124]	; 0x7c
					STM32_PLC_PWM_Get(1),
 800513e:	2001      	movs	r0, #1
 8005140:	f7fc fde8 	bl	8001d14 <STM32_PLC_PWM_Get>
 8005144:	901c      	str	r0, [sp, #112]	; 0x70
					STM32_PLC_PWM_Get(2),
 8005146:	2002      	movs	r0, #2
 8005148:	f7fc fde4 	bl	8001d14 <STM32_PLC_PWM_Get>
 800514c:	4606      	mov	r6, r0
					STM32_PLC_PWM_Get(3),
 800514e:	2003      	movs	r0, #3
 8005150:	f7fc fde0 	bl	8001d14 <STM32_PLC_PWM_Get>
 8005154:	4607      	mov	r7, r0
					STM32_PLC_PWM_Get(4),
 8005156:	2004      	movs	r0, #4
 8005158:	f7fc fddc 	bl	8001d14 <STM32_PLC_PWM_Get>
 800515c:	4680      	mov	r8, r0
					STM32_PLC_PWM_Get(5),
 800515e:	2005      	movs	r0, #5
 8005160:	f7fc fdd8 	bl	8001d14 <STM32_PLC_PWM_Get>
 8005164:	4681      	mov	r9, r0
					STM32_PLC_PWM_Get(6),
 8005166:	2006      	movs	r0, #6
 8005168:	f7fc fdd4 	bl	8001d14 <STM32_PLC_PWM_Get>
 800516c:	4682      	mov	sl, r0
					STM32_PLC_PWM_Get(7));
 800516e:	2007      	movs	r0, #7
 8005170:	f7fc fdd0 	bl	8001d14 <STM32_PLC_PWM_Get>
			sprintf(text, "%i,%i,%i,%i,%i,%i,%i,%i,",
 8005174:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005176:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005178:	4942      	ldr	r1, [pc, #264]	; (8005284 <STM32_PLC_LCD_Show_Logging_Frame+0x6cc>)
 800517a:	e9cd a004 	strd	sl, r0, [sp, #16]
 800517e:	e9cd 6700 	strd	r6, r7, [sp]
 8005182:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005186:	a82a      	add	r0, sp, #168	; 0xa8
 8005188:	f00d fdcc 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Write_File(text);
 800518c:	a82a      	add	r0, sp, #168	; 0xa8
 800518e:	f7fc ff89 	bl	80020a4 <STM32_PLC_SD_Write_File>
			sprintf(text, "%lu,%lu,%lu,%lu,\n",
 8005192:	4620      	mov	r0, r4
 8005194:	f7fc fdec 	bl	8001d70 <STM32_PLC_Pulse_Count_Get>
 8005198:	901f      	str	r0, [sp, #124]	; 0x7c
 800519a:	2001      	movs	r0, #1
 800519c:	f7fc fde8 	bl	8001d70 <STM32_PLC_Pulse_Count_Get>
 80051a0:	901c      	str	r0, [sp, #112]	; 0x70
 80051a2:	2002      	movs	r0, #2
 80051a4:	f7fc fde4 	bl	8001d70 <STM32_PLC_Pulse_Count_Get>
 80051a8:	4606      	mov	r6, r0
 80051aa:	2003      	movs	r0, #3
 80051ac:	f7fc fde0 	bl	8001d70 <STM32_PLC_Pulse_Count_Get>
 80051b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80051b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80051b4:	4934      	ldr	r1, [pc, #208]	; (8005288 <STM32_PLC_LCD_Show_Logging_Frame+0x6d0>)
 80051b6:	e9cd 6000 	strd	r6, r0, [sp]
 80051ba:	a82a      	add	r0, sp, #168	; 0xa8
 80051bc:	f00d fdb2 	bl	8012d24 <siprintf>
			STM32_PLC_SD_Write_File(text);
 80051c0:	a82a      	add	r0, sp, #168	; 0xa8
 80051c2:	f7fc ff6f 	bl	80020a4 <STM32_PLC_SD_Write_File>
			counter = 0;
 80051c6:	4626      	mov	r6, r4
		milliseconds++;
 80051c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80051ca:	3301      	adds	r3, #1
 80051cc:	b29b      	uxth	r3, r3
		counter++;
 80051ce:	3601      	adds	r6, #1
		if(milliseconds >= 1000){
 80051d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		counter++;
 80051d4:	b2b6      	uxth	r6, r6
		milliseconds++;
 80051d6:	9318      	str	r3, [sp, #96]	; 0x60
		if(milliseconds >= 1000){
 80051d8:	d305      	bcc.n	80051e6 <STM32_PLC_LCD_Show_Logging_Frame+0x62e>
			seconds++;
 80051da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051dc:	3301      	adds	r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	9319      	str	r3, [sp, #100]	; 0x64
			milliseconds = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	9318      	str	r3, [sp, #96]	; 0x60
		if(seconds >= 60){
 80051e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051e8:	2b3b      	cmp	r3, #59	; 0x3b
 80051ea:	d905      	bls.n	80051f8 <STM32_PLC_LCD_Show_Logging_Frame+0x640>
			minutes++;
 80051ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80051ee:	3301      	adds	r3, #1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	931a      	str	r3, [sp, #104]	; 0x68
			seconds = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	9319      	str	r3, [sp, #100]	; 0x64
		if(minutes >= 60){
 80051f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80051fa:	2b3b      	cmp	r3, #59	; 0x3b
 80051fc:	d905      	bls.n	800520a <STM32_PLC_LCD_Show_Logging_Frame+0x652>
			hours++;
 80051fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005200:	3301      	adds	r3, #1
 8005202:	b2db      	uxtb	r3, r3
 8005204:	9317      	str	r3, [sp, #92]	; 0x5c
			minutes = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	931a      	str	r3, [sp, #104]	; 0x68
		if(hours >= 24) {
 800520a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800520c:	2b17      	cmp	r3, #23
 800520e:	d90a      	bls.n	8005226 <STM32_PLC_LCD_Show_Logging_Frame+0x66e>
			days++;
 8005210:	f10b 0301 	add.w	r3, fp, #1
 8005214:	fa5f fb83 	uxtb.w	fp, r3
		if(days >= 255)
 8005218:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			hours = 0;
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	9317      	str	r3, [sp, #92]	; 0x5c
			days = 0;
 8005222:	bf08      	it	eq
 8005224:	469b      	moveq	fp, r3
		HAL_Delay(1);
 8005226:	2001      	movs	r0, #1
 8005228:	f005 faba 	bl	800a7a0 <HAL_Delay>
		STM32_PLC_LCD_Show_Plot_Frame();
 800522c:	f002 fbfe 	bl	8007a2c <STM32_PLC_LCD_Show_Plot_Frame>
		if (TSC2046_isPressed()) {
 8005230:	f003 fa3c 	bl	80086ac <TSC2046_isPressed>
 8005234:	2800      	cmp	r0, #0
 8005236:	f43f ae08 	beq.w	8004e4a <STM32_PLC_LCD_Show_Logging_Frame+0x292>
			TSC2046_GetTouchData();
 800523a:	f003 f9d9 	bl	80085f0 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 800523e:	4a13      	ldr	r2, [pc, #76]	; (800528c <STM32_PLC_LCD_Show_Logging_Frame+0x6d4>)
			if (X >= x1 && X <= x2 && Y >= y1 && Y <= y2) {
 8005240:	8f13      	ldrh	r3, [r2, #56]	; 0x38
 8005242:	3b5f      	subs	r3, #95	; 0x5f
 8005244:	b29b      	uxth	r3, r3
 8005246:	2ba5      	cmp	r3, #165	; 0xa5
 8005248:	f63f adff 	bhi.w	8004e4a <STM32_PLC_LCD_Show_Logging_Frame+0x292>
 800524c:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
 800524e:	3bcd      	subs	r3, #205	; 0xcd
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b19      	cmp	r3, #25
 8005254:	f63f adf9 	bhi.w	8004e4a <STM32_PLC_LCD_Show_Logging_Frame+0x292>
				ILI9341_hollow_rect(x1, y1, x2, y2, COLOR_MAGENTA);
 8005258:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005262:	23e6      	movs	r3, #230	; 0xe6
 8005264:	21cd      	movs	r1, #205	; 0xcd
 8005266:	205f      	movs	r0, #95	; 0x5f
 8005268:	f002 ff84 	bl	8008174 <ILI9341_hollow_rect>
	STM32_PLC_SD_Close_File();
 800526c:	f7fc fee0 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8005270:	f7fc fea4 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	STM32_PLC_PWM_Reset();
 8005274:	f7fc fd54 	bl	8001d20 <STM32_PLC_PWM_Reset>
	STM32_PLC_Analog_Output_Reset();
 8005278:	f7fb fefc 	bl	8001074 <STM32_PLC_Analog_Output_Reset>
 800527c:	e50a      	b.n	8004c94 <STM32_PLC_LCD_Show_Logging_Frame+0xdc>
		sample_time = 0xFFFF;
 800527e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005282:	e573      	b.n	8004d6c <STM32_PLC_LCD_Show_Logging_Frame+0x1b4>
 8005284:	08017764 	.word	0x08017764
 8005288:	08017784 	.word	0x08017784
 800528c:	20002cf8 	.word	0x20002cf8

08005290 <STM32_PLC_LCD_Show_Main_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

/* Create the main frame */
void STM32_PLC_LCD_Show_Main_Frame(uint8_t *frame_id, bool change_only_ABC_buttons) {
 8005290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005294:	4606      	mov	r6, r0
 8005296:	b08d      	sub	sp, #52	; 0x34
 8005298:	460f      	mov	r7, r1
	/* Set rotation */
	ILI9341_set_rotation(2);
 800529a:	2002      	movs	r0, #2
 800529c:	f003 f8d0 	bl	8008440 <ILI9341_set_rotation>

	if(!change_only_ABC_buttons) {
 80052a0:	2f00      	cmp	r7, #0
 80052a2:	d153      	bne.n	800534c <STM32_PLC_LCD_Show_Main_Frame+0xbc>
		/* Set background */
		ILI9341_fill_screen(COLOR_NAVY);
 80052a4:	200f      	movs	r0, #15
 80052a6:	f002 feb1 	bl	800800c <ILI9341_fill_screen>

		/* Print frame - large square */
		ILI9341_draw_horizontal_line(5, 235, 310, COLOR_GREEN);
 80052aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80052ae:	f44f 729b 	mov.w	r2, #310	; 0x136
 80052b2:	21eb      	movs	r1, #235	; 0xeb
 80052b4:	2005      	movs	r0, #5
 80052b6:	f002 ff17 	bl	80080e8 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 5, 310, COLOR_GREEN);
 80052ba:	2105      	movs	r1, #5
 80052bc:	4608      	mov	r0, r1
 80052be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80052c2:	f44f 729b 	mov.w	r2, #310	; 0x136
 80052c6:	f002 ff0f 	bl	80080e8 <ILI9341_draw_horizontal_line>
		ILI9341_draw_vertical_line(5, 5, 230, COLOR_GREEN);
 80052ca:	2105      	movs	r1, #5
 80052cc:	4608      	mov	r0, r1
 80052ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80052d2:	22e6      	movs	r2, #230	; 0xe6
 80052d4:	f002 ff2c 	bl	8008130 <ILI9341_draw_vertical_line>
		ILI9341_draw_vertical_line(315, 5, 230, COLOR_GREEN);
 80052d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80052dc:	22e6      	movs	r2, #230	; 0xe6
 80052de:	2105      	movs	r1, #5
 80052e0:	f240 103b 	movw	r0, #315	; 0x13b
 80052e4:	f002 ff24 	bl	8008130 <ILI9341_draw_vertical_line>

		/* Print buttons - Small squares */
		ILI9341_draw_vertical_line(50, 5, 230, COLOR_GREEN);
 80052e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80052ec:	22e6      	movs	r2, #230	; 0xe6
 80052ee:	2105      	movs	r1, #5
 80052f0:	2032      	movs	r0, #50	; 0x32
 80052f2:	f002 ff1d 	bl	8008130 <ILI9341_draw_vertical_line>
		ILI9341_draw_horizontal_line(5, 49, 45, COLOR_GREEN);
 80052f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80052fa:	222d      	movs	r2, #45	; 0x2d
 80052fc:	2131      	movs	r1, #49	; 0x31
 80052fe:	2005      	movs	r0, #5
 8005300:	f002 fef2 	bl	80080e8 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 96, 45, COLOR_GREEN);
 8005304:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005308:	222d      	movs	r2, #45	; 0x2d
 800530a:	2160      	movs	r1, #96	; 0x60
 800530c:	2005      	movs	r0, #5
 800530e:	f002 feeb 	bl	80080e8 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 143, 45, COLOR_GREEN);
 8005312:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005316:	222d      	movs	r2, #45	; 0x2d
 8005318:	218f      	movs	r1, #143	; 0x8f
 800531a:	2005      	movs	r0, #5
 800531c:	f002 fee4 	bl	80080e8 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 190, 45, COLOR_GREEN);
 8005320:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005324:	222d      	movs	r2, #45	; 0x2d
 8005326:	21be      	movs	r1, #190	; 0xbe
 8005328:	2005      	movs	r0, #5
 800532a:	f002 fedd 	bl	80080e8 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 235, 45, COLOR_GREEN);
 800532e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005332:	222d      	movs	r2, #45	; 0x2d
 8005334:	21eb      	movs	r1, #235	; 0xeb
 8005336:	2005      	movs	r0, #5
 8005338:	f002 fed6 	bl	80080e8 <ILI9341_draw_horizontal_line>

		/* This line is for the input and output text */
		ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 800533c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005340:	f240 1209 	movw	r2, #265	; 0x109
 8005344:	211e      	movs	r1, #30
 8005346:	2032      	movs	r0, #50	; 0x32
 8005348:	f002 fece 	bl	80080e8 <ILI9341_draw_horizontal_line>
	}
	/* Apply them */
	char text[40];
	sprintf(text, "%c", 65 + 3 * *frame_id); /* A */
 800534c:	7832      	ldrb	r2, [r6, #0]
 800534e:	49a8      	ldr	r1, [pc, #672]	; (80055f0 <STM32_PLC_LCD_Show_Main_Frame+0x360>)
 8005350:	2503      	movs	r5, #3
 8005352:	f04f 0941 	mov.w	r9, #65	; 0x41
	ILI9341_print_text(text, 18, 13, COLOR_YELLOW, COLOR_NAVY, 4);
 8005356:	240f      	movs	r4, #15
 8005358:	f04f 0804 	mov.w	r8, #4
	sprintf(text, "%c", 65 + 3 * *frame_id); /* A */
 800535c:	fb05 9202 	mla	r2, r5, r2, r9
 8005360:	a802      	add	r0, sp, #8
 8005362:	f00d fcdf 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 18, 13, COLOR_YELLOW, COLOR_NAVY, 4);
 8005366:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800536a:	220d      	movs	r2, #13
 800536c:	2112      	movs	r1, #18
 800536e:	a802      	add	r0, sp, #8
 8005370:	e9cd 4800 	strd	r4, r8, [sp]
 8005374:	f002 ff98 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "%c", 66 + 3 * *frame_id); /* B */
 8005378:	7832      	ldrb	r2, [r6, #0]
 800537a:	499d      	ldr	r1, [pc, #628]	; (80055f0 <STM32_PLC_LCD_Show_Main_Frame+0x360>)
 800537c:	2342      	movs	r3, #66	; 0x42
 800537e:	fb05 3202 	mla	r2, r5, r2, r3
 8005382:	a802      	add	r0, sp, #8
 8005384:	f00d fcce 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 18, 59, COLOR_CYAN, COLOR_NAVY, 4);
 8005388:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800538c:	223b      	movs	r2, #59	; 0x3b
 800538e:	2112      	movs	r1, #18
 8005390:	a802      	add	r0, sp, #8
 8005392:	e9cd 4800 	strd	r4, r8, [sp]
 8005396:	f002 ff87 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "%c", 67 + 3 * *frame_id); /* C */
 800539a:	7832      	ldrb	r2, [r6, #0]
 800539c:	4994      	ldr	r1, [pc, #592]	; (80055f0 <STM32_PLC_LCD_Show_Main_Frame+0x360>)
 800539e:	2343      	movs	r3, #67	; 0x43
 80053a0:	fb05 3202 	mla	r2, r5, r2, r3
 80053a4:	a802      	add	r0, sp, #8
 80053a6:	f00d fcbd 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 18, 106, COLOR_MAGENTA, COLOR_NAVY, 4);
 80053aa:	e9cd 4800 	strd	r4, r8, [sp]
 80053ae:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80053b2:	226a      	movs	r2, #106	; 0x6a
 80053b4:	2112      	movs	r1, #18
 80053b6:	a802      	add	r0, sp, #8
 80053b8:	f002 ff76 	bl	80082a8 <ILI9341_print_text>
	if(!change_only_ABC_buttons) {
 80053bc:	2f00      	cmp	r7, #0
 80053be:	f040 8114 	bne.w	80055ea <STM32_PLC_LCD_Show_Main_Frame+0x35a>
		ILI9341_print_text("<-", 10, 156, COLOR_ORANGE, COLOR_NAVY, 3);
 80053c2:	e9cd 4500 	strd	r4, r5, [sp]
 80053c6:	488b      	ldr	r0, [pc, #556]	; (80055f4 <STM32_PLC_LCD_Show_Main_Frame+0x364>)
 80053c8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80053cc:	229c      	movs	r2, #156	; 0x9c
 80053ce:	210a      	movs	r1, #10
 80053d0:	f002 ff6a 	bl	80082a8 <ILI9341_print_text>
		ILI9341_print_text("->", 14, 202, COLOR_GREEN, COLOR_NAVY, 3);
 80053d4:	e9cd 4500 	strd	r4, r5, [sp]
 80053d8:	4887      	ldr	r0, [pc, #540]	; (80055f8 <STM32_PLC_LCD_Show_Main_Frame+0x368>)
 80053da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80053de:	22ca      	movs	r2, #202	; 0xca
 80053e0:	210e      	movs	r1, #14
 80053e2:	f002 ff61 	bl	80082a8 <ILI9341_print_text>

		/* Print title */
		ILI9341_print_text("Main frame", 55, 10, COLOR_YELLOW, COLOR_NAVY, 2);
 80053e6:	2302      	movs	r3, #2
 80053e8:	220a      	movs	r2, #10
 80053ea:	e9cd 4300 	strd	r4, r3, [sp]
 80053ee:	4883      	ldr	r0, [pc, #524]	; (80055fc <STM32_PLC_LCD_Show_Main_Frame+0x36c>)
 80053f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80053f4:	2137      	movs	r1, #55	; 0x37

		/* Write out letters */
		sprintf(text, "A:Show measurement and time");
		ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 80053f6:	2501      	movs	r5, #1
		ILI9341_print_text("Main frame", 55, 10, COLOR_YELLOW, COLOR_NAVY, 2);
 80053f8:	f002 ff56 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "A:Show measurement and time");
 80053fc:	4980      	ldr	r1, [pc, #512]	; (8005600 <STM32_PLC_LCD_Show_Main_Frame+0x370>)
 80053fe:	a802      	add	r0, sp, #8
 8005400:	f00d fcb0 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8005404:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005408:	2223      	movs	r2, #35	; 0x23
 800540a:	2137      	movs	r1, #55	; 0x37
 800540c:	a802      	add	r0, sp, #8
 800540e:	e9cd 4500 	strd	r4, r5, [sp]
 8005412:	f002 ff49 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "B:Set analog calibration");
 8005416:	497b      	ldr	r1, [pc, #492]	; (8005604 <STM32_PLC_LCD_Show_Main_Frame+0x374>)
 8005418:	a802      	add	r0, sp, #8
 800541a:	f00d fca3 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 800541e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005422:	222d      	movs	r2, #45	; 0x2d
 8005424:	2137      	movs	r1, #55	; 0x37
 8005426:	a802      	add	r0, sp, #8
 8005428:	e9cd 4500 	strd	r4, r5, [sp]
 800542c:	f002 ff3c 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "C:Set PWM frequencies");
 8005430:	4975      	ldr	r1, [pc, #468]	; (8005608 <STM32_PLC_LCD_Show_Main_Frame+0x378>)
 8005432:	a802      	add	r0, sp, #8
 8005434:	f00d fc96 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8005438:	2237      	movs	r2, #55	; 0x37
 800543a:	4611      	mov	r1, r2
 800543c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005440:	a802      	add	r0, sp, #8
 8005442:	e9cd 4500 	strd	r4, r5, [sp]
 8005446:	f002 ff2f 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "D:Store measurements to SD card");
 800544a:	4970      	ldr	r1, [pc, #448]	; (800560c <STM32_PLC_LCD_Show_Main_Frame+0x37c>)
 800544c:	a802      	add	r0, sp, #8
 800544e:	f00d fc89 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8005452:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005456:	464a      	mov	r2, r9
 8005458:	2137      	movs	r1, #55	; 0x37
 800545a:	a802      	add	r0, sp, #8
 800545c:	e9cd 4500 	strd	r4, r5, [sp]
 8005460:	f002 ff22 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "E:Set control program");
 8005464:	496a      	ldr	r1, [pc, #424]	; (8005610 <STM32_PLC_LCD_Show_Main_Frame+0x380>)
 8005466:	a802      	add	r0, sp, #8
 8005468:	f00d fc7c 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800546c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005470:	224b      	movs	r2, #75	; 0x4b
 8005472:	2137      	movs	r1, #55	; 0x37
 8005474:	a802      	add	r0, sp, #8
 8005476:	e9cd 4500 	strd	r4, r5, [sp]
 800547a:	f002 ff15 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "F:Set date and time and alarm");
 800547e:	4965      	ldr	r1, [pc, #404]	; (8005614 <STM32_PLC_LCD_Show_Main_Frame+0x384>)
 8005480:	a802      	add	r0, sp, #8
 8005482:	f00d fc6f 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8005486:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800548a:	2255      	movs	r2, #85	; 0x55
 800548c:	2137      	movs	r1, #55	; 0x37
 800548e:	a802      	add	r0, sp, #8
 8005490:	e9cd 4500 	strd	r4, r5, [sp]
 8005494:	f002 ff08 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "G:Do a PGN request");
 8005498:	495f      	ldr	r1, [pc, #380]	; (8005618 <STM32_PLC_LCD_Show_Main_Frame+0x388>)
 800549a:	a802      	add	r0, sp, #8
 800549c:	f00d fc62 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80054a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80054a4:	225f      	movs	r2, #95	; 0x5f
 80054a6:	2137      	movs	r1, #55	; 0x37
 80054a8:	a802      	add	r0, sp, #8
 80054aa:	e9cd 4500 	strd	r4, r5, [sp]
 80054ae:	f002 fefb 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "H:Show ECU addresses");
 80054b2:	495a      	ldr	r1, [pc, #360]	; (800561c <STM32_PLC_LCD_Show_Main_Frame+0x38c>)
 80054b4:	a802      	add	r0, sp, #8
 80054b6:	f00d fc55 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80054ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80054be:	2269      	movs	r2, #105	; 0x69
 80054c0:	2137      	movs	r1, #55	; 0x37
 80054c2:	a802      	add	r0, sp, #8
 80054c4:	e9cd 4500 	strd	r4, r5, [sp]
 80054c8:	f002 feee 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "I:Commanded address");
 80054cc:	4954      	ldr	r1, [pc, #336]	; (8005620 <STM32_PLC_LCD_Show_Main_Frame+0x390>)
 80054ce:	a802      	add	r0, sp, #8
 80054d0:	f00d fc48 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 80054d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80054d8:	2273      	movs	r2, #115	; 0x73
 80054da:	2137      	movs	r1, #55	; 0x37
 80054dc:	a802      	add	r0, sp, #8
 80054de:	e9cd 4500 	strd	r4, r5, [sp]
 80054e2:	f002 fee1 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "J:Show this ECU DM1 codes");
 80054e6:	494f      	ldr	r1, [pc, #316]	; (8005624 <STM32_PLC_LCD_Show_Main_Frame+0x394>)
 80054e8:	a802      	add	r0, sp, #8
 80054ea:	f00d fc3b 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 80054ee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80054f2:	227d      	movs	r2, #125	; 0x7d
 80054f4:	2137      	movs	r1, #55	; 0x37
 80054f6:	a802      	add	r0, sp, #8
 80054f8:	e9cd 4500 	strd	r4, r5, [sp]
 80054fc:	f002 fed4 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "K:Show other ECU DM1 codes");
 8005500:	4949      	ldr	r1, [pc, #292]	; (8005628 <STM32_PLC_LCD_Show_Main_Frame+0x398>)
 8005502:	a802      	add	r0, sp, #8
 8005504:	f00d fc2e 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8005508:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800550c:	2287      	movs	r2, #135	; 0x87
 800550e:	2137      	movs	r1, #55	; 0x37
 8005510:	a802      	add	r0, sp, #8
 8005512:	e9cd 4500 	strd	r4, r5, [sp]
 8005516:	f002 fec7 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "L:Show this ECU DM2 codes");
 800551a:	4944      	ldr	r1, [pc, #272]	; (800562c <STM32_PLC_LCD_Show_Main_Frame+0x39c>)
 800551c:	a802      	add	r0, sp, #8
 800551e:	f00d fc21 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 8005522:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005526:	2291      	movs	r2, #145	; 0x91
 8005528:	2137      	movs	r1, #55	; 0x37
 800552a:	a802      	add	r0, sp, #8
 800552c:	e9cd 4500 	strd	r4, r5, [sp]
 8005530:	f002 feba 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "M:Show other ECU DM2 codes");
 8005534:	493e      	ldr	r1, [pc, #248]	; (8005630 <STM32_PLC_LCD_Show_Main_Frame+0x3a0>)
 8005536:	a802      	add	r0, sp, #8
 8005538:	f00d fc14 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 155, COLOR_YELLOW, COLOR_NAVY, 1);
 800553c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005540:	229b      	movs	r2, #155	; 0x9b
 8005542:	2137      	movs	r1, #55	; 0x37
 8005544:	a802      	add	r0, sp, #8
 8005546:	e9cd 4500 	strd	r4, r5, [sp]
 800554a:	f002 fead 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "N:Show this ECU name");
 800554e:	4939      	ldr	r1, [pc, #228]	; (8005634 <STM32_PLC_LCD_Show_Main_Frame+0x3a4>)
 8005550:	a802      	add	r0, sp, #8
 8005552:	f00d fc07 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 165, COLOR_YELLOW, COLOR_NAVY, 1);
 8005556:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800555a:	22a5      	movs	r2, #165	; 0xa5
 800555c:	2137      	movs	r1, #55	; 0x37
 800555e:	a802      	add	r0, sp, #8
 8005560:	e9cd 4500 	strd	r4, r5, [sp]
 8005564:	f002 fea0 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "O:Show other ECU name");
 8005568:	4933      	ldr	r1, [pc, #204]	; (8005638 <STM32_PLC_LCD_Show_Main_Frame+0x3a8>)
 800556a:	a802      	add	r0, sp, #8
 800556c:	f00d fbfa 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 175, COLOR_YELLOW, COLOR_NAVY, 1);
 8005570:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005574:	22af      	movs	r2, #175	; 0xaf
 8005576:	2137      	movs	r1, #55	; 0x37
 8005578:	a802      	add	r0, sp, #8
 800557a:	e9cd 4500 	strd	r4, r5, [sp]
 800557e:	f002 fe93 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "P:Show this ECU identifications");
 8005582:	492e      	ldr	r1, [pc, #184]	; (800563c <STM32_PLC_LCD_Show_Main_Frame+0x3ac>)
 8005584:	a802      	add	r0, sp, #8
 8005586:	f00d fbed 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 185, COLOR_YELLOW, COLOR_NAVY, 1);
 800558a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800558e:	22b9      	movs	r2, #185	; 0xb9
 8005590:	2137      	movs	r1, #55	; 0x37
 8005592:	a802      	add	r0, sp, #8
 8005594:	e9cd 4500 	strd	r4, r5, [sp]
 8005598:	f002 fe86 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "Q:Show other ECU identifications");
 800559c:	4928      	ldr	r1, [pc, #160]	; (8005640 <STM32_PLC_LCD_Show_Main_Frame+0x3b0>)
 800559e:	a802      	add	r0, sp, #8
 80055a0:	f00d fbe0 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 195, COLOR_YELLOW, COLOR_NAVY, 1);
 80055a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80055a8:	22c3      	movs	r2, #195	; 0xc3
 80055aa:	2137      	movs	r1, #55	; 0x37
 80055ac:	a802      	add	r0, sp, #8
 80055ae:	e9cd 4500 	strd	r4, r5, [sp]
 80055b2:	f002 fe79 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "R:Set pulses per encoder revolution");
 80055b6:	4923      	ldr	r1, [pc, #140]	; (8005644 <STM32_PLC_LCD_Show_Main_Frame+0x3b4>)
 80055b8:	a802      	add	r0, sp, #8
 80055ba:	f00d fbd3 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 195, COLOR_YELLOW, COLOR_NAVY, 1);
 80055be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80055c2:	22c3      	movs	r2, #195	; 0xc3
 80055c4:	2137      	movs	r1, #55	; 0x37
 80055c6:	a802      	add	r0, sp, #8
 80055c8:	e9cd 4500 	strd	r4, r5, [sp]
 80055cc:	f002 fe6c 	bl	80082a8 <ILI9341_print_text>
		sprintf(text, "S:Set gain and offset for ADC/DADC");
 80055d0:	491d      	ldr	r1, [pc, #116]	; (8005648 <STM32_PLC_LCD_Show_Main_Frame+0x3b8>)
 80055d2:	a802      	add	r0, sp, #8
 80055d4:	f00d fbc6 	bl	8012d64 <strcpy>
		ILI9341_print_text(text, 55, 205, COLOR_YELLOW, COLOR_NAVY, 1);
 80055d8:	e9cd 4500 	strd	r4, r5, [sp]
 80055dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80055e0:	22cd      	movs	r2, #205	; 0xcd
 80055e2:	2137      	movs	r1, #55	; 0x37
 80055e4:	a802      	add	r0, sp, #8
 80055e6:	f002 fe5f 	bl	80082a8 <ILI9341_print_text>
	}
}
 80055ea:	b00d      	add	sp, #52	; 0x34
 80055ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055f0:	08017796 	.word	0x08017796
 80055f4:	08017799 	.word	0x08017799
 80055f8:	0801779c 	.word	0x0801779c
 80055fc:	0801779f 	.word	0x0801779f
 8005600:	080177aa 	.word	0x080177aa
 8005604:	080177c6 	.word	0x080177c6
 8005608:	080177df 	.word	0x080177df
 800560c:	080177f5 	.word	0x080177f5
 8005610:	08017815 	.word	0x08017815
 8005614:	0801782b 	.word	0x0801782b
 8005618:	08017849 	.word	0x08017849
 800561c:	0801785c 	.word	0x0801785c
 8005620:	08017871 	.word	0x08017871
 8005624:	08017885 	.word	0x08017885
 8005628:	0801789f 	.word	0x0801789f
 800562c:	080178ba 	.word	0x080178ba
 8005630:	080178d4 	.word	0x080178d4
 8005634:	080178ef 	.word	0x080178ef
 8005638:	08017904 	.word	0x08017904
 800563c:	0801791a 	.word	0x0801791a
 8005640:	0801793a 	.word	0x0801793a
 8005644:	0801795b 	.word	0x0801795b
 8005648:	0801797f 	.word	0x0801797f

0800564c <STM32_PLC_LCD_Show_Measurement_And_Time_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Measurement_And_Time_Frame(uint8_t *frame_id) {
 800564c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800564e:	250f      	movs	r5, #15
 8005650:	9500      	str	r5, [sp, #0]
 8005652:	23ea      	movs	r3, #234	; 0xea
 8005654:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8005658:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Measurement_And_Time_Frame(uint8_t *frame_id) {
 800565a:	4604      	mov	r4, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800565c:	2033      	movs	r0, #51	; 0x33
 800565e:	f002 fd07 	bl	8008070 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8005662:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005666:	f240 1209 	movw	r2, #265	; 0x109
 800566a:	211e      	movs	r1, #30
 800566c:	2032      	movs	r0, #50	; 0x32
 800566e:	f002 fd3b 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Measurement values and time", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005672:	2301      	movs	r3, #1
 8005674:	e9cd 5300 	strd	r5, r3, [sp]
 8005678:	4823      	ldr	r0, [pc, #140]	; (8005708 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0xbc>)
 800567a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800567e:	220a      	movs	r2, #10
 8005680:	2137      	movs	r1, #55	; 0x37

	/* Exit button */
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8005682:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text("Measurement values and time", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005686:	f002 fe0f 	bl	80082a8 <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 800568a:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 800568c:	23e6      	movs	r3, #230	; 0xe6
 800568e:	f240 1211 	movw	r2, #273	; 0x111
 8005692:	21cd      	movs	r1, #205	; 0xcd
 8005694:	2055      	movs	r0, #85	; 0x55
 8005696:	9600      	str	r6, [sp, #0]
 8005698:	f002 fcea 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 800569c:	9500      	str	r5, [sp, #0]
 800569e:	23e6      	movs	r3, #230	; 0xe6
 80056a0:	f240 1211 	movw	r2, #273	; 0x111
 80056a4:	21cd      	movs	r1, #205	; 0xcd
 80056a6:	2055      	movs	r0, #85	; 0x55
 80056a8:	f002 fd64 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 80056ac:	2302      	movs	r3, #2
 80056ae:	e9cd 6300 	strd	r6, r3, [sp]
 80056b2:	4816      	ldr	r0, [pc, #88]	; (800570c <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0xc0>)
 80056b4:	462b      	mov	r3, r5
 80056b6:	22d2      	movs	r2, #210	; 0xd2
 80056b8:	215f      	movs	r1, #95	; 0x5f
 80056ba:	f002 fdf5 	bl	80082a8 <ILI9341_print_text>
		STM32_PLC_LCD_Show_Plot_Frame();

		/* Logic for button */
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 80056be:	4d14      	ldr	r5, [pc, #80]	; (8005710 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0xc4>)
		STM32_PLC_LCD_Show_Plot_Frame();
 80056c0:	f002 f9b4 	bl	8007a2c <STM32_PLC_LCD_Show_Plot_Frame>
		if (TSC2046_isPressed()) {
 80056c4:	f002 fff2 	bl	80086ac <TSC2046_isPressed>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d0f9      	beq.n	80056c0 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0x74>
			TSC2046_GetTouchData();
 80056cc:	f002 ff90 	bl	80085f0 <TSC2046_GetTouchData>
			uint16_t Y = lcd.myTsData.Y;
			if (X >= 85 && X <= 273 && Y >= 205 && Y <= 230) {
 80056d0:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80056d2:	3b55      	subs	r3, #85	; 0x55
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2bbc      	cmp	r3, #188	; 0xbc
 80056d8:	d8f2      	bhi.n	80056c0 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0x74>
 80056da:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 80056dc:	3bcd      	subs	r3, #205	; 0xcd
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b19      	cmp	r3, #25
 80056e2:	d8ed      	bhi.n	80056c0 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0x74>
				ILI9341_hollow_rect(85, 205, 273, 230, COLOR_MAGENTA);
 80056e4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	f240 1211 	movw	r2, #273	; 0x111
 80056ee:	23e6      	movs	r3, #230	; 0xe6
 80056f0:	21cd      	movs	r1, #205	; 0xcd
 80056f2:	2055      	movs	r0, #85	; 0x55
 80056f4:	f002 fd3e 	bl	8008174 <ILI9341_hollow_rect>
			}
		}
	}

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80056f8:	2100      	movs	r1, #0
 80056fa:	4620      	mov	r0, r4
}
 80056fc:	b002      	add	sp, #8
 80056fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005702:	f7ff bdc5 	b.w	8005290 <STM32_PLC_LCD_Show_Main_Frame>
 8005706:	bf00      	nop
 8005708:	080179a2 	.word	0x080179a2
 800570c:	080179be 	.word	0x080179be
 8005710:	20002cf8 	.word	0x20002cf8

08005714 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame>:
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

static const uint16_t prescalers[20] = {0, 1, 2, 4, 6, 13, 72, 145, 182, 243, 365, 731, 1462, 2193, 2924, 3655, 4880, 7310, 65535};

void STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(uint8_t *frame_id) {
 8005714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005718:	b08f      	sub	sp, #60	; 0x3c
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800571a:	240f      	movs	r4, #15
 800571c:	23ea      	movs	r3, #234	; 0xea
 800571e:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8005722:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(uint8_t *frame_id) {
 8005724:	4680      	mov	r8, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005726:	9400      	str	r4, [sp, #0]
 8005728:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set PWM frequency", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800572a:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800572c:	f002 fca0 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8005730:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005734:	f240 1209 	movw	r2, #265	; 0x109
 8005738:	211e      	movs	r1, #30
 800573a:	2032      	movs	r0, #50	; 0x32
 800573c:	f002 fcd4 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set PWM frequency", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005740:	488b      	ldr	r0, [pc, #556]	; (8005970 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x25c>)
 8005742:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005746:	220a      	movs	r2, #10
 8005748:	2137      	movs	r1, #55	; 0x37
 800574a:	e9cd 4500 	strd	r4, r5, [sp]
 800574e:	f002 fdab 	bl	80082a8 <ILI9341_print_text>
    		disp(sprintf("Hz = %i at prescaler = %i", (48*10^6/(1+i))/0xFFFF, i));
		end
	 */

	/* Show all calibration inputs */
	ILI9341_print_text("PWM choices to select:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8005752:	4888      	ldr	r0, [pc, #544]	; (8005974 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x260>)
 8005754:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005758:	2223      	movs	r2, #35	; 0x23
 800575a:	2137      	movs	r1, #55	; 0x37
 800575c:	e9cd 4500 	strd	r4, r5, [sp]
 8005760:	f002 fda2 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("732Hz=0 366Hz=1 244Hz=2", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8005764:	4884      	ldr	r0, [pc, #528]	; (8005978 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x264>)
 8005766:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800576a:	222d      	movs	r2, #45	; 0x2d
 800576c:	2137      	movs	r1, #55	; 0x37
 800576e:	e9cd 4500 	strd	r4, r5, [sp]
 8005772:	f002 fd99 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("146Hz=4 104Hz=5 52Hz=6", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8005776:	2237      	movs	r2, #55	; 0x37
 8005778:	4611      	mov	r1, r2
 800577a:	4880      	ldr	r0, [pc, #512]	; (800597c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x268>)
 800577c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005780:	e9cd 4500 	strd	r4, r5, [sp]
 8005784:	f002 fd90 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("10Hz=7 5Hz=8 4Hz=9", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8005788:	487d      	ldr	r0, [pc, #500]	; (8005980 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x26c>)
 800578a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800578e:	2241      	movs	r2, #65	; 0x41
 8005790:	2137      	movs	r1, #55	; 0x37
 8005792:	e9cd 4500 	strd	r4, r5, [sp]
 8005796:	f002 fd87 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("3Hz=10 2Hz=11 1Hz=12 0.5Hz=13", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800579a:	487a      	ldr	r0, [pc, #488]	; (8005984 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x270>)
 800579c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80057a0:	224b      	movs	r2, #75	; 0x4b
 80057a2:	2137      	movs	r1, #55	; 0x37
 80057a4:	e9cd 4500 	strd	r4, r5, [sp]
 80057a8:	f002 fd7e 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("0.33Hz=14 0.25Hz=15 0.2Hz=16", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80057ac:	4876      	ldr	r0, [pc, #472]	; (8005988 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x274>)
 80057ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80057b2:	2255      	movs	r2, #85	; 0x55
 80057b4:	2137      	movs	r1, #55	; 0x37
 80057b6:	e9cd 4500 	strd	r4, r5, [sp]
 80057ba:	f002 fd75 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("0.15Hz=17 0.1Hz=18 0.011Hz=19", 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80057be:	4873      	ldr	r0, [pc, #460]	; (800598c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x278>)
 80057c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80057c4:	225f      	movs	r2, #95	; 0x5f
 80057c6:	2137      	movs	r1, #55	; 0x37
 80057c8:	e9cd 4500 	strd	r4, r5, [sp]
 80057cc:	f002 fd6c 	bl	80082a8 <ILI9341_print_text>

	/* Show selected frequency */
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 80057d0:	f7fc fc04 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 80057d4:	4606      	mov	r6, r0
 80057d6:	b148      	cbz	r0, 80057ec <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xd8>
		STM32_PLC_LCD_Show_Information_OK_Dialog("Could not mount SD card");
 80057d8:	486d      	ldr	r0, [pc, #436]	; (8005990 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x27c>)
 80057da:	f7fd ff9b 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
	STM32_PLC_SD_Open_Existing_File_With_Write("PWM.TXT");
	sprintf(text, "%i%s%i", prescaler_PWM_0_3, DELIMITER, prescaler_PWM_4_7);
	STM32_PLC_SD_Write_File(text);
	STM32_PLC_SD_Close_File();
	STM32_PLC_SD_Unmount_Card();
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80057de:	2100      	movs	r1, #0
 80057e0:	4640      	mov	r0, r8
 80057e2:	f7ff fd55 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 80057e6:	b00f      	add	sp, #60	; 0x3c
 80057e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	STM32_PLC_SD_Open_Existing_File_With_Read("PWM.TXT");
 80057ec:	4869      	ldr	r0, [pc, #420]	; (8005994 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x280>)
 80057ee:	f7fc fc0f 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 80057f2:	211e      	movs	r1, #30
 80057f4:	a806      	add	r0, sp, #24
 80057f6:	f7fc fc4f 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 80057fa:	f7fc fc19 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 80057fe:	f7fc fbdd 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	uint16_t prescaler_PWM_0_3 = atoi(strtok(text, DELIMITER));
 8005802:	4965      	ldr	r1, [pc, #404]	; (8005998 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x284>)
 8005804:	a806      	add	r0, sp, #24
 8005806:	f00e f937 	bl	8013a78 <strtok>
 800580a:	f00c fddc 	bl	80123c6 <atoi>
	uint16_t prescaler_PWM_4_7 = atoi(strtok(NULL, DELIMITER));
 800580e:	4962      	ldr	r1, [pc, #392]	; (8005998 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x284>)
	uint16_t prescaler_PWM_0_3 = atoi(strtok(text, DELIMITER));
 8005810:	4681      	mov	r9, r0
	uint16_t prescaler_PWM_4_7 = atoi(strtok(NULL, DELIMITER));
 8005812:	4630      	mov	r0, r6
 8005814:	f00e f930 	bl	8013a78 <strtok>
 8005818:	f00c fdd5 	bl	80123c6 <atoi>
	ILI9341_print_text("Current settings:", 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 800581c:	e9cd 4500 	strd	r4, r5, [sp]
	uint16_t prescaler_PWM_4_7 = atoi(strtok(NULL, DELIMITER));
 8005820:	4607      	mov	r7, r0
	ILI9341_print_text("Current settings:", 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8005822:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005826:	485d      	ldr	r0, [pc, #372]	; (800599c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x288>)
 8005828:	2269      	movs	r2, #105	; 0x69
 800582a:	2137      	movs	r1, #55	; 0x37
 800582c:	f002 fd3c 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "PWM_0_3:%i PWM_4_7:%i", prescaler_PWM_0_3, prescaler_PWM_4_7);
 8005830:	495b      	ldr	r1, [pc, #364]	; (80059a0 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x28c>)
 8005832:	b2bb      	uxth	r3, r7
 8005834:	fa1f f289 	uxth.w	r2, r9
 8005838:	a806      	add	r0, sp, #24
 800583a:	f00d fa73 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 800583e:	e9cd 4500 	strd	r4, r5, [sp]
 8005842:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005846:	2269      	movs	r2, #105	; 0x69
 8005848:	2137      	movs	r1, #55	; 0x37
 800584a:	a806      	add	r0, sp, #24
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 800584c:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8005850:	f002 fd2a 	bl	80082a8 <ILI9341_print_text>
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 8005854:	23dc      	movs	r3, #220	; 0xdc
 8005856:	f240 1211 	movw	r2, #273	; 0x111
 800585a:	21c3      	movs	r1, #195	; 0xc3
 800585c:	2055      	movs	r0, #85	; 0x55
 800585e:	9400      	str	r4, [sp, #0]
 8005860:	f002 fc06 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 8005864:	23dc      	movs	r3, #220	; 0xdc
 8005866:	f240 1211 	movw	r2, #273	; 0x111
 800586a:	21c3      	movs	r1, #195	; 0xc3
 800586c:	2055      	movs	r0, #85	; 0x55
 800586e:	9600      	str	r6, [sp, #0]
 8005870:	f002 fc80 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Select PWM freq", 90, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8005874:	2302      	movs	r3, #2
 8005876:	e9cd 4300 	strd	r4, r3, [sp]
 800587a:	484a      	ldr	r0, [pc, #296]	; (80059a4 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x290>)
 800587c:	4633      	mov	r3, r6
 800587e:	22c8      	movs	r2, #200	; 0xc8
 8005880:	215a      	movs	r1, #90	; 0x5a
 8005882:	f002 fd11 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 195, 273, 220);
 8005886:	23dc      	movs	r3, #220	; 0xdc
 8005888:	f240 1211 	movw	r2, #273	; 0x111
 800588c:	21c3      	movs	r1, #195	; 0xc3
 800588e:	2055      	movs	r0, #85	; 0x55
 8005890:	f003 fbac 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set PWM frequency?") == 0) {
 8005894:	4844      	ldr	r0, [pc, #272]	; (80059a8 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x294>)
 8005896:	f7fd ffaf 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 800589a:	2800      	cmp	r0, #0
 800589c:	d09f      	beq.n	80057de <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xca>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 0 and 19") == 0) {
 800589e:	4b43      	ldr	r3, [pc, #268]	; (80059ac <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x298>)
 80058a0:	aa05      	add	r2, sp, #20
 80058a2:	4631      	mov	r1, r6
 80058a4:	4630      	mov	r0, r6
 80058a6:	f001 ff7d 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d097      	beq.n	80057de <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xca>
	if(number_value < 0)
 80058ae:	eddd 7a05 	vldr	s15, [sp, #20]
 80058b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ba:	d44b      	bmi.n	8005954 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x240>
	else if(number_value > 19)
 80058bc:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80058c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c8:	dc46      	bgt.n	8005958 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x244>
		PWM_frequency = (uint8_t) number_value;
 80058ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ce:	edcd 7a03 	vstr	s15, [sp, #12]
 80058d2:	f89d 400c 	ldrb.w	r4, [sp, #12]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Set setting for PWM0-PWM3=0 or PWM4-PWM7=1") == 0) {
 80058d6:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x29c>)
 80058d8:	2100      	movs	r1, #0
 80058da:	aa05      	add	r2, sp, #20
 80058dc:	4608      	mov	r0, r1
 80058de:	f001 ff61 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f43f af7b 	beq.w	80057de <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xca>
	if(number_value < 0)
 80058e8:	eddd 7a05 	vldr	s15, [sp, #20]
 80058ec:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x2a0>)
 80058ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f6:	d40d      	bmi.n	8005914 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x200>
	else if(number_value > 1)
 80058f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005904:	dc2a      	bgt.n	800595c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x248>
		PWM_TIM = (uint8_t) number_value;
 8005906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800590a:	ee17 5a90 	vmov	r5, s15
	if(PWM_TIM == 0)
 800590e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8005912:	d124      	bne.n	800595e <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x24a>
		STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescalers[PWM_frequency]);
 8005914:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005918:	f7fc fa0c 	bl	8001d34 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 800591c:	f7fc fb5e 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8005920:	2800      	cmp	r0, #0
 8005922:	f47f af59 	bne.w	80057d8 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xc4>
	if(PWM_TIM == 0)
 8005926:	b2a4      	uxth	r4, r4
 8005928:	b1fe      	cbz	r6, 800596a <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x256>
		prescaler_PWM_4_7 = PWM_frequency;
 800592a:	4627      	mov	r7, r4
	uint16_t prescaler_PWM_0_3 = atoi(strtok(text, DELIMITER));
 800592c:	fa1f f489 	uxth.w	r4, r9
	STM32_PLC_SD_Open_Existing_File_With_Write("PWM.TXT");
 8005930:	4818      	ldr	r0, [pc, #96]	; (8005994 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x280>)
 8005932:	f7fc fb75 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
	sprintf(text, "%i%s%i", prescaler_PWM_0_3, DELIMITER, prescaler_PWM_4_7);
 8005936:	4b18      	ldr	r3, [pc, #96]	; (8005998 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x284>)
 8005938:	491f      	ldr	r1, [pc, #124]	; (80059b8 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x2a4>)
 800593a:	9700      	str	r7, [sp, #0]
 800593c:	4622      	mov	r2, r4
 800593e:	a806      	add	r0, sp, #24
 8005940:	f00d f9f0 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Write_File(text);
 8005944:	a806      	add	r0, sp, #24
 8005946:	f7fc fbad 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Close_File();
 800594a:	f7fc fb71 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 800594e:	f7fc fb35 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
 8005952:	e744      	b.n	80057de <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xca>
		PWM_frequency = 0;
 8005954:	4634      	mov	r4, r6
 8005956:	e7be      	b.n	80058d6 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1c2>
		PWM_frequency = 19;
 8005958:	2413      	movs	r4, #19
 800595a:	e7bc      	b.n	80058d6 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1c2>
		PWM_TIM = 1;
 800595c:	2501      	movs	r5, #1
		STM32_PLC_PWM4_To_PWM7_Set_Prescaler(prescalers[PWM_frequency]);
 800595e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005962:	f7fc f9f1 	bl	8001d48 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>
 8005966:	462e      	mov	r6, r5
 8005968:	e7d8      	b.n	800591c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x208>
	uint16_t prescaler_PWM_4_7 = atoi(strtok(NULL, DELIMITER));
 800596a:	b2bf      	uxth	r7, r7
 800596c:	e7e0      	b.n	8005930 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x21c>
 800596e:	bf00      	nop
 8005970:	080179cd 	.word	0x080179cd
 8005974:	080179df 	.word	0x080179df
 8005978:	080179f6 	.word	0x080179f6
 800597c:	08017a0e 	.word	0x08017a0e
 8005980:	08017a25 	.word	0x08017a25
 8005984:	08017a38 	.word	0x08017a38
 8005988:	08017a56 	.word	0x08017a56
 800598c:	08017a73 	.word	0x08017a73
 8005990:	08016e92 	.word	0x08016e92
 8005994:	08016e02 	.word	0x08016e02
 8005998:	08016cb1 	.word	0x08016cb1
 800599c:	08017477 	.word	0x08017477
 80059a0:	08017a91 	.word	0x08017a91
 80059a4:	08017aa7 	.word	0x08017aa7
 80059a8:	08017ab7 	.word	0x08017ab7
 80059ac:	08017ad9 	.word	0x08017ad9
 80059b0:	08017afd 	.word	0x08017afd
 80059b4:	08017b28 	.word	0x08017b28
 80059b8:	08018982 	.word	0x08018982

080059bc <STM32_PLC_LCD_Show_SDADC_Settings_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_SDADC_Settings_Frame(uint8_t *frame_id) {
 80059bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80059c4:	240f      	movs	r4, #15
 80059c6:	9400      	str	r4, [sp, #0]
 80059c8:	23ea      	movs	r3, #234	; 0xea
 80059ca:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80059ce:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_SDADC_Settings_Frame(uint8_t *frame_id) {
 80059d0:	4680      	mov	r8, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80059d2:	2033      	movs	r0, #51	; 0x33
 80059d4:	f002 fb4c 	bl	8008070 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set gain, offset for input 0 to 16", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80059d8:	2501      	movs	r5, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80059da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80059de:	f240 1209 	movw	r2, #265	; 0x109
 80059e2:	211e      	movs	r1, #30
 80059e4:	2032      	movs	r0, #50	; 0x32
 80059e6:	f002 fb7f 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set gain, offset for input 0 to 16", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80059ea:	e9cd 4500 	strd	r4, r5, [sp]
 80059ee:	48c4      	ldr	r0, [pc, #784]	; (8005d00 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x344>)
 80059f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80059f4:	220a      	movs	r2, #10
 80059f6:	2137      	movs	r1, #55	; 0x37
 80059f8:	f002 fc56 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Values order:Gain Offset ", 55, 20, COLOR_YELLOW, COLOR_NAVY, 1);
 80059fc:	e9cd 4500 	strd	r4, r5, [sp]
 8005a00:	48c0      	ldr	r0, [pc, #768]	; (8005d04 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x348>)
 8005a02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005a06:	2214      	movs	r2, #20
 8005a08:	2137      	movs	r1, #55	; 0x37
 8005a0a:	f002 fc4d 	bl	80082a8 <ILI9341_print_text>

	/* Read */
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 8005a0e:	f7fc fae5 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8005a12:	4604      	mov	r4, r0
 8005a14:	b150      	cbz	r0, 8005a2c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x70>
		STM32_PLC_LCD_Show_Information_OK_Dialog("Could not mount SD card");
 8005a16:	48bc      	ldr	r0, [pc, #752]	; (8005d08 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x34c>)
 8005a18:	f7fd fe7c 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
		STM32_PLC_SD_Write_File(text);
	}
	/* Exit */
	STM32_PLC_SD_Close_File();
	STM32_PLC_SD_Unmount_Card();
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4640      	mov	r0, r8
 8005a20:	f7ff fc36 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>

}
 8005a24:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8005a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32_PLC_SD_Open_Existing_File_With_Read("SDADC.TXT");
 8005a2c:	48b7      	ldr	r0, [pc, #732]	; (8005d0c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x350>)
			sprintf(line_text, "%i=DADC%i,DADC%i:%i %i", i, i+i-12, i+i+1-12, gain_offset[0 + 2*i], gain_offset[1 + 2*i]);
 8005a2e:	f8df b330 	ldr.w	fp, [pc, #816]	; 8005d60 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3a4>
	STM32_PLC_SD_Open_Existing_File_With_Read("SDADC.TXT");
 8005a32:	f7fc faed 	bl	8002010 <STM32_PLC_SD_Open_Existing_File_With_Read>
	STM32_PLC_SD_Read_File(text, sizeof(text));
 8005a36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005a3a:	a81f      	add	r0, sp, #124	; 0x7c
 8005a3c:	f7fc fb2c 	bl	8002098 <STM32_PLC_SD_Read_File>
	STM32_PLC_SD_Close_File();
 8005a40:	f7fc faf6 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8005a44:	f7fc faba 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	sprintf(delimiters, "%s,", DELIMITER); /* Multiple delimiter */
 8005a48:	4ab1      	ldr	r2, [pc, #708]	; (8005d10 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x354>)
 8005a4a:	49b2      	ldr	r1, [pc, #712]	; (8005d14 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x358>)
 8005a4c:	a807      	add	r0, sp, #28
 8005a4e:	f00d f969 	bl	8012d24 <siprintf>
	for(uint8_t i = 0; i < 9; i++) {
 8005a52:	f10d 0924 	add.w	r9, sp, #36	; 0x24
	sprintf(delimiters, "%s,", DELIMITER); /* Multiple delimiter */
 8005a56:	464f      	mov	r7, r9
 8005a58:	4625      	mov	r5, r4
	uint16_t y = 25;
 8005a5a:	f04f 0a19 	mov.w	sl, #25
		if(i == 0){
 8005a5e:	f10a 060a 	add.w	r6, sl, #10
 8005a62:	fa1f fa86 	uxth.w	sl, r6
 8005a66:	b2ea      	uxtb	r2, r5
 8005a68:	b236      	sxth	r6, r6
 8005a6a:	2d00      	cmp	r5, #0
 8005a6c:	f040 80c4 	bne.w	8005bf8 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x23c>
			gain_offset[0 + 2*i] = atoff(strtok(text, delimiters));
 8005a70:	a907      	add	r1, sp, #28
 8005a72:	a81f      	add	r0, sp, #124	; 0x7c
 8005a74:	f00e f800 	bl	8013a78 <strtok>
 8005a78:	f00c fca2 	bl	80123c0 <atoff>
 8005a7c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
			gain_offset[1 + 2*i] = atoff(strtok(NULL, delimiters));
 8005a80:	a907      	add	r1, sp, #28
			gain_offset[0 + 2*i] = atoff(strtok(text, delimiters));
 8005a82:	ee10 3a10 	vmov	r3, s0
			gain_offset[1 + 2*i] = atoff(strtok(NULL, delimiters));
 8005a86:	4628      	mov	r0, r5
			gain_offset[0 + 2*i] = atoff(strtok(text, delimiters));
 8005a88:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
			gain_offset[1 + 2*i] = atoff(strtok(NULL, delimiters));
 8005a8c:	f00d fff4 	bl	8013a78 <strtok>
 8005a90:	f00c fc96 	bl	80123c0 <atoff>
 8005a94:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8005a98:	ee10 3a10 	vmov	r3, s0
 8005a9c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			sprintf(line_text, "%i=ADC%i,ADC%i,ADC%i:%i %i", i, i+i+i, i+i+i+1, i+i+i+2, gain_offset[0 + 2*i], gain_offset[1 + 2*i]);
 8005aa0:	887a      	ldrh	r2, [r7, #2]
 8005aa2:	9203      	str	r2, [sp, #12]
 8005aa4:	883a      	ldrh	r2, [r7, #0]
 8005aa6:	9202      	str	r2, [sp, #8]
 8005aa8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005aac:	1c9a      	adds	r2, r3, #2
 8005aae:	9201      	str	r2, [sp, #4]
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	9200      	str	r2, [sp, #0]
 8005ab4:	4998      	ldr	r1, [pc, #608]	; (8005d18 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x35c>)
 8005ab6:	462a      	mov	r2, r5
 8005ab8:	a812      	add	r0, sp, #72	; 0x48
 8005aba:	f00d f933 	bl	8012d24 <siprintf>
			ILI9341_print_text(line_text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005abe:	230f      	movs	r3, #15
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	e9cd 3200 	strd	r3, r2, [sp]
 8005ac6:	2137      	movs	r1, #55	; 0x37
 8005ac8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005acc:	4632      	mov	r2, r6
 8005ace:	a812      	add	r0, sp, #72	; 0x48
 8005ad0:	f002 fbea 	bl	80082a8 <ILI9341_print_text>
	for(uint8_t i = 0; i < 9; i++) {
 8005ad4:	f1ba 0f73 	cmp.w	sl, #115	; 0x73
 8005ad8:	f105 0501 	add.w	r5, r5, #1
 8005adc:	f107 0704 	add.w	r7, r7, #4
 8005ae0:	d1bd      	bne.n	8005a5e <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0xa2>
	ILI9341_print_text("Gain values from 1/2 to 32:", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005ae2:	250f      	movs	r5, #15
 8005ae4:	2601      	movs	r6, #1
 8005ae6:	e9cd 5600 	strd	r5, r6, [sp]
 8005aea:	488c      	ldr	r0, [pc, #560]	; (8005d1c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x360>)
 8005aec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005af0:	227d      	movs	r2, #125	; 0x7d
 8005af2:	2137      	movs	r1, #55	; 0x37
 8005af4:	f002 fbd8 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("0=1/2,1=1,2=2,3=4,4=8,5=16,6=32", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005af8:	e9cd 5600 	strd	r5, r6, [sp]
 8005afc:	4888      	ldr	r0, [pc, #544]	; (8005d20 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x364>)
 8005afe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005b02:	2287      	movs	r2, #135	; 0x87
 8005b04:	2137      	movs	r1, #55	; 0x37
 8005b06:	f002 fbcf 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Offset values are between 0 and 4095", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005b0a:	e9cd 5600 	strd	r5, r6, [sp]
 8005b0e:	4885      	ldr	r0, [pc, #532]	; (8005d24 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x368>)
 8005b10:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005b14:	2291      	movs	r2, #145	; 0x91
 8005b16:	2137      	movs	r1, #55	; 0x37
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8005b18:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("Offset values are between 0 and 4095", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005b1c:	f002 fbc4 	bl	80082a8 <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8005b20:	2600      	movs	r6, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8005b22:	23e6      	movs	r3, #230	; 0xe6
 8005b24:	f240 1211 	movw	r2, #273	; 0x111
 8005b28:	21cd      	movs	r1, #205	; 0xcd
 8005b2a:	2055      	movs	r0, #85	; 0x55
 8005b2c:	9500      	str	r5, [sp, #0]
 8005b2e:	f002 fa9f 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8005b32:	23e6      	movs	r3, #230	; 0xe6
 8005b34:	f240 1211 	movw	r2, #273	; 0x111
 8005b38:	21cd      	movs	r1, #205	; 0xcd
 8005b3a:	2055      	movs	r0, #85	; 0x55
 8005b3c:	9600      	str	r6, [sp, #0]
 8005b3e:	f002 fb19 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Select setting", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8005b42:	2302      	movs	r3, #2
 8005b44:	e9cd 5300 	strd	r5, r3, [sp]
 8005b48:	4877      	ldr	r0, [pc, #476]	; (8005d28 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x36c>)
 8005b4a:	4633      	mov	r3, r6
 8005b4c:	22d2      	movs	r2, #210	; 0xd2
 8005b4e:	215f      	movs	r1, #95	; 0x5f
 8005b50:	f002 fbaa 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 8005b54:	23e6      	movs	r3, #230	; 0xe6
 8005b56:	f240 1211 	movw	r2, #273	; 0x111
 8005b5a:	21cd      	movs	r1, #205	; 0xcd
 8005b5c:	2055      	movs	r0, #85	; 0x55
 8005b5e:	f003 fa45 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to change settings?") == 0) {
 8005b62:	4872      	ldr	r0, [pc, #456]	; (8005d2c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x370>)
 8005b64:	f7fd fe48 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f43f af57 	beq.w	8005a1c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x60>
	float number_value = 0;
 8005b6e:	2500      	movs	r5, #0
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 0 and 8") == 0) {
 8005b70:	4b6f      	ldr	r3, [pc, #444]	; (8005d30 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x374>)
	float number_value = 0;
 8005b72:	9508      	str	r5, [sp, #32]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 0 and 8") == 0) {
 8005b74:	aa08      	add	r2, sp, #32
 8005b76:	4631      	mov	r1, r6
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f001 fe13 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f43f af4c 	beq.w	8005a1c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x60>
	if(number_value < 0)
 8005b84:	eddd 7a08 	vldr	s15, [sp, #32]
 8005b88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b90:	d576      	bpl.n	8005c80 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x2c4>
	number_value = 0;
 8005b92:	9508      	str	r5, [sp, #32]
		sprintf(text, "Enter gain value for ADC0,ADC1,ADC2");
 8005b94:	4967      	ldr	r1, [pc, #412]	; (8005d34 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x378>)
 8005b96:	a81f      	add	r0, sp, #124	; 0x7c
 8005b98:	f00d f8e4 	bl	8012d64 <strcpy>
		break;
 8005b9c:	2600      	movs	r6, #0
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, text) == 0) {
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	ab1f      	add	r3, sp, #124	; 0x7c
 8005ba2:	aa08      	add	r2, sp, #32
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	f001 fdfd 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	f43f af36 	beq.w	8005a1c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x60>
	if(number_value < 0)
 8005bb0:	eddd 7a08 	vldr	s15, [sp, #32]
 8005bb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbc:	d40d      	bmi.n	8005bda <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x21e>
	else if(number_value > 6)
 8005bbe:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8005bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		gain = (uint8_t) number_value;
 8005bca:	bfd7      	itett	le
 8005bcc:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		gain = 6;
 8005bd0:	2406      	movgt	r4, #6
		gain = (uint8_t) number_value;
 8005bd2:	edcd 7a04 	vstrle	s15, [sp, #16]
 8005bd6:	f89d 4010 	ldrble.w	r4, [sp, #16]
	number_value = 0;
 8005bda:	9508      	str	r5, [sp, #32]
	switch(analog_input_index){
 8005bdc:	2e08      	cmp	r6, #8
 8005bde:	f200 80c5 	bhi.w	8005d6c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3b0>
 8005be2:	e8df f016 	tbh	[pc, r6, lsl #1]
 8005be6:	00bf      	.short	0x00bf
 8005be8:	00ea00e8 	.word	0x00ea00e8
 8005bec:	00ee00ec 	.word	0x00ee00ec
 8005bf0:	00f200f0 	.word	0x00f200f0
 8005bf4:	00f600f4 	.word	0x00f600f4
			gain_offset[0 + 2*i] = atoff(strtok(NULL, delimiters));
 8005bf8:	a907      	add	r1, sp, #28
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	9205      	str	r2, [sp, #20]
 8005bfe:	f00d ff3b 	bl	8013a78 <strtok>
 8005c02:	f00c fbdd 	bl	80123c0 <atoff>
 8005c06:	eebc 0ac0 	vcvt.u32.f32	s0, s0
			gain_offset[1 + 2*i] = atoff(strtok(NULL, delimiters));
 8005c0a:	a907      	add	r1, sp, #28
			gain_offset[0 + 2*i] = atoff(strtok(NULL, delimiters));
 8005c0c:	ee10 3a10 	vmov	r3, s0
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	803b      	strh	r3, [r7, #0]
			gain_offset[1 + 2*i] = atoff(strtok(NULL, delimiters));
 8005c14:	2000      	movs	r0, #0
			gain_offset[0 + 2*i] = atoff(strtok(NULL, delimiters));
 8005c16:	9304      	str	r3, [sp, #16]
			gain_offset[1 + 2*i] = atoff(strtok(NULL, delimiters));
 8005c18:	f00d ff2e 	bl	8013a78 <strtok>
 8005c1c:	f00c fbd0 	bl	80123c0 <atoff>
 8005c20:	eebc 0ac0 	vcvt.u32.f32	s0, s0
		if(i <= 2){
 8005c24:	9a05      	ldr	r2, [sp, #20]
			gain_offset[1 + 2*i] = atoff(strtok(NULL, delimiters));
 8005c26:	ee10 3a10 	vmov	r3, s0
		if(i <= 2){
 8005c2a:	2a02      	cmp	r2, #2
			gain_offset[1 + 2*i] = atoff(strtok(NULL, delimiters));
 8005c2c:	b299      	uxth	r1, r3
 8005c2e:	8079      	strh	r1, [r7, #2]
		if(i <= 2){
 8005c30:	9b04      	ldr	r3, [sp, #16]
 8005c32:	f67f af35 	bls.w	8005aa0 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0xe4>
		}else if(i >= 3 && i <= 5){
 8005c36:	1ed0      	subs	r0, r2, #3
 8005c38:	2802      	cmp	r0, #2
 8005c3a:	d808      	bhi.n	8005c4e <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x292>
			sprintf(line_text, "%i=ADC%i:%i %i", i, i, gain_offset[0 + 2*i], gain_offset[1 + 2*i]);
 8005c3c:	e9cd 3100 	strd	r3, r1, [sp]
 8005c40:	462a      	mov	r2, r5
 8005c42:	493d      	ldr	r1, [pc, #244]	; (8005d38 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x37c>)
 8005c44:	462b      	mov	r3, r5
 8005c46:	a812      	add	r0, sp, #72	; 0x48
 8005c48:	f00d f86c 	bl	8012d24 <siprintf>
			ILI9341_print_text(line_text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005c4c:	e737      	b.n	8005abe <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x102>
		}else if(i >= 6 && i <= 7){
 8005c4e:	2a08      	cmp	r2, #8
 8005c50:	d00c      	beq.n	8005c6c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x2b0>
			sprintf(line_text, "%i=DADC%i,DADC%i:%i %i", i, i+i-12, i+i+1-12, gain_offset[0 + 2*i], gain_offset[1 + 2*i]);
 8005c52:	006a      	lsls	r2, r5, #1
 8005c54:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	3a0b      	subs	r2, #11
 8005c5c:	9200      	str	r2, [sp, #0]
 8005c5e:	3b0c      	subs	r3, #12
 8005c60:	462a      	mov	r2, r5
 8005c62:	4659      	mov	r1, fp
 8005c64:	a812      	add	r0, sp, #72	; 0x48
 8005c66:	f00d f85d 	bl	8012d24 <siprintf>
			ILI9341_print_text(line_text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005c6a:	e728      	b.n	8005abe <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x102>
			sprintf(line_text, "%i=DADC4:%i %i", i, gain_offset[0 + 2*i], gain_offset[1 + 2*i]);
 8005c6c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	4932      	ldr	r1, [pc, #200]	; (8005d3c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x380>)
 8005c74:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8005c78:	a812      	add	r0, sp, #72	; 0x48
 8005c7a:	f00d f853 	bl	8012d24 <siprintf>
 8005c7e:	e71e      	b.n	8005abe <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x102>
	else if(number_value > 8)
 8005c80:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8c:	dd06      	ble.n	8005c9c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x2e0>
	number_value = 0;
 8005c8e:	9508      	str	r5, [sp, #32]
		sprintf(text, "Enter gain value for DADC4");
 8005c90:	492b      	ldr	r1, [pc, #172]	; (8005d40 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x384>)
 8005c92:	a81f      	add	r0, sp, #124	; 0x7c
 8005c94:	f00d f866 	bl	8012d64 <strcpy>
		break;
 8005c98:	2608      	movs	r6, #8
 8005c9a:	e780      	b.n	8005b9e <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x1e2>
		analog_input_index = (uint8_t) number_value;
 8005c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	number_value = 0;
 8005ca0:	9508      	str	r5, [sp, #32]
		analog_input_index = (uint8_t) number_value;
 8005ca2:	edcd 7a04 	vstr	s15, [sp, #16]
 8005ca6:	f89d 6010 	ldrb.w	r6, [sp, #16]
	switch(analog_input_index){
 8005caa:	2e08      	cmp	r6, #8
 8005cac:	f63f af77 	bhi.w	8005b9e <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x1e2>
 8005cb0:	a301      	add	r3, pc, #4	; (adr r3, 8005cb8 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x2fc>)
 8005cb2:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005b95 	.word	0x08005b95
 8005cbc:	08005cdd 	.word	0x08005cdd
 8005cc0:	08005ce7 	.word	0x08005ce7
 8005cc4:	08005ceb 	.word	0x08005ceb
 8005cc8:	08005cef 	.word	0x08005cef
 8005ccc:	08005cf3 	.word	0x08005cf3
 8005cd0:	08005cf7 	.word	0x08005cf7
 8005cd4:	08005cfb 	.word	0x08005cfb
 8005cd8:	08005c91 	.word	0x08005c91
		sprintf(text, "Enter gain value for ADC3,ADC4,ADC5");
 8005cdc:	4919      	ldr	r1, [pc, #100]	; (8005d44 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x388>)
		sprintf(text, "Enter gain value for ADC6,ADC7,ADC8");
 8005cde:	a81f      	add	r0, sp, #124	; 0x7c
 8005ce0:	f00d f840 	bl	8012d64 <strcpy>
		break;
 8005ce4:	e75b      	b.n	8005b9e <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x1e2>
		sprintf(text, "Enter gain value for ADC6,ADC7,ADC8");
 8005ce6:	4918      	ldr	r1, [pc, #96]	; (8005d48 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x38c>)
 8005ce8:	e7f9      	b.n	8005cde <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x322>
		sprintf(text, "Enter gain value for ADC9");
 8005cea:	4918      	ldr	r1, [pc, #96]	; (8005d4c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x390>)
 8005cec:	e7f7      	b.n	8005cde <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x322>
		sprintf(text, "Enter gain value for ADC10");
 8005cee:	4918      	ldr	r1, [pc, #96]	; (8005d50 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x394>)
 8005cf0:	e7f5      	b.n	8005cde <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x322>
		sprintf(text, "Enter gain value for ADC11");
 8005cf2:	4918      	ldr	r1, [pc, #96]	; (8005d54 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x398>)
 8005cf4:	e7f3      	b.n	8005cde <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x322>
		sprintf(text, "Enter gain value for DADC0,DADC1");
 8005cf6:	4918      	ldr	r1, [pc, #96]	; (8005d58 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x39c>)
 8005cf8:	e7f1      	b.n	8005cde <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x322>
		sprintf(text, "Enter gain value for DADC2,DADC3");
 8005cfa:	4918      	ldr	r1, [pc, #96]	; (8005d5c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3a0>)
 8005cfc:	e7ef      	b.n	8005cde <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x322>
 8005cfe:	bf00      	nop
 8005d00:	08017b50 	.word	0x08017b50
 8005d04:	08017b73 	.word	0x08017b73
 8005d08:	08016e92 	.word	0x08016e92
 8005d0c:	08016df8 	.word	0x08016df8
 8005d10:	08016cb1 	.word	0x08016cb1
 8005d14:	08016dc8 	.word	0x08016dc8
 8005d18:	08017b8d 	.word	0x08017b8d
 8005d1c:	08017bdd 	.word	0x08017bdd
 8005d20:	08017bf9 	.word	0x08017bf9
 8005d24:	08017c19 	.word	0x08017c19
 8005d28:	08016ee1 	.word	0x08016ee1
 8005d2c:	08016ef0 	.word	0x08016ef0
 8005d30:	08017c3e 	.word	0x08017c3e
 8005d34:	08017c61 	.word	0x08017c61
 8005d38:	08017ba8 	.word	0x08017ba8
 8005d3c:	08017bce 	.word	0x08017bce
 8005d40:	08017d5f 	.word	0x08017d5f
 8005d44:	08017c85 	.word	0x08017c85
 8005d48:	08017ca9 	.word	0x08017ca9
 8005d4c:	08017ccd 	.word	0x08017ccd
 8005d50:	08017ce7 	.word	0x08017ce7
 8005d54:	08017d02 	.word	0x08017d02
 8005d58:	08017d1d 	.word	0x08017d1d
 8005d5c:	08017d3e 	.word	0x08017d3e
 8005d60:	08017bb7 	.word	0x08017bb7
		sprintf(text, "Enter offset value for ADC0,ADC1,ADC2");
 8005d64:	4950      	ldr	r1, [pc, #320]	; (8005ea8 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4ec>)
		sprintf(text, "Enter offset value for DADC4");
 8005d66:	a81f      	add	r0, sp, #124	; 0x7c
 8005d68:	f00c fffc 	bl	8012d64 <strcpy>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, text) == 0) {
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	ab1f      	add	r3, sp, #124	; 0x7c
 8005d70:	aa08      	add	r2, sp, #32
 8005d72:	4608      	mov	r0, r1
 8005d74:	f001 fd16 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f43f ae4f 	beq.w	8005a1c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x60>
	if(number_value < 0)
 8005d7e:	eddd 7a08 	vldr	s15, [sp, #32]
 8005d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8a:	d424      	bmi.n	8005dd6 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x41a>
	else if(number_value > 4095)
 8005d8c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005eac <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4f0>
 8005d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d98:	dc1f      	bgt.n	8005dda <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x41e>
		offset = (uint16_t) number_value;
 8005d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9e:	ee17 3a90 	vmov	r3, s15
 8005da2:	b29d      	uxth	r5, r3
	switch(analog_input_index){
 8005da4:	2e08      	cmp	r6, #8
 8005da6:	d821      	bhi.n	8005dec <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x430>
 8005da8:	e8df f006 	tbb	[pc, r6]
 8005dac:	5b57531a 	.word	0x5b57531a
 8005db0:	6d686460 	.word	0x6d686460
 8005db4:	71          	.byte	0x71
 8005db5:	00          	.byte	0x00
		sprintf(text, "Enter offset value for ADC3,ADC4,ADC5");
 8005db6:	493e      	ldr	r1, [pc, #248]	; (8005eb0 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4f4>)
 8005db8:	e7d5      	b.n	8005d66 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3aa>
		sprintf(text, "Enter offset value for ADC6,ADC7,ADC8");
 8005dba:	493e      	ldr	r1, [pc, #248]	; (8005eb4 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4f8>)
 8005dbc:	e7d3      	b.n	8005d66 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3aa>
		sprintf(text, "Enter offset value for ADC9");
 8005dbe:	493e      	ldr	r1, [pc, #248]	; (8005eb8 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4fc>)
 8005dc0:	e7d1      	b.n	8005d66 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3aa>
		sprintf(text, "Enter offset value for ADC10");
 8005dc2:	493e      	ldr	r1, [pc, #248]	; (8005ebc <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x500>)
 8005dc4:	e7cf      	b.n	8005d66 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3aa>
		sprintf(text, "Enter offset value for ADC11");
 8005dc6:	493e      	ldr	r1, [pc, #248]	; (8005ec0 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x504>)
 8005dc8:	e7cd      	b.n	8005d66 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3aa>
		sprintf(text, "Enter offset value for DADC0,DADC1");
 8005dca:	493e      	ldr	r1, [pc, #248]	; (8005ec4 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x508>)
 8005dcc:	e7cb      	b.n	8005d66 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3aa>
		sprintf(text, "Enter offset value for DADC2,DADC3");
 8005dce:	493e      	ldr	r1, [pc, #248]	; (8005ec8 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x50c>)
 8005dd0:	e7c9      	b.n	8005d66 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3aa>
		sprintf(text, "Enter offset value for DADC4");
 8005dd2:	493e      	ldr	r1, [pc, #248]	; (8005ecc <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x510>)
 8005dd4:	e7c7      	b.n	8005d66 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3aa>
		offset = 0;
 8005dd6:	2500      	movs	r5, #0
 8005dd8:	e7e4      	b.n	8005da4 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3e8>
		offset = 4905;
 8005dda:	f241 3529 	movw	r5, #4905	; 0x1329
 8005dde:	e7e1      	b.n	8005da4 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x3e8>
		STM32_PLC_Analog_Input_Set_Gain_Offset(1, SDADC_CONF_INDEX_0, gain, offset);
 8005de0:	462b      	mov	r3, r5
 8005de2:	4622      	mov	r2, r4
 8005de4:	2100      	movs	r1, #0
		STM32_PLC_Analog_Input_Set_Gain_Offset(1, SDADC_CONF_INDEX_2, gain, offset);
 8005de6:	2001      	movs	r0, #1
		STM32_PLC_Analog_Input_Set_Gain_Offset(3, SDADC_CONF_INDEX_2, gain, offset);
 8005de8:	f7fa fffa 	bl	8000de0 <STM32_PLC_Analog_Input_Set_Gain_Offset>
		offset = 4905;
 8005dec:	2300      	movs	r3, #0
			gain_offset[0 + i*2] = gain;
 8005dee:	aa09      	add	r2, sp, #36	; 0x24
		if(analog_input_index == i){
 8005df0:	b2d9      	uxtb	r1, r3
 8005df2:	42b1      	cmp	r1, r6
			gain_offset[1 + i*2] = offset;
 8005df4:	bf04      	itt	eq
 8005df6:	eb02 0183 	addeq.w	r1, r2, r3, lsl #2
			gain_offset[0 + i*2] = gain;
 8005dfa:	f822 4023 	strheq.w	r4, [r2, r3, lsl #2]
			gain_offset[1 + i*2] = offset;
 8005dfe:	f103 0301 	add.w	r3, r3, #1
 8005e02:	bf08      	it	eq
 8005e04:	804d      	strheq	r5, [r1, #2]
	for(uint8_t i = 0; i < 9; i++) {
 8005e06:	2b09      	cmp	r3, #9
 8005e08:	d1f2      	bne.n	8005df0 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x434>
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 8005e0a:	f7fc f8e7 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8005e0e:	4604      	mov	r4, r0
 8005e10:	2800      	cmp	r0, #0
 8005e12:	f47f ae00 	bne.w	8005a16 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x5a>
	STM32_PLC_SD_Open_Existing_File_With_Write("SDADC.TXT");
 8005e16:	482e      	ldr	r0, [pc, #184]	; (8005ed0 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x514>)
			sprintf(text, "%i,%i", gain_offset[0 + 2*i], gain_offset[1 + 2*i]);
 8005e18:	4d2e      	ldr	r5, [pc, #184]	; (8005ed4 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x518>)
			sprintf(text, "%i,%i%s", gain_offset[0 + 2*i], gain_offset[1 + 2*i], DELIMITER);
 8005e1a:	4e2f      	ldr	r6, [pc, #188]	; (8005ed8 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x51c>)
 8005e1c:	4f2f      	ldr	r7, [pc, #188]	; (8005edc <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x520>)
	STM32_PLC_SD_Open_Existing_File_With_Write("SDADC.TXT");
 8005e1e:	f7fc f8ff 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
		if(i <= 7)
 8005e22:	2c08      	cmp	r4, #8
 8005e24:	d037      	beq.n	8005e96 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4da>
			sprintf(text, "%i,%i%s", gain_offset[0 + 2*i], gain_offset[1 + 2*i], DELIMITER);
 8005e26:	9600      	str	r6, [sp, #0]
 8005e28:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8005e2c:	f8b9 2000 	ldrh.w	r2, [r9]
 8005e30:	4639      	mov	r1, r7
 8005e32:	a81f      	add	r0, sp, #124	; 0x7c
 8005e34:	f00c ff76 	bl	8012d24 <siprintf>
		STM32_PLC_SD_Write_File(text);
 8005e38:	a81f      	add	r0, sp, #124	; 0x7c
 8005e3a:	3401      	adds	r4, #1
 8005e3c:	f7fc f932 	bl	80020a4 <STM32_PLC_SD_Write_File>
	for(uint8_t i = 0; i < 9; i++) {
 8005e40:	2c09      	cmp	r4, #9
 8005e42:	f109 0904 	add.w	r9, r9, #4
 8005e46:	d1ec      	bne.n	8005e22 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x466>
	STM32_PLC_SD_Close_File();
 8005e48:	f7fc f8f2 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8005e4c:	f7fc f8b6 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
 8005e50:	e5e4      	b.n	8005a1c <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x60>
		STM32_PLC_Analog_Input_Set_Gain_Offset(1, SDADC_CONF_INDEX_1, gain, offset);
 8005e52:	462b      	mov	r3, r5
 8005e54:	4622      	mov	r2, r4
 8005e56:	2101      	movs	r1, #1
 8005e58:	e7c5      	b.n	8005de6 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x42a>
		STM32_PLC_Analog_Input_Set_Gain_Offset(1, SDADC_CONF_INDEX_2, gain, offset);
 8005e5a:	462b      	mov	r3, r5
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	2102      	movs	r1, #2
 8005e60:	e7c1      	b.n	8005de6 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x42a>
		STM32_PLC_Analog_Input_Set_Gain_Offset(2, SDADC_CONF_INDEX_0, gain, offset);
 8005e62:	462b      	mov	r3, r5
 8005e64:	4622      	mov	r2, r4
 8005e66:	2100      	movs	r1, #0
 8005e68:	2002      	movs	r0, #2
 8005e6a:	e7bd      	b.n	8005de8 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x42c>
		STM32_PLC_Analog_Input_Set_Gain_Offset(2, SDADC_CONF_INDEX_1, gain, offset);
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	4622      	mov	r2, r4
 8005e70:	2101      	movs	r1, #1
 8005e72:	e7f9      	b.n	8005e68 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4ac>
		STM32_PLC_Analog_Input_Set_Gain_Offset(2, SDADC_CONF_INDEX_2, gain, offset);
 8005e74:	462b      	mov	r3, r5
 8005e76:	4622      	mov	r2, r4
 8005e78:	2102      	movs	r1, #2
 8005e7a:	e7f5      	b.n	8005e68 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4ac>
		STM32_PLC_Analog_Input_Set_Gain_Offset(3, SDADC_CONF_INDEX_0, gain, offset);
 8005e7c:	462b      	mov	r3, r5
 8005e7e:	4622      	mov	r2, r4
 8005e80:	2100      	movs	r1, #0
		STM32_PLC_Analog_Input_Set_Gain_Offset(3, SDADC_CONF_INDEX_2, gain, offset);
 8005e82:	2003      	movs	r0, #3
 8005e84:	e7b0      	b.n	8005de8 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x42c>
		STM32_PLC_Analog_Input_Set_Gain_Offset(3, SDADC_CONF_INDEX_1, gain, offset);
 8005e86:	462b      	mov	r3, r5
 8005e88:	4622      	mov	r2, r4
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	e7f9      	b.n	8005e82 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4c6>
		STM32_PLC_Analog_Input_Set_Gain_Offset(3, SDADC_CONF_INDEX_2, gain, offset);
 8005e8e:	462b      	mov	r3, r5
 8005e90:	4622      	mov	r2, r4
 8005e92:	2102      	movs	r1, #2
 8005e94:	e7f5      	b.n	8005e82 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x4c6>
			sprintf(text, "%i,%i", gain_offset[0 + 2*i], gain_offset[1 + 2*i]);
 8005e96:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8005e9a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	a81f      	add	r0, sp, #124	; 0x7c
 8005ea2:	f00c ff3f 	bl	8012d24 <siprintf>
 8005ea6:	e7c7      	b.n	8005e38 <STM32_PLC_LCD_Show_SDADC_Settings_Frame+0x47c>
 8005ea8:	08017d7a 	.word	0x08017d7a
 8005eac:	457ff000 	.word	0x457ff000
 8005eb0:	08017da0 	.word	0x08017da0
 8005eb4:	08017dc6 	.word	0x08017dc6
 8005eb8:	08017dec 	.word	0x08017dec
 8005ebc:	08017e08 	.word	0x08017e08
 8005ec0:	08017e25 	.word	0x08017e25
 8005ec4:	08017e42 	.word	0x08017e42
 8005ec8:	08017e65 	.word	0x08017e65
 8005ecc:	08017e88 	.word	0x08017e88
 8005ed0:	08016df8 	.word	0x08016df8
 8005ed4:	08017ead 	.word	0x08017ead
 8005ed8:	08016cb1 	.word	0x08016cb1
 8005edc:	08017ea5 	.word	0x08017ea5

08005ee0 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame>:

#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"
#include "../../../Functions.h"

void STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 8005ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	b092      	sub	sp, #72	; 0x48
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005ee6:	240f      	movs	r4, #15
void STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 8005ee8:	4605      	mov	r5, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005eea:	23ea      	movs	r3, #234	; 0xea
 8005eec:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8005ef0:	2033      	movs	r0, #51	; 0x33
void STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 8005ef2:	4688      	mov	r8, r1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005ef4:	9400      	str	r4, [sp, #0]
 8005ef6:	2106      	movs	r1, #6
 8005ef8:	f002 f8ba 	bl	8008070 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);

	ILI9341_print_text("ECU address and connections", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005efc:	2701      	movs	r7, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8005efe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005f02:	f240 1209 	movw	r2, #265	; 0x109
 8005f06:	211e      	movs	r1, #30
 8005f08:	2032      	movs	r0, #50	; 0x32
 8005f0a:	f002 f8ed 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("ECU address and connections", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005f0e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005f12:	4863      	ldr	r0, [pc, #396]	; (80060a0 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1c0>)

	/* Which ECU are connected */
	sprintf(text, "Other ECU addresses:");
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
	for(uint8_t i = 0; i < j1939->number_of_ECU; i++){
		sprintf(text, "%i,", j1939->ECU_address[i]);
 8005f14:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80060d0 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1f0>
	ILI9341_print_text("ECU address and connections", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005f18:	220a      	movs	r2, #10
 8005f1a:	2137      	movs	r1, #55	; 0x37
 8005f1c:	e9cd 4700 	strd	r4, r7, [sp]
 8005f20:	f002 f9c2 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "This ECU address:%i", j1939->this_ECU_address);
 8005f24:	f895 2ae0 	ldrb.w	r2, [r5, #2784]	; 0xae0
 8005f28:	495e      	ldr	r1, [pc, #376]	; (80060a4 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1c4>)
 8005f2a:	a805      	add	r0, sp, #20
 8005f2c:	f00c fefa 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8005f30:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005f34:	2223      	movs	r2, #35	; 0x23
 8005f36:	2137      	movs	r1, #55	; 0x37
 8005f38:	a805      	add	r0, sp, #20
 8005f3a:	e9cd 4700 	strd	r4, r7, [sp]
 8005f3e:	f002 f9b3 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Other ECU connected:%i", j1939->number_of_ECU);
 8005f42:	782a      	ldrb	r2, [r5, #0]
 8005f44:	4958      	ldr	r1, [pc, #352]	; (80060a8 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1c8>)
 8005f46:	a805      	add	r0, sp, #20
 8005f48:	f00c feec 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8005f4c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005f50:	222d      	movs	r2, #45	; 0x2d
 8005f52:	2137      	movs	r1, #55	; 0x37
 8005f54:	a805      	add	r0, sp, #20
 8005f56:	e9cd 4700 	strd	r4, r7, [sp]
 8005f5a:	f002 f9a5 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Other ECU addresses:");
 8005f5e:	4953      	ldr	r1, [pc, #332]	; (80060ac <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1cc>)
 8005f60:	a805      	add	r0, sp, #20
 8005f62:	f00c feff 	bl	8012d64 <strcpy>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8005f66:	2237      	movs	r2, #55	; 0x37
 8005f68:	e9cd 4700 	strd	r4, r7, [sp]
 8005f6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005f70:	4611      	mov	r1, r2
 8005f72:	a805      	add	r0, sp, #20
 8005f74:	f002 f998 	bl	80082a8 <ILI9341_print_text>
	for(uint8_t i = 0; i < j1939->number_of_ECU; i++){
 8005f78:	f04f 0900 	mov.w	r9, #0
 8005f7c:	782b      	ldrb	r3, [r5, #0]
 8005f7e:	fa5f f689 	uxtb.w	r6, r9
 8005f82:	42b3      	cmp	r3, r6
 8005f84:	d83d      	bhi.n	8006002 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x122>
		ILI9341_print_text(text, 55 + i*10, 65, COLOR_YELLOW, COLOR_NAVY, 1);
	}

	/* How many ECU are not connected */
	sprintf(text, "Other ECU not connected:%i", j1939->number_of_cannot_claim_address);
 8005f86:	786a      	ldrb	r2, [r5, #1]
 8005f88:	4949      	ldr	r1, [pc, #292]	; (80060b0 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1d0>)
 8005f8a:	a805      	add	r0, sp, #20
 8005f8c:	f00c feca 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8005f90:	230f      	movs	r3, #15
 8005f92:	2201      	movs	r2, #1
 8005f94:	e9cd 3200 	strd	r3, r2, [sp]
 8005f98:	2137      	movs	r1, #55	; 0x37
 8005f9a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005f9e:	224b      	movs	r2, #75	; 0x4b
 8005fa0:	a805      	add	r0, sp, #20

	/* Button */
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8005fa2:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8005fa6:	f002 f97f 	bl	80082a8 <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8005faa:	2400      	movs	r4, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8005fac:	23dc      	movs	r3, #220	; 0xdc
 8005fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fb2:	21c3      	movs	r1, #195	; 0xc3
 8005fb4:	2041      	movs	r0, #65	; 0x41
 8005fb6:	9600      	str	r6, [sp, #0]
 8005fb8:	f002 f85a 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8005fbc:	23dc      	movs	r3, #220	; 0xdc
 8005fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fc2:	21c3      	movs	r1, #195	; 0xc3
 8005fc4:	2041      	movs	r0, #65	; 0x41
 8005fc6:	9400      	str	r4, [sp, #0]
 8005fc8:	f002 f8d4 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Set the ECU address", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e9cd 6300 	strd	r6, r3, [sp]
 8005fd2:	4838      	ldr	r0, [pc, #224]	; (80060b4 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1d4>)
 8005fd4:	4623      	mov	r3, r4
 8005fd6:	22c8      	movs	r2, #200	; 0xc8
 8005fd8:	2146      	movs	r1, #70	; 0x46
 8005fda:	f002 f965 	bl	80082a8 <ILI9341_print_text>

	/* Logic for button */
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 8005fde:	23dc      	movs	r3, #220	; 0xdc
 8005fe0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fe4:	21c3      	movs	r1, #195	; 0xc3
 8005fe6:	2041      	movs	r0, #65	; 0x41
 8005fe8:	f003 f800 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set the ECU address?") == 0) {
 8005fec:	4832      	ldr	r0, [pc, #200]	; (80060b8 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1d8>)
 8005fee:	f7fd fc03 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8005ff2:	b9e0      	cbnz	r0, 800602e <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x14e>
	j1939->this_ECU_address = address;

	/* Save it to SD card */
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
		STM32_PLC_LCD_Show_Information_OK_Dialog("Could not mount SD card");
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005ff4:	2100      	movs	r1, #0
	STM32_PLC_SD_Write_File(text);
	STM32_PLC_SD_Close_File();
	STM32_PLC_SD_Unmount_Card();

	/* Done */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f7ff f94a 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 8005ffc:	b012      	add	sp, #72	; 0x48
 8005ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sprintf(text, "%i,", j1939->ECU_address[i]);
 8006002:	19ab      	adds	r3, r5, r6
		ILI9341_print_text(text, 55 + i*10, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8006004:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		sprintf(text, "%i,", j1939->ECU_address[i]);
 8006008:	789a      	ldrb	r2, [r3, #2]
 800600a:	4651      	mov	r1, sl
 800600c:	a805      	add	r0, sp, #20
		ILI9341_print_text(text, 55 + i*10, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 800600e:	0076      	lsls	r6, r6, #1
		sprintf(text, "%i,", j1939->ECU_address[i]);
 8006010:	f00c fe88 	bl	8012d24 <siprintf>
		ILI9341_print_text(text, 55 + i*10, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8006014:	e9cd 4700 	strd	r4, r7, [sp]
 8006018:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800601c:	2241      	movs	r2, #65	; 0x41
 800601e:	f106 0137 	add.w	r1, r6, #55	; 0x37
 8006022:	a805      	add	r0, sp, #20
 8006024:	f002 f940 	bl	80082a8 <ILI9341_print_text>
	for(uint8_t i = 0; i < j1939->number_of_ECU; i++){
 8006028:	f109 0901 	add.w	r9, r9, #1
 800602c:	e7a6      	b.n	8005f7c <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x9c>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter address between 0 and 253") == 0) {
 800602e:	4b23      	ldr	r3, [pc, #140]	; (80060bc <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1dc>)
 8006030:	aa04      	add	r2, sp, #16
 8006032:	4621      	mov	r1, r4
 8006034:	4620      	mov	r0, r4
 8006036:	f001 fbb5 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 800603a:	2800      	cmp	r0, #0
 800603c:	d0da      	beq.n	8005ff4 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x114>
	if(number_value < 0)
 800603e:	eddd 7a04 	vldr	s15, [sp, #16]
 8006042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604a:	d40d      	bmi.n	8006068 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x188>
	else if(number_value > 253)
 800604c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80060c0 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1e0>
 8006050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		address = (uint8_t) number_value;
 8006058:	bfd7      	itett	le
 800605a:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		address = 253;
 800605e:	24fd      	movgt	r4, #253	; 0xfd
		address = (uint8_t) number_value;
 8006060:	edcd 7a03 	vstrle	s15, [sp, #12]
 8006064:	f89d 400c 	ldrble.w	r4, [sp, #12]
	j1939->this_ECU_address = address;
 8006068:	f885 4ae0 	strb.w	r4, [r5, #2784]	; 0xae0
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 800606c:	f7fb ffb6 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8006070:	4605      	mov	r5, r0
 8006072:	b118      	cbz	r0, 800607c <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x19c>
		STM32_PLC_LCD_Show_Information_OK_Dialog("Could not mount SD card");
 8006074:	4813      	ldr	r0, [pc, #76]	; (80060c4 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1e4>)
 8006076:	f7fd fb4d 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
 800607a:	e7bb      	b.n	8005ff4 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x114>
	STM32_PLC_SD_Open_Existing_File_With_Write("ADDRESS.TXT");
 800607c:	4812      	ldr	r0, [pc, #72]	; (80060c8 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1e8>)
 800607e:	f7fb ffcf 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
	sprintf(text, "%i", address);
 8006082:	4912      	ldr	r1, [pc, #72]	; (80060cc <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1ec>)
 8006084:	4622      	mov	r2, r4
 8006086:	a805      	add	r0, sp, #20
 8006088:	f00c fe4c 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Write_File(text);
 800608c:	a805      	add	r0, sp, #20
 800608e:	f7fc f809 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Close_File();
 8006092:	f7fb ffcd 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8006096:	f7fb ff91 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800609a:	4629      	mov	r1, r5
 800609c:	e7ab      	b.n	8005ff6 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x116>
 800609e:	bf00      	nop
 80060a0:	08017eb3 	.word	0x08017eb3
 80060a4:	08017ecf 	.word	0x08017ecf
 80060a8:	08017ee3 	.word	0x08017ee3
 80060ac:	08017efa 	.word	0x08017efa
 80060b0:	08017f0f 	.word	0x08017f0f
 80060b4:	08017f2a 	.word	0x08017f2a
 80060b8:	08017f3e 	.word	0x08017f3e
 80060bc:	08017f62 	.word	0x08017f62
 80060c0:	437d0000 	.word	0x437d0000
 80060c4:	08016e92 	.word	0x08016e92
 80060c8:	08016e2b 	.word	0x08016e2b
 80060cc:	08017bda 	.word	0x08017bda
 80060d0:	08017779 	.word	0x08017779

080060d4 <show_numpad_question>:

	/* Done */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 80060d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060d6:	460f      	mov	r7, r1
	bool minusbutton_show = false;
	bool decimalbutton_show = false;
	float number_value;
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 80060d8:	2100      	movs	r1, #0
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 80060da:	4616      	mov	r6, r2
 80060dc:	461d      	mov	r5, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 80060de:	aa01      	add	r2, sp, #4
 80060e0:	4603      	mov	r3, r0
 80060e2:	4608      	mov	r0, r1
 80060e4:	f001 fb5e 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 80060e8:	4604      	mov	r4, r0
 80060ea:	b930      	cbnz	r0, 80060fa <show_numpad_question+0x26>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80060ec:	4601      	mov	r1, r0
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7ff f8ce 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
	else if(number_value > max_value)
		*value = max_value;
	else
		*value = (uint32_t) number_value;
	return 1;
}
 80060f4:	4620      	mov	r0, r4
 80060f6:	b003      	add	sp, #12
 80060f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(number_value < 0)
 80060fa:	eddd 7a01 	vldr	s15, [sp, #4]
 80060fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006106:	d503      	bpl.n	8006110 <show_numpad_question+0x3c>
		*value = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	602b      	str	r3, [r5, #0]
	return 1;
 800610c:	2401      	movs	r4, #1
 800610e:	e7f1      	b.n	80060f4 <show_numpad_question+0x20>
	else if(number_value > max_value)
 8006110:	ee07 6a10 	vmov	s14, r6
 8006114:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800611c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*value = (uint32_t) number_value;
 8006120:	bfd6      	itet	le
 8006122:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		*value = max_value;
 8006126:	602e      	strgt	r6, [r5, #0]
		*value = (uint32_t) number_value;
 8006128:	edc5 7a00 	vstrle	s15, [r5]
 800612c:	e7ee      	b.n	800610c <show_numpad_question+0x38>
	...

08006130 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 8006130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006132:	b0a1      	sub	sp, #132	; 0x84
 8006134:	4607      	mov	r7, r0
	if(show_numpad_question("Enter identity between 0 and 2097151", frame_id, 2097151, &identity_number) == 0)
 8006136:	4ac5      	ldr	r2, [pc, #788]	; (800644c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x31c>)
 8006138:	48c5      	ldr	r0, [pc, #788]	; (8006450 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x320>)
 800613a:	ab08      	add	r3, sp, #32
void STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 800613c:	460c      	mov	r4, r1
	if(show_numpad_question("Enter identity between 0 and 2097151", frame_id, 2097151, &identity_number) == 0)
 800613e:	f7ff ffc9 	bl	80060d4 <show_numpad_question>
 8006142:	2800      	cmp	r0, #0
 8006144:	f000 8157 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Enter manufacturer code between 0 and 2047", frame_id, 2047, &manufacturer_code) == 0)
 8006148:	48c2      	ldr	r0, [pc, #776]	; (8006454 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x324>)
 800614a:	ab09      	add	r3, sp, #36	; 0x24
 800614c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006150:	4621      	mov	r1, r4
 8006152:	f7ff ffbf 	bl	80060d4 <show_numpad_question>
 8006156:	2800      	cmp	r0, #0
 8006158:	f000 814d 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Enter function instance between 0 and 31", frame_id, 31, &function_instance) == 0)
 800615c:	48be      	ldr	r0, [pc, #760]	; (8006458 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x328>)
 800615e:	ab0a      	add	r3, sp, #40	; 0x28
 8006160:	221f      	movs	r2, #31
 8006162:	4621      	mov	r1, r4
 8006164:	f7ff ffb6 	bl	80060d4 <show_numpad_question>
 8006168:	2800      	cmp	r0, #0
 800616a:	f000 8144 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Enter ECU instance between 0 and 7", frame_id, 7, &ECU_instance) == 0)
 800616e:	48bb      	ldr	r0, [pc, #748]	; (800645c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x32c>)
 8006170:	ab0b      	add	r3, sp, #44	; 0x2c
 8006172:	2207      	movs	r2, #7
 8006174:	4621      	mov	r1, r4
 8006176:	f7ff ffad 	bl	80060d4 <show_numpad_question>
 800617a:	2800      	cmp	r0, #0
 800617c:	f000 813b 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Enter function between 0 and 255", frame_id, 255, &function) == 0)
 8006180:	48b7      	ldr	r0, [pc, #732]	; (8006460 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x330>)
 8006182:	ab0c      	add	r3, sp, #48	; 0x30
 8006184:	22ff      	movs	r2, #255	; 0xff
 8006186:	4621      	mov	r1, r4
 8006188:	f7ff ffa4 	bl	80060d4 <show_numpad_question>
 800618c:	2800      	cmp	r0, #0
 800618e:	f000 8132 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Enter vehicle system between 0 and 127", frame_id, 127, &vehicle_system) == 0)
 8006192:	48b4      	ldr	r0, [pc, #720]	; (8006464 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x334>)
 8006194:	ab0d      	add	r3, sp, #52	; 0x34
 8006196:	227f      	movs	r2, #127	; 0x7f
 8006198:	4621      	mov	r1, r4
 800619a:	f7ff ff9b 	bl	80060d4 <show_numpad_question>
 800619e:	2800      	cmp	r0, #0
 80061a0:	f000 8129 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Enter arbitrary address capable between 0 and 1", frame_id, 1, &arbitrary_address_capable) == 0)
 80061a4:	48b0      	ldr	r0, [pc, #704]	; (8006468 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x338>)
 80061a6:	ab0e      	add	r3, sp, #56	; 0x38
 80061a8:	2201      	movs	r2, #1
 80061aa:	4621      	mov	r1, r4
 80061ac:	f7ff ff92 	bl	80060d4 <show_numpad_question>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f000 8120 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Enter industry group between 0 and 7", frame_id, 7, &industry_group) == 0)
 80061b6:	48ad      	ldr	r0, [pc, #692]	; (800646c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x33c>)
 80061b8:	ab0f      	add	r3, sp, #60	; 0x3c
 80061ba:	2207      	movs	r2, #7
 80061bc:	4621      	mov	r1, r4
 80061be:	f7ff ff89 	bl	80060d4 <show_numpad_question>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f000 8117 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Enter vehicle system instance between 0 and 15", frame_id, 15, &vehicle_system_instance) == 0)
 80061c8:	48a9      	ldr	r0, [pc, #676]	; (8006470 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x340>)
 80061ca:	ab10      	add	r3, sp, #64	; 0x40
 80061cc:	220f      	movs	r2, #15
 80061ce:	4621      	mov	r1, r4
 80061d0:	f7ff ff80 	bl	80060d4 <show_numpad_question>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f000 810e 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Enter new ECU address between 0 and 253", frame_id, 253, &new_ECU_address) == 0)
 80061da:	48a6      	ldr	r0, [pc, #664]	; (8006474 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x344>)
 80061dc:	ab11      	add	r3, sp, #68	; 0x44
 80061de:	22fd      	movs	r2, #253	; 0xfd
 80061e0:	4621      	mov	r1, r4
 80061e2:	f7ff ff77 	bl	80060d4 <show_numpad_question>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f000 8105 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	if(show_numpad_question("Destination of the ECU between 0 and 253", frame_id, 253, &DA) == 0)
 80061ec:	48a2      	ldr	r0, [pc, #648]	; (8006478 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x348>)
 80061ee:	ab12      	add	r3, sp, #72	; 0x48
 80061f0:	22fd      	movs	r2, #253	; 0xfd
 80061f2:	4621      	mov	r1, r4
 80061f4:	f7ff ff6e 	bl	80060d4 <show_numpad_question>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	f000 80fc 	beq.w	80063f6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c6>
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80061fe:	250f      	movs	r5, #15
 8006200:	23ea      	movs	r3, #234	; 0xea
 8006202:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8006206:	2106      	movs	r1, #6
 8006208:	2033      	movs	r0, #51	; 0x33
 800620a:	9500      	str	r5, [sp, #0]
 800620c:	f001 ff30 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_print_text("Set NAME and source address", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006210:	2601      	movs	r6, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8006212:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006216:	f240 1209 	movw	r2, #265	; 0x109
 800621a:	211e      	movs	r1, #30
 800621c:	2032      	movs	r0, #50	; 0x32
 800621e:	f001 ff63 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set NAME and source address", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006222:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006226:	4895      	ldr	r0, [pc, #596]	; (800647c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x34c>)
 8006228:	220a      	movs	r2, #10
 800622a:	2137      	movs	r1, #55	; 0x37
 800622c:	e9cd 5600 	strd	r5, r6, [sp]
 8006230:	f002 f83a 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Identity:%lu", identity_number);
 8006234:	9a08      	ldr	r2, [sp, #32]
 8006236:	4992      	ldr	r1, [pc, #584]	; (8006480 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x350>)
 8006238:	a813      	add	r0, sp, #76	; 0x4c
 800623a:	f00c fd73 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800623e:	2223      	movs	r2, #35	; 0x23
 8006240:	e9cd 5600 	strd	r5, r6, [sp]
 8006244:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006248:	2137      	movs	r1, #55	; 0x37
 800624a:	a813      	add	r0, sp, #76	; 0x4c
 800624c:	f002 f82c 	bl	80082a8 <ILI9341_print_text>
	if(manufacturer_code == MANUFACTURER_CODE_GRAYHILL)
 8006250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006252:	f5b2 7f93 	cmp.w	r2, #294	; 0x126
 8006256:	f040 80d0 	bne.w	80063fa <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ca>
		sprintf(text, "Manufacturer code: Gray Hill");
 800625a:	498a      	ldr	r1, [pc, #552]	; (8006484 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x354>)
		sprintf(text, "Manufacturer code: SonceBoz");
 800625c:	a813      	add	r0, sp, #76	; 0x4c
 800625e:	f00c fd81 	bl	8012d64 <strcpy>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8006262:	250f      	movs	r5, #15
 8006264:	2601      	movs	r6, #1
 8006266:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800626a:	222d      	movs	r2, #45	; 0x2d
 800626c:	2137      	movs	r1, #55	; 0x37
 800626e:	a813      	add	r0, sp, #76	; 0x4c
 8006270:	e9cd 5600 	strd	r5, r6, [sp]
 8006274:	f002 f818 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Function instance:%i", (uint8_t)function_instance);
 8006278:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800627c:	4982      	ldr	r1, [pc, #520]	; (8006488 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x358>)
 800627e:	a813      	add	r0, sp, #76	; 0x4c
 8006280:	f00c fd50 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8006284:	2237      	movs	r2, #55	; 0x37
 8006286:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800628a:	4611      	mov	r1, r2
 800628c:	a813      	add	r0, sp, #76	; 0x4c
 800628e:	e9cd 5600 	strd	r5, r6, [sp]
 8006292:	f002 f809 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "ECU instance:%i", (uint8_t)ECU_instance);
 8006296:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800629a:	497c      	ldr	r1, [pc, #496]	; (800648c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x35c>)
 800629c:	a813      	add	r0, sp, #76	; 0x4c
 800629e:	f00c fd41 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80062a2:	2241      	movs	r2, #65	; 0x41
 80062a4:	e9cd 5600 	strd	r5, r6, [sp]
 80062a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80062ac:	2137      	movs	r1, #55	; 0x37
 80062ae:	a813      	add	r0, sp, #76	; 0x4c
 80062b0:	f001 fffa 	bl	80082a8 <ILI9341_print_text>
	if(function == FUNCTION_AUXILIARY_VALVES_CONTROL)
 80062b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062b6:	2a81      	cmp	r2, #129	; 0x81
 80062b8:	f040 80ab 	bne.w	8006412 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2e2>
		sprintf(text, "Function:Auxiliary Valves Control");
 80062bc:	4974      	ldr	r1, [pc, #464]	; (8006490 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x360>)
		sprintf(text, "Function:VDC Module");
 80062be:	a813      	add	r0, sp, #76	; 0x4c
 80062c0:	f00c fd50 	bl	8012d64 <strcpy>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 80062c4:	250f      	movs	r5, #15
 80062c6:	2601      	movs	r6, #1
 80062c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80062cc:	224b      	movs	r2, #75	; 0x4b
 80062ce:	2137      	movs	r1, #55	; 0x37
 80062d0:	a813      	add	r0, sp, #76	; 0x4c
 80062d2:	e9cd 5600 	strd	r5, r6, [sp]
 80062d6:	f001 ffe7 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Vehicle system:%i", (uint8_t)vehicle_system);
 80062da:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80062de:	496d      	ldr	r1, [pc, #436]	; (8006494 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x364>)
 80062e0:	a813      	add	r0, sp, #76	; 0x4c
 80062e2:	f00c fd1f 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80062e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80062ea:	e9cd 5600 	strd	r5, r6, [sp]
 80062ee:	2255      	movs	r2, #85	; 0x55
 80062f0:	2137      	movs	r1, #55	; 0x37
 80062f2:	a813      	add	r0, sp, #76	; 0x4c
 80062f4:	f001 ffd8 	bl	80082a8 <ILI9341_print_text>
	if(arbitrary_address_capable > 0)
 80062f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8093 	beq.w	8006426 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2f6>
		sprintf(text, "Arbitrary address capable:Yes");
 8006300:	4965      	ldr	r1, [pc, #404]	; (8006498 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x368>)
		sprintf(text, "Arbitrary address capable:No");
 8006302:	a813      	add	r0, sp, #76	; 0x4c
 8006304:	f00c fd2e 	bl	8012d64 <strcpy>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8006308:	230f      	movs	r3, #15
 800630a:	2201      	movs	r2, #1
 800630c:	e9cd 3200 	strd	r3, r2, [sp]
 8006310:	2137      	movs	r1, #55	; 0x37
 8006312:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006316:	225f      	movs	r2, #95	; 0x5f
 8006318:	a813      	add	r0, sp, #76	; 0x4c
 800631a:	f001 ffc5 	bl	80082a8 <ILI9341_print_text>
	if(industry_group == INDUSTRY_GROUP_GLOBAL)
 800631e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 8082 	bne.w	800642a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2fa>
		sprintf(text, "Industry group:Global");
 8006326:	495d      	ldr	r1, [pc, #372]	; (800649c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x36c>)
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8006328:	250f      	movs	r5, #15
 800632a:	2601      	movs	r6, #1
		sprintf(text, "Industry group:None");
 800632c:	a813      	add	r0, sp, #76	; 0x4c
 800632e:	f00c fd19 	bl	8012d64 <strcpy>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8006332:	e9cd 5600 	strd	r5, r6, [sp]
 8006336:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800633a:	2269      	movs	r2, #105	; 0x69
 800633c:	2137      	movs	r1, #55	; 0x37
 800633e:	a813      	add	r0, sp, #76	; 0x4c
 8006340:	f001 ffb2 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Vehicle system instance:%i", (uint8_t)vehicle_system_instance);
 8006344:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8006348:	4955      	ldr	r1, [pc, #340]	; (80064a0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x370>)
 800634a:	a813      	add	r0, sp, #76	; 0x4c
 800634c:	f00c fcea 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8006350:	e9cd 5600 	strd	r5, r6, [sp]
 8006354:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006358:	2273      	movs	r2, #115	; 0x73
 800635a:	2137      	movs	r1, #55	; 0x37
 800635c:	a813      	add	r0, sp, #76	; 0x4c
 800635e:	f001 ffa3 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "New ECU address:%i", (uint8_t)new_ECU_address);
 8006362:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8006366:	494f      	ldr	r1, [pc, #316]	; (80064a4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x374>)
 8006368:	a813      	add	r0, sp, #76	; 0x4c
 800636a:	f00c fcdb 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 800636e:	e9cd 5600 	strd	r5, r6, [sp]
 8006372:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006376:	227d      	movs	r2, #125	; 0x7d
 8006378:	2137      	movs	r1, #55	; 0x37
 800637a:	a813      	add	r0, sp, #76	; 0x4c
 800637c:	f001 ff94 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "Current ECU address:%i", (uint8_t)DA);
 8006380:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8006384:	4948      	ldr	r1, [pc, #288]	; (80064a8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x378>)
 8006386:	a813      	add	r0, sp, #76	; 0x4c
 8006388:	f00c fccc 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 800638c:	e9cd 5600 	strd	r5, r6, [sp]
 8006390:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006394:	2287      	movs	r2, #135	; 0x87
 8006396:	2137      	movs	r1, #55	; 0x37
 8006398:	a813      	add	r0, sp, #76	; 0x4c
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 800639a:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 800639e:	f001 ff83 	bl	80082a8 <ILI9341_print_text>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 80063a2:	2500      	movs	r5, #0
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 80063a4:	23dc      	movs	r3, #220	; 0xdc
 80063a6:	f240 1225 	movw	r2, #293	; 0x125
 80063aa:	21c3      	movs	r1, #195	; 0xc3
 80063ac:	2046      	movs	r0, #70	; 0x46
 80063ae:	9600      	str	r6, [sp, #0]
 80063b0:	f001 fe5e 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 80063b4:	23dc      	movs	r3, #220	; 0xdc
 80063b6:	f240 1225 	movw	r2, #293	; 0x125
 80063ba:	21c3      	movs	r1, #195	; 0xc3
 80063bc:	2046      	movs	r0, #70	; 0x46
 80063be:	9500      	str	r5, [sp, #0]
 80063c0:	f001 fed8 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Set name & address", 75, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80063c4:	2302      	movs	r3, #2
 80063c6:	e9cd 6300 	strd	r6, r3, [sp]
 80063ca:	4838      	ldr	r0, [pc, #224]	; (80064ac <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x37c>)
 80063cc:	462b      	mov	r3, r5
 80063ce:	22c8      	movs	r2, #200	; 0xc8
 80063d0:	214b      	movs	r1, #75	; 0x4b
 80063d2:	f001 ff69 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(70, 195, 293, 220);
 80063d6:	21c3      	movs	r1, #195	; 0xc3
 80063d8:	23dc      	movs	r3, #220	; 0xdc
 80063da:	f240 1225 	movw	r2, #293	; 0x125
 80063de:	2046      	movs	r0, #70	; 0x46
 80063e0:	f002 fe04 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set NAME and address?") == 0) {
 80063e4:	4832      	ldr	r0, [pc, #200]	; (80064b0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x380>)
 80063e6:	f7fd fa07 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80063ea:	4601      	mov	r1, r0
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d178      	bne.n	80064e2 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3b2>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7fe ff4d 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 80063f6:	b021      	add	sp, #132	; 0x84
 80063f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (manufacturer_code == MANUFACTURER_CODE_SONCEBOZ)
 80063fa:	f240 1347 	movw	r3, #327	; 0x147
 80063fe:	429a      	cmp	r2, r3
 8006400:	d101      	bne.n	8006406 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2d6>
		sprintf(text, "Manufacturer code: SonceBoz");
 8006402:	492c      	ldr	r1, [pc, #176]	; (80064b4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x384>)
 8006404:	e72a      	b.n	800625c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x12c>
		sprintf(text, "Manufacturer code:%i", (uint16_t)manufacturer_code);
 8006406:	492c      	ldr	r1, [pc, #176]	; (80064b8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x388>)
 8006408:	b292      	uxth	r2, r2
 800640a:	a813      	add	r0, sp, #76	; 0x4c
 800640c:	f00c fc8a 	bl	8012d24 <siprintf>
 8006410:	e727      	b.n	8006262 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x132>
	else if (function == FUNCTION_VDC_MODULE)
 8006412:	2a87      	cmp	r2, #135	; 0x87
 8006414:	d101      	bne.n	800641a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ea>
		sprintf(text, "Function:VDC Module");
 8006416:	4929      	ldr	r1, [pc, #164]	; (80064bc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x38c>)
 8006418:	e751      	b.n	80062be <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x18e>
		sprintf(text, "Function:%i", (uint8_t)function);
 800641a:	4929      	ldr	r1, [pc, #164]	; (80064c0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x390>)
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	a813      	add	r0, sp, #76	; 0x4c
 8006420:	f00c fc80 	bl	8012d24 <siprintf>
 8006424:	e74e      	b.n	80062c4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x194>
		sprintf(text, "Arbitrary address capable:No");
 8006426:	4927      	ldr	r1, [pc, #156]	; (80064c4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x394>)
 8006428:	e76b      	b.n	8006302 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x1d2>
	else if(industry_group == INDUSTRY_GROUP_CONSTRUCTION)
 800642a:	2b03      	cmp	r3, #3
 800642c:	d101      	bne.n	8006432 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x302>
		sprintf(text, "Industry group:Construction");
 800642e:	4926      	ldr	r1, [pc, #152]	; (80064c8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x398>)
 8006430:	e77a      	b.n	8006328 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x1f8>
	else if(industry_group == INDUSTRY_GROUP_AGRICULTURAL_AND_FORESTRY)
 8006432:	2b02      	cmp	r3, #2
 8006434:	d101      	bne.n	800643a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x30a>
		sprintf(text, "Industry group:Agricultural and forestry");
 8006436:	4925      	ldr	r1, [pc, #148]	; (80064cc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x39c>)
 8006438:	e776      	b.n	8006328 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x1f8>
	else if(industry_group == INDUSTRY_GROUP_INDUSTRIAL_CONTROL_PROCESS)
 800643a:	2b05      	cmp	r3, #5
 800643c:	d101      	bne.n	8006442 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x312>
		sprintf(text, "Industry group:Industrial control process");
 800643e:	4924      	ldr	r1, [pc, #144]	; (80064d0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3a0>)
 8006440:	e772      	b.n	8006328 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x1f8>
	else if(industry_group == INDUSTRY_GROUP_MARINE)
 8006442:	2b04      	cmp	r3, #4
 8006444:	d148      	bne.n	80064d8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3a8>
		sprintf(text, "Industry group:Marine");
 8006446:	4923      	ldr	r1, [pc, #140]	; (80064d4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3a4>)
 8006448:	e76e      	b.n	8006328 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x1f8>
 800644a:	bf00      	nop
 800644c:	001fffff 	.word	0x001fffff
 8006450:	08017f82 	.word	0x08017f82
 8006454:	08017fa7 	.word	0x08017fa7
 8006458:	08017fd2 	.word	0x08017fd2
 800645c:	08017ffb 	.word	0x08017ffb
 8006460:	0801801e 	.word	0x0801801e
 8006464:	0801803f 	.word	0x0801803f
 8006468:	08018066 	.word	0x08018066
 800646c:	08018096 	.word	0x08018096
 8006470:	080180bb 	.word	0x080180bb
 8006474:	080180ea 	.word	0x080180ea
 8006478:	08018112 	.word	0x08018112
 800647c:	0801813b 	.word	0x0801813b
 8006480:	08018157 	.word	0x08018157
 8006484:	08018164 	.word	0x08018164
 8006488:	080181b2 	.word	0x080181b2
 800648c:	080181c7 	.word	0x080181c7
 8006490:	080181d7 	.word	0x080181d7
 8006494:	08018219 	.word	0x08018219
 8006498:	0801822b 	.word	0x0801822b
 800649c:	08018266 	.word	0x08018266
 80064a0:	0801832f 	.word	0x0801832f
 80064a4:	0801834a 	.word	0x0801834a
 80064a8:	0801835d 	.word	0x0801835d
 80064ac:	08018374 	.word	0x08018374
 80064b0:	08018387 	.word	0x08018387
 80064b4:	08018181 	.word	0x08018181
 80064b8:	0801819d 	.word	0x0801819d
 80064bc:	080181f9 	.word	0x080181f9
 80064c0:	0801820d 	.word	0x0801820d
 80064c4:	08018249 	.word	0x08018249
 80064c8:	0801827c 	.word	0x0801827c
 80064cc:	08018298 	.word	0x08018298
 80064d0:	080182c1 	.word	0x080182c1
 80064d4:	080182eb 	.word	0x080182eb
	else if(industry_group == INDUSTRY_GROUP_ON_HIGHWAY)
 80064d8:	2b01      	cmp	r3, #1
		sprintf(text, "Industry group:On highway");
 80064da:	bf0c      	ite	eq
 80064dc:	4912      	ldreq	r1, [pc, #72]	; (8006528 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3f8>)
		sprintf(text, "Industry group:None");
 80064de:	4913      	ldrne	r1, [pc, #76]	; (800652c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3fc>)
 80064e0:	e722      	b.n	8006328 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x1f8>
	SAE_J1939_Send_Commanded_Address(j1939, DA, new_ECU_address, identity_number, manufacturer_code, function_instance, ECU_instance, function, vehicle_system, arbitrary_address_capable, industry_group, vehicle_system_instance);
 80064e2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80064e6:	9307      	str	r3, [sp, #28]
 80064e8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80064ec:	9306      	str	r3, [sp, #24]
 80064ee:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80064f2:	9305      	str	r3, [sp, #20]
 80064f4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80064fe:	9303      	str	r3, [sp, #12]
 8006500:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8006504:	9302      	str	r3, [sp, #8]
 8006506:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8006510:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800651a:	9b08      	ldr	r3, [sp, #32]
 800651c:	4638      	mov	r0, r7
 800651e:	f7fd f877 	bl	8003610 <SAE_J1939_Send_Commanded_Address>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8006522:	4629      	mov	r1, r5
 8006524:	e764      	b.n	80063f0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c0>
 8006526:	bf00      	nop
 8006528:	08018301 	.word	0x08018301
 800652c:	0801831b 	.word	0x0801831b

08006530 <show_DM_frame>:
	show_DM_frame("Other ECU DM2 codes", &j1939->from_other_ecu_dm.dm2, true);
	call_exit(frame_id);
}

/* This can be DM1 or DM2 frame */
static void show_DM_frame(char title[], struct DM1 *dm, bool display_from_ecu_address) {
 8006530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006534:	b090      	sub	sp, #64	; 0x40
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8006536:	250f      	movs	r5, #15
static void show_DM_frame(char title[], struct DM1 *dm, bool display_from_ecu_address) {
 8006538:	460c      	mov	r4, r1
 800653a:	4680      	mov	r8, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800653c:	23ea      	movs	r3, #234	; 0xea
 800653e:	2106      	movs	r1, #6
 8006540:	2033      	movs	r0, #51	; 0x33
static void show_DM_frame(char title[], struct DM1 *dm, bool display_from_ecu_address) {
 8006542:	4617      	mov	r7, r2
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8006544:	9500      	str	r5, [sp, #0]
 8006546:	f44f 729d 	mov.w	r2, #314	; 0x13a

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800654a:	2601      	movs	r6, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800654c:	f001 fd90 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8006550:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006554:	f240 1209 	movw	r2, #265	; 0x109
 8006558:	211e      	movs	r1, #30
 800655a:	2032      	movs	r0, #50	; 0x32
 800655c:	f001 fdc4 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006560:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006564:	220a      	movs	r2, #10
 8006566:	2137      	movs	r1, #55	; 0x37
 8006568:	4640      	mov	r0, r8
 800656a:	e9cd 5600 	strd	r5, r6, [sp]
 800656e:	f001 fe9b 	bl	80082a8 <ILI9341_print_text>

	/* SAE Lamp status malfunction indicator */
	char text[50];
	sprintf(text, "Lamp malfunction:%i", dm->SAE_lamp_status_malfunction_indicator);
 8006572:	7822      	ldrb	r2, [r4, #0]
 8006574:	497a      	ldr	r1, [pc, #488]	; (8006760 <show_DM_frame+0x230>)
 8006576:	a803      	add	r0, sp, #12
 8006578:	f00c fbd4 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800657c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006580:	2223      	movs	r2, #35	; 0x23
 8006582:	2137      	movs	r1, #55	; 0x37
 8006584:	a803      	add	r0, sp, #12
 8006586:	e9cd 5600 	strd	r5, r6, [sp]
 800658a:	f001 fe8d 	bl	80082a8 <ILI9341_print_text>

	/* SAE Lamp status red stop */
	sprintf(text, "Lamp red stop:%i", dm->SAE_lamp_status_red_stop);
 800658e:	7862      	ldrb	r2, [r4, #1]
 8006590:	4974      	ldr	r1, [pc, #464]	; (8006764 <show_DM_frame+0x234>)
 8006592:	a803      	add	r0, sp, #12
 8006594:	f00c fbc6 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8006598:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800659c:	222d      	movs	r2, #45	; 0x2d
 800659e:	2137      	movs	r1, #55	; 0x37
 80065a0:	a803      	add	r0, sp, #12
 80065a2:	e9cd 5600 	strd	r5, r6, [sp]
 80065a6:	f001 fe7f 	bl	80082a8 <ILI9341_print_text>

	/* SAE Lamp status amber warning */
	sprintf(text, "Lamp amber warning:%i", dm->SAE_lamp_status_amber_warning);
 80065aa:	78a2      	ldrb	r2, [r4, #2]
 80065ac:	496e      	ldr	r1, [pc, #440]	; (8006768 <show_DM_frame+0x238>)
 80065ae:	a803      	add	r0, sp, #12
 80065b0:	f00c fbb8 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 80065b4:	2237      	movs	r2, #55	; 0x37
 80065b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80065ba:	4611      	mov	r1, r2
 80065bc:	a803      	add	r0, sp, #12
 80065be:	e9cd 5600 	strd	r5, r6, [sp]
 80065c2:	f001 fe71 	bl	80082a8 <ILI9341_print_text>

	/* SAE Lamp status protection lamp */
	sprintf(text, "Lamp protection:%i", dm->SAE_lamp_status_protect_lamp);
 80065c6:	78e2      	ldrb	r2, [r4, #3]
 80065c8:	4968      	ldr	r1, [pc, #416]	; (800676c <show_DM_frame+0x23c>)
 80065ca:	a803      	add	r0, sp, #12
 80065cc:	f00c fbaa 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80065d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80065d4:	2241      	movs	r2, #65	; 0x41
 80065d6:	2137      	movs	r1, #55	; 0x37
 80065d8:	a803      	add	r0, sp, #12
 80065da:	e9cd 5600 	strd	r5, r6, [sp]
 80065de:	f001 fe63 	bl	80082a8 <ILI9341_print_text>

	/* SAE Flash lamp malfunction indicator */
	sprintf(text, "Flash malfunction:%i", dm->SAE_flash_lamp_malfunction_indicator);
 80065e2:	7922      	ldrb	r2, [r4, #4]
 80065e4:	4962      	ldr	r1, [pc, #392]	; (8006770 <show_DM_frame+0x240>)
 80065e6:	a803      	add	r0, sp, #12
 80065e8:	f00c fb9c 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 80065ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80065f0:	224b      	movs	r2, #75	; 0x4b
 80065f2:	2137      	movs	r1, #55	; 0x37
 80065f4:	a803      	add	r0, sp, #12
 80065f6:	e9cd 5600 	strd	r5, r6, [sp]
 80065fa:	f001 fe55 	bl	80082a8 <ILI9341_print_text>

	/* SAE Flash lamp red stop */
	sprintf(text, "Flash red stop:%i", dm->SAE_flash_lamp_red_stop);
 80065fe:	7962      	ldrb	r2, [r4, #5]
 8006600:	495c      	ldr	r1, [pc, #368]	; (8006774 <show_DM_frame+0x244>)
 8006602:	a803      	add	r0, sp, #12
 8006604:	f00c fb8e 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8006608:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800660c:	2255      	movs	r2, #85	; 0x55
 800660e:	2137      	movs	r1, #55	; 0x37
 8006610:	a803      	add	r0, sp, #12
 8006612:	e9cd 5600 	strd	r5, r6, [sp]
 8006616:	f001 fe47 	bl	80082a8 <ILI9341_print_text>

	/* SAE Flash lamp amber warning */
	sprintf(text, "Flash amber warning:%i", dm->SAE_flash_lamp_amber_warning);
 800661a:	79a2      	ldrb	r2, [r4, #6]
 800661c:	4956      	ldr	r1, [pc, #344]	; (8006778 <show_DM_frame+0x248>)
 800661e:	a803      	add	r0, sp, #12
 8006620:	f00c fb80 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8006624:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006628:	225f      	movs	r2, #95	; 0x5f
 800662a:	2137      	movs	r1, #55	; 0x37
 800662c:	a803      	add	r0, sp, #12
 800662e:	e9cd 5600 	strd	r5, r6, [sp]
 8006632:	f001 fe39 	bl	80082a8 <ILI9341_print_text>

	/* SAE Flash lamp protection lamp */
	sprintf(text, "Lamp protection:%i", dm->SAE_flash_lamp_protect_lamp);
 8006636:	79e2      	ldrb	r2, [r4, #7]
 8006638:	494c      	ldr	r1, [pc, #304]	; (800676c <show_DM_frame+0x23c>)
 800663a:	a803      	add	r0, sp, #12
 800663c:	f00c fb72 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8006640:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006644:	2269      	movs	r2, #105	; 0x69
 8006646:	2137      	movs	r1, #55	; 0x37
 8006648:	a803      	add	r0, sp, #12
 800664a:	e9cd 5600 	strd	r5, r6, [sp]
 800664e:	f001 fe2b 	bl	80082a8 <ILI9341_print_text>

	/* SPN */
	sprintf(text, "SPN:%lu", dm->SPN);
 8006652:	68a2      	ldr	r2, [r4, #8]
 8006654:	4949      	ldr	r1, [pc, #292]	; (800677c <show_DM_frame+0x24c>)
 8006656:	a803      	add	r0, sp, #12
 8006658:	f00c fb64 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 800665c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006660:	e9cd 5600 	strd	r5, r6, [sp]
 8006664:	2273      	movs	r2, #115	; 0x73
 8006666:	2137      	movs	r1, #55	; 0x37
 8006668:	a803      	add	r0, sp, #12
 800666a:	f001 fe1d 	bl	80082a8 <ILI9341_print_text>

	/* FMI */
	uint8_t FMI = dm->FMI;
	switch (FMI) {
 800666e:	7b23      	ldrb	r3, [r4, #12]
 8006670:	2b15      	cmp	r3, #21
 8006672:	d873      	bhi.n	800675c <show_DM_frame+0x22c>
 8006674:	e8df f003 	tbb	[pc, r3]
 8006678:	4c4a480b 	.word	0x4c4a480b
 800667c:	5452504e 	.word	0x5452504e
 8006680:	5c5a5856 	.word	0x5c5a5856
 8006684:	6462605e 	.word	0x6462605e
 8006688:	6c6a6866 	.word	0x6c6a6866
 800668c:	706e      	.short	0x706e
	case 0x0:
		sprintf(text, "FMI:Above normal most serve");
 800668e:	493c      	ldr	r1, [pc, #240]	; (8006780 <show_DM_frame+0x250>)
		break;
	default:
		sprintf(text, "FMI:Not available");
		break;
	}
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8006690:	250f      	movs	r5, #15
 8006692:	2601      	movs	r6, #1
		sprintf(text, "FMI:Not available");
 8006694:	a803      	add	r0, sp, #12
 8006696:	f00c fb65 	bl	8012d64 <strcpy>
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 800669a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800669e:	227d      	movs	r2, #125	; 0x7d
 80066a0:	2137      	movs	r1, #55	; 0x37
 80066a2:	a803      	add	r0, sp, #12
 80066a4:	e9cd 5600 	strd	r5, r6, [sp]
 80066a8:	f001 fdfe 	bl	80082a8 <ILI9341_print_text>

	/* SPN conversion method */
	sprintf(text, "SPN conversion method:%i", dm->SPN_conversion_method);
 80066ac:	7b62      	ldrb	r2, [r4, #13]
 80066ae:	4935      	ldr	r1, [pc, #212]	; (8006784 <show_DM_frame+0x254>)
 80066b0:	a803      	add	r0, sp, #12
 80066b2:	f00c fb37 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 80066b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80066ba:	2287      	movs	r2, #135	; 0x87
 80066bc:	2137      	movs	r1, #55	; 0x37
 80066be:	a803      	add	r0, sp, #12
 80066c0:	e9cd 5600 	strd	r5, r6, [sp]
 80066c4:	f001 fdf0 	bl	80082a8 <ILI9341_print_text>

	/* Occurrence count */
	sprintf(text, "Occurrence count:%i", dm->occurrence_count);
 80066c8:	7ba2      	ldrb	r2, [r4, #14]
 80066ca:	492f      	ldr	r1, [pc, #188]	; (8006788 <show_DM_frame+0x258>)
 80066cc:	a803      	add	r0, sp, #12
 80066ce:	f00c fb29 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 80066d2:	e9cd 5600 	strd	r5, r6, [sp]
 80066d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80066da:	2291      	movs	r2, #145	; 0x91
 80066dc:	2137      	movs	r1, #55	; 0x37
 80066de:	a803      	add	r0, sp, #12
 80066e0:	f001 fde2 	bl	80082a8 <ILI9341_print_text>

	/* From ECU address */
	if(display_from_ecu_address){
 80066e4:	b16f      	cbz	r7, 8006702 <show_DM_frame+0x1d2>
		sprintf(text, "From ECU address:%i", dm->from_ecu_address);
 80066e6:	7be2      	ldrb	r2, [r4, #15]
 80066e8:	4928      	ldr	r1, [pc, #160]	; (800678c <show_DM_frame+0x25c>)
 80066ea:	a803      	add	r0, sp, #12
 80066ec:	f00c fb1a 	bl	8012d24 <siprintf>
		ILI9341_print_text(text, 55, 155, COLOR_YELLOW, COLOR_NAVY, 1);
 80066f0:	e9cd 5600 	strd	r5, r6, [sp]
 80066f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80066f8:	229b      	movs	r2, #155	; 0x9b
 80066fa:	2137      	movs	r1, #55	; 0x37
 80066fc:	a803      	add	r0, sp, #12
 80066fe:	f001 fdd3 	bl	80082a8 <ILI9341_print_text>
	}
}
 8006702:	b010      	add	sp, #64	; 0x40
 8006704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sprintf(text, "FMI:Below normal most serve");
 8006708:	4921      	ldr	r1, [pc, #132]	; (8006790 <show_DM_frame+0x260>)
 800670a:	e7c1      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Data erratic");
 800670c:	4921      	ldr	r1, [pc, #132]	; (8006794 <show_DM_frame+0x264>)
 800670e:	e7bf      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Voltage above normal");
 8006710:	4921      	ldr	r1, [pc, #132]	; (8006798 <show_DM_frame+0x268>)
 8006712:	e7bd      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Voltage below normal");
 8006714:	4921      	ldr	r1, [pc, #132]	; (800679c <show_DM_frame+0x26c>)
 8006716:	e7bb      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Current below normal");
 8006718:	4921      	ldr	r1, [pc, #132]	; (80067a0 <show_DM_frame+0x270>)
 800671a:	e7b9      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Current above normal");
 800671c:	4921      	ldr	r1, [pc, #132]	; (80067a4 <show_DM_frame+0x274>)
 800671e:	e7b7      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Mechanical system not responding");
 8006720:	4921      	ldr	r1, [pc, #132]	; (80067a8 <show_DM_frame+0x278>)
 8006722:	e7b5      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal frequency");
 8006724:	4921      	ldr	r1, [pc, #132]	; (80067ac <show_DM_frame+0x27c>)
 8006726:	e7b3      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal update rate");
 8006728:	4921      	ldr	r1, [pc, #132]	; (80067b0 <show_DM_frame+0x280>)
 800672a:	e7b1      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal rate change");
 800672c:	4921      	ldr	r1, [pc, #132]	; (80067b4 <show_DM_frame+0x284>)
 800672e:	e7af      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Root cause not known");
 8006730:	4921      	ldr	r1, [pc, #132]	; (80067b8 <show_DM_frame+0x288>)
 8006732:	e7ad      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Bad intelligent device");
 8006734:	4921      	ldr	r1, [pc, #132]	; (80067bc <show_DM_frame+0x28c>)
 8006736:	e7ab      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Out of calibration");
 8006738:	4921      	ldr	r1, [pc, #132]	; (80067c0 <show_DM_frame+0x290>)
 800673a:	e7a9      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Special instructions");
 800673c:	4921      	ldr	r1, [pc, #132]	; (80067c4 <show_DM_frame+0x294>)
 800673e:	e7a7      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal least serve");
 8006740:	4921      	ldr	r1, [pc, #132]	; (80067c8 <show_DM_frame+0x298>)
 8006742:	e7a5      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Above normal moderately serve");
 8006744:	4921      	ldr	r1, [pc, #132]	; (80067cc <show_DM_frame+0x29c>)
 8006746:	e7a3      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Below normal least serve");
 8006748:	4921      	ldr	r1, [pc, #132]	; (80067d0 <show_DM_frame+0x2a0>)
 800674a:	e7a1      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Below normal moderately serve");
 800674c:	4921      	ldr	r1, [pc, #132]	; (80067d4 <show_DM_frame+0x2a4>)
 800674e:	e79f      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Received network data in error");
 8006750:	4921      	ldr	r1, [pc, #132]	; (80067d8 <show_DM_frame+0x2a8>)
 8006752:	e79d      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Data drifted high");
 8006754:	4921      	ldr	r1, [pc, #132]	; (80067dc <show_DM_frame+0x2ac>)
 8006756:	e79b      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Data drifted low");
 8006758:	4921      	ldr	r1, [pc, #132]	; (80067e0 <show_DM_frame+0x2b0>)
 800675a:	e799      	b.n	8006690 <show_DM_frame+0x160>
		sprintf(text, "FMI:Not available");
 800675c:	4921      	ldr	r1, [pc, #132]	; (80067e4 <show_DM_frame+0x2b4>)
 800675e:	e797      	b.n	8006690 <show_DM_frame+0x160>
 8006760:	080183ac 	.word	0x080183ac
 8006764:	080183c0 	.word	0x080183c0
 8006768:	080183d1 	.word	0x080183d1
 800676c:	080183e7 	.word	0x080183e7
 8006770:	080183fa 	.word	0x080183fa
 8006774:	0801840f 	.word	0x0801840f
 8006778:	08018421 	.word	0x08018421
 800677c:	08018438 	.word	0x08018438
 8006780:	08018440 	.word	0x08018440
 8006784:	08018699 	.word	0x08018699
 8006788:	080186b2 	.word	0x080186b2
 800678c:	080186c6 	.word	0x080186c6
 8006790:	0801845c 	.word	0x0801845c
 8006794:	08018478 	.word	0x08018478
 8006798:	08018489 	.word	0x08018489
 800679c:	080184a2 	.word	0x080184a2
 80067a0:	080184bb 	.word	0x080184bb
 80067a4:	080184d4 	.word	0x080184d4
 80067a8:	080184ed 	.word	0x080184ed
 80067ac:	08018512 	.word	0x08018512
 80067b0:	08018529 	.word	0x08018529
 80067b4:	08018542 	.word	0x08018542
 80067b8:	0801855b 	.word	0x0801855b
 80067bc:	08018574 	.word	0x08018574
 80067c0:	0801858f 	.word	0x0801858f
 80067c4:	080185a6 	.word	0x080185a6
 80067c8:	080185bf 	.word	0x080185bf
 80067cc:	080185d8 	.word	0x080185d8
 80067d0:	080185fa 	.word	0x080185fa
 80067d4:	08018617 	.word	0x08018617
 80067d8:	08018639 	.word	0x08018639
 80067dc:	0801865c 	.word	0x0801865c
 80067e0:	08018672 	.word	0x08018672
 80067e4:	08018687 	.word	0x08018687

080067e8 <call_exit>:

static void call_exit(uint8_t *frame_id){
 80067e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Exit button */
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80067ea:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80067ee:	2500      	movs	r5, #0
static void call_exit(uint8_t *frame_id){
 80067f0:	4604      	mov	r4, r0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80067f2:	9600      	str	r6, [sp, #0]
 80067f4:	23e6      	movs	r3, #230	; 0xe6
 80067f6:	f240 1211 	movw	r2, #273	; 0x111
 80067fa:	21cd      	movs	r1, #205	; 0xcd
 80067fc:	2055      	movs	r0, #85	; 0x55
 80067fe:	f001 fc37 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8006802:	9500      	str	r5, [sp, #0]
 8006804:	23e6      	movs	r3, #230	; 0xe6
 8006806:	f240 1211 	movw	r2, #273	; 0x111
 800680a:	21cd      	movs	r1, #205	; 0xcd
 800680c:	2055      	movs	r0, #85	; 0x55
 800680e:	f001 fcb1 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8006812:	2302      	movs	r3, #2
 8006814:	e9cd 6300 	strd	r6, r3, [sp]
 8006818:	4809      	ldr	r0, [pc, #36]	; (8006840 <call_exit+0x58>)
 800681a:	462b      	mov	r3, r5
 800681c:	22d2      	movs	r2, #210	; 0xd2
 800681e:	215f      	movs	r1, #95	; 0x5f
 8006820:	f001 fd42 	bl	80082a8 <ILI9341_print_text>

	/* Logic for that button */
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 8006824:	23e6      	movs	r3, #230	; 0xe6
 8006826:	f240 1211 	movw	r2, #273	; 0x111
 800682a:	21cd      	movs	r1, #205	; 0xcd
 800682c:	2055      	movs	r0, #85	; 0x55
 800682e:	f002 fbdd 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Go back */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8006832:	4629      	mov	r1, r5
 8006834:	4620      	mov	r0, r4
}
 8006836:	b002      	add	sp, #8
 8006838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800683c:	f7fe bd28 	b.w	8005290 <STM32_PLC_LCD_Show_Main_Frame>
 8006840:	080179be 	.word	0x080179be

08006844 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id) {
 8006844:	b510      	push	{r4, lr}
	show_DM_frame("This ECU DM1 codes", &j1939->this_dm.dm1, false);
 8006846:	2200      	movs	r2, #0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id) {
 8006848:	460c      	mov	r4, r1
	show_DM_frame("This ECU DM1 codes", &j1939->this_dm.dm1, false);
 800684a:	f600 21e8 	addw	r1, r0, #2792	; 0xae8
 800684e:	4804      	ldr	r0, [pc, #16]	; (8006860 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame+0x1c>)
 8006850:	f7ff fe6e 	bl	8006530 <show_DM_frame>
	call_exit(frame_id);
 8006854:	4620      	mov	r0, r4
}
 8006856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 800685a:	f7ff bfc5 	b.w	80067e8 <call_exit>
 800685e:	bf00      	nop
 8006860:	080186da 	.word	0x080186da

08006864 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id){
 8006864:	b510      	push	{r4, lr}
	show_DM_frame("Other ECU DM1 codes", &j1939->from_other_ecu_dm.dm1, true);
 8006866:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id){
 8006868:	460c      	mov	r4, r1
	show_DM_frame("Other ECU DM1 codes", &j1939->from_other_ecu_dm.dm1, true);
 800686a:	f200 7154 	addw	r1, r0, #1876	; 0x754
 800686e:	4804      	ldr	r0, [pc, #16]	; (8006880 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame+0x1c>)
 8006870:	f7ff fe5e 	bl	8006530 <show_DM_frame>
	call_exit(frame_id);
 8006874:	4620      	mov	r0, r4
}
 8006876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 800687a:	f7ff bfb5 	b.w	80067e8 <call_exit>
 800687e:	bf00      	nop
 8006880:	080186ed 	.word	0x080186ed

08006884 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8006884:	b510      	push	{r4, lr}
	show_DM_frame("This ECU DM2 codes", &j1939->this_dm.dm2, false);
 8006886:	2200      	movs	r2, #0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8006888:	460c      	mov	r4, r1
	show_DM_frame("This ECU DM2 codes", &j1939->this_dm.dm2, false);
 800688a:	f600 21f8 	addw	r1, r0, #2808	; 0xaf8
 800688e:	4804      	ldr	r0, [pc, #16]	; (80068a0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame+0x1c>)
 8006890:	f7ff fe4e 	bl	8006530 <show_DM_frame>
	call_exit(frame_id);
 8006894:	4620      	mov	r0, r4
}
 8006896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 800689a:	f7ff bfa5 	b.w	80067e8 <call_exit>
 800689e:	bf00      	nop
 80068a0:	08018701 	.word	0x08018701

080068a4 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 80068a4:	b510      	push	{r4, lr}
	show_DM_frame("Other ECU DM2 codes", &j1939->from_other_ecu_dm.dm2, true);
 80068a6:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 80068a8:	460c      	mov	r4, r1
	show_DM_frame("Other ECU DM2 codes", &j1939->from_other_ecu_dm.dm2, true);
 80068aa:	f200 7164 	addw	r1, r0, #1892	; 0x764
 80068ae:	4804      	ldr	r0, [pc, #16]	; (80068c0 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame+0x1c>)
 80068b0:	f7ff fe3e 	bl	8006530 <show_DM_frame>
	call_exit(frame_id);
 80068b4:	4620      	mov	r0, r4
}
 80068b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 80068ba:	f7ff bf95 	b.w	80067e8 <call_exit>
 80068be:	bf00      	nop
 80068c0:	08018714 	.word	0x08018714

080068c4 <fill_char_array>:
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
	}

}

static void fill_char_array(char text[], char title[], uint8_t data[], uint8_t length) {
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	461f      	mov	r7, r3
 80068c8:	460d      	mov	r5, r1
 80068ca:	4604      	mov	r4, r0
 80068cc:	4616      	mov	r6, r2
	memset(text, 0, strlen(text));
 80068ce:	f7f9 fc7f 	bl	80001d0 <strlen>
 80068d2:	2100      	movs	r1, #0
 80068d4:	4602      	mov	r2, r0
 80068d6:	4620      	mov	r0, r4
 80068d8:	f00b fdb2 	bl	8012440 <memset>
	memcpy(text, title, strlen(title));
 80068dc:	4628      	mov	r0, r5
 80068de:	f7f9 fc77 	bl	80001d0 <strlen>
 80068e2:	4629      	mov	r1, r5
 80068e4:	4602      	mov	r2, r0
 80068e6:	4620      	mov	r0, r4
 80068e8:	f00b fd9c 	bl	8012424 <memcpy>
	memcpy(text + strlen(title), (char*)data, length); /* Move text strlen(title) elements */
 80068ec:	4628      	mov	r0, r5
 80068ee:	f7f9 fc6f 	bl	80001d0 <strlen>
 80068f2:	463a      	mov	r2, r7
 80068f4:	4631      	mov	r1, r6
 80068f6:	4420      	add	r0, r4
}
 80068f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memcpy(text + strlen(title), (char*)data, length); /* Move text strlen(title) elements */
 80068fc:	f00b bd92 	b.w	8012424 <memcpy>

08006900 <show_identifications>:
static void show_identifications(char title[], struct Identifications *identifications, bool display_from_ecu_address) {
 8006900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006904:	b093      	sub	sp, #76	; 0x4c
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8006906:	250f      	movs	r5, #15
static void show_identifications(char title[], struct Identifications *identifications, bool display_from_ecu_address) {
 8006908:	4680      	mov	r8, r0
 800690a:	460c      	mov	r4, r1
 800690c:	4617      	mov	r7, r2
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800690e:	23ea      	movs	r3, #234	; 0xea
 8006910:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8006914:	2106      	movs	r1, #6
 8006916:	2033      	movs	r0, #51	; 0x33
 8006918:	9500      	str	r5, [sp, #0]
 800691a:	f001 fba9 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800691e:	2601      	movs	r6, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8006920:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006924:	f240 1209 	movw	r2, #265	; 0x109
 8006928:	211e      	movs	r1, #30
 800692a:	2032      	movs	r0, #50	; 0x32
 800692c:	f001 fbdc 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006930:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006934:	4640      	mov	r0, r8
 8006936:	220a      	movs	r2, #10
 8006938:	2137      	movs	r1, #55	; 0x37
	uint8_t length = identifications->software_identification.number_of_fields;
 800693a:	46a0      	mov	r8, r4
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800693c:	e9cd 5600 	strd	r5, r6, [sp]
 8006940:	f001 fcb2 	bl	80082a8 <ILI9341_print_text>
	char text[50] = "";
 8006944:	2100      	movs	r1, #0
 8006946:	222e      	movs	r2, #46	; 0x2e
 8006948:	a806      	add	r0, sp, #24
 800694a:	9105      	str	r1, [sp, #20]
 800694c:	f00b fd78 	bl	8012440 <memset>
	uint8_t length = identifications->software_identification.number_of_fields;
 8006950:	f818 9b01 	ldrb.w	r9, [r8], #1
	ILI9341_print_text("Software identification:", 55, index_row, COLOR_YELLOW, COLOR_NAVY, 1);
 8006954:	4883      	ldr	r0, [pc, #524]	; (8006b64 <show_identifications+0x264>)
 8006956:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800695a:	2223      	movs	r2, #35	; 0x23
 800695c:	2137      	movs	r1, #55	; 0x37
 800695e:	e9cd 5600 	strd	r5, r6, [sp]
 8006962:	f001 fca1 	bl	80082a8 <ILI9341_print_text>
	fill_char_array(text, "ID:", identifications->software_identification.identifications, length);
 8006966:	4980      	ldr	r1, [pc, #512]	; (8006b68 <show_identifications+0x268>)
 8006968:	464b      	mov	r3, r9
 800696a:	4642      	mov	r2, r8
 800696c:	a805      	add	r0, sp, #20
 800696e:	f7ff ffa9 	bl	80068c4 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006972:	e9cd 5600 	strd	r5, r6, [sp]
 8006976:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800697a:	222d      	movs	r2, #45	; 0x2d
 800697c:	2137      	movs	r1, #55	; 0x37
 800697e:	a805      	add	r0, sp, #20
 8006980:	f001 fc92 	bl	80082a8 <ILI9341_print_text>
	if(display_from_ecu_address){
 8006984:	b16f      	cbz	r7, 80069a2 <show_identifications+0xa2>
		sprintf(text, "Source address:%i", identifications->software_identification.from_ecu_address);
 8006986:	7fe2      	ldrb	r2, [r4, #31]
 8006988:	4978      	ldr	r1, [pc, #480]	; (8006b6c <show_identifications+0x26c>)
 800698a:	a805      	add	r0, sp, #20
 800698c:	f00c f9ca 	bl	8012d24 <siprintf>
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006990:	2237      	movs	r2, #55	; 0x37
 8006992:	e9cd 5600 	strd	r5, r6, [sp]
 8006996:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800699a:	4611      	mov	r1, r2
 800699c:	a805      	add	r0, sp, #20
 800699e:	f001 fc83 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("ECU identification:", 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80069a2:	250f      	movs	r5, #15
 80069a4:	2601      	movs	r6, #1
 80069a6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80069aa:	2137      	movs	r1, #55	; 0x37
 80069ac:	4870      	ldr	r0, [pc, #448]	; (8006b70 <show_identifications+0x270>)
 80069ae:	2241      	movs	r2, #65	; 0x41
 80069b0:	e9cd 5600 	strd	r5, r6, [sp]
 80069b4:	f001 fc78 	bl	80082a8 <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_part_number);
 80069b8:	f104 0221 	add.w	r2, r4, #33	; 0x21
 80069bc:	4610      	mov	r0, r2
 80069be:	9203      	str	r2, [sp, #12]
 80069c0:	f7f9 fc06 	bl	80001d0 <strlen>
	fill_char_array(text, "Part number:", identifications->ecu_identification.ecu_part_number, length);
 80069c4:	9a03      	ldr	r2, [sp, #12]
 80069c6:	496b      	ldr	r1, [pc, #428]	; (8006b74 <show_identifications+0x274>)
 80069c8:	b2c3      	uxtb	r3, r0
 80069ca:	a805      	add	r0, sp, #20
 80069cc:	f7ff ff7a 	bl	80068c4 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80069d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80069d4:	2137      	movs	r1, #55	; 0x37
 80069d6:	224b      	movs	r2, #75	; 0x4b
 80069d8:	a805      	add	r0, sp, #20
 80069da:	e9cd 5600 	strd	r5, r6, [sp]
 80069de:	f001 fc63 	bl	80082a8 <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_serial_number);
 80069e2:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 80069e6:	4610      	mov	r0, r2
 80069e8:	9203      	str	r2, [sp, #12]
 80069ea:	f7f9 fbf1 	bl	80001d0 <strlen>
	fill_char_array(text, "Serial number:", identifications->ecu_identification.ecu_serial_number, length);
 80069ee:	9a03      	ldr	r2, [sp, #12]
 80069f0:	4961      	ldr	r1, [pc, #388]	; (8006b78 <show_identifications+0x278>)
 80069f2:	b2c3      	uxtb	r3, r0
 80069f4:	a805      	add	r0, sp, #20
 80069f6:	f7ff ff65 	bl	80068c4 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80069fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80069fe:	2137      	movs	r1, #55	; 0x37
 8006a00:	2255      	movs	r2, #85	; 0x55
 8006a02:	a805      	add	r0, sp, #20
 8006a04:	e9cd 5600 	strd	r5, r6, [sp]
 8006a08:	f001 fc4e 	bl	80082a8 <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_location);
 8006a0c:	f104 025d 	add.w	r2, r4, #93	; 0x5d
 8006a10:	4610      	mov	r0, r2
 8006a12:	9203      	str	r2, [sp, #12]
 8006a14:	f7f9 fbdc 	bl	80001d0 <strlen>
	fill_char_array(text, "Location:", identifications->ecu_identification.ecu_location, length);
 8006a18:	9a03      	ldr	r2, [sp, #12]
 8006a1a:	4958      	ldr	r1, [pc, #352]	; (8006b7c <show_identifications+0x27c>)
 8006a1c:	b2c3      	uxtb	r3, r0
 8006a1e:	a805      	add	r0, sp, #20
 8006a20:	f7ff ff50 	bl	80068c4 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006a24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006a28:	2137      	movs	r1, #55	; 0x37
 8006a2a:	225f      	movs	r2, #95	; 0x5f
 8006a2c:	a805      	add	r0, sp, #20
 8006a2e:	e9cd 5600 	strd	r5, r6, [sp]
 8006a32:	f001 fc39 	bl	80082a8 <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_type);
 8006a36:	f104 027b 	add.w	r2, r4, #123	; 0x7b
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	9203      	str	r2, [sp, #12]
 8006a3e:	f7f9 fbc7 	bl	80001d0 <strlen>
	fill_char_array(text, "Type:", identifications->ecu_identification.ecu_type, length);
 8006a42:	9a03      	ldr	r2, [sp, #12]
 8006a44:	494e      	ldr	r1, [pc, #312]	; (8006b80 <show_identifications+0x280>)
 8006a46:	b2c3      	uxtb	r3, r0
 8006a48:	a805      	add	r0, sp, #20
 8006a4a:	f7ff ff3b 	bl	80068c4 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006a4e:	e9cd 5600 	strd	r5, r6, [sp]
 8006a52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006a56:	2269      	movs	r2, #105	; 0x69
 8006a58:	2137      	movs	r1, #55	; 0x37
 8006a5a:	a805      	add	r0, sp, #20
 8006a5c:	f001 fc24 	bl	80082a8 <ILI9341_print_text>
	if(display_from_ecu_address){
 8006a60:	b177      	cbz	r7, 8006a80 <show_identifications+0x180>
		sprintf(text, "Source address:%i", identifications->ecu_identification.from_ecu_address);
 8006a62:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 8006a66:	4941      	ldr	r1, [pc, #260]	; (8006b6c <show_identifications+0x26c>)
 8006a68:	a805      	add	r0, sp, #20
 8006a6a:	f00c f95b 	bl	8012d24 <siprintf>
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006a6e:	e9cd 5600 	strd	r5, r6, [sp]
 8006a72:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006a76:	2273      	movs	r2, #115	; 0x73
 8006a78:	2137      	movs	r1, #55	; 0x37
 8006a7a:	a805      	add	r0, sp, #20
 8006a7c:	f001 fc14 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Component identification:", 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006a80:	250f      	movs	r5, #15
 8006a82:	2601      	movs	r6, #1
 8006a84:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006a88:	2137      	movs	r1, #55	; 0x37
 8006a8a:	483e      	ldr	r0, [pc, #248]	; (8006b84 <show_identifications+0x284>)
 8006a8c:	227d      	movs	r2, #125	; 0x7d
 8006a8e:	e9cd 5600 	strd	r5, r6, [sp]
 8006a92:	f001 fc09 	bl	80082a8 <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_product_date);
 8006a96:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	9203      	str	r2, [sp, #12]
 8006a9e:	f7f9 fb97 	bl	80001d0 <strlen>
	fill_char_array(text, "Product date:", identifications->component_identification.component_product_date, length);
 8006aa2:	9a03      	ldr	r2, [sp, #12]
 8006aa4:	4938      	ldr	r1, [pc, #224]	; (8006b88 <show_identifications+0x288>)
 8006aa6:	b2c3      	uxtb	r3, r0
 8006aa8:	a805      	add	r0, sp, #20
 8006aaa:	f7ff ff0b 	bl	80068c4 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006aae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006ab2:	2137      	movs	r1, #55	; 0x37
 8006ab4:	2287      	movs	r2, #135	; 0x87
 8006ab6:	a805      	add	r0, sp, #20
 8006ab8:	e9cd 5600 	strd	r5, r6, [sp]
 8006abc:	f001 fbf4 	bl	80082a8 <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_model_name);
 8006ac0:	f104 02b9 	add.w	r2, r4, #185	; 0xb9
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	9203      	str	r2, [sp, #12]
 8006ac8:	f7f9 fb82 	bl	80001d0 <strlen>
	fill_char_array(text, "Model name:", identifications->component_identification.component_model_name, length);
 8006acc:	9a03      	ldr	r2, [sp, #12]
 8006ace:	492f      	ldr	r1, [pc, #188]	; (8006b8c <show_identifications+0x28c>)
 8006ad0:	b2c3      	uxtb	r3, r0
 8006ad2:	a805      	add	r0, sp, #20
 8006ad4:	f7ff fef6 	bl	80068c4 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006ad8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006adc:	2137      	movs	r1, #55	; 0x37
 8006ade:	2291      	movs	r2, #145	; 0x91
 8006ae0:	a805      	add	r0, sp, #20
 8006ae2:	e9cd 5600 	strd	r5, r6, [sp]
 8006ae6:	f001 fbdf 	bl	80082a8 <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_serial_number);
 8006aea:	f104 02d7 	add.w	r2, r4, #215	; 0xd7
 8006aee:	4610      	mov	r0, r2
 8006af0:	9203      	str	r2, [sp, #12]
 8006af2:	f7f9 fb6d 	bl	80001d0 <strlen>
	fill_char_array(text, "Serial number:", identifications->component_identification.component_serial_number, length);
 8006af6:	9a03      	ldr	r2, [sp, #12]
 8006af8:	491f      	ldr	r1, [pc, #124]	; (8006b78 <show_identifications+0x278>)
 8006afa:	b2c3      	uxtb	r3, r0
 8006afc:	a805      	add	r0, sp, #20
 8006afe:	f7ff fee1 	bl	80068c4 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006b02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006b06:	2137      	movs	r1, #55	; 0x37
 8006b08:	229b      	movs	r2, #155	; 0x9b
 8006b0a:	a805      	add	r0, sp, #20
 8006b0c:	e9cd 5600 	strd	r5, r6, [sp]
 8006b10:	f001 fbca 	bl	80082a8 <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_unit_name);
 8006b14:	f104 02f5 	add.w	r2, r4, #245	; 0xf5
 8006b18:	4610      	mov	r0, r2
 8006b1a:	9203      	str	r2, [sp, #12]
 8006b1c:	f7f9 fb58 	bl	80001d0 <strlen>
	fill_char_array(text, "Unit name:", identifications->component_identification.component_unit_name, length);
 8006b20:	9a03      	ldr	r2, [sp, #12]
 8006b22:	491b      	ldr	r1, [pc, #108]	; (8006b90 <show_identifications+0x290>)
 8006b24:	b2c3      	uxtb	r3, r0
 8006b26:	a805      	add	r0, sp, #20
 8006b28:	f7ff fecc 	bl	80068c4 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006b2c:	e9cd 5600 	strd	r5, r6, [sp]
 8006b30:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006b34:	22a5      	movs	r2, #165	; 0xa5
 8006b36:	2137      	movs	r1, #55	; 0x37
 8006b38:	a805      	add	r0, sp, #20
 8006b3a:	f001 fbb5 	bl	80082a8 <ILI9341_print_text>
	if(display_from_ecu_address){
 8006b3e:	b177      	cbz	r7, 8006b5e <show_identifications+0x25e>
		sprintf(text, "Source address:%i", identifications->component_identification.from_ecu_address);
 8006b40:	f894 2113 	ldrb.w	r2, [r4, #275]	; 0x113
 8006b44:	4909      	ldr	r1, [pc, #36]	; (8006b6c <show_identifications+0x26c>)
 8006b46:	a805      	add	r0, sp, #20
 8006b48:	f00c f8ec 	bl	8012d24 <siprintf>
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006b4c:	e9cd 5600 	strd	r5, r6, [sp]
 8006b50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006b54:	22af      	movs	r2, #175	; 0xaf
 8006b56:	2137      	movs	r1, #55	; 0x37
 8006b58:	a805      	add	r0, sp, #20
 8006b5a:	f001 fba5 	bl	80082a8 <ILI9341_print_text>
}
 8006b5e:	b013      	add	sp, #76	; 0x4c
 8006b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b64:	08018728 	.word	0x08018728
 8006b68:	08018741 	.word	0x08018741
 8006b6c:	08018745 	.word	0x08018745
 8006b70:	08018757 	.word	0x08018757
 8006b74:	0801876b 	.word	0x0801876b
 8006b78:	08018778 	.word	0x08018778
 8006b7c:	08018787 	.word	0x08018787
 8006b80:	08018791 	.word	0x08018791
 8006b84:	08018797 	.word	0x08018797
 8006b88:	080187b1 	.word	0x080187b1
 8006b8c:	080187bf 	.word	0x080187bf
 8006b90:	080187cb 	.word	0x080187cb

08006b94 <enter_identification>:
static uint8_t enter_identification(char identification[], char title[], uint8_t *frame_id) {
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4604      	mov	r4, r0
 8006b98:	460e      	mov	r6, r1
 8006b9a:	4615      	mov	r5, r2
	memset(identification, 0, strlen(identification));
 8006b9c:	f7f9 fb18 	bl	80001d0 <strlen>
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f00b fc4b 	bl	8012440 <memset>
	if(STM32_PLC_LCD_Show_Keyboard_Frame(identification, title) == 0){
 8006baa:	4620      	mov	r0, r4
 8006bac:	4631      	mov	r1, r6
 8006bae:	f000 fcff 	bl	80075b0 <STM32_PLC_LCD_Show_Keyboard_Frame>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	b928      	cbnz	r0, 8006bc2 <enter_identification+0x2e>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f7fe fb69 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	bd70      	pop	{r4, r5, r6, pc}
	return 1;
 8006bc2:	2401      	movs	r4, #1
 8006bc4:	e7fb      	b.n	8006bbe <enter_identification+0x2a>
	...

08006bc8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	ed2d 8b02 	vpush	{d8}
 8006bd0:	b089      	sub	sp, #36	; 0x24
	show_identifications("Identifications about this ECU", &j1939->this_identifications, false);
 8006bd2:	2200      	movs	r2, #0
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 8006bd4:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 8006bd8:	4604      	mov	r4, r0
 8006bda:	460d      	mov	r5, r1
	show_identifications("Identifications about this ECU", &j1939->this_identifications, false);
 8006bdc:	f600 411c 	addw	r1, r0, #3100	; 0xc1c
 8006be0:	48aa      	ldr	r0, [pc, #680]	; (8006e8c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2c4>)
 8006be2:	f7ff fe8d 	bl	8006900 <show_identifications>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8006be6:	2600      	movs	r6, #0
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 8006be8:	23dc      	movs	r3, #220	; 0xdc
 8006bea:	f240 1225 	movw	r2, #293	; 0x125
 8006bee:	21c3      	movs	r1, #195	; 0xc3
 8006bf0:	2046      	movs	r0, #70	; 0x46
 8006bf2:	9700      	str	r7, [sp, #0]
 8006bf4:	f001 fa3c 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8006bf8:	23dc      	movs	r3, #220	; 0xdc
 8006bfa:	f240 1225 	movw	r2, #293	; 0x125
 8006bfe:	21c3      	movs	r1, #195	; 0xc3
 8006c00:	2046      	movs	r0, #70	; 0x46
 8006c02:	9600      	str	r6, [sp, #0]
 8006c04:	f001 fab6 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Set identification", 75, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e9cd 7300 	strd	r7, r3, [sp]
 8006c0e:	48a0      	ldr	r0, [pc, #640]	; (8006e90 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2c8>)
 8006c10:	4633      	mov	r3, r6
 8006c12:	22c8      	movs	r2, #200	; 0xc8
 8006c14:	214b      	movs	r1, #75	; 0x4b
 8006c16:	f001 fb47 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(70, 195, 293, 220);
 8006c1a:	21c3      	movs	r1, #195	; 0xc3
 8006c1c:	23dc      	movs	r3, #220	; 0xdc
 8006c1e:	f240 1225 	movw	r2, #293	; 0x125
 8006c22:	2046      	movs	r0, #70	; 0x46
 8006c24:	f002 f9e2 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set identification?") == 0) {
 8006c28:	489a      	ldr	r0, [pc, #616]	; (8006e94 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2cc>)
 8006c2a:	f7fc fde5 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8006c2e:	4601      	mov	r1, r0
 8006c30:	b938      	cbnz	r0, 8006c42 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x7a>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8006c32:	4628      	mov	r0, r5
 8006c34:	f7fe fb2c 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 8006c38:	b009      	add	sp, #36	; 0x24
 8006c3a:	ecbd 8b02 	vpop	{d8}
 8006c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char identification[17] = "";
 8006c42:	220d      	movs	r2, #13
 8006c44:	4631      	mov	r1, r6
 8006c46:	a804      	add	r0, sp, #16
 8006c48:	9603      	str	r6, [sp, #12]
 8006c4a:	f00b fbf9 	bl	8012440 <memset>
	if(enter_identification(identification, "Enter software identification", frame_id) == 0)
 8006c4e:	4992      	ldr	r1, [pc, #584]	; (8006e98 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2d0>)
 8006c50:	462a      	mov	r2, r5
 8006c52:	a803      	add	r0, sp, #12
 8006c54:	f7ff ff9e 	bl	8006b94 <enter_identification>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d0ed      	beq.n	8006c38 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x70>
	j1939->this_identifications.software_identification.number_of_fields = strlen(identification); /* This differ from ECU/Component identification */
 8006c5c:	a803      	add	r0, sp, #12
 8006c5e:	f7f9 fab7 	bl	80001d0 <strlen>
	memcpy(j1939->this_identifications.software_identification.identifications, (uint8_t*)identification, sizeof(identification));
 8006c62:	f604 431d 	addw	r3, r4, #3101	; 0xc1d
	j1939->this_identifications.software_identification.number_of_fields = strlen(identification); /* This differ from ECU/Component identification */
 8006c66:	f884 0c1c 	strb.w	r0, [r4, #3100]	; 0xc1c
	memcpy(j1939->this_identifications.software_identification.identifications, (uint8_t*)identification, sizeof(identification));
 8006c6a:	af03      	add	r7, sp, #12
 8006c6c:	ae07      	add	r6, sp, #28
 8006c6e:	469b      	mov	fp, r3
 8006c70:	463a      	mov	r2, r7
 8006c72:	ca03      	ldmia	r2!, {r0, r1}
 8006c74:	42b2      	cmp	r2, r6
 8006c76:	6018      	str	r0, [r3, #0]
 8006c78:	6059      	str	r1, [r3, #4]
 8006c7a:	4617      	mov	r7, r2
 8006c7c:	f103 0308 	add.w	r3, r3, #8
 8006c80:	d1f6      	bne.n	8006c70 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0xa8>
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU part number", frame_id) == 0)
 8006c86:	4985      	ldr	r1, [pc, #532]	; (8006e9c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2d4>)
 8006c88:	462a      	mov	r2, r5
 8006c8a:	a803      	add	r0, sp, #12
 8006c8c:	f7ff ff82 	bl	8006b94 <enter_identification>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d0d1      	beq.n	8006c38 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x70>
	memcpy(j1939->this_identifications.ecu_identification.ecu_part_number, (uint8_t*)identification, sizeof(identification));
 8006c94:	f604 433d 	addw	r3, r4, #3133	; 0xc3d
 8006c98:	af03      	add	r7, sp, #12
 8006c9a:	469a      	mov	sl, r3
 8006c9c:	463a      	mov	r2, r7
 8006c9e:	ca03      	ldmia	r2!, {r0, r1}
 8006ca0:	42b2      	cmp	r2, r6
 8006ca2:	6018      	str	r0, [r3, #0]
 8006ca4:	6059      	str	r1, [r3, #4]
 8006ca6:	4617      	mov	r7, r2
 8006ca8:	f103 0308 	add.w	r3, r3, #8
 8006cac:	d1f6      	bne.n	8006c9c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0xd4>
 8006cae:	7812      	ldrb	r2, [r2, #0]
 8006cb0:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU serial number", frame_id) == 0)
 8006cb2:	497b      	ldr	r1, [pc, #492]	; (8006ea0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2d8>)
 8006cb4:	462a      	mov	r2, r5
 8006cb6:	a803      	add	r0, sp, #12
 8006cb8:	f7ff ff6c 	bl	8006b94 <enter_identification>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d0bb      	beq.n	8006c38 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x70>
	memcpy(j1939->this_identifications.ecu_identification.ecu_serial_number, (uint8_t*)identification, sizeof(identification));
 8006cc0:	f604 435b 	addw	r3, r4, #3163	; 0xc5b
 8006cc4:	af03      	add	r7, sp, #12
 8006cc6:	4699      	mov	r9, r3
 8006cc8:	463a      	mov	r2, r7
 8006cca:	ca03      	ldmia	r2!, {r0, r1}
 8006ccc:	42b2      	cmp	r2, r6
 8006cce:	6018      	str	r0, [r3, #0]
 8006cd0:	6059      	str	r1, [r3, #4]
 8006cd2:	4617      	mov	r7, r2
 8006cd4:	f103 0308 	add.w	r3, r3, #8
 8006cd8:	d1f6      	bne.n	8006cc8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x100>
 8006cda:	7812      	ldrb	r2, [r2, #0]
 8006cdc:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU location", frame_id) == 0)
 8006cde:	4971      	ldr	r1, [pc, #452]	; (8006ea4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2dc>)
 8006ce0:	462a      	mov	r2, r5
 8006ce2:	a803      	add	r0, sp, #12
 8006ce4:	f7ff ff56 	bl	8006b94 <enter_identification>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d0a5      	beq.n	8006c38 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x70>
	memcpy(j1939->this_identifications.ecu_identification.ecu_location, (uint8_t*)identification, sizeof(identification));
 8006cec:	f604 4379 	addw	r3, r4, #3193	; 0xc79
 8006cf0:	af03      	add	r7, sp, #12
 8006cf2:	4698      	mov	r8, r3
 8006cf4:	463a      	mov	r2, r7
 8006cf6:	ca03      	ldmia	r2!, {r0, r1}
 8006cf8:	42b2      	cmp	r2, r6
 8006cfa:	6018      	str	r0, [r3, #0]
 8006cfc:	6059      	str	r1, [r3, #4]
 8006cfe:	4617      	mov	r7, r2
 8006d00:	f103 0308 	add.w	r3, r3, #8
 8006d04:	d1f6      	bne.n	8006cf4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x12c>
 8006d06:	7812      	ldrb	r2, [r2, #0]
 8006d08:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU type", frame_id) == 0)
 8006d0a:	4967      	ldr	r1, [pc, #412]	; (8006ea8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2e0>)
 8006d0c:	462a      	mov	r2, r5
 8006d0e:	a803      	add	r0, sp, #12
 8006d10:	f7ff ff40 	bl	8006b94 <enter_identification>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d08f      	beq.n	8006c38 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x70>
	memcpy(j1939->this_identifications.ecu_identification.ecu_type, (uint8_t*)identification, sizeof(identification));
 8006d18:	af03      	add	r7, sp, #12
 8006d1a:	f604 4397 	addw	r3, r4, #3223	; 0xc97
 8006d1e:	463a      	mov	r2, r7
 8006d20:	ca03      	ldmia	r2!, {r0, r1}
 8006d22:	42b2      	cmp	r2, r6
 8006d24:	6018      	str	r0, [r3, #0]
 8006d26:	6059      	str	r1, [r3, #4]
 8006d28:	4617      	mov	r7, r2
 8006d2a:	f103 0308 	add.w	r3, r3, #8
 8006d2e:	d1f6      	bne.n	8006d1e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x156>
 8006d30:	7812      	ldrb	r2, [r2, #0]
 8006d32:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component product date", frame_id) == 0)
 8006d34:	495d      	ldr	r1, [pc, #372]	; (8006eac <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2e4>)
 8006d36:	462a      	mov	r2, r5
 8006d38:	a803      	add	r0, sp, #12
 8006d3a:	f7ff ff2b 	bl	8006b94 <enter_identification>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f af7a 	beq.w	8006c38 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x70>
	memcpy(j1939->this_identifications.component_identification.component_product_date, (uint8_t*)identification, sizeof(identification));
 8006d44:	f604 43b7 	addw	r3, r4, #3255	; 0xcb7
 8006d48:	f10d 0c0c 	add.w	ip, sp, #12
 8006d4c:	461f      	mov	r7, r3
 8006d4e:	4662      	mov	r2, ip
 8006d50:	ca03      	ldmia	r2!, {r0, r1}
 8006d52:	42b2      	cmp	r2, r6
 8006d54:	6018      	str	r0, [r3, #0]
 8006d56:	6059      	str	r1, [r3, #4]
 8006d58:	4694      	mov	ip, r2
 8006d5a:	f103 0308 	add.w	r3, r3, #8
 8006d5e:	d1f6      	bne.n	8006d4e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x186>
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component model name", frame_id) == 0)
 8006d64:	4952      	ldr	r1, [pc, #328]	; (8006eb0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2e8>)
 8006d66:	462a      	mov	r2, r5
 8006d68:	a803      	add	r0, sp, #12
 8006d6a:	f7ff ff13 	bl	8006b94 <enter_identification>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f43f af62 	beq.w	8006c38 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x70>
	memcpy(j1939->this_identifications.component_identification.component_model_name, (uint8_t*)identification, sizeof(identification));
 8006d74:	f604 43d5 	addw	r3, r4, #3285	; 0xcd5
 8006d78:	ee08 3a10 	vmov	s16, r3
 8006d7c:	f10d 0c0c 	add.w	ip, sp, #12
 8006d80:	4662      	mov	r2, ip
 8006d82:	ca03      	ldmia	r2!, {r0, r1}
 8006d84:	42b2      	cmp	r2, r6
 8006d86:	6018      	str	r0, [r3, #0]
 8006d88:	6059      	str	r1, [r3, #4]
 8006d8a:	4694      	mov	ip, r2
 8006d8c:	f103 0308 	add.w	r3, r3, #8
 8006d90:	d1f6      	bne.n	8006d80 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x1b8>
 8006d92:	7812      	ldrb	r2, [r2, #0]
 8006d94:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component serial number", frame_id) == 0)
 8006d96:	4947      	ldr	r1, [pc, #284]	; (8006eb4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2ec>)
 8006d98:	462a      	mov	r2, r5
 8006d9a:	a803      	add	r0, sp, #12
 8006d9c:	f7ff fefa 	bl	8006b94 <enter_identification>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	f43f af49 	beq.w	8006c38 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x70>
	memcpy(j1939->this_identifications.component_identification.component_serial_number, (uint8_t*)identification, sizeof(identification));
 8006da6:	f10d 0c0c 	add.w	ip, sp, #12
 8006daa:	f604 43f3 	addw	r3, r4, #3315	; 0xcf3
 8006dae:	4662      	mov	r2, ip
 8006db0:	ca03      	ldmia	r2!, {r0, r1}
 8006db2:	42b2      	cmp	r2, r6
 8006db4:	6018      	str	r0, [r3, #0]
 8006db6:	6059      	str	r1, [r3, #4]
 8006db8:	4694      	mov	ip, r2
 8006dba:	f103 0308 	add.w	r3, r3, #8
 8006dbe:	d1f6      	bne.n	8006dae <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x1e6>
 8006dc0:	7812      	ldrb	r2, [r2, #0]
 8006dc2:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component unit name", frame_id) == 0)
 8006dc4:	493c      	ldr	r1, [pc, #240]	; (8006eb8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2f0>)
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	a803      	add	r0, sp, #12
 8006dca:	f7ff fee3 	bl	8006b94 <enter_identification>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	f43f af32 	beq.w	8006c38 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x70>
	memcpy(j1939->this_identifications.component_identification.component_unit_name, (uint8_t*)identification, sizeof(identification));
 8006dd4:	f604 5211 	addw	r2, r4, #3345	; 0xd11
 8006dd8:	ee08 2a90 	vmov	s17, r2
 8006ddc:	ab03      	add	r3, sp, #12
 8006dde:	469c      	mov	ip, r3
 8006de0:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8006de4:	45b4      	cmp	ip, r6
 8006de6:	6010      	str	r0, [r2, #0]
 8006de8:	6051      	str	r1, [r2, #4]
 8006dea:	4663      	mov	r3, ip
 8006dec:	f102 0208 	add.w	r2, r2, #8
 8006df0:	d1f5      	bne.n	8006dde <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x216>
 8006df2:	f89c 3000 	ldrb.w	r3, [ip]
 8006df6:	7013      	strb	r3, [r2, #0]
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 8006df8:	f7fb f8f0 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	b120      	cbz	r0, 8006e0a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x242>
		STM32_PLC_LCD_Show_Information_OK_Dialog("Could not mount SD card");
 8006e00:	482e      	ldr	r0, [pc, #184]	; (8006ebc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2f4>)
 8006e02:	f7fc fc87 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8006e06:	2100      	movs	r1, #0
 8006e08:	e713      	b.n	8006c32 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x6a>
	STM32_PLC_SD_Open_Existing_File_With_Write("ID.TXT");
 8006e0a:	482d      	ldr	r0, [pc, #180]	; (8006ec0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2f8>)
 8006e0c:	f7fb f908 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
	STM32_PLC_SD_Write_File((char*)j1939->this_identifications.software_identification.identifications);
 8006e10:	4658      	mov	r0, fp
 8006e12:	f7fb f947 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)DELIMITER);
 8006e16:	482b      	ldr	r0, [pc, #172]	; (8006ec4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2fc>)
 8006e18:	f7fb f944 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)j1939->this_identifications.ecu_identification.ecu_part_number);
 8006e1c:	4650      	mov	r0, sl
 8006e1e:	f7fb f941 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)DELIMITER);
 8006e22:	4828      	ldr	r0, [pc, #160]	; (8006ec4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2fc>)
 8006e24:	f7fb f93e 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)j1939->this_identifications.ecu_identification.ecu_serial_number);
 8006e28:	4648      	mov	r0, r9
 8006e2a:	f7fb f93b 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)DELIMITER);
 8006e2e:	4825      	ldr	r0, [pc, #148]	; (8006ec4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2fc>)
 8006e30:	f7fb f938 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)j1939->this_identifications.ecu_identification.ecu_location);
 8006e34:	4640      	mov	r0, r8
 8006e36:	f7fb f935 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)DELIMITER);
 8006e3a:	4822      	ldr	r0, [pc, #136]	; (8006ec4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2fc>)
 8006e3c:	f7fb f932 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)j1939->this_identifications.ecu_identification.ecu_type);
 8006e40:	f604 4097 	addw	r0, r4, #3223	; 0xc97
 8006e44:	f7fb f92e 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)DELIMITER);
 8006e48:	481e      	ldr	r0, [pc, #120]	; (8006ec4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2fc>)
 8006e4a:	f7fb f92b 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)j1939->this_identifications.component_identification.component_product_date);
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f7fb f928 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)DELIMITER);
 8006e54:	481b      	ldr	r0, [pc, #108]	; (8006ec4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2fc>)
 8006e56:	f7fb f925 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)j1939->this_identifications.component_identification.component_model_name);
 8006e5a:	ee18 0a10 	vmov	r0, s16
 8006e5e:	f7fb f921 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)DELIMITER);
 8006e62:	4818      	ldr	r0, [pc, #96]	; (8006ec4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2fc>)
 8006e64:	f7fb f91e 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)j1939->this_identifications.component_identification.component_serial_number);
 8006e68:	f604 40f3 	addw	r0, r4, #3315	; 0xcf3
 8006e6c:	f7fb f91a 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)DELIMITER);
 8006e70:	4814      	ldr	r0, [pc, #80]	; (8006ec4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x2fc>)
 8006e72:	f7fb f917 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Write_File((char*)j1939->this_identifications.component_identification.component_unit_name);
 8006e76:	ee18 0a90 	vmov	r0, s17
 8006e7a:	f7fb f913 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Close_File();
 8006e7e:	f7fb f8d7 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8006e82:	f7fb f89b 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8006e86:	4631      	mov	r1, r6
 8006e88:	e6d3      	b.n	8006c32 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x6a>
 8006e8a:	bf00      	nop
 8006e8c:	080187d6 	.word	0x080187d6
 8006e90:	080187f5 	.word	0x080187f5
 8006e94:	08018808 	.word	0x08018808
 8006e98:	0801882b 	.word	0x0801882b
 8006e9c:	08018849 	.word	0x08018849
 8006ea0:	0801885f 	.word	0x0801885f
 8006ea4:	08018877 	.word	0x08018877
 8006ea8:	0801888a 	.word	0x0801888a
 8006eac:	08018899 	.word	0x08018899
 8006eb0:	080188b6 	.word	0x080188b6
 8006eb4:	080188d1 	.word	0x080188d1
 8006eb8:	080188ef 	.word	0x080188ef
 8006ebc:	08016e92 	.word	0x08016e92
 8006ec0:	08016e24 	.word	0x08016e24
 8006ec4:	08016cb1 	.word	0x08016cb1

08006ec8 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 8006ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	show_identifications("Identifications about other ECU", &j1939->from_other_ecu_identifications, true);
 8006eca:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 8006ecc:	460c      	mov	r4, r1
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8006ece:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	show_identifications("Identifications about other ECU", &j1939->from_other_ecu_identifications, true);
 8006ed2:	f600 0188 	addw	r1, r0, #2184	; 0x888
 8006ed6:	4815      	ldr	r0, [pc, #84]	; (8006f2c <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame+0x64>)
 8006ed8:	f7ff fd12 	bl	8006900 <show_identifications>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8006edc:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8006ede:	9600      	str	r6, [sp, #0]
 8006ee0:	23e6      	movs	r3, #230	; 0xe6
 8006ee2:	f240 1211 	movw	r2, #273	; 0x111
 8006ee6:	21cd      	movs	r1, #205	; 0xcd
 8006ee8:	2055      	movs	r0, #85	; 0x55
 8006eea:	f001 f8c1 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8006eee:	9500      	str	r5, [sp, #0]
 8006ef0:	23e6      	movs	r3, #230	; 0xe6
 8006ef2:	f240 1211 	movw	r2, #273	; 0x111
 8006ef6:	21cd      	movs	r1, #205	; 0xcd
 8006ef8:	2055      	movs	r0, #85	; 0x55
 8006efa:	f001 f93b 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8006efe:	2302      	movs	r3, #2
 8006f00:	e9cd 6300 	strd	r6, r3, [sp]
 8006f04:	480a      	ldr	r0, [pc, #40]	; (8006f30 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame+0x68>)
 8006f06:	462b      	mov	r3, r5
 8006f08:	22d2      	movs	r2, #210	; 0xd2
 8006f0a:	215f      	movs	r1, #95	; 0x5f
 8006f0c:	f001 f9cc 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 8006f10:	23e6      	movs	r3, #230	; 0xe6
 8006f12:	f240 1211 	movw	r2, #273	; 0x111
 8006f16:	21cd      	movs	r1, #205	; 0xcd
 8006f18:	2055      	movs	r0, #85	; 0x55
 8006f1a:	f002 f867 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4620      	mov	r0, r4
}
 8006f22:	b002      	add	sp, #8
 8006f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8006f28:	f7fe b9b2 	b.w	8005290 <STM32_PLC_LCD_Show_Main_Frame>
 8006f2c:	08018909 	.word	0x08018909
 8006f30:	080179be 	.word	0x080179be

08006f34 <show_name_frame>:
	else
		*value = (uint32_t) number_value;
	return 1;
}

static void show_name_frame(char title[], struct Name *name, bool display_from_ecu_address){
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f38:	b090      	sub	sp, #64	; 0x40
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8006f3a:	250f      	movs	r5, #15
static void show_name_frame(char title[], struct Name *name, bool display_from_ecu_address){
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8006f40:	23ea      	movs	r3, #234	; 0xea
 8006f42:	2106      	movs	r1, #6
 8006f44:	2033      	movs	r0, #51	; 0x33
static void show_name_frame(char title[], struct Name *name, bool display_from_ecu_address){
 8006f46:	4617      	mov	r7, r2
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8006f48:	9500      	str	r5, [sp, #0]
 8006f4a:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8006f4e:	f001 f88f 	bl	8008070 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006f52:	f04f 0801 	mov.w	r8, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8006f56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006f5a:	f240 1209 	movw	r2, #265	; 0x109
 8006f5e:	211e      	movs	r1, #30
 8006f60:	2032      	movs	r0, #50	; 0x32
 8006f62:	f001 f8c1 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8006f66:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	2137      	movs	r1, #55	; 0x37
 8006f6e:	4630      	mov	r0, r6
 8006f70:	e9cd 5800 	strd	r5, r8, [sp]
 8006f74:	f001 f998 	bl	80082a8 <ILI9341_print_text>

	/* Write out identity number */
	char text[50];
	sprintf(text, "Identity:%lu", name->identity_number);
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	4966      	ldr	r1, [pc, #408]	; (8007114 <show_name_frame+0x1e0>)
 8006f7c:	a803      	add	r0, sp, #12
 8006f7e:	f00b fed1 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8006f82:	2223      	movs	r2, #35	; 0x23
 8006f84:	e9cd 5800 	strd	r5, r8, [sp]
 8006f88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006f8c:	2137      	movs	r1, #55	; 0x37
 8006f8e:	a803      	add	r0, sp, #12
 8006f90:	f001 f98a 	bl	80082a8 <ILI9341_print_text>

	/* Write out manufacturer code */
	if(name->manufacturer_code == MANUFACTURER_CODE_GRAYHILL)
 8006f94:	88a2      	ldrh	r2, [r4, #4]
 8006f96:	f5b2 7f93 	cmp.w	r2, #294	; 0x126
 8006f9a:	f040 808f 	bne.w	80070bc <show_name_frame+0x188>
		sprintf(text, "Manufacturer code: Gray Hill");
 8006f9e:	495e      	ldr	r1, [pc, #376]	; (8007118 <show_name_frame+0x1e4>)
	else if (name->manufacturer_code == MANUFACTURER_CODE_SONCEBOZ)
		sprintf(text, "Manufacturer code: SonceBoz");
 8006fa0:	a803      	add	r0, sp, #12
 8006fa2:	f00b fedf 	bl	8012d64 <strcpy>
	else
		sprintf(text, "Manufacturer code:%i", name->manufacturer_code);
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8006fa6:	250f      	movs	r5, #15
 8006fa8:	2601      	movs	r6, #1
 8006faa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006fae:	222d      	movs	r2, #45	; 0x2d
 8006fb0:	2137      	movs	r1, #55	; 0x37
 8006fb2:	a803      	add	r0, sp, #12
 8006fb4:	e9cd 5600 	strd	r5, r6, [sp]
 8006fb8:	f001 f976 	bl	80082a8 <ILI9341_print_text>

	/* Write out function instance */
	sprintf(text, "Function instance:%i", name->function_instance);
 8006fbc:	79a2      	ldrb	r2, [r4, #6]
 8006fbe:	4957      	ldr	r1, [pc, #348]	; (800711c <show_name_frame+0x1e8>)
 8006fc0:	a803      	add	r0, sp, #12
 8006fc2:	f00b feaf 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8006fc6:	2237      	movs	r2, #55	; 0x37
 8006fc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006fcc:	4611      	mov	r1, r2
 8006fce:	a803      	add	r0, sp, #12
 8006fd0:	e9cd 5600 	strd	r5, r6, [sp]
 8006fd4:	f001 f968 	bl	80082a8 <ILI9341_print_text>

	/* Write out ECU instance */
	sprintf(text, "ECU instance:%i", name->ECU_instance);
 8006fd8:	79e2      	ldrb	r2, [r4, #7]
 8006fda:	4951      	ldr	r1, [pc, #324]	; (8007120 <show_name_frame+0x1ec>)
 8006fdc:	a803      	add	r0, sp, #12
 8006fde:	f00b fea1 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8006fe2:	2241      	movs	r2, #65	; 0x41
 8006fe4:	e9cd 5600 	strd	r5, r6, [sp]
 8006fe8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006fec:	2137      	movs	r1, #55	; 0x37
 8006fee:	a803      	add	r0, sp, #12
 8006ff0:	f001 f95a 	bl	80082a8 <ILI9341_print_text>

	/* Write out function */
	if(name->function == FUNCTION_AUXILIARY_VALVES_CONTROL)
 8006ff4:	7a22      	ldrb	r2, [r4, #8]
 8006ff6:	2a81      	cmp	r2, #129	; 0x81
 8006ff8:	d16b      	bne.n	80070d2 <show_name_frame+0x19e>
		sprintf(text, "Function:Auxiliary Valves Control");
 8006ffa:	494a      	ldr	r1, [pc, #296]	; (8007124 <show_name_frame+0x1f0>)
	else if (name->function == FUNCTION_VDC_MODULE)
		sprintf(text, "Function:VDC Module");
 8006ffc:	a803      	add	r0, sp, #12
 8006ffe:	f00b feb1 	bl	8012d64 <strcpy>
	else
		sprintf(text, "Function:%i", name->function);
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8007002:	250f      	movs	r5, #15
 8007004:	2601      	movs	r6, #1
 8007006:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800700a:	224b      	movs	r2, #75	; 0x4b
 800700c:	2137      	movs	r1, #55	; 0x37
 800700e:	a803      	add	r0, sp, #12
 8007010:	e9cd 5600 	strd	r5, r6, [sp]
 8007014:	f001 f948 	bl	80082a8 <ILI9341_print_text>

	/* Write out vehicle system */
	sprintf(text, "Vehicle system:%i", name->vehicle_system);
 8007018:	7a62      	ldrb	r2, [r4, #9]
 800701a:	4943      	ldr	r1, [pc, #268]	; (8007128 <show_name_frame+0x1f4>)
 800701c:	a803      	add	r0, sp, #12
 800701e:	f00b fe81 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8007022:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007026:	e9cd 5600 	strd	r5, r6, [sp]
 800702a:	2255      	movs	r2, #85	; 0x55
 800702c:	2137      	movs	r1, #55	; 0x37
 800702e:	a803      	add	r0, sp, #12
 8007030:	f001 f93a 	bl	80082a8 <ILI9341_print_text>

	/* Write out vehicle system */
	if(name->arbitrary_address_capable > 0)
 8007034:	7aa3      	ldrb	r3, [r4, #10]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d054      	beq.n	80070e4 <show_name_frame+0x1b0>
		sprintf(text, "Arbitrary address capable:Yes");
 800703a:	493c      	ldr	r1, [pc, #240]	; (800712c <show_name_frame+0x1f8>)
	else
		sprintf(text, "Arbitrary address capable:No");
 800703c:	a803      	add	r0, sp, #12
 800703e:	f00b fe91 	bl	8012d64 <strcpy>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8007042:	230f      	movs	r3, #15
 8007044:	2201      	movs	r2, #1
 8007046:	e9cd 3200 	strd	r3, r2, [sp]
 800704a:	2137      	movs	r1, #55	; 0x37
 800704c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007050:	225f      	movs	r2, #95	; 0x5f
 8007052:	a803      	add	r0, sp, #12
 8007054:	f001 f928 	bl	80082a8 <ILI9341_print_text>

	/* Write out industry group */
	if(name->industry_group == INDUSTRY_GROUP_GLOBAL)
 8007058:	7ae3      	ldrb	r3, [r4, #11]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d144      	bne.n	80070e8 <show_name_frame+0x1b4>
		sprintf(text, "Industry group:Global");
 800705e:	4934      	ldr	r1, [pc, #208]	; (8007130 <show_name_frame+0x1fc>)
		sprintf(text, "Industry group:Marine");
	else if(name->industry_group == INDUSTRY_GROUP_ON_HIGHWAY)
		sprintf(text, "Industry group:On highway");
	else
		sprintf(text, "Industry group:None");
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8007060:	250f      	movs	r5, #15
 8007062:	2601      	movs	r6, #1
		sprintf(text, "Industry group:None");
 8007064:	a803      	add	r0, sp, #12
 8007066:	f00b fe7d 	bl	8012d64 <strcpy>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 800706a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800706e:	2269      	movs	r2, #105	; 0x69
 8007070:	2137      	movs	r1, #55	; 0x37
 8007072:	a803      	add	r0, sp, #12
 8007074:	e9cd 5600 	strd	r5, r6, [sp]
 8007078:	f001 f916 	bl	80082a8 <ILI9341_print_text>

	/* Write out vehicle system instance */
	sprintf(text, "Vehicle system instance:%i", name->vehicle_system_instance);
 800707c:	7b22      	ldrb	r2, [r4, #12]
 800707e:	492d      	ldr	r1, [pc, #180]	; (8007134 <show_name_frame+0x200>)
 8007080:	a803      	add	r0, sp, #12
 8007082:	f00b fe4f 	bl	8012d24 <siprintf>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8007086:	e9cd 5600 	strd	r5, r6, [sp]
 800708a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800708e:	2273      	movs	r2, #115	; 0x73
 8007090:	2137      	movs	r1, #55	; 0x37
 8007092:	a803      	add	r0, sp, #12
 8007094:	f001 f908 	bl	80082a8 <ILI9341_print_text>

	/* Write out source address */
	if(display_from_ecu_address){
 8007098:	b16f      	cbz	r7, 80070b6 <show_name_frame+0x182>
		sprintf(text, "Source address:%i", name->from_ecu_address);
 800709a:	7b62      	ldrb	r2, [r4, #13]
 800709c:	4926      	ldr	r1, [pc, #152]	; (8007138 <show_name_frame+0x204>)
 800709e:	a803      	add	r0, sp, #12
 80070a0:	f00b fe40 	bl	8012d24 <siprintf>
		ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 80070a4:	e9cd 5600 	strd	r5, r6, [sp]
 80070a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80070ac:	227d      	movs	r2, #125	; 0x7d
 80070ae:	2137      	movs	r1, #55	; 0x37
 80070b0:	a803      	add	r0, sp, #12
 80070b2:	f001 f8f9 	bl	80082a8 <ILI9341_print_text>
	}
}
 80070b6:	b010      	add	sp, #64	; 0x40
 80070b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if (name->manufacturer_code == MANUFACTURER_CODE_SONCEBOZ)
 80070bc:	f240 1347 	movw	r3, #327	; 0x147
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d101      	bne.n	80070c8 <show_name_frame+0x194>
		sprintf(text, "Manufacturer code: SonceBoz");
 80070c4:	491d      	ldr	r1, [pc, #116]	; (800713c <show_name_frame+0x208>)
 80070c6:	e76b      	b.n	8006fa0 <show_name_frame+0x6c>
		sprintf(text, "Manufacturer code:%i", name->manufacturer_code);
 80070c8:	491d      	ldr	r1, [pc, #116]	; (8007140 <show_name_frame+0x20c>)
 80070ca:	a803      	add	r0, sp, #12
 80070cc:	f00b fe2a 	bl	8012d24 <siprintf>
 80070d0:	e769      	b.n	8006fa6 <show_name_frame+0x72>
	else if (name->function == FUNCTION_VDC_MODULE)
 80070d2:	2a87      	cmp	r2, #135	; 0x87
 80070d4:	d101      	bne.n	80070da <show_name_frame+0x1a6>
		sprintf(text, "Function:VDC Module");
 80070d6:	491b      	ldr	r1, [pc, #108]	; (8007144 <show_name_frame+0x210>)
 80070d8:	e790      	b.n	8006ffc <show_name_frame+0xc8>
		sprintf(text, "Function:%i", name->function);
 80070da:	491b      	ldr	r1, [pc, #108]	; (8007148 <show_name_frame+0x214>)
 80070dc:	a803      	add	r0, sp, #12
 80070de:	f00b fe21 	bl	8012d24 <siprintf>
 80070e2:	e78e      	b.n	8007002 <show_name_frame+0xce>
		sprintf(text, "Arbitrary address capable:No");
 80070e4:	4919      	ldr	r1, [pc, #100]	; (800714c <show_name_frame+0x218>)
 80070e6:	e7a9      	b.n	800703c <show_name_frame+0x108>
	else if(name->industry_group == INDUSTRY_GROUP_CONSTRUCTION)
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d101      	bne.n	80070f0 <show_name_frame+0x1bc>
		sprintf(text, "Industry group:Construction");
 80070ec:	4918      	ldr	r1, [pc, #96]	; (8007150 <show_name_frame+0x21c>)
 80070ee:	e7b7      	b.n	8007060 <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_AGRICULTURAL_AND_FORESTRY)
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d101      	bne.n	80070f8 <show_name_frame+0x1c4>
		sprintf(text, "Industry group:Agricultural and forestry");
 80070f4:	4917      	ldr	r1, [pc, #92]	; (8007154 <show_name_frame+0x220>)
 80070f6:	e7b3      	b.n	8007060 <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_INDUSTRIAL_CONTROL_PROCESS)
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	d101      	bne.n	8007100 <show_name_frame+0x1cc>
		sprintf(text, "Industry group:Industrial control process");
 80070fc:	4916      	ldr	r1, [pc, #88]	; (8007158 <show_name_frame+0x224>)
 80070fe:	e7af      	b.n	8007060 <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_MARINE)
 8007100:	2b04      	cmp	r3, #4
 8007102:	d101      	bne.n	8007108 <show_name_frame+0x1d4>
		sprintf(text, "Industry group:Marine");
 8007104:	4915      	ldr	r1, [pc, #84]	; (800715c <show_name_frame+0x228>)
 8007106:	e7ab      	b.n	8007060 <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_ON_HIGHWAY)
 8007108:	2b01      	cmp	r3, #1
		sprintf(text, "Industry group:On highway");
 800710a:	bf0c      	ite	eq
 800710c:	4914      	ldreq	r1, [pc, #80]	; (8007160 <show_name_frame+0x22c>)
		sprintf(text, "Industry group:None");
 800710e:	4915      	ldrne	r1, [pc, #84]	; (8007164 <show_name_frame+0x230>)
 8007110:	e7a6      	b.n	8007060 <show_name_frame+0x12c>
 8007112:	bf00      	nop
 8007114:	08018157 	.word	0x08018157
 8007118:	08018164 	.word	0x08018164
 800711c:	080181b2 	.word	0x080181b2
 8007120:	080181c7 	.word	0x080181c7
 8007124:	080181d7 	.word	0x080181d7
 8007128:	08018219 	.word	0x08018219
 800712c:	0801822b 	.word	0x0801822b
 8007130:	08018266 	.word	0x08018266
 8007134:	0801832f 	.word	0x0801832f
 8007138:	08018745 	.word	0x08018745
 800713c:	08018181 	.word	0x08018181
 8007140:	0801819d 	.word	0x0801819d
 8007144:	080181f9 	.word	0x080181f9
 8007148:	0801820d 	.word	0x0801820d
 800714c:	08018249 	.word	0x08018249
 8007150:	0801827c 	.word	0x0801827c
 8007154:	08018298 	.word	0x08018298
 8007158:	080182c1 	.word	0x080182c1
 800715c:	080182eb 	.word	0x080182eb
 8007160:	08018301 	.word	0x08018301
 8007164:	0801831b 	.word	0x0801831b

08007168 <show_numpad_question>:
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 8007168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800716a:	460f      	mov	r7, r1
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 800716c:	2100      	movs	r1, #0
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 800716e:	4616      	mov	r6, r2
 8007170:	461d      	mov	r5, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 8007172:	aa01      	add	r2, sp, #4
 8007174:	4603      	mov	r3, r0
 8007176:	4608      	mov	r0, r1
 8007178:	f000 fb14 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 800717c:	4604      	mov	r4, r0
 800717e:	b930      	cbnz	r0, 800718e <show_numpad_question+0x26>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8007180:	4601      	mov	r1, r0
 8007182:	4638      	mov	r0, r7
 8007184:	f7fe f884 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 8007188:	4620      	mov	r0, r4
 800718a:	b003      	add	sp, #12
 800718c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(number_value < 0)
 800718e:	eddd 7a01 	vldr	s15, [sp, #4]
 8007192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719a:	d503      	bpl.n	80071a4 <show_numpad_question+0x3c>
		*value = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	602b      	str	r3, [r5, #0]
	return 1;
 80071a0:	2401      	movs	r4, #1
 80071a2:	e7f1      	b.n	8007188 <show_numpad_question+0x20>
	else if(number_value > max_value)
 80071a4:	ee07 6a10 	vmov	s14, r6
 80071a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80071ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*value = (uint32_t) number_value;
 80071b4:	bfd6      	itet	le
 80071b6:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		*value = max_value;
 80071ba:	602e      	strgt	r6, [r5, #0]
		*value = (uint32_t) number_value;
 80071bc:	edc5 7a00 	vstrle	s15, [r5]
 80071c0:	e7ee      	b.n	80071a0 <show_numpad_question+0x38>
	...

080071c4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 80071c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c6:	b0b3      	sub	sp, #204	; 0xcc
	show_name_frame("This ECU name", &j1939->this_name, false);
 80071c8:	2200      	movs	r2, #0
	ILI9341_fill_rect(80, 195, 285, 220, COLOR_GREEN);
 80071ca:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 80071ce:	4605      	mov	r5, r0
 80071d0:	460c      	mov	r4, r1
	show_name_frame("This ECU name", &j1939->this_name, false);
 80071d2:	f500 612d 	add.w	r1, r0, #2768	; 0xad0
 80071d6:	4866      	ldr	r0, [pc, #408]	; (8007370 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1ac>)
 80071d8:	f7ff feac 	bl	8006f34 <show_name_frame>
	ILI9341_hollow_rect(80, 195, 285, 220, COLOR_BLACK);
 80071dc:	2600      	movs	r6, #0
	ILI9341_fill_rect(80, 195, 285, 220, COLOR_GREEN);
 80071de:	23dc      	movs	r3, #220	; 0xdc
 80071e0:	f240 121d 	movw	r2, #285	; 0x11d
 80071e4:	21c3      	movs	r1, #195	; 0xc3
 80071e6:	2050      	movs	r0, #80	; 0x50
 80071e8:	9700      	str	r7, [sp, #0]
 80071ea:	f000 ff41 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(80, 195, 285, 220, COLOR_BLACK);
 80071ee:	23dc      	movs	r3, #220	; 0xdc
 80071f0:	f240 121d 	movw	r2, #285	; 0x11d
 80071f4:	21c3      	movs	r1, #195	; 0xc3
 80071f6:	2050      	movs	r0, #80	; 0x50
 80071f8:	9600      	str	r6, [sp, #0]
 80071fa:	f000 ffbb 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Set the ECU NAME", 87, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80071fe:	2302      	movs	r3, #2
 8007200:	e9cd 7300 	strd	r7, r3, [sp]
 8007204:	485b      	ldr	r0, [pc, #364]	; (8007374 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1b0>)
 8007206:	4633      	mov	r3, r6
 8007208:	22c8      	movs	r2, #200	; 0xc8
 800720a:	2157      	movs	r1, #87	; 0x57
 800720c:	f001 f84c 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(80, 195, 285, 220);
 8007210:	21c3      	movs	r1, #195	; 0xc3
 8007212:	23dc      	movs	r3, #220	; 0xdc
 8007214:	f240 121d 	movw	r2, #285	; 0x11d
 8007218:	2050      	movs	r0, #80	; 0x50
 800721a:	f001 fee7 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set the NAME?") == 0) {
 800721e:	4856      	ldr	r0, [pc, #344]	; (8007378 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1b4>)
 8007220:	f7fc faea 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8007224:	4601      	mov	r1, r0
 8007226:	b920      	cbnz	r0, 8007232 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6e>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8007228:	4620      	mov	r0, r4
 800722a:	f7fe f831 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 800722e:	b033      	add	sp, #204	; 0xcc
 8007230:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(show_numpad_question("Enter identity between 0 and 2097151", frame_id, 2097151, &identity_number) == 0)
 8007232:	4a52      	ldr	r2, [pc, #328]	; (800737c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1b8>)
 8007234:	4852      	ldr	r0, [pc, #328]	; (8007380 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1bc>)
 8007236:	ab10      	add	r3, sp, #64	; 0x40
 8007238:	4621      	mov	r1, r4
 800723a:	f7ff ff95 	bl	8007168 <show_numpad_question>
 800723e:	2800      	cmp	r0, #0
 8007240:	d0f5      	beq.n	800722e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6a>
	if(show_numpad_question("Enter manufacturer code between 0 and 2047", frame_id, 2047, &manufacturer_code) == 0)
 8007242:	4850      	ldr	r0, [pc, #320]	; (8007384 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1c0>)
 8007244:	ab11      	add	r3, sp, #68	; 0x44
 8007246:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800724a:	4621      	mov	r1, r4
 800724c:	f7ff ff8c 	bl	8007168 <show_numpad_question>
 8007250:	2800      	cmp	r0, #0
 8007252:	d0ec      	beq.n	800722e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6a>
	if(show_numpad_question("Enter function instance between 0 and 31", frame_id, 31, &function_instance) == 0)
 8007254:	484c      	ldr	r0, [pc, #304]	; (8007388 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1c4>)
 8007256:	ab12      	add	r3, sp, #72	; 0x48
 8007258:	221f      	movs	r2, #31
 800725a:	4621      	mov	r1, r4
 800725c:	f7ff ff84 	bl	8007168 <show_numpad_question>
 8007260:	2800      	cmp	r0, #0
 8007262:	d0e4      	beq.n	800722e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6a>
	if(show_numpad_question("Enter ECU instance between 0 and 7", frame_id, 7, &ECU_instance) == 0)
 8007264:	4849      	ldr	r0, [pc, #292]	; (800738c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1c8>)
 8007266:	ab13      	add	r3, sp, #76	; 0x4c
 8007268:	2207      	movs	r2, #7
 800726a:	4621      	mov	r1, r4
 800726c:	f7ff ff7c 	bl	8007168 <show_numpad_question>
 8007270:	2800      	cmp	r0, #0
 8007272:	d0dc      	beq.n	800722e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6a>
	if(show_numpad_question("Enter function between 0 and 255", frame_id, 255, &function) == 0)
 8007274:	4846      	ldr	r0, [pc, #280]	; (8007390 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1cc>)
 8007276:	ab14      	add	r3, sp, #80	; 0x50
 8007278:	22ff      	movs	r2, #255	; 0xff
 800727a:	4621      	mov	r1, r4
 800727c:	f7ff ff74 	bl	8007168 <show_numpad_question>
 8007280:	2800      	cmp	r0, #0
 8007282:	d0d4      	beq.n	800722e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6a>
	if(show_numpad_question("Enter vehicle system between 0 and 127", frame_id, 127, &vehicle_system) == 0)
 8007284:	4843      	ldr	r0, [pc, #268]	; (8007394 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1d0>)
 8007286:	ab15      	add	r3, sp, #84	; 0x54
 8007288:	227f      	movs	r2, #127	; 0x7f
 800728a:	4621      	mov	r1, r4
 800728c:	f7ff ff6c 	bl	8007168 <show_numpad_question>
 8007290:	2800      	cmp	r0, #0
 8007292:	d0cc      	beq.n	800722e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6a>
	if(show_numpad_question("Enter arbitrary address capable between 0 and 1", frame_id, 1, &arbitrary_address_capable) == 0)
 8007294:	4840      	ldr	r0, [pc, #256]	; (8007398 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1d4>)
 8007296:	ab16      	add	r3, sp, #88	; 0x58
 8007298:	2201      	movs	r2, #1
 800729a:	4621      	mov	r1, r4
 800729c:	f7ff ff64 	bl	8007168 <show_numpad_question>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d0c4      	beq.n	800722e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6a>
	if(show_numpad_question("Enter industry group between 0 and 7", frame_id, 7, &industry_group) == 0)
 80072a4:	483d      	ldr	r0, [pc, #244]	; (800739c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1d8>)
 80072a6:	ab17      	add	r3, sp, #92	; 0x5c
 80072a8:	2207      	movs	r2, #7
 80072aa:	4621      	mov	r1, r4
 80072ac:	f7ff ff5c 	bl	8007168 <show_numpad_question>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d0bc      	beq.n	800722e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6a>
	if(show_numpad_question("Enter vehicle system instance between 0 and 15", frame_id, 15, &vehicle_system_instance) == 0)
 80072b4:	483a      	ldr	r0, [pc, #232]	; (80073a0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1dc>)
 80072b6:	ab18      	add	r3, sp, #96	; 0x60
 80072b8:	220f      	movs	r2, #15
 80072ba:	4621      	mov	r1, r4
 80072bc:	f7ff ff54 	bl	8007168 <show_numpad_question>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d0b4      	beq.n	800722e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x6a>
	j1939->this_name.identity_number = identity_number;
 80072c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072c6:	f8c5 3ad0 	str.w	r3, [r5, #2768]	; 0xad0
	j1939->this_name.manufacturer_code = manufacturer_code;
 80072ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072cc:	f8a5 3ad4 	strh.w	r3, [r5, #2772]	; 0xad4
	j1939->this_name.function_instance = function_instance;
 80072d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072d2:	f885 3ad6 	strb.w	r3, [r5, #2774]	; 0xad6
	j1939->this_name.ECU_instance = ECU_instance;
 80072d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072d8:	f885 3ad7 	strb.w	r3, [r5, #2775]	; 0xad7
	j1939->this_name.function = function;
 80072dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072de:	f885 3ad8 	strb.w	r3, [r5, #2776]	; 0xad8
	j1939->this_name.vehicle_system = vehicle_system;
 80072e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072e4:	f885 3ad9 	strb.w	r3, [r5, #2777]	; 0xad9
	j1939->this_name.arbitrary_address_capable = arbitrary_address_capable;
 80072e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80072ea:	f885 3ada 	strb.w	r3, [r5, #2778]	; 0xada
	j1939->this_name.industry_group = industry_group;
 80072ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072f0:	f885 3adb 	strb.w	r3, [r5, #2779]	; 0xadb
	j1939->this_name.vehicle_system_instance = vehicle_system_instance;
 80072f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80072f6:	f885 3adc 	strb.w	r3, [r5, #2780]	; 0xadc
	if(STM32_PLC_SD_Mont_Card() != FR_OK){
 80072fa:	f7fa fe6f 	bl	8001fdc <STM32_PLC_SD_Mont_Card>
 80072fe:	4605      	mov	r5, r0
 8007300:	b120      	cbz	r0, 800730c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x148>
		STM32_PLC_LCD_Show_Information_OK_Dialog("Could not mount SD card");
 8007302:	4828      	ldr	r0, [pc, #160]	; (80073a4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1e0>)
 8007304:	f7fc fa06 	bl	8003714 <STM32_PLC_LCD_Show_Information_OK_Dialog>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8007308:	2100      	movs	r1, #0
 800730a:	e78d      	b.n	8007228 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x64>
	STM32_PLC_SD_Open_Existing_File_With_Write("NAME.TXT");
 800730c:	4826      	ldr	r0, [pc, #152]	; (80073a8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1e4>)
 800730e:	f7fa fe87 	bl	8002020 <STM32_PLC_SD_Open_Existing_File_With_Write>
	sprintf(text, "%lu%s%i%s%i%s%i%s%i%s%i%s%i%s%i%s%i", identity_number, DELIMITER, (uint16_t)manufacturer_code, DELIMITER, (uint8_t)function_instance, DELIMITER, (uint8_t)ECU_instance, DELIMITER, (uint8_t)function, DELIMITER, (uint8_t)vehicle_system, DELIMITER, (uint8_t)arbitrary_address_capable, DELIMITER, (uint8_t)industry_group, DELIMITER, (uint8_t)vehicle_system_instance);
 8007312:	4b26      	ldr	r3, [pc, #152]	; (80073ac <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1e8>)
 8007314:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8007318:	4925      	ldr	r1, [pc, #148]	; (80073b0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x1ec>)
 800731a:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800731e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8007322:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007326:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800732a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800732e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8007332:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8007336:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800733a:	e9cd 3205 	strd	r3, r2, [sp, #20]
 800733e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8007342:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007346:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800734a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800734e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8007352:	9200      	str	r2, [sp, #0]
 8007354:	a819      	add	r0, sp, #100	; 0x64
 8007356:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007358:	f00b fce4 	bl	8012d24 <siprintf>
	STM32_PLC_SD_Write_File(text);
 800735c:	a819      	add	r0, sp, #100	; 0x64
 800735e:	f7fa fea1 	bl	80020a4 <STM32_PLC_SD_Write_File>
	STM32_PLC_SD_Close_File();
 8007362:	f7fa fe65 	bl	8002030 <STM32_PLC_SD_Close_File>
	STM32_PLC_SD_Unmount_Card();
 8007366:	f7fa fe29 	bl	8001fbc <STM32_PLC_SD_Unmount_Card>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800736a:	4629      	mov	r1, r5
 800736c:	e75c      	b.n	8007228 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x64>
 800736e:	bf00      	nop
 8007370:	08018929 	.word	0x08018929
 8007374:	08018937 	.word	0x08018937
 8007378:	08018948 	.word	0x08018948
 800737c:	001fffff 	.word	0x001fffff
 8007380:	08017f82 	.word	0x08017f82
 8007384:	08017fa7 	.word	0x08017fa7
 8007388:	08017fd2 	.word	0x08017fd2
 800738c:	08017ffb 	.word	0x08017ffb
 8007390:	0801801e 	.word	0x0801801e
 8007394:	0801803f 	.word	0x0801803f
 8007398:	08018066 	.word	0x08018066
 800739c:	08018096 	.word	0x08018096
 80073a0:	080180bb 	.word	0x080180bb
 80073a4:	08016e92 	.word	0x08016e92
 80073a8:	08016e1b 	.word	0x08016e1b
 80073ac:	08016cb1 	.word	0x08016cb1
 80073b0:	08018965 	.word	0x08018965

080073b4 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 80073b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	show_name_frame("Other ECU name", &j1939->from_other_ecu_name, true);
 80073b6:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 80073b8:	460c      	mov	r4, r1
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80073ba:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	show_name_frame("Other ECU name", &j1939->from_other_ecu_name, true);
 80073be:	f500 7182 	add.w	r1, r0, #260	; 0x104
 80073c2:	4815      	ldr	r0, [pc, #84]	; (8007418 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame+0x64>)
 80073c4:	f7ff fdb6 	bl	8006f34 <show_name_frame>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80073c8:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80073ca:	9600      	str	r6, [sp, #0]
 80073cc:	23e6      	movs	r3, #230	; 0xe6
 80073ce:	f240 1211 	movw	r2, #273	; 0x111
 80073d2:	21cd      	movs	r1, #205	; 0xcd
 80073d4:	2055      	movs	r0, #85	; 0x55
 80073d6:	f000 fe4b 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80073da:	9500      	str	r5, [sp, #0]
 80073dc:	23e6      	movs	r3, #230	; 0xe6
 80073de:	f240 1211 	movw	r2, #273	; 0x111
 80073e2:	21cd      	movs	r1, #205	; 0xcd
 80073e4:	2055      	movs	r0, #85	; 0x55
 80073e6:	f000 fec5 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 80073ea:	2302      	movs	r3, #2
 80073ec:	e9cd 6300 	strd	r6, r3, [sp]
 80073f0:	480a      	ldr	r0, [pc, #40]	; (800741c <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame+0x68>)
 80073f2:	462b      	mov	r3, r5
 80073f4:	22d2      	movs	r2, #210	; 0xd2
 80073f6:	215f      	movs	r1, #95	; 0x5f
 80073f8:	f000 ff56 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 80073fc:	23e6      	movs	r3, #230	; 0xe6
 80073fe:	f240 1211 	movw	r2, #273	; 0x111
 8007402:	21cd      	movs	r1, #205	; 0xcd
 8007404:	2055      	movs	r0, #85	; 0x55
 8007406:	f001 fdf1 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800740a:	4629      	mov	r1, r5
 800740c:	4620      	mov	r0, r4
}
 800740e:	b002      	add	sp, #8
 8007410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8007414:	f7fd bf3c 	b.w	8005290 <STM32_PLC_LCD_Show_Main_Frame>
 8007418:	08018989 	.word	0x08018989
 800741c:	080179be 	.word	0x080179be

08007420 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame>:
#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"
#include "../../../Open SAE J1939/SAE J1939/SAE J1939 Enums/Enum_PGN.h"
#include "../../../Open SAE J1939/SAE J1939/SAE J1939-21 Transport Layer/Transport_Layer.h"

void STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(J1939 *j1939, uint8_t *frame_id) {
 8007420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007422:	b087      	sub	sp, #28
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8007424:	240f      	movs	r4, #15
 8007426:	9400      	str	r4, [sp, #0]
 8007428:	23ea      	movs	r3, #234	; 0xea
 800742a:	f44f 729d 	mov.w	r2, #314	; 0x13a
void STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(J1939 *j1939, uint8_t *frame_id) {
 800742e:	4607      	mov	r7, r0
 8007430:	460e      	mov	r6, r1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8007432:	2033      	movs	r0, #51	; 0x33
 8007434:	2106      	movs	r1, #6

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Do a PGN request", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8007436:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8007438:	f000 fe1a 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 800743c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007440:	f240 1209 	movw	r2, #265	; 0x109
 8007444:	211e      	movs	r1, #30
 8007446:	2032      	movs	r0, #50	; 0x32
 8007448:	f000 fe4e 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Do a PGN request", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800744c:	e9cd 4500 	strd	r4, r5, [sp]
 8007450:	484c      	ldr	r0, [pc, #304]	; (8007584 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x164>)
 8007452:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007456:	220a      	movs	r2, #10
 8007458:	2137      	movs	r1, #55	; 0x37
 800745a:	f000 ff25 	bl	80082a8 <ILI9341_print_text>

	/* Most commonly PGN requests */
	ILI9341_print_text("Commonly PGN numbers:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800745e:	e9cd 4500 	strd	r4, r5, [sp]
 8007462:	4849      	ldr	r0, [pc, #292]	; (8007588 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x168>)
 8007464:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007468:	2223      	movs	r2, #35	; 0x23
 800746a:	2137      	movs	r1, #55	; 0x37
 800746c:	f000 ff1c 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("Address claimed:60928 Software ID:65242", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8007470:	e9cd 4500 	strd	r4, r5, [sp]
 8007474:	4845      	ldr	r0, [pc, #276]	; (800758c <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x16c>)
 8007476:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800747a:	222d      	movs	r2, #45	; 0x2d
 800747c:	2137      	movs	r1, #55	; 0x37
 800747e:	f000 ff13 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("ECU ID:64965 Component ID:65295", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8007482:	2237      	movs	r2, #55	; 0x37
 8007484:	e9cd 4500 	strd	r4, r5, [sp]
 8007488:	4611      	mov	r1, r2
 800748a:	4841      	ldr	r0, [pc, #260]	; (8007590 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x170>)
 800748c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007490:	f000 ff0a 	bl	80082a8 <ILI9341_print_text>
	ILI9341_print_text("DM1:65226 DM2:65227 DM3:65228", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8007494:	e9cd 4500 	strd	r4, r5, [sp]
 8007498:	483e      	ldr	r0, [pc, #248]	; (8007594 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x174>)
 800749a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800749e:	2241      	movs	r2, #65	; 0x41
 80074a0:	2137      	movs	r1, #55	; 0x37

	/* Request button */
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 80074a2:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("DM1:65226 DM2:65227 DM3:65228", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80074a6:	f000 feff 	bl	80082a8 <ILI9341_print_text>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 80074aa:	2400      	movs	r4, #0
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 80074ac:	23dc      	movs	r3, #220	; 0xdc
 80074ae:	f240 1211 	movw	r2, #273	; 0x111
 80074b2:	21c3      	movs	r1, #195	; 0xc3
 80074b4:	2055      	movs	r0, #85	; 0x55
 80074b6:	9500      	str	r5, [sp, #0]
 80074b8:	f000 fdda 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 80074bc:	23dc      	movs	r3, #220	; 0xdc
 80074be:	f240 1211 	movw	r2, #273	; 0x111
 80074c2:	21c3      	movs	r1, #195	; 0xc3
 80074c4:	2055      	movs	r0, #85	; 0x55
 80074c6:	9400      	str	r4, [sp, #0]
 80074c8:	f000 fe54 	bl	8008174 <ILI9341_hollow_rect>
	ILI9341_print_text("Enter a request", 90, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80074cc:	2302      	movs	r3, #2
 80074ce:	e9cd 5300 	strd	r5, r3, [sp]
 80074d2:	4831      	ldr	r0, [pc, #196]	; (8007598 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x178>)
 80074d4:	4623      	mov	r3, r4
 80074d6:	22c8      	movs	r2, #200	; 0xc8
 80074d8:	215a      	movs	r1, #90	; 0x5a
 80074da:	f000 fee5 	bl	80082a8 <ILI9341_print_text>

	/* Logic for request button */
	STM32_PLC_LCD_Call_One_Button_Logic(85, 195, 273, 220);
 80074de:	23dc      	movs	r3, #220	; 0xdc
 80074e0:	f240 1211 	movw	r2, #273	; 0x111
 80074e4:	21c3      	movs	r1, #195	; 0xc3
 80074e6:	2055      	movs	r0, #85	; 0x55
 80074e8:	f001 fd80 	bl	8008fec <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to enter a PGN number?") == 0) {
 80074ec:	482b      	ldr	r0, [pc, #172]	; (800759c <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x17c>)
 80074ee:	f7fc f983 	bl	80037f8 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80074f2:	b928      	cbnz	r0, 8007500 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xe0>

	/* Enter the request */
	SAE_J1939_Send_Request(j1939, DA, PGN);

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80074f4:	2100      	movs	r1, #0
 80074f6:	4630      	mov	r0, r6
 80074f8:	f7fd feca 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
}
 80074fc:	b007      	add	sp, #28
 80074fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter PGN number between 0 and 65535") == 0) {
 8007500:	4b27      	ldr	r3, [pc, #156]	; (80075a0 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x180>)
 8007502:	aa05      	add	r2, sp, #20
 8007504:	4621      	mov	r1, r4
 8007506:	4620      	mov	r0, r4
 8007508:	f000 f94c 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 800750c:	2800      	cmp	r0, #0
 800750e:	d0f1      	beq.n	80074f4 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xd4>
	if(number_value < 0)
 8007510:	eddd 7a05 	vldr	s15, [sp, #20]
 8007514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751c:	d40d      	bmi.n	800753a <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x11a>
	else if(number_value > 0xFFFF)
 800751e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80075a4 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x184>
 8007522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		PGN = (uint16_t) number_value;
 800752a:	bfd7      	itett	le
 800752c:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		PGN = 0xFFFF;
 8007530:	f64f 74ff 	movwgt	r4, #65535	; 0xffff
		PGN = (uint16_t) number_value;
 8007534:	ee17 3a90 	vmovle	r3, s15
 8007538:	b29c      	uxthle	r4, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter destination address 0 to 255") == 0) {
 800753a:	2100      	movs	r1, #0
 800753c:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x188>)
 800753e:	aa05      	add	r2, sp, #20
 8007540:	4608      	mov	r0, r1
 8007542:	f000 f92f 	bl	80077a4 <STM32_PLC_LCD_Show_Numpad_Frame>
 8007546:	2800      	cmp	r0, #0
 8007548:	d0d4      	beq.n	80074f4 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xd4>
	if(number_value < 0)
 800754a:	eddd 7a05 	vldr	s15, [sp, #20]
 800754e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007556:	d411      	bmi.n	800757c <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x15c>
	else if(number_value > 0xFF)
 8007558:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80075ac <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x18c>
 800755c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007564:	dc0c      	bgt.n	8007580 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x160>
		DA = (uint8_t) number_value;
 8007566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756a:	edcd 7a03 	vstr	s15, [sp, #12]
 800756e:	f89d 100c 	ldrb.w	r1, [sp, #12]
	SAE_J1939_Send_Request(j1939, DA, PGN);
 8007572:	4622      	mov	r2, r4
 8007574:	4638      	mov	r0, r7
 8007576:	f7fb f9a6 	bl	80028c6 <SAE_J1939_Send_Request>
 800757a:	e7bb      	b.n	80074f4 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xd4>
		DA = 0;
 800757c:	2100      	movs	r1, #0
 800757e:	e7f8      	b.n	8007572 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x152>
		DA = 0xFF;
 8007580:	21ff      	movs	r1, #255	; 0xff
 8007582:	e7f6      	b.n	8007572 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x152>
 8007584:	0801784b 	.word	0x0801784b
 8007588:	08018998 	.word	0x08018998
 800758c:	080189ae 	.word	0x080189ae
 8007590:	080189d6 	.word	0x080189d6
 8007594:	080189f6 	.word	0x080189f6
 8007598:	08018a14 	.word	0x08018a14
 800759c:	08018a24 	.word	0x08018a24
 80075a0:	08018a47 	.word	0x08018a47
 80075a4:	477fff00 	.word	0x477fff00
 80075a8:	08018a6c 	.word	0x08018a6c
 80075ac:	437f0000 	.word	0x437f0000

080075b0 <STM32_PLC_LCD_Show_Keyboard_Frame>:
 */

#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Keyboard_Frame(char word[], char title[]) {
 80075b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	ed2d 8b02 	vpush	{d8}
 80075b8:	ee08 0a10 	vmov	s16, r0
 80075bc:	b087      	sub	sp, #28
	/* Begin with black page */
	ILI9341_fill_screen(COLOR_BLACK);
 80075be:	2000      	movs	r0, #0
uint8_t STM32_PLC_LCD_Show_Keyboard_Frame(char word[], char title[]) {
 80075c0:	460c      	mov	r4, r1
	ILI9341_fill_screen(COLOR_BLACK);
 80075c2:	f000 fd23 	bl	800800c <ILI9341_fill_screen>

	/* Print frame - large square */
	ILI9341_hollow_rect(5, 5, 315, 235, COLOR_GREEN);
 80075c6:	2105      	movs	r1, #5
 80075c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80075cc:	4608      	mov	r0, r1
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	f240 123b 	movw	r2, #315	; 0x13b
 80075d4:	23eb      	movs	r3, #235	; 0xeb
 80075d6:	f000 fdcd 	bl	8008174 <ILI9341_hollow_rect>

	/* Create gray, white square */
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 80075da:	f647 36ef 	movw	r6, #31727	; 0x7bef
 80075de:	2106      	movs	r1, #6
 80075e0:	4608      	mov	r0, r1
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 80075e2:	f64f 75ff 	movw	r5, #65535	; 0xffff
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 80075e6:	2337      	movs	r3, #55	; 0x37
 80075e8:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80075ec:	9600      	str	r6, [sp, #0]
 80075ee:	f000 fd3f 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 80075f2:	9500      	str	r5, [sp, #0]
 80075f4:	2332      	movs	r3, #50	; 0x32
 80075f6:	f44f 729a 	mov.w	r2, #308	; 0x134
 80075fa:	2118      	movs	r1, #24
 80075fc:	200c      	movs	r0, #12
 80075fe:	f000 fd37 	bl	8008070 <ILI9341_fill_rect>

	/* Set title */
	ILI9341_print_text(title, 12, 12, COLOR_WHITE, COLOR_DGRAY, 1);
 8007602:	2301      	movs	r3, #1
 8007604:	220c      	movs	r2, #12
 8007606:	e9cd 6300 	strd	r6, r3, [sp]
 800760a:	4611      	mov	r1, r2
 800760c:	462b      	mov	r3, r5
 800760e:	4620      	mov	r0, r4
 8007610:	2500      	movs	r5, #0
 8007612:	f000 fe49 	bl	80082a8 <ILI9341_print_text>

	/* Create buttons */
	uint16_t x = 0;
 8007616:	9503      	str	r5, [sp, #12]
	char letter[3];
	uint8_t keyboard_page = 6; /* We start at this */
	for (uint8_t i = 0; i < 5; i++) {
		x += 23;
		/* Upper numbers */
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	f103 0817 	add.w	r8, r3, #23
 800761e:	f103 093f 	add.w	r9, r3, #63	; 0x3f
 8007622:	fa0f f888 	sxth.w	r8, r8
 8007626:	fa0f f989 	sxth.w	r9, r9
 800762a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	464a      	mov	r2, r9
 8007632:	236e      	movs	r3, #110	; 0x6e
 8007634:	2146      	movs	r1, #70	; 0x46
 8007636:	4640      	mov	r0, r8
 8007638:	f000 fd1a 	bl	8008070 <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	f103 071c 	add.w	r7, r3, #28
 8007642:	f103 063a 	add.w	r6, r3, #58	; 0x3a
 8007646:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800764a:	b23f      	sxth	r7, r7
 800764c:	469a      	mov	sl, r3
 800764e:	b2b3      	uxth	r3, r6
 8007650:	b236      	sxth	r6, r6
 8007652:	9303      	str	r3, [sp, #12]
 8007654:	4632      	mov	r2, r6
 8007656:	2369      	movs	r3, #105	; 0x69
 8007658:	214b      	movs	r1, #75	; 0x4b
 800765a:	4638      	mov	r0, r7
 800765c:	9400      	str	r4, [sp, #0]
 800765e:	f000 fd07 	bl	8008070 <ILI9341_fill_rect>
		sprintf(letter, "%c", i + 32 + 5*keyboard_page); /* 32 is space char when i = 0 */
 8007662:	f10a 0b27 	add.w	fp, sl, #39	; 0x27
 8007666:	4949      	ldr	r1, [pc, #292]	; (800778c <STM32_PLC_LCD_Show_Keyboard_Frame+0x1dc>)
 8007668:	f105 023e 	add.w	r2, r5, #62	; 0x3e
 800766c:	a805      	add	r0, sp, #20
 800766e:	f00b fb59 	bl	8012d24 <siprintf>
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8007672:	fa0f fb8b 	sxth.w	fp, fp
 8007676:	2302      	movs	r3, #2
 8007678:	4659      	mov	r1, fp
 800767a:	e9cd 4300 	strd	r4, r3, [sp]
 800767e:	2253      	movs	r2, #83	; 0x53
 8007680:	2300      	movs	r3, #0
 8007682:	a805      	add	r0, sp, #20
 8007684:	f000 fe10 	bl	80082a8 <ILI9341_print_text>

		/* Lower numbers */
		ILI9341_fill_rect(x, 125, x + 40, 165, COLOR_DGRAY);
 8007688:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	464a      	mov	r2, r9
 8007690:	23a5      	movs	r3, #165	; 0xa5
 8007692:	217d      	movs	r1, #125	; 0x7d
 8007694:	4640      	mov	r0, r8
 8007696:	f000 fceb 	bl	8008070 <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 130, x + 35, 160, COLOR_WHITE);
 800769a:	23a0      	movs	r3, #160	; 0xa0
 800769c:	4632      	mov	r2, r6
 800769e:	2182      	movs	r1, #130	; 0x82
 80076a0:	4638      	mov	r0, r7
 80076a2:	9400      	str	r4, [sp, #0]
 80076a4:	f000 fce4 	bl	8008070 <ILI9341_fill_rect>
		sprintf(letter, "%c", i + 5 + 32 + 5*keyboard_page); /* 32 + 5 is % char when i = 0 */
 80076a8:	4938      	ldr	r1, [pc, #224]	; (800778c <STM32_PLC_LCD_Show_Keyboard_Frame+0x1dc>)
 80076aa:	f105 0243 	add.w	r2, r5, #67	; 0x43
 80076ae:	a805      	add	r0, sp, #20
 80076b0:	f00b fb38 	bl	8012d24 <siprintf>
		ILI9341_print_text(letter, x + 16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 80076b4:	2302      	movs	r3, #2
 80076b6:	4659      	mov	r1, fp
 80076b8:	e9cd 4300 	strd	r4, r3, [sp]
 80076bc:	228a      	movs	r2, #138	; 0x8a
 80076be:	2300      	movs	r3, #0
 80076c0:	a805      	add	r0, sp, #20
 80076c2:	f000 fdf1 	bl	80082a8 <ILI9341_print_text>

		/* This show the < and > buttons */
		if (i == 0) {
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 80076c6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	fa5f fb85 	uxtb.w	fp, r5
 80076d0:	23dc      	movs	r3, #220	; 0xdc
 80076d2:	464a      	mov	r2, r9
 80076d4:	21b4      	movs	r1, #180	; 0xb4
 80076d6:	4640      	mov	r0, r8
		if (i == 0) {
 80076d8:	b9fd      	cbnz	r5, 800771a <STM32_PLC_LCD_Show_Keyboard_Frame+0x16a>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 80076da:	f000 fcc9 	bl	8008070 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 80076de:	23d7      	movs	r3, #215	; 0xd7
 80076e0:	4632      	mov	r2, r6
 80076e2:	21b9      	movs	r1, #185	; 0xb9
 80076e4:	4638      	mov	r0, r7
 80076e6:	9400      	str	r4, [sp, #0]
 80076e8:	f000 fcc2 	bl	8008070 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
		}

		/* Give the buttons a text */
		if (i == 0) {
			ILI9341_print_text("<", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 80076ec:	2302      	movs	r3, #2
 80076ee:	f10a 0126 	add.w	r1, sl, #38	; 0x26
 80076f2:	4827      	ldr	r0, [pc, #156]	; (8007790 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1e0>)
 80076f4:	e9cd 4300 	strd	r4, r3, [sp]
 80076f8:	22c1      	movs	r2, #193	; 0xc1
 80076fa:	462b      	mov	r3, r5
 80076fc:	b209      	sxth	r1, r1
 80076fe:	3501      	adds	r5, #1
		} else if (i == 2) {
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 3) {
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 4) {
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8007700:	f000 fdd2 	bl	80082a8 <ILI9341_print_text>
	for (uint8_t i = 0; i < 5; i++) {
 8007704:	2d05      	cmp	r5, #5
 8007706:	d187      	bne.n	8007618 <STM32_PLC_LCD_Show_Keyboard_Frame+0x68>

		x += 35; /* Space between buttons */
	}

	/* Logic */
	return STM32_PLC_LCD_Call_Keyboard_Logic(word);
 8007708:	ee18 0a10 	vmov	r0, s16
 800770c:	f001 f918 	bl	8008940 <STM32_PLC_LCD_Call_Keyboard_Logic>
}
 8007710:	b007      	add	sp, #28
 8007712:	ecbd 8b02 	vpop	{d8}
 8007716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (i == 1) {
 800771a:	f1bb 0f01 	cmp.w	fp, #1
 800771e:	d120      	bne.n	8007762 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1b2>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8007720:	f000 fca6 	bl	8008070 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8007724:	23d7      	movs	r3, #215	; 0xd7
 8007726:	4632      	mov	r2, r6
 8007728:	21b9      	movs	r1, #185	; 0xb9
 800772a:	4638      	mov	r0, r7
 800772c:	9400      	str	r4, [sp, #0]
 800772e:	f000 fc9f 	bl	8008070 <ILI9341_fill_rect>
			ILI9341_print_text(">", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8007732:	2302      	movs	r3, #2
 8007734:	f10a 0126 	add.w	r1, sl, #38	; 0x26
 8007738:	e9cd 4300 	strd	r4, r3, [sp]
 800773c:	4815      	ldr	r0, [pc, #84]	; (8007794 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1e4>)
 800773e:	2300      	movs	r3, #0
 8007740:	22c1      	movs	r2, #193	; 0xc1
 8007742:	b209      	sxth	r1, r1
 8007744:	e7db      	b.n	80076fe <STM32_PLC_LCD_Show_Keyboard_Frame+0x14e>
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8007746:	2302      	movs	r3, #2
		} else if (i == 3) {
 8007748:	f1bb 0f03 	cmp.w	fp, #3
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 800774c:	f10a 0120 	add.w	r1, sl, #32
 8007750:	e9cd 4300 	strd	r4, r3, [sp]
 8007754:	bf0c      	ite	eq
 8007756:	4810      	ldreq	r0, [pc, #64]	; (8007798 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1e8>)
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8007758:	4810      	ldrne	r0, [pc, #64]	; (800779c <STM32_PLC_LCD_Show_Keyboard_Frame+0x1ec>)
 800775a:	b209      	sxth	r1, r1
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 800775c:	2300      	movs	r3, #0
 800775e:	22c1      	movs	r2, #193	; 0xc1
 8007760:	e7cd      	b.n	80076fe <STM32_PLC_LCD_Show_Keyboard_Frame+0x14e>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8007762:	f000 fc85 	bl	8008070 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8007766:	9400      	str	r4, [sp, #0]
 8007768:	23d7      	movs	r3, #215	; 0xd7
 800776a:	4632      	mov	r2, r6
 800776c:	21b9      	movs	r1, #185	; 0xb9
 800776e:	4638      	mov	r0, r7
 8007770:	f000 fc7e 	bl	8008070 <ILI9341_fill_rect>
		} else if (i == 2) {
 8007774:	2d02      	cmp	r5, #2
 8007776:	d1e6      	bne.n	8007746 <STM32_PLC_LCD_Show_Keyboard_Frame+0x196>
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8007778:	f10a 0126 	add.w	r1, sl, #38	; 0x26
 800777c:	e9cd 4500 	strd	r4, r5, [sp]
 8007780:	4807      	ldr	r0, [pc, #28]	; (80077a0 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1f0>)
 8007782:	2300      	movs	r3, #0
 8007784:	22c1      	movs	r2, #193	; 0xc1
 8007786:	b209      	sxth	r1, r1
 8007788:	e7b9      	b.n	80076fe <STM32_PLC_LCD_Show_Keyboard_Frame+0x14e>
 800778a:	bf00      	nop
 800778c:	08017796 	.word	0x08017796
 8007790:	08018a8f 	.word	0x08018a8f
 8007794:	0801779d 	.word	0x0801779d
 8007798:	08017799 	.word	0x08017799
 800779c:	08016e43 	.word	0x08016e43
 80077a0:	080179a0 	.word	0x080179a0

080077a4 <STM32_PLC_LCD_Show_Numpad_Frame>:
 */

#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Numpad_Frame(bool decimalbutton_show, bool minusbutton_show, float *number_value, char title[]) {
 80077a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	b089      	sub	sp, #36	; 0x24
 80077aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
	/* Begin with black page */
	ILI9341_fill_screen(COLOR_BLACK);
 80077ae:	2000      	movs	r0, #0
uint8_t STM32_PLC_LCD_Show_Numpad_Frame(bool decimalbutton_show, bool minusbutton_show, float *number_value, char title[]) {
 80077b0:	461c      	mov	r4, r3
 80077b2:	9205      	str	r2, [sp, #20]
	ILI9341_fill_screen(COLOR_BLACK);
 80077b4:	f000 fc2a 	bl	800800c <ILI9341_fill_screen>

	/* Print frame - large square */
	ILI9341_hollow_rect(5, 5, 315, 235, COLOR_GREEN);
 80077b8:	2105      	movs	r1, #5
 80077ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80077be:	4608      	mov	r0, r1
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	f240 123b 	movw	r2, #315	; 0x13b
 80077c6:	23eb      	movs	r3, #235	; 0xeb
 80077c8:	f000 fcd4 	bl	8008174 <ILI9341_hollow_rect>

	/* Create gray, white square */
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 80077cc:	f647 36ef 	movw	r6, #31727	; 0x7bef
 80077d0:	2106      	movs	r1, #6
 80077d2:	4608      	mov	r0, r1
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 80077d4:	f64f 75ff 	movw	r5, #65535	; 0xffff
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 80077d8:	2337      	movs	r3, #55	; 0x37
 80077da:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80077de:	9600      	str	r6, [sp, #0]
 80077e0:	f000 fc46 	bl	8008070 <ILI9341_fill_rect>
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 80077e4:	9500      	str	r5, [sp, #0]
 80077e6:	2332      	movs	r3, #50	; 0x32
 80077e8:	f44f 729a 	mov.w	r2, #308	; 0x134
 80077ec:	2118      	movs	r1, #24
 80077ee:	200c      	movs	r0, #12
 80077f0:	f000 fc3e 	bl	8008070 <ILI9341_fill_rect>

	/* Set title */
	ILI9341_print_text(title, 12, 12, COLOR_WHITE, COLOR_DGRAY, 1);
 80077f4:	2301      	movs	r3, #1
 80077f6:	220c      	movs	r2, #12
 80077f8:	e9cd 6300 	strd	r6, r3, [sp]
 80077fc:	4611      	mov	r1, r2
 80077fe:	462b      	mov	r3, r5
 8007800:	4620      	mov	r0, r4
 8007802:	2500      	movs	r5, #0
 8007804:	f000 fd50 	bl	80082a8 <ILI9341_print_text>

	/* Create buttons */
	uint16_t x = 0;
 8007808:	9502      	str	r5, [sp, #8]
	char number[3];
	for (uint8_t i = 0; i < 5; i++) {
		x += 23;
		/* Upper numbers */
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 800780a:	9b02      	ldr	r3, [sp, #8]
 800780c:	f103 0917 	add.w	r9, r3, #23
 8007810:	f103 0a3f 	add.w	sl, r3, #63	; 0x3f
 8007814:	fa0f f989 	sxth.w	r9, r9
 8007818:	fa0f fa8a 	sxth.w	sl, sl
 800781c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	4652      	mov	r2, sl
 8007824:	236e      	movs	r3, #110	; 0x6e
 8007826:	2146      	movs	r1, #70	; 0x46
 8007828:	4648      	mov	r0, r9
 800782a:	f000 fc21 	bl	8008070 <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 800782e:	9b02      	ldr	r3, [sp, #8]
 8007830:	f103 071c 	add.w	r7, r3, #28
 8007834:	f103 063a 	add.w	r6, r3, #58	; 0x3a
 8007838:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800783c:	b23f      	sxth	r7, r7
 800783e:	461c      	mov	r4, r3
 8007840:	b2b3      	uxth	r3, r6
 8007842:	b236      	sxth	r6, r6
 8007844:	9302      	str	r3, [sp, #8]
 8007846:	4632      	mov	r2, r6
 8007848:	2369      	movs	r3, #105	; 0x69
 800784a:	214b      	movs	r1, #75	; 0x4b
 800784c:	4638      	mov	r0, r7
 800784e:	f8cd 8000 	str.w	r8, [sp]
 8007852:	f000 fc0d 	bl	8008070 <ILI9341_fill_rect>
		sprintf(number, "%d", i);
 8007856:	f104 0b27 	add.w	fp, r4, #39	; 0x27
 800785a:	4964      	ldr	r1, [pc, #400]	; (80079ec <STM32_PLC_LCD_Show_Numpad_Frame+0x248>)
 800785c:	462a      	mov	r2, r5
 800785e:	a807      	add	r0, sp, #28
 8007860:	f00b fa60 	bl	8012d24 <siprintf>
		ILI9341_print_text(number, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8007864:	fa0f fb8b 	sxth.w	fp, fp
 8007868:	2302      	movs	r3, #2
 800786a:	4659      	mov	r1, fp
 800786c:	e9cd 8300 	strd	r8, r3, [sp]
 8007870:	2253      	movs	r2, #83	; 0x53
 8007872:	2300      	movs	r3, #0
 8007874:	a807      	add	r0, sp, #28
 8007876:	f000 fd17 	bl	80082a8 <ILI9341_print_text>

		/* Lower numbers */
		ILI9341_fill_rect(x, 125, x + 40, 165, COLOR_DGRAY);
 800787a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	4652      	mov	r2, sl
 8007882:	23a5      	movs	r3, #165	; 0xa5
 8007884:	217d      	movs	r1, #125	; 0x7d
 8007886:	4648      	mov	r0, r9
 8007888:	f000 fbf2 	bl	8008070 <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 130, x + 35, 160, COLOR_WHITE);
 800788c:	23a0      	movs	r3, #160	; 0xa0
 800788e:	4632      	mov	r2, r6
 8007890:	2182      	movs	r1, #130	; 0x82
 8007892:	4638      	mov	r0, r7
 8007894:	f8cd 8000 	str.w	r8, [sp]
 8007898:	f000 fbea 	bl	8008070 <ILI9341_fill_rect>
		sprintf(number, "%d", i + 5);
 800789c:	4953      	ldr	r1, [pc, #332]	; (80079ec <STM32_PLC_LCD_Show_Numpad_Frame+0x248>)
 800789e:	1d6a      	adds	r2, r5, #5
 80078a0:	a807      	add	r0, sp, #28
 80078a2:	f00b fa3f 	bl	8012d24 <siprintf>
		ILI9341_print_text(number, x + 16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 80078a6:	2302      	movs	r3, #2
 80078a8:	e9cd 8300 	strd	r8, r3, [sp]
 80078ac:	4659      	mov	r1, fp
 80078ae:	2300      	movs	r3, #0
 80078b0:	228a      	movs	r2, #138	; 0x8a
 80078b2:	a807      	add	r0, sp, #28
 80078b4:	f000 fcf8 	bl	80082a8 <ILI9341_print_text>

		/* This hide or show the buttons */
		if (i == 0 && minusbutton_show == true) {
 80078b8:	fa5f fb85 	uxtb.w	fp, r5
 80078bc:	bb75      	cbnz	r5, 800791c <STM32_PLC_LCD_Show_Numpad_Frame+0x178>
 80078be:	9b04      	ldr	r3, [sp, #16]
 80078c0:	b1fb      	cbz	r3, 8007902 <STM32_PLC_LCD_Show_Numpad_Frame+0x15e>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 80078c2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	4652      	mov	r2, sl
 80078ca:	23dc      	movs	r3, #220	; 0xdc
 80078cc:	21b4      	movs	r1, #180	; 0xb4
 80078ce:	4648      	mov	r0, r9
 80078d0:	f000 fbce 	bl	8008070 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 80078d4:	f8cd 8000 	str.w	r8, [sp]
 80078d8:	23d7      	movs	r3, #215	; 0xd7
 80078da:	4632      	mov	r2, r6
 80078dc:	21b9      	movs	r1, #185	; 0xb9
 80078de:	4638      	mov	r0, r7
 80078e0:	f000 fbc6 	bl	8008070 <ILI9341_fill_rect>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
		}

		/* Give the buttons a text */
		if (i == 0 && minusbutton_show == true) {
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	b163      	cbz	r3, 8007902 <STM32_PLC_LCD_Show_Numpad_Frame+0x15e>
			ILI9341_print_text("-", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 80078e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078ec:	f104 0126 	add.w	r1, r4, #38	; 0x26
 80078f0:	2602      	movs	r6, #2
 80078f2:	483f      	ldr	r0, [pc, #252]	; (80079f0 <STM32_PLC_LCD_Show_Numpad_Frame+0x24c>)
 80078f4:	e9cd 3600 	strd	r3, r6, [sp]
 80078f8:	22c1      	movs	r2, #193	; 0xc1
 80078fa:	2300      	movs	r3, #0
 80078fc:	b209      	sxth	r1, r1
		} else if (i == 2) {
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 3) {
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 4) {
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 80078fe:	f000 fcd3 	bl	80082a8 <ILI9341_print_text>
	for (uint8_t i = 0; i < 5; i++) {
 8007902:	3501      	adds	r5, #1
 8007904:	2d05      	cmp	r5, #5
 8007906:	d180      	bne.n	800780a <STM32_PLC_LCD_Show_Numpad_Frame+0x66>
		}
		x += 35; /* Space between buttons */
	}

	/* Logic */
	*number_value = 0;
 8007908:	9a05      	ldr	r2, [sp, #20]
 800790a:	2300      	movs	r3, #0
	return STM32_PLC_LCD_Call_Numpad_Logic(decimalbutton_show, minusbutton_show, number_value);
 800790c:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
	*number_value = 0;
 8007910:	6013      	str	r3, [r2, #0]
	return STM32_PLC_LCD_Call_Numpad_Logic(decimalbutton_show, minusbutton_show, number_value);
 8007912:	f001 fa25 	bl	8008d60 <STM32_PLC_LCD_Call_Numpad_Logic>
}
 8007916:	b009      	add	sp, #36	; 0x24
 8007918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (i == 1 && decimalbutton_show == true) {
 800791c:	f1bb 0f01 	cmp.w	fp, #1
 8007920:	d126      	bne.n	8007970 <STM32_PLC_LCD_Show_Numpad_Frame+0x1cc>
 8007922:	9b03      	ldr	r3, [sp, #12]
 8007924:	b183      	cbz	r3, 8007948 <STM32_PLC_LCD_Show_Numpad_Frame+0x1a4>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8007926:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	4652      	mov	r2, sl
 800792e:	23dc      	movs	r3, #220	; 0xdc
 8007930:	21b4      	movs	r1, #180	; 0xb4
 8007932:	4648      	mov	r0, r9
 8007934:	f000 fb9c 	bl	8008070 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8007938:	f8cd 8000 	str.w	r8, [sp]
 800793c:	23d7      	movs	r3, #215	; 0xd7
 800793e:	4632      	mov	r2, r6
 8007940:	21b9      	movs	r1, #185	; 0xb9
 8007942:	4638      	mov	r0, r7
 8007944:	f000 fb94 	bl	8008070 <ILI9341_fill_rect>
		if (i == 0 && minusbutton_show == true) {
 8007948:	2d00      	cmp	r5, #0
 800794a:	d0cb      	beq.n	80078e4 <STM32_PLC_LCD_Show_Numpad_Frame+0x140>
		} else if (i == 1 && decimalbutton_show == true) {
 800794c:	f1bb 0f01 	cmp.w	fp, #1
 8007950:	d121      	bne.n	8007996 <STM32_PLC_LCD_Show_Numpad_Frame+0x1f2>
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0d4      	beq.n	8007902 <STM32_PLC_LCD_Show_Numpad_Frame+0x15e>
			ILI9341_print_text(".", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8007958:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800795c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007960:	2402      	movs	r4, #2
 8007962:	e9cd 3400 	strd	r3, r4, [sp]
 8007966:	4823      	ldr	r0, [pc, #140]	; (80079f4 <STM32_PLC_LCD_Show_Numpad_Frame+0x250>)
 8007968:	2300      	movs	r3, #0
 800796a:	22c1      	movs	r2, #193	; 0xc1
 800796c:	b209      	sxth	r1, r1
 800796e:	e7c6      	b.n	80078fe <STM32_PLC_LCD_Show_Numpad_Frame+0x15a>
		if (i > 1) {
 8007970:	2d01      	cmp	r5, #1
 8007972:	d9e9      	bls.n	8007948 <STM32_PLC_LCD_Show_Numpad_Frame+0x1a4>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8007974:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	4652      	mov	r2, sl
 800797c:	23dc      	movs	r3, #220	; 0xdc
 800797e:	21b4      	movs	r1, #180	; 0xb4
 8007980:	4648      	mov	r0, r9
 8007982:	f000 fb75 	bl	8008070 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8007986:	f8cd 8000 	str.w	r8, [sp]
 800798a:	23d7      	movs	r3, #215	; 0xd7
 800798c:	4632      	mov	r2, r6
 800798e:	21b9      	movs	r1, #185	; 0xb9
 8007990:	4638      	mov	r0, r7
 8007992:	f000 fb6d 	bl	8008070 <ILI9341_fill_rect>
		} else if (i == 2) {
 8007996:	2d02      	cmp	r5, #2
 8007998:	d10a      	bne.n	80079b0 <STM32_PLC_LCD_Show_Numpad_Frame+0x20c>
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 800799a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800799e:	f104 0126 	add.w	r1, r4, #38	; 0x26
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	4814      	ldr	r0, [pc, #80]	; (80079f8 <STM32_PLC_LCD_Show_Numpad_Frame+0x254>)
 80079a6:	9501      	str	r5, [sp, #4]
 80079a8:	2300      	movs	r3, #0
 80079aa:	22c1      	movs	r2, #193	; 0xc1
 80079ac:	b209      	sxth	r1, r1
 80079ae:	e7a6      	b.n	80078fe <STM32_PLC_LCD_Show_Numpad_Frame+0x15a>
		} else if (i == 3) {
 80079b0:	f1bb 0f03 	cmp.w	fp, #3
 80079b4:	d10b      	bne.n	80079ce <STM32_PLC_LCD_Show_Numpad_Frame+0x22a>
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 80079b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079ba:	2002      	movs	r0, #2
 80079bc:	f104 0120 	add.w	r1, r4, #32
 80079c0:	e9cd 3000 	strd	r3, r0, [sp]
 80079c4:	22c1      	movs	r2, #193	; 0xc1
 80079c6:	480d      	ldr	r0, [pc, #52]	; (80079fc <STM32_PLC_LCD_Show_Numpad_Frame+0x258>)
 80079c8:	2300      	movs	r3, #0
 80079ca:	b209      	sxth	r1, r1
 80079cc:	e797      	b.n	80078fe <STM32_PLC_LCD_Show_Numpad_Frame+0x15a>
		} else if (i == 4) {
 80079ce:	f1bb 0f04 	cmp.w	fp, #4
 80079d2:	d196      	bne.n	8007902 <STM32_PLC_LCD_Show_Numpad_Frame+0x15e>
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 80079d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079d8:	2202      	movs	r2, #2
 80079da:	f104 0120 	add.w	r1, r4, #32
 80079de:	e9cd 3200 	strd	r3, r2, [sp]
 80079e2:	4807      	ldr	r0, [pc, #28]	; (8007a00 <STM32_PLC_LCD_Show_Numpad_Frame+0x25c>)
 80079e4:	2300      	movs	r3, #0
 80079e6:	22c1      	movs	r2, #193	; 0xc1
 80079e8:	b209      	sxth	r1, r1
 80079ea:	e788      	b.n	80078fe <STM32_PLC_LCD_Show_Numpad_Frame+0x15a>
 80079ec:	08018a91 	.word	0x08018a91
 80079f0:	0801779a 	.word	0x0801779a
 80079f4:	08018a94 	.word	0x08018a94
 80079f8:	080179a0 	.word	0x080179a0
 80079fc:	08017799 	.word	0x08017799
 8007a00:	08016e43 	.word	0x08016e43

08007a04 <add_spaces.constprop.0>:
	sprintf(text, "Date:%i-%i-%i Time:%i:%i:%i", 2000 + year, month, date, hours, minutes, seconds);
	add_spaces(43, text);
	ILI9341_print_text(text, 55, 165, COLOR_YELLOW, COLOR_NAVY, 1);
}

static void add_spaces(uint8_t length, char text[]){
 8007a04:	b510      	push	{r4, lr}
 8007a06:	4604      	mov	r4, r0
	/* This is for removing old values from LCD */
	for(uint8_t i = strlen(text); i < length; i++)
 8007a08:	f7f8 fbe2 	bl	80001d0 <strlen>
		text[i] = ' ';
 8007a0c:	2120      	movs	r1, #32
	for(uint8_t i = strlen(text); i < length; i++)
 8007a0e:	b2c3      	uxtb	r3, r0
 8007a10:	fa54 f280 	uxtab	r2, r4, r0
 8007a14:	2b2a      	cmp	r3, #42	; 0x2a
 8007a16:	d903      	bls.n	8007a20 <add_spaces.constprop.0+0x1c>
	text[length] = '\0';
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 8007a1e:	bd10      	pop	{r4, pc}
	for(uint8_t i = strlen(text); i < length; i++)
 8007a20:	3301      	adds	r3, #1
		text[i] = ' ';
 8007a22:	f802 1b01 	strb.w	r1, [r2], #1
	for(uint8_t i = strlen(text); i < length; i++)
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	e7f4      	b.n	8007a14 <add_spaces.constprop.0+0x10>
	...

08007a2c <STM32_PLC_LCD_Show_Plot_Frame>:
void STM32_PLC_LCD_Show_Plot_Frame() {
 8007a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	sprintf(text, "ADC0:%0.2f ADC1:%0.2f ADC2:%0.2f", STM32_PLC_Analog_Input_ADC_Get(0), STM32_PLC_Analog_Input_ADC_Get(1), STM32_PLC_Analog_Input_ADC_Get(2));
 8007a30:	2000      	movs	r0, #0
void STM32_PLC_LCD_Show_Plot_Frame() {
 8007a32:	b09a      	sub	sp, #104	; 0x68
	sprintf(text, "ADC0:%0.2f ADC1:%0.2f ADC2:%0.2f", STM32_PLC_Analog_Input_ADC_Get(0), STM32_PLC_Analog_Input_ADC_Get(1), STM32_PLC_Analog_Input_ADC_Get(2));
 8007a34:	f7f9 fa76 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007a38:	2001      	movs	r0, #1
 8007a3a:	ee10 6a10 	vmov	r6, s0
 8007a3e:	f7f9 fa71 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007a42:	2002      	movs	r0, #2
 8007a44:	ee10 4a10 	vmov	r4, s0
 8007a48:	f7f9 fa6c 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	ee10 5a10 	vmov	r5, s0
 8007a52:	f7f8 fd79 	bl	8000548 <__aeabi_f2d>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a60:	f7f8 fd72 	bl	8000548 <__aeabi_f2d>
 8007a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f7f8 fd6d 	bl	8000548 <__aeabi_f2d>
 8007a6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a72:	e9cd 0100 	strd	r0, r1, [sp]
 8007a76:	49d1      	ldr	r1, [pc, #836]	; (8007dbc <STM32_PLC_LCD_Show_Plot_Frame+0x390>)
 8007a78:	a80b      	add	r0, sp, #44	; 0x2c
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8007a7a:	2401      	movs	r4, #1
 8007a7c:	250f      	movs	r5, #15
	sprintf(text, "ADC0:%0.2f ADC1:%0.2f ADC2:%0.2f", STM32_PLC_Analog_Input_ADC_Get(0), STM32_PLC_Analog_Input_ADC_Get(1), STM32_PLC_Analog_Input_ADC_Get(2));
 8007a7e:	f00b f951 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007a82:	a80b      	add	r0, sp, #44	; 0x2c
 8007a84:	f7ff ffbe 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8007a88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007a8c:	2223      	movs	r2, #35	; 0x23
 8007a8e:	2137      	movs	r1, #55	; 0x37
 8007a90:	a80b      	add	r0, sp, #44	; 0x2c
 8007a92:	e9cd 5400 	strd	r5, r4, [sp]
 8007a96:	f000 fc07 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "ADC3:%0.2f ADC4:%0.2f ADC5:%0.2f", STM32_PLC_Analog_Input_ADC_Get(3), STM32_PLC_Analog_Input_ADC_Get(4), STM32_PLC_Analog_Input_ADC_Get(5));
 8007a9a:	2003      	movs	r0, #3
 8007a9c:	f7f9 fa42 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007aa0:	2004      	movs	r0, #4
 8007aa2:	ee10 8a10 	vmov	r8, s0
 8007aa6:	f7f9 fa3d 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007aaa:	2005      	movs	r0, #5
 8007aac:	ee10 6a10 	vmov	r6, s0
 8007ab0:	f7f9 fa38 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	ee10 7a10 	vmov	r7, s0
 8007aba:	f7f8 fd45 	bl	8000548 <__aeabi_f2d>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ac8:	f7f8 fd3e 	bl	8000548 <__aeabi_f2d>
 8007acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7f8 fd39 	bl	8000548 <__aeabi_f2d>
 8007ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ada:	e9cd 0100 	strd	r0, r1, [sp]
 8007ade:	49b8      	ldr	r1, [pc, #736]	; (8007dc0 <STM32_PLC_LCD_Show_Plot_Frame+0x394>)
 8007ae0:	a80b      	add	r0, sp, #44	; 0x2c
 8007ae2:	f00b f91f 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007ae6:	a80b      	add	r0, sp, #44	; 0x2c
 8007ae8:	f7ff ff8c 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8007aec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007af0:	222d      	movs	r2, #45	; 0x2d
 8007af2:	2137      	movs	r1, #55	; 0x37
 8007af4:	a80b      	add	r0, sp, #44	; 0x2c
 8007af6:	e9cd 5400 	strd	r5, r4, [sp]
 8007afa:	f000 fbd5 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "ADC6:%0.2f ADC5:%0.2f ADC8:%0.2f", STM32_PLC_Analog_Input_ADC_Get(6), STM32_PLC_Analog_Input_ADC_Get(5), STM32_PLC_Analog_Input_ADC_Get(8));
 8007afe:	2006      	movs	r0, #6
 8007b00:	f7f9 fa10 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007b04:	2005      	movs	r0, #5
 8007b06:	ee10 8a10 	vmov	r8, s0
 8007b0a:	f7f9 fa0b 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007b0e:	2008      	movs	r0, #8
 8007b10:	ee10 6a10 	vmov	r6, s0
 8007b14:	f7f9 fa06 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007b18:	4640      	mov	r0, r8
 8007b1a:	ee10 7a10 	vmov	r7, s0
 8007b1e:	f7f8 fd13 	bl	8000548 <__aeabi_f2d>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4638      	mov	r0, r7
 8007b28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b2c:	f7f8 fd0c 	bl	8000548 <__aeabi_f2d>
 8007b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7f8 fd07 	bl	8000548 <__aeabi_f2d>
 8007b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b3e:	e9cd 0100 	strd	r0, r1, [sp]
 8007b42:	49a0      	ldr	r1, [pc, #640]	; (8007dc4 <STM32_PLC_LCD_Show_Plot_Frame+0x398>)
 8007b44:	a80b      	add	r0, sp, #44	; 0x2c
 8007b46:	f00b f8ed 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007b4a:	a80b      	add	r0, sp, #44	; 0x2c
 8007b4c:	f7ff ff5a 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8007b50:	2237      	movs	r2, #55	; 0x37
 8007b52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007b56:	4611      	mov	r1, r2
 8007b58:	a80b      	add	r0, sp, #44	; 0x2c
 8007b5a:	e9cd 5400 	strd	r5, r4, [sp]
 8007b5e:	f000 fba3 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "ADC9:%0.2f ADC10:%0.2f ADC11:%0.2f", STM32_PLC_Analog_Input_ADC_Get(9), STM32_PLC_Analog_Input_ADC_Get(10), STM32_PLC_Analog_Input_ADC_Get(11));
 8007b62:	2009      	movs	r0, #9
 8007b64:	f7f9 f9de 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007b68:	200a      	movs	r0, #10
 8007b6a:	ee10 8a10 	vmov	r8, s0
 8007b6e:	f7f9 f9d9 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007b72:	200b      	movs	r0, #11
 8007b74:	ee10 6a10 	vmov	r6, s0
 8007b78:	f7f9 f9d4 	bl	8000f24 <STM32_PLC_Analog_Input_ADC_Get>
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	ee10 7a10 	vmov	r7, s0
 8007b82:	f7f8 fce1 	bl	8000548 <__aeabi_f2d>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b90:	f7f8 fcda 	bl	8000548 <__aeabi_f2d>
 8007b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7f8 fcd5 	bl	8000548 <__aeabi_f2d>
 8007b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ba2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ba6:	4988      	ldr	r1, [pc, #544]	; (8007dc8 <STM32_PLC_LCD_Show_Plot_Frame+0x39c>)
 8007ba8:	a80b      	add	r0, sp, #44	; 0x2c
 8007baa:	f00b f8bb 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007bae:	a80b      	add	r0, sp, #44	; 0x2c
 8007bb0:	f7ff ff28 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8007bb4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007bb8:	2241      	movs	r2, #65	; 0x41
 8007bba:	2137      	movs	r1, #55	; 0x37
 8007bbc:	a80b      	add	r0, sp, #44	; 0x2c
 8007bbe:	e9cd 5400 	strd	r5, r4, [sp]
 8007bc2:	f000 fb71 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "DADC0:%0.2f DADC1:%0.2f DADC2:%0.2f", STM32_PLC_Analog_Input_DADC_Get(0), STM32_PLC_Analog_Input_DADC_Get(1), STM32_PLC_Analog_Input_DADC_Get(2));
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	f7f9 f9dc 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
 8007bcc:	4620      	mov	r0, r4
 8007bce:	ee10 8a10 	vmov	r8, s0
 8007bd2:	f7f9 f9d7 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
 8007bd6:	2002      	movs	r0, #2
 8007bd8:	ee10 6a10 	vmov	r6, s0
 8007bdc:	f7f9 f9d2 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
 8007be0:	4640      	mov	r0, r8
 8007be2:	ee10 7a10 	vmov	r7, s0
 8007be6:	f7f8 fcaf 	bl	8000548 <__aeabi_f2d>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4638      	mov	r0, r7
 8007bf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bf4:	f7f8 fca8 	bl	8000548 <__aeabi_f2d>
 8007bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7f8 fca3 	bl	8000548 <__aeabi_f2d>
 8007c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c06:	e9cd 0100 	strd	r0, r1, [sp]
 8007c0a:	4970      	ldr	r1, [pc, #448]	; (8007dcc <STM32_PLC_LCD_Show_Plot_Frame+0x3a0>)
 8007c0c:	a80b      	add	r0, sp, #44	; 0x2c
 8007c0e:	f00b f889 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007c12:	a80b      	add	r0, sp, #44	; 0x2c
 8007c14:	f7ff fef6 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8007c18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007c1c:	224b      	movs	r2, #75	; 0x4b
 8007c1e:	2137      	movs	r1, #55	; 0x37
 8007c20:	a80b      	add	r0, sp, #44	; 0x2c
 8007c22:	e9cd 5400 	strd	r5, r4, [sp]
 8007c26:	f000 fb3f 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "DADC3:%0.2f DADC4:%0.2f", STM32_PLC_Analog_Input_DADC_Get(3), STM32_PLC_Analog_Input_DADC_Get(4));
 8007c2a:	2003      	movs	r0, #3
 8007c2c:	f7f9 f9aa 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
 8007c30:	2004      	movs	r0, #4
 8007c32:	ee10 7a10 	vmov	r7, s0
 8007c36:	f7f9 f9a5 	bl	8000f84 <STM32_PLC_Analog_Input_DADC_Get>
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	ee10 6a10 	vmov	r6, s0
 8007c40:	f7f8 fc82 	bl	8000548 <__aeabi_f2d>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4630      	mov	r0, r6
 8007c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c4e:	f7f8 fc7b 	bl	8000548 <__aeabi_f2d>
 8007c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c56:	e9cd 0100 	strd	r0, r1, [sp]
 8007c5a:	495d      	ldr	r1, [pc, #372]	; (8007dd0 <STM32_PLC_LCD_Show_Plot_Frame+0x3a4>)
 8007c5c:	a80b      	add	r0, sp, #44	; 0x2c
 8007c5e:	f00b f861 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007c62:	a80b      	add	r0, sp, #44	; 0x2c
 8007c64:	f7ff fece 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8007c68:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007c6c:	2255      	movs	r2, #85	; 0x55
 8007c6e:	2137      	movs	r1, #55	; 0x37
 8007c70:	a80b      	add	r0, sp, #44	; 0x2c
 8007c72:	e9cd 5400 	strd	r5, r4, [sp]
 8007c76:	f000 fb17 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "DI0:%i DI1:%i DI2:%i DI3:%i", STM32_PLC_Digital_Input_Get(0), STM32_PLC_Digital_Input_Get(1), STM32_PLC_Digital_Input_Get(2), STM32_PLC_Digital_Input_Get(3));
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f9 fade 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8007c80:	9007      	str	r0, [sp, #28]
 8007c82:	4620      	mov	r0, r4
 8007c84:	f7f9 fada 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8007c88:	9004      	str	r0, [sp, #16]
 8007c8a:	2002      	movs	r0, #2
 8007c8c:	f7f9 fad6 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8007c90:	4606      	mov	r6, r0
 8007c92:	2003      	movs	r0, #3
 8007c94:	f7f9 fad2 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8007c98:	9b04      	ldr	r3, [sp, #16]
 8007c9a:	9a07      	ldr	r2, [sp, #28]
 8007c9c:	494d      	ldr	r1, [pc, #308]	; (8007dd4 <STM32_PLC_LCD_Show_Plot_Frame+0x3a8>)
 8007c9e:	e9cd 6000 	strd	r6, r0, [sp]
 8007ca2:	a80b      	add	r0, sp, #44	; 0x2c
 8007ca4:	f00b f83e 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007ca8:	a80b      	add	r0, sp, #44	; 0x2c
 8007caa:	f7ff feab 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8007cae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007cb2:	225f      	movs	r2, #95	; 0x5f
 8007cb4:	2137      	movs	r1, #55	; 0x37
 8007cb6:	a80b      	add	r0, sp, #44	; 0x2c
 8007cb8:	e9cd 5400 	strd	r5, r4, [sp]
 8007cbc:	f000 faf4 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "DI4:%i DI5:%i DI6:%i DI7:%i", STM32_PLC_Digital_Input_Get(4), STM32_PLC_Digital_Input_Get(5), STM32_PLC_Digital_Input_Get(6), STM32_PLC_Digital_Input_Get(7));
 8007cc0:	2004      	movs	r0, #4
 8007cc2:	f7f9 fabb 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8007cc6:	9007      	str	r0, [sp, #28]
 8007cc8:	2005      	movs	r0, #5
 8007cca:	f7f9 fab7 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8007cce:	9004      	str	r0, [sp, #16]
 8007cd0:	2006      	movs	r0, #6
 8007cd2:	f7f9 fab3 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	2007      	movs	r0, #7
 8007cda:	f7f9 faaf 	bl	800123c <STM32_PLC_Digital_Input_Get>
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	9a07      	ldr	r2, [sp, #28]
 8007ce2:	493d      	ldr	r1, [pc, #244]	; (8007dd8 <STM32_PLC_LCD_Show_Plot_Frame+0x3ac>)
 8007ce4:	e9cd 6000 	strd	r6, r0, [sp]
 8007ce8:	a80b      	add	r0, sp, #44	; 0x2c
 8007cea:	f00b f81b 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007cee:	a80b      	add	r0, sp, #44	; 0x2c
 8007cf0:	f7ff fe88 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8007cf4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007cf8:	2269      	movs	r2, #105	; 0x69
 8007cfa:	2137      	movs	r1, #55	; 0x37
 8007cfc:	a80b      	add	r0, sp, #44	; 0x2c
 8007cfe:	e9cd 5400 	strd	r5, r4, [sp]
 8007d02:	f000 fad1 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "E0:%f E1:%f", STM32_PLC_Encoder_Get(0), STM32_PLC_Encoder_Get(1));
 8007d06:	2000      	movs	r0, #0
 8007d08:	f7f9 fb06 	bl	8001318 <STM32_PLC_Encoder_Get>
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	ee10 7a10 	vmov	r7, s0
 8007d12:	f7f9 fb01 	bl	8001318 <STM32_PLC_Encoder_Get>
 8007d16:	4638      	mov	r0, r7
 8007d18:	ee10 6a10 	vmov	r6, s0
 8007d1c:	f7f8 fc14 	bl	8000548 <__aeabi_f2d>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4630      	mov	r0, r6
 8007d26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d2a:	f7f8 fc0d 	bl	8000548 <__aeabi_f2d>
 8007d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d32:	e9cd 0100 	strd	r0, r1, [sp]
 8007d36:	4929      	ldr	r1, [pc, #164]	; (8007ddc <STM32_PLC_LCD_Show_Plot_Frame+0x3b0>)
 8007d38:	a80b      	add	r0, sp, #44	; 0x2c
 8007d3a:	f00a fff3 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007d3e:	a80b      	add	r0, sp, #44	; 0x2c
 8007d40:	f7ff fe60 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8007d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007d48:	2273      	movs	r2, #115	; 0x73
 8007d4a:	2137      	movs	r1, #55	; 0x37
 8007d4c:	a80b      	add	r0, sp, #44	; 0x2c
 8007d4e:	e9cd 5400 	strd	r5, r4, [sp]
 8007d52:	f000 faa9 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "IC0:%f IC1:%f", STM32_PLC_Input_Capture_Get(0), STM32_PLC_Input_Capture_Get(1));
 8007d56:	2000      	movs	r0, #0
 8007d58:	f7f9 fe52 	bl	8001a00 <STM32_PLC_Input_Capture_Get>
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	ee10 7a10 	vmov	r7, s0
 8007d62:	f7f9 fe4d 	bl	8001a00 <STM32_PLC_Input_Capture_Get>
 8007d66:	4638      	mov	r0, r7
 8007d68:	ee10 6a10 	vmov	r6, s0
 8007d6c:	f7f8 fbec 	bl	8000548 <__aeabi_f2d>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4630      	mov	r0, r6
 8007d76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d7a:	f7f8 fbe5 	bl	8000548 <__aeabi_f2d>
 8007d7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d82:	e9cd 0100 	strd	r0, r1, [sp]
 8007d86:	4916      	ldr	r1, [pc, #88]	; (8007de0 <STM32_PLC_LCD_Show_Plot_Frame+0x3b4>)
 8007d88:	a80b      	add	r0, sp, #44	; 0x2c
 8007d8a:	f00a ffcb 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007d8e:	a80b      	add	r0, sp, #44	; 0x2c
 8007d90:	f7ff fe38 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8007d94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007d98:	227d      	movs	r2, #125	; 0x7d
 8007d9a:	2137      	movs	r1, #55	; 0x37
 8007d9c:	a80b      	add	r0, sp, #44	; 0x2c
 8007d9e:	e9cd 5400 	strd	r5, r4, [sp]
 8007da2:	f000 fa81 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "DAC0:%i DAC1:%i DAC2:%i", STM32_PLC_Analog_Output_Get(0), STM32_PLC_Analog_Output_Get(1), STM32_PLC_Analog_Output_Get(2));
 8007da6:	2000      	movs	r0, #0
 8007da8:	f7f9 f974 	bl	8001094 <STM32_PLC_Analog_Output_Get>
 8007dac:	9007      	str	r0, [sp, #28]
 8007dae:	4620      	mov	r0, r4
 8007db0:	f7f9 f970 	bl	8001094 <STM32_PLC_Analog_Output_Get>
 8007db4:	9004      	str	r0, [sp, #16]
 8007db6:	2002      	movs	r0, #2
 8007db8:	e014      	b.n	8007de4 <STM32_PLC_LCD_Show_Plot_Frame+0x3b8>
 8007dba:	bf00      	nop
 8007dbc:	08018a96 	.word	0x08018a96
 8007dc0:	08018ab7 	.word	0x08018ab7
 8007dc4:	08018ad8 	.word	0x08018ad8
 8007dc8:	08018af9 	.word	0x08018af9
 8007dcc:	08018b1c 	.word	0x08018b1c
 8007dd0:	08018b40 	.word	0x08018b40
 8007dd4:	08018b58 	.word	0x08018b58
 8007dd8:	08018b74 	.word	0x08018b74
 8007ddc:	08018b90 	.word	0x08018b90
 8007de0:	08018b9c 	.word	0x08018b9c
 8007de4:	f7f9 f956 	bl	8001094 <STM32_PLC_Analog_Output_Get>
 8007de8:	9b04      	ldr	r3, [sp, #16]
 8007dea:	9a07      	ldr	r2, [sp, #28]
 8007dec:	4945      	ldr	r1, [pc, #276]	; (8007f04 <STM32_PLC_LCD_Show_Plot_Frame+0x4d8>)
 8007dee:	9000      	str	r0, [sp, #0]
 8007df0:	a80b      	add	r0, sp, #44	; 0x2c
 8007df2:	f00a ff97 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007df6:	a80b      	add	r0, sp, #44	; 0x2c
 8007df8:	f7ff fe04 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8007dfc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007e00:	2287      	movs	r2, #135	; 0x87
 8007e02:	2137      	movs	r1, #55	; 0x37
 8007e04:	a80b      	add	r0, sp, #44	; 0x2c
 8007e06:	e9cd 5400 	strd	r5, r4, [sp]
 8007e0a:	f000 fa4d 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "PWM0:%i PWM1:%i PWM2:%i PWM3:%i", STM32_PLC_PWM_Get(0), STM32_PLC_PWM_Get(1), STM32_PLC_PWM_Get(2), STM32_PLC_PWM_Get(3));
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f7f9 ff80 	bl	8001d14 <STM32_PLC_PWM_Get>
 8007e14:	9007      	str	r0, [sp, #28]
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7f9 ff7c 	bl	8001d14 <STM32_PLC_PWM_Get>
 8007e1c:	9004      	str	r0, [sp, #16]
 8007e1e:	2002      	movs	r0, #2
 8007e20:	f7f9 ff78 	bl	8001d14 <STM32_PLC_PWM_Get>
 8007e24:	4606      	mov	r6, r0
 8007e26:	2003      	movs	r0, #3
 8007e28:	f7f9 ff74 	bl	8001d14 <STM32_PLC_PWM_Get>
 8007e2c:	9b04      	ldr	r3, [sp, #16]
 8007e2e:	9a07      	ldr	r2, [sp, #28]
 8007e30:	4935      	ldr	r1, [pc, #212]	; (8007f08 <STM32_PLC_LCD_Show_Plot_Frame+0x4dc>)
 8007e32:	e9cd 6000 	strd	r6, r0, [sp]
 8007e36:	a80b      	add	r0, sp, #44	; 0x2c
 8007e38:	f00a ff74 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007e3c:	a80b      	add	r0, sp, #44	; 0x2c
 8007e3e:	f7ff fde1 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 8007e42:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007e46:	2291      	movs	r2, #145	; 0x91
 8007e48:	2137      	movs	r1, #55	; 0x37
 8007e4a:	a80b      	add	r0, sp, #44	; 0x2c
 8007e4c:	e9cd 5400 	strd	r5, r4, [sp]
 8007e50:	f000 fa2a 	bl	80082a8 <ILI9341_print_text>
	sprintf(text, "PWM4:%i PWM5:%i PWM6:%i PWM7:%i", STM32_PLC_PWM_Get(4), STM32_PLC_PWM_Get(5), STM32_PLC_PWM_Get(6), STM32_PLC_PWM_Get(7));
 8007e54:	2004      	movs	r0, #4
 8007e56:	f7f9 ff5d 	bl	8001d14 <STM32_PLC_PWM_Get>
 8007e5a:	9007      	str	r0, [sp, #28]
 8007e5c:	2005      	movs	r0, #5
 8007e5e:	f7f9 ff59 	bl	8001d14 <STM32_PLC_PWM_Get>
 8007e62:	9004      	str	r0, [sp, #16]
 8007e64:	2006      	movs	r0, #6
 8007e66:	f7f9 ff55 	bl	8001d14 <STM32_PLC_PWM_Get>
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	2007      	movs	r0, #7
 8007e6e:	f7f9 ff51 	bl	8001d14 <STM32_PLC_PWM_Get>
 8007e72:	9b04      	ldr	r3, [sp, #16]
 8007e74:	9a07      	ldr	r2, [sp, #28]
 8007e76:	4925      	ldr	r1, [pc, #148]	; (8007f0c <STM32_PLC_LCD_Show_Plot_Frame+0x4e0>)
 8007e78:	e9cd 6000 	strd	r6, r0, [sp]
 8007e7c:	a80b      	add	r0, sp, #44	; 0x2c
 8007e7e:	f00a ff51 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007e82:	a80b      	add	r0, sp, #44	; 0x2c
 8007e84:	f7ff fdbe 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 155, COLOR_YELLOW, COLOR_NAVY, 1);
 8007e88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007e8c:	a80b      	add	r0, sp, #44	; 0x2c
 8007e8e:	e9cd 5400 	strd	r5, r4, [sp]
 8007e92:	229b      	movs	r2, #155	; 0x9b
 8007e94:	2137      	movs	r1, #55	; 0x37
 8007e96:	f000 fa07 	bl	80082a8 <ILI9341_print_text>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 8007e9a:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8007e9e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 8007ea2:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8007ea6:	f7f9 ffa3 	bl	8001df0 <STM32_PLC_RTC_Get_Time>
	STM32_PLC_RTC_Get_Date(&date, &month, &year);
 8007eaa:	aa0a      	add	r2, sp, #40	; 0x28
 8007eac:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8007eb0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8007eb4:	f7f9 ff70 	bl	8001d98 <STM32_PLC_RTC_Get_Date>
	sprintf(text, "Date:%i-%i-%i Time:%i:%i:%i", 2000 + year, month, date, hours, minutes, seconds);
 8007eb8:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8007ec2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8007ec6:	9302      	str	r3, [sp, #8]
 8007ec8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8007ed2:	490f      	ldr	r1, [pc, #60]	; (8007f10 <STM32_PLC_LCD_Show_Plot_Frame+0x4e4>)
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8007eda:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007ede:	a80b      	add	r0, sp, #44	; 0x2c
 8007ee0:	f00a ff20 	bl	8012d24 <siprintf>
	add_spaces(43, text);
 8007ee4:	a80b      	add	r0, sp, #44	; 0x2c
 8007ee6:	f7ff fd8d 	bl	8007a04 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 165, COLOR_YELLOW, COLOR_NAVY, 1);
 8007eea:	e9cd 5400 	strd	r5, r4, [sp]
 8007eee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007ef2:	22a5      	movs	r2, #165	; 0xa5
 8007ef4:	2137      	movs	r1, #55	; 0x37
 8007ef6:	a80b      	add	r0, sp, #44	; 0x2c
 8007ef8:	f000 f9d6 	bl	80082a8 <ILI9341_print_text>
}
 8007efc:	b01a      	add	sp, #104	; 0x68
 8007efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f02:	bf00      	nop
 8007f04:	08018baa 	.word	0x08018baa
 8007f08:	08018bc2 	.word	0x08018bc2
 8007f0c:	08018be2 	.word	0x08018be2
 8007f10:	08017237 	.word	0x08017237

08007f14 <ILI9341_send_data>:

/* This is 240*320 divided by 8 and it's used for transferring data */
static uint8_t SPI_DATA[9600];

/* Write data to LCD with one byte */
void ILI9341_send_data(uint8_t data) {
 8007f14:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8007f16:	4c0b      	ldr	r4, [pc, #44]	; (8007f44 <ILI9341_send_data+0x30>)
void ILI9341_send_data(uint8_t data) {
 8007f18:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8007f1c:	89a1      	ldrh	r1, [r4, #12]
 8007f1e:	68a0      	ldr	r0, [r4, #8]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f003 f9d9 	bl	800b2d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd.lcdSpi, &data, 1, 5);
 8007f26:	2305      	movs	r3, #5
 8007f28:	f10d 0107 	add.w	r1, sp, #7
 8007f2c:	6860      	ldr	r0, [r4, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f005 fb46 	bl	800d5c0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 8007f34:	89a1      	ldrh	r1, [r4, #12]
 8007f36:	68a0      	ldr	r0, [r4, #8]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f003 f9cd 	bl	800b2d8 <HAL_GPIO_WritePin>
}
 8007f3e:	b002      	add	sp, #8
 8007f40:	bd10      	pop	{r4, pc}
 8007f42:	bf00      	nop
 8007f44:	20002cf8 	.word	0x20002cf8

08007f48 <ILI9341_send_data_array>:

/* Write data to LCD with array of bytes */
void ILI9341_send_data_array(uint8_t data[], uint16_t size) {
 8007f48:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8007f4a:	4c0a      	ldr	r4, [pc, #40]	; (8007f74 <ILI9341_send_data_array+0x2c>)
void ILI9341_send_data_array(uint8_t data[], uint16_t size) {
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8007f50:	68a0      	ldr	r0, [r4, #8]
 8007f52:	89a1      	ldrh	r1, [r4, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f003 f9bf 	bl	800b2d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd.lcdSpi, data, size, 100);
 8007f5a:	4632      	mov	r2, r6
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	6860      	ldr	r0, [r4, #4]
 8007f60:	2364      	movs	r3, #100	; 0x64
 8007f62:	f005 fb2d 	bl	800d5c0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 8007f66:	89a1      	ldrh	r1, [r4, #12]
 8007f68:	68a0      	ldr	r0, [r4, #8]
 8007f6a:	2201      	movs	r2, #1
}
 8007f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 8007f70:	f003 b9b2 	b.w	800b2d8 <HAL_GPIO_WritePin>
 8007f74:	20002cf8 	.word	0x20002cf8

08007f78 <ILI9341_send_command>:

/* Write Command to LCD */
void ILI9341_send_command(uint8_t com) {
 8007f78:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_RESET);
 8007f7a:	4c10      	ldr	r4, [pc, #64]	; (8007fbc <ILI9341_send_command+0x44>)
void ILI9341_send_command(uint8_t com) {
 8007f7c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_RESET);
 8007f80:	8aa1      	ldrh	r1, [r4, #20]
 8007f82:	6920      	ldr	r0, [r4, #16]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f003 f9a7 	bl	800b2d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8007f8a:	89a1      	ldrh	r1, [r4, #12]
 8007f8c:	68a0      	ldr	r0, [r4, #8]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f003 f9a2 	bl	800b2d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd.lcdSpi, &com, 1, 5);
 8007f94:	2305      	movs	r3, #5
 8007f96:	f10d 0107 	add.w	r1, sp, #7
 8007f9a:	6860      	ldr	r0, [r4, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f005 fb0f 	bl	800d5c0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 8007fa2:	89a1      	ldrh	r1, [r4, #12]
 8007fa4:	68a0      	ldr	r0, [r4, #8]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f003 f996 	bl	800b2d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 8007fac:	8aa1      	ldrh	r1, [r4, #20]
 8007fae:	6920      	ldr	r0, [r4, #16]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f003 f991 	bl	800b2d8 <HAL_GPIO_WritePin>
}
 8007fb6:	b002      	add	sp, #8
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	bf00      	nop
 8007fbc:	20002cf8 	.word	0x20002cf8

08007fc0 <ILI9341_set_cursor_position>:

/* Set cursor position */
static void ILI9341_set_cursor_position(int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 8007fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fc2:	4607      	mov	r7, r0
	ILI9341_send_command(ILI9341_COLUMN_ADDR);
 8007fc4:	202a      	movs	r0, #42	; 0x2a
static void ILI9341_set_cursor_position(int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 8007fc6:	4616      	mov	r6, r2
 8007fc8:	461c      	mov	r4, r3
 8007fca:	460d      	mov	r5, r1
	ILI9341_send_command(ILI9341_COLUMN_ADDR);
 8007fcc:	f7ff ffd4 	bl	8007f78 <ILI9341_send_command>
	uint8_t data[4] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
	ILI9341_send_data_array(data, 4);
 8007fd0:	2104      	movs	r1, #4
 8007fd2:	eb0d 0001 	add.w	r0, sp, r1
	uint8_t data[4] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 8007fd6:	ba7f      	rev16	r7, r7
 8007fd8:	ba76      	rev16	r6, r6
 8007fda:	f8ad 7004 	strh.w	r7, [sp, #4]
 8007fde:	f8ad 6006 	strh.w	r6, [sp, #6]
	ILI9341_send_data_array(data, 4);
 8007fe2:	f7ff ffb1 	bl	8007f48 <ILI9341_send_data_array>

	ILI9341_send_command(ILI9341_PAGE_ADDR);
 8007fe6:	202b      	movs	r0, #43	; 0x2b
 8007fe8:	f7ff ffc6 	bl	8007f78 <ILI9341_send_command>
	data[0] = y1 >> 8;
	data[1] = y1 & 0xFF;
	data[2] = y2 >> 8;
	data[3] = y2 & 0xFF;
	ILI9341_send_data_array(data, 4);
 8007fec:	2104      	movs	r1, #4
 8007fee:	eb0d 0001 	add.w	r0, sp, r1
	data[0] = y1 >> 8;
 8007ff2:	ba6d      	rev16	r5, r5
	data[2] = y2 >> 8;
 8007ff4:	ba64      	rev16	r4, r4
	data[0] = y1 >> 8;
 8007ff6:	f8ad 5004 	strh.w	r5, [sp, #4]
	data[2] = y2 >> 8;
 8007ffa:	f8ad 4006 	strh.w	r4, [sp, #6]
	ILI9341_send_data_array(data, 4);
 8007ffe:	f7ff ffa3 	bl	8007f48 <ILI9341_send_data_array>
	ILI9341_send_command(ILI9341_GRAM);
 8008002:	202c      	movs	r0, #44	; 0x2c
 8008004:	f7ff ffb8 	bl	8007f78 <ILI9341_send_command>
}
 8008008:	b003      	add	sp, #12
 800800a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800800c <ILI9341_fill_screen>:

	return pixels_added_into_data;
}

/* Fill the entire screen with a background color */
void ILI9341_fill_screen(uint16_t color) {
 800800c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t n = ILI9341_PIXEL_COUNT;
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 800800e:	4b16      	ldr	r3, [pc, #88]	; (8008068 <ILI9341_fill_screen+0x5c>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8008016:	2a01      	cmp	r2, #1
void ILI9341_fill_screen(uint16_t color) {
 8008018:	4604      	mov	r4, r0
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 800801a:	d11c      	bne.n	8008056 <ILI9341_fill_screen+0x4a>
		ILI9341_set_cursor_position(0, 0, ILI9341_WIDTH - 1, ILI9341_HEIGHT - 1);
 800801c:	f240 133f 	movw	r3, #319	; 0x13f
 8008020:	22ef      	movs	r2, #239	; 0xef
	} else if (lcd.rotationNum == 2 || lcd.rotationNum == 4) {
		ILI9341_set_cursor_position(0, 0, ILI9341_HEIGHT - 1, ILI9341_WIDTH - 1);
 8008022:	2100      	movs	r1, #0
 8008024:	4608      	mov	r0, r1
 8008026:	f7ff ffcb 	bl	8007fc0 <ILI9341_set_cursor_position>
	}
	uint8_t color_16_bit[2] = {color >> 8, color};
 800802a:	ba64      	rev16	r4, r4
		memcpy(data, pixel_data, 2);
 800802c:	4a0f      	ldr	r2, [pc, #60]	; (800806c <ILI9341_fill_screen+0x60>)
 800802e:	b2a4      	uxth	r4, r4
	uint8_t color_16_bit[2] = {color >> 8, color};
 8008030:	2300      	movs	r3, #0
		memcpy(data, pixel_data, 2);
 8008032:	529c      	strh	r4, [r3, r2]
	for(uint16_t i = 0; i < iterations; i++){
 8008034:	3302      	adds	r3, #2
 8008036:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800803a:	d1fa      	bne.n	8008032 <ILI9341_fill_screen+0x26>
	uint16_t size_of_SPI_DATA = sizeof(SPI_DATA);
	ILI9341_insert_color_data(SPI_DATA, size_of_SPI_DATA/2, color_16_bit);
	/* Begin with the first iterations. 2 times N pixels because it's 16-bit pixels, not 8-bit pixels */
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
	for(uint8_t i = 0; i < iterations; i++)
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 800803c:	4d0b      	ldr	r5, [pc, #44]	; (800806c <ILI9341_fill_screen+0x60>)
 800803e:	2420      	movs	r4, #32
 8008040:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8008044:	4628      	mov	r0, r5
 8008046:	3c01      	subs	r4, #1
 8008048:	f7ff ff7e 	bl	8007f48 <ILI9341_send_data_array>
	for(uint8_t i = 0; i < iterations; i++)
 800804c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008050:	d1f6      	bne.n	8008040 <ILI9341_fill_screen+0x34>

	/* Send the remaining */
	uint16_t remaning_bytes = (2*n) % (size_of_SPI_DATA/2);
	if(remaning_bytes > 0)
		ILI9341_send_data_array(SPI_DATA, remaning_bytes);
}
 8008052:	b003      	add	sp, #12
 8008054:	bd30      	pop	{r4, r5, pc}
	} else if (lcd.rotationNum == 2 || lcd.rotationNum == 4) {
 8008056:	2b02      	cmp	r3, #2
 8008058:	d001      	beq.n	800805e <ILI9341_fill_screen+0x52>
 800805a:	2b04      	cmp	r3, #4
 800805c:	d1e5      	bne.n	800802a <ILI9341_fill_screen+0x1e>
		ILI9341_set_cursor_position(0, 0, ILI9341_HEIGHT - 1, ILI9341_WIDTH - 1);
 800805e:	23ef      	movs	r3, #239	; 0xef
 8008060:	f240 123f 	movw	r2, #319	; 0x13f
 8008064:	e7dd      	b.n	8008022 <ILI9341_fill_screen+0x16>
 8008066:	bf00      	nop
 8008068:	20002cf8 	.word	0x20002cf8
 800806c:	200004fc 	.word	0x200004fc

08008070 <ILI9341_fill_rect>:

/* Create filled rectangle */
void ILI9341_fill_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8008070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 8008072:	1c5d      	adds	r5, r3, #1
 8008074:	1a17      	subs	r7, r2, r0
 8008076:	1a6c      	subs	r4, r5, r1
void ILI9341_fill_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8008078:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 800807c:	fb07 4404 	mla	r4, r7, r4, r4
	if (n > ILI9341_PIXEL_COUNT)
 8008080:	f5b4 3f96 	cmp.w	r4, #76800	; 0x12c00
 8008084:	bf28      	it	cs
 8008086:	f44f 3496 	movcs.w	r4, #76800	; 0x12c00
		n = ILI9341_PIXEL_COUNT;
	ILI9341_set_cursor_position(x0, y0, x1, y1);
	uint8_t color_16_bit[2] = {color >> 8, color};
 800808a:	ba76      	rev16	r6, r6
	ILI9341_set_cursor_position(x0, y0, x1, y1);
 800808c:	f7ff ff98 	bl	8007fc0 <ILI9341_set_cursor_position>
		memcpy(data, pixel_data, 2);
 8008090:	4a14      	ldr	r2, [pc, #80]	; (80080e4 <ILI9341_fill_rect+0x74>)
 8008092:	b2b6      	uxth	r6, r6
	uint8_t color_16_bit[2] = {color >> 8, color};
 8008094:	2300      	movs	r3, #0
		memcpy(data, pixel_data, 2);
 8008096:	529e      	strh	r6, [r3, r2]
	for(uint16_t i = 0; i < iterations; i++){
 8008098:	3302      	adds	r3, #2
 800809a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800809e:	d1fa      	bne.n	8008096 <ILI9341_fill_rect+0x26>
	uint16_t size_of_SPI_DATA = sizeof(SPI_DATA);
	ILI9341_insert_color_data(SPI_DATA, size_of_SPI_DATA/2, color_16_bit);
	/* Begin with the first iterations. 2 times N pixels because it's 16-bit pixels, not 8-bit pixels */
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
	for(uint8_t i = 0; i < iterations; i++)
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 80080a0:	4f10      	ldr	r7, [pc, #64]	; (80080e4 <ILI9341_fill_rect+0x74>)
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
 80080a2:	0064      	lsls	r4, r4, #1
 80080a4:	f44f 5596 	mov.w	r5, #4800	; 0x12c0
	for(uint8_t i = 0; i < iterations; i++)
 80080a8:	2600      	movs	r6, #0
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
 80080aa:	fbb4 f5f5 	udiv	r5, r4, r5
 80080ae:	b2ed      	uxtb	r5, r5
	for(uint8_t i = 0; i < iterations; i++)
 80080b0:	b2f3      	uxtb	r3, r6
 80080b2:	429d      	cmp	r5, r3
 80080b4:	d80d      	bhi.n	80080d2 <ILI9341_fill_rect+0x62>

	/* Send the remaining */
	uint16_t remaning_bytes = (2*n) % (size_of_SPI_DATA/2);
 80080b6:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80080ba:	fbb4 f1f3 	udiv	r1, r4, r3
 80080be:	fb03 4111 	mls	r1, r3, r1, r4
	if(remaning_bytes > 0)
 80080c2:	b169      	cbz	r1, 80080e0 <ILI9341_fill_rect+0x70>
		ILI9341_send_data_array(SPI_DATA, remaning_bytes);
 80080c4:	4807      	ldr	r0, [pc, #28]	; (80080e4 <ILI9341_fill_rect+0x74>)
 80080c6:	b289      	uxth	r1, r1
}
 80080c8:	b003      	add	sp, #12
 80080ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		ILI9341_send_data_array(SPI_DATA, remaning_bytes);
 80080ce:	f7ff bf3b 	b.w	8007f48 <ILI9341_send_data_array>
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 80080d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80080d6:	4638      	mov	r0, r7
 80080d8:	f7ff ff36 	bl	8007f48 <ILI9341_send_data_array>
	for(uint8_t i = 0; i < iterations; i++)
 80080dc:	3601      	adds	r6, #1
 80080de:	e7e7      	b.n	80080b0 <ILI9341_fill_rect+0x40>
}
 80080e0:	b003      	add	sp, #12
 80080e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e4:	200004fc 	.word	0x200004fc

080080e8 <ILI9341_draw_horizontal_line>:
		}
	}
}

/* Draw a fast horizontal line */
void ILI9341_draw_horizontal_line(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80080e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t color_16_bit[2] = {color >> 8, color};
	ILI9341_insert_color_data(SPI_DATA, x + w - 1, color_16_bit);
 80080ea:	1e55      	subs	r5, r2, #1
void ILI9341_draw_horizontal_line(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80080ec:	460f      	mov	r7, r1
	uint8_t color_16_bit[2] = {color >> 8, color};
 80080ee:	ba5b      	rev16	r3, r3
	ILI9341_insert_color_data(SPI_DATA, x + w - 1, color_16_bit);
 80080f0:	4405      	add	r5, r0
 80080f2:	490e      	ldr	r1, [pc, #56]	; (800812c <ILI9341_draw_horizontal_line+0x44>)
void ILI9341_draw_horizontal_line(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80080f4:	4616      	mov	r6, r2
 80080f6:	4604      	mov	r4, r0
	ILI9341_insert_color_data(SPI_DATA, x + w - 1, color_16_bit);
 80080f8:	b2ad      	uxth	r5, r5
inline static void ILI9341_insert_color_data(uint8_t data[], uint16_t iterations, uint8_t pixel_data[]){
 80080fa:	b29b      	uxth	r3, r3
	ILI9341_insert_color_data(SPI_DATA, x + w - 1, color_16_bit);
 80080fc:	2200      	movs	r2, #0
	for(uint16_t i = 0; i < iterations; i++){
 80080fe:	b290      	uxth	r0, r2
 8008100:	4285      	cmp	r5, r0
 8008102:	d80f      	bhi.n	8008124 <ILI9341_draw_horizontal_line+0x3c>
	ILI9341_set_cursor_position(x, y, x + w - 1, y);
 8008104:	b22a      	sxth	r2, r5
 8008106:	4639      	mov	r1, r7
 8008108:	4620      	mov	r0, r4
 800810a:	463b      	mov	r3, r7
 800810c:	f7ff ff58 	bl	8007fc0 <ILI9341_set_cursor_position>
	ILI9341_send_data_array(SPI_DATA, 2*(x + w - 1));
 8008110:	19a2      	adds	r2, r4, r6
 8008112:	1e51      	subs	r1, r2, #1
 8008114:	4805      	ldr	r0, [pc, #20]	; (800812c <ILI9341_draw_horizontal_line+0x44>)
 8008116:	0049      	lsls	r1, r1, #1
 8008118:	b289      	uxth	r1, r1
}
 800811a:	b003      	add	sp, #12
 800811c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ILI9341_send_data_array(SPI_DATA, 2*(x + w - 1));
 8008120:	f7ff bf12 	b.w	8007f48 <ILI9341_send_data_array>
		memcpy(data, pixel_data, 2);
 8008124:	f821 3b02 	strh.w	r3, [r1], #2
	for(uint16_t i = 0; i < iterations; i++){
 8008128:	3201      	adds	r2, #1
 800812a:	e7e8      	b.n	80080fe <ILI9341_draw_horizontal_line+0x16>
 800812c:	200004fc 	.word	0x200004fc

08008130 <ILI9341_draw_vertical_line>:

/* Draw vertical line */
void ILI9341_draw_vertical_line(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8008130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t color_16_bit[2] = {color >> 8, color};
	ILI9341_insert_color_data(SPI_DATA, y + h - 1, color_16_bit);
 8008132:	1e55      	subs	r5, r2, #1
 8008134:	440d      	add	r5, r1
void ILI9341_draw_vertical_line(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8008136:	460c      	mov	r4, r1
	uint8_t color_16_bit[2] = {color >> 8, color};
 8008138:	ba5b      	rev16	r3, r3
	ILI9341_insert_color_data(SPI_DATA, y + h - 1, color_16_bit);
 800813a:	490d      	ldr	r1, [pc, #52]	; (8008170 <ILI9341_draw_vertical_line+0x40>)
void ILI9341_draw_vertical_line(int16_t x, int16_t y, int16_t h, uint16_t color) {
 800813c:	4616      	mov	r6, r2
	ILI9341_insert_color_data(SPI_DATA, y + h - 1, color_16_bit);
 800813e:	b2ad      	uxth	r5, r5
inline static void ILI9341_insert_color_data(uint8_t data[], uint16_t iterations, uint8_t pixel_data[]){
 8008140:	b29b      	uxth	r3, r3
	ILI9341_insert_color_data(SPI_DATA, y + h - 1, color_16_bit);
 8008142:	2200      	movs	r2, #0
	for(uint16_t i = 0; i < iterations; i++){
 8008144:	b297      	uxth	r7, r2
 8008146:	42bd      	cmp	r5, r7
 8008148:	d80e      	bhi.n	8008168 <ILI9341_draw_vertical_line+0x38>
	ILI9341_set_cursor_position(x, y, x, y + h - 1);
 800814a:	4602      	mov	r2, r0
 800814c:	4621      	mov	r1, r4
 800814e:	b22b      	sxth	r3, r5
 8008150:	f7ff ff36 	bl	8007fc0 <ILI9341_set_cursor_position>
	ILI9341_send_data_array(SPI_DATA, 2*(y + h - 1));
 8008154:	19a1      	adds	r1, r4, r6
 8008156:	3901      	subs	r1, #1
 8008158:	4805      	ldr	r0, [pc, #20]	; (8008170 <ILI9341_draw_vertical_line+0x40>)
 800815a:	0049      	lsls	r1, r1, #1
 800815c:	b289      	uxth	r1, r1
}
 800815e:	b003      	add	sp, #12
 8008160:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ILI9341_send_data_array(SPI_DATA, 2*(y + h - 1));
 8008164:	f7ff bef0 	b.w	8007f48 <ILI9341_send_data_array>
		memcpy(data, pixel_data, 2);
 8008168:	f821 3b02 	strh.w	r3, [r1], #2
	for(uint16_t i = 0; i < iterations; i++){
 800816c:	3201      	adds	r2, #1
 800816e:	e7e9      	b.n	8008144 <ILI9341_draw_vertical_line+0x14>
 8008170:	200004fc 	.word	0x200004fc

08008174 <ILI9341_hollow_rect>:
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8008174:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008178:	4698      	mov	r8, r3
	int16_t v = y1 - y0 + 1;
 800817a:	eba8 0401 	sub.w	r4, r8, r1
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 800817e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008182:	4617      	mov	r7, r2
	int16_t h = x1 - x0;
 8008184:	1a12      	subs	r2, r2, r0
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8008186:	4606      	mov	r6, r0
	int16_t h = x1 - x0;
 8008188:	b212      	sxth	r2, r2
	int16_t v = y1 - y0 + 1;
 800818a:	3401      	adds	r4, #1
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 800818c:	460d      	mov	r5, r1
	ILI9341_draw_horizontal_line(x0, y0, h, color);
 800818e:	e9cd 3200 	strd	r3, r2, [sp]
	int16_t v = y1 - y0 + 1;
 8008192:	b224      	sxth	r4, r4
	ILI9341_draw_horizontal_line(x0, y0, h, color);
 8008194:	f7ff ffa8 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_draw_horizontal_line(x0, y1, h, color);
 8008198:	e9dd 3200 	ldrd	r3, r2, [sp]
 800819c:	4641      	mov	r1, r8
 800819e:	4630      	mov	r0, r6
 80081a0:	f7ff ffa2 	bl	80080e8 <ILI9341_draw_horizontal_line>
	ILI9341_draw_vertical_line(x0, y0, v, color);
 80081a4:	9b00      	ldr	r3, [sp, #0]
 80081a6:	4622      	mov	r2, r4
 80081a8:	4629      	mov	r1, r5
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff ffc0 	bl	8008130 <ILI9341_draw_vertical_line>
	ILI9341_draw_vertical_line(x1, y0, v, color);
 80081b0:	9b00      	ldr	r3, [sp, #0]
 80081b2:	4622      	mov	r2, r4
 80081b4:	4629      	mov	r1, r5
 80081b6:	4638      	mov	r0, r7
}
 80081b8:	b002      	add	sp, #8
 80081ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ILI9341_draw_vertical_line(x1, y0, v, color);
 80081be:	f7ff bfb7 	b.w	8008130 <ILI9341_draw_vertical_line>

080081c2 <ILI9341_fill_circle>:
void ILI9341_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80081c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c6:	b087      	sub	sp, #28
 80081c8:	4614      	mov	r4, r2
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 80081ca:	b28a      	uxth	r2, r1
 80081cc:	9203      	str	r2, [sp, #12]
 80081ce:	b2a7      	uxth	r7, r4
 80081d0:	9903      	ldr	r1, [sp, #12]
 80081d2:	007a      	lsls	r2, r7, #1
 80081d4:	1bc9      	subs	r1, r1, r7
	int16_t f = 1 - r;
 80081d6:	f1c7 0501 	rsb	r5, r7, #1
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 80081da:	3201      	adds	r2, #1
	int16_t ddF_y = -2 * r;
 80081dc:	ebc7 37c7 	rsb	r7, r7, r7, lsl #15
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 80081e0:	b212      	sxth	r2, r2
 80081e2:	b209      	sxth	r1, r1
	int16_t ddF_y = -2 * r;
 80081e4:	007f      	lsls	r7, r7, #1
void ILI9341_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80081e6:	4680      	mov	r8, r0
 80081e8:	461e      	mov	r6, r3
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 80081ea:	f7ff ffa1 	bl	8008130 <ILI9341_draw_vertical_line>
	int16_t ddF_y = -2 * r;
 80081ee:	b23b      	sxth	r3, r7
 80081f0:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	9304      	str	r3, [sp, #16]
			ILI9341_draw_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 80081f6:	fa1f f388 	uxth.w	r3, r8
	int16_t f = 1 - r;
 80081fa:	b22d      	sxth	r5, r5
			ILI9341_draw_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 80081fc:	9302      	str	r3, [sp, #8]
	while (x < y) {
 80081fe:	9b04      	ldr	r3, [sp, #16]
 8008200:	429c      	cmp	r4, r3
 8008202:	dc02      	bgt.n	800820a <ILI9341_fill_circle+0x48>
}
 8008204:	b007      	add	sp, #28
 8008206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (f >= 0) {
 800820a:	2d00      	cmp	r5, #0
 800820c:	db08      	blt.n	8008220 <ILI9341_fill_circle+0x5e>
			ddF_y += 2;
 800820e:	9b05      	ldr	r3, [sp, #20]
 8008210:	3302      	adds	r3, #2
			y--;
 8008212:	3c01      	subs	r4, #1
			ddF_y += 2;
 8008214:	b21a      	sxth	r2, r3
			f += ddF_y;
 8008216:	fa15 f583 	uxtah	r5, r5, r3
			y--;
 800821a:	b224      	sxth	r4, r4
			ddF_y += 2;
 800821c:	9205      	str	r2, [sp, #20]
			f += ddF_y;
 800821e:	b22d      	sxth	r5, r5
		x++;
 8008220:	9b04      	ldr	r3, [sp, #16]
 8008222:	3301      	adds	r3, #1
 8008224:	b29f      	uxth	r7, r3
 8008226:	b21b      	sxth	r3, r3
 8008228:	9304      	str	r3, [sp, #16]
		ddF_x += 2;
 800822a:	007b      	lsls	r3, r7, #1
 800822c:	3301      	adds	r3, #1
 800822e:	fa1f fa83 	uxth.w	sl, r3
		f += ddF_x;
 8008232:	fa15 f583 	uxtah	r5, r5, r3
			ILI9341_draw_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 8008236:	b2a3      	uxth	r3, r4
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8008242:	eba3 0b02 	sub.w	fp, r3, r2
 8008246:	9b02      	ldr	r3, [sp, #8]
 8008248:	f108 0801 	add.w	r8, r8, #1
 800824c:	fa0f fb8b 	sxth.w	fp, fp
 8008250:	fa0f f888 	sxth.w	r8, r8
 8008254:	19d8      	adds	r0, r3, r7
 8008256:	4642      	mov	r2, r8
 8008258:	4633      	mov	r3, r6
 800825a:	4659      	mov	r1, fp
 800825c:	b200      	sxth	r0, r0
 800825e:	f7ff ff67 	bl	8008130 <ILI9341_draw_vertical_line>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	eba3 0907 	sub.w	r9, r3, r7
			ILI9341_draw_vertical_line(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 8008268:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800826c:	fa0f f989 	sxth.w	r9, r9
 8008270:	fa0f fa8a 	sxth.w	sl, sl
 8008274:	1898      	adds	r0, r3, r2
 8008276:	4649      	mov	r1, r9
 8008278:	4633      	mov	r3, r6
 800827a:	4652      	mov	r2, sl
 800827c:	b200      	sxth	r0, r0
 800827e:	f7ff ff57 	bl	8008130 <ILI9341_draw_vertical_line>
			ILI9341_draw_vertical_line(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8008282:	9b02      	ldr	r3, [sp, #8]
 8008284:	1bd8      	subs	r0, r3, r7
 8008286:	4642      	mov	r2, r8
 8008288:	4633      	mov	r3, r6
 800828a:	4659      	mov	r1, fp
 800828c:	b200      	sxth	r0, r0
 800828e:	f7ff ff4f 	bl	8008130 <ILI9341_draw_vertical_line>
			ILI9341_draw_vertical_line(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8008292:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008296:	1a98      	subs	r0, r3, r2
 8008298:	4649      	mov	r1, r9
 800829a:	4633      	mov	r3, r6
 800829c:	4652      	mov	r2, sl
 800829e:	b200      	sxth	r0, r0
		f += ddF_x;
 80082a0:	b22d      	sxth	r5, r5
			ILI9341_draw_vertical_line(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 80082a2:	f7ff ff45 	bl	8008130 <ILI9341_draw_vertical_line>
 80082a6:	e7aa      	b.n	80081fe <ILI9341_fill_circle+0x3c>

080082a8 <ILI9341_print_text>:
		ILI9341_draw_horizontal_line(a, y, b - a + 1, color);
	}
}

/* Print a string */
void ILI9341_print_text(char text[], int16_t x0, int16_t y0, uint16_t font_color, uint16_t background_color, uint8_t font_size) {
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	460e      	mov	r6, r1
	/* Quick check */
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 80082ae:	4961      	ldr	r1, [pc, #388]	; (8008434 <ILI9341_print_text+0x18c>)
 80082b0:	7809      	ldrb	r1, [r1, #0]
void ILI9341_print_text(char text[], int16_t x0, int16_t y0, uint16_t font_color, uint16_t background_color, uint8_t font_size) {
 80082b2:	b087      	sub	sp, #28
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 80082b4:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80082b8:	2901      	cmp	r1, #1
void ILI9341_print_text(char text[], int16_t x0, int16_t y0, uint16_t font_color, uint16_t background_color, uint8_t font_size) {
 80082ba:	4617      	mov	r7, r2
 80082bc:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 80082c0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 80082c4:	d141      	bne.n	800834a <ILI9341_print_text+0xa2>
		if ((x0 >= ILI9341_WIDTH) || // Clip right
 80082c6:	2eef      	cmp	r6, #239	; 0xef
 80082c8:	f300 80b0 	bgt.w	800842c <ILI9341_print_text+0x184>
 80082cc:	f5b7 7fa0 	cmp.w	r7, #320	; 0x140
 80082d0:	f280 80ac 	bge.w	800842c <ILI9341_print_text+0x184>
				(y0 >= ILI9341_HEIGHT) || // Clip bottom
				((x0 + 6 * font_size - 1) < 0) || // Clip left
 80082d4:	2106      	movs	r1, #6
 80082d6:	fb11 6104 	smlabb	r1, r1, r4, r6
				(y0 >= ILI9341_HEIGHT) || // Clip bottom
 80082da:	2900      	cmp	r1, #0
 80082dc:	f340 80a6 	ble.w	800842c <ILI9341_print_text+0x184>
				((y0 + 8 * font_size - 1) < 0))   // Clip top
 80082e0:	eb07 01c4 	add.w	r1, r7, r4, lsl #3
			return;
	} else {
		if ((y0 >= ILI9341_WIDTH) || // Clip right
				(x0 >= ILI9341_HEIGHT) || // Clip bottom
				((y0 + 6 * font_size - 1) < 0) || // Clip left
 80082e4:	2900      	cmp	r1, #0
 80082e6:	f340 80a1 	ble.w	800842c <ILI9341_print_text+0x184>
	uint8_t background_color_16_bit[2] = {background_color >> 8, background_color};
 80082ea:	ba52      	rev16	r2, r2
	uint8_t font_color_16_bit[2] = {font_color >> 8, font_color};
 80082ec:	ba5b      	rev16	r3, r3
	for(j = 0; j < CHAR_HEIGHT; j++) {
 80082ee:	2500      	movs	r5, #0
	uint8_t background_color_16_bit[2] = {background_color >> 8, background_color};
 80082f0:	f8ad 2014 	strh.w	r2, [sp, #20]
	for(j = 0; j < CHAR_HEIGHT; j++) {
 80082f4:	f8df c140 	ldr.w	ip, [pc, #320]	; 8008438 <ILI9341_print_text+0x190>
	uint8_t font_color_16_bit[2] = {font_color >> 8, font_color};
 80082f8:	f8ad 3010 	strh.w	r3, [sp, #16]
	for(j = 0; j < CHAR_HEIGHT; j++) {
 80082fc:	b292      	uxth	r2, r2
 80082fe:	fa1f f883 	uxth.w	r8, r3
 8008302:	f88d 500a 	strb.w	r5, [sp, #10]
 8008306:	9200      	str	r2, [sp, #0]
		for(h = 0; h < font_size; h++) {
 8008308:	462b      	mov	r3, r5
					a = font[index_row][i] & (1 << j);
 800830a:	f04f 0906 	mov.w	r9, #6
	for(j = 0; j < CHAR_HEIGHT; j++) {
 800830e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8008312:	2a06      	cmp	r2, #6
 8008314:	d926      	bls.n	8008364 <ILI9341_print_text+0xbc>
				((x0 + 8 * font_size - 1) < 0))   // Clip top
			return;
	}

	uint16_t pixels_added_into_data = ILI9341_text_to_image(text, SPI_DATA, font_color, background_color, font_size);
	uint16_t x1 = x0 + font_size*CHAR_WIDTH*strlen(text) - 1;
 8008316:	f7f7 ff5b 	bl	80001d0 <strlen>
 800831a:	fb14 f000 	smulbb	r0, r4, r0
	uint8_t y1 = y0 + font_size*CHAR_HEIGHT;
 800831e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
	uint16_t x1 = x0 + font_size*CHAR_WIDTH*strlen(text) - 1;
 8008322:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8008326:	1e70      	subs	r0, r6, #1
 8008328:	eb00 0444 	add.w	r4, r0, r4, lsl #1
	uint8_t y1 = y0 + font_size*CHAR_HEIGHT;
 800832c:	443b      	add	r3, r7
	ILI9341_set_cursor_position(x0, y0, x1, y1);
 800832e:	4639      	mov	r1, r7
 8008330:	4630      	mov	r0, r6
 8008332:	b2db      	uxtb	r3, r3
 8008334:	b222      	sxth	r2, r4
 8008336:	f7ff fe43 	bl	8007fc0 <ILI9341_set_cursor_position>
	ILI9341_send_data_array(SPI_DATA, 2*pixels_added_into_data); /* Because it's 16-bit pixels with 8-bit data */
 800833a:	0069      	lsls	r1, r5, #1
 800833c:	483e      	ldr	r0, [pc, #248]	; (8008438 <ILI9341_print_text+0x190>)
 800833e:	b289      	uxth	r1, r1

}
 8008340:	b007      	add	sp, #28
 8008342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ILI9341_send_data_array(SPI_DATA, 2*pixels_added_into_data); /* Because it's 16-bit pixels with 8-bit data */
 8008346:	f7ff bdff 	b.w	8007f48 <ILI9341_send_data_array>
		if ((y0 >= ILI9341_WIDTH) || // Clip right
 800834a:	2fef      	cmp	r7, #239	; 0xef
 800834c:	dc6e      	bgt.n	800842c <ILI9341_print_text+0x184>
 800834e:	f5b6 7fa0 	cmp.w	r6, #320	; 0x140
 8008352:	da6b      	bge.n	800842c <ILI9341_print_text+0x184>
				((y0 + 6 * font_size - 1) < 0) || // Clip left
 8008354:	2106      	movs	r1, #6
 8008356:	fb11 7104 	smlabb	r1, r1, r4, r7
				(x0 >= ILI9341_HEIGHT) || // Clip bottom
 800835a:	2900      	cmp	r1, #0
 800835c:	dd66      	ble.n	800842c <ILI9341_print_text+0x184>
				((x0 + 8 * font_size - 1) < 0))   // Clip top
 800835e:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8008362:	e7bf      	b.n	80082e4 <ILI9341_print_text+0x3c>
		for(h = 0; h < font_size; h++) {
 8008364:	f88d 300b 	strb.w	r3, [sp, #11]
					a = font[index_row][i] & (1 << j);
 8008368:	f04f 0a01 	mov.w	sl, #1
		for(h = 0; h < font_size; h++) {
 800836c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008370:	4294      	cmp	r4, r2
 8008372:	d954      	bls.n	800841e <ILI9341_print_text+0x176>
 8008374:	f100 3eff 	add.w	lr, r0, #4294967295
 8008378:	e016      	b.n	80083a8 <ILI9341_print_text+0x100>
				c = *text++ & 0x7F;
 800837a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800837e:	f88d 200f 	strb.w	r2, [sp, #15]
				if (c < ' ')
 8008382:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8008386:	2a1f      	cmp	r2, #31
					index_row = c - ' ';
 8008388:	bf89      	itett	hi
 800838a:	f89d 200f 	ldrbhi.w	r2, [sp, #15]
					index_row = 0; /* This is the first row in the font array */
 800838e:	f88d 300e 	strbls.w	r3, [sp, #14]
					index_row = c - ' ';
 8008392:	3a20      	subhi	r2, #32
 8008394:	b2d2      	uxtbhi	r2, r2
 8008396:	bf88      	it	hi
 8008398:	f88d 200e 	strbhi.w	r2, [sp, #14]
				for (i = 0; i < CHAR_WIDTH; i++) {
 800839c:	f88d 3009 	strb.w	r3, [sp, #9]
 80083a0:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80083a4:	2a05      	cmp	r2, #5
 80083a6:	d90a      	bls.n	80083be <ILI9341_print_text+0x116>
			while(*text) {
 80083a8:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
 80083ac:	2a00      	cmp	r2, #0
 80083ae:	d1e4      	bne.n	800837a <ILI9341_print_text+0xd2>
		for(h = 0; h < font_size; h++) {
 80083b0:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80083b4:	3201      	adds	r2, #1
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	f88d 200b 	strb.w	r2, [sp, #11]
 80083bc:	e7d6      	b.n	800836c <ILI9341_print_text+0xc4>
					a = font[index_row][i] & (1 << j);
 80083be:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80083c2:	f89d b009 	ldrb.w	fp, [sp, #9]
 80083c6:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80083ca:	9201      	str	r2, [sp, #4]
 80083cc:	4a1b      	ldr	r2, [pc, #108]	; (800843c <ILI9341_print_text+0x194>)
 80083ce:	fb09 2101 	mla	r1, r9, r1, r2
 80083d2:	9a01      	ldr	r2, [sp, #4]
 80083d4:	f811 100b 	ldrb.w	r1, [r1, fp]
 80083d8:	fa0a f202 	lsl.w	r2, sl, r2
 80083dc:	400a      	ands	r2, r1
 80083de:	f88d 200d 	strb.w	r2, [sp, #13]
					for(w = 0; w < font_size; w++) {
 80083e2:	f88d 300c 	strb.w	r3, [sp, #12]
 80083e6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80083ea:	4294      	cmp	r4, r2
 80083ec:	d806      	bhi.n	80083fc <ILI9341_print_text+0x154>
				for (i = 0; i < CHAR_WIDTH; i++) {
 80083ee:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80083f2:	3201      	adds	r2, #1
 80083f4:	b2d2      	uxtb	r2, r2
 80083f6:	f88d 2009 	strb.w	r2, [sp, #9]
 80083fa:	e7d1      	b.n	80083a0 <ILI9341_print_text+0xf8>
						if (a > 0){
 80083fc:	f89d 200d 	ldrb.w	r2, [sp, #13]
							memcpy(data, font_color_16_bit, 2); /* We have a pixel 1 - Font pixel */
 8008400:	9900      	ldr	r1, [sp, #0]
 8008402:	2a00      	cmp	r2, #0
 8008404:	bf18      	it	ne
 8008406:	4641      	movne	r1, r8
					for(w = 0; w < font_size; w++) {
 8008408:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800840c:	f82c 1b02 	strh.w	r1, [ip], #2
 8008410:	3201      	adds	r2, #1
						pixels_added_into_data++;
 8008412:	3501      	adds	r5, #1
					for(w = 0; w < font_size; w++) {
 8008414:	b2d2      	uxtb	r2, r2
						pixels_added_into_data++;
 8008416:	b2ad      	uxth	r5, r5
					for(w = 0; w < font_size; w++) {
 8008418:	f88d 200c 	strb.w	r2, [sp, #12]
 800841c:	e7e3      	b.n	80083e6 <ILI9341_print_text+0x13e>
	for(j = 0; j < CHAR_HEIGHT; j++) {
 800841e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8008422:	3201      	adds	r2, #1
 8008424:	b2d2      	uxtb	r2, r2
 8008426:	f88d 200a 	strb.w	r2, [sp, #10]
 800842a:	e770      	b.n	800830e <ILI9341_print_text+0x66>
}
 800842c:	b007      	add	sp, #28
 800842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008432:	bf00      	nop
 8008434:	20002cf8 	.word	0x20002cf8
 8008438:	200004fc 	.word	0x200004fc
 800843c:	08018c02 	.word	0x08018c02

08008440 <ILI9341_set_rotation>:
	ILI9341_set_cursor_position(x, y, w + x - 1, h + y - 1);
	ILI9341_send_data_array(SPI_DATA, size);
}

/* Set screen rotation */
void ILI9341_set_rotation(uint8_t rotate) {
 8008440:	b508      	push	{r3, lr}
	if(lcd.ScreenOrientation == rotate)
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <ILI9341_set_rotation+0x58>)
 8008444:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8008448:	4282      	cmp	r2, r0
 800844a:	d023      	beq.n	8008494 <ILI9341_set_rotation+0x54>
		return; /* No action */

	lcd.ScreenOrientation = rotate;
	switch (rotate) {
 800844c:	2803      	cmp	r0, #3
	lcd.ScreenOrientation = rotate;
 800844e:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
	switch (rotate) {
 8008452:	d013      	beq.n	800847c <ILI9341_set_rotation+0x3c>
 8008454:	2804      	cmp	r0, #4
 8008456:	d017      	beq.n	8008488 <ILI9341_set_rotation+0x48>
 8008458:	2802      	cmp	r0, #2
 800845a:	d009      	beq.n	8008470 <ILI9341_set_rotation+0x30>
	case 1:
		lcd.rotationNum = 1;
 800845c:	2201      	movs	r2, #1
		ILI9341_send_command(ILI9341_MEMCONTROL);
 800845e:	2036      	movs	r0, #54	; 0x36
		lcd.rotationNum = 1;
 8008460:	701a      	strb	r2, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 8008462:	f7ff fd89 	bl	8007f78 <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8008466:	2088      	movs	r0, #136	; 0x88
		lcd.rotationNum = 1;
		ILI9341_send_command(ILI9341_MEMCONTROL);
		ILI9341_send_data(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
		break;
	}
}
 8008468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ILI9341_send_data(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800846c:	f7ff bd52 	b.w	8007f14 <ILI9341_send_data>
		lcd.rotationNum = 2;
 8008470:	7018      	strb	r0, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 8008472:	2036      	movs	r0, #54	; 0x36
 8008474:	f7ff fd80 	bl	8007f78 <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8008478:	2028      	movs	r0, #40	; 0x28
 800847a:	e7f5      	b.n	8008468 <ILI9341_set_rotation+0x28>
		lcd.rotationNum = 3;
 800847c:	7018      	strb	r0, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 800847e:	2036      	movs	r0, #54	; 0x36
 8008480:	f7ff fd7a 	bl	8007f78 <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8008484:	2048      	movs	r0, #72	; 0x48
 8008486:	e7ef      	b.n	8008468 <ILI9341_set_rotation+0x28>
		lcd.rotationNum = 4;
 8008488:	7018      	strb	r0, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 800848a:	2036      	movs	r0, #54	; 0x36
 800848c:	f7ff fd74 	bl	8007f78 <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8008490:	20e8      	movs	r0, #232	; 0xe8
 8008492:	e7e9      	b.n	8008468 <ILI9341_set_rotation+0x28>
}
 8008494:	bd08      	pop	{r3, pc}
 8008496:	bf00      	nop
 8008498:	20002cf8 	.word	0x20002cf8

0800849c <TSC2046_SendCommand>:
 */

#include "ILI9341.h"

// Send TSC2046 Command and wait for a response
static uint16_t TSC2046_SendCommand(uint8_t cmd) {
 800849c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 800849e:	4b17      	ldr	r3, [pc, #92]	; (80084fc <TSC2046_SendCommand+0x60>)
	uint16_t return16 = 0;
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 80084a0:	4c17      	ldr	r4, [pc, #92]	; (8008500 <TSC2046_SendCommand+0x64>)
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 80084a2:	881a      	ldrh	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 80084a4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 80084a6:	789b      	ldrb	r3, [r3, #2]
 80084a8:	f8ad 2004 	strh.w	r2, [sp, #4]
static uint16_t TSC2046_SendCommand(uint8_t cmd) {
 80084ac:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 80084ae:	2200      	movs	r2, #0
 80084b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 80084b2:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 80084b6:	f002 ff0f 	bl	800b2d8 <HAL_GPIO_WritePin>
	lcdBuf[0] = cmd;
	HAL_SPI_Transmit(lcd.touchSpi, lcdBuf, 1, 10);
 80084ba:	230a      	movs	r3, #10
 80084bc:	2201      	movs	r2, #1
 80084be:	a901      	add	r1, sp, #4
 80084c0:	6a20      	ldr	r0, [r4, #32]
	lcdBuf[0] = cmd;
 80084c2:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(lcd.touchSpi, lcdBuf, 1, 10);
 80084c6:	f005 f87b 	bl	800d5c0 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(lcd.touchSpi, &lcdBuf[1], 2, 10) == HAL_OK)
 80084ca:	6a20      	ldr	r0, [r4, #32]
 80084cc:	230a      	movs	r3, #10
 80084ce:	2202      	movs	r2, #2
 80084d0:	f10d 0105 	add.w	r1, sp, #5
 80084d4:	f005 fa5d 	bl	800d992 <HAL_SPI_Receive>
 80084d8:	b970      	cbnz	r0, 80084f8 <TSC2046_SendCommand+0x5c>
		return16 = (lcdBuf[1] << 4) + (lcdBuf[2] >> 4);
 80084da:	f89d 5006 	ldrb.w	r5, [sp, #6]
 80084de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80084e2:	092d      	lsrs	r5, r5, #4
 80084e4:	eb05 1503 	add.w	r5, r5, r3, lsl #4
	else
		return16 = 0;
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_SET);
 80084e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80084ea:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80084ec:	2201      	movs	r2, #1
 80084ee:	f002 fef3 	bl	800b2d8 <HAL_GPIO_WritePin>
	return return16;
}
 80084f2:	4628      	mov	r0, r5
 80084f4:	b003      	add	sp, #12
 80084f6:	bd30      	pop	{r4, r5, pc}
		return16 = 0;
 80084f8:	2500      	movs	r5, #0
 80084fa:	e7f5      	b.n	80084e8 <TSC2046_SendCommand+0x4c>
 80084fc:	08016c8c 	.word	0x08016c8c
 8008500:	20002cf8 	.word	0x20002cf8

08008504 <TSC2046_getRaw_Y>:
static uint16_t TSC2046_getRaw_X() {
	return TSC2046_SendCommand(CMD_X_AXIS | lcd.CMD_Default);
}
// Get y-axis raw touch 12-bit value
static uint16_t TSC2046_getRaw_Y() {
	return TSC2046_SendCommand(CMD_Y_AXIS | lcd.CMD_Default);
 8008504:	4b03      	ldr	r3, [pc, #12]	; (8008514 <TSC2046_getRaw_Y+0x10>)
 8008506:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 800850a:	f040 0010 	orr.w	r0, r0, #16
 800850e:	f7ff bfc5 	b.w	800849c <TSC2046_SendCommand>
 8008512:	bf00      	nop
 8008514:	20002cf8 	.word	0x20002cf8

08008518 <TSC2046_getRaw_X>:
	return TSC2046_SendCommand(CMD_X_AXIS | lcd.CMD_Default);
 8008518:	4b03      	ldr	r3, [pc, #12]	; (8008528 <TSC2046_getRaw_X+0x10>)
 800851a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 800851e:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 8008522:	f7ff bfbb 	b.w	800849c <TSC2046_SendCommand>
 8008526:	bf00      	nop
 8008528:	20002cf8 	.word	0x20002cf8

0800852c <TSC2046_GetRawTouch>:
	ILI9341_fill_circle(lcd.myTS_Calibrate.Width - 1, lcd.myTS_Calibrate.Height - 1, 3, COLOR_RED);
	ILI9341_print_text("Press here", lcd.myTS_Calibrate.Width - 80, lcd.myTS_Calibrate.Height - 40, COLOR_RED, COLOR_RED, 1);
}

// Poll for touch status
static void TSC2046_GetRawTouch() {
 800852c:	b530      	push	{r4, r5, lr}

	// Assign raw touch based on orientation
	switch (lcd.ScreenOrientation) {
 800852e:	4c1e      	ldr	r4, [pc, #120]	; (80085a8 <TSC2046_GetRawTouch+0x7c>)
 8008530:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8008534:	3b01      	subs	r3, #1
static void TSC2046_GetRawTouch() {
 8008536:	b093      	sub	sp, #76	; 0x4c
 8008538:	2b03      	cmp	r3, #3
 800853a:	d815      	bhi.n	8008568 <TSC2046_GetRawTouch+0x3c>
 800853c:	e8df f003 	tbb	[pc, r3]
 8008540:	2d241802 	.word	0x2d241802
	case 1:
		lcd.localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 8008544:	f7ff ffe8 	bl	8008518 <TSC2046_getRaw_X>
 8008548:	f5c0 607f 	rsb	r0, r0, #4080	; 0xff0
 800854c:	300f      	adds	r0, #15
		lcd.localRawTouch.y_touch = TSC2046_getRaw_Y(lcd);
 800854e:	4917      	ldr	r1, [pc, #92]	; (80085ac <TSC2046_GetRawTouch+0x80>)
		lcd.localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 8008550:	8620      	strh	r0, [r4, #48]	; 0x30
		lcd.localRawTouch.y_touch = TSC2046_getRaw_Y(lcd);
 8008552:	2248      	movs	r2, #72	; 0x48
 8008554:	4668      	mov	r0, sp
 8008556:	f009 ff65 	bl	8012424 <memcpy>
 800855a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800855e:	f7ff ffd1 	bl	8008504 <TSC2046_getRaw_Y>
		break;

	case 3:
		lcd.localRawTouch.x_touch = TSC2046_getRaw_X();
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
		lcd.myTS_Calibrate.Width = 230;
 8008562:	4b13      	ldr	r3, [pc, #76]	; (80085b0 <TSC2046_GetRawTouch+0x84>)
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 8008564:	8660      	strh	r0, [r4, #50]	; 0x32
		break;

	case 4:
		lcd.localRawTouch.x_touch = TSC2046_getRaw_Y();
		lcd.localRawTouch.y_touch = TSC2046_getRaw_X();
		lcd.myTS_Calibrate.Width = 320;
 8008566:	6563      	str	r3, [r4, #84]	; 0x54
		lcd.myTS_Calibrate.Height = 240;
		break;
	}
	// These are for the calibration
	lcd.myRawTouchDef.x_touch = lcd.localRawTouch.x_touch;
 8008568:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800856a:	6363      	str	r3, [r4, #52]	; 0x34
	lcd.myRawTouchDef.y_touch = lcd.localRawTouch.y_touch;
}
 800856c:	b013      	add	sp, #76	; 0x4c
 800856e:	bd30      	pop	{r4, r5, pc}
		lcd.localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y();
 8008570:	f7ff ffc8 	bl	8008504 <TSC2046_getRaw_Y>
 8008574:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008578:	1a28      	subs	r0, r5, r0
 800857a:	8620      	strh	r0, [r4, #48]	; 0x30
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_X();
 800857c:	f7ff ffcc 	bl	8008518 <TSC2046_getRaw_X>
 8008580:	1a28      	subs	r0, r5, r0
		lcd.myTS_Calibrate.Width = 320;
 8008582:	4b0c      	ldr	r3, [pc, #48]	; (80085b4 <TSC2046_GetRawTouch+0x88>)
		lcd.localRawTouch.y_touch = TSC2046_getRaw_X();
 8008584:	8660      	strh	r0, [r4, #50]	; 0x32
		lcd.myTS_Calibrate.Height = 240;
 8008586:	e7ee      	b.n	8008566 <TSC2046_GetRawTouch+0x3a>
		lcd.localRawTouch.x_touch = TSC2046_getRaw_X();
 8008588:	f7ff ffc6 	bl	8008518 <TSC2046_getRaw_X>
 800858c:	8620      	strh	r0, [r4, #48]	; 0x30
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 800858e:	f7ff ffb9 	bl	8008504 <TSC2046_getRaw_Y>
 8008592:	f5c0 607f 	rsb	r0, r0, #4080	; 0xff0
 8008596:	300f      	adds	r0, #15
 8008598:	e7e3      	b.n	8008562 <TSC2046_GetRawTouch+0x36>
		lcd.localRawTouch.x_touch = TSC2046_getRaw_Y();
 800859a:	f7ff ffb3 	bl	8008504 <TSC2046_getRaw_Y>
 800859e:	8620      	strh	r0, [r4, #48]	; 0x30
		lcd.localRawTouch.y_touch = TSC2046_getRaw_X();
 80085a0:	f7ff ffba 	bl	8008518 <TSC2046_getRaw_X>
 80085a4:	e7ed      	b.n	8008582 <TSC2046_GetRawTouch+0x56>
 80085a6:	bf00      	nop
 80085a8:	20002cf8 	.word	0x20002cf8
 80085ac:	20002d08 	.word	0x20002d08
 80085b0:	014000e6 	.word	0x014000e6
 80085b4:	00f00140 	.word	0x00f00140

080085b8 <TSC2046_GetTouchCalibrationParameters>:
	// Calculate bias
	lcd.myTS_Calibrate.Bias_X = -1 - lcd.myTS_Calibrate.Scale_X * lcd.myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
}

void TSC2046_GetTouchCalibrationParameters(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y) {
 80085b8:	b530      	push	{r4, r5, lr}
	*Scale_X = lcd.myTS_Calibrate.Scale_X;
 80085ba:	4c05      	ldr	r4, [pc, #20]	; (80085d0 <TSC2046_GetTouchCalibrationParameters+0x18>)
 80085bc:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80085be:	6005      	str	r5, [r0, #0]
	*Scale_Y = lcd.myTS_Calibrate.Scale_Y;
 80085c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80085c2:	6008      	str	r0, [r1, #0]
	*Bias_X = lcd.myTS_Calibrate.Bias_X;
 80085c4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80085c6:	6011      	str	r1, [r2, #0]
	*Bias_Y = lcd.myTS_Calibrate.Bias_Y;
 80085c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80085ca:	601a      	str	r2, [r3, #0]
}
 80085cc:	bd30      	pop	{r4, r5, pc}
 80085ce:	bf00      	nop
 80085d0:	20002cf8 	.word	0x20002cf8

080085d4 <TSC2046_SetTouchCalibrationParameters>:

void TSC2046_SetTouchCalibrationParameters(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y) {
 80085d4:	b510      	push	{r4, lr}
	lcd.myTS_Calibrate.Scale_X = *Scale_X;
 80085d6:	6804      	ldr	r4, [r0, #0]
 80085d8:	4804      	ldr	r0, [pc, #16]	; (80085ec <TSC2046_SetTouchCalibrationParameters+0x18>)
 80085da:	6444      	str	r4, [r0, #68]	; 0x44
	lcd.myTS_Calibrate.Scale_Y = *Scale_Y;
 80085dc:	6809      	ldr	r1, [r1, #0]
 80085de:	6481      	str	r1, [r0, #72]	; 0x48
	lcd.myTS_Calibrate.Bias_X = *Bias_X;
 80085e0:	6812      	ldr	r2, [r2, #0]
 80085e2:	64c2      	str	r2, [r0, #76]	; 0x4c
	lcd.myTS_Calibrate.Bias_Y = *Bias_Y;
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6503      	str	r3, [r0, #80]	; 0x50
}
 80085e8:	bd10      	pop	{r4, pc}
 80085ea:	bf00      	nop
 80085ec:	20002cf8 	.word	0x20002cf8

080085f0 <TSC2046_GetTouchData>:

// Get touch screen data when calibration is already made
void TSC2046_GetTouchData() {
 80085f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Reset
	uint16_t temp16x = 0, temp16y = 0;
	// Read touch data
	for (uint8_t i = 0; i < 10; i++) {
		TSC2046_GetRawTouch(lcd);
 80085f4:	4c2c      	ldr	r4, [pc, #176]	; (80086a8 <TSC2046_GetTouchData+0xb8>)
	uint16_t temp16x = 0, temp16y = 0;
 80085f6:	2600      	movs	r6, #0
void TSC2046_GetTouchData() {
 80085f8:	b092      	sub	sp, #72	; 0x48
 80085fa:	250a      	movs	r5, #10
	uint16_t temp16x = 0, temp16y = 0;
 80085fc:	4637      	mov	r7, r6
		TSC2046_GetRawTouch(lcd);
 80085fe:	f104 0810 	add.w	r8, r4, #16
 8008602:	2248      	movs	r2, #72	; 0x48
 8008604:	4641      	mov	r1, r8
 8008606:	4668      	mov	r0, sp
 8008608:	f009 ff0c 	bl	8012424 <memcpy>
 800860c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008610:	f7ff ff8c 	bl	800852c <TSC2046_GetRawTouch>
		temp16x += lcd.localRawTouch.x_touch;
 8008614:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8008616:	441f      	add	r7, r3
		temp16y += lcd.localRawTouch.y_touch;
 8008618:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800861a:	3d01      	subs	r5, #1
 800861c:	441e      	add	r6, r3
	for (uint8_t i = 0; i < 10; i++) {
 800861e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		temp16x += lcd.localRawTouch.x_touch;
 8008622:	b2bf      	uxth	r7, r7
		temp16y += lcd.localRawTouch.y_touch;
 8008624:	b2b6      	uxth	r6, r6
	for (uint8_t i = 0; i < 10; i++) {
 8008626:	d1ec      	bne.n	8008602 <TSC2046_GetTouchData+0x12>
	}
	lcd.localRawTouch.x_touch = temp16x * 0.1;
 8008628:	4638      	mov	r0, r7
 800862a:	f7f7 ff7b 	bl	8000524 <__aeabi_i2d>
 800862e:	a31c      	add	r3, pc, #112	; (adr r3, 80086a0 <TSC2046_GetTouchData+0xb0>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f7f7 ffe0 	bl	80005f8 <__aeabi_dmul>
 8008638:	f7f8 fab6 	bl	8000ba8 <__aeabi_d2uiz>
 800863c:	b285      	uxth	r5, r0
 800863e:	8625      	strh	r5, [r4, #48]	; 0x30
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 8008640:	4630      	mov	r0, r6
 8008642:	f7f7 ff6f 	bl	8000524 <__aeabi_i2d>
 8008646:	a316      	add	r3, pc, #88	; (adr r3, 80086a0 <TSC2046_GetTouchData+0xb0>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f7 ffd4 	bl	80005f8 <__aeabi_dmul>
 8008650:	f7f8 faaa 	bl	8000ba8 <__aeabi_d2uiz>

	// X-axis value
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 8008654:	ee07 5a90 	vmov	s15, r5
 8008658:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 800865c:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
 8008660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 8008664:	b280      	uxth	r0, r0
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 8008666:	eea6 7aa7 	vfma.f32	s14, s13, s15
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 800866a:	8660      	strh	r0, [r4, #50]	; 0x32

	// Y-axis value
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 800866c:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 8008670:	eefc 7ac7 	vcvt.u32.f32	s15, s14
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 8008674:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 8008678:	ee17 3a90 	vmov	r3, s15
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 800867c:	ee07 0a90 	vmov	s15, r0
 8008680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 8008684:	8723      	strh	r3, [r4, #56]	; 0x38
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 8008686:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800868a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800868e:	ee17 3a90 	vmov	r3, s15
 8008692:	8763      	strh	r3, [r4, #58]	; 0x3a
}
 8008694:	b012      	add	sp, #72	; 0x48
 8008696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w
 80086a0:	9999999a 	.word	0x9999999a
 80086a4:	3fb99999 	.word	0x3fb99999
 80086a8:	20002cf8 	.word	0x20002cf8

080086ac <TSC2046_isPressed>:


bool TSC2046_isPressed() {
	static uint8_t count = 0;
	static bool has_been_pressed = false;
	bool pressed = (bool) !HAL_GPIO_ReadPin(TS_IRQ_GPIO_Port, TS_IRQ_Pin); // TS_IRQ goes low when LCD being pressed on
 80086ac:	2108      	movs	r1, #8
bool TSC2046_isPressed() {
 80086ae:	b510      	push	{r4, lr}
	bool pressed = (bool) !HAL_GPIO_ReadPin(TS_IRQ_GPIO_Port, TS_IRQ_Pin); // TS_IRQ goes low when LCD being pressed on
 80086b0:	480e      	ldr	r0, [pc, #56]	; (80086ec <TSC2046_isPressed+0x40>)
 80086b2:	f002 fe0b 	bl	800b2cc <HAL_GPIO_ReadPin>
	if(pressed == true && has_been_pressed == false){
 80086b6:	490e      	ldr	r1, [pc, #56]	; (80086f0 <TSC2046_isPressed+0x44>)
 80086b8:	4a0e      	ldr	r2, [pc, #56]	; (80086f4 <TSC2046_isPressed+0x48>)
 80086ba:	780b      	ldrb	r3, [r1, #0]
 80086bc:	b940      	cbnz	r0, 80086d0 <TSC2046_isPressed+0x24>
 80086be:	b993      	cbnz	r3, 80086e6 <TSC2046_isPressed+0x3a>
		has_been_pressed = true;
 80086c0:	2401      	movs	r4, #1
		count = 0;
		HAL_Delay(100); /* Wait until the finger have fully pressed the LCD screen. The Touch SPI and Touch Interrupt are different things */
 80086c2:	2064      	movs	r0, #100	; 0x64
		has_been_pressed = true;
 80086c4:	700c      	strb	r4, [r1, #0]
		count = 0;
 80086c6:	7013      	strb	r3, [r2, #0]
		HAL_Delay(100); /* Wait until the finger have fully pressed the LCD screen. The Touch SPI and Touch Interrupt are different things */
 80086c8:	f002 f86a 	bl	800a7a0 <HAL_Delay>
 80086cc:	4620      	mov	r0, r4
		}else{
			count = 0;
		}
		return false;
	}
}
 80086ce:	bd10      	pop	{r4, pc}
		if(pressed == false && has_been_pressed == true) {
 80086d0:	b14b      	cbz	r3, 80086e6 <TSC2046_isPressed+0x3a>
			count = 1 + count;
 80086d2:	7813      	ldrb	r3, [r2, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	b2db      	uxtb	r3, r3
			if(count >= 10)
 80086d8:	2b09      	cmp	r3, #9
			count = 1 + count;
 80086da:	7013      	strb	r3, [r2, #0]
			if(count >= 10)
 80086dc:	f04f 0000 	mov.w	r0, #0
 80086e0:	d9f5      	bls.n	80086ce <TSC2046_isPressed+0x22>
				has_been_pressed = false;
 80086e2:	7008      	strb	r0, [r1, #0]
 80086e4:	e7f3      	b.n	80086ce <TSC2046_isPressed+0x22>
			count = 0;
 80086e6:	2000      	movs	r0, #0
 80086e8:	7010      	strb	r0, [r2, #0]
 80086ea:	e7f0      	b.n	80086ce <TSC2046_isPressed+0x22>
 80086ec:	48000c00 	.word	0x48000c00
 80086f0:	20002a7d 	.word	0x20002a7d
 80086f4:	20002a7c 	.word	0x20002a7c

080086f8 <TSC2046_Calibrate>:
void TSC2046_Calibrate() {
 80086f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	lcd.myTS_Calibrate.TL_X = 0;
 80086fc:	4c72      	ldr	r4, [pc, #456]	; (80088c8 <TSC2046_Calibrate+0x1d0>)
	ILI9341_set_rotation(2);
 80086fe:	2002      	movs	r0, #2
 8008700:	f7ff fe9e 	bl	8008440 <ILI9341_set_rotation>
	lcd.myTS_Calibrate.TL_X = 0;
 8008704:	2300      	movs	r3, #0
	ILI9341_fill_circle(1, 1, 3, COLOR_RED);
 8008706:	2101      	movs	r1, #1
 8008708:	4608      	mov	r0, r1
	lcd.myTS_Calibrate.BR_X = 0;
 800870a:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
	lcd.myRawTouchDef.x_touch = 0;
 800870e:	6363      	str	r3, [r4, #52]	; 0x34
	ILI9341_fill_circle(1, 1, 3, COLOR_RED);
 8008710:	2203      	movs	r2, #3
 8008712:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008716:	f7ff fd54 	bl	80081c2 <ILI9341_fill_circle>
	ILI9341_print_text("Press here", 20, 30, COLOR_RED, COLOR_RED, 1);
 800871a:	2501      	movs	r5, #1
 800871c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008720:	e9cd 3500 	strd	r3, r5, [sp]
 8008724:	4869      	ldr	r0, [pc, #420]	; (80088cc <TSC2046_Calibrate+0x1d4>)
 8008726:	221e      	movs	r2, #30
 8008728:	2114      	movs	r1, #20
 800872a:	f7ff fdbd 	bl	80082a8 <ILI9341_print_text>
		if (TSC2046_isPressed()) {
 800872e:	f7ff ffbd 	bl	80086ac <TSC2046_isPressed>
 8008732:	2800      	cmp	r0, #0
 8008734:	f000 80bc 	beq.w	80088b0 <TSC2046_Calibrate+0x1b8>
 8008738:	250a      	movs	r5, #10
				TSC2046_GetRawTouch();
 800873a:	f7ff fef7 	bl	800852c <TSC2046_GetRawTouch>
				lcd.myTS_Calibrate.TL_X += lcd.myRawTouchDef.x_touch;
 800873e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8008740:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8008742:	4413      	add	r3, r2
 8008744:	87a3      	strh	r3, [r4, #60]	; 0x3c
				lcd.myTS_Calibrate.TL_Y += lcd.myRawTouchDef.y_touch;
 8008746:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008748:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800874a:	3d01      	subs	r5, #1
 800874c:	4413      	add	r3, r2
			for (uint8_t i = 0; i < 10; i++) {
 800874e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
				lcd.myTS_Calibrate.TL_Y += lcd.myRawTouchDef.y_touch;
 8008752:	87e3      	strh	r3, [r4, #62]	; 0x3e
			for (uint8_t i = 0; i < 10; i++) {
 8008754:	d1f1      	bne.n	800873a <TSC2046_Calibrate+0x42>
	HAL_Delay(1000);
 8008756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800875a:	f002 f821 	bl	800a7a0 <HAL_Delay>
	ILI9341_fill_circle(lcd.myTS_Calibrate.Width - 1, lcd.myTS_Calibrate.Height - 1, 3, COLOR_RED);
 800875e:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
 8008762:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8008766:	3901      	subs	r1, #1
 8008768:	3801      	subs	r0, #1
 800876a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800876e:	2203      	movs	r2, #3
 8008770:	b209      	sxth	r1, r1
 8008772:	b200      	sxth	r0, r0
 8008774:	f7ff fd25 	bl	80081c2 <ILI9341_fill_circle>
	ILI9341_print_text("Press here", lcd.myTS_Calibrate.Width - 80, lcd.myTS_Calibrate.Height - 40, COLOR_RED, COLOR_RED, 1);
 8008778:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800877c:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 8008780:	2001      	movs	r0, #1
 8008782:	3a28      	subs	r2, #40	; 0x28
 8008784:	3950      	subs	r1, #80	; 0x50
 8008786:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800878a:	e9cd 3000 	strd	r3, r0, [sp]
 800878e:	b212      	sxth	r2, r2
 8008790:	484e      	ldr	r0, [pc, #312]	; (80088cc <TSC2046_Calibrate+0x1d4>)
 8008792:	b209      	sxth	r1, r1
 8008794:	f7ff fd88 	bl	80082a8 <ILI9341_print_text>
		if (TSC2046_isPressed()) {
 8008798:	f7ff ff88 	bl	80086ac <TSC2046_isPressed>
 800879c:	2800      	cmp	r0, #0
 800879e:	f000 808b 	beq.w	80088b8 <TSC2046_Calibrate+0x1c0>
 80087a2:	260a      	movs	r6, #10
				TSC2046_GetRawTouch();
 80087a4:	f7ff fec2 	bl	800852c <TSC2046_GetRawTouch>
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 80087a8:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
 80087ac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 80087ae:	f8b4 8042 	ldrh.w	r8, [r4, #66]	; 0x42
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 80087b2:	441d      	add	r5, r3
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 80087b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80087b6:	3e01      	subs	r6, #1
 80087b8:	4498      	add	r8, r3
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 80087ba:	b2ad      	uxth	r5, r5
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 80087bc:	fa1f f888 	uxth.w	r8, r8
			for (uint8_t i = 0; i < 10; i++) {
 80087c0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 80087c4:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 80087c8:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
			for (uint8_t i = 0; i < 10; i++) {
 80087cc:	d1ea      	bne.n	80087a4 <TSC2046_Calibrate+0xac>
	lcd.myTS_Calibrate.TL_X *= 0.1;
 80087ce:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80087d0:	f7f7 fea8 	bl	8000524 <__aeabi_i2d>
 80087d4:	a33a      	add	r3, pc, #232	; (adr r3, 80088c0 <TSC2046_Calibrate+0x1c8>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f7f7 ff0d 	bl	80005f8 <__aeabi_dmul>
 80087de:	f7f8 f9e3 	bl	8000ba8 <__aeabi_d2uiz>
 80087e2:	b287      	uxth	r7, r0
 80087e4:	87a7      	strh	r7, [r4, #60]	; 0x3c
	lcd.myTS_Calibrate.TL_Y *= 0.1;
 80087e6:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 80087e8:	f7f7 fe9c 	bl	8000524 <__aeabi_i2d>
 80087ec:	a334      	add	r3, pc, #208	; (adr r3, 80088c0 <TSC2046_Calibrate+0x1c8>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	f7f7 ff01 	bl	80005f8 <__aeabi_dmul>
 80087f6:	f7f8 f9d7 	bl	8000ba8 <__aeabi_d2uiz>
 80087fa:	b286      	uxth	r6, r0
 80087fc:	87e6      	strh	r6, [r4, #62]	; 0x3e
	lcd.myTS_Calibrate.BR_X *= 0.1;
 80087fe:	4628      	mov	r0, r5
 8008800:	f7f7 fe90 	bl	8000524 <__aeabi_i2d>
 8008804:	a32e      	add	r3, pc, #184	; (adr r3, 80088c0 <TSC2046_Calibrate+0x1c8>)
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	f7f7 fef5 	bl	80005f8 <__aeabi_dmul>
 800880e:	f7f8 f9cb 	bl	8000ba8 <__aeabi_d2uiz>
 8008812:	b285      	uxth	r5, r0
 8008814:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8008818:	4640      	mov	r0, r8
 800881a:	f7f7 fe83 	bl	8000524 <__aeabi_i2d>
 800881e:	a328      	add	r3, pc, #160	; (adr r3, 80088c0 <TSC2046_Calibrate+0x1c8>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	f7f7 fee8 	bl	80005f8 <__aeabi_dmul>
 8008828:	f7f8 f9be 	bl	8000ba8 <__aeabi_d2uiz>
	lcd.myTS_Calibrate.Scale_X = (lcd.myTS_Calibrate.Width + 0.0f) / (lcd.myTS_Calibrate.BR_X - lcd.myTS_Calibrate.TL_X + 0.0f);
 800882c:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 8008830:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80088d0 <TSC2046_Calibrate+0x1d8>
 8008834:	ee06 2a90 	vmov	s13, r2
 8008838:	1bea      	subs	r2, r5, r7
 800883a:	ee07 2a10 	vmov	s14, r2
 800883e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008846:	ee76 6a86 	vadd.f32	s13, s13, s12
 800884a:	ee37 7a06 	vadd.f32	s14, s14, s12
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 800884e:	b283      	uxth	r3, r0
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8008850:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8008854:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8008858:	1b9b      	subs	r3, r3, r6
	lcd.myTS_Calibrate.Scale_X = (lcd.myTS_Calibrate.Width + 0.0f) / (lcd.myTS_Calibrate.BR_X - lcd.myTS_Calibrate.TL_X + 0.0f);
 800885a:	eec6 5a87 	vdiv.f32	s11, s13, s14
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	ee07 2a10 	vmov	s14, r2
 8008866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800886a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800886e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008872:	ee37 7a06 	vadd.f32	s14, s14, s12
	lcd.myTS_Calibrate.Scale_X = (lcd.myTS_Calibrate.Width + 0.0f) / (lcd.myTS_Calibrate.BR_X - lcd.myTS_Calibrate.TL_X + 0.0f);
 8008876:	edc4 5a11 	vstr	s11, [r4, #68]	; 0x44
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 800887a:	eec7 6a27 	vdiv.f32	s13, s14, s15
	lcd.myTS_Calibrate.Bias_X = -1 - lcd.myTS_Calibrate.Scale_X * lcd.myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 800887e:	ee07 7a90 	vmov	s15, r7
 8008882:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800888a:	eeb0 6a47 	vmov.f32	s12, s14
 800888e:	eea5 6ae7 	vfms.f32	s12, s11, s15
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8008892:	ee07 6a90 	vmov	s15, r6
 8008896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 800889a:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 800889e:	eea6 7ae7 	vfms.f32	s14, s13, s15
	lcd.myTS_Calibrate.Bias_X = -1 - lcd.myTS_Calibrate.Scale_X * lcd.myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 80088a2:	ed84 6a13 	vstr	s12, [r4, #76]	; 0x4c
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 80088a6:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
}
 80088aa:	b002      	add	sp, #8
 80088ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_Delay(10);
 80088b0:	200a      	movs	r0, #10
 80088b2:	f001 ff75 	bl	800a7a0 <HAL_Delay>
		if (TSC2046_isPressed()) {
 80088b6:	e73a      	b.n	800872e <TSC2046_Calibrate+0x36>
		HAL_Delay(10);
 80088b8:	200a      	movs	r0, #10
 80088ba:	f001 ff71 	bl	800a7a0 <HAL_Delay>
		if (TSC2046_isPressed()) {
 80088be:	e76b      	b.n	8008798 <TSC2046_Calibrate+0xa0>
 80088c0:	9999999a 	.word	0x9999999a
 80088c4:	3fb99999 	.word	0x3fb99999
 80088c8:	20002cf8 	.word	0x20002cf8
 80088cc:	08018e42 	.word	0x08018e42
 80088d0:	00000000 	.word	0x00000000

080088d4 <shift_keyboard>:
			ILI9341_print_text(text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
		}
	}
}

static void shift_keyboard(uint8_t keyboard_page) {
 80088d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088d8:	2305      	movs	r3, #5
 80088da:	2520      	movs	r5, #32
	for(uint8_t i = 0; i < 5; i++) {
		/* Jump one step to the left */
		x += 23;

		/* Upper letters */
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 80088dc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800893c <shift_keyboard+0x68>
static void shift_keyboard(uint8_t keyboard_page) {
 80088e0:	b085      	sub	sp, #20
 80088e2:	fb03 5500 	mla	r5, r3, r0, r5
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 80088e6:	2427      	movs	r4, #39	; 0x27
 80088e8:	462a      	mov	r2, r5
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 80088ea:	b226      	sxth	r6, r4
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 80088ec:	4649      	mov	r1, r9
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 80088ee:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80088f2:	f04f 0802 	mov.w	r8, #2
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 80088f6:	a803      	add	r0, sp, #12
 80088f8:	f00a fa14 	bl	8012d24 <siprintf>
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 80088fc:	2300      	movs	r3, #0
 80088fe:	2253      	movs	r2, #83	; 0x53
 8008900:	4631      	mov	r1, r6
 8008902:	a803      	add	r0, sp, #12
 8008904:	e9cd 7800 	strd	r7, r8, [sp]
 8008908:	f7ff fcce 	bl	80082a8 <ILI9341_print_text>

		/* Down letter */
		sprintf(letter, "%c", i + 5 + 32 + 5*keyboard_page);
 800890c:	1d6a      	adds	r2, r5, #5
 800890e:	4649      	mov	r1, r9
 8008910:	a803      	add	r0, sp, #12
 8008912:	f00a fa07 	bl	8012d24 <siprintf>
		ILI9341_print_text(letter, x + 16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 8008916:	343a      	adds	r4, #58	; 0x3a
 8008918:	2300      	movs	r3, #0
 800891a:	e9cd 7800 	strd	r7, r8, [sp]
 800891e:	228a      	movs	r2, #138	; 0x8a
 8008920:	4631      	mov	r1, r6
 8008922:	a803      	add	r0, sp, #12
 8008924:	f7ff fcc0 	bl	80082a8 <ILI9341_print_text>
	for(uint8_t i = 0; i < 5; i++) {
 8008928:	b2a4      	uxth	r4, r4
 800892a:	f240 1349 	movw	r3, #329	; 0x149
 800892e:	429c      	cmp	r4, r3
 8008930:	f105 0501 	add.w	r5, r5, #1
 8008934:	d1d8      	bne.n	80088e8 <shift_keyboard+0x14>

		/* Jump one step to the left */
		x += 35;
	}
}
 8008936:	b005      	add	sp, #20
 8008938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800893c:	08017796 	.word	0x08017796

08008940 <STM32_PLC_LCD_Call_Keyboard_Logic>:
uint8_t STM32_PLC_LCD_Call_Keyboard_Logic(char word[]) {
 8008940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char text[17] = "";
 8008944:	2400      	movs	r4, #0
uint8_t STM32_PLC_LCD_Call_Keyboard_Logic(char word[]) {
 8008946:	b088      	sub	sp, #32
 8008948:	4606      	mov	r6, r0
	char text[17] = "";
 800894a:	220d      	movs	r2, #13
 800894c:	4621      	mov	r1, r4
 800894e:	a804      	add	r0, sp, #16
 8008950:	9403      	str	r4, [sp, #12]
 8008952:	f009 fd75 	bl	8012440 <memset>
			uint16_t X = lcd.myTsData.X;
 8008956:	4fa3      	ldr	r7, [pc, #652]	; (8008be4 <STM32_PLC_LCD_Call_Keyboard_Logic+0x2a4>)
	uint8_t keyboard_page = 6; /* We start at this */
 8008958:	2506      	movs	r5, #6
		if (TSC2046_isPressed()) {
 800895a:	f7ff fea7 	bl	80086ac <TSC2046_isPressed>
 800895e:	2800      	cmp	r0, #0
 8008960:	d0fb      	beq.n	800895a <STM32_PLC_LCD_Call_Keyboard_Logic+0x1a>
			TSC2046_GetTouchData();
 8008962:	f7ff fe45 	bl	80085f0 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8008966:	8f39      	ldrh	r1, [r7, #56]	; 0x38
			uint16_t Y = lcd.myTsData.Y;
 8008968:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
			if (X >= 23 && X <= 63 && Y >= 70 && Y <= 110) {
 800896a:	f1a1 0e17 	sub.w	lr, r1, #23
 800896e:	fa1f fe8e 	uxth.w	lr, lr
 8008972:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8008976:	d81a      	bhi.n	80089ae <STM32_PLC_LCD_Call_Keyboard_Logic+0x6e>
 8008978:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 800897c:	2a28      	cmp	r2, #40	; 0x28
 800897e:	d816      	bhi.n	80089ae <STM32_PLC_LCD_Call_Keyboard_Logic+0x6e>
				if (k >= 0 && k < 16) {
 8008980:	2c0f      	cmp	r4, #15
 8008982:	d808      	bhi.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 0 + 32 + 5*keyboard_page;
 8008984:	ab08      	add	r3, sp, #32
 8008986:	191a      	adds	r2, r3, r4
 8008988:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800898c:	3320      	adds	r3, #32
					k++;
 800898e:	3401      	adds	r4, #1
					text[k] = 1 + 32 + 5*keyboard_page;
 8008990:	f802 3c14 	strb.w	r3, [r2, #-20]
					k++;
 8008994:	b2e4      	uxtb	r4, r4
			ILI9341_print_text(text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 8008996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800899a:	2203      	movs	r2, #3
 800899c:	e9cd 3200 	strd	r3, r2, [sp]
 80089a0:	210f      	movs	r1, #15
 80089a2:	2300      	movs	r3, #0
 80089a4:	2219      	movs	r2, #25
 80089a6:	a803      	add	r0, sp, #12
 80089a8:	f7ff fc7e 	bl	80082a8 <ILI9341_print_text>
 80089ac:	e7d5      	b.n	800895a <STM32_PLC_LCD_Call_Keyboard_Logic+0x1a>
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
 80089ae:	f1a1 0c51 	sub.w	ip, r1, #81	; 0x51
 80089b2:	fa1f fc8c 	uxth.w	ip, ip
 80089b6:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 80089ba:	d80b      	bhi.n	80089d4 <STM32_PLC_LCD_Call_Keyboard_Logic+0x94>
 80089bc:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 80089c0:	2a28      	cmp	r2, #40	; 0x28
 80089c2:	d807      	bhi.n	80089d4 <STM32_PLC_LCD_Call_Keyboard_Logic+0x94>
				if (k < 16) {
 80089c4:	2c0f      	cmp	r4, #15
 80089c6:	d8e6      	bhi.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 1 + 32 + 5*keyboard_page;
 80089c8:	ab08      	add	r3, sp, #32
 80089ca:	191a      	adds	r2, r3, r4
 80089cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80089d0:	3321      	adds	r3, #33	; 0x21
 80089d2:	e7dc      	b.n	800898e <STM32_PLC_LCD_Call_Keyboard_Logic+0x4e>
			} else if (X >= 139 && X <= 179 && Y >= 70 && Y <= 110) {
 80089d4:	f1a1 008b 	sub.w	r0, r1, #139	; 0x8b
 80089d8:	b280      	uxth	r0, r0
 80089da:	2828      	cmp	r0, #40	; 0x28
 80089dc:	d80b      	bhi.n	80089f6 <STM32_PLC_LCD_Call_Keyboard_Logic+0xb6>
 80089de:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 80089e2:	2a28      	cmp	r2, #40	; 0x28
 80089e4:	d807      	bhi.n	80089f6 <STM32_PLC_LCD_Call_Keyboard_Logic+0xb6>
				if (k < 16) {
 80089e6:	2c0f      	cmp	r4, #15
 80089e8:	d8d5      	bhi.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 2 + 32 + 5*keyboard_page;
 80089ea:	ab08      	add	r3, sp, #32
 80089ec:	191a      	adds	r2, r3, r4
 80089ee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80089f2:	3322      	adds	r3, #34	; 0x22
 80089f4:	e7cb      	b.n	800898e <STM32_PLC_LCD_Call_Keyboard_Logic+0x4e>
			} else if (X >= 197 && X <= 237 && Y >= 70 && Y <= 110) {
 80089f6:	f1a1 02c5 	sub.w	r2, r1, #197	; 0xc5
 80089fa:	b292      	uxth	r2, r2
 80089fc:	2a28      	cmp	r2, #40	; 0x28
 80089fe:	d80c      	bhi.n	8008a1a <STM32_PLC_LCD_Call_Keyboard_Logic+0xda>
 8008a00:	f1a3 0846 	sub.w	r8, r3, #70	; 0x46
 8008a04:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8008a08:	d807      	bhi.n	8008a1a <STM32_PLC_LCD_Call_Keyboard_Logic+0xda>
				if (k < 16) {
 8008a0a:	2c0f      	cmp	r4, #15
 8008a0c:	d8c3      	bhi.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 3 + 32 + 5*keyboard_page;
 8008a0e:	ab08      	add	r3, sp, #32
 8008a10:	191a      	adds	r2, r3, r4
 8008a12:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008a16:	3323      	adds	r3, #35	; 0x23
 8008a18:	e7b9      	b.n	800898e <STM32_PLC_LCD_Call_Keyboard_Logic+0x4e>
			} else if (X >= 255 && X <= 295 && Y >= 70 && Y <= 110) {
 8008a1a:	39ff      	subs	r1, #255	; 0xff
 8008a1c:	b289      	uxth	r1, r1
 8008a1e:	2928      	cmp	r1, #40	; 0x28
 8008a20:	d80c      	bhi.n	8008a3c <STM32_PLC_LCD_Call_Keyboard_Logic+0xfc>
 8008a22:	f1a3 0846 	sub.w	r8, r3, #70	; 0x46
 8008a26:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8008a2a:	d807      	bhi.n	8008a3c <STM32_PLC_LCD_Call_Keyboard_Logic+0xfc>
				if (k < 16) {
 8008a2c:	2c0f      	cmp	r4, #15
 8008a2e:	d8b2      	bhi.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 4 + 32 + 5*keyboard_page;
 8008a30:	ab08      	add	r3, sp, #32
 8008a32:	191a      	adds	r2, r3, r4
 8008a34:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008a38:	3324      	adds	r3, #36	; 0x24
 8008a3a:	e7a8      	b.n	800898e <STM32_PLC_LCD_Call_Keyboard_Logic+0x4e>
			} else if (X >= 23 && X <= 63 && Y >= 125 && Y <= 165) {
 8008a3c:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8008a40:	d80d      	bhi.n	8008a5e <STM32_PLC_LCD_Call_Keyboard_Logic+0x11e>
 8008a42:	2b7c      	cmp	r3, #124	; 0x7c
 8008a44:	f240 80a3 	bls.w	8008b8e <STM32_PLC_LCD_Call_Keyboard_Logic+0x24e>
 8008a48:	2ba5      	cmp	r3, #165	; 0xa5
 8008a4a:	f200 8095 	bhi.w	8008b78 <STM32_PLC_LCD_Call_Keyboard_Logic+0x238>
				if (k < 16) {
 8008a4e:	2c0f      	cmp	r4, #15
 8008a50:	d8a1      	bhi.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 0 + 5 + 32 + 5*keyboard_page;
 8008a52:	ab08      	add	r3, sp, #32
 8008a54:	191a      	adds	r2, r3, r4
 8008a56:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008a5a:	3325      	adds	r3, #37	; 0x25
 8008a5c:	e797      	b.n	800898e <STM32_PLC_LCD_Call_Keyboard_Logic+0x4e>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8008a5e:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8008a62:	d80c      	bhi.n	8008a7e <STM32_PLC_LCD_Call_Keyboard_Logic+0x13e>
 8008a64:	2b7c      	cmp	r3, #124	; 0x7c
 8008a66:	d975      	bls.n	8008b54 <STM32_PLC_LCD_Call_Keyboard_Logic+0x214>
 8008a68:	2ba5      	cmp	r3, #165	; 0xa5
 8008a6a:	f200 80b3 	bhi.w	8008bd4 <STM32_PLC_LCD_Call_Keyboard_Logic+0x294>
				if (k < 16) {
 8008a6e:	2c0f      	cmp	r4, #15
 8008a70:	d891      	bhi.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 1 + 5 + 32 + 5*keyboard_page;
 8008a72:	ab08      	add	r3, sp, #32
 8008a74:	191a      	adds	r2, r3, r4
 8008a76:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008a7a:	3326      	adds	r3, #38	; 0x26
 8008a7c:	e787      	b.n	800898e <STM32_PLC_LCD_Call_Keyboard_Logic+0x4e>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008a7e:	2828      	cmp	r0, #40	; 0x28
 8008a80:	d86a      	bhi.n	8008b58 <STM32_PLC_LCD_Call_Keyboard_Logic+0x218>
 8008a82:	2b7c      	cmp	r3, #124	; 0x7c
 8008a84:	f240 8088 	bls.w	8008b98 <STM32_PLC_LCD_Call_Keyboard_Logic+0x258>
 8008a88:	2ba5      	cmp	r3, #165	; 0xa5
 8008a8a:	d825      	bhi.n	8008ad8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x198>
				if (k < 16) {
 8008a8c:	2c0f      	cmp	r4, #15
 8008a8e:	d882      	bhi.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 2 + 5 + 32 + 5*keyboard_page;
 8008a90:	ab08      	add	r3, sp, #32
 8008a92:	191a      	adds	r2, r3, r4
 8008a94:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008a98:	3327      	adds	r3, #39	; 0x27
 8008a9a:	e778      	b.n	800898e <STM32_PLC_LCD_Call_Keyboard_Logic+0x4e>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8008a9c:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8008aa0:	d80c      	bhi.n	8008abc <STM32_PLC_LCD_Call_Keyboard_Logic+0x17c>
 8008aa2:	2bb3      	cmp	r3, #179	; 0xb3
 8008aa4:	d936      	bls.n	8008b14 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1d4>
 8008aa6:	2bdc      	cmp	r3, #220	; 0xdc
 8008aa8:	d879      	bhi.n	8008b9e <STM32_PLC_LCD_Call_Keyboard_Logic+0x25e>
				if(keyboard_page > 0){
 8008aaa:	2d00      	cmp	r5, #0
 8008aac:	f43f af73 	beq.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					keyboard_page--;
 8008ab0:	3d01      	subs	r5, #1
					keyboard_page++;
 8008ab2:	b2ed      	uxtb	r5, r5
					shift_keyboard(keyboard_page);
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f7ff ff0d 	bl	80088d4 <shift_keyboard>
 8008aba:	e76c      	b.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8008abc:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8008ac0:	d808      	bhi.n	8008ad4 <STM32_PLC_LCD_Call_Keyboard_Logic+0x194>
 8008ac2:	2bb3      	cmp	r3, #179	; 0xb3
 8008ac4:	d929      	bls.n	8008b1a <STM32_PLC_LCD_Call_Keyboard_Logic+0x1da>
 8008ac6:	2bdc      	cmp	r3, #220	; 0xdc
 8008ac8:	d869      	bhi.n	8008b9e <STM32_PLC_LCD_Call_Keyboard_Logic+0x25e>
				if(keyboard_page < 17){
 8008aca:	2d10      	cmp	r5, #16
 8008acc:	f63f af63 	bhi.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					keyboard_page++;
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	e7ee      	b.n	8008ab2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x172>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8008ad4:	2828      	cmp	r0, #40	; 0x28
 8008ad6:	d815      	bhi.n	8008b04 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1c4>
 8008ad8:	2bb3      	cmp	r3, #179	; 0xb3
 8008ada:	d920      	bls.n	8008b1e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1de>
 8008adc:	2bdc      	cmp	r3, #220	; 0xdc
 8008ade:	f63f af5a 	bhi.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
				memset(text, 0, sizeof(text));
 8008ae2:	2211      	movs	r2, #17
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	a803      	add	r0, sp, #12
 8008ae8:	f009 fcaa 	bl	8012440 <memset>
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8008aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	f44f 729a 	mov.w	r2, #308	; 0x134
 8008af6:	2332      	movs	r3, #50	; 0x32
 8008af8:	2118      	movs	r1, #24
 8008afa:	200c      	movs	r0, #12
 8008afc:	f7ff fab8 	bl	8008070 <ILI9341_fill_rect>
				k = 0;
 8008b00:	2400      	movs	r4, #0
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8008b02:	e748      	b.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8008b04:	2a28      	cmp	r2, #40	; 0x28
 8008b06:	d80d      	bhi.n	8008b24 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1e4>
 8008b08:	3bb4      	subs	r3, #180	; 0xb4
 8008b0a:	2b28      	cmp	r3, #40	; 0x28
 8008b0c:	f63f af43 	bhi.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
				return 0;
 8008b10:	2000      	movs	r0, #0
 8008b12:	e01c      	b.n	8008b4e <STM32_PLC_LCD_Call_Keyboard_Logic+0x20e>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8008b14:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8008b18:	d801      	bhi.n	8008b1e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1de>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8008b1a:	2828      	cmp	r0, #40	; 0x28
 8008b1c:	d8f2      	bhi.n	8008b04 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1c4>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8008b1e:	2a28      	cmp	r2, #40	; 0x28
 8008b20:	f67f af39 	bls.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
			} else if (X >= 255 && X <= 295 && Y >= 180 && Y <= 220) {
 8008b24:	2928      	cmp	r1, #40	; 0x28
 8008b26:	f63f af36 	bhi.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
 8008b2a:	3bb4      	subs	r3, #180	; 0xb4
 8008b2c:	2b28      	cmp	r3, #40	; 0x28
 8008b2e:	f63f af32 	bhi.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
				memcpy(word, text, 17);
 8008b32:	aa03      	add	r2, sp, #12
 8008b34:	ac07      	add	r4, sp, #28
 8008b36:	4613      	mov	r3, r2
 8008b38:	cb03      	ldmia	r3!, {r0, r1}
 8008b3a:	42a3      	cmp	r3, r4
 8008b3c:	6030      	str	r0, [r6, #0]
 8008b3e:	6071      	str	r1, [r6, #4]
 8008b40:	461a      	mov	r2, r3
 8008b42:	f106 0608 	add.w	r6, r6, #8
 8008b46:	d1f6      	bne.n	8008b36 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1f6>
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	7033      	strb	r3, [r6, #0]
				return 1;
 8008b4c:	2001      	movs	r0, #1
}
 8008b4e:	b008      	add	sp, #32
 8008b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008b54:	2828      	cmp	r0, #40	; 0x28
 8008b56:	d928      	bls.n	8008baa <STM32_PLC_LCD_Call_Keyboard_Logic+0x26a>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8008b58:	2a28      	cmp	r2, #40	; 0x28
 8008b5a:	d829      	bhi.n	8008bb0 <STM32_PLC_LCD_Call_Keyboard_Logic+0x270>
 8008b5c:	f1a3 087d 	sub.w	r8, r3, #125	; 0x7d
 8008b60:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8008b64:	d89a      	bhi.n	8008a9c <STM32_PLC_LCD_Call_Keyboard_Logic+0x15c>
				if (k < 16) {
 8008b66:	2c0f      	cmp	r4, #15
 8008b68:	f63f af15 	bhi.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 3 + 5 + 32 + 5*keyboard_page;
 8008b6c:	ab08      	add	r3, sp, #32
 8008b6e:	191a      	adds	r2, r3, r4
 8008b70:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008b74:	3328      	adds	r3, #40	; 0x28
 8008b76:	e70a      	b.n	800898e <STM32_PLC_LCD_Call_Keyboard_Logic+0x4e>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8008b78:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8008b7c:	d913      	bls.n	8008ba6 <STM32_PLC_LCD_Call_Keyboard_Logic+0x266>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008b7e:	2828      	cmp	r0, #40	; 0x28
 8008b80:	d92b      	bls.n	8008bda <STM32_PLC_LCD_Call_Keyboard_Logic+0x29a>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8008b82:	2a28      	cmp	r2, #40	; 0x28
 8008b84:	d814      	bhi.n	8008bb0 <STM32_PLC_LCD_Call_Keyboard_Logic+0x270>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8008b86:	2bb3      	cmp	r3, #179	; 0xb3
 8008b88:	f67f af05 	bls.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
 8008b8c:	e78b      	b.n	8008aa6 <STM32_PLC_LCD_Call_Keyboard_Logic+0x166>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8008b8e:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8008b92:	d9df      	bls.n	8008b54 <STM32_PLC_LCD_Call_Keyboard_Logic+0x214>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008b94:	2828      	cmp	r0, #40	; 0x28
 8008b96:	d8df      	bhi.n	8008b58 <STM32_PLC_LCD_Call_Keyboard_Logic+0x218>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8008b98:	2a28      	cmp	r2, #40	; 0x28
 8008b9a:	d809      	bhi.n	8008bb0 <STM32_PLC_LCD_Call_Keyboard_Logic+0x270>
 8008b9c:	e6fb      	b.n	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8008b9e:	2828      	cmp	r0, #40	; 0x28
 8008ba0:	f67f aef9 	bls.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
 8008ba4:	e7bb      	b.n	8008b1e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1de>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008ba6:	2828      	cmp	r0, #40	; 0x28
 8008ba8:	d917      	bls.n	8008bda <STM32_PLC_LCD_Call_Keyboard_Logic+0x29a>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8008baa:	2a28      	cmp	r2, #40	; 0x28
 8008bac:	f67f af76 	bls.w	8008a9c <STM32_PLC_LCD_Call_Keyboard_Logic+0x15c>
			} else if (X >= 255 && X <= 295 && Y >= 125 && Y <= 165) {
 8008bb0:	2928      	cmp	r1, #40	; 0x28
 8008bb2:	f63f af73 	bhi.w	8008a9c <STM32_PLC_LCD_Call_Keyboard_Logic+0x15c>
 8008bb6:	f1a3 087d 	sub.w	r8, r3, #125	; 0x7d
 8008bba:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8008bbe:	f63f af6d 	bhi.w	8008a9c <STM32_PLC_LCD_Call_Keyboard_Logic+0x15c>
				if (k < 16) {
 8008bc2:	2c0f      	cmp	r4, #15
 8008bc4:	f63f aee7 	bhi.w	8008996 <STM32_PLC_LCD_Call_Keyboard_Logic+0x56>
					text[k] = 4 + 5 + 32 + 5*keyboard_page;
 8008bc8:	ab08      	add	r3, sp, #32
 8008bca:	191a      	adds	r2, r3, r4
 8008bcc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8008bd0:	3329      	adds	r3, #41	; 0x29
 8008bd2:	e6dc      	b.n	800898e <STM32_PLC_LCD_Call_Keyboard_Logic+0x4e>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008bd4:	2828      	cmp	r0, #40	; 0x28
 8008bd6:	d8e8      	bhi.n	8008baa <STM32_PLC_LCD_Call_Keyboard_Logic+0x26a>
 8008bd8:	e773      	b.n	8008ac2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x182>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8008bda:	2bb3      	cmp	r3, #179	; 0xb3
 8008bdc:	f63f af63 	bhi.w	8008aa6 <STM32_PLC_LCD_Call_Keyboard_Logic+0x166>
 8008be0:	e79d      	b.n	8008b1e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1de>
 8008be2:	bf00      	nop
 8008be4:	20002cf8 	.word	0x20002cf8

08008be8 <STM32_PLC_LCD_Call_Main_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

void STM32_PLC_LCD_Call_Main_Logic(uint8_t *frame_id, J1939 *j1939) {
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4604      	mov	r4, r0
 8008bec:	460d      	mov	r5, r1
	if (TSC2046_isPressed()) {
 8008bee:	f7ff fd5d 	bl	80086ac <TSC2046_isPressed>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	f000 80b1 	beq.w	8008d5a <STM32_PLC_LCD_Call_Main_Logic+0x172>
		TSC2046_GetTouchData();
 8008bf8:	f7ff fcfa 	bl	80085f0 <TSC2046_GetTouchData>
		uint16_t X = lcd.myTsData.X;
 8008bfc:	4a57      	ldr	r2, [pc, #348]	; (8008d5c <STM32_PLC_LCD_Call_Main_Logic+0x174>)
		uint16_t Y = lcd.myTsData.Y;
		/* Check which button we are pressing on */
		if (X >= 8 && X <= 37 && Y >= 8 && Y <= 37) {            /* First icon */
 8008bfe:	8f13      	ldrh	r3, [r2, #56]	; 0x38
 8008c00:	3b08      	subs	r3, #8
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	2b1d      	cmp	r3, #29
 8008c06:	f200 80a8 	bhi.w	8008d5a <STM32_PLC_LCD_Call_Main_Logic+0x172>
		uint16_t Y = lcd.myTsData.Y;
 8008c0a:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
		if (X >= 8 && X <= 37 && Y >= 8 && Y <= 37) {            /* First icon */
 8008c0c:	f1a3 0208 	sub.w	r2, r3, #8
 8008c10:	2a1d      	cmp	r2, #29
 8008c12:	d831      	bhi.n	8008c78 <STM32_PLC_LCD_Call_Main_Logic+0x90>
			switch (*frame_id) {
 8008c14:	7823      	ldrb	r3, [r4, #0]
 8008c16:	2b06      	cmp	r3, #6
 8008c18:	f200 809f 	bhi.w	8008d5a <STM32_PLC_LCD_Call_Main_Logic+0x172>
 8008c1c:	e8df f003 	tbb	[pc, r3]
 8008c20:	150f0904 	.word	0x150f0904
 8008c24:	211b      	.short	0x211b
 8008c26:	27          	.byte	0x27
 8008c27:	00          	.byte	0x00
			case 0:
				STM32_PLC_LCD_Show_Measurement_And_Time_Frame(frame_id);
 8008c28:	4620      	mov	r0, r4
				*frame_id = *frame_id + 1; /* Go to next frame */
				STM32_PLC_LCD_Show_Main_Frame(frame_id, true);
			}
		}
	}
}
 8008c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Measurement_And_Time_Frame(frame_id);
 8008c2e:	f7fc bd0d 	b.w	800564c <STM32_PLC_LCD_Show_Measurement_And_Time_Frame>
				STM32_PLC_LCD_Show_Logging_Frame(j1939, frame_id);
 8008c32:	4621      	mov	r1, r4
 8008c34:	4628      	mov	r0, r5
}
 8008c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Logging_Frame(j1939, frame_id);
 8008c3a:	f7fb bfbd 	b.w	8004bb8 <STM32_PLC_LCD_Show_Logging_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(j1939, frame_id);
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4628      	mov	r0, r5
}
 8008c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(j1939, frame_id);
 8008c46:	f7fe bbeb 	b.w	8007420 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(j1939, frame_id);
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4628      	mov	r0, r5
}
 8008c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(j1939, frame_id);
 8008c52:	f7fd bdf7 	b.w	8006844 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(j1939, frame_id);
 8008c56:	4621      	mov	r1, r4
 8008c58:	4628      	mov	r0, r5
}
 8008c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(j1939, frame_id);
 8008c5e:	f7fd be21 	b.w	80068a4 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(j1939, frame_id);
 8008c62:	4621      	mov	r1, r4
 8008c64:	4628      	mov	r0, r5
}
 8008c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(j1939, frame_id);
 8008c6a:	f7fd bfad 	b.w	8006bc8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame>
				STM32_PLC_LCD_Show_SDADC_Settings_Frame(frame_id);
 8008c6e:	4620      	mov	r0, r4
}
 8008c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SDADC_Settings_Frame(frame_id);
 8008c74:	f7fc bea2 	b.w	80059bc <STM32_PLC_LCD_Show_SDADC_Settings_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 55 && Y <= 94) {    /* Second icon */
 8008c78:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 8008c7c:	2a27      	cmp	r2, #39	; 0x27
 8008c7e:	d829      	bhi.n	8008cd4 <STM32_PLC_LCD_Call_Main_Logic+0xec>
			switch (*frame_id) {
 8008c80:	7823      	ldrb	r3, [r4, #0]
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	d869      	bhi.n	8008d5a <STM32_PLC_LCD_Call_Main_Logic+0x172>
 8008c86:	e8df f003 	tbb	[pc, r3]
 8008c8a:	0803      	.short	0x0803
 8008c8c:	1f19130d 	.word	0x1f19130d
				STM32_PLC_LCD_Show_Analog_Calibration_Frame(frame_id);
 8008c90:	4620      	mov	r0, r4
}
 8008c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Calibration_Frame(frame_id);
 8008c96:	f7fa be3f 	b.w	8003918 <STM32_PLC_LCD_Show_Analog_Calibration_Frame>
				STM32_PLC_LCD_Show_Control_Program_Settings_Frame(frame_id);
 8008c9a:	4620      	mov	r0, r4
}
 8008c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Control_Program_Settings_Frame(frame_id);
 8008ca0:	f7fb b878 	b.w	8003d94 <STM32_PLC_LCD_Show_Control_Program_Settings_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(j1939, frame_id);
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4628      	mov	r0, r5
}
 8008ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(j1939, frame_id);
 8008cac:	f7fd b918 	b.w	8005ee0 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(j1939, frame_id);
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4628      	mov	r0, r5
}
 8008cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(j1939, frame_id);
 8008cb8:	f7fd bdd4 	b.w	8006864 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(j1939, frame_id);
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	4628      	mov	r0, r5
}
 8008cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(j1939, frame_id);
 8008cc4:	f7fe ba7e 	b.w	80071c4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(j1939, frame_id);
 8008cc8:	4621      	mov	r1, r4
 8008cca:	4628      	mov	r0, r5
}
 8008ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(j1939, frame_id);
 8008cd0:	f7fe b8fa 	b.w	8006ec8 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 100 && Y <= 139) {  /* Third icon */
 8008cd4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8008cd8:	2a27      	cmp	r2, #39	; 0x27
 8008cda:	d828      	bhi.n	8008d2e <STM32_PLC_LCD_Call_Main_Logic+0x146>
			switch (*frame_id) {
 8008cdc:	7823      	ldrb	r3, [r4, #0]
 8008cde:	2b05      	cmp	r3, #5
 8008ce0:	d83b      	bhi.n	8008d5a <STM32_PLC_LCD_Call_Main_Logic+0x172>
 8008ce2:	e8df f003 	tbb	[pc, r3]
 8008ce6:	0803      	.short	0x0803
 8008ce8:	1f19130d 	.word	0x1f19130d
				STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(frame_id);
 8008cec:	4620      	mov	r0, r4
}
 8008cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(frame_id);
 8008cf2:	f7fc bd0f 	b.w	8005714 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame>
				STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(frame_id);
 8008cf6:	4620      	mov	r0, r4
}
 8008cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(frame_id);
 8008cfc:	f7fb bc8c 	b.w	8004618 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(j1939, frame_id);
 8008d00:	4621      	mov	r1, r4
 8008d02:	4628      	mov	r0, r5
}
 8008d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(j1939, frame_id);
 8008d08:	f7fd ba12 	b.w	8006130 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(j1939, frame_id);
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4628      	mov	r0, r5
}
 8008d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(j1939, frame_id);
 8008d14:	f7fd bdb6 	b.w	8006884 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(j1939, frame_id);
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4628      	mov	r0, r5
}
 8008d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(j1939, frame_id);
 8008d20:	f7fe bb48 	b.w	80073b4 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame>
				STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(frame_id);
 8008d24:	4620      	mov	r0, r4
}
 8008d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(frame_id);
 8008d2a:	f7fb be19 	b.w	8004960 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 146 && Y <= 185) {  /* Fourth icon */
 8008d2e:	f1a3 0292 	sub.w	r2, r3, #146	; 0x92
 8008d32:	2a27      	cmp	r2, #39	; 0x27
 8008d34:	d809      	bhi.n	8008d4a <STM32_PLC_LCD_Call_Main_Logic+0x162>
			if (*frame_id > 0) {
 8008d36:	7823      	ldrb	r3, [r4, #0]
 8008d38:	b17b      	cbz	r3, 8008d5a <STM32_PLC_LCD_Call_Main_Logic+0x172>
				*frame_id = *frame_id - 1; /* Got to previous frame */
 8008d3a:	3b01      	subs	r3, #1
				*frame_id = *frame_id + 1; /* Go to next frame */
 8008d3c:	7023      	strb	r3, [r4, #0]
				STM32_PLC_LCD_Show_Main_Frame(frame_id, true);
 8008d3e:	4620      	mov	r0, r4
 8008d40:	2101      	movs	r1, #1
}
 8008d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Main_Frame(frame_id, true);
 8008d46:	f7fc baa3 	b.w	8005290 <STM32_PLC_LCD_Show_Main_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 193 && Y <= 232) {  /* Fifth icon */
 8008d4a:	3bc1      	subs	r3, #193	; 0xc1
 8008d4c:	2b27      	cmp	r3, #39	; 0x27
 8008d4e:	d804      	bhi.n	8008d5a <STM32_PLC_LCD_Call_Main_Logic+0x172>
			if (*frame_id < 7) {
 8008d50:	7823      	ldrb	r3, [r4, #0]
 8008d52:	2b06      	cmp	r3, #6
 8008d54:	d801      	bhi.n	8008d5a <STM32_PLC_LCD_Call_Main_Logic+0x172>
				*frame_id = *frame_id + 1; /* Go to next frame */
 8008d56:	3301      	adds	r3, #1
 8008d58:	e7f0      	b.n	8008d3c <STM32_PLC_LCD_Call_Main_Logic+0x154>
}
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	20002cf8 	.word	0x20002cf8

08008d60 <STM32_PLC_LCD_Call_Numpad_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Call_Numpad_Logic(bool decimalbutton_show, bool minusbutton_show, float *number_value) {
 8008d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool haveDot = false;
	char text[17] = "";
 8008d64:	2400      	movs	r4, #0
uint8_t STM32_PLC_LCD_Call_Numpad_Logic(bool decimalbutton_show, bool minusbutton_show, float *number_value) {
 8008d66:	b088      	sub	sp, #32
 8008d68:	4606      	mov	r6, r0
 8008d6a:	4688      	mov	r8, r1
 8008d6c:	4691      	mov	r9, r2
	char text[17] = "";
 8008d6e:	4621      	mov	r1, r4
 8008d70:	220d      	movs	r2, #13
 8008d72:	a804      	add	r0, sp, #16
 8008d74:	9403      	str	r4, [sp, #12]
 8008d76:	f009 fb63 	bl	8012440 <memset>
	uint8_t k = 0;
	while (1) {
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 8008d7a:	f8df a26c 	ldr.w	sl, [pc, #620]	; 8008fe8 <STM32_PLC_LCD_Call_Numpad_Logic+0x288>
	bool haveDot = false;
 8008d7e:	4627      	mov	r7, r4
		if (TSC2046_isPressed()) {
 8008d80:	f7ff fc94 	bl	80086ac <TSC2046_isPressed>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d0fb      	beq.n	8008d80 <STM32_PLC_LCD_Call_Numpad_Logic+0x20>
			TSC2046_GetTouchData();
 8008d88:	f7ff fc32 	bl	80085f0 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8008d8c:	f8ba 2038 	ldrh.w	r2, [sl, #56]	; 0x38
			uint16_t Y = lcd.myTsData.Y;
 8008d90:	f8ba 303a 	ldrh.w	r3, [sl, #58]	; 0x3a
			if (X >= 23 && X <= 63 && Y >= 70 && Y <= 110) {
 8008d94:	f1a2 0c17 	sub.w	ip, r2, #23
 8008d98:	fa1f fc8c 	uxth.w	ip, ip
 8008d9c:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8008da0:	d818      	bhi.n	8008dd4 <STM32_PLC_LCD_Call_Numpad_Logic+0x74>
 8008da2:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
 8008da6:	2928      	cmp	r1, #40	; 0x28
 8008da8:	d814      	bhi.n	8008dd4 <STM32_PLC_LCD_Call_Numpad_Logic+0x74>
				/* 0 */
				if (k >= 0 && k < 16) {
 8008daa:	2c0f      	cmp	r4, #15
 8008dac:	d806      	bhi.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '0';
 8008dae:	ab08      	add	r3, sp, #32
 8008db0:	4423      	add	r3, r4
 8008db2:	2230      	movs	r2, #48	; 0x30
				}
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
				/* 1 */
				if (k < 16) {
					text[k] = '1';
					k++;
 8008db4:	3401      	adds	r4, #1
					text[k] = '1';
 8008db6:	f803 2c14 	strb.w	r2, [r3, #-20]
					k++;
 8008dba:	b2e4      	uxtb	r4, r4
				/* OK */
				*number_value = atoff(text);
				return 1;
			}
			/* Display the selected number text */
			ILI9341_print_text(text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 8008dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008dc0:	2203      	movs	r2, #3
 8008dc2:	e9cd 3200 	strd	r3, r2, [sp]
 8008dc6:	210f      	movs	r1, #15
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2219      	movs	r2, #25
 8008dcc:	a803      	add	r0, sp, #12
 8008dce:	f7ff fa6b 	bl	80082a8 <ILI9341_print_text>
 8008dd2:	e7d5      	b.n	8008d80 <STM32_PLC_LCD_Call_Numpad_Logic+0x20>
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
 8008dd4:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	2828      	cmp	r0, #40	; 0x28
 8008ddc:	d809      	bhi.n	8008df2 <STM32_PLC_LCD_Call_Numpad_Logic+0x92>
 8008dde:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
 8008de2:	2928      	cmp	r1, #40	; 0x28
 8008de4:	d805      	bhi.n	8008df2 <STM32_PLC_LCD_Call_Numpad_Logic+0x92>
				if (k < 16) {
 8008de6:	2c0f      	cmp	r4, #15
 8008de8:	d8e8      	bhi.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '1';
 8008dea:	ab08      	add	r3, sp, #32
 8008dec:	4423      	add	r3, r4
 8008dee:	2231      	movs	r2, #49	; 0x31
 8008df0:	e7e0      	b.n	8008db4 <STM32_PLC_LCD_Call_Numpad_Logic+0x54>
			} else if (X >= 139 && X <= 179 && Y >= 70 && Y <= 110) {
 8008df2:	f1a2 018b 	sub.w	r1, r2, #139	; 0x8b
 8008df6:	b289      	uxth	r1, r1
 8008df8:	2928      	cmp	r1, #40	; 0x28
 8008dfa:	d809      	bhi.n	8008e10 <STM32_PLC_LCD_Call_Numpad_Logic+0xb0>
 8008dfc:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 8008e00:	2d28      	cmp	r5, #40	; 0x28
 8008e02:	d805      	bhi.n	8008e10 <STM32_PLC_LCD_Call_Numpad_Logic+0xb0>
				if (k < 16) {
 8008e04:	2c0f      	cmp	r4, #15
 8008e06:	d8d9      	bhi.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '2';
 8008e08:	ab08      	add	r3, sp, #32
 8008e0a:	4423      	add	r3, r4
 8008e0c:	2232      	movs	r2, #50	; 0x32
 8008e0e:	e7d1      	b.n	8008db4 <STM32_PLC_LCD_Call_Numpad_Logic+0x54>
			} else if (X >= 197 && X <= 237 && Y >= 70 && Y <= 110) {
 8008e10:	f1a2 05c5 	sub.w	r5, r2, #197	; 0xc5
 8008e14:	b2ad      	uxth	r5, r5
 8008e16:	2d28      	cmp	r5, #40	; 0x28
 8008e18:	d80a      	bhi.n	8008e30 <STM32_PLC_LCD_Call_Numpad_Logic+0xd0>
 8008e1a:	f1a3 0e46 	sub.w	lr, r3, #70	; 0x46
 8008e1e:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8008e22:	d805      	bhi.n	8008e30 <STM32_PLC_LCD_Call_Numpad_Logic+0xd0>
				if (k < 16) {
 8008e24:	2c0f      	cmp	r4, #15
 8008e26:	d8c9      	bhi.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '3';
 8008e28:	ab08      	add	r3, sp, #32
 8008e2a:	4423      	add	r3, r4
 8008e2c:	2233      	movs	r2, #51	; 0x33
 8008e2e:	e7c1      	b.n	8008db4 <STM32_PLC_LCD_Call_Numpad_Logic+0x54>
			} else if (X >= 255 && X <= 295 && Y >= 70 && Y <= 110) {
 8008e30:	3aff      	subs	r2, #255	; 0xff
 8008e32:	b292      	uxth	r2, r2
 8008e34:	2a28      	cmp	r2, #40	; 0x28
 8008e36:	d80a      	bhi.n	8008e4e <STM32_PLC_LCD_Call_Numpad_Logic+0xee>
 8008e38:	f1a3 0e46 	sub.w	lr, r3, #70	; 0x46
 8008e3c:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8008e40:	d805      	bhi.n	8008e4e <STM32_PLC_LCD_Call_Numpad_Logic+0xee>
				if (k < 16) {
 8008e42:	2c0f      	cmp	r4, #15
 8008e44:	d8ba      	bhi.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '4';
 8008e46:	ab08      	add	r3, sp, #32
 8008e48:	4423      	add	r3, r4
 8008e4a:	2234      	movs	r2, #52	; 0x34
 8008e4c:	e7b2      	b.n	8008db4 <STM32_PLC_LCD_Call_Numpad_Logic+0x54>
			} else if (X >= 23 && X <= 63 && Y >= 125 && Y <= 165) {
 8008e4e:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8008e52:	d80b      	bhi.n	8008e6c <STM32_PLC_LCD_Call_Numpad_Logic+0x10c>
 8008e54:	2b7c      	cmp	r3, #124	; 0x7c
 8008e56:	f240 809e 	bls.w	8008f96 <STM32_PLC_LCD_Call_Numpad_Logic+0x236>
 8008e5a:	2ba5      	cmp	r3, #165	; 0xa5
 8008e5c:	f200 8094 	bhi.w	8008f88 <STM32_PLC_LCD_Call_Numpad_Logic+0x228>
				if (k < 16) {
 8008e60:	2c0f      	cmp	r4, #15
 8008e62:	d8ab      	bhi.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '5';
 8008e64:	ab08      	add	r3, sp, #32
 8008e66:	4423      	add	r3, r4
 8008e68:	2235      	movs	r2, #53	; 0x35
 8008e6a:	e7a3      	b.n	8008db4 <STM32_PLC_LCD_Call_Numpad_Logic+0x54>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8008e6c:	2828      	cmp	r0, #40	; 0x28
 8008e6e:	d80a      	bhi.n	8008e86 <STM32_PLC_LCD_Call_Numpad_Logic+0x126>
 8008e70:	2b7c      	cmp	r3, #124	; 0x7c
 8008e72:	d979      	bls.n	8008f68 <STM32_PLC_LCD_Call_Numpad_Logic+0x208>
 8008e74:	2ba5      	cmp	r3, #165	; 0xa5
 8008e76:	f200 80ae 	bhi.w	8008fd6 <STM32_PLC_LCD_Call_Numpad_Logic+0x276>
				if (k < 16) {
 8008e7a:	2c0f      	cmp	r4, #15
 8008e7c:	d89e      	bhi.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '6';
 8008e7e:	ab08      	add	r3, sp, #32
 8008e80:	4423      	add	r3, r4
 8008e82:	2236      	movs	r2, #54	; 0x36
 8008e84:	e796      	b.n	8008db4 <STM32_PLC_LCD_Call_Numpad_Logic+0x54>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008e86:	2928      	cmp	r1, #40	; 0x28
 8008e88:	d870      	bhi.n	8008f6c <STM32_PLC_LCD_Call_Numpad_Logic+0x20c>
 8008e8a:	2b7c      	cmp	r3, #124	; 0x7c
 8008e8c:	f240 8087 	bls.w	8008f9e <STM32_PLC_LCD_Call_Numpad_Logic+0x23e>
 8008e90:	2ba5      	cmp	r3, #165	; 0xa5
 8008e92:	d833      	bhi.n	8008efc <STM32_PLC_LCD_Call_Numpad_Logic+0x19c>
				if (k < 16) {
 8008e94:	2c0f      	cmp	r4, #15
 8008e96:	d891      	bhi.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '7';
 8008e98:	ab08      	add	r3, sp, #32
 8008e9a:	4423      	add	r3, r4
 8008e9c:	2237      	movs	r2, #55	; 0x37
 8008e9e:	e789      	b.n	8008db4 <STM32_PLC_LCD_Call_Numpad_Logic+0x54>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8008ea0:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8008ea4:	d80d      	bhi.n	8008ec2 <STM32_PLC_LCD_Call_Numpad_Logic+0x162>
 8008ea6:	2bb3      	cmp	r3, #179	; 0xb3
 8008ea8:	d947      	bls.n	8008f3a <STM32_PLC_LCD_Call_Numpad_Logic+0x1da>
 8008eaa:	2bdc      	cmp	r3, #220	; 0xdc
 8008eac:	d87a      	bhi.n	8008fa4 <STM32_PLC_LCD_Call_Numpad_Logic+0x244>
				if (minusbutton_show == true && k == 0) {
 8008eae:	f1b8 0f00 	cmp.w	r8, #0
 8008eb2:	d083      	beq.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
 8008eb4:	2c00      	cmp	r4, #0
 8008eb6:	d181      	bne.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '-';
 8008eb8:	232d      	movs	r3, #45	; 0x2d
 8008eba:	f88d 300c 	strb.w	r3, [sp, #12]
					k++;
 8008ebe:	2401      	movs	r4, #1
 8008ec0:	e77c      	b.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8008ec2:	2828      	cmp	r0, #40	; 0x28
 8008ec4:	d818      	bhi.n	8008ef8 <STM32_PLC_LCD_Call_Numpad_Logic+0x198>
 8008ec6:	2bb3      	cmp	r3, #179	; 0xb3
 8008ec8:	d939      	bls.n	8008f3e <STM32_PLC_LCD_Call_Numpad_Logic+0x1de>
 8008eca:	2bdc      	cmp	r3, #220	; 0xdc
 8008ecc:	d86a      	bhi.n	8008fa4 <STM32_PLC_LCD_Call_Numpad_Logic+0x244>
				if (decimalbutton_show == true && k > 0 && haveDot == false && k < 16) {
 8008ece:	2e00      	cmp	r6, #0
 8008ed0:	f43f af74 	beq.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
 8008ed4:	2c00      	cmp	r4, #0
 8008ed6:	f43f af71 	beq.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
 8008eda:	2f00      	cmp	r7, #0
 8008edc:	f47f af6e 	bne.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
 8008ee0:	2c0f      	cmp	r4, #15
 8008ee2:	f63f af6b 	bhi.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '.';
 8008ee6:	ab08      	add	r3, sp, #32
 8008ee8:	4423      	add	r3, r4
 8008eea:	222e      	movs	r2, #46	; 0x2e
					k++;
 8008eec:	3401      	adds	r4, #1
					text[k] = '.';
 8008eee:	f803 2c14 	strb.w	r2, [r3, #-20]
					k++;
 8008ef2:	b2e4      	uxtb	r4, r4
					haveDot = true;
 8008ef4:	4637      	mov	r7, r6
 8008ef6:	e761      	b.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8008ef8:	2928      	cmp	r1, #40	; 0x28
 8008efa:	d816      	bhi.n	8008f2a <STM32_PLC_LCD_Call_Numpad_Logic+0x1ca>
 8008efc:	2bb3      	cmp	r3, #179	; 0xb3
 8008efe:	d920      	bls.n	8008f42 <STM32_PLC_LCD_Call_Numpad_Logic+0x1e2>
 8008f00:	2bdc      	cmp	r3, #220	; 0xdc
 8008f02:	f63f af5b 	bhi.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
				memset(text, 0, sizeof(text));
 8008f06:	2211      	movs	r2, #17
 8008f08:	2100      	movs	r1, #0
 8008f0a:	a803      	add	r0, sp, #12
 8008f0c:	f009 fa98 	bl	8012440 <memset>
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8008f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	f44f 729a 	mov.w	r2, #308	; 0x134
 8008f1a:	2332      	movs	r3, #50	; 0x32
 8008f1c:	2118      	movs	r1, #24
 8008f1e:	200c      	movs	r0, #12
				k = 0;
 8008f20:	2400      	movs	r4, #0
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8008f22:	f7ff f8a5 	bl	8008070 <ILI9341_fill_rect>
				haveDot = false;
 8008f26:	4627      	mov	r7, r4
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8008f28:	e748      	b.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8008f2a:	2d28      	cmp	r5, #40	; 0x28
 8008f2c:	d80c      	bhi.n	8008f48 <STM32_PLC_LCD_Call_Numpad_Logic+0x1e8>
 8008f2e:	3bb4      	subs	r3, #180	; 0xb4
 8008f30:	2b28      	cmp	r3, #40	; 0x28
 8008f32:	f63f af43 	bhi.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
				return 0;
 8008f36:	2000      	movs	r0, #0
 8008f38:	e013      	b.n	8008f62 <STM32_PLC_LCD_Call_Numpad_Logic+0x202>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8008f3a:	2828      	cmp	r0, #40	; 0x28
 8008f3c:	d801      	bhi.n	8008f42 <STM32_PLC_LCD_Call_Numpad_Logic+0x1e2>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8008f3e:	2928      	cmp	r1, #40	; 0x28
 8008f40:	d8f3      	bhi.n	8008f2a <STM32_PLC_LCD_Call_Numpad_Logic+0x1ca>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8008f42:	2d28      	cmp	r5, #40	; 0x28
 8008f44:	f67f af3a 	bls.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
			} else if (X >= 255 && X <= 295 && Y >= 180 && Y <= 220) {
 8008f48:	2a28      	cmp	r2, #40	; 0x28
 8008f4a:	f63f af37 	bhi.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
 8008f4e:	3bb4      	subs	r3, #180	; 0xb4
 8008f50:	2b28      	cmp	r3, #40	; 0x28
 8008f52:	f63f af33 	bhi.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
				*number_value = atoff(text);
 8008f56:	a803      	add	r0, sp, #12
 8008f58:	f009 fa32 	bl	80123c0 <atoff>
				return 1;
 8008f5c:	2001      	movs	r0, #1
				*number_value = atoff(text);
 8008f5e:	ed89 0a00 	vstr	s0, [r9]
		}
	}
}
 8008f62:	b008      	add	sp, #32
 8008f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008f68:	2928      	cmp	r1, #40	; 0x28
 8008f6a:	d921      	bls.n	8008fb0 <STM32_PLC_LCD_Call_Numpad_Logic+0x250>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8008f6c:	2d28      	cmp	r5, #40	; 0x28
 8008f6e:	d822      	bhi.n	8008fb6 <STM32_PLC_LCD_Call_Numpad_Logic+0x256>
 8008f70:	f1a3 0e7d 	sub.w	lr, r3, #125	; 0x7d
 8008f74:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8008f78:	d892      	bhi.n	8008ea0 <STM32_PLC_LCD_Call_Numpad_Logic+0x140>
				if (k < 16) {
 8008f7a:	2c0f      	cmp	r4, #15
 8008f7c:	f63f af1e 	bhi.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '8';
 8008f80:	ab08      	add	r3, sp, #32
 8008f82:	4423      	add	r3, r4
 8008f84:	2238      	movs	r2, #56	; 0x38
 8008f86:	e715      	b.n	8008db4 <STM32_PLC_LCD_Call_Numpad_Logic+0x54>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8008f88:	2828      	cmp	r0, #40	; 0x28
 8008f8a:	d90f      	bls.n	8008fac <STM32_PLC_LCD_Call_Numpad_Logic+0x24c>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008f8c:	2928      	cmp	r1, #40	; 0x28
 8008f8e:	d825      	bhi.n	8008fdc <STM32_PLC_LCD_Call_Numpad_Logic+0x27c>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8008f90:	2bb3      	cmp	r3, #179	; 0xb3
 8008f92:	d88a      	bhi.n	8008eaa <STM32_PLC_LCD_Call_Numpad_Logic+0x14a>
 8008f94:	e7d5      	b.n	8008f42 <STM32_PLC_LCD_Call_Numpad_Logic+0x1e2>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8008f96:	2828      	cmp	r0, #40	; 0x28
 8008f98:	d9e6      	bls.n	8008f68 <STM32_PLC_LCD_Call_Numpad_Logic+0x208>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008f9a:	2928      	cmp	r1, #40	; 0x28
 8008f9c:	d8e6      	bhi.n	8008f6c <STM32_PLC_LCD_Call_Numpad_Logic+0x20c>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8008f9e:	2d28      	cmp	r5, #40	; 0x28
 8008fa0:	d809      	bhi.n	8008fb6 <STM32_PLC_LCD_Call_Numpad_Logic+0x256>
 8008fa2:	e70b      	b.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8008fa4:	2928      	cmp	r1, #40	; 0x28
 8008fa6:	f67f af09 	bls.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
 8008faa:	e7ca      	b.n	8008f42 <STM32_PLC_LCD_Call_Numpad_Logic+0x1e2>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008fac:	2928      	cmp	r1, #40	; 0x28
 8008fae:	d9ef      	bls.n	8008f90 <STM32_PLC_LCD_Call_Numpad_Logic+0x230>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8008fb0:	2d28      	cmp	r5, #40	; 0x28
 8008fb2:	f67f af75 	bls.w	8008ea0 <STM32_PLC_LCD_Call_Numpad_Logic+0x140>
			} else if (X >= 255 && X <= 295 && Y >= 125 && Y <= 165) {
 8008fb6:	2a28      	cmp	r2, #40	; 0x28
 8008fb8:	f63f af72 	bhi.w	8008ea0 <STM32_PLC_LCD_Call_Numpad_Logic+0x140>
 8008fbc:	f1a3 0e7d 	sub.w	lr, r3, #125	; 0x7d
 8008fc0:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8008fc4:	f63f af6c 	bhi.w	8008ea0 <STM32_PLC_LCD_Call_Numpad_Logic+0x140>
				if (k < 16) {
 8008fc8:	2c0f      	cmp	r4, #15
 8008fca:	f63f aef7 	bhi.w	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
					text[k] = '9';
 8008fce:	ab08      	add	r3, sp, #32
 8008fd0:	4423      	add	r3, r4
 8008fd2:	2239      	movs	r2, #57	; 0x39
 8008fd4:	e6ee      	b.n	8008db4 <STM32_PLC_LCD_Call_Numpad_Logic+0x54>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8008fd6:	2928      	cmp	r1, #40	; 0x28
 8008fd8:	d8ea      	bhi.n	8008fb0 <STM32_PLC_LCD_Call_Numpad_Logic+0x250>
 8008fda:	e774      	b.n	8008ec6 <STM32_PLC_LCD_Call_Numpad_Logic+0x166>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8008fdc:	2d28      	cmp	r5, #40	; 0x28
 8008fde:	d8ea      	bhi.n	8008fb6 <STM32_PLC_LCD_Call_Numpad_Logic+0x256>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8008fe0:	2bb3      	cmp	r3, #179	; 0xb3
 8008fe2:	f63f af62 	bhi.w	8008eaa <STM32_PLC_LCD_Call_Numpad_Logic+0x14a>
 8008fe6:	e6e9      	b.n	8008dbc <STM32_PLC_LCD_Call_Numpad_Logic+0x5c>
 8008fe8:	20002cf8 	.word	0x20002cf8

08008fec <STM32_PLC_LCD_Call_One_Button_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Call_One_Button_Logic(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8008fec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while (1) {
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 8008ff0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800903c <STM32_PLC_LCD_Call_One_Button_Logic+0x50>
uint8_t STM32_PLC_LCD_Call_One_Button_Logic(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	460d      	mov	r5, r1
 8008ff8:	4616      	mov	r6, r2
 8008ffa:	461f      	mov	r7, r3
		if (TSC2046_isPressed()) {
 8008ffc:	f7ff fb56 	bl	80086ac <TSC2046_isPressed>
 8009000:	2800      	cmp	r0, #0
 8009002:	d0fb      	beq.n	8008ffc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
			TSC2046_GetTouchData();
 8009004:	f7ff faf4 	bl	80085f0 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8009008:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
			uint16_t Y = lcd.myTsData.Y;
			if (X >= x1 && X <= x2 && Y >= y1 && Y <= y2) {
 800900c:	42a3      	cmp	r3, r4
 800900e:	d3f5      	bcc.n	8008ffc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
 8009010:	42b3      	cmp	r3, r6
 8009012:	d8f3      	bhi.n	8008ffc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
			uint16_t Y = lcd.myTsData.Y;
 8009014:	f8b8 303a 	ldrh.w	r3, [r8, #58]	; 0x3a
			if (X >= x1 && X <= x2 && Y >= y1 && Y <= y2) {
 8009018:	42ab      	cmp	r3, r5
 800901a:	d3ef      	bcc.n	8008ffc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
 800901c:	42bb      	cmp	r3, r7
 800901e:	d8ed      	bhi.n	8008ffc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
				ILI9341_hollow_rect(x1, y1, x2, y2, COLOR_MAGENTA);
 8009020:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	b220      	sxth	r0, r4
 8009028:	b23b      	sxth	r3, r7
 800902a:	b232      	sxth	r2, r6
 800902c:	b229      	sxth	r1, r5
 800902e:	f7ff f8a1 	bl	8008174 <ILI9341_hollow_rect>
				return 1; /* Button 1 */
			}
		}
	}
}
 8009032:	2001      	movs	r0, #1
 8009034:	b002      	add	sp, #8
 8009036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800903a:	bf00      	nop
 800903c:	20002cf8 	.word	0x20002cf8

08009040 <STM32_PLC_LCD_Call_Two_Button_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Call_Two_Button_Logic(uint16_t b1_x1, uint16_t b1_y1, uint16_t b1_x2, uint16_t b1_y2, uint16_t b2_x1, uint16_t b2_y1, uint16_t b2_x2, uint16_t b2_y2) {
 8009040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8009048:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800904c:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
 8009050:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8009054:	4604      	mov	r4, r0
 8009056:	468b      	mov	fp, r1
 8009058:	4615      	mov	r5, r2
 800905a:	461e      	mov	r6, r3
	while (1) {
		if (TSC2046_isPressed()) {
 800905c:	f7ff fb26 	bl	80086ac <TSC2046_isPressed>
 8009060:	2800      	cmp	r0, #0
 8009062:	d0fb      	beq.n	800905c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
			TSC2046_GetTouchData();
 8009064:	f7ff fac4 	bl	80085f0 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8009068:	4b17      	ldr	r3, [pc, #92]	; (80090c8 <STM32_PLC_LCD_Call_Two_Button_Logic+0x88>)
 800906a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
			uint16_t Y = lcd.myTsData.Y;
 800906c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			if (X >= b1_x1 && X <= b1_x2 && Y >= b1_y1 && Y <= b1_y2) {
 800906e:	42a2      	cmp	r2, r4
 8009070:	d313      	bcc.n	800909a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
 8009072:	42aa      	cmp	r2, r5
 8009074:	d811      	bhi.n	800909a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
 8009076:	455b      	cmp	r3, fp
 8009078:	d30f      	bcc.n	800909a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
 800907a:	42b3      	cmp	r3, r6
 800907c:	d80d      	bhi.n	800909a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
				ILI9341_hollow_rect(b1_x1, b1_y1, b1_x2, b1_y2, COLOR_MAGENTA);
 800907e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	b220      	sxth	r0, r4
 8009086:	b233      	sxth	r3, r6
 8009088:	b22a      	sxth	r2, r5
 800908a:	fa0f f18b 	sxth.w	r1, fp
 800908e:	f7ff f871 	bl	8008174 <ILI9341_hollow_rect>
				return 1; /* Button 1 */
 8009092:	2001      	movs	r0, #1
				ILI9341_hollow_rect(b2_x1, b2_y1, b2_x2, b2_y2, COLOR_MAGENTA);
				return 0; /* Button 2 */
			}
		}
	}
}
 8009094:	b003      	add	sp, #12
 8009096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (X >= b2_x1 && X <= b2_x2 && Y >= b2_y1 && Y <= b2_y2) {
 800909a:	42ba      	cmp	r2, r7
 800909c:	d3de      	bcc.n	800905c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
 800909e:	454a      	cmp	r2, r9
 80090a0:	d8dc      	bhi.n	800905c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
 80090a2:	4543      	cmp	r3, r8
 80090a4:	d3da      	bcc.n	800905c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
 80090a6:	4553      	cmp	r3, sl
 80090a8:	d8d8      	bhi.n	800905c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
				ILI9341_hollow_rect(b2_x1, b2_y1, b2_x2, b2_y2, COLOR_MAGENTA);
 80090aa:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	b238      	sxth	r0, r7
 80090b2:	fa0f f38a 	sxth.w	r3, sl
 80090b6:	fa0f f289 	sxth.w	r2, r9
 80090ba:	fa0f f188 	sxth.w	r1, r8
 80090be:	f7ff f859 	bl	8008174 <ILI9341_hollow_rect>
				return 0; /* Button 2 */
 80090c2:	2000      	movs	r0, #0
 80090c4:	e7e6      	b.n	8009094 <STM32_PLC_LCD_Call_Two_Button_Logic+0x54>
 80090c6:	bf00      	nop
 80090c8:	20002cf8 	.word	0x20002cf8

080090cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80090cc:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80090ce:	2400      	movs	r4, #0
{
 80090d0:	b09b      	sub	sp, #108	; 0x6c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80090d2:	4621      	mov	r1, r4
 80090d4:	2214      	movs	r2, #20
 80090d6:	4668      	mov	r0, sp
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80090d8:	9408      	str	r4, [sp, #32]
 80090da:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80090dc:	f009 f9b0 	bl	8012440 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80090e0:	4621      	mov	r1, r4
 80090e2:	222c      	movs	r2, #44	; 0x2c
 80090e4:	a80f      	add	r0, sp, #60	; 0x3c
 80090e6:	f009 f9ab 	bl	8012440 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80090ea:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80090ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090f0:	2109      	movs	r1, #9
 80090f2:	e9cd 1305 	strd	r1, r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80090f6:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80090fa:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80090fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009100:	2401      	movs	r4, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009102:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009104:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009106:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009108:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800910a:	f002 ff8d 	bl	800c028 <HAL_RCC_OscConfig>
 800910e:	b108      	cbz	r0, 8009114 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009110:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009112:	e7fe      	b.n	8009112 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009114:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009116:	e9cd 3500 	strd	r3, r5, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800911a:	f44f 6580 	mov.w	r5, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800911e:	e9cd 5003 	strd	r5, r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009122:	9002      	str	r0, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8009124:	4621      	mov	r1, r4
 8009126:	4668      	mov	r0, sp
 8009128:	f003 fa34 	bl	800c594 <HAL_RCC_ClockConfig>
 800912c:	b108      	cbz	r0, 8009132 <SystemClock_Config+0x66>
 800912e:	b672      	cpsid	i
  while (1)
 8009130:	e7fe      	b.n	8009130 <SystemClock_Config+0x64>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8009132:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <SystemClock_Config+0xa4>)
 8009134:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8009136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800913a:	9011      	str	r0, [sp, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800913c:	f44f 7400 	mov.w	r4, #512	; 0x200
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8009140:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009142:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV8;
 8009144:	f04f 4318 	mov.w	r3, #2550136832	; 0x98000000
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009148:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV8;
 800914a:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800914c:	f003 fafe 	bl	800c74c <HAL_RCCEx_PeriphCLKConfig>
 8009150:	b108      	cbz	r0, 8009156 <SystemClock_Config+0x8a>
 8009152:	b672      	cpsid	i
  while (1)
 8009154:	e7fe      	b.n	8009154 <SystemClock_Config+0x88>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8009156:	4620      	mov	r0, r4
 8009158:	f002 ff50 	bl	800bffc <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 800915c:	4628      	mov	r0, r5
 800915e:	f002 ff4d 	bl	800bffc <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 8009162:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009166:	f002 ff49 	bl	800bffc <HAL_PWREx_EnableSDADC>
}
 800916a:	b01b      	add	sp, #108	; 0x6c
 800916c:	bd30      	pop	{r4, r5, pc}
 800916e:	bf00      	nop
 8009170:	00030801 	.word	0x00030801

08009174 <main>:
{
 8009174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009178:	f04f 0814 	mov.w	r8, #20
{
 800917c:	f5ad 6d67 	sub.w	sp, sp, #3696	; 0xe70
  HAL_Init();
 8009180:	f001 faea 	bl	800a758 <HAL_Init>
  SystemClock_Config();
 8009184:	f7ff ffa2 	bl	80090cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009188:	4642      	mov	r2, r8
 800918a:	2100      	movs	r1, #0
 800918c:	a815      	add	r0, sp, #84	; 0x54
 800918e:	f009 f957 	bl	8012440 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009192:	4bb1      	ldr	r3, [pc, #708]	; (8009458 <main+0x2e4>)
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8009194:	48b1      	ldr	r0, [pc, #708]	; (800945c <main+0x2e8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009196:	695a      	ldr	r2, [r3, #20]
 8009198:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800919c:	615a      	str	r2, [r3, #20]
 800919e:	695a      	ldr	r2, [r3, #20]
 80091a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80091a4:	9208      	str	r2, [sp, #32]
 80091a6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80091a8:	695a      	ldr	r2, [r3, #20]
 80091aa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80091ae:	615a      	str	r2, [r3, #20]
 80091b0:	695a      	ldr	r2, [r3, #20]
 80091b2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80091b6:	9209      	str	r2, [sp, #36]	; 0x24
 80091b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80091ba:	695a      	ldr	r2, [r3, #20]
 80091bc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80091c0:	615a      	str	r2, [r3, #20]
 80091c2:	695a      	ldr	r2, [r3, #20]
 80091c4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80091c8:	920a      	str	r2, [sp, #40]	; 0x28
 80091ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80091cc:	695a      	ldr	r2, [r3, #20]
 80091ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80091d2:	615a      	str	r2, [r3, #20]
 80091d4:	695a      	ldr	r2, [r3, #20]
 80091d6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80091da:	920b      	str	r2, [sp, #44]	; 0x2c
 80091dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80091de:	695a      	ldr	r2, [r3, #20]
 80091e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80091e4:	615a      	str	r2, [r3, #20]
 80091e6:	695a      	ldr	r2, [r3, #20]
 80091e8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80091ec:	920c      	str	r2, [sp, #48]	; 0x30
 80091ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80091f0:	695a      	ldr	r2, [r3, #20]
 80091f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80091f6:	615a      	str	r2, [r3, #20]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091fe:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8009200:	2201      	movs	r2, #1
 8009202:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8009206:	f002 f867 	bl	800b2d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, CS3_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800920a:	4894      	ldr	r0, [pc, #592]	; (800945c <main+0x2e8>)
 800920c:	2200      	movs	r2, #0
 800920e:	2150      	movs	r1, #80	; 0x50
 8009210:	f002 f862 	bl	800b2d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS0_GPIO_Port, CS0_Pin, GPIO_PIN_SET);
 8009214:	2201      	movs	r2, #1
 8009216:	2180      	movs	r1, #128	; 0x80
 8009218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800921c:	f002 f85c 	bl	800b2d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CS1_Pin|CS2_Pin|TS_CS_Pin, GPIO_PIN_SET);
 8009220:	488f      	ldr	r0, [pc, #572]	; (8009460 <main+0x2ec>)
 8009222:	2201      	movs	r2, #1
 8009224:	2170      	movs	r1, #112	; 0x70
 8009226:	f002 f857 	bl	800b2d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS5_GPIO_Port, CS5_Pin, GPIO_PIN_SET);
 800922a:	488e      	ldr	r0, [pc, #568]	; (8009464 <main+0x2f0>)
 800922c:	2201      	movs	r2, #1
 800922e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009232:	f002 f851 	bl	800b2d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8009236:	2200      	movs	r2, #0
 8009238:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800923c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009240:	f002 f84a 	bl	800b2d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|SD_CS_Pin, GPIO_PIN_SET);
 8009244:	4888      	ldr	r0, [pc, #544]	; (8009468 <main+0x2f4>)
 8009246:	2201      	movs	r2, #1
 8009248:	4641      	mov	r1, r8
 800924a:	f002 f845 	bl	800b2d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800924e:	4886      	ldr	r0, [pc, #536]	; (8009468 <main+0x2f4>)
 8009250:	2200      	movs	r2, #0
 8009252:	21e0      	movs	r1, #224	; 0xe0
 8009254:	f002 f840 	bl	800b2d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8009258:	2200      	movs	r2, #0
 800925a:	4882      	ldr	r0, [pc, #520]	; (8009464 <main+0x2f0>)
 800925c:	2130      	movs	r1, #48	; 0x30
 800925e:	f002 f83b 	bl	800b2d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009262:	2400      	movs	r4, #0
 8009264:	237c      	movs	r3, #124	; 0x7c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009266:	4881      	ldr	r0, [pc, #516]	; (800946c <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009268:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800926a:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800926c:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009270:	f001 ff66 	bl	800b140 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI5_Pin|STOP_LOGGING_CONTROL_Pin;
 8009274:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009278:	4879      	ldr	r0, [pc, #484]	; (8009460 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800927a:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800927c:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800927e:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009282:	f001 ff5d 	bl	800b140 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI6_Pin|DI7_Pin;
 8009286:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800928a:	4874      	ldr	r0, [pc, #464]	; (800945c <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800928c:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800928e:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009290:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009292:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009296:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009298:	f001 ff52 	bl	800b140 <HAL_GPIO_Init>
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 800929c:	486f      	ldr	r0, [pc, #444]	; (800945c <main+0x2e8>)
 800929e:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092a0:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092a4:	e9cd 7515 	strd	r7, r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 80092a8:	f001 ff4a 	bl	800b140 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS3_Pin|LCD_RST_Pin;
 80092ac:	2350      	movs	r3, #80	; 0x50
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80092ae:	486b      	ldr	r0, [pc, #428]	; (800945c <main+0x2e8>)
 80092b0:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092b2:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092b6:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80092ba:	f001 ff41 	bl	800b140 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS0_Pin;
 80092be:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(CS0_GPIO_Port, &GPIO_InitStruct);
 80092c0:	a915      	add	r1, sp, #84	; 0x54
 80092c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092c6:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092ca:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(CS0_GPIO_Port, &GPIO_InitStruct);
 80092ce:	f001 ff37 	bl	800b140 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|TS_CS_Pin;
 80092d2:	2370      	movs	r3, #112	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092d4:	4862      	ldr	r0, [pc, #392]	; (8009460 <main+0x2ec>)
 80092d6:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092d8:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092dc:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092e0:	f001 ff2e 	bl	800b140 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS5_Pin;
 80092e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(CS5_GPIO_Port, &GPIO_InitStruct);
 80092e8:	485e      	ldr	r0, [pc, #376]	; (8009464 <main+0x2f0>)
 80092ea:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092ec:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092f0:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(CS5_GPIO_Port, &GPIO_InitStruct);
 80092f4:	f001 ff24 	bl	800b140 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80092f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80092fc:	a915      	add	r1, sp, #84	; 0x54
 80092fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009302:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009306:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800930a:	f001 ff19 	bl	800b140 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800930e:	4856      	ldr	r0, [pc, #344]	; (8009468 <main+0x2f4>)
 8009310:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009312:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009316:	e9cd 8515 	strd	r8, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = TS_IRQ_Pin;
 800931a:	2608      	movs	r6, #8
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800931c:	f001 ff10 	bl	800b140 <HAL_GPIO_Init>
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009320:	4851      	ldr	r0, [pc, #324]	; (8009468 <main+0x2f4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009322:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009324:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009326:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 800932a:	f001 ff09 	bl	800b140 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 800932e:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009330:	484d      	ldr	r0, [pc, #308]	; (8009468 <main+0x2f4>)
 8009332:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009334:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009338:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800933c:	f001 ff00 	bl	800b140 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8009340:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009342:	4848      	ldr	r0, [pc, #288]	; (8009464 <main+0x2f0>)
 8009344:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009346:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800934a:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800934e:	f001 fef7 	bl	800b140 <HAL_GPIO_Init>
  DAC_ChannelConfTypeDef sConfig = {0};
 8009352:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8009356:	9417      	str	r4, [sp, #92]	; 0x5c
  hdac1.Instance = DAC1;
 8009358:	4c45      	ldr	r4, [pc, #276]	; (8009470 <main+0x2fc>)
 800935a:	4b46      	ldr	r3, [pc, #280]	; (8009474 <main+0x300>)
 800935c:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800935e:	4620      	mov	r0, r4
 8009360:	f001 fd94 	bl	800ae8c <HAL_DAC_Init>
 8009364:	4602      	mov	r2, r0
 8009366:	b108      	cbz	r0, 800936c <main+0x1f8>
 8009368:	b672      	cpsid	i
  while (1)
 800936a:	e7fe      	b.n	800936a <main+0x1f6>
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800936c:	e9cd 7015 	strd	r7, r0, [sp, #84]	; 0x54
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8009370:	a915      	add	r1, sp, #84	; 0x54
 8009372:	4620      	mov	r0, r4
 8009374:	f001 fddb 	bl	800af2e <HAL_DAC_ConfigChannel>
 8009378:	b108      	cbz	r0, 800937e <main+0x20a>
 800937a:	b672      	cpsid	i
  while (1)
 800937c:	e7fe      	b.n	800937c <main+0x208>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800937e:	2210      	movs	r2, #16
 8009380:	a915      	add	r1, sp, #84	; 0x54
 8009382:	4620      	mov	r0, r4
 8009384:	f001 fdd3 	bl	800af2e <HAL_DAC_ConfigChannel>
 8009388:	b108      	cbz	r0, 800938e <main+0x21a>
 800938a:	b672      	cpsid	i
  while (1)
 800938c:	e7fe      	b.n	800938c <main+0x218>
  hdac2.Instance = DAC2;
 800938e:	4c3a      	ldr	r4, [pc, #232]	; (8009478 <main+0x304>)
 8009390:	4b3a      	ldr	r3, [pc, #232]	; (800947c <main+0x308>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8009392:	9017      	str	r0, [sp, #92]	; 0x5c
 8009394:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8009398:	4620      	mov	r0, r4
  hdac2.Instance = DAC2;
 800939a:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800939c:	f001 fd76 	bl	800ae8c <HAL_DAC_Init>
 80093a0:	4602      	mov	r2, r0
 80093a2:	b108      	cbz	r0, 80093a8 <main+0x234>
 80093a4:	b672      	cpsid	i
  while (1)
 80093a6:	e7fe      	b.n	80093a6 <main+0x232>
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80093a8:	e9cd 7015 	strd	r7, r0, [sp, #84]	; 0x54
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80093ac:	a915      	add	r1, sp, #84	; 0x54
 80093ae:	4620      	mov	r0, r4
 80093b0:	f001 fdbd 	bl	800af2e <HAL_DAC_ConfigChannel>
 80093b4:	4607      	mov	r7, r0
 80093b6:	b108      	cbz	r0, 80093bc <main+0x248>
 80093b8:	b672      	cpsid	i
  while (1)
 80093ba:	e7fe      	b.n	80093ba <main+0x246>
  RTC_TimeTypeDef sTime = {0};
 80093bc:	4601      	mov	r1, r0
 80093be:	4642      	mov	r2, r8
 80093c0:	a810      	add	r0, sp, #64	; 0x40
 80093c2:	f009 f83d 	bl	8012440 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80093c6:	2228      	movs	r2, #40	; 0x28
 80093c8:	4639      	mov	r1, r7
 80093ca:	a815      	add	r0, sp, #84	; 0x54
  hrtc.Instance = RTC;
 80093cc:	4c2c      	ldr	r4, [pc, #176]	; (8009480 <main+0x30c>)
  RTC_DateTypeDef sDate = {0};
 80093ce:	970e      	str	r7, [sp, #56]	; 0x38
  RTC_AlarmTypeDef sAlarm = {0};
 80093d0:	f009 f836 	bl	8012440 <memset>
  hrtc.Instance = RTC;
 80093d4:	4b2b      	ldr	r3, [pc, #172]	; (8009484 <main+0x310>)
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80093d6:	61a7      	str	r7, [r4, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80093d8:	e9c4 3700 	strd	r3, r7, [r4]
  hrtc.Init.SynchPrediv = 255;
 80093dc:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
 80093e0:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80093e2:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 80093e4:	e9c4 c302 	strd	ip, r3, [r4, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80093e8:	e9c4 7704 	strd	r7, r7, [r4, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80093ec:	f003 fabe 	bl	800c96c <HAL_RTC_Init>
 80093f0:	4602      	mov	r2, r0
 80093f2:	b108      	cbz	r0, 80093f8 <main+0x284>
 80093f4:	b672      	cpsid	i
  while (1)
 80093f6:	e7fe      	b.n	80093f6 <main+0x282>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80093f8:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  sTime.Hours = 0;
 80093fc:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
  sTime.Seconds = 0;
 8009400:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8009404:	a910      	add	r1, sp, #64	; 0x40
 8009406:	4620      	mov	r0, r4
 8009408:	f003 fb09 	bl	800ca1e <HAL_RTC_SetTime>
 800940c:	4602      	mov	r2, r0
 800940e:	b108      	cbz	r0, 8009414 <main+0x2a0>
 8009410:	b672      	cpsid	i
  while (1)
 8009412:	e7fe      	b.n	8009412 <main+0x29e>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009414:	4b1c      	ldr	r3, [pc, #112]	; (8009488 <main+0x314>)
 8009416:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8009418:	a90e      	add	r1, sp, #56	; 0x38
 800941a:	4620      	mov	r0, r4
 800941c:	f003 fb70 	bl	800cb00 <HAL_RTC_SetDate>
 8009420:	4602      	mov	r2, r0
 8009422:	b108      	cbz	r0, 8009428 <main+0x2b4>
 8009424:	b672      	cpsid	i
  while (1)
 8009426:	e7fe      	b.n	8009426 <main+0x2b2>
  sAlarm.Alarm = RTC_ALARM_A;
 8009428:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800942c:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009430:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
  sAlarm.AlarmTime.Hours = 0;
 8009434:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
  sAlarm.AlarmTime.Seconds = 0;
 8009438:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
  sAlarm.AlarmTime.SubSeconds = 0;
 800943c:	9016      	str	r0, [sp, #88]	; 0x58
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800943e:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8009440:	a915      	add	r1, sp, #84	; 0x54
 8009442:	4620      	mov	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 8009444:	931e      	str	r3, [sp, #120]	; 0x78
  sAlarm.AlarmDateWeekDay = 1;
 8009446:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800944a:	f003 fbb9 	bl	800cbc0 <HAL_RTC_SetAlarm>
 800944e:	4603      	mov	r3, r0
 8009450:	b1e0      	cbz	r0, 800948c <main+0x318>
 8009452:	b672      	cpsid	i
  while (1)
 8009454:	e7fe      	b.n	8009454 <main+0x2e0>
 8009456:	bf00      	nop
 8009458:	40021000 	.word	0x40021000
 800945c:	48001400 	.word	0x48001400
 8009460:	48000800 	.word	0x48000800
 8009464:	48000400 	.word	0x48000400
 8009468:	48000c00 	.word	0x48000c00
 800946c:	48001000 	.word	0x48001000
 8009470:	200032b8 	.word	0x200032b8
 8009474:	40007400 	.word	0x40007400
 8009478:	200031b0 	.word	0x200031b0
 800947c:	40009800 	.word	0x40009800
 8009480:	20003574 	.word	0x20003574
 8009484:	40002800 	.word	0x40002800
 8009488:	00010101 	.word	0x00010101
  hspi2.Instance = SPI2;
 800948c:	48a1      	ldr	r0, [pc, #644]	; (8009714 <main+0x5a0>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800948e:	49a2      	ldr	r1, [pc, #648]	; (8009718 <main+0x5a4>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009490:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009492:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009496:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800949a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800949e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80094a2:	f44f 7400 	mov.w	r4, #512	; 0x200
 80094a6:	2238      	movs	r2, #56	; 0x38
 80094a8:	e9c0 4206 	strd	r4, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 80094ac:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80094ae:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80094b2:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80094b6:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094b8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80094ba:	6346      	str	r6, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80094bc:	f004 f812 	bl	800d4e4 <HAL_SPI_Init>
 80094c0:	b108      	cbz	r0, 80094c6 <main+0x352>
 80094c2:	b672      	cpsid	i
  while (1)
 80094c4:	e7fe      	b.n	80094c4 <main+0x350>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094c6:	2500      	movs	r5, #0
  htim2.Instance = TIM2;
 80094c8:	4c94      	ldr	r4, [pc, #592]	; (800971c <main+0x5a8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80094ca:	2210      	movs	r2, #16
 80094cc:	2100      	movs	r1, #0
 80094ce:	a810      	add	r0, sp, #64	; 0x40
 80094d0:	f008 ffb6 	bl	8012440 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80094d4:	221c      	movs	r2, #28
 80094d6:	4629      	mov	r1, r5
 80094d8:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094da:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
  htim2.Init.Period = 0xffff;
 80094de:	f64f 76ff 	movw	r6, #65535	; 0xffff
  TIM_OC_InitTypeDef sConfigOC = {0};
 80094e2:	f008 ffad 	bl	8012440 <memset>
  htim2.Instance = TIM2;
 80094e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80094ea:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 0;
 80094ec:	e9c4 3500 	strd	r3, r5, [r4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094f0:	e9c4 6503 	strd	r6, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094f4:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094f6:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80094f8:	f004 fcb2 	bl	800de60 <HAL_TIM_Base_Init>
 80094fc:	b108      	cbz	r0, 8009502 <main+0x38e>
 80094fe:	b672      	cpsid	i
  while (1)
 8009500:	e7fe      	b.n	8009500 <main+0x38c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009502:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009506:	a910      	add	r1, sp, #64	; 0x40
 8009508:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800950a:	9710      	str	r7, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800950c:	f004 ff83 	bl	800e416 <HAL_TIM_ConfigClockSource>
 8009510:	b108      	cbz	r0, 8009516 <main+0x3a2>
 8009512:	b672      	cpsid	i
  while (1)
 8009514:	e7fe      	b.n	8009514 <main+0x3a0>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009516:	4620      	mov	r0, r4
 8009518:	f004 fcfa 	bl	800df10 <HAL_TIM_PWM_Init>
 800951c:	b108      	cbz	r0, 8009522 <main+0x3ae>
 800951e:	b672      	cpsid	i
  while (1)
 8009520:	e7fe      	b.n	8009520 <main+0x3ac>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009522:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009526:	a90e      	add	r1, sp, #56	; 0x38
 8009528:	4620      	mov	r0, r4
 800952a:	f005 f9af 	bl	800e88c <HAL_TIMEx_MasterConfigSynchronization>
 800952e:	4602      	mov	r2, r0
 8009530:	b108      	cbz	r0, 8009536 <main+0x3c2>
 8009532:	b672      	cpsid	i
  while (1)
 8009534:	e7fe      	b.n	8009534 <main+0x3c0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009536:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8009538:	e9cd 3015 	strd	r3, r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800953c:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800953e:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009540:	a915      	add	r1, sp, #84	; 0x54
 8009542:	4620      	mov	r0, r4
 8009544:	f004 fe0f 	bl	800e166 <HAL_TIM_PWM_ConfigChannel>
 8009548:	b108      	cbz	r0, 800954e <main+0x3da>
 800954a:	b672      	cpsid	i
  while (1)
 800954c:	e7fe      	b.n	800954c <main+0x3d8>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800954e:	2204      	movs	r2, #4
 8009550:	a915      	add	r1, sp, #84	; 0x54
 8009552:	4620      	mov	r0, r4
 8009554:	f004 fe07 	bl	800e166 <HAL_TIM_PWM_ConfigChannel>
 8009558:	b108      	cbz	r0, 800955e <main+0x3ea>
 800955a:	b672      	cpsid	i
  while (1)
 800955c:	e7fe      	b.n	800955c <main+0x3e8>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800955e:	2208      	movs	r2, #8
 8009560:	a915      	add	r1, sp, #84	; 0x54
 8009562:	4620      	mov	r0, r4
 8009564:	f004 fdff 	bl	800e166 <HAL_TIM_PWM_ConfigChannel>
 8009568:	b108      	cbz	r0, 800956e <main+0x3fa>
 800956a:	b672      	cpsid	i
  while (1)
 800956c:	e7fe      	b.n	800956c <main+0x3f8>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800956e:	220c      	movs	r2, #12
 8009570:	a915      	add	r1, sp, #84	; 0x54
 8009572:	4620      	mov	r0, r4
 8009574:	f004 fdf7 	bl	800e166 <HAL_TIM_PWM_ConfigChannel>
 8009578:	4605      	mov	r5, r0
 800957a:	b108      	cbz	r0, 8009580 <main+0x40c>
 800957c:	b672      	cpsid	i
  while (1)
 800957e:	e7fe      	b.n	800957e <main+0x40a>
  HAL_TIM_MspPostInit(&htim2);
 8009580:	4620      	mov	r0, r4
 8009582:	f000 ff8d 	bl	800a4a0 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009586:	2210      	movs	r2, #16
 8009588:	4629      	mov	r1, r5
 800958a:	a810      	add	r0, sp, #64	; 0x40
 800958c:	f008 ff58 	bl	8012440 <memset>
  htim5.Instance = TIM5;
 8009590:	4c63      	ldr	r4, [pc, #396]	; (8009720 <main+0x5ac>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009592:	221c      	movs	r2, #28
 8009594:	4629      	mov	r1, r5
 8009596:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009598:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 800959c:	f008 ff50 	bl	8012440 <memset>
  htim5.Instance = TIM5;
 80095a0:	4b60      	ldr	r3, [pc, #384]	; (8009724 <main+0x5b0>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095a2:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80095a4:	4620      	mov	r0, r4
  htim5.Init.Prescaler = 0;
 80095a6:	e9c4 3500 	strd	r3, r5, [r4]
  htim5.Init.Period = 0xffff;
 80095aa:	e9c4 5602 	strd	r5, r6, [r4, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095ae:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80095b0:	f004 fc56 	bl	800de60 <HAL_TIM_Base_Init>
 80095b4:	b108      	cbz	r0, 80095ba <main+0x446>
 80095b6:	b672      	cpsid	i
  while (1)
 80095b8:	e7fe      	b.n	80095b8 <main+0x444>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80095ba:	a910      	add	r1, sp, #64	; 0x40
 80095bc:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80095be:	9710      	str	r7, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80095c0:	f004 ff29 	bl	800e416 <HAL_TIM_ConfigClockSource>
 80095c4:	b108      	cbz	r0, 80095ca <main+0x456>
 80095c6:	b672      	cpsid	i
  while (1)
 80095c8:	e7fe      	b.n	80095c8 <main+0x454>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80095ca:	4855      	ldr	r0, [pc, #340]	; (8009720 <main+0x5ac>)
 80095cc:	f004 fca0 	bl	800df10 <HAL_TIM_PWM_Init>
 80095d0:	b108      	cbz	r0, 80095d6 <main+0x462>
 80095d2:	b672      	cpsid	i
  while (1)
 80095d4:	e7fe      	b.n	80095d4 <main+0x460>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095d6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80095da:	a90e      	add	r1, sp, #56	; 0x38
 80095dc:	4850      	ldr	r0, [pc, #320]	; (8009720 <main+0x5ac>)
 80095de:	f005 f955 	bl	800e88c <HAL_TIMEx_MasterConfigSynchronization>
 80095e2:	4602      	mov	r2, r0
 80095e4:	b108      	cbz	r0, 80095ea <main+0x476>
 80095e6:	b672      	cpsid	i
  while (1)
 80095e8:	e7fe      	b.n	80095e8 <main+0x474>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095ea:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80095ec:	e9cd 3015 	strd	r3, r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095f0:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095f2:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095f4:	a915      	add	r1, sp, #84	; 0x54
 80095f6:	484a      	ldr	r0, [pc, #296]	; (8009720 <main+0x5ac>)
 80095f8:	f004 fdb5 	bl	800e166 <HAL_TIM_PWM_ConfigChannel>
 80095fc:	b108      	cbz	r0, 8009602 <main+0x48e>
 80095fe:	b672      	cpsid	i
  while (1)
 8009600:	e7fe      	b.n	8009600 <main+0x48c>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009602:	4847      	ldr	r0, [pc, #284]	; (8009720 <main+0x5ac>)
 8009604:	2204      	movs	r2, #4
 8009606:	a915      	add	r1, sp, #84	; 0x54
 8009608:	f004 fdad 	bl	800e166 <HAL_TIM_PWM_ConfigChannel>
 800960c:	b108      	cbz	r0, 8009612 <main+0x49e>
 800960e:	b672      	cpsid	i
  while (1)
 8009610:	e7fe      	b.n	8009610 <main+0x49c>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009612:	4843      	ldr	r0, [pc, #268]	; (8009720 <main+0x5ac>)
 8009614:	2208      	movs	r2, #8
 8009616:	a915      	add	r1, sp, #84	; 0x54
 8009618:	f004 fda5 	bl	800e166 <HAL_TIM_PWM_ConfigChannel>
 800961c:	b108      	cbz	r0, 8009622 <main+0x4ae>
 800961e:	b672      	cpsid	i
  while (1)
 8009620:	e7fe      	b.n	8009620 <main+0x4ac>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009622:	483f      	ldr	r0, [pc, #252]	; (8009720 <main+0x5ac>)
 8009624:	220c      	movs	r2, #12
 8009626:	a915      	add	r1, sp, #84	; 0x54
 8009628:	f004 fd9d 	bl	800e166 <HAL_TIM_PWM_ConfigChannel>
 800962c:	4604      	mov	r4, r0
 800962e:	b108      	cbz	r0, 8009634 <main+0x4c0>
 8009630:	b672      	cpsid	i
  while (1)
 8009632:	e7fe      	b.n	8009632 <main+0x4be>
  HAL_TIM_MspPostInit(&htim5);
 8009634:	483a      	ldr	r0, [pc, #232]	; (8009720 <main+0x5ac>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009636:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800973c <main+0x5c8>
  HAL_TIM_MspPostInit(&htim5);
 800963a:	f000 ff31 	bl	800a4a0 <HAL_TIM_MspPostInit>
  hspi1.Instance = SPI1;
 800963e:	483a      	ldr	r0, [pc, #232]	; (8009728 <main+0x5b4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009640:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009644:	e9c0 8300 	strd	r8, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009648:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800964c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009650:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8009654:	2308      	movs	r3, #8
 8009656:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800965a:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800965c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009660:	e9c0 240b 	strd	r2, r4, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009664:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009666:	6144      	str	r4, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009668:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800966a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800966c:	f003 ff3a 	bl	800d4e4 <HAL_SPI_Init>
 8009670:	b108      	cbz	r0, 8009676 <main+0x502>
 8009672:	b672      	cpsid	i
  while (1)
 8009674:	e7fe      	b.n	8009674 <main+0x500>
  htim4.Instance = TIM4;
 8009676:	4c2d      	ldr	r4, [pc, #180]	; (800972c <main+0x5b8>)
 8009678:	4b2d      	ldr	r3, [pc, #180]	; (8009730 <main+0x5bc>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800967a:	60a0      	str	r0, [r4, #8]
  htim4.Init.Prescaler = 0;
 800967c:	e9c4 3000 	strd	r3, r0, [r4]
  htim4.Init.Period = 65535;
 8009680:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009684:	e9c4 3003 	strd	r3, r0, [r4, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009688:	2303      	movs	r3, #3
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800968a:	e9cd 3015 	strd	r3, r0, [sp, #84]	; 0x54
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800968e:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009690:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009694:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009698:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800969c:	e9cd 301b 	strd	r3, r0, [sp, #108]	; 0x6c
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096a0:	61a0      	str	r0, [r4, #24]
  sConfig.IC2Filter = 0;
 80096a2:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80096a4:	a915      	add	r1, sp, #84	; 0x54
 80096a6:	4620      	mov	r0, r4
 80096a8:	f004 fc8a 	bl	800dfc0 <HAL_TIM_Encoder_Init>
 80096ac:	b108      	cbz	r0, 80096b2 <main+0x53e>
 80096ae:	b672      	cpsid	i
  while (1)
 80096b0:	e7fe      	b.n	80096b0 <main+0x53c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096b2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80096b6:	a910      	add	r1, sp, #64	; 0x40
 80096b8:	4620      	mov	r0, r4
 80096ba:	f005 f8e7 	bl	800e88c <HAL_TIMEx_MasterConfigSynchronization>
 80096be:	4604      	mov	r4, r0
 80096c0:	b108      	cbz	r0, 80096c6 <main+0x552>
 80096c2:	b672      	cpsid	i
  while (1)
 80096c4:	e7fe      	b.n	80096c4 <main+0x550>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80096c6:	4601      	mov	r1, r0
 80096c8:	2210      	movs	r2, #16
 80096ca:	a815      	add	r0, sp, #84	; 0x54
 80096cc:	f008 feb8 	bl	8012440 <memset>
  hsdadc1.Instance = SDADC1;
 80096d0:	4818      	ldr	r0, [pc, #96]	; (8009734 <main+0x5c0>)
 80096d2:	4b19      	ldr	r3, [pc, #100]	; (8009738 <main+0x5c4>)
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80096d4:	6104      	str	r4, [r0, #16]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80096d6:	e9c0 3400 	strd	r3, r4, [r0]
  hsdadc1.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 80096da:	f04f 0e02 	mov.w	lr, #2
 80096de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80096e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hsdadc1.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 80096e6:	e9c0 e30b 	strd	lr, r3, [r0, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 80096ea:	f003 fc25 	bl	800cf38 <HAL_SDADC_Init>
 80096ee:	b108      	cbz	r0, 80096f4 <main+0x580>
 80096f0:	b672      	cpsid	i
  while (1)
 80096f2:	e7fe      	b.n	80096f2 <main+0x57e>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 80096f4:	2100      	movs	r1, #0
 80096f6:	480f      	ldr	r0, [pc, #60]	; (8009734 <main+0x5c0>)
 80096f8:	f003 fd0a 	bl	800d110 <HAL_SDADC_SelectInjectedDelay>
 80096fc:	4601      	mov	r1, r0
 80096fe:	b108      	cbz	r0, 8009704 <main+0x590>
 8009700:	b672      	cpsid	i
  while (1)
 8009702:	e7fe      	b.n	8009702 <main+0x58e>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc1, SDADC_EXT_TRIG_TIM13_CC1, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8009704:	480b      	ldr	r0, [pc, #44]	; (8009734 <main+0x5c0>)
 8009706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800970a:	f003 fce1 	bl	800d0d0 <HAL_SDADC_SelectInjectedExtTrigger>
 800970e:	b1b8      	cbz	r0, 8009740 <main+0x5cc>
 8009710:	b672      	cpsid	i
  while (1)
 8009712:	e7fe      	b.n	8009712 <main+0x59e>
 8009714:	20003208 	.word	0x20003208
 8009718:	40003800 	.word	0x40003800
 800971c:	20003688 	.word	0x20003688
 8009720:	200033d0 	.word	0x200033d0
 8009724:	40000c00 	.word	0x40000c00
 8009728:	20003624 	.word	0x20003624
 800972c:	2000326c 	.word	0x2000326c
 8009730:	40000800 	.word	0x40000800
 8009734:	20003530 	.word	0x20003530
 8009738:	40016000 	.word	0x40016000
 800973c:	40013000 	.word	0x40013000
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8009740:	4892      	ldr	r0, [pc, #584]	; (800998c <main+0x818>)
 8009742:	2102      	movs	r1, #2
 8009744:	f003 fcb2 	bl	800d0ac <HAL_SDADC_SelectInjectedTrigger>
 8009748:	b108      	cbz	r0, 800974e <main+0x5da>
 800974a:	b672      	cpsid	i
  while (1)
 800974c:	e7fe      	b.n	800974c <main+0x5d8>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_0|SDADC_CHANNEL_1
 800974e:	4990      	ldr	r1, [pc, #576]	; (8009990 <main+0x81c>)
 8009750:	488e      	ldr	r0, [pc, #568]	; (800998c <main+0x818>)
 8009752:	2201      	movs	r2, #1
 8009754:	f003 fc88 	bl	800d068 <HAL_SDADC_InjectedConfigChannel>
 8009758:	4601      	mov	r1, r0
 800975a:	b108      	cbz	r0, 8009760 <main+0x5ec>
 800975c:	b672      	cpsid	i
  while (1)
 800975e:	e7fe      	b.n	800975e <main+0x5ea>
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8009760:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8009764:	e9cd 3015 	strd	r3, r0, [sp, #84]	; 0x54
  ConfParamStruct.Offset = 0;
 8009768:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 800976c:	aa15      	add	r2, sp, #84	; 0x54
 800976e:	4887      	ldr	r0, [pc, #540]	; (800998c <main+0x818>)
 8009770:	f003 fc2a 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 8009774:	b108      	cbz	r0, 800977a <main+0x606>
 8009776:	b672      	cpsid	i
  while (1)
 8009778:	e7fe      	b.n	8009778 <main+0x604>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 800977a:	4884      	ldr	r0, [pc, #528]	; (800998c <main+0x818>)
 800977c:	aa15      	add	r2, sp, #84	; 0x54
 800977e:	2101      	movs	r1, #1
 8009780:	f003 fc22 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 8009784:	b108      	cbz	r0, 800978a <main+0x616>
 8009786:	b672      	cpsid	i
  while (1)
 8009788:	e7fe      	b.n	8009788 <main+0x614>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 800978a:	aa15      	add	r2, sp, #84	; 0x54
 800978c:	487f      	ldr	r0, [pc, #508]	; (800998c <main+0x818>)
 800978e:	2102      	movs	r1, #2
 8009790:	f003 fc1a 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 8009794:	4602      	mov	r2, r0
 8009796:	b108      	cbz	r0, 800979c <main+0x628>
 8009798:	b672      	cpsid	i
  while (1)
 800979a:	e7fe      	b.n	800979a <main+0x626>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_0, SDADC_CONF_INDEX_0) != HAL_OK)
 800979c:	487b      	ldr	r0, [pc, #492]	; (800998c <main+0x818>)
 800979e:	2101      	movs	r1, #1
 80097a0:	f003 fc34 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80097a4:	4602      	mov	r2, r0
 80097a6:	b108      	cbz	r0, 80097ac <main+0x638>
 80097a8:	b672      	cpsid	i
  while (1)
 80097aa:	e7fe      	b.n	80097aa <main+0x636>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_1, SDADC_CONF_INDEX_0) != HAL_OK)
 80097ac:	4979      	ldr	r1, [pc, #484]	; (8009994 <main+0x820>)
 80097ae:	4877      	ldr	r0, [pc, #476]	; (800998c <main+0x818>)
 80097b0:	f003 fc2c 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80097b4:	4602      	mov	r2, r0
 80097b6:	b108      	cbz	r0, 80097bc <main+0x648>
 80097b8:	b672      	cpsid	i
  while (1)
 80097ba:	e7fe      	b.n	80097ba <main+0x646>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_2, SDADC_CONF_INDEX_0) != HAL_OK)
 80097bc:	4976      	ldr	r1, [pc, #472]	; (8009998 <main+0x824>)
 80097be:	4873      	ldr	r0, [pc, #460]	; (800998c <main+0x818>)
 80097c0:	f003 fc24 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80097c4:	b108      	cbz	r0, 80097ca <main+0x656>
 80097c6:	b672      	cpsid	i
  while (1)
 80097c8:	e7fe      	b.n	80097c8 <main+0x654>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_3, SDADC_CONF_INDEX_1) != HAL_OK)
 80097ca:	4974      	ldr	r1, [pc, #464]	; (800999c <main+0x828>)
 80097cc:	486f      	ldr	r0, [pc, #444]	; (800998c <main+0x818>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	f003 fc1c 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80097d4:	b108      	cbz	r0, 80097da <main+0x666>
 80097d6:	b672      	cpsid	i
  while (1)
 80097d8:	e7fe      	b.n	80097d8 <main+0x664>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_1) != HAL_OK)
 80097da:	4971      	ldr	r1, [pc, #452]	; (80099a0 <main+0x82c>)
 80097dc:	486b      	ldr	r0, [pc, #428]	; (800998c <main+0x818>)
 80097de:	2201      	movs	r2, #1
 80097e0:	f003 fc14 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80097e4:	b108      	cbz	r0, 80097ea <main+0x676>
 80097e6:	b672      	cpsid	i
  while (1)
 80097e8:	e7fe      	b.n	80097e8 <main+0x674>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_1) != HAL_OK)
 80097ea:	496e      	ldr	r1, [pc, #440]	; (80099a4 <main+0x830>)
 80097ec:	4867      	ldr	r0, [pc, #412]	; (800998c <main+0x818>)
 80097ee:	2201      	movs	r2, #1
 80097f0:	f003 fc0c 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80097f4:	b108      	cbz	r0, 80097fa <main+0x686>
 80097f6:	b672      	cpsid	i
  while (1)
 80097f8:	e7fe      	b.n	80097f8 <main+0x684>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_2) != HAL_OK)
 80097fa:	496b      	ldr	r1, [pc, #428]	; (80099a8 <main+0x834>)
 80097fc:	4863      	ldr	r0, [pc, #396]	; (800998c <main+0x818>)
 80097fe:	2202      	movs	r2, #2
 8009800:	f003 fc04 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 8009804:	b108      	cbz	r0, 800980a <main+0x696>
 8009806:	b672      	cpsid	i
  while (1)
 8009808:	e7fe      	b.n	8009808 <main+0x694>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_7, SDADC_CONF_INDEX_2) != HAL_OK)
 800980a:	4968      	ldr	r1, [pc, #416]	; (80099ac <main+0x838>)
 800980c:	485f      	ldr	r0, [pc, #380]	; (800998c <main+0x818>)
 800980e:	2202      	movs	r2, #2
 8009810:	f003 fbfc 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 8009814:	b108      	cbz	r0, 800981a <main+0x6a6>
 8009816:	b672      	cpsid	i
  while (1)
 8009818:	e7fe      	b.n	8009818 <main+0x6a4>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_2) != HAL_OK)
 800981a:	4965      	ldr	r1, [pc, #404]	; (80099b0 <main+0x83c>)
 800981c:	485b      	ldr	r0, [pc, #364]	; (800998c <main+0x818>)
 800981e:	2202      	movs	r2, #2
 8009820:	f003 fbf4 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 8009824:	4605      	mov	r5, r0
 8009826:	b108      	cbz	r0, 800982c <main+0x6b8>
 8009828:	b672      	cpsid	i
  while (1)
 800982a:	e7fe      	b.n	800982a <main+0x6b6>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 800982c:	4601      	mov	r1, r0
 800982e:	2210      	movs	r2, #16
 8009830:	a815      	add	r0, sp, #84	; 0x54
 8009832:	f008 fe05 	bl	8012440 <memset>
  hsdadc2.Instance = SDADC2;
 8009836:	4c5f      	ldr	r4, [pc, #380]	; (80099b4 <main+0x840>)
 8009838:	4b5f      	ldr	r3, [pc, #380]	; (80099b8 <main+0x844>)
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 800983a:	6125      	str	r5, [r4, #16]
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 800983c:	e9c4 3500 	strd	r3, r5, [r4]
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8009840:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hsdadc2.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8009844:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8009848:	2502      	movs	r5, #2
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 800984a:	4620      	mov	r0, r4
  hsdadc2.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 800984c:	e9c4 560b 	strd	r5, r6, [r4, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8009850:	f003 fb72 	bl	800cf38 <HAL_SDADC_Init>
 8009854:	4601      	mov	r1, r0
 8009856:	b108      	cbz	r0, 800985c <main+0x6e8>
 8009858:	b672      	cpsid	i
  while (1)
 800985a:	e7fe      	b.n	800985a <main+0x6e6>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc2, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 800985c:	4620      	mov	r0, r4
 800985e:	f003 fc57 	bl	800d110 <HAL_SDADC_SelectInjectedDelay>
 8009862:	b108      	cbz	r0, 8009868 <main+0x6f4>
 8009864:	b672      	cpsid	i
  while (1)
 8009866:	e7fe      	b.n	8009866 <main+0x6f2>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc2, SDADC_EXT_TRIG_TIM12_CC1, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8009868:	4632      	mov	r2, r6
 800986a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800986e:	4620      	mov	r0, r4
 8009870:	f003 fc2e 	bl	800d0d0 <HAL_SDADC_SelectInjectedExtTrigger>
 8009874:	b108      	cbz	r0, 800987a <main+0x706>
 8009876:	b672      	cpsid	i
  while (1)
 8009878:	e7fe      	b.n	8009878 <main+0x704>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc2, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 800987a:	4629      	mov	r1, r5
 800987c:	4620      	mov	r0, r4
 800987e:	f003 fc15 	bl	800d0ac <HAL_SDADC_SelectInjectedTrigger>
 8009882:	b108      	cbz	r0, 8009888 <main+0x714>
 8009884:	b672      	cpsid	i
  while (1)
 8009886:	e7fe      	b.n	8009886 <main+0x712>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc2, SDADC_CHANNEL_0|SDADC_CHANNEL_1
 8009888:	494c      	ldr	r1, [pc, #304]	; (80099bc <main+0x848>)
 800988a:	484a      	ldr	r0, [pc, #296]	; (80099b4 <main+0x840>)
 800988c:	2201      	movs	r2, #1
 800988e:	f003 fbeb 	bl	800d068 <HAL_SDADC_InjectedConfigChannel>
 8009892:	4601      	mov	r1, r0
 8009894:	b108      	cbz	r0, 800989a <main+0x726>
 8009896:	b672      	cpsid	i
  while (1)
 8009898:	e7fe      	b.n	8009898 <main+0x724>
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 800989a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  ConfParamStruct.Gain = SDADC_GAIN_1;
 800989e:	e9cd 3015 	strd	r3, r0, [sp, #84]	; 0x54
  ConfParamStruct.Offset = 0;
 80098a2:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 80098a6:	aa15      	add	r2, sp, #84	; 0x54
 80098a8:	4842      	ldr	r0, [pc, #264]	; (80099b4 <main+0x840>)
 80098aa:	f003 fb8d 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 80098ae:	b108      	cbz	r0, 80098b4 <main+0x740>
 80098b0:	b672      	cpsid	i
  while (1)
 80098b2:	e7fe      	b.n	80098b2 <main+0x73e>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 80098b4:	483f      	ldr	r0, [pc, #252]	; (80099b4 <main+0x840>)
 80098b6:	aa15      	add	r2, sp, #84	; 0x54
 80098b8:	2101      	movs	r1, #1
 80098ba:	f003 fb85 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 80098be:	b108      	cbz	r0, 80098c4 <main+0x750>
 80098c0:	b672      	cpsid	i
  while (1)
 80098c2:	e7fe      	b.n	80098c2 <main+0x74e>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 80098c4:	aa15      	add	r2, sp, #84	; 0x54
 80098c6:	483b      	ldr	r0, [pc, #236]	; (80099b4 <main+0x840>)
 80098c8:	2102      	movs	r1, #2
 80098ca:	f003 fb7d 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 80098ce:	4602      	mov	r2, r0
 80098d0:	b108      	cbz	r0, 80098d6 <main+0x762>
 80098d2:	b672      	cpsid	i
  while (1)
 80098d4:	e7fe      	b.n	80098d4 <main+0x760>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_0, SDADC_CONF_INDEX_0) != HAL_OK)
 80098d6:	4837      	ldr	r0, [pc, #220]	; (80099b4 <main+0x840>)
 80098d8:	2101      	movs	r1, #1
 80098da:	f003 fb97 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80098de:	b108      	cbz	r0, 80098e4 <main+0x770>
 80098e0:	b672      	cpsid	i
  while (1)
 80098e2:	e7fe      	b.n	80098e2 <main+0x76e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_1, SDADC_CONF_INDEX_1) != HAL_OK)
 80098e4:	492b      	ldr	r1, [pc, #172]	; (8009994 <main+0x820>)
 80098e6:	4833      	ldr	r0, [pc, #204]	; (80099b4 <main+0x840>)
 80098e8:	2201      	movs	r2, #1
 80098ea:	f003 fb8f 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80098ee:	b108      	cbz	r0, 80098f4 <main+0x780>
 80098f0:	b672      	cpsid	i
  while (1)
 80098f2:	e7fe      	b.n	80098f2 <main+0x77e>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_2, SDADC_CONF_INDEX_2) != HAL_OK)
 80098f4:	4928      	ldr	r1, [pc, #160]	; (8009998 <main+0x824>)
 80098f6:	482f      	ldr	r0, [pc, #188]	; (80099b4 <main+0x840>)
 80098f8:	2202      	movs	r2, #2
 80098fa:	f003 fb87 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80098fe:	4605      	mov	r5, r0
 8009900:	b108      	cbz	r0, 8009906 <main+0x792>
 8009902:	b672      	cpsid	i
  while (1)
 8009904:	e7fe      	b.n	8009904 <main+0x790>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8009906:	4601      	mov	r1, r0
 8009908:	2210      	movs	r2, #16
 800990a:	a815      	add	r0, sp, #84	; 0x54
 800990c:	f008 fd98 	bl	8012440 <memset>
  hsdadc3.Instance = SDADC3;
 8009910:	4c2b      	ldr	r4, [pc, #172]	; (80099c0 <main+0x84c>)
 8009912:	4b2c      	ldr	r3, [pc, #176]	; (80099c4 <main+0x850>)
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8009914:	6125      	str	r5, [r4, #16]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8009916:	e9c4 3500 	strd	r3, r5, [r4]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 800991a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hsdadc3.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 800991e:	2302      	movs	r3, #2
 8009920:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8009924:	4620      	mov	r0, r4
  hsdadc3.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8009926:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 800992a:	f003 fb05 	bl	800cf38 <HAL_SDADC_Init>
 800992e:	4601      	mov	r1, r0
 8009930:	b108      	cbz	r0, 8009936 <main+0x7c2>
 8009932:	b672      	cpsid	i
  while (1)
 8009934:	e7fe      	b.n	8009934 <main+0x7c0>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc3, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8009936:	4620      	mov	r0, r4
 8009938:	f003 fbea 	bl	800d110 <HAL_SDADC_SelectInjectedDelay>
 800993c:	b108      	cbz	r0, 8009942 <main+0x7ce>
 800993e:	b672      	cpsid	i
  while (1)
 8009940:	e7fe      	b.n	8009940 <main+0x7cc>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc3, SDADC_EXT_TRIG_TIM12_CC2, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8009942:	462a      	mov	r2, r5
 8009944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009948:	4620      	mov	r0, r4
 800994a:	f003 fbc1 	bl	800d0d0 <HAL_SDADC_SelectInjectedExtTrigger>
 800994e:	b108      	cbz	r0, 8009954 <main+0x7e0>
 8009950:	b672      	cpsid	i
  while (1)
 8009952:	e7fe      	b.n	8009952 <main+0x7de>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc3, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8009954:	481a      	ldr	r0, [pc, #104]	; (80099c0 <main+0x84c>)
 8009956:	2102      	movs	r1, #2
 8009958:	f003 fba8 	bl	800d0ac <HAL_SDADC_SelectInjectedTrigger>
 800995c:	b108      	cbz	r0, 8009962 <main+0x7ee>
 800995e:	b672      	cpsid	i
  while (1)
 8009960:	e7fe      	b.n	8009960 <main+0x7ec>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc3, SDADC_CHANNEL_0|SDADC_CHANNEL_2
 8009962:	4919      	ldr	r1, [pc, #100]	; (80099c8 <main+0x854>)
 8009964:	4816      	ldr	r0, [pc, #88]	; (80099c0 <main+0x84c>)
 8009966:	2201      	movs	r2, #1
 8009968:	f003 fb7e 	bl	800d068 <HAL_SDADC_InjectedConfigChannel>
 800996c:	4601      	mov	r1, r0
 800996e:	b108      	cbz	r0, 8009974 <main+0x800>
 8009970:	b672      	cpsid	i
  while (1)
 8009972:	e7fe      	b.n	8009972 <main+0x7fe>
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8009974:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  ConfParamStruct.Offset = 0;
 8009978:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 800997c:	aa15      	add	r2, sp, #84	; 0x54
 800997e:	4810      	ldr	r0, [pc, #64]	; (80099c0 <main+0x84c>)
 8009980:	f003 fb22 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 8009984:	b310      	cbz	r0, 80099cc <main+0x858>
 8009986:	b672      	cpsid	i
  while (1)
 8009988:	e7fe      	b.n	8009988 <main+0x814>
 800998a:	bf00      	nop
 800998c:	20003530 	.word	0x20003530
 8009990:	000f01ff 	.word	0x000f01ff
 8009994:	00010002 	.word	0x00010002
 8009998:	00020004 	.word	0x00020004
 800999c:	00030008 	.word	0x00030008
 80099a0:	00040010 	.word	0x00040010
 80099a4:	00050020 	.word	0x00050020
 80099a8:	00060040 	.word	0x00060040
 80099ac:	00070080 	.word	0x00070080
 80099b0:	00080100 	.word	0x00080100
 80099b4:	200035e0 	.word	0x200035e0
 80099b8:	40016400 	.word	0x40016400
 80099bc:	00030007 	.word	0x00030007
 80099c0:	200037f4 	.word	0x200037f4
 80099c4:	40016800 	.word	0x40016800
 80099c8:	000e0155 	.word	0x000e0155
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 80099cc:	489d      	ldr	r0, [pc, #628]	; (8009c44 <main+0xad0>)
 80099ce:	aa15      	add	r2, sp, #84	; 0x54
 80099d0:	2101      	movs	r1, #1
 80099d2:	f003 faf9 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 80099d6:	b108      	cbz	r0, 80099dc <main+0x868>
 80099d8:	b672      	cpsid	i
  while (1)
 80099da:	e7fe      	b.n	80099da <main+0x866>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 80099dc:	aa15      	add	r2, sp, #84	; 0x54
 80099de:	4899      	ldr	r0, [pc, #612]	; (8009c44 <main+0xad0>)
 80099e0:	2102      	movs	r1, #2
 80099e2:	f003 faf1 	bl	800cfc8 <HAL_SDADC_PrepareChannelConfig>
 80099e6:	4602      	mov	r2, r0
 80099e8:	b108      	cbz	r0, 80099ee <main+0x87a>
 80099ea:	b672      	cpsid	i
  while (1)
 80099ec:	e7fe      	b.n	80099ec <main+0x878>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_0, SDADC_CONF_INDEX_0) != HAL_OK)
 80099ee:	4895      	ldr	r0, [pc, #596]	; (8009c44 <main+0xad0>)
 80099f0:	2101      	movs	r1, #1
 80099f2:	f003 fb0b 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 80099f6:	4602      	mov	r2, r0
 80099f8:	b108      	cbz	r0, 80099fe <main+0x88a>
 80099fa:	b672      	cpsid	i
  while (1)
 80099fc:	e7fe      	b.n	80099fc <main+0x888>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_2, SDADC_CONF_INDEX_0) != HAL_OK)
 80099fe:	4992      	ldr	r1, [pc, #584]	; (8009c48 <main+0xad4>)
 8009a00:	4890      	ldr	r0, [pc, #576]	; (8009c44 <main+0xad0>)
 8009a02:	f003 fb03 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 8009a06:	b108      	cbz	r0, 8009a0c <main+0x898>
 8009a08:	b672      	cpsid	i
  while (1)
 8009a0a:	e7fe      	b.n	8009a0a <main+0x896>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_4, SDADC_CONF_INDEX_1) != HAL_OK)
 8009a0c:	498f      	ldr	r1, [pc, #572]	; (8009c4c <main+0xad8>)
 8009a0e:	488d      	ldr	r0, [pc, #564]	; (8009c44 <main+0xad0>)
 8009a10:	2201      	movs	r2, #1
 8009a12:	f003 fafb 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 8009a16:	b108      	cbz	r0, 8009a1c <main+0x8a8>
 8009a18:	b672      	cpsid	i
  while (1)
 8009a1a:	e7fe      	b.n	8009a1a <main+0x8a6>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_6, SDADC_CONF_INDEX_1) != HAL_OK)
 8009a1c:	498c      	ldr	r1, [pc, #560]	; (8009c50 <main+0xadc>)
 8009a1e:	4889      	ldr	r0, [pc, #548]	; (8009c44 <main+0xad0>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	f003 faf3 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 8009a26:	b108      	cbz	r0, 8009a2c <main+0x8b8>
 8009a28:	b672      	cpsid	i
  while (1)
 8009a2a:	e7fe      	b.n	8009a2a <main+0x8b6>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_8, SDADC_CONF_INDEX_2) != HAL_OK)
 8009a2c:	4989      	ldr	r1, [pc, #548]	; (8009c54 <main+0xae0>)
 8009a2e:	4885      	ldr	r0, [pc, #532]	; (8009c44 <main+0xad0>)
 8009a30:	2202      	movs	r2, #2
 8009a32:	f003 faeb 	bl	800d00c <HAL_SDADC_AssociateChannelConfig>
 8009a36:	b108      	cbz	r0, 8009a3c <main+0x8c8>
 8009a38:	b672      	cpsid	i
  while (1)
 8009a3a:	e7fe      	b.n	8009a3a <main+0x8c6>
  hcan.Instance = CAN;
 8009a3c:	4886      	ldr	r0, [pc, #536]	; (8009c58 <main+0xae4>)
  hcan.Init.Prescaler = 16;
 8009a3e:	4b87      	ldr	r3, [pc, #540]	; (8009c5c <main+0xae8>)
 8009a40:	2410      	movs	r4, #16
 8009a42:	e9c0 3400 	strd	r3, r4, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009a46:	2300      	movs	r3, #0
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8009a48:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8009a4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009a50:	6183      	str	r3, [r0, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009a52:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009a54:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8009a58:	e9c0 c204 	strd	ip, r2, [r0, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009a5c:	f000 feb4 	bl	800a7c8 <HAL_CAN_Init>
 8009a60:	4603      	mov	r3, r0
 8009a62:	b108      	cbz	r0, 8009a68 <main+0x8f4>
 8009a64:	b672      	cpsid	i
  while (1)
 8009a66:	e7fe      	b.n	8009a66 <main+0x8f2>
  huart1.Instance = USART1;
 8009a68:	487d      	ldr	r0, [pc, #500]	; (8009c60 <main+0xaec>)
  huart1.Init.BaudRate = 38400;
 8009a6a:	4f7e      	ldr	r7, [pc, #504]	; (8009c64 <main+0xaf0>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8009a6c:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 38400;
 8009a6e:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8009a72:	e9c0 7200 	strd	r7, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009a76:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009a78:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a7c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009a80:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009a84:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009a86:	f005 f8f6 	bl	800ec76 <HAL_UART_Init>
 8009a8a:	b108      	cbz	r0, 8009a90 <main+0x91c>
 8009a8c:	b672      	cpsid	i
  while (1)
 8009a8e:	e7fe      	b.n	8009a8e <main+0x91a>
  htim6.Instance = TIM6;
 8009a90:	4d75      	ldr	r5, [pc, #468]	; (8009c68 <main+0xaf4>)
  htim6.Init.Prescaler = 99;
 8009a92:	4e76      	ldr	r6, [pc, #472]	; (8009c6c <main+0xaf8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a94:	60a8      	str	r0, [r5, #8]
  htim6.Init.Prescaler = 99;
 8009a96:	2363      	movs	r3, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a98:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  htim6.Init.Prescaler = 99;
 8009a9c:	e9c5 6300 	strd	r6, r3, [r5]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009aa0:	61a8      	str	r0, [r5, #24]
  htim6.Init.Period = 0xbb80;
 8009aa2:	f64b 3680 	movw	r6, #48000	; 0xbb80
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009aa6:	4628      	mov	r0, r5
  htim6.Init.Period = 0xbb80;
 8009aa8:	60ee      	str	r6, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009aaa:	f004 f9d9 	bl	800de60 <HAL_TIM_Base_Init>
 8009aae:	b108      	cbz	r0, 8009ab4 <main+0x940>
 8009ab0:	b672      	cpsid	i
  while (1)
 8009ab2:	e7fe      	b.n	8009ab2 <main+0x93e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009ab4:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ab6:	e9cd 3015 	strd	r3, r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009aba:	a915      	add	r1, sp, #84	; 0x54
 8009abc:	4628      	mov	r0, r5
 8009abe:	f004 fee5 	bl	800e88c <HAL_TIMEx_MasterConfigSynchronization>
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	b108      	cbz	r0, 8009aca <main+0x956>
 8009ac6:	b672      	cpsid	i
  while (1)
 8009ac8:	e7fe      	b.n	8009ac8 <main+0x954>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009aca:	4622      	mov	r2, r4
 8009acc:	4601      	mov	r1, r0
 8009ace:	a810      	add	r0, sp, #64	; 0x40
 8009ad0:	f008 fcb6 	bl	8012440 <memset>
  htim12.Instance = TIM12;
 8009ad4:	4c66      	ldr	r4, [pc, #408]	; (8009c70 <main+0xafc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ad6:	221c      	movs	r2, #28
 8009ad8:	4629      	mov	r1, r5
 8009ada:	a815      	add	r0, sp, #84	; 0x54
 8009adc:	f008 fcb0 	bl	8012440 <memset>
  htim12.Instance = TIM12;
 8009ae0:	4b64      	ldr	r3, [pc, #400]	; (8009c74 <main+0xb00>)
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ae2:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8009ae4:	4620      	mov	r0, r4
  htim12.Init.Prescaler = 0;
 8009ae6:	e9c4 3500 	strd	r3, r5, [r4]
  htim12.Init.Period = 0xbb80;
 8009aea:	e9c4 5602 	strd	r5, r6, [r4, #8]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009aee:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8009af0:	f004 f9b6 	bl	800de60 <HAL_TIM_Base_Init>
 8009af4:	b108      	cbz	r0, 8009afa <main+0x986>
 8009af6:	b672      	cpsid	i
  while (1)
 8009af8:	e7fe      	b.n	8009af8 <main+0x984>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8009afe:	a910      	add	r1, sp, #64	; 0x40
 8009b00:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b02:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8009b04:	f004 fc87 	bl	800e416 <HAL_TIM_ConfigClockSource>
 8009b08:	b108      	cbz	r0, 8009b0e <main+0x99a>
 8009b0a:	b672      	cpsid	i
  while (1)
 8009b0c:	e7fe      	b.n	8009b0c <main+0x998>
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f004 f9d2 	bl	800deb8 <HAL_TIM_OC_Init>
 8009b14:	4602      	mov	r2, r0
 8009b16:	b108      	cbz	r0, 8009b1c <main+0x9a8>
 8009b18:	b672      	cpsid	i
  while (1)
 8009b1a:	e7fe      	b.n	8009b1a <main+0x9a6>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8009b1c:	2330      	movs	r3, #48	; 0x30
  sConfigOC.Pulse = 0;
 8009b1e:	e9cd 3015 	strd	r3, r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b22:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b24:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b26:	a915      	add	r1, sp, #84	; 0x54
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f004 facb 	bl	800e0c4 <HAL_TIM_OC_ConfigChannel>
 8009b2e:	b108      	cbz	r0, 8009b34 <main+0x9c0>
 8009b30:	b672      	cpsid	i
  while (1)
 8009b32:	e7fe      	b.n	8009b32 <main+0x9be>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009b34:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009b36:	2204      	movs	r2, #4
 8009b38:	4620      	mov	r0, r4
 8009b3a:	a915      	add	r1, sp, #84	; 0x54
 8009b3c:	f004 fac2 	bl	800e0c4 <HAL_TIM_OC_ConfigChannel>
 8009b40:	4604      	mov	r4, r0
 8009b42:	b108      	cbz	r0, 8009b48 <main+0x9d4>
 8009b44:	b672      	cpsid	i
  while (1)
 8009b46:	e7fe      	b.n	8009b46 <main+0x9d2>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009b48:	4601      	mov	r1, r0
 8009b4a:	221c      	movs	r2, #28
 8009b4c:	a815      	add	r0, sp, #84	; 0x54
 8009b4e:	f008 fc77 	bl	8012440 <memset>
  htim13.Instance = TIM13;
 8009b52:	4849      	ldr	r0, [pc, #292]	; (8009c78 <main+0xb04>)
 8009b54:	4b49      	ldr	r3, [pc, #292]	; (8009c7c <main+0xb08>)
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b56:	6104      	str	r4, [r0, #16]
  htim13.Init.Prescaler = 0;
 8009b58:	e9c0 3400 	strd	r3, r4, [r0]
  htim13.Init.Period = 0xbb80;
 8009b5c:	e9c0 4602 	strd	r4, r6, [r0, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b60:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8009b62:	f004 f97d 	bl	800de60 <HAL_TIM_Base_Init>
 8009b66:	b108      	cbz	r0, 8009b6c <main+0x9f8>
 8009b68:	b672      	cpsid	i
  while (1)
 8009b6a:	e7fe      	b.n	8009b6a <main+0x9f6>
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8009b6c:	4842      	ldr	r0, [pc, #264]	; (8009c78 <main+0xb04>)
 8009b6e:	f004 f9a3 	bl	800deb8 <HAL_TIM_OC_Init>
 8009b72:	4602      	mov	r2, r0
 8009b74:	b108      	cbz	r0, 8009b7a <main+0xa06>
 8009b76:	b672      	cpsid	i
  while (1)
 8009b78:	e7fe      	b.n	8009b78 <main+0xa04>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8009b7a:	2330      	movs	r3, #48	; 0x30
  sConfigOC.Pulse = 0;
 8009b7c:	e9cd 3015 	strd	r3, r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b80:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b82:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b84:	a915      	add	r1, sp, #84	; 0x54
 8009b86:	483c      	ldr	r0, [pc, #240]	; (8009c78 <main+0xb04>)
 8009b88:	f004 fa9c 	bl	800e0c4 <HAL_TIM_OC_ConfigChannel>
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	b108      	cbz	r0, 8009b94 <main+0xa20>
 8009b90:	b672      	cpsid	i
  while (1)
 8009b92:	e7fe      	b.n	8009b92 <main+0xa1e>
  htim16.Instance = TIM16;
 8009b94:	4c3a      	ldr	r4, [pc, #232]	; (8009c80 <main+0xb0c>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 8009b96:	4601      	mov	r1, r0
 8009b98:	2210      	movs	r2, #16
 8009b9a:	a815      	add	r0, sp, #84	; 0x54
 8009b9c:	f008 fc50 	bl	8012440 <memset>
  htim16.Init.Prescaler = 4799;
 8009ba0:	4b38      	ldr	r3, [pc, #224]	; (8009c84 <main+0xb10>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ba2:	60a5      	str	r5, [r4, #8]
  htim16.Init.Prescaler = 4799;
 8009ba4:	f241 28bf 	movw	r8, #4799	; 0x12bf
  htim16.Init.Period = 0xffff;
 8009ba8:	f64f 76ff 	movw	r6, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009bac:	4620      	mov	r0, r4
  htim16.Init.Prescaler = 4799;
 8009bae:	e9c4 3800 	strd	r3, r8, [r4]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bb2:	e9c4 6503 	strd	r6, r5, [r4, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bb6:	e9c4 5505 	strd	r5, r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009bba:	f004 f951 	bl	800de60 <HAL_TIM_Base_Init>
 8009bbe:	b108      	cbz	r0, 8009bc4 <main+0xa50>
 8009bc0:	b672      	cpsid	i
  while (1)
 8009bc2:	e7fe      	b.n	8009bc2 <main+0xa4e>
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f004 f9cf 	bl	800df68 <HAL_TIM_IC_Init>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	b108      	cbz	r0, 8009bd2 <main+0xa5e>
 8009bce:	b672      	cpsid	i
  while (1)
 8009bd0:	e7fe      	b.n	8009bd0 <main+0xa5c>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009bd2:	2701      	movs	r7, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8009bd4:	e9cd 7016 	strd	r7, r0, [sp, #88]	; 0x58
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009bd8:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8009bda:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8009bdc:	a915      	add	r1, sp, #84	; 0x54
 8009bde:	4620      	mov	r0, r4
 8009be0:	f004 fb7c 	bl	800e2dc <HAL_TIM_IC_ConfigChannel>
 8009be4:	4605      	mov	r5, r0
 8009be6:	b108      	cbz	r0, 8009bec <main+0xa78>
 8009be8:	b672      	cpsid	i
  while (1)
 8009bea:	e7fe      	b.n	8009bea <main+0xa76>
  MX_USB_DEVICE_Init();
 8009bec:	f008 f9b2 	bl	8011f54 <MX_USB_DEVICE_Init>
  htim17.Instance = TIM17;
 8009bf0:	4c25      	ldr	r4, [pc, #148]	; (8009c88 <main+0xb14>)
  MX_FATFS_Init();
 8009bf2:	f005 fe59 	bl	800f8a8 <MX_FATFS_Init>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8009bf6:	2210      	movs	r2, #16
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	a815      	add	r0, sp, #84	; 0x54
 8009bfc:	f008 fc20 	bl	8012440 <memset>
  htim17.Instance = TIM17;
 8009c00:	4b22      	ldr	r3, [pc, #136]	; (8009c8c <main+0xb18>)
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c02:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8009c04:	4620      	mov	r0, r4
  htim17.Init.Prescaler = 4799;
 8009c06:	e9c4 3800 	strd	r3, r8, [r4]
  htim17.Init.Period = 0xffff;
 8009c0a:	e9c4 5602 	strd	r5, r6, [r4, #8]
  htim17.Init.RepetitionCounter = 0;
 8009c0e:	e9c4 5504 	strd	r5, r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8009c12:	f004 f925 	bl	800de60 <HAL_TIM_Base_Init>
 8009c16:	b108      	cbz	r0, 8009c1c <main+0xaa8>
 8009c18:	b672      	cpsid	i
  while (1)
 8009c1a:	e7fe      	b.n	8009c1a <main+0xaa6>
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f004 f9a3 	bl	800df68 <HAL_TIM_IC_Init>
 8009c22:	4602      	mov	r2, r0
 8009c24:	b108      	cbz	r0, 8009c2a <main+0xab6>
 8009c26:	b672      	cpsid	i
  while (1)
 8009c28:	e7fe      	b.n	8009c28 <main+0xab4>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009c2a:	e9cd 0715 	strd	r0, r7, [sp, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8009c2e:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8009c32:	a915      	add	r1, sp, #84	; 0x54
 8009c34:	4620      	mov	r0, r4
 8009c36:	f004 fb51 	bl	800e2dc <HAL_TIM_IC_ConfigChannel>
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	b340      	cbz	r0, 8009c90 <main+0xb1c>
 8009c3e:	b672      	cpsid	i
  while (1)
 8009c40:	e7fe      	b.n	8009c40 <main+0xacc>
 8009c42:	bf00      	nop
 8009c44:	200037f4 	.word	0x200037f4
 8009c48:	00020004 	.word	0x00020004
 8009c4c:	00040010 	.word	0x00040010
 8009c50:	00060040 	.word	0x00060040
 8009c54:	00080100 	.word	0x00080100
 8009c58:	20003364 	.word	0x20003364
 8009c5c:	40006400 	.word	0x40006400
 8009c60:	200034ac 	.word	0x200034ac
 8009c64:	40013800 	.word	0x40013800
 8009c68:	20003594 	.word	0x20003594
 8009c6c:	40001000 	.word	0x40001000
 8009c70:	20003718 	.word	0x20003718
 8009c74:	40001800 	.word	0x40001800
 8009c78:	20003460 	.word	0x20003460
 8009c7c:	40001c00 	.word	0x40001c00
 8009c80:	20003764 	.word	0x20003764
 8009c84:	40014400 	.word	0x40014400
 8009c88:	20003318 	.word	0x20003318
 8009c8c:	40014800 	.word	0x40014800
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009c90:	4b62      	ldr	r3, [pc, #392]	; (8009e1c <main+0xca8>)
  htim19.Instance = TIM19;
 8009c92:	4d63      	ldr	r5, [pc, #396]	; (8009e20 <main+0xcac>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009c94:	695a      	ldr	r2, [r3, #20]
 8009c96:	f042 0201 	orr.w	r2, r2, #1
 8009c9a:	615a      	str	r2, [r3, #20]
 8009c9c:	695a      	ldr	r2, [r3, #20]
 8009c9e:	f002 0201 	and.w	r2, r2, #1
 8009ca2:	9207      	str	r2, [sp, #28]
 8009ca4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009ca6:	695a      	ldr	r2, [r3, #20]
 8009ca8:	f042 0202 	orr.w	r2, r2, #2
 8009cac:	615a      	str	r2, [r3, #20]
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	4601      	mov	r1, r0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009cb8:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009cba:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009cbe:	f001 f88f 	bl	800ade0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009cc2:	200b      	movs	r0, #11
 8009cc4:	f001 f8be 	bl	800ae44 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4621      	mov	r1, r4
 8009ccc:	200d      	movs	r0, #13
 8009cce:	f001 f887 	bl	800ade0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009cd2:	200d      	movs	r0, #13
 8009cd4:	f001 f8b6 	bl	800ae44 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4621      	mov	r1, r4
 8009cdc:	203a      	movs	r0, #58	; 0x3a
 8009cde:	f001 f87f 	bl	800ade0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8009ce2:	203a      	movs	r0, #58	; 0x3a
 8009ce4:	f001 f8ae 	bl	800ae44 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8009ce8:	4622      	mov	r2, r4
 8009cea:	4621      	mov	r1, r4
 8009cec:	203b      	movs	r0, #59	; 0x3b
 8009cee:	f001 f877 	bl	800ade0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8009cf2:	203b      	movs	r0, #59	; 0x3b
 8009cf4:	f001 f8a6 	bl	800ae44 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	203c      	movs	r0, #60	; 0x3c
 8009cfe:	f001 f86f 	bl	800ade0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8009d02:	203c      	movs	r0, #60	; 0x3c
 8009d04:	f001 f89e 	bl	800ae44 <HAL_NVIC_EnableIRQ>
  htim19.Instance = TIM19;
 8009d08:	4b46      	ldr	r3, [pc, #280]	; (8009e24 <main+0xcb0>)
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d0a:	612c      	str	r4, [r5, #16]
  htim19.Init.Prescaler = 0;
 8009d0c:	e9c5 3400 	strd	r3, r4, [r5]
  if (HAL_TIM_Encoder_Init(&htim19, &sConfig) != HAL_OK)
 8009d10:	a915      	add	r1, sp, #84	; 0x54
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009d12:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim19, &sConfig) != HAL_OK)
 8009d14:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d16:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  htim19.Init.Period = 65535;
 8009d1a:	e9c5 4602 	strd	r4, r6, [r5, #8]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009d1e:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009d22:	e9cd 7417 	strd	r7, r4, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009d26:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009d2a:	e9cd 741b 	strd	r7, r4, [sp, #108]	; 0x6c
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d2e:	61ac      	str	r4, [r5, #24]
  sConfig.IC2Filter = 0;
 8009d30:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_TIM_Encoder_Init(&htim19, &sConfig) != HAL_OK)
 8009d32:	f004 f945 	bl	800dfc0 <HAL_TIM_Encoder_Init>
 8009d36:	b108      	cbz	r0, 8009d3c <main+0xbc8>
 8009d38:	b672      	cpsid	i
  while (1)
 8009d3a:	e7fe      	b.n	8009d3a <main+0xbc6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d3c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 8009d40:	a910      	add	r1, sp, #64	; 0x40
 8009d42:	4628      	mov	r0, r5
 8009d44:	f004 fda2 	bl	800e88c <HAL_TIMEx_MasterConfigSynchronization>
 8009d48:	b108      	cbz	r0, 8009d4e <main+0xbda>
 8009d4a:	b672      	cpsid	i
  while (1)
 8009d4c:	e7fe      	b.n	8009d4c <main+0xbd8>
  J1939 j1939 = {0};
 8009d4e:	f640 621c 	movw	r2, #3612	; 0xe1c
 8009d52:	2100      	movs	r1, #0
 8009d54:	a815      	add	r0, sp, #84	; 0x54
 8009d56:	24ff      	movs	r4, #255	; 0xff
 8009d58:	f008 fb72 	bl	8012440 <memset>
  for(uint8_t i = 0; i < 0xFF; i++)
 8009d5c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
	  j1939.ECU_address[i] = 0xFF;
 8009d60:	4622      	mov	r2, r4
 8009d62:	3c01      	subs	r4, #1
  for(uint8_t i = 0; i < 0xFF; i++)
 8009d64:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	  j1939.ECU_address[i] = 0xFF;
 8009d68:	f803 2b01 	strb.w	r2, [r3], #1
  for(uint8_t i = 0; i < 0xFF; i++)
 8009d6c:	d1f9      	bne.n	8009d62 <main+0xbee>
  STM32_PLC_Start_Analog_Input(&htim12, &htim13, &hsdadc1, &hsdadc2, &hsdadc3);
 8009d6e:	4b2e      	ldr	r3, [pc, #184]	; (8009e28 <main+0xcb4>)
 8009d70:	4a2e      	ldr	r2, [pc, #184]	; (8009e2c <main+0xcb8>)
 8009d72:	492f      	ldr	r1, [pc, #188]	; (8009e30 <main+0xcbc>)
 8009d74:	482f      	ldr	r0, [pc, #188]	; (8009e34 <main+0xcc0>)
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	4b2f      	ldr	r3, [pc, #188]	; (8009e38 <main+0xcc4>)
 8009d7a:	f7f6 ffbb 	bl	8000cf4 <STM32_PLC_Start_Analog_Input>
  STM32_PLC_Start_Analog_Output(&hdac1, &hdac2, &htim6);
 8009d7e:	4a2f      	ldr	r2, [pc, #188]	; (8009e3c <main+0xcc8>)
 8009d80:	492f      	ldr	r1, [pc, #188]	; (8009e40 <main+0xccc>)
 8009d82:	4830      	ldr	r0, [pc, #192]	; (8009e44 <main+0xcd0>)
 8009d84:	f7f7 f93a 	bl	8000ffc <STM32_PLC_Start_Analog_Output>
  STM32_PLC_Start_Encoder(&htim4, &htim19);
 8009d88:	4925      	ldr	r1, [pc, #148]	; (8009e20 <main+0xcac>)
 8009d8a:	482f      	ldr	r0, [pc, #188]	; (8009e48 <main+0xcd4>)
 8009d8c:	f7f7 fa8e 	bl	80012ac <STM32_PLC_Start_Encoder>
  STM32_PLC_Start_Input_Capture(&htim17, &htim16);
 8009d90:	492e      	ldr	r1, [pc, #184]	; (8009e4c <main+0xcd8>)
 8009d92:	482f      	ldr	r0, [pc, #188]	; (8009e50 <main+0xcdc>)
 8009d94:	f7f7 fe18 	bl	80019c8 <STM32_PLC_Start_Input_Capture>
  STM32_PLC_Start_PWM(&htim2, &htim5);
 8009d98:	492e      	ldr	r1, [pc, #184]	; (8009e54 <main+0xce0>)
 8009d9a:	482f      	ldr	r0, [pc, #188]	; (8009e58 <main+0xce4>)
 8009d9c:	f7f7 ff30 	bl	8001c00 <STM32_PLC_Start_PWM>
  STM32_PLC_Start_SD(&hspi2, SD_CS_GPIO_Port, SD_CS_Pin);
 8009da0:	2210      	movs	r2, #16
 8009da2:	492e      	ldr	r1, [pc, #184]	; (8009e5c <main+0xce8>)
 8009da4:	482e      	ldr	r0, [pc, #184]	; (8009e60 <main+0xcec>)
 8009da6:	f7f8 f907 	bl	8001fb8 <STM32_PLC_Start_SD>
  STM32_PLC_Start_RTC(&hrtc);
 8009daa:	482e      	ldr	r0, [pc, #184]	; (8009e64 <main+0xcf0>)
 8009dac:	f7f7 ffee 	bl	8001d8c <STM32_PLC_Start_RTC>
  STM32_PLC_Start_CAN(&hcan, &j1939);
 8009db0:	482d      	ldr	r0, [pc, #180]	; (8009e68 <main+0xcf4>)
 8009db2:	a915      	add	r1, sp, #84	; 0x54
 8009db4:	f7f7 f986 	bl	80010c4 <STM32_PLC_Start_CAN>
  STM32_PLC_Start_LCD(&hspi1, &hspi2, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin, TS_CS_GPIO_Port, TS_CS_Pin);
 8009db8:	4a2c      	ldr	r2, [pc, #176]	; (8009e6c <main+0xcf8>)
 8009dba:	492d      	ldr	r1, [pc, #180]	; (8009e70 <main+0xcfc>)
 8009dbc:	482d      	ldr	r0, [pc, #180]	; (8009e74 <main+0xd00>)
 8009dbe:	2340      	movs	r3, #64	; 0x40
 8009dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009dc4:	9303      	str	r3, [sp, #12]
 8009dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dca:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009dd2:	4923      	ldr	r1, [pc, #140]	; (8009e60 <main+0xcec>)
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009dda:	2304      	movs	r3, #4
 8009ddc:	f7f7 fe1a 	bl	8001a14 <STM32_PLC_Start_LCD>
  STM32_PLC_PWM_Reset();
 8009de0:	f7f7 ff9e 	bl	8001d20 <STM32_PLC_PWM_Reset>
  STM32_PLC_Analog_Output_Reset();
 8009de4:	f7f7 f946 	bl	8001074 <STM32_PLC_Analog_Output_Reset>
  j1939.this_identifications.ecu_identification.length_of_each_field = 30;
 8009de8:	231e      	movs	r3, #30
  STM32_PLC_LCD_Show_Main_Frame(&frame_id, false);
 8009dea:	a810      	add	r0, sp, #64	; 0x40
 8009dec:	4621      	mov	r1, r4
  j1939.this_identifications.ecu_identification.length_of_each_field = 30;
 8009dee:	f88d 3c90 	strb.w	r3, [sp, #3216]	; 0xc90
  j1939.this_identifications.component_identification.length_of_each_field = 30;
 8009df2:	f88d 3d0a 	strb.w	r3, [sp, #3338]	; 0xd0a
  j1939.from_other_ecu_identifications.ecu_identification.length_of_each_field = 30;
 8009df6:	f88d 38fc 	strb.w	r3, [sp, #2300]	; 0x8fc
  j1939.from_other_ecu_identifications.component_identification.length_of_each_field = 30;
 8009dfa:	f88d 3976 	strb.w	r3, [sp, #2422]	; 0x976
  uint8_t frame_id = 0;
 8009dfe:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  STM32_PLC_LCD_Show_Main_Frame(&frame_id, false);
 8009e02:	f7fb fa45 	bl	8005290 <STM32_PLC_LCD_Show_Main_Frame>
  STM32_PLC_Initial_Startup(&j1939);
 8009e06:	a815      	add	r0, sp, #84	; 0x54
 8009e08:	f7f7 faa6 	bl	8001358 <STM32_PLC_Initial_Startup>
	  STM32_PLC_LCD_Call_Main_Logic(&frame_id, &j1939);
 8009e0c:	a810      	add	r0, sp, #64	; 0x40
 8009e0e:	a915      	add	r1, sp, #84	; 0x54
 8009e10:	f7fe feea 	bl	8008be8 <STM32_PLC_LCD_Call_Main_Logic>
	  STM32_PLC_LCD_Execute_Control_Program(&j1939);
 8009e14:	a815      	add	r0, sp, #84	; 0x54
 8009e16:	f7fa fa13 	bl	8004240 <STM32_PLC_LCD_Execute_Control_Program>
  while (1)
 8009e1a:	e7f7      	b.n	8009e0c <main+0xc98>
 8009e1c:	40021000 	.word	0x40021000
 8009e20:	200032cc 	.word	0x200032cc
 8009e24:	40015c00 	.word	0x40015c00
 8009e28:	200037f4 	.word	0x200037f4
 8009e2c:	20003530 	.word	0x20003530
 8009e30:	20003460 	.word	0x20003460
 8009e34:	20003718 	.word	0x20003718
 8009e38:	200035e0 	.word	0x200035e0
 8009e3c:	20003594 	.word	0x20003594
 8009e40:	200031b0 	.word	0x200031b0
 8009e44:	200032b8 	.word	0x200032b8
 8009e48:	2000326c 	.word	0x2000326c
 8009e4c:	20003764 	.word	0x20003764
 8009e50:	20003318 	.word	0x20003318
 8009e54:	200033d0 	.word	0x200033d0
 8009e58:	20003688 	.word	0x20003688
 8009e5c:	48000c00 	.word	0x48000c00
 8009e60:	20003208 	.word	0x20003208
 8009e64:	20003574 	.word	0x20003574
 8009e68:	20003364 	.word	0x20003364
 8009e6c:	48000800 	.word	0x48000800
 8009e70:	48001400 	.word	0x48001400
 8009e74:	20003624 	.word	0x20003624

08009e78 <Error_Handler>:
 8009e78:	b672      	cpsid	i
  while (1)
 8009e7a:	e7fe      	b.n	8009e7a <Error_Handler+0x2>

08009e7c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <HAL_MspInit+0x2c>)
 8009e7e:	699a      	ldr	r2, [r3, #24]
 8009e80:	f042 0201 	orr.w	r2, r2, #1
 8009e84:	619a      	str	r2, [r3, #24]
 8009e86:	699a      	ldr	r2, [r3, #24]
{
 8009e88:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e8a:	f002 0201 	and.w	r2, r2, #1
 8009e8e:	9200      	str	r2, [sp, #0]
 8009e90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e92:	69da      	ldr	r2, [r3, #28]
 8009e94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009e98:	61da      	str	r2, [r3, #28]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009ea4:	b002      	add	sp, #8
 8009ea6:	4770      	bx	lr
 8009ea8:	40021000 	.word	0x40021000

08009eac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009eac:	b510      	push	{r4, lr}
 8009eae:	4604      	mov	r4, r0
 8009eb0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eb2:	2214      	movs	r2, #20
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	a803      	add	r0, sp, #12
 8009eb8:	f008 fac2 	bl	8012440 <memset>
  if(hcan->Instance==CAN)
 8009ebc:	6822      	ldr	r2, [r4, #0]
 8009ebe:	4b17      	ldr	r3, [pc, #92]	; (8009f1c <HAL_CAN_MspInit+0x70>)
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d128      	bne.n	8009f16 <HAL_CAN_MspInit+0x6a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009ec4:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ec8:	2400      	movs	r4, #0
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009eca:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ecc:	4814      	ldr	r0, [pc, #80]	; (8009f20 <HAL_CAN_MspInit+0x74>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009ece:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009ed2:	61da      	str	r2, [r3, #28]
 8009ed4:	69da      	ldr	r2, [r3, #28]
 8009ed6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8009eda:	9201      	str	r2, [sp, #4]
 8009edc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009ede:	695a      	ldr	r2, [r3, #20]
 8009ee0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009ee4:	615a      	str	r2, [r3, #20]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eee:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009ef0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e9cd 3203 	strd	r3, r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009ef8:	e9cd 4305 	strd	r4, r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009efc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8009efe:	2307      	movs	r3, #7
 8009f00:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009f02:	f001 f91d 	bl	800b140 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8009f06:	2014      	movs	r0, #20
 8009f08:	4622      	mov	r2, r4
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	f000 ff68 	bl	800ade0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8009f10:	2014      	movs	r0, #20
 8009f12:	f000 ff97 	bl	800ae44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8009f16:	b008      	add	sp, #32
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	bf00      	nop
 8009f1c:	40006400 	.word	0x40006400
 8009f20:	48000c00 	.word	0x48000c00

08009f24 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8009f24:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f26:	2214      	movs	r2, #20
{
 8009f28:	b08a      	sub	sp, #40	; 0x28
 8009f2a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	eb0d 0002 	add.w	r0, sp, r2
 8009f32:	f008 fa85 	bl	8012440 <memset>
  if(hdac->Instance==DAC1)
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	4a1d      	ldr	r2, [pc, #116]	; (8009fb0 <HAL_DAC_MspInit+0x8c>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d11f      	bne.n	8009f7e <HAL_DAC_MspInit+0x5a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8009f3e:	4b1d      	ldr	r3, [pc, #116]	; (8009fb4 <HAL_DAC_MspInit+0x90>)
 8009f40:	69da      	ldr	r2, [r3, #28]
 8009f42:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009f46:	61da      	str	r2, [r3, #28]
 8009f48:	69da      	ldr	r2, [r3, #28]
 8009f4a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8009f4e:	9201      	str	r2, [sp, #4]
 8009f50:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f52:	695a      	ldr	r2, [r3, #20]
 8009f54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009f58:	615a      	str	r2, [r3, #20]
 8009f5a:	695b      	ldr	r3, [r3, #20]
 8009f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f60:	9302      	str	r3, [sp, #8]
 8009f62:	9b02      	ldr	r3, [sp, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AO0_Pin|AO1_Pin;
 8009f64:	2330      	movs	r3, #48	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = AO2_Pin;
 8009f66:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f68:	2203      	movs	r2, #3
 8009f6a:	2300      	movs	r3, #0
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 8009f6c:	a905      	add	r1, sp, #20
 8009f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f72:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 8009f76:	f001 f8e3 	bl	800b140 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8009f7a:	b00a      	add	sp, #40	; 0x28
 8009f7c:	bd10      	pop	{r4, pc}
  else if(hdac->Instance==DAC2)
 8009f7e:	4a0e      	ldr	r2, [pc, #56]	; (8009fb8 <HAL_DAC_MspInit+0x94>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d1fa      	bne.n	8009f7a <HAL_DAC_MspInit+0x56>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8009f84:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <HAL_DAC_MspInit+0x90>)
 8009f86:	69da      	ldr	r2, [r3, #28]
 8009f88:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009f8c:	61da      	str	r2, [r3, #28]
 8009f8e:	69da      	ldr	r2, [r3, #28]
 8009f90:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8009f94:	9203      	str	r2, [sp, #12]
 8009f96:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f98:	695a      	ldr	r2, [r3, #20]
 8009f9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009f9e:	615a      	str	r2, [r3, #20]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa6:	9304      	str	r3, [sp, #16]
 8009fa8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = AO2_Pin;
 8009faa:	2340      	movs	r3, #64	; 0x40
 8009fac:	e7db      	b.n	8009f66 <HAL_DAC_MspInit+0x42>
 8009fae:	bf00      	nop
 8009fb0:	40007400 	.word	0x40007400
 8009fb4:	40021000 	.word	0x40021000
 8009fb8:	40009800 	.word	0x40009800

08009fbc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8009fbc:	6802      	ldr	r2, [r0, #0]
 8009fbe:	4b07      	ldr	r3, [pc, #28]	; (8009fdc <HAL_RTC_MspInit+0x20>)
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d10a      	bne.n	8009fda <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009fc8:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009fcc:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <HAL_RTC_MspInit+0x24>)
 8009fce:	fab2 f282 	clz	r2, r2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009fda:	4770      	bx	lr
 8009fdc:	40002800 	.word	0x40002800
 8009fe0:	10908100 	.word	0x10908100

08009fe4 <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fea:	2214      	movs	r2, #20
 8009fec:	2100      	movs	r1, #0
 8009fee:	a809      	add	r0, sp, #36	; 0x24
 8009ff0:	f008 fa26 	bl	8012440 <memset>
  if(hsdadc->Instance==SDADC1)
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	4a53      	ldr	r2, [pc, #332]	; (800a144 <HAL_SDADC_MspInit+0x160>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d148      	bne.n	800a08e <HAL_SDADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8009ffc:	4b52      	ldr	r3, [pc, #328]	; (800a148 <HAL_SDADC_MspInit+0x164>)
    PE12     ------> SDADC1_AIN0P
    */
    GPIO_InitStruct.Pin = AI0_Pin|AI1_Pin|AI2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ffe:	4853      	ldr	r0, [pc, #332]	; (800a14c <HAL_SDADC_MspInit+0x168>)
    __HAL_RCC_SDADC1_CLK_ENABLE();
 800a000:	699a      	ldr	r2, [r3, #24]
 800a002:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a006:	619a      	str	r2, [r3, #24]
 800a008:	699a      	ldr	r2, [r3, #24]
 800a00a:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800a00e:	9201      	str	r2, [sp, #4]
 800a010:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a012:	695a      	ldr	r2, [r3, #20]
 800a014:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a018:	615a      	str	r2, [r3, #20]
 800a01a:	695a      	ldr	r2, [r3, #20]
 800a01c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800a020:	9202      	str	r2, [sp, #8]
 800a022:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a024:	695a      	ldr	r2, [r3, #20]
 800a026:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800a02a:	615a      	str	r2, [r3, #20]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a032:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a034:	2403      	movs	r4, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a036:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a038:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a03a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a03c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a03e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a042:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a044:	f001 f87c 	bl	800b140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AI3_Pin|AI4_Pin|AI5_Pin|AI6_Pin
 800a048:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
                          |AI7_Pin|AI8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a04c:	4840      	ldr	r0, [pc, #256]	; (800a150 <HAL_SDADC_MspInit+0x16c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a04e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a050:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a052:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a056:	f001 f873 	bl	800b140 <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 800a05a:	4c3e      	ldr	r4, [pc, #248]	; (800a154 <HAL_SDADC_MspInit+0x170>)
 800a05c:	4b3e      	ldr	r3, [pc, #248]	; (800a158 <HAL_SDADC_MspInit+0x174>)

    /* SDADC3 DMA Init */
    /* SDADC3 Init */
    hdma_sdadc3.Instance = DMA2_Channel5;
    hdma_sdadc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sdadc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800a05e:	60a6      	str	r6, [r4, #8]
    hdma_sdadc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a060:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_sdadc3.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdadc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a064:	2280      	movs	r2, #128	; 0x80
 800a066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a06a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_sdadc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_sdadc3.Init.Mode = DMA_CIRCULAR;
 800a06e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a072:	2320      	movs	r3, #32
 800a074:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hdma_sdadc3.Init.Priority = DMA_PRIORITY_LOW;
 800a078:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_sdadc3) != HAL_OK)
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 ff9a 	bl	800afb4 <HAL_DMA_Init>
 800a080:	b108      	cbz	r0, 800a086 <HAL_SDADC_MspInit+0xa2>
    {
      Error_Handler();
 800a082:	f7ff fef9 	bl	8009e78 <Error_Handler>
    }

    __HAL_LINKDMA(hsdadc,hdma,hdma_sdadc3);
 800a086:	616c      	str	r4, [r5, #20]
 800a088:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 800a08a:	b00e      	add	sp, #56	; 0x38
 800a08c:	bd70      	pop	{r4, r5, r6, pc}
  else if(hsdadc->Instance==SDADC2)
 800a08e:	4a33      	ldr	r2, [pc, #204]	; (800a15c <HAL_SDADC_MspInit+0x178>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d120      	bne.n	800a0d6 <HAL_SDADC_MspInit+0xf2>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 800a094:	4b2c      	ldr	r3, [pc, #176]	; (800a148 <HAL_SDADC_MspInit+0x164>)
    hdma_sdadc2.Instance = DMA2_Channel4;
 800a096:	4c32      	ldr	r4, [pc, #200]	; (800a160 <HAL_SDADC_MspInit+0x17c>)
    __HAL_RCC_SDADC2_CLK_ENABLE();
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a09e:	619a      	str	r2, [r3, #24]
 800a0a0:	699a      	ldr	r2, [r3, #24]
 800a0a2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800a0a6:	9204      	str	r2, [sp, #16]
 800a0a8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a0aa:	695a      	ldr	r2, [r3, #20]
 800a0ac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800a0b0:	615a      	str	r2, [r3, #20]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0b8:	9305      	str	r3, [sp, #20]
 800a0ba:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0bc:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c6:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a0c8:	4821      	ldr	r0, [pc, #132]	; (800a150 <HAL_SDADC_MspInit+0x16c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ca:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a0cc:	a909      	add	r1, sp, #36	; 0x24
 800a0ce:	f001 f837 	bl	800b140 <HAL_GPIO_Init>
    hdma_sdadc2.Instance = DMA2_Channel4;
 800a0d2:	4b24      	ldr	r3, [pc, #144]	; (800a164 <HAL_SDADC_MspInit+0x180>)
 800a0d4:	e7c3      	b.n	800a05e <HAL_SDADC_MspInit+0x7a>
  else if(hsdadc->Instance==SDADC3)
 800a0d6:	4a24      	ldr	r2, [pc, #144]	; (800a168 <HAL_SDADC_MspInit+0x184>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d1d6      	bne.n	800a08a <HAL_SDADC_MspInit+0xa6>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 800a0dc:	4b1a      	ldr	r3, [pc, #104]	; (800a148 <HAL_SDADC_MspInit+0x164>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0de:	481b      	ldr	r0, [pc, #108]	; (800a14c <HAL_SDADC_MspInit+0x168>)
    __HAL_RCC_SDADC3_CLK_ENABLE();
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a0e6:	619a      	str	r2, [r3, #24]
 800a0e8:	699a      	ldr	r2, [r3, #24]
 800a0ea:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800a0ee:	9206      	str	r2, [sp, #24]
 800a0f0:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0f2:	695a      	ldr	r2, [r3, #20]
 800a0f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a0f8:	615a      	str	r2, [r3, #20]
 800a0fa:	695a      	ldr	r2, [r3, #20]
 800a0fc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800a100:	9207      	str	r2, [sp, #28]
 800a102:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a104:	695a      	ldr	r2, [r3, #20]
 800a106:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a10a:	615a      	str	r2, [r3, #20]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a112:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a114:	2403      	movs	r4, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a116:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a118:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a11a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a11e:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a120:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a124:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a126:	f001 f80b 	bl	800b140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAI1P_Pin|DAI1M_Pin|DAI2P_Pin|DAI2M_Pin
 800a12a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a12e:	480f      	ldr	r0, [pc, #60]	; (800a16c <HAL_SDADC_MspInit+0x188>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a130:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a132:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a134:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a138:	f001 f802 	bl	800b140 <HAL_GPIO_Init>
    hdma_sdadc3.Instance = DMA2_Channel5;
 800a13c:	4c0c      	ldr	r4, [pc, #48]	; (800a170 <HAL_SDADC_MspInit+0x18c>)
 800a13e:	4b0d      	ldr	r3, [pc, #52]	; (800a174 <HAL_SDADC_MspInit+0x190>)
 800a140:	e78d      	b.n	800a05e <HAL_SDADC_MspInit+0x7a>
 800a142:	bf00      	nop
 800a144:	40016000 	.word	0x40016000
 800a148:	40021000 	.word	0x40021000
 800a14c:	48000400 	.word	0x48000400
 800a150:	48001000 	.word	0x48001000
 800a154:	200031c4 	.word	0x200031c4
 800a158:	40020430 	.word	0x40020430
 800a15c:	40016400 	.word	0x40016400
 800a160:	2000341c 	.word	0x2000341c
 800a164:	40020444 	.word	0x40020444
 800a168:	40016800 	.word	0x40016800
 800a16c:	48000c00 	.word	0x48000c00
 800a170:	2000338c 	.word	0x2000338c
 800a174:	40020458 	.word	0x40020458

0800a178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a178:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a17a:	2214      	movs	r2, #20
{
 800a17c:	b08a      	sub	sp, #40	; 0x28
 800a17e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a180:	2100      	movs	r1, #0
 800a182:	eb0d 0002 	add.w	r0, sp, r2
 800a186:	f008 f95b 	bl	8012440 <memset>
  if(hspi->Instance==SPI1)
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	4a25      	ldr	r2, [pc, #148]	; (800a224 <HAL_SPI_MspInit+0xac>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d123      	bne.n	800a1da <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a192:	4b25      	ldr	r3, [pc, #148]	; (800a228 <HAL_SPI_MspInit+0xb0>)
 800a194:	699a      	ldr	r2, [r3, #24]
 800a196:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a19a:	619a      	str	r2, [r3, #24]
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a1a2:	9201      	str	r2, [sp, #4]
 800a1a4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1a6:	695a      	ldr	r2, [r3, #20]
 800a1a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a1ac:	615a      	str	r2, [r3, #20]
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1b4:	9302      	str	r3, [sp, #8]
    PC7     ------> SPI1_SCK
    PC8     ------> SPI1_MISO
    PC9     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1b6:	f44f 7060 	mov.w	r0, #896	; 0x380
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a1c2:	2400      	movs	r4, #0
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1ca:	4818      	ldr	r0, [pc, #96]	; (800a22c <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a1cc:	2305      	movs	r3, #5
 800a1ce:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1d0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1d2:	f000 ffb5 	bl	800b140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a1d6:	b00a      	add	sp, #40	; 0x28
 800a1d8:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 800a1da:	4a15      	ldr	r2, [pc, #84]	; (800a230 <HAL_SPI_MspInit+0xb8>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d1fa      	bne.n	800a1d6 <HAL_SPI_MspInit+0x5e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a1e0:	4b11      	ldr	r3, [pc, #68]	; (800a228 <HAL_SPI_MspInit+0xb0>)
 800a1e2:	69da      	ldr	r2, [r3, #28]
 800a1e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1e8:	61da      	str	r2, [r3, #28]
 800a1ea:	69da      	ldr	r2, [r3, #28]
 800a1ec:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800a1f0:	9203      	str	r2, [sp, #12]
 800a1f2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1f4:	695a      	ldr	r2, [r3, #20]
 800a1f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a1fa:	615a      	str	r2, [r3, #20]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a202:	9304      	str	r3, [sp, #16]
 800a204:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a206:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a20a:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a20c:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a20e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a212:	2303      	movs	r3, #3
 800a214:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a218:	2305      	movs	r3, #5
 800a21a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a21c:	a905      	add	r1, sp, #20
 800a21e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a222:	e7d6      	b.n	800a1d2 <HAL_SPI_MspInit+0x5a>
 800a224:	40013000 	.word	0x40013000
 800a228:	40021000 	.word	0x40021000
 800a22c:	48000800 	.word	0x48000800
 800a230:	40003800 	.word	0x40003800

0800a234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a236:	4605      	mov	r5, r0
 800a238:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a23a:	2214      	movs	r2, #20
 800a23c:	2100      	movs	r1, #0
 800a23e:	a809      	add	r0, sp, #36	; 0x24
 800a240:	f008 f8fe 	bl	8012440 <memset>
  if(htim_base->Instance==TIM2)
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a24a:	d10c      	bne.n	800a266 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a24c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800a250:	69da      	ldr	r2, [r3, #28]
 800a252:	f042 0201 	orr.w	r2, r2, #1
 800a256:	61da      	str	r2, [r3, #28]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800a262:	b00f      	add	sp, #60	; 0x3c
 800a264:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(htim_base->Instance==TIM5)
 800a266:	4a55      	ldr	r2, [pc, #340]	; (800a3bc <HAL_TIM_Base_MspInit+0x188>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d10a      	bne.n	800a282 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a26c:	4b54      	ldr	r3, [pc, #336]	; (800a3c0 <HAL_TIM_Base_MspInit+0x18c>)
 800a26e:	69da      	ldr	r2, [r3, #28]
 800a270:	f042 0208 	orr.w	r2, r2, #8
 800a274:	61da      	str	r2, [r3, #28]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	f003 0308 	and.w	r3, r3, #8
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	9b01      	ldr	r3, [sp, #4]
 800a280:	e7ef      	b.n	800a262 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM6)
 800a282:	4a50      	ldr	r2, [pc, #320]	; (800a3c4 <HAL_TIM_Base_MspInit+0x190>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d10a      	bne.n	800a29e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a288:	4b4d      	ldr	r3, [pc, #308]	; (800a3c0 <HAL_TIM_Base_MspInit+0x18c>)
 800a28a:	69da      	ldr	r2, [r3, #28]
 800a28c:	f042 0210 	orr.w	r2, r2, #16
 800a290:	61da      	str	r2, [r3, #28]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	f003 0310 	and.w	r3, r3, #16
 800a298:	9302      	str	r3, [sp, #8]
 800a29a:	9b02      	ldr	r3, [sp, #8]
 800a29c:	e7e1      	b.n	800a262 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM12)
 800a29e:	4a4a      	ldr	r2, [pc, #296]	; (800a3c8 <HAL_TIM_Base_MspInit+0x194>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d10a      	bne.n	800a2ba <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800a2a4:	4b46      	ldr	r3, [pc, #280]	; (800a3c0 <HAL_TIM_Base_MspInit+0x18c>)
 800a2a6:	69da      	ldr	r2, [r3, #28]
 800a2a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2ac:	61da      	str	r2, [r3, #28]
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b4:	9303      	str	r3, [sp, #12]
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	e7d3      	b.n	800a262 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM13)
 800a2ba:	4a44      	ldr	r2, [pc, #272]	; (800a3cc <HAL_TIM_Base_MspInit+0x198>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d10a      	bne.n	800a2d6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800a2c0:	4b3f      	ldr	r3, [pc, #252]	; (800a3c0 <HAL_TIM_Base_MspInit+0x18c>)
 800a2c2:	69da      	ldr	r2, [r3, #28]
 800a2c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2c8:	61da      	str	r2, [r3, #28]
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d0:	9304      	str	r3, [sp, #16]
 800a2d2:	9b04      	ldr	r3, [sp, #16]
 800a2d4:	e7c5      	b.n	800a262 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM16)
 800a2d6:	4a3e      	ldr	r2, [pc, #248]	; (800a3d0 <HAL_TIM_Base_MspInit+0x19c>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d138      	bne.n	800a34e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a2dc:	4b38      	ldr	r3, [pc, #224]	; (800a3c0 <HAL_TIM_Base_MspInit+0x18c>)
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 800a2de:	483d      	ldr	r0, [pc, #244]	; (800a3d4 <HAL_TIM_Base_MspInit+0x1a0>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a2e0:	699a      	ldr	r2, [r3, #24]
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 800a2e2:	4c3d      	ldr	r4, [pc, #244]	; (800a3d8 <HAL_TIM_Base_MspInit+0x1a4>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a2e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a2e8:	619a      	str	r2, [r3, #24]
 800a2ea:	699a      	ldr	r2, [r3, #24]
 800a2ec:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800a2f0:	9205      	str	r2, [sp, #20]
 800a2f2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2f4:	695a      	ldr	r2, [r3, #20]
 800a2f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a2fa:	615a      	str	r2, [r3, #20]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a302:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a304:	f44f 7780 	mov.w	r7, #256	; 0x100
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a308:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a30a:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a30c:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a30e:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 800a312:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800a314:	2301      	movs	r3, #1
 800a316:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a318:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 800a31c:	f000 ff10 	bl	800b140 <HAL_GPIO_Init>
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 800a320:	4b2e      	ldr	r3, [pc, #184]	; (800a3dc <HAL_TIM_Base_MspInit+0x1a8>)
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800a322:	60a6      	str	r6, [r4, #8]
    hdma_tim16_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a324:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800a328:	2380      	movs	r3, #128	; 0x80
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a32a:	e9c4 3703 	strd	r3, r7, [r4, #12]
    hdma_tim16_ch1_up.Init.Mode = DMA_CIRCULAR;
 800a32e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800a332:	2320      	movs	r3, #32
 800a334:	e9c4 7305 	strd	r7, r3, [r4, #20]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800a338:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fe3a 	bl	800afb4 <HAL_DMA_Init>
 800a340:	b108      	cbz	r0, 800a346 <HAL_TIM_Base_MspInit+0x112>
      Error_Handler();
 800a342:	f7ff fd99 	bl	8009e78 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 800a346:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800a34a:	6265      	str	r5, [r4, #36]	; 0x24
}
 800a34c:	e789      	b.n	800a262 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM17)
 800a34e:	4a24      	ldr	r2, [pc, #144]	; (800a3e0 <HAL_TIM_Base_MspInit+0x1ac>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d186      	bne.n	800a262 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800a354:	4b1a      	ldr	r3, [pc, #104]	; (800a3c0 <HAL_TIM_Base_MspInit+0x18c>)
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 800a356:	481f      	ldr	r0, [pc, #124]	; (800a3d4 <HAL_TIM_Base_MspInit+0x1a0>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 800a358:	699a      	ldr	r2, [r3, #24]
    hdma_tim17_ch1_up.Instance = DMA1_Channel1;
 800a35a:	4c22      	ldr	r4, [pc, #136]	; (800a3e4 <HAL_TIM_Base_MspInit+0x1b0>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 800a35c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a360:	619a      	str	r2, [r3, #24]
 800a362:	699a      	ldr	r2, [r3, #24]
 800a364:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800a368:	9207      	str	r2, [sp, #28]
 800a36a:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a36c:	695a      	ldr	r2, [r3, #20]
 800a36e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a372:	615a      	str	r2, [r3, #20]
 800a374:	695b      	ldr	r3, [r3, #20]
 800a376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a37a:	9308      	str	r3, [sp, #32]
 800a37c:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a37e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a382:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a384:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a386:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 800a38a:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800a38c:	2301      	movs	r3, #1
 800a38e:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a390:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 800a394:	f000 fed4 	bl	800b140 <HAL_GPIO_Init>
    hdma_tim17_ch1_up.Instance = DMA1_Channel1;
 800a398:	4b13      	ldr	r3, [pc, #76]	; (800a3e8 <HAL_TIM_Base_MspInit+0x1b4>)
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800a39a:	60a6      	str	r6, [r4, #8]
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a39c:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a3a0:	2180      	movs	r1, #128	; 0x80
 800a3a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3a6:	e9c4 1303 	strd	r1, r3, [r4, #12]
    hdma_tim17_ch1_up.Init.Mode = DMA_CIRCULAR;
 800a3aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a3ae:	2320      	movs	r3, #32
 800a3b0:	e9c4 0305 	strd	r0, r3, [r4, #20]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a3b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3b8:	61e3      	str	r3, [r4, #28]
 800a3ba:	e7be      	b.n	800a33a <HAL_TIM_Base_MspInit+0x106>
 800a3bc:	40000c00 	.word	0x40000c00
 800a3c0:	40021000 	.word	0x40021000
 800a3c4:	40001000 	.word	0x40001000
 800a3c8:	40001800 	.word	0x40001800
 800a3cc:	40001c00 	.word	0x40001c00
 800a3d0:	40014400 	.word	0x40014400
 800a3d4:	48000400 	.word	0x48000400
 800a3d8:	200037b0 	.word	0x200037b0
 800a3dc:	40020030 	.word	0x40020030
 800a3e0:	40014800 	.word	0x40014800
 800a3e4:	200036d4 	.word	0x200036d4
 800a3e8:	40020008 	.word	0x40020008

0800a3ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800a3ec:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ee:	2214      	movs	r2, #20
{
 800a3f0:	b08a      	sub	sp, #40	; 0x28
 800a3f2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	eb0d 0002 	add.w	r0, sp, r2
 800a3fa:	f008 f821 	bl	8012440 <memset>
  if(htim_encoder->Instance==TIM4)
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	4a22      	ldr	r2, [pc, #136]	; (800a48c <HAL_TIM_Encoder_MspInit+0xa0>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d120      	bne.n	800a448 <HAL_TIM_Encoder_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a406:	4b22      	ldr	r3, [pc, #136]	; (800a490 <HAL_TIM_Encoder_MspInit+0xa4>)
    GPIO_InitStruct.Pin = E0__Pin|E0_B7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a408:	4822      	ldr	r0, [pc, #136]	; (800a494 <HAL_TIM_Encoder_MspInit+0xa8>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a40a:	69da      	ldr	r2, [r3, #28]
 800a40c:	f042 0204 	orr.w	r2, r2, #4
 800a410:	61da      	str	r2, [r3, #28]
 800a412:	69da      	ldr	r2, [r3, #28]
 800a414:	f002 0204 	and.w	r2, r2, #4
 800a418:	9201      	str	r2, [sp, #4]
 800a41a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a41c:	695a      	ldr	r2, [r3, #20]
 800a41e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a422:	615a      	str	r2, [r3, #20]
 800a424:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a426:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a42c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a42e:	e9cd 2207 	strd	r2, r2, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a432:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a434:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a436:	2302      	movs	r3, #2
 800a438:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a43c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a43e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = E1__Pin|E1_C11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a440:	f000 fe7e 	bl	800b140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM19_MspInit 1 */

  /* USER CODE END TIM19_MspInit 1 */
  }

}
 800a444:	b00a      	add	sp, #40	; 0x28
 800a446:	bd10      	pop	{r4, pc}
  else if(htim_encoder->Instance==TIM19)
 800a448:	4a13      	ldr	r2, [pc, #76]	; (800a498 <HAL_TIM_Encoder_MspInit+0xac>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d1fa      	bne.n	800a444 <HAL_TIM_Encoder_MspInit+0x58>
    __HAL_RCC_TIM19_CLK_ENABLE();
 800a44e:	4b10      	ldr	r3, [pc, #64]	; (800a490 <HAL_TIM_Encoder_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a450:	4812      	ldr	r0, [pc, #72]	; (800a49c <HAL_TIM_Encoder_MspInit+0xb0>)
    __HAL_RCC_TIM19_CLK_ENABLE();
 800a452:	699a      	ldr	r2, [r3, #24]
 800a454:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a458:	619a      	str	r2, [r3, #24]
 800a45a:	699a      	ldr	r2, [r3, #24]
 800a45c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800a460:	9203      	str	r2, [sp, #12]
 800a462:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a464:	695a      	ldr	r2, [r3, #20]
 800a466:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a46a:	615a      	str	r2, [r3, #20]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a472:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a474:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a478:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a47a:	2302      	movs	r3, #2
 800a47c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a480:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a482:	e9cd 2207 	strd	r2, r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
 800a486:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a488:	a905      	add	r1, sp, #20
 800a48a:	e7d9      	b.n	800a440 <HAL_TIM_Encoder_MspInit+0x54>
 800a48c:	40000800 	.word	0x40000800
 800a490:	40021000 	.word	0x40021000
 800a494:	48000400 	.word	0x48000400
 800a498:	40015c00 	.word	0x40015c00
 800a49c:	48000800 	.word	0x48000800

0800a4a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a4a0:	b510      	push	{r4, lr}
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4a6:	2214      	movs	r2, #20
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	a803      	add	r0, sp, #12
 800a4ac:	f007 ffc8 	bl	8012440 <memset>
  if(htim->Instance==TIM2)
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4b6:	d11a      	bne.n	800a4ee <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin|PWM6_Pin|PWM7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4bc:	210f      	movs	r1, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4be:	695a      	ldr	r2, [r3, #20]
 800a4c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a4c4:	615a      	str	r2, [r3, #20]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d6:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4e0:	a903      	add	r1, sp, #12
 800a4e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4e6:	f000 fe2b 	bl	800b140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800a4ea:	b008      	add	sp, #32
 800a4ec:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM5)
 800a4ee:	4a0c      	ldr	r2, [pc, #48]	; (800a520 <HAL_TIM_MspPostInit+0x80>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d1fa      	bne.n	800a4ea <HAL_TIM_MspPostInit+0x4a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <HAL_TIM_MspPostInit+0x84>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4f6:	480c      	ldr	r0, [pc, #48]	; (800a528 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4f8:	695a      	ldr	r2, [r3, #20]
 800a4fa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a4fe:	615a      	str	r2, [r3, #20]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a506:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a508:	220f      	movs	r2, #15
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a50a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a50c:	2302      	movs	r3, #2
 800a50e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a512:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a514:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a518:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a51a:	a903      	add	r1, sp, #12
 800a51c:	e7e3      	b.n	800a4e6 <HAL_TIM_MspPostInit+0x46>
 800a51e:	bf00      	nop
 800a520:	40000c00 	.word	0x40000c00
 800a524:	40021000 	.word	0x40021000
 800a528:	48000800 	.word	0x48000800

0800a52c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a52c:	b510      	push	{r4, lr}
 800a52e:	4604      	mov	r4, r0
 800a530:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a532:	2214      	movs	r2, #20
 800a534:	2100      	movs	r1, #0
 800a536:	a803      	add	r0, sp, #12
 800a538:	f007 ff82 	bl	8012440 <memset>
  if(huart->Instance==USART1)
 800a53c:	6822      	ldr	r2, [r4, #0]
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <HAL_UART_MspInit+0x60>)
 800a540:	429a      	cmp	r2, r3
 800a542:	d120      	bne.n	800a586 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a544:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a548:	4811      	ldr	r0, [pc, #68]	; (800a590 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800a54a:	699a      	ldr	r2, [r3, #24]
 800a54c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a550:	619a      	str	r2, [r3, #24]
 800a552:	699a      	ldr	r2, [r3, #24]
 800a554:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800a558:	9201      	str	r2, [sp, #4]
 800a55a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a55c:	695a      	ldr	r2, [r3, #20]
 800a55e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800a562:	615a      	str	r2, [r3, #20]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a56a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a56c:	2202      	movs	r2, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a56e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a570:	2303      	movs	r3, #3
 800a572:	e9cd 3203 	strd	r3, r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a576:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a578:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a57c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a57e:	2307      	movs	r3, #7
 800a580:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a582:	f000 fddd 	bl	800b140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a586:	b008      	add	sp, #32
 800a588:	bd10      	pop	{r4, pc}
 800a58a:	bf00      	nop
 800a58c:	40013800 	.word	0x40013800
 800a590:	48001000 	.word	0x48001000

0800a594 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a594:	e7fe      	b.n	800a594 <NMI_Handler>

0800a596 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a596:	e7fe      	b.n	800a596 <HardFault_Handler>

0800a598 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a598:	e7fe      	b.n	800a598 <MemManage_Handler>

0800a59a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a59a:	e7fe      	b.n	800a59a <BusFault_Handler>

0800a59c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a59c:	e7fe      	b.n	800a59c <UsageFault_Handler>

0800a59e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a59e:	4770      	bx	lr

0800a5a0 <DebugMon_Handler>:
 800a5a0:	4770      	bx	lr

0800a5a2 <PendSV_Handler>:
 800a5a2:	4770      	bx	lr

0800a5a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a5a4:	f000 b8ea 	b.w	800a77c <HAL_IncTick>

0800a5a8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <DMA1_Channel1_IRQHandler+0x8>)
 800a5aa:	f000 bd82 	b.w	800b0b2 <HAL_DMA_IRQHandler>
 800a5ae:	bf00      	nop
 800a5b0:	200036d4 	.word	0x200036d4

0800a5b4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <DMA1_Channel3_IRQHandler+0x8>)
 800a5b6:	f000 bd7c 	b.w	800b0b2 <HAL_DMA_IRQHandler>
 800a5ba:	bf00      	nop
 800a5bc:	200037b0 	.word	0x200037b0

0800a5c0 <CAN_RX0_IRQHandler>:
void CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <CAN_RX0_IRQHandler+0x8>)
 800a5c2:	f000 bafd 	b.w	800abc0 <HAL_CAN_IRQHandler>
 800a5c6:	bf00      	nop
 800a5c8:	20003364 	.word	0x20003364

0800a5cc <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <DMA2_Channel3_IRQHandler+0x8>)
 800a5ce:	f000 bd70 	b.w	800b0b2 <HAL_DMA_IRQHandler>
 800a5d2:	bf00      	nop
 800a5d4:	200031c4 	.word	0x200031c4

0800a5d8 <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc2);
 800a5d8:	4801      	ldr	r0, [pc, #4]	; (800a5e0 <DMA2_Channel4_IRQHandler+0x8>)
 800a5da:	f000 bd6a 	b.w	800b0b2 <HAL_DMA_IRQHandler>
 800a5de:	bf00      	nop
 800a5e0:	2000341c 	.word	0x2000341c

0800a5e4 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc3);
 800a5e4:	4801      	ldr	r0, [pc, #4]	; (800a5ec <DMA2_Channel5_IRQHandler+0x8>)
 800a5e6:	f000 bd64 	b.w	800b0b2 <HAL_DMA_IRQHandler>
 800a5ea:	bf00      	nop
 800a5ec:	2000338c 	.word	0x2000338c

0800a5f0 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800a5f0:	4801      	ldr	r0, [pc, #4]	; (800a5f8 <USB_LP_IRQHandler+0x8>)
 800a5f2:	f000 befb 	b.w	800b3ec <HAL_PCD_IRQHandler>
 800a5f6:	bf00      	nop
 800a5f8:	200044e0 	.word	0x200044e0

0800a5fc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	4770      	bx	lr

0800a600 <_kill>:

int _kill(int pid, int sig)
{
 800a600:	b508      	push	{r3, lr}
	errno = EINVAL;
 800a602:	f007 fee5 	bl	80123d0 <__errno>
 800a606:	2316      	movs	r3, #22
 800a608:	6003      	str	r3, [r0, #0]
	return -1;
}
 800a60a:	f04f 30ff 	mov.w	r0, #4294967295
 800a60e:	bd08      	pop	{r3, pc}

0800a610 <_exit>:

void _exit (int status)
{
 800a610:	b508      	push	{r3, lr}
	errno = EINVAL;
 800a612:	f007 fedd 	bl	80123d0 <__errno>
 800a616:	2316      	movs	r3, #22
 800a618:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800a61a:	e7fe      	b.n	800a61a <_exit+0xa>

0800a61c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	460e      	mov	r6, r1
 800a620:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a622:	2500      	movs	r5, #0
 800a624:	42a5      	cmp	r5, r4
 800a626:	db01      	blt.n	800a62c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800a628:	4620      	mov	r0, r4
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800a62c:	f3af 8000 	nop.w
 800a630:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a632:	3501      	adds	r5, #1
 800a634:	e7f6      	b.n	800a624 <_read+0x8>

0800a636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a636:	b570      	push	{r4, r5, r6, lr}
 800a638:	460e      	mov	r6, r1
 800a63a:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a63c:	2500      	movs	r5, #0
 800a63e:	42a5      	cmp	r5, r4
 800a640:	db01      	blt.n	800a646 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800a642:	4620      	mov	r0, r4
 800a644:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800a646:	5d70      	ldrb	r0, [r6, r5]
 800a648:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a64c:	3501      	adds	r5, #1
 800a64e:	e7f6      	b.n	800a63e <_write+0x8>

0800a650 <_close>:

int _close(int file)
{
	return -1;
}
 800a650:	f04f 30ff 	mov.w	r0, #4294967295
 800a654:	4770      	bx	lr

0800a656 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800a656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a65a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800a65c:	2000      	movs	r0, #0
 800a65e:	4770      	bx	lr

0800a660 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800a660:	2001      	movs	r0, #1
 800a662:	4770      	bx	lr

0800a664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800a664:	2000      	movs	r0, #0
 800a666:	4770      	bx	lr

0800a668 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a668:	4b0b      	ldr	r3, [pc, #44]	; (800a698 <_sbrk+0x30>)
 800a66a:	6819      	ldr	r1, [r3, #0]
{
 800a66c:	b510      	push	{r4, lr}
 800a66e:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 800a670:	b909      	cbnz	r1, 800a676 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800a672:	490a      	ldr	r1, [pc, #40]	; (800a69c <_sbrk+0x34>)
 800a674:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	4909      	ldr	r1, [pc, #36]	; (800a6a0 <_sbrk+0x38>)
 800a67a:	4c0a      	ldr	r4, [pc, #40]	; (800a6a4 <_sbrk+0x3c>)
 800a67c:	4402      	add	r2, r0
 800a67e:	1b09      	subs	r1, r1, r4
 800a680:	428a      	cmp	r2, r1
 800a682:	d906      	bls.n	800a692 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800a684:	f007 fea4 	bl	80123d0 <__errno>
 800a688:	230c      	movs	r3, #12
 800a68a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800a68c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800a690:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800a692:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 800a694:	e7fc      	b.n	800a690 <_sbrk+0x28>
 800a696:	bf00      	nop
 800a698:	20002a80 	.word	0x20002a80
 800a69c:	200047e0 	.word	0x200047e0
 800a6a0:	20006000 	.word	0x20006000
 800a6a4:	00000400 	.word	0x00000400

0800a6a8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a6a8:	4a03      	ldr	r2, [pc, #12]	; (800a6b8 <SystemInit+0x10>)
 800a6aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a6ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a6b6:	4770      	bx	lr
 800a6b8:	e000ed00 	.word	0xe000ed00

0800a6bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a6bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a6f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a6c0:	480d      	ldr	r0, [pc, #52]	; (800a6f8 <LoopForever+0x6>)
  ldr r1, =_edata
 800a6c2:	490e      	ldr	r1, [pc, #56]	; (800a6fc <LoopForever+0xa>)
  ldr r2, =_sidata
 800a6c4:	4a0e      	ldr	r2, [pc, #56]	; (800a700 <LoopForever+0xe>)
  movs r3, #0
 800a6c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a6c8:	e002      	b.n	800a6d0 <LoopCopyDataInit>

0800a6ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a6ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a6cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a6ce:	3304      	adds	r3, #4

0800a6d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a6d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a6d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a6d4:	d3f9      	bcc.n	800a6ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a6d6:	4a0b      	ldr	r2, [pc, #44]	; (800a704 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a6d8:	4c0b      	ldr	r4, [pc, #44]	; (800a708 <LoopForever+0x16>)
  movs r3, #0
 800a6da:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a6dc:	e001      	b.n	800a6e2 <LoopFillZerobss>

0800a6de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a6de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a6e0:	3204      	adds	r2, #4

0800a6e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a6e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a6e4:	d3fb      	bcc.n	800a6de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a6e6:	f7ff ffdf 	bl	800a6a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a6ea:	f007 fe77 	bl	80123dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a6ee:	f7fe fd41 	bl	8009174 <main>

0800a6f2 <LoopForever>:

LoopForever:
    b LoopForever
 800a6f2:	e7fe      	b.n	800a6f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a6f4:	20006000 	.word	0x20006000
  ldr r0, =_sdata
 800a6f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a6fc:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 800a700:	08019470 	.word	0x08019470
  ldr r2, =_sbss
 800a704:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 800a708:	200047dc 	.word	0x200047dc

0800a70c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a70c:	e7fe      	b.n	800a70c <ADC1_IRQHandler>
	...

0800a710 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a710:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a712:	4a0e      	ldr	r2, [pc, #56]	; (800a74c <HAL_InitTick+0x3c>)
 800a714:	4b0e      	ldr	r3, [pc, #56]	; (800a750 <HAL_InitTick+0x40>)
{
 800a716:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a718:	7818      	ldrb	r0, [r3, #0]
 800a71a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a71e:	fbb3 f3f0 	udiv	r3, r3, r0
 800a722:	6810      	ldr	r0, [r2, #0]
 800a724:	fbb0 f0f3 	udiv	r0, r0, r3
 800a728:	f000 fb9a 	bl	800ae60 <HAL_SYSTICK_Config>
 800a72c:	4604      	mov	r4, r0
 800a72e:	b958      	cbnz	r0, 800a748 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a730:	2d0f      	cmp	r5, #15
 800a732:	d809      	bhi.n	800a748 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a734:	4602      	mov	r2, r0
 800a736:	4629      	mov	r1, r5
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	f000 fb50 	bl	800ade0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a740:	4b04      	ldr	r3, [pc, #16]	; (800a754 <HAL_InitTick+0x44>)
 800a742:	4620      	mov	r0, r4
 800a744:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800a746:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a748:	2001      	movs	r0, #1
 800a74a:	e7fc      	b.n	800a746 <HAL_InitTick+0x36>
 800a74c:	20000000 	.word	0x20000000
 800a750:	20000004 	.word	0x20000004
 800a754:	20000008 	.word	0x20000008

0800a758 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a758:	4a07      	ldr	r2, [pc, #28]	; (800a778 <HAL_Init+0x20>)
{
 800a75a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a75c:	6813      	ldr	r3, [r2, #0]
 800a75e:	f043 0310 	orr.w	r3, r3, #16
 800a762:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a764:	2003      	movs	r0, #3
 800a766:	f000 fb29 	bl	800adbc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800a76a:	2000      	movs	r0, #0
 800a76c:	f7ff ffd0 	bl	800a710 <HAL_InitTick>
  HAL_MspInit();
 800a770:	f7ff fb84 	bl	8009e7c <HAL_MspInit>
}
 800a774:	2000      	movs	r0, #0
 800a776:	bd08      	pop	{r3, pc}
 800a778:	40022000 	.word	0x40022000

0800a77c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800a77c:	4a03      	ldr	r2, [pc, #12]	; (800a78c <HAL_IncTick+0x10>)
 800a77e:	4b04      	ldr	r3, [pc, #16]	; (800a790 <HAL_IncTick+0x14>)
 800a780:	6811      	ldr	r1, [r2, #0]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	440b      	add	r3, r1
 800a786:	6013      	str	r3, [r2, #0]
}
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	20003838 	.word	0x20003838
 800a790:	20000004 	.word	0x20000004

0800a794 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800a794:	4b01      	ldr	r3, [pc, #4]	; (800a79c <HAL_GetTick+0x8>)
 800a796:	6818      	ldr	r0, [r3, #0]
}
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	20003838 	.word	0x20003838

0800a7a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a7a4:	f7ff fff6 	bl	800a794 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a7a8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800a7aa:	bf1c      	itt	ne
 800a7ac:	4b05      	ldrne	r3, [pc, #20]	; (800a7c4 <HAL_Delay+0x24>)
 800a7ae:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800a7b0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800a7b2:	bf18      	it	ne
 800a7b4:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800a7b6:	f7ff ffed 	bl	800a794 <HAL_GetTick>
 800a7ba:	1b43      	subs	r3, r0, r5
 800a7bc:	42a3      	cmp	r3, r4
 800a7be:	d3fa      	bcc.n	800a7b6 <HAL_Delay+0x16>
  {
  }
}
 800a7c0:	bd38      	pop	{r3, r4, r5, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000004 	.word	0x20000004

0800a7c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a7c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d06e      	beq.n	800a8ae <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a7d0:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a7d4:	b90b      	cbnz	r3, 800a7da <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a7d6:	f7ff fb69 	bl	8009eac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a7da:	6822      	ldr	r2, [r4, #0]
 800a7dc:	6813      	ldr	r3, [r2, #0]
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a7e4:	f7ff ffd6 	bl	800a794 <HAL_GetTick>
 800a7e8:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	685a      	ldr	r2, [r3, #4]
 800a7ee:	07d1      	lsls	r1, r2, #31
 800a7f0:	d551      	bpl.n	800a896 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	f022 0202 	bic.w	r2, r2, #2
 800a7f8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a7fa:	f7ff ffcb 	bl	800a794 <HAL_GetTick>
 800a7fe:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	0792      	lsls	r2, r2, #30
 800a806:	d454      	bmi.n	800a8b2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a808:	7e22      	ldrb	r2, [r4, #24]
 800a80a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	bf0c      	ite	eq
 800a810:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a814:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800a818:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a81a:	7e62      	ldrb	r2, [r4, #25]
 800a81c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	bf0c      	ite	eq
 800a822:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a826:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800a82a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a82c:	7ea2      	ldrb	r2, [r4, #26]
 800a82e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	bf0c      	ite	eq
 800a834:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a838:	f022 0220 	bicne.w	r2, r2, #32
 800a83c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a83e:	7ee2      	ldrb	r2, [r4, #27]
 800a840:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	bf0c      	ite	eq
 800a846:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a84a:	f042 0210 	orrne.w	r2, r2, #16
 800a84e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a850:	7f22      	ldrb	r2, [r4, #28]
 800a852:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	bf0c      	ite	eq
 800a858:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a85c:	f022 0208 	bicne.w	r2, r2, #8
 800a860:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a862:	7f62      	ldrb	r2, [r4, #29]
 800a864:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	bf0c      	ite	eq
 800a86a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a86e:	f022 0204 	bicne.w	r2, r2, #4
 800a872:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a874:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a878:	430a      	orrs	r2, r1
 800a87a:	6921      	ldr	r1, [r4, #16]
 800a87c:	430a      	orrs	r2, r1
 800a87e:	6961      	ldr	r1, [r4, #20]
 800a880:	430a      	orrs	r2, r1
 800a882:	6861      	ldr	r1, [r4, #4]
 800a884:	3901      	subs	r1, #1
 800a886:	430a      	orrs	r2, r1
 800a888:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a88a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a88c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a88e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800a890:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 800a894:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a896:	f7ff ff7d 	bl	800a794 <HAL_GetTick>
 800a89a:	1b40      	subs	r0, r0, r5
 800a89c:	280a      	cmp	r0, #10
 800a89e:	d9a4      	bls.n	800a7ea <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a8a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8a6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800a8a8:	2305      	movs	r3, #5
 800a8aa:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	e7f0      	b.n	800a894 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a8b2:	f7ff ff6f 	bl	800a794 <HAL_GetTick>
 800a8b6:	1b40      	subs	r0, r0, r5
 800a8b8:	280a      	cmp	r0, #10
 800a8ba:	d9a1      	bls.n	800a800 <HAL_CAN_Init+0x38>
 800a8bc:	e7f0      	b.n	800a8a0 <HAL_CAN_Init+0xd8>

0800a8be <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800a8be:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800a8c0:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d862      	bhi.n	800a990 <HAL_CAN_ConfigFilter+0xd2>
  CAN_TypeDef *can_ip = hcan->Instance;
 800a8ca:	6803      	ldr	r3, [r0, #0]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a8cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a8d0:	f042 0201 	orr.w	r2, r2, #1
 800a8d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a8d8:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a8da:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a8de:	2401      	movs	r4, #1
 800a8e0:	f002 001f 	and.w	r0, r2, #31
 800a8e4:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a8e8:	ea25 0500 	bic.w	r5, r5, r0
 800a8ec:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a8f0:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a8f2:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a8f4:	bb85      	cbnz	r5, 800a958 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a8f6:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a8fa:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a8fc:	4025      	ands	r5, r4
 800a8fe:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a902:	888d      	ldrh	r5, [r1, #4]
 800a904:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a908:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a90c:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a910:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800a912:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a914:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a918:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800a91c:	698a      	ldr	r2, [r1, #24]
 800a91e:	bb6a      	cbnz	r2, 800a97c <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800a920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a924:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800a926:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800a92a:	690a      	ldr	r2, [r1, #16]
 800a92c:	bb52      	cbnz	r2, 800a984 <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800a92e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a932:	4014      	ands	r4, r2
 800a934:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800a938:	6a0a      	ldr	r2, [r1, #32]
 800a93a:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800a93c:	bf02      	ittt	eq
 800a93e:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 800a942:	4310      	orreq	r0, r2
 800a944:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a948:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a94c:	f022 0201 	bic.w	r2, r2, #1
 800a950:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800a954:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800a956:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800a958:	2d01      	cmp	r5, #1
 800a95a:	d1df      	bne.n	800a91c <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a95c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a960:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a962:	4305      	orrs	r5, r0
 800a964:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a968:	888d      	ldrh	r5, [r1, #4]
 800a96a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a96e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a972:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a976:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800a978:	898d      	ldrh	r5, [r1, #12]
 800a97a:	e7cb      	b.n	800a914 <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800a97c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a980:	4302      	orrs	r2, r0
 800a982:	e7d0      	b.n	800a926 <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800a984:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a988:	4302      	orrs	r2, r0
 800a98a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800a98e:	e7d3      	b.n	800a938 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a990:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a996:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800a998:	2001      	movs	r0, #1
 800a99a:	e7dc      	b.n	800a956 <HAL_CAN_ConfigFilter+0x98>

0800a99c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800a99c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800a99e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a9a2:	2b01      	cmp	r3, #1
{
 800a9a4:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800a9a6:	b2dd      	uxtb	r5, r3
 800a9a8:	d120      	bne.n	800a9ec <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a9aa:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a9b2:	6813      	ldr	r3, [r2, #0]
 800a9b4:	f023 0301 	bic.w	r3, r3, #1
 800a9b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a9ba:	f7ff feeb 	bl	800a794 <HAL_GetTick>
 800a9be:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f013 0301 	ands.w	r3, r3, #1
 800a9c8:	d102      	bne.n	800a9d0 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a9ca:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800a9cc:	461d      	mov	r5, r3
 800a9ce:	e00b      	b.n	800a9e8 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a9d0:	f7ff fee0 	bl	800a794 <HAL_GetTick>
 800a9d4:	1b80      	subs	r0, r0, r6
 800a9d6:	280a      	cmp	r0, #10
 800a9d8:	d9f2      	bls.n	800a9c0 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9e0:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800a9e2:	2305      	movs	r3, #5
 800a9e4:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800a9ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a9ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9f2:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800a9f4:	2501      	movs	r5, #1
 800a9f6:	e7f7      	b.n	800a9e8 <HAL_CAN_Start+0x4c>

0800a9f8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800a9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800a9fa:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800a9fe:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800aa00:	3d01      	subs	r5, #1
 800aa02:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800aa04:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800aa06:	d843      	bhi.n	800aa90 <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800aa08:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 800aa0c:	d03c      	beq.n	800aa88 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800aa0e:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800aa12:	2c03      	cmp	r4, #3
 800aa14:	f04f 0501 	mov.w	r5, #1
 800aa18:	d105      	bne.n	800aa26 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800aa1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800aa20:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800aa22:	2001      	movs	r0, #1
 800aa24:	e02a      	b.n	800aa7c <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800aa26:	40a5      	lsls	r5, r4
 800aa28:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800aa2a:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 800aa2e:	f104 0318 	add.w	r3, r4, #24
 800aa32:	bb20      	cbnz	r0, 800aa7e <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800aa34:	6808      	ldr	r0, [r1, #0]
 800aa36:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aa3a:	011b      	lsls	r3, r3, #4
 800aa3c:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800aa3e:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 800aa42:	690d      	ldr	r5, [r1, #16]
 800aa44:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800aa48:	7d09      	ldrb	r1, [r1, #20]
 800aa4a:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800aa4c:	bf08      	it	eq
 800aa4e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 800aa52:	ea4f 1004 	mov.w	r0, r4, lsl #4
 800aa56:	bf04      	itt	eq
 800aa58:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800aa5c:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800aa60:	4406      	add	r6, r0
 800aa62:	6851      	ldr	r1, [r2, #4]
 800aa64:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800aa6e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800aa72:	f042 0201 	orr.w	r2, r2, #1
 800aa76:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 800aa7a:	2000      	movs	r0, #0
  }
}
 800aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aa7e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 800aa80:	4338      	orrs	r0, r7
 800aa82:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 800aa86:	e7d8      	b.n	800aa3a <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800aa88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa8e:	e7c7      	b.n	800aa20 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800aa90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa96:	e7c3      	b.n	800aa20 <HAL_CAN_AddTxMessage+0x28>

0800aa98 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800aa98:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800aa9a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800aa9e:	3c01      	subs	r4, #1
 800aaa0:	2c01      	cmp	r4, #1
 800aaa2:	d86c      	bhi.n	800ab7e <HAL_CAN_GetRxMessage+0xe6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800aaa4:	6806      	ldr	r6, [r0, #0]
 800aaa6:	b941      	cbnz	r1, 800aaba <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800aaa8:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800aaaa:	07a4      	lsls	r4, r4, #30
 800aaac:	d107      	bne.n	800aabe <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800aaae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800aab4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800aab6:	2001      	movs	r0, #1
 800aab8:	e056      	b.n	800ab68 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800aaba:	6934      	ldr	r4, [r6, #16]
 800aabc:	e7f5      	b.n	800aaaa <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800aabe:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800aac2:	010c      	lsls	r4, r1, #4
 800aac4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800aac8:	f007 0704 	and.w	r7, r7, #4
 800aacc:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800aace:	2f00      	cmp	r7, #0
 800aad0:	d14b      	bne.n	800ab6a <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800aad2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800aad6:	0d7f      	lsrs	r7, r7, #21
 800aad8:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800aada:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800aade:	f007 0702 	and.w	r7, r7, #2
 800aae2:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800aae4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 800aae8:	f007 070f 	and.w	r7, r7, #15
 800aaec:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800aaee:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800aaf2:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800aaf6:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800aaf8:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800aafc:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800aafe:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800ab00:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800ab02:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 800ab06:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800ab08:	6802      	ldr	r2, [r0, #0]
 800ab0a:	4422      	add	r2, r4
 800ab0c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800ab10:	0a12      	lsrs	r2, r2, #8
 800ab12:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800ab14:	6802      	ldr	r2, [r0, #0]
 800ab16:	4422      	add	r2, r4
 800ab18:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800ab1c:	0c12      	lsrs	r2, r2, #16
 800ab1e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ab20:	6802      	ldr	r2, [r0, #0]
 800ab22:	4422      	add	r2, r4
 800ab24:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800ab28:	0e12      	lsrs	r2, r2, #24
 800ab2a:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ab2c:	6802      	ldr	r2, [r0, #0]
 800ab2e:	4422      	add	r2, r4
 800ab30:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800ab34:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ab36:	6802      	ldr	r2, [r0, #0]
 800ab38:	4422      	add	r2, r4
 800ab3a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800ab3e:	0a12      	lsrs	r2, r2, #8
 800ab40:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800ab42:	6802      	ldr	r2, [r0, #0]
 800ab44:	4422      	add	r2, r4
 800ab46:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800ab4a:	0c12      	lsrs	r2, r2, #16
 800ab4c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800ab4e:	6802      	ldr	r2, [r0, #0]
 800ab50:	4414      	add	r4, r2
 800ab52:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800ab56:	0e12      	lsrs	r2, r2, #24
 800ab58:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ab5a:	6803      	ldr	r3, [r0, #0]
 800ab5c:	b951      	cbnz	r1, 800ab74 <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ab5e:	68da      	ldr	r2, [r3, #12]
 800ab60:	f042 0220 	orr.w	r2, r2, #32
 800ab64:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800ab66:	2000      	movs	r0, #0
  }
}
 800ab68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800ab6a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800ab6e:	08ff      	lsrs	r7, r7, #3
 800ab70:	6057      	str	r7, [r2, #4]
 800ab72:	e7b2      	b.n	800aada <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800ab74:	691a      	ldr	r2, [r3, #16]
 800ab76:	f042 0220 	orr.w	r2, r2, #32
 800ab7a:	611a      	str	r2, [r3, #16]
 800ab7c:	e7f3      	b.n	800ab66 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ab7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab84:	e796      	b.n	800aab4 <HAL_CAN_GetRxMessage+0x1c>

0800ab86 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800ab86:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d805      	bhi.n	800ab9c <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800ab90:	6802      	ldr	r2, [r0, #0]
 800ab92:	6953      	ldr	r3, [r2, #20]
 800ab94:	4319      	orrs	r1, r3
 800ab96:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 800ab98:	2000      	movs	r0, #0
 800ab9a:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ab9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aba2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800aba4:	2001      	movs	r0, #1
  }
}
 800aba6:	4770      	bx	lr

0800aba8 <HAL_CAN_TxMailbox0CompleteCallback>:
 800aba8:	4770      	bx	lr

0800abaa <HAL_CAN_TxMailbox1CompleteCallback>:
 800abaa:	4770      	bx	lr

0800abac <HAL_CAN_TxMailbox2CompleteCallback>:
 800abac:	4770      	bx	lr

0800abae <HAL_CAN_TxMailbox0AbortCallback>:
 800abae:	4770      	bx	lr

0800abb0 <HAL_CAN_TxMailbox1AbortCallback>:
 800abb0:	4770      	bx	lr

0800abb2 <HAL_CAN_TxMailbox2AbortCallback>:
 800abb2:	4770      	bx	lr

0800abb4 <HAL_CAN_RxFifo0FullCallback>:
 800abb4:	4770      	bx	lr

0800abb6 <HAL_CAN_RxFifo1MsgPendingCallback>:
 800abb6:	4770      	bx	lr

0800abb8 <HAL_CAN_RxFifo1FullCallback>:
 800abb8:	4770      	bx	lr

0800abba <HAL_CAN_SleepCallback>:
 800abba:	4770      	bx	lr

0800abbc <HAL_CAN_WakeUpFromRxMsgCallback>:
 800abbc:	4770      	bx	lr

0800abbe <HAL_CAN_ErrorCallback>:
 800abbe:	4770      	bx	lr

0800abc0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800abc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800abc4:	6803      	ldr	r3, [r0, #0]
 800abc6:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800abc8:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800abcc:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800abce:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800abd2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800abd6:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800abda:	f016 0401 	ands.w	r4, r6, #1
{
 800abde:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800abe0:	d022      	beq.n	800ac28 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800abe2:	f017 0401 	ands.w	r4, r7, #1
 800abe6:	d007      	beq.n	800abf8 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800abe8:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800abea:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800abec:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800abee:	f140 80a5 	bpl.w	800ad3c <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800abf2:	f7ff ffd9 	bl	800aba8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800abf6:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800abf8:	05fb      	lsls	r3, r7, #23
 800abfa:	d509      	bpl.n	800ac10 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800ac02:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800ac04:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800ac06:	f140 80a7 	bpl.w	800ad58 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f7ff ffcd 	bl	800abaa <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800ac10:	03fb      	lsls	r3, r7, #15
 800ac12:	d509      	bpl.n	800ac28 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800ac1a:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800ac1c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800ac1e:	f140 80a9 	bpl.w	800ad74 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7ff ffc2 	bl	800abac <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800ac28:	0733      	lsls	r3, r6, #28
 800ac2a:	d507      	bpl.n	800ac3c <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800ac2c:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800ac30:	bf1f      	itttt	ne
 800ac32:	682b      	ldrne	r3, [r5, #0]
 800ac34:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800ac36:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800ac3a:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800ac3c:	0777      	lsls	r7, r6, #29
 800ac3e:	d508      	bpl.n	800ac52 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800ac40:	f01b 0f08 	tst.w	fp, #8
 800ac44:	d005      	beq.n	800ac52 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800ac46:	682b      	ldr	r3, [r5, #0]
 800ac48:	2208      	movs	r2, #8
 800ac4a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f7ff ffb1 	bl	800abb4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800ac52:	07b0      	lsls	r0, r6, #30
 800ac54:	d506      	bpl.n	800ac64 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800ac56:	682b      	ldr	r3, [r5, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	0799      	lsls	r1, r3, #30
 800ac5c:	d002      	beq.n	800ac64 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f7f6 fae6 	bl	8001230 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800ac64:	0672      	lsls	r2, r6, #25
 800ac66:	d507      	bpl.n	800ac78 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800ac68:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800ac6c:	bf1f      	itttt	ne
 800ac6e:	682b      	ldrne	r3, [r5, #0]
 800ac70:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800ac72:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800ac76:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800ac78:	06b3      	lsls	r3, r6, #26
 800ac7a:	d508      	bpl.n	800ac8e <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800ac7c:	f01a 0f08 	tst.w	sl, #8
 800ac80:	d005      	beq.n	800ac8e <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	2208      	movs	r2, #8
 800ac86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800ac88:	4628      	mov	r0, r5
 800ac8a:	f7ff ff95 	bl	800abb8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800ac8e:	06f7      	lsls	r7, r6, #27
 800ac90:	d506      	bpl.n	800aca0 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800ac92:	682b      	ldr	r3, [r5, #0]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	0798      	lsls	r0, r3, #30
 800ac98:	d002      	beq.n	800aca0 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	f7ff ff8b 	bl	800abb6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800aca0:	03b1      	lsls	r1, r6, #14
 800aca2:	d508      	bpl.n	800acb6 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800aca4:	f019 0f10 	tst.w	r9, #16
 800aca8:	d005      	beq.n	800acb6 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800acaa:	682b      	ldr	r3, [r5, #0]
 800acac:	2210      	movs	r2, #16
 800acae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800acb0:	4628      	mov	r0, r5
 800acb2:	f7ff ff82 	bl	800abba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800acb6:	03f2      	lsls	r2, r6, #15
 800acb8:	d508      	bpl.n	800accc <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800acba:	f019 0f08 	tst.w	r9, #8
 800acbe:	d005      	beq.n	800accc <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	2208      	movs	r2, #8
 800acc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800acc6:	4628      	mov	r0, r5
 800acc8:	f7ff ff78 	bl	800abbc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800accc:	0433      	lsls	r3, r6, #16
 800acce:	d52c      	bpl.n	800ad2a <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800acd0:	f019 0f04 	tst.w	r9, #4
 800acd4:	682a      	ldr	r2, [r5, #0]
 800acd6:	d026      	beq.n	800ad26 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800acd8:	05f7      	lsls	r7, r6, #23
 800acda:	d504      	bpl.n	800ace6 <HAL_CAN_IRQHandler+0x126>
 800acdc:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800ace0:	bf18      	it	ne
 800ace2:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ace6:	05b0      	lsls	r0, r6, #22
 800ace8:	d504      	bpl.n	800acf4 <HAL_CAN_IRQHandler+0x134>
 800acea:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800acee:	bf18      	it	ne
 800acf0:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800acf4:	0571      	lsls	r1, r6, #21
 800acf6:	d504      	bpl.n	800ad02 <HAL_CAN_IRQHandler+0x142>
 800acf8:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800acfc:	bf18      	it	ne
 800acfe:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ad02:	0533      	lsls	r3, r6, #20
 800ad04:	d50f      	bpl.n	800ad26 <HAL_CAN_IRQHandler+0x166>
 800ad06:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 800ad0a:	d00c      	beq.n	800ad26 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 800ad0c:	2b40      	cmp	r3, #64	; 0x40
 800ad0e:	d04f      	beq.n	800adb0 <HAL_CAN_IRQHandler+0x1f0>
 800ad10:	d83e      	bhi.n	800ad90 <HAL_CAN_IRQHandler+0x1d0>
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	d046      	beq.n	800ada4 <HAL_CAN_IRQHandler+0x1e4>
 800ad16:	2b30      	cmp	r3, #48	; 0x30
 800ad18:	d047      	beq.n	800adaa <HAL_CAN_IRQHandler+0x1ea>
 800ad1a:	2b10      	cmp	r3, #16
 800ad1c:	d03f      	beq.n	800ad9e <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800ad1e:	6993      	ldr	r3, [r2, #24]
 800ad20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad24:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800ad26:	2304      	movs	r3, #4
 800ad28:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800ad2a:	b12c      	cbz	r4, 800ad38 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800ad2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad2e:	431c      	orrs	r4, r3
 800ad30:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800ad32:	4628      	mov	r0, r5
 800ad34:	f7ff ff43 	bl	800abbe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800ad38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ad3c:	077a      	lsls	r2, r7, #29
 800ad3e:	d405      	bmi.n	800ad4c <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800ad40:	f017 0408 	ands.w	r4, r7, #8
 800ad44:	d105      	bne.n	800ad52 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800ad46:	f7ff ff32 	bl	800abae <HAL_CAN_TxMailbox0AbortCallback>
 800ad4a:	e755      	b.n	800abf8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ad4c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800ad50:	e752      	b.n	800abf8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800ad52:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800ad56:	e74f      	b.n	800abf8 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800ad58:	0579      	lsls	r1, r7, #21
 800ad5a:	d502      	bpl.n	800ad62 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800ad5c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800ad60:	e756      	b.n	800ac10 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800ad62:	053a      	lsls	r2, r7, #20
 800ad64:	d502      	bpl.n	800ad6c <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800ad66:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800ad6a:	e751      	b.n	800ac10 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	f7ff ff1f 	bl	800abb0 <HAL_CAN_TxMailbox1AbortCallback>
 800ad72:	e74d      	b.n	800ac10 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800ad74:	0379      	lsls	r1, r7, #13
 800ad76:	d502      	bpl.n	800ad7e <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800ad78:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800ad7c:	e754      	b.n	800ac28 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800ad7e:	033a      	lsls	r2, r7, #12
 800ad80:	d502      	bpl.n	800ad88 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800ad82:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800ad86:	e74f      	b.n	800ac28 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f7ff ff12 	bl	800abb2 <HAL_CAN_TxMailbox2AbortCallback>
 800ad8e:	e74b      	b.n	800ac28 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 800ad90:	2b50      	cmp	r3, #80	; 0x50
 800ad92:	d010      	beq.n	800adb6 <HAL_CAN_IRQHandler+0x1f6>
 800ad94:	2b60      	cmp	r3, #96	; 0x60
 800ad96:	d1c2      	bne.n	800ad1e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800ad98:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 800ad9c:	e7bf      	b.n	800ad1e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 800ad9e:	f044 0408 	orr.w	r4, r4, #8
            break;
 800ada2:	e7bc      	b.n	800ad1e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800ada4:	f044 0410 	orr.w	r4, r4, #16
            break;
 800ada8:	e7b9      	b.n	800ad1e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800adaa:	f044 0420 	orr.w	r4, r4, #32
            break;
 800adae:	e7b6      	b.n	800ad1e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 800adb0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 800adb4:	e7b3      	b.n	800ad1e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 800adb6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800adba:	e7b0      	b.n	800ad1e <HAL_CAN_IRQHandler+0x15e>

0800adbc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800adbc:	4907      	ldr	r1, [pc, #28]	; (800addc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800adbe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800adc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800adc4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800adc6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800adc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800adcc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800adce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800add0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800add4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800add8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800adda:	4770      	bx	lr
 800addc:	e000ed00 	.word	0xe000ed00

0800ade0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ade0:	4b16      	ldr	r3, [pc, #88]	; (800ae3c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ade2:	b530      	push	{r4, r5, lr}
 800ade4:	68dc      	ldr	r4, [r3, #12]
 800ade6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800adea:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800adee:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800adf0:	2d04      	cmp	r5, #4
 800adf2:	bf28      	it	cs
 800adf4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800adf6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800adf8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800adfc:	bf8c      	ite	hi
 800adfe:	3c03      	subhi	r4, #3
 800ae00:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae02:	fa03 f505 	lsl.w	r5, r3, r5
 800ae06:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ae0a:	40a3      	lsls	r3, r4
 800ae0c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae10:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800ae12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae14:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae18:	bfac      	ite	ge
 800ae1a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae1e:	4a08      	ldrlt	r2, [pc, #32]	; (800ae40 <HAL_NVIC_SetPriority+0x60>)
 800ae20:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ae24:	bfb8      	it	lt
 800ae26:	f000 000f 	andlt.w	r0, r0, #15
 800ae2a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae2c:	bfaa      	itet	ge
 800ae2e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae32:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae34:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800ae38:	bd30      	pop	{r4, r5, pc}
 800ae3a:	bf00      	nop
 800ae3c:	e000ed00 	.word	0xe000ed00
 800ae40:	e000ed14 	.word	0xe000ed14

0800ae44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ae44:	2800      	cmp	r0, #0
 800ae46:	db08      	blt.n	800ae5a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae48:	0942      	lsrs	r2, r0, #5
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	f000 001f 	and.w	r0, r0, #31
 800ae50:	fa03 f000 	lsl.w	r0, r3, r0
 800ae54:	4b01      	ldr	r3, [pc, #4]	; (800ae5c <HAL_NVIC_EnableIRQ+0x18>)
 800ae56:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ae5a:	4770      	bx	lr
 800ae5c:	e000e100 	.word	0xe000e100

0800ae60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ae60:	3801      	subs	r0, #1
 800ae62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800ae66:	d20a      	bcs.n	800ae7e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ae68:	4b06      	ldr	r3, [pc, #24]	; (800ae84 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae6a:	4a07      	ldr	r2, [pc, #28]	; (800ae88 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ae6c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae6e:	21f0      	movs	r1, #240	; 0xf0
 800ae70:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ae74:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ae76:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ae78:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ae7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ae7c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800ae7e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	e000e010 	.word	0xe000e010
 800ae88:	e000ed00 	.word	0xe000ed00

0800ae8c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800ae8c:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800ae8e:	4604      	mov	r4, r0
 800ae90:	b168      	cbz	r0, 800aeae <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800ae92:	7903      	ldrb	r3, [r0, #4]
 800ae94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae98:	b913      	cbnz	r3, 800aea0 <HAL_DAC_Init+0x14>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800ae9a:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800ae9c:	f7ff f842 	bl	8009f24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800aea0:	2302      	movs	r3, #2
 800aea2:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800aea4:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800aea6:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800aea8:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800aeaa:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 800aeac:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800aeae:	2001      	movs	r0, #1
 800aeb0:	e7fc      	b.n	800aeac <HAL_DAC_Init+0x20>

0800aeb2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800aeb2:	b513      	push	{r0, r1, r4, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 800aeb4:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 800aeb6:	2400      	movs	r4, #0
 800aeb8:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 800aeba:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 800aebc:	b941      	cbnz	r1, 800aed0 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800aebe:	9901      	ldr	r1, [sp, #4]
 800aec0:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800aec2:	440a      	add	r2, r1
 800aec4:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800aec6:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 800aec8:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800aeca:	6013      	str	r3, [r2, #0]
}
 800aecc:	b002      	add	sp, #8
 800aece:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800aed0:	9901      	ldr	r1, [sp, #4]
 800aed2:	3114      	adds	r1, #20
 800aed4:	e7f5      	b.n	800aec2 <HAL_DAC_SetValue+0x10>

0800aed6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800aed6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800aed8:	7943      	ldrb	r3, [r0, #5]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	f04f 0302 	mov.w	r3, #2
 800aee0:	d014      	beq.n	800af0c <HAL_DAC_Start+0x36>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800aee2:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800aee4:	6803      	ldr	r3, [r0, #0]
 800aee6:	2201      	movs	r2, #1
 800aee8:	681c      	ldr	r4, [r3, #0]
 800aeea:	408a      	lsls	r2, r1
 800aeec:	4322      	orrs	r2, r4
 800aeee:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800aef0:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 800aef2:	b969      	cbnz	r1, 800af10 <HAL_DAC_Start+0x3a>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800aef4:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 800aef8:	2a3c      	cmp	r2, #60	; 0x3c
 800aefa:	d103      	bne.n	800af04 <HAL_DAC_Start+0x2e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800af02:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800af04:	2301      	movs	r3, #1
 800af06:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800af08:	2300      	movs	r3, #0
 800af0a:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800af0c:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 800af0e:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 800af10:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 800af14:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800af18:	d1f4      	bne.n	800af04 <HAL_DAC_Start+0x2e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	f042 0202 	orr.w	r2, r2, #2
 800af20:	e7ef      	b.n	800af02 <HAL_DAC_Start+0x2c>

0800af22 <HAL_DAC_GetValue>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Returns the DAC channel data output register value */
  if(Channel == DAC_CHANNEL_1) 
 800af22:	6803      	ldr	r3, [r0, #0]
 800af24:	b909      	cbnz	r1, 800af2a <HAL_DAC_GetValue+0x8>
  {
    return hdac->Instance->DOR1;
 800af26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800af28:	4770      	bx	lr
  }
  else /* channel = DAC_CHANNEL_2  */
  {
    return hdac->Instance->DOR2;
 800af2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
  }
}
 800af2c:	4770      	bx	lr

0800af2e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800af2e:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800af30:	7943      	ldrb	r3, [r0, #5]
 800af32:	2b01      	cmp	r3, #1
 800af34:	f04f 0302 	mov.w	r3, #2
 800af38:	d018      	beq.n	800af6c <HAL_DAC_ConfigChannel+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800af3a:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800af3c:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 800af3e:	6823      	ldr	r3, [r4, #0]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800af40:	f640 75fe 	movw	r5, #4094	; 0xffe
 800af44:	4095      	lsls	r5, r2
 800af46:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800af4a:	e9d1 3100 	ldrd	r3, r1, [r1]
 800af4e:	430b      	orrs	r3, r1
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800af50:	4093      	lsls	r3, r2
 800af52:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800af54:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	21c0      	movs	r1, #192	; 0xc0
 800af5a:	fa01 f202 	lsl.w	r2, r1, r2
 800af5e:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800af62:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800af64:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800af66:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800af68:	2300      	movs	r3, #0
 800af6a:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800af6c:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 800af6e:	bd30      	pop	{r4, r5, pc}

0800af70 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800af70:	6801      	ldr	r1, [r0, #0]
 800af72:	4b0c      	ldr	r3, [pc, #48]	; (800afa4 <DMA_CalcBaseAndBitshift+0x34>)
 800af74:	4299      	cmp	r1, r3
{
 800af76:	b510      	push	{r4, lr}
 800af78:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800af7c:	d809      	bhi.n	800af92 <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800af7e:	4a0a      	ldr	r2, [pc, #40]	; (800afa8 <DMA_CalcBaseAndBitshift+0x38>)
 800af80:	440a      	add	r2, r1
 800af82:	fbb2 f2f4 	udiv	r2, r2, r4
 800af86:	0092      	lsls	r2, r2, #2
 800af88:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800af8a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 800af8e:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800af90:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800af92:	4b06      	ldr	r3, [pc, #24]	; (800afac <DMA_CalcBaseAndBitshift+0x3c>)
 800af94:	440b      	add	r3, r1
 800af96:	fbb3 f3f4 	udiv	r3, r3, r4
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800af9e:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <DMA_CalcBaseAndBitshift+0x40>)
 800afa0:	e7f5      	b.n	800af8e <DMA_CalcBaseAndBitshift+0x1e>
 800afa2:	bf00      	nop
 800afa4:	40020407 	.word	0x40020407
 800afa8:	bffdfff8 	.word	0xbffdfff8
 800afac:	bffdfbf8 	.word	0xbffdfbf8
 800afb0:	40020400 	.word	0x40020400

0800afb4 <HAL_DMA_Init>:
{ 
 800afb4:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800afb6:	4604      	mov	r4, r0
 800afb8:	b1f8      	cbz	r0, 800affa <HAL_DMA_Init+0x46>
  hdma->State = HAL_DMA_STATE_BUSY;
 800afba:	2302      	movs	r3, #2
 800afbc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 800afc0:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800afc4:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800afc6:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 800afc8:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800afca:	432b      	orrs	r3, r5
 800afcc:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800afce:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800afd0:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800afd2:	6945      	ldr	r5, [r0, #20]
 800afd4:	432b      	orrs	r3, r5
 800afd6:	6985      	ldr	r5, [r0, #24]
 800afd8:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800afda:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800afdc:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800afe0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800afe4:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800afe6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 800afe8:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 800afea:	f7ff ffc1 	bl	800af70 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800afee:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800aff0:	f44f 7380 	mov.w	r3, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aff4:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 800aff6:	8423      	strh	r3, [r4, #32]
}  
 800aff8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800affa:	2001      	movs	r0, #1
 800affc:	e7fc      	b.n	800aff8 <HAL_DMA_Init+0x44>

0800affe <HAL_DMA_Start_IT>:
{
 800affe:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800b000:	f890 4020 	ldrb.w	r4, [r0, #32]
 800b004:	2c01      	cmp	r4, #1
 800b006:	d034      	beq.n	800b072 <HAL_DMA_Start_IT+0x74>
  if(HAL_DMA_STATE_READY == hdma->State)
 800b008:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800b00c:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800b00e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800b010:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800b014:	f04f 0600 	mov.w	r6, #0
 800b018:	f04f 0402 	mov.w	r4, #2
 800b01c:	d127      	bne.n	800b06e <HAL_DMA_Start_IT+0x70>
  	hdma->State = HAL_DMA_STATE_BUSY;
 800b01e:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800b022:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b024:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800b026:	6826      	ldr	r6, [r4, #0]
 800b028:	f026 0601 	bic.w	r6, r6, #1
 800b02c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800b02e:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 800b032:	40bd      	lsls	r5, r7
 800b034:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800b036:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b038:	6843      	ldr	r3, [r0, #4]
 800b03a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800b03c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 800b03e:	bf0b      	itete	eq
 800b040:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800b042:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800b044:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800b046:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800b048:	b14b      	cbz	r3, 800b05e <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800b050:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	f043 0301 	orr.w	r3, r3, #1
 800b058:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800b05a:	2000      	movs	r0, #0
} 
 800b05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	f043 030a 	orr.w	r3, r3, #10
 800b064:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	f023 0304 	bic.w	r3, r3, #4
 800b06c:	e7f0      	b.n	800b050 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 800b06e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800b072:	2002      	movs	r0, #2
 800b074:	e7f2      	b.n	800b05c <HAL_DMA_Start_IT+0x5e>

0800b076 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b076:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d006      	beq.n	800b08c <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b07e:	2304      	movs	r3, #4
 800b080:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800b082:	2300      	movs	r3, #0
 800b084:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800b088:	2001      	movs	r0, #1
 800b08a:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800b08c:	6803      	ldr	r3, [r0, #0]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	f022 020e 	bic.w	r2, r2, #14
 800b094:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	f022 0201 	bic.w	r2, r2, #1
 800b09c:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800b09e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	408b      	lsls	r3, r1
 800b0a6:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 800b0a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0ac:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 800b0ae:	2000      	movs	r0, #0
}
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b0b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800b0b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800b0b6:	6803      	ldr	r3, [r0, #0]
{
 800b0b8:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b0ba:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800b0bc:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800b0be:	2404      	movs	r4, #4
 800b0c0:	4094      	lsls	r4, r2
 800b0c2:	4234      	tst	r4, r6
 800b0c4:	d00e      	beq.n	800b0e4 <HAL_DMA_IRQHandler+0x32>
 800b0c6:	f015 0f04 	tst.w	r5, #4
 800b0ca:	d00b      	beq.n	800b0e4 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800b0d0:	bf5e      	ittt	pl
 800b0d2:	681a      	ldrpl	r2, [r3, #0]
 800b0d4:	f022 0204 	bicpl.w	r2, r2, #4
 800b0d8:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800b0da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800b0dc:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800b0de:	b363      	cbz	r3, 800b13a <HAL_DMA_IRQHandler+0x88>
}  
 800b0e0:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800b0e2:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800b0e4:	2402      	movs	r4, #2
 800b0e6:	4094      	lsls	r4, r2
 800b0e8:	4234      	tst	r4, r6
 800b0ea:	d012      	beq.n	800b112 <HAL_DMA_IRQHandler+0x60>
 800b0ec:	f015 0f02 	tst.w	r5, #2
 800b0f0:	d00f      	beq.n	800b112 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	0695      	lsls	r5, r2, #26
 800b0f6:	d406      	bmi.n	800b106 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	f022 020a 	bic.w	r2, r2, #10
 800b0fe:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800b100:	2301      	movs	r3, #1
 800b102:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 800b106:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800b108:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 800b10a:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800b10e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b110:	e7e5      	b.n	800b0de <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800b112:	2408      	movs	r4, #8
 800b114:	4094      	lsls	r4, r2
 800b116:	4234      	tst	r4, r6
 800b118:	d00f      	beq.n	800b13a <HAL_DMA_IRQHandler+0x88>
 800b11a:	072c      	lsls	r4, r5, #28
 800b11c:	d50d      	bpl.n	800b13a <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800b11e:	681c      	ldr	r4, [r3, #0]
 800b120:	f024 040e 	bic.w	r4, r4, #14
 800b124:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800b126:	2301      	movs	r3, #1
 800b128:	fa03 f202 	lsl.w	r2, r3, r2
 800b12c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b12e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 800b130:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b134:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800b136:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b138:	e7d1      	b.n	800b0de <HAL_DMA_IRQHandler+0x2c>
}  
 800b13a:	bc70      	pop	{r4, r5, r6}
 800b13c:	4770      	bx	lr
	...

0800b140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b144:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800b2c8 <HAL_GPIO_Init+0x188>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b148:	4c5d      	ldr	r4, [pc, #372]	; (800b2c0 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00u;
 800b14a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b14c:	680a      	ldr	r2, [r1, #0]
 800b14e:	fa32 f503 	lsrs.w	r5, r2, r3
 800b152:	d102      	bne.n	800b15a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 800b154:	b003      	add	sp, #12
 800b156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b15a:	2501      	movs	r5, #1
 800b15c:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 800b160:	ea1e 0202 	ands.w	r2, lr, r2
 800b164:	f000 80a1 	beq.w	800b2aa <HAL_GPIO_Init+0x16a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b168:	684e      	ldr	r6, [r1, #4]
 800b16a:	2703      	movs	r7, #3
 800b16c:	f006 0503 	and.w	r5, r6, #3
 800b170:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800b174:	fa07 fc08 	lsl.w	ip, r7, r8
 800b178:	1e6f      	subs	r7, r5, #1
 800b17a:	2f01      	cmp	r7, #1
 800b17c:	ea6f 0c0c 	mvn.w	ip, ip
 800b180:	d834      	bhi.n	800b1ec <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800b182:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800b184:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b188:	68cf      	ldr	r7, [r1, #12]
 800b18a:	fa07 f708 	lsl.w	r7, r7, r8
 800b18e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800b192:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800b194:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b196:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b19a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800b19e:	409f      	lsls	r7, r3
 800b1a0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800b1a4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800b1a6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800b1a8:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b1ac:	688f      	ldr	r7, [r1, #8]
 800b1ae:	fa07 f708 	lsl.w	r7, r7, r8
 800b1b2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b1b6:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 800b1b8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b1ba:	d119      	bne.n	800b1f0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 800b1bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800b1c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b1c4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800b1c8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b1cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800b1d0:	f04f 0e0f 	mov.w	lr, #15
 800b1d4:	fa0e fe0b 	lsl.w	lr, lr, fp
 800b1d8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b1dc:	690f      	ldr	r7, [r1, #16]
 800b1de:	fa07 f70b 	lsl.w	r7, r7, fp
 800b1e2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 800b1e6:	f8ca 7020 	str.w	r7, [sl, #32]
 800b1ea:	e001      	b.n	800b1f0 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b1ec:	2d03      	cmp	r5, #3
 800b1ee:	d1da      	bne.n	800b1a6 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 800b1f0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b1f2:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800b1f6:	ea07 0c0c 	and.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b1fa:	ea45 050c 	orr.w	r5, r5, ip
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b1fe:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 800b202:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b204:	d051      	beq.n	800b2aa <HAL_GPIO_Init+0x16a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b206:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800b20a:	f045 0501 	orr.w	r5, r5, #1
 800b20e:	f8c9 5018 	str.w	r5, [r9, #24]
 800b212:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800b216:	f023 0703 	bic.w	r7, r3, #3
 800b21a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800b21e:	f005 0501 	and.w	r5, r5, #1
 800b222:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800b226:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b228:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b22c:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800b22e:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b230:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800b234:	f04f 0c0f 	mov.w	ip, #15
 800b238:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b23c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b240:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b244:	d033      	beq.n	800b2ae <HAL_GPIO_Init+0x16e>
 800b246:	4d1f      	ldr	r5, [pc, #124]	; (800b2c4 <HAL_GPIO_Init+0x184>)
 800b248:	42a8      	cmp	r0, r5
 800b24a:	d032      	beq.n	800b2b2 <HAL_GPIO_Init+0x172>
 800b24c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b250:	42a8      	cmp	r0, r5
 800b252:	d030      	beq.n	800b2b6 <HAL_GPIO_Init+0x176>
 800b254:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b258:	42a8      	cmp	r0, r5
 800b25a:	d02e      	beq.n	800b2ba <HAL_GPIO_Init+0x17a>
 800b25c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b260:	42a8      	cmp	r0, r5
 800b262:	bf0c      	ite	eq
 800b264:	2504      	moveq	r5, #4
 800b266:	2505      	movne	r5, #5
 800b268:	fa05 f50e 	lsl.w	r5, r5, lr
 800b26c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b270:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800b272:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800b274:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b276:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 800b27a:	bf0c      	ite	eq
 800b27c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b27e:	4315      	orrne	r5, r2
        EXTI->IMR = temp;
 800b280:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR;
 800b282:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b284:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 800b288:	bf0c      	ite	eq
 800b28a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b28c:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 800b28e:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR;
 800b290:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b292:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800b296:	bf0c      	ite	eq
 800b298:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b29a:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 800b29c:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 800b29e:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b2a0:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800b2a2:	bf54      	ite	pl
 800b2a4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800b2a6:	4315      	orrmi	r5, r2
        EXTI->FTSR = temp;
 800b2a8:	60e5      	str	r5, [r4, #12]
    position++;
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	e74e      	b.n	800b14c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b2ae:	2500      	movs	r5, #0
 800b2b0:	e7da      	b.n	800b268 <HAL_GPIO_Init+0x128>
 800b2b2:	2501      	movs	r5, #1
 800b2b4:	e7d8      	b.n	800b268 <HAL_GPIO_Init+0x128>
 800b2b6:	2502      	movs	r5, #2
 800b2b8:	e7d6      	b.n	800b268 <HAL_GPIO_Init+0x128>
 800b2ba:	2503      	movs	r5, #3
 800b2bc:	e7d4      	b.n	800b268 <HAL_GPIO_Init+0x128>
 800b2be:	bf00      	nop
 800b2c0:	40010400 	.word	0x40010400
 800b2c4:	48000400 	.word	0x48000400
 800b2c8:	40021000 	.word	0x40021000

0800b2cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b2cc:	6903      	ldr	r3, [r0, #16]
 800b2ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b2d0:	bf14      	ite	ne
 800b2d2:	2001      	movne	r0, #1
 800b2d4:	2000      	moveq	r0, #0
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b2d8:	b10a      	cbz	r2, 800b2de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b2da:	6181      	str	r1, [r0, #24]
 800b2dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b2de:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800b2e0:	4770      	bx	lr

0800b2e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b2e4:	4604      	mov	r4, r0
{
 800b2e6:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d04f      	beq.n	800b38c <HAL_PCD_Init+0xaa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b2ec:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800b2f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b2f4:	b91b      	cbnz	r3, 800b2fe <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b2f6:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b2fa:	f006 ff0f 	bl	801211c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b2fe:	2303      	movs	r3, #3
 800b300:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b304:	6820      	ldr	r0, [r4, #0]
 800b306:	f003 fced 	bl	800ece4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b30a:	2300      	movs	r3, #0
 800b30c:	6865      	ldr	r5, [r4, #4]
 800b30e:	2628      	movs	r6, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b310:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b312:	4618      	mov	r0, r3
 800b314:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b316:	428d      	cmp	r5, r1
 800b318:	f103 0201 	add.w	r2, r3, #1
 800b31c:	d81b      	bhi.n	800b356 <HAL_PCD_Init+0x74>
 800b31e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b320:	2628      	movs	r6, #40	; 0x28
 800b322:	4619      	mov	r1, r3
 800b324:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b326:	4285      	cmp	r5, r0
 800b328:	f103 0301 	add.w	r3, r3, #1
 800b32c:	d821      	bhi.n	800b372 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b32e:	f104 0610 	add.w	r6, r4, #16
 800b332:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b334:	466d      	mov	r5, sp
 800b336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b338:	6833      	ldr	r3, [r6, #0]
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	1d23      	adds	r3, r4, #4
 800b33e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b340:	6820      	ldr	r0, [r4, #0]
 800b342:	f003 fcd9 	bl	800ecf8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b346:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 800b348:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800b34a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800b34e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 800b352:	b007      	add	sp, #28
 800b354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 800b356:	fb06 4301 	mla	r3, r6, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b35a:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800b35e:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800b362:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b366:	86d9      	strh	r1, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b368:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 800b36c:	6418      	str	r0, [r3, #64]	; 0x40
 800b36e:	4613      	mov	r3, r2
 800b370:	e7d0      	b.n	800b314 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 800b372:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b376:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800b37a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800b37e:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b382:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b386:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b38a:	e7cb      	b.n	800b324 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 800b38c:	2001      	movs	r0, #1
 800b38e:	e7e0      	b.n	800b352 <HAL_PCD_Init+0x70>

0800b390 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b390:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800b392:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800b396:	2b01      	cmp	r3, #1
{
 800b398:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800b39a:	d010      	beq.n	800b3be <HAL_PCD_Start+0x2e>
 800b39c:	2501      	movs	r5, #1
 800b39e:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800b3a2:	6800      	ldr	r0, [r0, #0]
 800b3a4:	f003 fc95 	bl	800ecd2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f007 f807 	bl	80123be <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800b3b0:	6820      	ldr	r0, [r4, #0]
 800b3b2:	f003 ff75 	bl	800f2a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800b3bc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800b3be:	2002      	movs	r0, #2
 800b3c0:	e7fc      	b.n	800b3bc <HAL_PCD_Start+0x2c>

0800b3c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b3c2:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800b3c4:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800b3c8:	2a01      	cmp	r2, #1
{
 800b3ca:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800b3cc:	d00b      	beq.n	800b3e6 <HAL_PCD_SetAddress+0x24>
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b3d4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b3d8:	6800      	ldr	r0, [r0, #0]
 800b3da:	f003 ff5b 	bl	800f294 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b3de:	2000      	movs	r0, #0
 800b3e0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800b3e4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800b3e6:	2002      	movs	r0, #2
 800b3e8:	e7fc      	b.n	800b3e4 <HAL_PCD_SetAddress+0x22>
	...

0800b3ec <HAL_PCD_IRQHandler>:
{
 800b3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800b3f2:	6800      	ldr	r0, [r0, #0]
 800b3f4:	f003 ff56 	bl	800f2a4 <USB_ReadInterrupts>
 800b3f8:	0401      	lsls	r1, r0, #16
 800b3fa:	d509      	bpl.n	800b410 <HAL_PCD_IRQHandler+0x24>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b3fc:	f8df b9cc 	ldr.w	fp, [pc, #2508]	; 800bdcc <HAL_PCD_IRQHandler+0x9e0>
 800b400:	f8df 89cc 	ldr.w	r8, [pc, #2508]	; 800bdd0 <HAL_PCD_IRQHandler+0x9e4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800b40a:	041f      	lsls	r7, r3, #16
 800b40c:	f100 8093 	bmi.w	800b536 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800b410:	6820      	ldr	r0, [r4, #0]
 800b412:	f003 ff47 	bl	800f2a4 <USB_ReadInterrupts>
 800b416:	0542      	lsls	r2, r0, #21
 800b418:	d50f      	bpl.n	800b43a <HAL_PCD_IRQHandler+0x4e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b41a:	6822      	ldr	r2, [r4, #0]
 800b41c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b424:	041b      	lsls	r3, r3, #16
 800b426:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 800b428:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b42a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800b42e:	f006 fece 	bl	80121ce <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b432:	2100      	movs	r1, #0
 800b434:	4620      	mov	r0, r4
 800b436:	f7ff ffc4 	bl	800b3c2 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800b43a:	6820      	ldr	r0, [r4, #0]
 800b43c:	f003 ff32 	bl	800f2a4 <USB_ReadInterrupts>
 800b440:	0446      	lsls	r6, r0, #17
 800b442:	d508      	bpl.n	800b456 <HAL_PCD_IRQHandler+0x6a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b444:	6822      	ldr	r2, [r4, #0]
 800b446:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b44a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b44e:	041b      	lsls	r3, r3, #16
 800b450:	0c1b      	lsrs	r3, r3, #16
 800b452:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800b456:	6820      	ldr	r0, [r4, #0]
 800b458:	f003 ff24 	bl	800f2a4 <USB_ReadInterrupts>
 800b45c:	0485      	lsls	r5, r0, #18
 800b45e:	d508      	bpl.n	800b472 <HAL_PCD_IRQHandler+0x86>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b460:	6822      	ldr	r2, [r4, #0]
 800b462:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b46a:	041b      	lsls	r3, r3, #16
 800b46c:	0c1b      	lsrs	r3, r3, #16
 800b46e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800b472:	6820      	ldr	r0, [r4, #0]
 800b474:	f003 ff16 	bl	800f2a4 <USB_ReadInterrupts>
 800b478:	04c0      	lsls	r0, r0, #19
 800b47a:	d51c      	bpl.n	800b4b6 <HAL_PCD_IRQHandler+0xca>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b47c:	6822      	ldr	r2, [r4, #0]
 800b47e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800b482:	f023 0304 	bic.w	r3, r3, #4
 800b486:	041b      	lsls	r3, r3, #16
 800b488:	0c1b      	lsrs	r3, r3, #16
 800b48a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b48e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800b492:	f023 0308 	bic.w	r3, r3, #8
 800b496:	041b      	lsls	r3, r3, #16
 800b498:	0c1b      	lsrs	r3, r3, #16
 800b49a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f006 feb8 	bl	8012214 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b4a4:	6822      	ldr	r2, [r4, #0]
 800b4a6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b4aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4ae:	041b      	lsls	r3, r3, #16
 800b4b0:	0c1b      	lsrs	r3, r3, #16
 800b4b2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800b4b6:	6820      	ldr	r0, [r4, #0]
 800b4b8:	f003 fef4 	bl	800f2a4 <USB_ReadInterrupts>
 800b4bc:	0501      	lsls	r1, r0, #20
 800b4be:	d519      	bpl.n	800b4f4 <HAL_PCD_IRQHandler+0x108>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b4c0:	6822      	ldr	r2, [r4, #0]
 800b4c2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	f043 0308 	orr.w	r3, r3, #8
 800b4cc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b4d0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b4d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4d8:	041b      	lsls	r3, r3, #16
 800b4da:	0c1b      	lsrs	r3, r3, #16
 800b4dc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b4e0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	f043 0304 	orr.w	r3, r3, #4
 800b4ea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f006 fe80 	bl	80121f4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800b4f4:	6820      	ldr	r0, [r4, #0]
 800b4f6:	f003 fed5 	bl	800f2a4 <USB_ReadInterrupts>
 800b4fa:	0582      	lsls	r2, r0, #22
 800b4fc:	d50b      	bpl.n	800b516 <HAL_PCD_IRQHandler+0x12a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b4fe:	6822      	ldr	r2, [r4, #0]
 800b500:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b508:	041b      	lsls	r3, r3, #16
 800b50a:	0c1b      	lsrs	r3, r3, #16
 800b50c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800b510:	4620      	mov	r0, r4
 800b512:	f006 fe58 	bl	80121c6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800b516:	6820      	ldr	r0, [r4, #0]
 800b518:	f003 fec4 	bl	800f2a4 <USB_ReadInterrupts>
 800b51c:	05c3      	lsls	r3, r0, #23
 800b51e:	d508      	bpl.n	800b532 <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b520:	6822      	ldr	r2, [r4, #0]
 800b522:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b52a:	041b      	lsls	r3, r3, #16
 800b52c:	0c1b      	lsrs	r3, r3, #16
 800b52e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800b532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800b536:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 800b53a:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 800b53c:	f016 060f 	ands.w	r6, r6, #15
 800b540:	f040 80bd 	bne.w	800b6be <HAL_PCD_IRQHandler+0x2d2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b544:	f011 0110 	ands.w	r1, r1, #16
 800b548:	d12d      	bne.n	800b5a6 <HAL_PCD_IRQHandler+0x1ba>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b54a:	8803      	ldrh	r3, [r0, #0]
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	ea03 030b 	and.w	r3, r3, fp
 800b552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b556:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b558:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b55c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800b560:	b29b      	uxth	r3, r3
 800b562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b566:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 800b56a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b56c:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 800b570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b574:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800b576:	4413      	add	r3, r2
 800b578:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b57a:	4620      	mov	r0, r4
 800b57c:	f006 fe1b 	bl	80121b6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b580:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b584:	2b00      	cmp	r3, #0
 800b586:	f43f af3d 	beq.w	800b404 <HAL_PCD_IRQHandler+0x18>
 800b58a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	f47f af39 	bne.w	800b404 <HAL_PCD_IRQHandler+0x18>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b592:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b596:	6821      	ldr	r1, [r4, #0]
 800b598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b59c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b5a0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800b5a4:	e72e      	b.n	800b404 <HAL_PCD_IRQHandler+0x18>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b5a6:	8805      	ldrh	r5, [r0, #0]
 800b5a8:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b5aa:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 800b5ae:	d021      	beq.n	800b5f4 <HAL_PCD_IRQHandler+0x208>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b5b0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b5b4:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b5c2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800b5c6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800b5ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b5ce:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b5d2:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800b5d6:	f004 f93f 	bl	800f858 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b5da:	6822      	ldr	r2, [r4, #0]
 800b5dc:	8813      	ldrh	r3, [r2, #0]
 800b5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e2:	051b      	lsls	r3, r3, #20
 800b5e4:	0d1b      	lsrs	r3, r3, #20
 800b5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ea:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f006 fdd3 	bl	8012198 <HAL_PCD_SetupStageCallback>
 800b5f2:	e707      	b.n	800b404 <HAL_PCD_IRQHandler+0x18>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b5f4:	041b      	lsls	r3, r3, #16
 800b5f6:	f57f af05 	bpl.w	800b404 <HAL_PCD_IRQHandler+0x18>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b5fa:	8803      	ldrh	r3, [r0, #0]
 800b5fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b600:	051b      	lsls	r3, r3, #20
 800b602:	0d1b      	lsrs	r3, r3, #20
 800b604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b608:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b60a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b60e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800b612:	b29b      	uxth	r3, r3
 800b614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b618:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b61c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800b620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b624:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b628:	b18b      	cbz	r3, 800b64e <HAL_PCD_IRQHandler+0x262>
 800b62a:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800b62e:	b171      	cbz	r1, 800b64e <HAL_PCD_IRQHandler+0x262>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b630:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800b634:	f004 f910 	bl	800f858 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800b638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b63c:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 800b640:	4413      	add	r3, r2
 800b642:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b646:	4629      	mov	r1, r5
 800b648:	4620      	mov	r0, r4
 800b64a:	f006 fdab 	bl	80121a4 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800b64e:	6821      	ldr	r1, [r4, #0]
 800b650:	880b      	ldrh	r3, [r1, #0]
 800b652:	051f      	lsls	r7, r3, #20
 800b654:	f53f aed6 	bmi.w	800b404 <HAL_PCD_IRQHandler+0x18>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b658:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800b65c:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 800b660:	b29b      	uxth	r3, r3
 800b662:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800b666:	b9cd      	cbnz	r5, 800b69c <HAL_PCD_IRQHandler+0x2b0>
 800b668:	5ac2      	ldrh	r2, [r0, r3]
 800b66a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b66e:	0412      	lsls	r2, r2, #16
 800b670:	0c12      	lsrs	r2, r2, #16
 800b672:	52c2      	strh	r2, [r0, r3]
 800b674:	5ac2      	ldrh	r2, [r0, r3]
 800b676:	b292      	uxth	r2, r2
 800b678:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b67c:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b67e:	880b      	ldrh	r3, [r1, #0]
 800b680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b688:	041b      	lsls	r3, r3, #16
 800b68a:	0c1b      	lsrs	r3, r3, #16
 800b68c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b698:	800b      	strh	r3, [r1, #0]
 800b69a:	e6b3      	b.n	800b404 <HAL_PCD_IRQHandler+0x18>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b69c:	2d3e      	cmp	r5, #62	; 0x3e
 800b69e:	d806      	bhi.n	800b6ae <HAL_PCD_IRQHandler+0x2c2>
 800b6a0:	086a      	lsrs	r2, r5, #1
 800b6a2:	07ee      	lsls	r6, r5, #31
 800b6a4:	bf48      	it	mi
 800b6a6:	3201      	addmi	r2, #1
 800b6a8:	0292      	lsls	r2, r2, #10
 800b6aa:	b292      	uxth	r2, r2
 800b6ac:	e7e6      	b.n	800b67c <HAL_PCD_IRQHandler+0x290>
 800b6ae:	096a      	lsrs	r2, r5, #5
 800b6b0:	06ed      	lsls	r5, r5, #27
 800b6b2:	bf08      	it	eq
 800b6b4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800b6b8:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 800b6bc:	e7f5      	b.n	800b6aa <HAL_PCD_IRQHandler+0x2be>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b6be:	b235      	sxth	r5, r6
 800b6c0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800b6c4:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b6c6:	041b      	lsls	r3, r3, #16
 800b6c8:	f140 80ff 	bpl.w	800b8ca <HAL_PCD_IRQHandler+0x4de>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b6cc:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800b6d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6d4:	051b      	lsls	r3, r3, #20
 800b6d6:	0d1b      	lsrs	r3, r3, #20
 800b6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 800b6dc:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b6de:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800b6e2:	fb01 4106 	mla	r1, r1, r6, r4
 800b6e6:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 800b6ea:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
 800b6ee:	b9ba      	cbnz	r2, 800b720 <HAL_PCD_IRQHandler+0x334>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b6f0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800b6f4:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 800b6f8:	b292      	uxth	r2, r2
 800b6fa:	3206      	adds	r2, #6
 800b6fc:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800b700:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 800b704:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 800b708:	f1b9 0f00 	cmp.w	r9, #0
 800b70c:	f000 80c1 	beq.w	800b892 <HAL_PCD_IRQHandler+0x4a6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b710:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 800b714:	464b      	mov	r3, r9
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b716:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800b71a:	f004 f89d 	bl	800f858 <USB_ReadPMA>
 800b71e:	e0b8      	b.n	800b892 <HAL_PCD_IRQHandler+0x4a6>
          if (ep->type == EP_TYPE_BULK)
 800b720:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
 800b724:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 800b728:	2a02      	cmp	r2, #2
 800b72a:	f040 808e 	bne.w	800b84a <HAL_PCD_IRQHandler+0x45e>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b72e:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 800b732:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b736:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 800b73a:	ea4f 09cc 	mov.w	r9, ip, lsl #3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b73e:	d042      	beq.n	800b7c6 <HAL_PCD_IRQHandler+0x3da>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b740:	fa19 f98e 	uxtah	r9, r9, lr
 800b744:	f109 0902 	add.w	r9, r9, #2
 800b748:	f833 9019 	ldrh.w	r9, [r3, r9, lsl #1]
 800b74c:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 800b750:	4591      	cmp	r9, r2
 800b752:	d913      	bls.n	800b77c <HAL_PCD_IRQHandler+0x390>
 800b754:	2300      	movs	r3, #0
 800b756:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b75a:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800b75e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b766:	041b      	lsls	r3, r3, #16
 800b768:	0c1b      	lsrs	r3, r3, #16
 800b76a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b76e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b776:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 800b77a:	e005      	b.n	800b788 <HAL_PCD_IRQHandler+0x39c>
      ep->xfer_len -= count;
 800b77c:	eba2 0209 	sub.w	r2, r2, r9
 800b780:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800b784:	2a00      	cmp	r2, #0
 800b786:	d0e8      	beq.n	800b75a <HAL_PCD_IRQHandler+0x36e>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b788:	0679      	lsls	r1, r7, #25
 800b78a:	d512      	bpl.n	800b7b2 <HAL_PCD_IRQHandler+0x3c6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b78c:	2328      	movs	r3, #40	; 0x28
 800b78e:	fb03 4306 	mla	r3, r3, r6, r4
 800b792:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 800b796:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b79a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b79e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7a2:	041b      	lsls	r3, r3, #16
 800b7a4:	0c1b      	lsrs	r3, r3, #16
 800b7a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800b7b2:	f1b9 0f00 	cmp.w	r9, #0
 800b7b6:	d06c      	beq.n	800b892 <HAL_PCD_IRQHandler+0x4a6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b7b8:	2128      	movs	r1, #40	; 0x28
 800b7ba:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b7be:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800b7c2:	464b      	mov	r3, r9
 800b7c4:	e7a7      	b.n	800b716 <HAL_PCD_IRQHandler+0x32a>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b7c6:	fa19 fe8e 	uxtah	lr, r9, lr
 800b7ca:	f10e 0e06 	add.w	lr, lr, #6
 800b7ce:	f833 901e 	ldrh.w	r9, [r3, lr, lsl #1]
 800b7d2:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 800b7d6:	4591      	cmp	r9, r2
 800b7d8:	d912      	bls.n	800b800 <HAL_PCD_IRQHandler+0x414>
 800b7da:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b7de:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800b7e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ea:	041b      	lsls	r3, r3, #16
 800b7ec:	0c1b      	lsrs	r3, r3, #16
 800b7ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7fa:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 800b7fe:	e005      	b.n	800b80c <HAL_PCD_IRQHandler+0x420>
      ep->xfer_len -= count;
 800b800:	eba2 0209 	sub.w	r2, r2, r9
 800b804:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800b808:	2a00      	cmp	r2, #0
 800b80a:	d0e8      	beq.n	800b7de <HAL_PCD_IRQHandler+0x3f2>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b80c:	067a      	lsls	r2, r7, #25
 800b80e:	d412      	bmi.n	800b836 <HAL_PCD_IRQHandler+0x44a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b810:	2328      	movs	r3, #40	; 0x28
 800b812:	fb03 4306 	mla	r3, r3, r6, r4
 800b816:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 800b81a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b81e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b826:	041b      	lsls	r3, r3, #16
 800b828:	0c1b      	lsrs	r3, r3, #16
 800b82a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b82e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b832:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800b836:	f1b9 0f00 	cmp.w	r9, #0
 800b83a:	d02a      	beq.n	800b892 <HAL_PCD_IRQHandler+0x4a6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b83c:	2128      	movs	r1, #40	; 0x28
 800b83e:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b842:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800b846:	464b      	mov	r3, r9
 800b848:	e765      	b.n	800b716 <HAL_PCD_IRQHandler+0x32a>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b84a:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800b84e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b852:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b856:	0412      	lsls	r2, r2, #16
 800b858:	0c12      	lsrs	r2, r2, #16
 800b85a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b85e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800b862:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b866:	f891 e168 	ldrb.w	lr, [r1, #360]	; 0x168
 800b86a:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 800b86e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b872:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800b876:	f04f 0c08 	mov.w	ip, #8
 800b87a:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b87c:	d05b      	beq.n	800b936 <HAL_PCD_IRQHandler+0x54a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b87e:	3202      	adds	r2, #2
 800b880:	fb1c 220e 	smlabb	r2, ip, lr, r2
 800b884:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 800b888:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800b88c:	f1b9 0f00 	cmp.w	r9, #0
 800b890:	d195      	bne.n	800b7be <HAL_PCD_IRQHandler+0x3d2>
        ep->xfer_count += count;
 800b892:	2128      	movs	r1, #40	; 0x28
 800b894:	fb01 4306 	mla	r3, r1, r6, r4
 800b898:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800b89c:	444a      	add	r2, r9
 800b89e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800b8a2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b8a6:	444a      	add	r2, r9
 800b8a8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b8ac:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800b8b0:	b11a      	cbz	r2, 800b8ba <HAL_PCD_IRQHandler+0x4ce>
 800b8b2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800b8b6:	4599      	cmp	r9, r3
 800b8b8:	d248      	bcs.n	800b94c <HAL_PCD_IRQHandler+0x560>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b8ba:	2328      	movs	r3, #40	; 0x28
 800b8bc:	fb03 4306 	mla	r3, r3, r6, r4
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800b8c6:	f006 fc6d 	bl	80121a4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b8ca:	063b      	lsls	r3, r7, #24
 800b8cc:	f57f ad9a 	bpl.w	800b404 <HAL_PCD_IRQHandler+0x18>
 800b8d0:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b8d2:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	ea03 030b 	and.w	r3, r3, fp
 800b8dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8e0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 800b8e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b8e8:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800b8ec:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d056      	beq.n	800b9a2 <HAL_PCD_IRQHandler+0x5b6>
          ep->xfer_len = 0U;
 800b8f4:	2328      	movs	r3, #40	; 0x28
 800b8f6:	fb03 4106 	mla	r1, r3, r6, r4
 800b8fa:	2600      	movs	r6, #0
 800b8fc:	640e      	str	r6, [r1, #64]	; 0x40
          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b8fe:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 800b902:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800b906:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800b90a:	d038      	beq.n	800b97e <HAL_PCD_IRQHandler+0x592>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b90c:	bb33      	cbnz	r3, 800b95c <HAL_PCD_IRQHandler+0x570>
 800b90e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b912:	f200 4004 	addw	r0, r0, #1028	; 0x404
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b916:	fa10 f083 	uxtah	r0, r0, r3
 800b91a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800b91e:	8803      	ldrh	r3, [r0, #0]
 800b920:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b924:	041b      	lsls	r3, r3, #16
 800b926:	0c1b      	lsrs	r3, r3, #16
 800b928:	8003      	strh	r3, [r0, #0]
 800b92a:	8803      	ldrh	r3, [r0, #0]
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b932:	8003      	strh	r3, [r0, #0]
 800b934:	e01d      	b.n	800b972 <HAL_PCD_IRQHandler+0x586>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b936:	3206      	adds	r2, #6
 800b938:	fb1c 220e 	smlabb	r2, ip, lr, r2
 800b93c:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 800b940:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800b944:	f1b9 0f00 	cmp.w	r9, #0
 800b948:	d0a3      	beq.n	800b892 <HAL_PCD_IRQHandler+0x4a6>
 800b94a:	e77a      	b.n	800b842 <HAL_PCD_IRQHandler+0x456>
        ep = &hpcd->OUT_ep[epindex];
 800b94c:	fb01 4106 	mla	r1, r1, r6, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800b950:	6820      	ldr	r0, [r4, #0]
 800b952:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800b956:	f003 fcb9 	bl	800f2cc <USB_EPStartXfer>
 800b95a:	e7b6      	b.n	800b8ca <HAL_PCD_IRQHandler+0x4de>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d108      	bne.n	800b972 <HAL_PCD_IRQHandler+0x586>
 800b960:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800b964:	f200 4004 	addw	r0, r0, #1028	; 0x404
 800b968:	fa10 f082 	uxtah	r0, r0, r2
 800b96c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800b970:	8006      	strh	r6, [r0, #0]
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b972:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800b976:	4620      	mov	r0, r4
 800b978:	f006 fc1d 	bl	80121b6 <HAL_PCD_DataInStageCallback>
 800b97c:	e542      	b.n	800b404 <HAL_PCD_IRQHandler+0x18>
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b97e:	b923      	cbnz	r3, 800b98a <HAL_PCD_IRQHandler+0x59e>
 800b980:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b984:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800b988:	e7c5      	b.n	800b916 <HAL_PCD_IRQHandler+0x52a>
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d1f1      	bne.n	800b972 <HAL_PCD_IRQHandler+0x586>
 800b98e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b992:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800b996:	fa10 f383 	uxtah	r3, r0, r3
 800b99a:	eb03 1001 	add.w	r0, r3, r1, lsl #4
 800b99e:	8007      	strh	r7, [r0, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b9a0:	e7e7      	b.n	800b972 <HAL_PCD_IRQHandler+0x586>
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800b9a2:	2328      	movs	r3, #40	; 0x28
 800b9a4:	f895 e028 	ldrb.w	lr, [r5, #40]	; 0x28
 800b9a8:	fb03 4206 	mla	r2, r3, r6, r4
 800b9ac:	f417 7180 	ands.w	r1, r7, #256	; 0x100
 800b9b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b9b2:	ea4f 0ace 	mov.w	sl, lr, lsl #3
 800b9b6:	f500 6980 	add.w	r9, r0, #1024	; 0x400
 800b9ba:	d11c      	bne.n	800b9f6 <HAL_PCD_IRQHandler+0x60a>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b9bc:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800b9c0:	fa1a fa87 	uxtah	sl, sl, r7
 800b9c4:	f10a 0a02 	add.w	sl, sl, #2
 800b9c8:	f839 701a 	ldrh.w	r7, [r9, sl, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 800b9cc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b9d0:	429f      	cmp	r7, r3
 800b9d2:	d301      	bcc.n	800b9d8 <HAL_PCD_IRQHandler+0x5ec>
 800b9d4:	6411      	str	r1, [r2, #64]	; 0x40
 800b9d6:	e7cc      	b.n	800b972 <HAL_PCD_IRQHandler+0x586>
            ep->xfer_len -= TxByteNbre;
 800b9d8:	1bdb      	subs	r3, r3, r7
 800b9da:	6413      	str	r3, [r2, #64]	; 0x40
            ep->xfer_count += TxByteNbre;
 800b9dc:	6c53      	ldr	r3, [r2, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 800b9de:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800b9e0:	443b      	add	r3, r7
 800b9e2:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 800b9e4:	2328      	movs	r3, #40	; 0x28
            ep->xfer_buff += TxByteNbre;
 800b9e6:	443d      	add	r5, r7
        ep = &hpcd->IN_ep[epindex];
 800b9e8:	fb06 3103 	mla	r1, r6, r3, r3
            ep->xfer_buff += TxByteNbre;
 800b9ec:	63d5      	str	r5, [r2, #60]	; 0x3c
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b9ee:	4421      	add	r1, r4
 800b9f0:	f003 fc6c 	bl	800f2cc <USB_EPStartXfer>
 800b9f4:	e506      	b.n	800b404 <HAL_PCD_IRQHandler+0x18>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b9f6:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800b9fa:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800b9fe:	f000 80f3 	beq.w	800bbe8 <HAL_PCD_IRQHandler+0x7fc>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ba02:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800ba06:	fa1a fa82 	uxtah	sl, sl, r2
 800ba0a:	f10a 0a02 	add.w	sl, sl, #2
 800ba0e:	2128      	movs	r1, #40	; 0x28
 800ba10:	f839 201a 	ldrh.w	r2, [r9, sl, lsl #1]

    if (ep->xfer_len > TxByteNbre)
 800ba14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ba18:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxByteNbre;
 800ba1a:	fb01 4106 	mla	r1, r1, r6, r4
 800ba1e:	bf34      	ite	cc
 800ba20:	1a9b      	subcc	r3, r3, r2
    }
    else
    {
      ep->xfer_len = 0U;
 800ba22:	2300      	movcs	r3, #0
 800ba24:	640b      	str	r3, [r1, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ba26:	b2bf      	uxth	r7, r7
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d163      	bne.n	800baf4 <HAL_PCD_IRQHandler+0x708>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ba2c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	d148      	bne.n	800bac6 <HAL_PCD_IRQHandler+0x6da>
 800ba34:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800ba38:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800ba3c:	fa12 f383 	uxtah	r3, r2, r3
 800ba40:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800ba44:	f8be 3000 	ldrh.w	r3, [lr]
 800ba48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba4c:	041b      	lsls	r3, r3, #16
 800ba4e:	0c1b      	lsrs	r3, r3, #16
 800ba50:	f8ae 3000 	strh.w	r3, [lr]
 800ba54:	f8be 3000 	ldrh.w	r3, [lr]
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba5e:	f8ae 3000 	strh.w	r3, [lr]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ba62:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800ba66:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800ba6a:	bbbb      	cbnz	r3, 800badc <HAL_PCD_IRQHandler+0x6f0>
 800ba6c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800ba70:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800ba74:	fa10 f083 	uxtah	r0, r0, r3
 800ba78:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800ba7c:	8803      	ldrh	r3, [r0, #0]
 800ba7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba82:	041b      	lsls	r3, r3, #16
 800ba84:	0c1b      	lsrs	r3, r3, #16
 800ba86:	8003      	strh	r3, [r0, #0]
 800ba88:	8803      	ldrh	r3, [r0, #0]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba90:	8003      	strh	r3, [r0, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ba92:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ba96:	4620      	mov	r0, r4
 800ba98:	f006 fb8d 	bl	80121b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ba9c:	2f00      	cmp	r7, #0
 800ba9e:	f000 80f4 	beq.w	800bc8a <HAL_PCD_IRQHandler+0x89e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800baa2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800baa6:	6822      	ldr	r2, [r4, #0]
 800baa8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800baac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bab4:	041b      	lsls	r3, r3, #16
 800bab6:	0c1b      	lsrs	r3, r3, #16
 800bab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800babc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800bac4:	e0e1      	b.n	800bc8a <HAL_PCD_IRQHandler+0x89e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bac6:	2a01      	cmp	r2, #1
 800bac8:	d1cb      	bne.n	800ba62 <HAL_PCD_IRQHandler+0x676>
 800baca:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bace:	f200 4104 	addw	r1, r0, #1028	; 0x404
 800bad2:	fa11 f282 	uxtah	r2, r1, r2
 800bad6:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800bada:	e7c0      	b.n	800ba5e <HAL_PCD_IRQHandler+0x672>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800badc:	2b01      	cmp	r3, #1
 800bade:	d1d8      	bne.n	800ba92 <HAL_PCD_IRQHandler+0x6a6>
 800bae0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bae4:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800bae8:	fa10 f083 	uxtah	r0, r0, r3
 800baec:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800baf0:	2300      	movs	r3, #0
 800baf2:	e7cd      	b.n	800ba90 <HAL_PCD_IRQHandler+0x6a4>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800baf4:	b16f      	cbz	r7, 800bb12 <HAL_PCD_IRQHandler+0x726>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800baf6:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 800bafa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bafe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb02:	041b      	lsls	r3, r3, #16
 800bb04:	0c1b      	lsrs	r3, r3, #16
 800bb06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb0e:	f820 302e 	strh.w	r3, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800bb12:	2328      	movs	r3, #40	; 0x28
 800bb14:	fb03 4306 	mla	r3, r3, r6, r4
 800bb18:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800bb1c:	2901      	cmp	r1, #1
 800bb1e:	f040 80b4 	bne.w	800bc8a <HAL_PCD_IRQHandler+0x89e>
        ep->xfer_count += TxByteNbre;
 800bb22:	6c5f      	ldr	r7, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800bb24:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800bb26:	f8d3 c048 	ldr.w	ip, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 800bb2a:	4417      	add	r7, r2
 800bb2c:	645f      	str	r7, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800bb2e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800bb30:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 800bb32:	45bc      	cmp	ip, r7
        ep->xfer_buff += TxByteNbre;
 800bb34:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800bb36:	d324      	bcc.n	800bb82 <HAL_PCD_IRQHandler+0x796>
          ep->xfer_len_db -= len;
 800bb38:	ebac 0207 	sub.w	r2, ip, r7
 800bb3c:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bb3e:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800bb42:	b2bb      	uxth	r3, r7
 800bb44:	2a00      	cmp	r2, #0
 800bb46:	d141      	bne.n	800bbcc <HAL_PCD_IRQHandler+0x7e0>
 800bb48:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bb4c:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 800bb50:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 800bb54:	fa1e f282 	uxtah	r2, lr, r2
 800bb58:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800bb5c:	b9f7      	cbnz	r7, 800bb9c <HAL_PCD_IRQHandler+0x7b0>
 800bb5e:	8817      	ldrh	r7, [r2, #0]
 800bb60:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 800bb64:	043f      	lsls	r7, r7, #16
 800bb66:	0c3f      	lsrs	r7, r7, #16
 800bb68:	8017      	strh	r7, [r2, #0]
 800bb6a:	8817      	ldrh	r7, [r2, #0]
 800bb6c:	b2bf      	uxth	r7, r7
 800bb6e:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800bb72:	8017      	strh	r7, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800bb74:	2228      	movs	r2, #40	; 0x28
 800bb76:	fb02 4606 	mla	r6, r2, r6, r4
 800bb7a:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800bb7c:	f003 fb96 	bl	800f2ac <USB_WritePMA>
 800bb80:	e083      	b.n	800bc8a <HAL_PCD_IRQHandler+0x89e>
        else if (ep->xfer_len_db == 0U)
 800bb82:	f1bc 0f00 	cmp.w	ip, #0
 800bb86:	d103      	bne.n	800bb90 <HAL_PCD_IRQHandler+0x7a4>
          ep->xfer_fill_db = 0U;
 800bb88:	f883 c04c 	strb.w	ip, [r3, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 800bb8c:	4617      	mov	r7, r2
 800bb8e:	e7d6      	b.n	800bb3e <HAL_PCD_IRQHandler+0x752>
          ep->xfer_fill_db = 0U;
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800bb96:	649a      	str	r2, [r3, #72]	; 0x48
 800bb98:	4667      	mov	r7, ip
 800bb9a:	e7d0      	b.n	800bb3e <HAL_PCD_IRQHandler+0x752>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bb9c:	2f3e      	cmp	r7, #62	; 0x3e
 800bb9e:	d80c      	bhi.n	800bbba <HAL_PCD_IRQHandler+0x7ce>
 800bba0:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 800bba4:	07ff      	lsls	r7, r7, #31
 800bba6:	bf48      	it	mi
 800bba8:	f10c 0c01 	addmi.w	ip, ip, #1
 800bbac:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800bbb0:	fa1f fc8c 	uxth.w	ip, ip
 800bbb4:	f8a2 c000 	strh.w	ip, [r2]
 800bbb8:	e7dc      	b.n	800bb74 <HAL_PCD_IRQHandler+0x788>
 800bbba:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 800bbbe:	06ff      	lsls	r7, r7, #27
 800bbc0:	bf08      	it	eq
 800bbc2:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800bbc6:	ea48 2c8c 	orr.w	ip, r8, ip, lsl #10
 800bbca:	e7f1      	b.n	800bbb0 <HAL_PCD_IRQHandler+0x7c4>
 800bbcc:	2a01      	cmp	r2, #1
 800bbce:	d1d1      	bne.n	800bb74 <HAL_PCD_IRQHandler+0x788>
 800bbd0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bbd4:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 800bbd8:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800bbdc:	fa1c f282 	uxtah	r2, ip, r2
 800bbe0:	eb02 1207 	add.w	r2, r2, r7, lsl #4
 800bbe4:	8013      	strh	r3, [r2, #0]
 800bbe6:	e7c5      	b.n	800bb74 <HAL_PCD_IRQHandler+0x788>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bbe8:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800bbec:	fa1a fa81 	uxtah	sl, sl, r1
 800bbf0:	f10a 0a06 	add.w	sl, sl, #6
 800bbf4:	b2bf      	uxth	r7, r7
 800bbf6:	f839 901a 	ldrh.w	r9, [r9, sl, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 800bbfa:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800bbfe:	4599      	cmp	r9, r3
      ep->xfer_len -= TxByteNbre;
 800bc00:	bf98      	it	ls
 800bc02:	eba3 0209 	subls.w	r2, r3, r9
 800bc06:	2328      	movs	r3, #40	; 0x28
 800bc08:	fb03 4306 	mla	r3, r3, r6, r4
 800bc0c:	641a      	str	r2, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800bc0e:	2a00      	cmp	r2, #0
 800bc10:	d168      	bne.n	800bce4 <HAL_PCD_IRQHandler+0x8f8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bc12:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d14b      	bne.n	800bcb2 <HAL_PCD_IRQHandler+0x8c6>
 800bc1a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bc1e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800bc22:	fa12 f383 	uxtah	r3, r2, r3
 800bc26:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800bc2a:	f8be 3000 	ldrh.w	r3, [lr]
 800bc2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc32:	041b      	lsls	r3, r3, #16
 800bc34:	0c1b      	lsrs	r3, r3, #16
 800bc36:	f8ae 3000 	strh.w	r3, [lr]
 800bc3a:	f8be 3000 	ldrh.w	r3, [lr]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc44:	f8ae 3000 	strh.w	r3, [lr]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bc48:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800bc4c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d13b      	bne.n	800bccc <HAL_PCD_IRQHandler+0x8e0>
 800bc54:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bc58:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800bc5c:	fa10 f083 	uxtah	r0, r0, r3
 800bc60:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800bc64:	8803      	ldrh	r3, [r0, #0]
 800bc66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc6a:	041b      	lsls	r3, r3, #16
 800bc6c:	0c1b      	lsrs	r3, r3, #16
 800bc6e:	8003      	strh	r3, [r0, #0]
 800bc70:	8803      	ldrh	r3, [r0, #0]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc78:	8003      	strh	r3, [r0, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc7a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f006 fa99 	bl	80121b6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800bc84:	2f00      	cmp	r7, #0
 800bc86:	f43f af0c 	beq.w	800baa2 <HAL_PCD_IRQHandler+0x6b6>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bc8a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800bc8e:	6822      	ldr	r2, [r4, #0]
 800bc90:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc9e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800bca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcaa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800bcae:	f7ff bba9 	b.w	800b404 <HAL_PCD_IRQHandler+0x18>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d1c8      	bne.n	800bc48 <HAL_PCD_IRQHandler+0x85c>
 800bcb6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bcba:	f200 4104 	addw	r1, r0, #1028	; 0x404
 800bcbe:	fa11 f383 	uxtah	r3, r1, r3
 800bcc2:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800bcc6:	f8ae 2000 	strh.w	r2, [lr]
 800bcca:	e7bd      	b.n	800bc48 <HAL_PCD_IRQHandler+0x85c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d1d4      	bne.n	800bc7a <HAL_PCD_IRQHandler+0x88e>
 800bcd0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bcd4:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800bcd8:	fa10 f083 	uxtah	r0, r0, r3
 800bcdc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800bce0:	2300      	movs	r3, #0
 800bce2:	e7c9      	b.n	800bc78 <HAL_PCD_IRQHandler+0x88c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800bce4:	b96f      	cbnz	r7, 800bd02 <HAL_PCD_IRQHandler+0x916>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800bce6:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 800bcea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcf2:	041b      	lsls	r3, r3, #16
 800bcf4:	0c1b      	lsrs	r3, r3, #16
 800bcf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bcfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfe:	f820 302e 	strh.w	r3, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800bd02:	2328      	movs	r3, #40	; 0x28
 800bd04:	fb03 4306 	mla	r3, r3, r6, r4
 800bd08:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800bd0c:	2a01      	cmp	r2, #1
 800bd0e:	d1bc      	bne.n	800bc8a <HAL_PCD_IRQHandler+0x89e>
        ep->xfer_count += TxByteNbre;
 800bd10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800bd12:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800bd14:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 800bd16:	444a      	add	r2, r9
 800bd18:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800bd1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800bd1c:	4449      	add	r1, r9
        if (ep->xfer_len_db >= ep->maxpacket)
 800bd1e:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 800bd20:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800bd22:	d321      	bcc.n	800bd68 <HAL_PCD_IRQHandler+0x97c>
          ep->xfer_len_db -= len;
 800bd24:	1abf      	subs	r7, r7, r2
 800bd26:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bd28:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 800bd2c:	b293      	uxth	r3, r2
 800bd2e:	2f00      	cmp	r7, #0
 800bd30:	d13d      	bne.n	800bdae <HAL_PCD_IRQHandler+0x9c2>
 800bd32:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800bd36:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 800bd3a:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 800bd3e:	fa1e f787 	uxtah	r7, lr, r7
 800bd42:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 800bd46:	b9d2      	cbnz	r2, 800bd7e <HAL_PCD_IRQHandler+0x992>
 800bd48:	883a      	ldrh	r2, [r7, #0]
 800bd4a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800bd4e:	0412      	lsls	r2, r2, #16
 800bd50:	0c12      	lsrs	r2, r2, #16
 800bd52:	803a      	strh	r2, [r7, #0]
 800bd54:	883a      	ldrh	r2, [r7, #0]
 800bd56:	b292      	uxth	r2, r2
 800bd58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd5c:	803a      	strh	r2, [r7, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800bd5e:	2228      	movs	r2, #40	; 0x28
 800bd60:	fb02 4606 	mla	r6, r2, r6, r4
 800bd64:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 800bd66:	e709      	b.n	800bb7c <HAL_PCD_IRQHandler+0x790>
        else if (ep->xfer_len_db == 0U)
 800bd68:	b91f      	cbnz	r7, 800bd72 <HAL_PCD_IRQHandler+0x986>
          ep->xfer_fill_db = 0U;
 800bd6a:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 800bd6e:	464a      	mov	r2, r9
 800bd70:	e7da      	b.n	800bd28 <HAL_PCD_IRQHandler+0x93c>
          ep->xfer_len_db = 0U;
 800bd72:	2200      	movs	r2, #0
 800bd74:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800bd76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800bd7a:	463a      	mov	r2, r7
 800bd7c:	e7d4      	b.n	800bd28 <HAL_PCD_IRQHandler+0x93c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bd7e:	2a3e      	cmp	r2, #62	; 0x3e
 800bd80:	d80c      	bhi.n	800bd9c <HAL_PCD_IRQHandler+0x9b0>
 800bd82:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 800bd86:	07d2      	lsls	r2, r2, #31
 800bd88:	bf48      	it	mi
 800bd8a:	f10c 0c01 	addmi.w	ip, ip, #1
 800bd8e:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800bd92:	fa1f fc8c 	uxth.w	ip, ip
 800bd96:	f8a7 c000 	strh.w	ip, [r7]
 800bd9a:	e7e0      	b.n	800bd5e <HAL_PCD_IRQHandler+0x972>
 800bd9c:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 800bda0:	06d2      	lsls	r2, r2, #27
 800bda2:	bf08      	it	eq
 800bda4:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800bda8:	ea48 2c8c 	orr.w	ip, r8, ip, lsl #10
 800bdac:	e7f1      	b.n	800bd92 <HAL_PCD_IRQHandler+0x9a6>
 800bdae:	2f01      	cmp	r7, #1
 800bdb0:	d1d5      	bne.n	800bd5e <HAL_PCD_IRQHandler+0x972>
 800bdb2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bdb6:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 800bdba:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 800bdbe:	fa1c f282 	uxtah	r2, ip, r2
 800bdc2:	eb02 1207 	add.w	r2, r2, r7, lsl #4
 800bdc6:	8013      	strh	r3, [r2, #0]
 800bdc8:	e7c9      	b.n	800bd5e <HAL_PCD_IRQHandler+0x972>
 800bdca:	bf00      	nop
 800bdcc:	ffff8f0f 	.word	0xffff8f0f
 800bdd0:	ffff8000 	.word	0xffff8000

0800bdd4 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800bdd4:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	4604      	mov	r4, r0
 800bddc:	f001 0507 	and.w	r5, r1, #7
 800bde0:	f04f 0028 	mov.w	r0, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 800bde4:	d01c      	beq.n	800be20 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bde6:	fb05 0000 	mla	r0, r5, r0, r0
 800bdea:	1821      	adds	r1, r4, r0
    ep->is_in = 1U;
 800bdec:	2001      	movs	r0, #1
 800bdee:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 800bdf0:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800bdf2:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bdf4:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800bdf6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800bdf8:	b102      	cbz	r2, 800bdfc <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 800bdfa:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800bdfc:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800bdfe:	bf04      	itt	eq
 800be00:	2300      	moveq	r3, #0
 800be02:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800be04:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d013      	beq.n	800be34 <HAL_PCD_EP_Open+0x60>
 800be0c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800be0e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800be10:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800be14:	f002 ff84 	bl	800ed20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800be18:	2000      	movs	r0, #0
 800be1a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800be1e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be20:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 0U;
 800be24:	fb00 4005 	mla	r0, r0, r5, r4
 800be28:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be2a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800be2e:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 800be32:	e7dd      	b.n	800bdf0 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800be34:	2002      	movs	r0, #2
 800be36:	e7f2      	b.n	800be1e <HAL_PCD_EP_Open+0x4a>

0800be38 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800be38:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800be3c:	b510      	push	{r4, lr}
 800be3e:	f001 0207 	and.w	r2, r1, #7
 800be42:	4604      	mov	r4, r0
 800be44:	f04f 0328 	mov.w	r3, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 800be48:	d013      	beq.n	800be72 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be4a:	fb02 3303 	mla	r3, r2, r3, r3
 800be4e:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 800be50:	2301      	movs	r3, #1
 800be52:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800be54:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800be56:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d013      	beq.n	800be86 <HAL_PCD_EP_Close+0x4e>
 800be5e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800be60:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800be62:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800be66:	f003 f8cb 	bl	800f000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800be6a:	2000      	movs	r0, #0
 800be6c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800be70:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be72:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800be76:	fb03 0302 	mla	r3, r3, r2, r0
 800be7a:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be7c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800be80:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800be84:	e7e6      	b.n	800be54 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 800be86:	2002      	movs	r0, #2
 800be88:	e7f2      	b.n	800be70 <HAL_PCD_EP_Close+0x38>

0800be8a <HAL_PCD_EP_Receive>:
{
 800be8a:	b570      	push	{r4, r5, r6, lr}
 800be8c:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800be90:	2628      	movs	r6, #40	; 0x28
 800be92:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 800be96:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800be98:	f884 1168 	strb.w	r1, [r4, #360]	; 0x168
  ep->xfer_len = len;
 800be9c:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 800bea0:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
  ep->is_in = 0U;
 800bea4:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bea8:	f504 71b4 	add.w	r1, r4, #360	; 0x168
 800beac:	6800      	ldr	r0, [r0, #0]
 800beae:	f003 fa0d 	bl	800f2cc <USB_EPStartXfer>
}
 800beb2:	4628      	mov	r0, r5
 800beb4:	bd70      	pop	{r4, r5, r6, pc}

0800beb6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800beb6:	f001 0107 	and.w	r1, r1, #7
 800beba:	2328      	movs	r3, #40	; 0x28
 800bebc:	fb03 0001 	mla	r0, r3, r1, r0
}
 800bec0:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 800bec4:	4770      	bx	lr

0800bec6 <HAL_PCD_EP_Transmit>:
{
 800bec6:	b570      	push	{r4, r5, r6, lr}
 800bec8:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800becc:	2428      	movs	r4, #40	; 0x28
 800bece:	fb04 0501 	mla	r5, r4, r1, r0
  ep->xfer_len = len;
 800bed2:	e9c5 230f 	strd	r2, r3, [r5, #60]	; 0x3c
  ep->xfer_len_db = len;
 800bed6:	64ab      	str	r3, [r5, #72]	; 0x48
 800bed8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800bedc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_fill_db = 1U;
 800bee0:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 800bee2:	2600      	movs	r6, #0
  ep->xfer_fill_db = 1U;
 800bee4:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
  ep->xfer_count = 0U;
 800bee8:	646e      	str	r6, [r5, #68]	; 0x44
  ep->num = ep_addr & EP_ADDR_MSK;
 800beea:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800beee:	fb01 4104 	mla	r1, r1, r4, r4
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bef2:	4401      	add	r1, r0
  ep->is_in = 1U;
 800bef4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bef8:	6800      	ldr	r0, [r0, #0]
 800befa:	f003 f9e7 	bl	800f2cc <USB_EPStartXfer>
}
 800befe:	4630      	mov	r0, r6
 800bf00:	bd70      	pop	{r4, r5, r6, pc}

0800bf02 <HAL_PCD_EP_SetStall>:
{
 800bf02:	b510      	push	{r4, lr}
 800bf04:	4604      	mov	r4, r0
 800bf06:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bf0a:	6863      	ldr	r3, [r4, #4]
 800bf0c:	4298      	cmp	r0, r3
 800bf0e:	d824      	bhi.n	800bf5a <HAL_PCD_EP_SetStall+0x58>
  if ((0x80U & ep_addr) == 0x80U)
 800bf10:	f011 0f80 	tst.w	r1, #128	; 0x80
 800bf14:	f04f 0328 	mov.w	r3, #40	; 0x28
 800bf18:	d015      	beq.n	800bf46 <HAL_PCD_EP_SetStall+0x44>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf1a:	fb00 3303 	mla	r3, r0, r3, r3
 800bf1e:	18e2      	adds	r2, r4, r3
    ep->is_in = 1U;
 800bf20:	2301      	movs	r3, #1
 800bf22:	7053      	strb	r3, [r2, #1]
  ep->is_stall = 1U;
 800bf24:	2301      	movs	r3, #1
 800bf26:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf28:	7010      	strb	r0, [r2, #0]
  __HAL_LOCK(hpcd);
 800bf2a:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 800bf2e:	4299      	cmp	r1, r3
 800bf30:	d015      	beq.n	800bf5e <HAL_PCD_EP_SetStall+0x5c>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bf32:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800bf34:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bf38:	4611      	mov	r1, r2
 800bf3a:	f003 f940 	bl	800f1be <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800bf3e:	2000      	movs	r0, #0
 800bf40:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800bf44:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800bf46:	fb03 4201 	mla	r2, r3, r1, r4
    ep->is_in = 0U;
 800bf4a:	fb03 4301 	mla	r3, r3, r1, r4
 800bf4e:	2100      	movs	r1, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800bf50:	f502 72b4 	add.w	r2, r2, #360	; 0x168
    ep->is_in = 0U;
 800bf54:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
 800bf58:	e7e4      	b.n	800bf24 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 800bf5a:	2001      	movs	r0, #1
 800bf5c:	e7f2      	b.n	800bf44 <HAL_PCD_EP_SetStall+0x42>
  __HAL_LOCK(hpcd);
 800bf5e:	2002      	movs	r0, #2
 800bf60:	e7f0      	b.n	800bf44 <HAL_PCD_EP_SetStall+0x42>

0800bf62 <HAL_PCD_EP_ClrStall>:
{
 800bf62:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bf64:	6843      	ldr	r3, [r0, #4]
 800bf66:	f001 020f 	and.w	r2, r1, #15
 800bf6a:	429a      	cmp	r2, r3
{
 800bf6c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bf6e:	d826      	bhi.n	800bfbe <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800bf70:	f011 0f80 	tst.w	r1, #128	; 0x80
 800bf74:	f001 0207 	and.w	r2, r1, #7
 800bf78:	f04f 0328 	mov.w	r3, #40	; 0x28
 800bf7c:	d015      	beq.n	800bfaa <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf7e:	fb02 3303 	mla	r3, r2, r3, r3
 800bf82:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 800bf84:	2301      	movs	r3, #1
 800bf86:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 800bf88:	2500      	movs	r5, #0
 800bf8a:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf8c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800bf8e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d015      	beq.n	800bfc2 <HAL_PCD_EP_ClrStall+0x60>
 800bf96:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bf98:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800bf9a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bf9e:	f003 f92e 	bl	800f1fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bfa2:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800bfa6:	4628      	mov	r0, r5
}
 800bfa8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bfaa:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800bfae:	fb03 0302 	mla	r3, r3, r2, r0
 800bfb2:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bfb4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800bfb8:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800bfbc:	e7e4      	b.n	800bf88 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	e7f2      	b.n	800bfa8 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 800bfc2:	2002      	movs	r0, #2
 800bfc4:	e7f0      	b.n	800bfa8 <HAL_PCD_EP_ClrStall+0x46>

0800bfc6 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800bfc6:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800bfca:	b530      	push	{r4, r5, lr}
 800bfcc:	f04f 0528 	mov.w	r5, #40	; 0x28
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bfd0:	bf17      	itett	ne
 800bfd2:	f001 0407 	andne.w	r4, r1, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bfd6:	fb05 0001 	mlaeq	r0, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bfda:	fb04 5505 	mlane	r5, r4, r5, r5
 800bfde:	1940      	addne	r0, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 800bfe0:	bf08      	it	eq
 800bfe2:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bfe6:	b299      	uxth	r1, r3
 800bfe8:	b91a      	cbnz	r2, 800bff2 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bfea:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bfec:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800bfee:	2000      	movs	r0, #0
 800bff0:	bd30      	pop	{r4, r5, pc}
    ep->doublebuffer = 1U;
 800bff2:	2201      	movs	r2, #1
 800bff4:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bff6:	6083      	str	r3, [r0, #8]
 800bff8:	e7f9      	b.n	800bfee <HAL_PCDEx_PMAConfig+0x28>
	...

0800bffc <HAL_PWREx_EnableSDADC>:
{
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 800bffc:	4a08      	ldr	r2, [pc, #32]	; (800c020 <HAL_PWREx_EnableSDADC+0x24>)
 800bffe:	69d1      	ldr	r1, [r2, #28]
 800c000:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800c004:	61d1      	str	r1, [r2, #28]
 800c006:	69d2      	ldr	r2, [r2, #28]
{
 800c008:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800c00a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800c00e:	9201      	str	r2, [sp, #4]
    
  PWR->CR |= Analogx;
 800c010:	4a04      	ldr	r2, [pc, #16]	; (800c024 <HAL_PWREx_EnableSDADC+0x28>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c012:	9b01      	ldr	r3, [sp, #4]
  PWR->CR |= Analogx;
 800c014:	6813      	ldr	r3, [r2, #0]
 800c016:	4318      	orrs	r0, r3
 800c018:	6010      	str	r0, [r2, #0]
}
 800c01a:	b002      	add	sp, #8
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	40021000 	.word	0x40021000
 800c024:	40007000 	.word	0x40007000

0800c028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c028:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c02c:	4605      	mov	r5, r0
 800c02e:	2800      	cmp	r0, #0
 800c030:	d035      	beq.n	800c09e <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c032:	6803      	ldr	r3, [r0, #0]
 800c034:	07da      	lsls	r2, r3, #31
 800c036:	d411      	bmi.n	800c05c <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c038:	682b      	ldr	r3, [r5, #0]
 800c03a:	079b      	lsls	r3, r3, #30
 800c03c:	f100 8088 	bmi.w	800c150 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c040:	682b      	ldr	r3, [r5, #0]
 800c042:	071c      	lsls	r4, r3, #28
 800c044:	f100 80f8 	bmi.w	800c238 <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	0758      	lsls	r0, r3, #29
 800c04c:	f100 8141 	bmi.w	800c2d2 <HAL_RCC_OscConfig+0x2aa>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c050:	69e8      	ldr	r0, [r5, #28]
 800c052:	2800      	cmp	r0, #0
 800c054:	f040 81d7 	bne.w	800c406 <HAL_RCC_OscConfig+0x3de>
        }
      }
    }
  }

  return HAL_OK;
 800c058:	2000      	movs	r0, #0
 800c05a:	e04b      	b.n	800c0f4 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800c05c:	4cba      	ldr	r4, [pc, #744]	; (800c348 <HAL_RCC_OscConfig+0x320>)
 800c05e:	6863      	ldr	r3, [r4, #4]
 800c060:	f003 030c 	and.w	r3, r3, #12
 800c064:	2b04      	cmp	r3, #4
 800c066:	d007      	beq.n	800c078 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c068:	6863      	ldr	r3, [r4, #4]
 800c06a:	f003 030c 	and.w	r3, r3, #12
 800c06e:	2b08      	cmp	r3, #8
 800c070:	d117      	bne.n	800c0a2 <HAL_RCC_OscConfig+0x7a>
 800c072:	6863      	ldr	r3, [r4, #4]
 800c074:	03df      	lsls	r7, r3, #15
 800c076:	d514      	bpl.n	800c0a2 <HAL_RCC_OscConfig+0x7a>
 800c078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c07c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c080:	6821      	ldr	r1, [r4, #0]
 800c082:	fa93 f3a3 	rbit	r3, r3
 800c086:	fab3 f383 	clz	r3, r3
 800c08a:	f003 031f 	and.w	r3, r3, #31
 800c08e:	2201      	movs	r2, #1
 800c090:	fa02 f303 	lsl.w	r3, r2, r3
 800c094:	420b      	tst	r3, r1
 800c096:	d0cf      	beq.n	800c038 <HAL_RCC_OscConfig+0x10>
 800c098:	686b      	ldr	r3, [r5, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1cc      	bne.n	800c038 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800c09e:	2001      	movs	r0, #1
 800c0a0:	e028      	b.n	800c0f4 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0a2:	686a      	ldr	r2, [r5, #4]
 800c0a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c0a8:	d127      	bne.n	800c0fa <HAL_RCC_OscConfig+0xd2>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0b0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c0b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c0b4:	68a9      	ldr	r1, [r5, #8]
 800c0b6:	f023 030f 	bic.w	r3, r3, #15
 800c0ba:	430b      	orrs	r3, r1
 800c0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c0be:	b362      	cbz	r2, 800c11a <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 800c0c0:	f7fe fb68 	bl	800a794 <HAL_GetTick>
 800c0c4:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800c0c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0ca:	f04f 0801 	mov.w	r8, #1
 800c0ce:	fa97 f3a7 	rbit	r3, r7
 800c0d2:	6822      	ldr	r2, [r4, #0]
 800c0d4:	fa97 f3a7 	rbit	r3, r7
 800c0d8:	fab3 f383 	clz	r3, r3
 800c0dc:	f003 031f 	and.w	r3, r3, #31
 800c0e0:	fa08 f303 	lsl.w	r3, r8, r3
 800c0e4:	4213      	tst	r3, r2
 800c0e6:	d1a7      	bne.n	800c038 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c0e8:	f7fe fb54 	bl	800a794 <HAL_GetTick>
 800c0ec:	1b83      	subs	r3, r0, r6
 800c0ee:	2b64      	cmp	r3, #100	; 0x64
 800c0f0:	d9ed      	bls.n	800c0ce <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 800c0f2:	2003      	movs	r0, #3
}
 800c0f4:	b002      	add	sp, #8
 800c0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	b932      	cbnz	r2, 800c10c <HAL_RCC_OscConfig+0xe4>
 800c0fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c102:	6023      	str	r3, [r4, #0]
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c10a:	e7d1      	b.n	800c0b0 <HAL_RCC_OscConfig+0x88>
 800c10c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800c110:	d1f5      	bne.n	800c0fe <HAL_RCC_OscConfig+0xd6>
 800c112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c116:	6023      	str	r3, [r4, #0]
 800c118:	e7c7      	b.n	800c0aa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800c11a:	f7fe fb3b 	bl	800a794 <HAL_GetTick>
 800c11e:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800c122:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c124:	f04f 0801 	mov.w	r8, #1
 800c128:	fa97 f3a7 	rbit	r3, r7
 800c12c:	6822      	ldr	r2, [r4, #0]
 800c12e:	fa97 f3a7 	rbit	r3, r7
 800c132:	fab3 f383 	clz	r3, r3
 800c136:	f003 031f 	and.w	r3, r3, #31
 800c13a:	fa08 f303 	lsl.w	r3, r8, r3
 800c13e:	4213      	tst	r3, r2
 800c140:	f43f af7a 	beq.w	800c038 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c144:	f7fe fb26 	bl	800a794 <HAL_GetTick>
 800c148:	1b83      	subs	r3, r0, r6
 800c14a:	2b64      	cmp	r3, #100	; 0x64
 800c14c:	d9ec      	bls.n	800c128 <HAL_RCC_OscConfig+0x100>
 800c14e:	e7d0      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800c150:	4c7d      	ldr	r4, [pc, #500]	; (800c348 <HAL_RCC_OscConfig+0x320>)
 800c152:	6863      	ldr	r3, [r4, #4]
 800c154:	f013 0f0c 	tst.w	r3, #12
 800c158:	d007      	beq.n	800c16a <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800c15a:	6863      	ldr	r3, [r4, #4]
 800c15c:	f003 030c 	and.w	r3, r3, #12
 800c160:	2b08      	cmp	r3, #8
 800c162:	d121      	bne.n	800c1a8 <HAL_RCC_OscConfig+0x180>
 800c164:	6863      	ldr	r3, [r4, #4]
 800c166:	03de      	lsls	r6, r3, #15
 800c168:	d41e      	bmi.n	800c1a8 <HAL_RCC_OscConfig+0x180>
 800c16a:	2302      	movs	r3, #2
 800c16c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c170:	6821      	ldr	r1, [r4, #0]
 800c172:	fa93 f3a3 	rbit	r3, r3
 800c176:	fab3 f383 	clz	r3, r3
 800c17a:	f003 031f 	and.w	r3, r3, #31
 800c17e:	2201      	movs	r2, #1
 800c180:	fa02 f303 	lsl.w	r3, r2, r3
 800c184:	420b      	tst	r3, r1
 800c186:	d002      	beq.n	800c18e <HAL_RCC_OscConfig+0x166>
 800c188:	692b      	ldr	r3, [r5, #16]
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d187      	bne.n	800c09e <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c18e:	6821      	ldr	r1, [r4, #0]
 800c190:	23f8      	movs	r3, #248	; 0xf8
 800c192:	fa93 f3a3 	rbit	r3, r3
 800c196:	fab3 f283 	clz	r2, r3
 800c19a:	696b      	ldr	r3, [r5, #20]
 800c19c:	4093      	lsls	r3, r2
 800c19e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	e74b      	b.n	800c040 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c1a8:	692a      	ldr	r2, [r5, #16]
 800c1aa:	2601      	movs	r6, #1
 800c1ac:	b30a      	cbz	r2, 800c1f2 <HAL_RCC_OscConfig+0x1ca>
 800c1ae:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800c1b2:	fab3 f383 	clz	r3, r3
 800c1b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c1ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	f04f 0802 	mov.w	r8, #2
 800c1c4:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800c1c6:	f7fe fae5 	bl	800a794 <HAL_GetTick>
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1d0:	6822      	ldr	r2, [r4, #0]
 800c1d2:	fa98 f3a8 	rbit	r3, r8
 800c1d6:	fab3 f383 	clz	r3, r3
 800c1da:	f003 031f 	and.w	r3, r3, #31
 800c1de:	fa06 f303 	lsl.w	r3, r6, r3
 800c1e2:	4213      	tst	r3, r2
 800c1e4:	d1d3      	bne.n	800c18e <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c1e6:	f7fe fad5 	bl	800a794 <HAL_GetTick>
 800c1ea:	1bc3      	subs	r3, r0, r7
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d9ed      	bls.n	800c1cc <HAL_RCC_OscConfig+0x1a4>
 800c1f0:	e77f      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
 800c1f2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800c1f6:	fab3 f383 	clz	r3, r3
 800c1fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c1fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	f04f 0802 	mov.w	r8, #2
 800c208:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c20a:	f7fe fac3 	bl	800a794 <HAL_GetTick>
 800c20e:	4607      	mov	r7, r0
 800c210:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c214:	6822      	ldr	r2, [r4, #0]
 800c216:	fa98 f3a8 	rbit	r3, r8
 800c21a:	fab3 f383 	clz	r3, r3
 800c21e:	f003 031f 	and.w	r3, r3, #31
 800c222:	fa06 f303 	lsl.w	r3, r6, r3
 800c226:	4213      	tst	r3, r2
 800c228:	f43f af0a 	beq.w	800c040 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c22c:	f7fe fab2 	bl	800a794 <HAL_GetTick>
 800c230:	1bc3      	subs	r3, r0, r7
 800c232:	2b02      	cmp	r3, #2
 800c234:	d9ec      	bls.n	800c210 <HAL_RCC_OscConfig+0x1e8>
 800c236:	e75c      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c238:	69aa      	ldr	r2, [r5, #24]
 800c23a:	4e43      	ldr	r6, [pc, #268]	; (800c348 <HAL_RCC_OscConfig+0x320>)
 800c23c:	4943      	ldr	r1, [pc, #268]	; (800c34c <HAL_RCC_OscConfig+0x324>)
 800c23e:	2401      	movs	r4, #1
 800c240:	b31a      	cbz	r2, 800c28a <HAL_RCC_OscConfig+0x262>
 800c242:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800c246:	fab3 f383 	clz	r3, r3
 800c24a:	440b      	add	r3, r1
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	2702      	movs	r7, #2
 800c250:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800c252:	f7fe fa9f 	bl	800a794 <HAL_GetTick>
 800c256:	4680      	mov	r8, r0
 800c258:	fa97 f3a7 	rbit	r3, r7
 800c25c:	fa97 f3a7 	rbit	r3, r7
 800c260:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c264:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c266:	fa97 f3a7 	rbit	r3, r7
 800c26a:	fab3 f383 	clz	r3, r3
 800c26e:	f003 031f 	and.w	r3, r3, #31
 800c272:	fa04 f303 	lsl.w	r3, r4, r3
 800c276:	4213      	tst	r3, r2
 800c278:	f47f aee6 	bne.w	800c048 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c27c:	f7fe fa8a 	bl	800a794 <HAL_GetTick>
 800c280:	eba0 0308 	sub.w	r3, r0, r8
 800c284:	2b02      	cmp	r3, #2
 800c286:	d9e7      	bls.n	800c258 <HAL_RCC_OscConfig+0x230>
 800c288:	e733      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
 800c28a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800c28e:	fab3 f383 	clz	r3, r3
 800c292:	440b      	add	r3, r1
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	2702      	movs	r7, #2
 800c298:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800c29a:	f7fe fa7b 	bl	800a794 <HAL_GetTick>
 800c29e:	4680      	mov	r8, r0
 800c2a0:	fa97 f3a7 	rbit	r3, r7
 800c2a4:	fa97 f3a7 	rbit	r3, r7
 800c2a8:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c2ac:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c2ae:	fa97 f3a7 	rbit	r3, r7
 800c2b2:	fab3 f383 	clz	r3, r3
 800c2b6:	f003 031f 	and.w	r3, r3, #31
 800c2ba:	fa04 f303 	lsl.w	r3, r4, r3
 800c2be:	4213      	tst	r3, r2
 800c2c0:	f43f aec2 	beq.w	800c048 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c2c4:	f7fe fa66 	bl	800a794 <HAL_GetTick>
 800c2c8:	eba0 0308 	sub.w	r3, r0, r8
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d9e7      	bls.n	800c2a0 <HAL_RCC_OscConfig+0x278>
 800c2d0:	e70f      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c2d2:	4c1d      	ldr	r4, [pc, #116]	; (800c348 <HAL_RCC_OscConfig+0x320>)
 800c2d4:	69e3      	ldr	r3, [r4, #28]
 800c2d6:	00d9      	lsls	r1, r3, #3
 800c2d8:	d434      	bmi.n	800c344 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2da:	69e3      	ldr	r3, [r4, #28]
 800c2dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2e0:	61e3      	str	r3, [r4, #28]
 800c2e2:	69e3      	ldr	r3, [r4, #28]
 800c2e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c2ec:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c2ee:	4f18      	ldr	r7, [pc, #96]	; (800c350 <HAL_RCC_OscConfig+0x328>)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	05da      	lsls	r2, r3, #23
 800c2f4:	d52e      	bpl.n	800c354 <HAL_RCC_OscConfig+0x32c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c2f6:	68eb      	ldr	r3, [r5, #12]
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d13c      	bne.n	800c376 <HAL_RCC_OscConfig+0x34e>
 800c2fc:	6a23      	ldr	r3, [r4, #32]
 800c2fe:	f043 0301 	orr.w	r3, r3, #1
 800c302:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800c304:	f7fe fa46 	bl	800a794 <HAL_GetTick>
 800c308:	2702      	movs	r7, #2
 800c30a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c30c:	46ba      	mov	sl, r7
 800c30e:	f04f 0901 	mov.w	r9, #1
 800c312:	fa97 f3a7 	rbit	r3, r7
 800c316:	fa97 f3a7 	rbit	r3, r7
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d06b      	beq.n	800c3f6 <HAL_RCC_OscConfig+0x3ce>
 800c31e:	6a22      	ldr	r2, [r4, #32]
 800c320:	fa9a f3aa 	rbit	r3, sl
 800c324:	fab3 f383 	clz	r3, r3
 800c328:	f003 031f 	and.w	r3, r3, #31
 800c32c:	fa09 f303 	lsl.w	r3, r9, r3
 800c330:	4213      	tst	r3, r2
 800c332:	d057      	beq.n	800c3e4 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 800c334:	2e00      	cmp	r6, #0
 800c336:	f43f ae8b 	beq.w	800c050 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c33a:	69e3      	ldr	r3, [r4, #28]
 800c33c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c340:	61e3      	str	r3, [r4, #28]
 800c342:	e685      	b.n	800c050 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800c344:	2600      	movs	r6, #0
 800c346:	e7d2      	b.n	800c2ee <HAL_RCC_OscConfig+0x2c6>
 800c348:	40021000 	.word	0x40021000
 800c34c:	10908120 	.word	0x10908120
 800c350:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c35a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800c35c:	f7fe fa1a 	bl	800a794 <HAL_GetTick>
 800c360:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	05db      	lsls	r3, r3, #23
 800c366:	d4c6      	bmi.n	800c2f6 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c368:	f7fe fa14 	bl	800a794 <HAL_GetTick>
 800c36c:	eba0 0008 	sub.w	r0, r0, r8
 800c370:	2864      	cmp	r0, #100	; 0x64
 800c372:	d9f6      	bls.n	800c362 <HAL_RCC_OscConfig+0x33a>
 800c374:	e6bd      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c376:	bb3b      	cbnz	r3, 800c3c8 <HAL_RCC_OscConfig+0x3a0>
 800c378:	6a23      	ldr	r3, [r4, #32]
 800c37a:	f023 0301 	bic.w	r3, r3, #1
 800c37e:	6223      	str	r3, [r4, #32]
 800c380:	6a23      	ldr	r3, [r4, #32]
 800c382:	f023 0304 	bic.w	r3, r3, #4
 800c386:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800c388:	f7fe fa04 	bl	800a794 <HAL_GetTick>
 800c38c:	2702      	movs	r7, #2
 800c38e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c390:	46ba      	mov	sl, r7
 800c392:	f04f 0901 	mov.w	r9, #1
 800c396:	fa97 f3a7 	rbit	r3, r7
 800c39a:	fa97 f3a7 	rbit	r3, r7
 800c39e:	b373      	cbz	r3, 800c3fe <HAL_RCC_OscConfig+0x3d6>
 800c3a0:	6a22      	ldr	r2, [r4, #32]
 800c3a2:	fa9a f3aa 	rbit	r3, sl
 800c3a6:	fab3 f383 	clz	r3, r3
 800c3aa:	f003 031f 	and.w	r3, r3, #31
 800c3ae:	fa09 f303 	lsl.w	r3, r9, r3
 800c3b2:	4213      	tst	r3, r2
 800c3b4:	d0be      	beq.n	800c334 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3b6:	f7fe f9ed 	bl	800a794 <HAL_GetTick>
 800c3ba:	f241 3388 	movw	r3, #5000	; 0x1388
 800c3be:	eba0 0008 	sub.w	r0, r0, r8
 800c3c2:	4298      	cmp	r0, r3
 800c3c4:	d9e7      	bls.n	800c396 <HAL_RCC_OscConfig+0x36e>
 800c3c6:	e694      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c3c8:	2b05      	cmp	r3, #5
 800c3ca:	6a23      	ldr	r3, [r4, #32]
 800c3cc:	d103      	bne.n	800c3d6 <HAL_RCC_OscConfig+0x3ae>
 800c3ce:	f043 0304 	orr.w	r3, r3, #4
 800c3d2:	6223      	str	r3, [r4, #32]
 800c3d4:	e792      	b.n	800c2fc <HAL_RCC_OscConfig+0x2d4>
 800c3d6:	f023 0301 	bic.w	r3, r3, #1
 800c3da:	6223      	str	r3, [r4, #32]
 800c3dc:	6a23      	ldr	r3, [r4, #32]
 800c3de:	f023 0304 	bic.w	r3, r3, #4
 800c3e2:	e78e      	b.n	800c302 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3e4:	f7fe f9d6 	bl	800a794 <HAL_GetTick>
 800c3e8:	f241 3388 	movw	r3, #5000	; 0x1388
 800c3ec:	eba0 0008 	sub.w	r0, r0, r8
 800c3f0:	4298      	cmp	r0, r3
 800c3f2:	d98e      	bls.n	800c312 <HAL_RCC_OscConfig+0x2ea>
 800c3f4:	e67d      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
 800c3f6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c3fc:	e790      	b.n	800c320 <HAL_RCC_OscConfig+0x2f8>
 800c3fe:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c402:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c404:	e7cd      	b.n	800c3a2 <HAL_RCC_OscConfig+0x37a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c406:	4b49      	ldr	r3, [pc, #292]	; (800c52c <HAL_RCC_OscConfig+0x504>)
 800c408:	685a      	ldr	r2, [r3, #4]
 800c40a:	f002 020c 	and.w	r2, r2, #12
 800c40e:	2a08      	cmp	r2, #8
 800c410:	461c      	mov	r4, r3
 800c412:	d07a      	beq.n	800c50a <HAL_RCC_OscConfig+0x4e2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c414:	2802      	cmp	r0, #2
 800c416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c41a:	d151      	bne.n	800c4c0 <HAL_RCC_OscConfig+0x498>
 800c41c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800c420:	fab3 f383 	clz	r3, r3
 800c424:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c428:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c432:	f7fe f9af 	bl	800a794 <HAL_GetTick>
 800c436:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800c43a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c43c:	2601      	movs	r6, #1
 800c43e:	fa98 f3a8 	rbit	r3, r8
 800c442:	6822      	ldr	r2, [r4, #0]
 800c444:	fa98 f3a8 	rbit	r3, r8
 800c448:	fab3 f383 	clz	r3, r3
 800c44c:	f003 031f 	and.w	r3, r3, #31
 800c450:	fa06 f303 	lsl.w	r3, r6, r3
 800c454:	4213      	tst	r3, r2
 800c456:	d12d      	bne.n	800c4b4 <HAL_RCC_OscConfig+0x48c>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c458:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 800c45c:	6862      	ldr	r2, [r4, #4]
 800c45e:	430b      	orrs	r3, r1
 800c460:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800c464:	4313      	orrs	r3, r2
 800c466:	6063      	str	r3, [r4, #4]
 800c468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c46c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800c470:	fab3 f383 	clz	r3, r3
 800c474:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c478:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c47c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c47e:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 800c480:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800c482:	f7fe f987 	bl	800a794 <HAL_GetTick>
 800c486:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800c48a:	4605      	mov	r5, r0
 800c48c:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c490:	6822      	ldr	r2, [r4, #0]
 800c492:	fa96 f3a6 	rbit	r3, r6
 800c496:	fab3 f383 	clz	r3, r3
 800c49a:	f003 031f 	and.w	r3, r3, #31
 800c49e:	fa07 f303 	lsl.w	r3, r7, r3
 800c4a2:	4213      	tst	r3, r2
 800c4a4:	f47f add8 	bne.w	800c058 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c4a8:	f7fe f974 	bl	800a794 <HAL_GetTick>
 800c4ac:	1b40      	subs	r0, r0, r5
 800c4ae:	2802      	cmp	r0, #2
 800c4b0:	d9ec      	bls.n	800c48c <HAL_RCC_OscConfig+0x464>
 800c4b2:	e61e      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c4b4:	f7fe f96e 	bl	800a794 <HAL_GetTick>
 800c4b8:	1bc3      	subs	r3, r0, r7
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d9bf      	bls.n	800c43e <HAL_RCC_OscConfig+0x416>
 800c4be:	e618      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
 800c4c0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800c4c4:	fab3 f383 	clz	r3, r3
 800c4c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c4cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c4d6:	f7fe f95d 	bl	800a794 <HAL_GetTick>
 800c4da:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800c4de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c4e0:	2701      	movs	r7, #1
 800c4e2:	fa96 f3a6 	rbit	r3, r6
 800c4e6:	6822      	ldr	r2, [r4, #0]
 800c4e8:	fa96 f3a6 	rbit	r3, r6
 800c4ec:	fab3 f383 	clz	r3, r3
 800c4f0:	f003 031f 	and.w	r3, r3, #31
 800c4f4:	fa07 f303 	lsl.w	r3, r7, r3
 800c4f8:	4213      	tst	r3, r2
 800c4fa:	f43f adad 	beq.w	800c058 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c4fe:	f7fe f949 	bl	800a794 <HAL_GetTick>
 800c502:	1b40      	subs	r0, r0, r5
 800c504:	2802      	cmp	r0, #2
 800c506:	d9ec      	bls.n	800c4e2 <HAL_RCC_OscConfig+0x4ba>
 800c508:	e5f3      	b.n	800c0f2 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c50a:	2801      	cmp	r0, #1
 800c50c:	f43f adf2 	beq.w	800c0f4 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 800c510:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800c512:	6a2a      	ldr	r2, [r5, #32]
 800c514:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800c518:	4291      	cmp	r1, r2
 800c51a:	f47f adc0 	bne.w	800c09e <HAL_RCC_OscConfig+0x76>
 800c51e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800c520:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800c524:	4293      	cmp	r3, r2
 800c526:	f43f ad97 	beq.w	800c058 <HAL_RCC_OscConfig+0x30>
 800c52a:	e5b8      	b.n	800c09e <HAL_RCC_OscConfig+0x76>
 800c52c:	40021000 	.word	0x40021000

0800c530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c530:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800c532:	4c13      	ldr	r4, [pc, #76]	; (800c580 <HAL_RCC_GetSysClockFreq+0x50>)
 800c534:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c536:	f001 030c 	and.w	r3, r1, #12
 800c53a:	2b08      	cmp	r3, #8
 800c53c:	d11e      	bne.n	800c57c <HAL_RCC_GetSysClockFreq+0x4c>
 800c53e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800c542:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800c546:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800c54a:	fab3 f383 	clz	r3, r3
 800c54e:	fa22 f303 	lsr.w	r3, r2, r3
 800c552:	4a0c      	ldr	r2, [pc, #48]	; (800c584 <HAL_RCC_GetSysClockFreq+0x54>)
 800c554:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800c556:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c558:	220f      	movs	r2, #15
 800c55a:	fa92 f2a2 	rbit	r2, r2
 800c55e:	fab2 f282 	clz	r2, r2
 800c562:	f003 030f 	and.w	r3, r3, #15
 800c566:	40d3      	lsrs	r3, r2
 800c568:	4a07      	ldr	r2, [pc, #28]	; (800c588 <HAL_RCC_GetSysClockFreq+0x58>)
 800c56a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800c56c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800c56e:	bf4a      	itet	mi
 800c570:	4b06      	ldrmi	r3, [pc, #24]	; (800c58c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800c572:	4b07      	ldrpl	r3, [pc, #28]	; (800c590 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800c574:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800c578:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800c57a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800c57c:	4803      	ldr	r0, [pc, #12]	; (800c58c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800c57e:	e7fc      	b.n	800c57a <HAL_RCC_GetSysClockFreq+0x4a>
 800c580:	40021000 	.word	0x40021000
 800c584:	08018e65 	.word	0x08018e65
 800c588:	08018e75 	.word	0x08018e75
 800c58c:	007a1200 	.word	0x007a1200
 800c590:	003d0900 	.word	0x003d0900

0800c594 <HAL_RCC_ClockConfig>:
{
 800c594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c598:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800c59a:	4604      	mov	r4, r0
 800c59c:	b910      	cbnz	r0, 800c5a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800c59e:	2001      	movs	r0, #1
}
 800c5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c5a4:	4a4c      	ldr	r2, [pc, #304]	; (800c6d8 <HAL_RCC_ClockConfig+0x144>)
 800c5a6:	6813      	ldr	r3, [r2, #0]
 800c5a8:	f003 0307 	and.w	r3, r3, #7
 800c5ac:	428b      	cmp	r3, r1
 800c5ae:	d32e      	bcc.n	800c60e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5b0:	6822      	ldr	r2, [r4, #0]
 800c5b2:	0791      	lsls	r1, r2, #30
 800c5b4:	d436      	bmi.n	800c624 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5b6:	07d2      	lsls	r2, r2, #31
 800c5b8:	d43c      	bmi.n	800c634 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c5ba:	4a47      	ldr	r2, [pc, #284]	; (800c6d8 <HAL_RCC_ClockConfig+0x144>)
 800c5bc:	6813      	ldr	r3, [r2, #0]
 800c5be:	f003 0307 	and.w	r3, r3, #7
 800c5c2:	42ab      	cmp	r3, r5
 800c5c4:	d874      	bhi.n	800c6b0 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5c6:	6822      	ldr	r2, [r4, #0]
 800c5c8:	4d44      	ldr	r5, [pc, #272]	; (800c6dc <HAL_RCC_ClockConfig+0x148>)
 800c5ca:	f012 0f04 	tst.w	r2, #4
 800c5ce:	d17b      	bne.n	800c6c8 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5d0:	0713      	lsls	r3, r2, #28
 800c5d2:	d506      	bpl.n	800c5e2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c5d4:	686b      	ldr	r3, [r5, #4]
 800c5d6:	6922      	ldr	r2, [r4, #16]
 800c5d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800c5dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c5e0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800c5e2:	f7ff ffa5 	bl	800c530 <HAL_RCC_GetSysClockFreq>
 800c5e6:	686b      	ldr	r3, [r5, #4]
 800c5e8:	22f0      	movs	r2, #240	; 0xf0
 800c5ea:	fa92 f2a2 	rbit	r2, r2
 800c5ee:	fab2 f282 	clz	r2, r2
 800c5f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5f6:	40d3      	lsrs	r3, r2
 800c5f8:	4a39      	ldr	r2, [pc, #228]	; (800c6e0 <HAL_RCC_ClockConfig+0x14c>)
 800c5fa:	5cd3      	ldrb	r3, [r2, r3]
 800c5fc:	40d8      	lsrs	r0, r3
 800c5fe:	4b39      	ldr	r3, [pc, #228]	; (800c6e4 <HAL_RCC_ClockConfig+0x150>)
 800c600:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800c602:	4b39      	ldr	r3, [pc, #228]	; (800c6e8 <HAL_RCC_ClockConfig+0x154>)
 800c604:	6818      	ldr	r0, [r3, #0]
 800c606:	f7fe f883 	bl	800a710 <HAL_InitTick>
  return HAL_OK;
 800c60a:	2000      	movs	r0, #0
 800c60c:	e7c8      	b.n	800c5a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c60e:	6813      	ldr	r3, [r2, #0]
 800c610:	f023 0307 	bic.w	r3, r3, #7
 800c614:	430b      	orrs	r3, r1
 800c616:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c618:	6813      	ldr	r3, [r2, #0]
 800c61a:	f003 0307 	and.w	r3, r3, #7
 800c61e:	428b      	cmp	r3, r1
 800c620:	d1bd      	bne.n	800c59e <HAL_RCC_ClockConfig+0xa>
 800c622:	e7c5      	b.n	800c5b0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c624:	492d      	ldr	r1, [pc, #180]	; (800c6dc <HAL_RCC_ClockConfig+0x148>)
 800c626:	68a0      	ldr	r0, [r4, #8]
 800c628:	684b      	ldr	r3, [r1, #4]
 800c62a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c62e:	4303      	orrs	r3, r0
 800c630:	604b      	str	r3, [r1, #4]
 800c632:	e7c0      	b.n	800c5b6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c634:	6862      	ldr	r2, [r4, #4]
 800c636:	4e29      	ldr	r6, [pc, #164]	; (800c6dc <HAL_RCC_ClockConfig+0x148>)
 800c638:	2a01      	cmp	r2, #1
 800c63a:	d126      	bne.n	800c68a <HAL_RCC_ClockConfig+0xf6>
 800c63c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c640:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c644:	6831      	ldr	r1, [r6, #0]
 800c646:	fa93 f3a3 	rbit	r3, r3
 800c64a:	fab3 f383 	clz	r3, r3
 800c64e:	f003 031f 	and.w	r3, r3, #31
 800c652:	fa02 f303 	lsl.w	r3, r2, r3
 800c656:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c658:	d0a1      	beq.n	800c59e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c65a:	6873      	ldr	r3, [r6, #4]
 800c65c:	f023 0303 	bic.w	r3, r3, #3
 800c660:	431a      	orrs	r2, r3
 800c662:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800c664:	f7fe f896 	bl	800a794 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c668:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800c66c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c66e:	6873      	ldr	r3, [r6, #4]
 800c670:	6862      	ldr	r2, [r4, #4]
 800c672:	f003 030c 	and.w	r3, r3, #12
 800c676:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800c67a:	d09e      	beq.n	800c5ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c67c:	f7fe f88a 	bl	800a794 <HAL_GetTick>
 800c680:	1bc0      	subs	r0, r0, r7
 800c682:	4540      	cmp	r0, r8
 800c684:	d9f3      	bls.n	800c66e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800c686:	2003      	movs	r0, #3
 800c688:	e78a      	b.n	800c5a0 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c68a:	2a02      	cmp	r2, #2
 800c68c:	bf0c      	ite	eq
 800c68e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800c692:	2302      	movne	r3, #2
 800c694:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c698:	6830      	ldr	r0, [r6, #0]
 800c69a:	fa93 f3a3 	rbit	r3, r3
 800c69e:	fab3 f383 	clz	r3, r3
 800c6a2:	f003 031f 	and.w	r3, r3, #31
 800c6a6:	2101      	movs	r1, #1
 800c6a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ac:	4203      	tst	r3, r0
 800c6ae:	e7d3      	b.n	800c658 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6b0:	6813      	ldr	r3, [r2, #0]
 800c6b2:	f023 0307 	bic.w	r3, r3, #7
 800c6b6:	432b      	orrs	r3, r5
 800c6b8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6ba:	6813      	ldr	r3, [r2, #0]
 800c6bc:	f003 0307 	and.w	r3, r3, #7
 800c6c0:	42ab      	cmp	r3, r5
 800c6c2:	f47f af6c 	bne.w	800c59e <HAL_RCC_ClockConfig+0xa>
 800c6c6:	e77e      	b.n	800c5c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c6c8:	686b      	ldr	r3, [r5, #4]
 800c6ca:	68e1      	ldr	r1, [r4, #12]
 800c6cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c6d0:	430b      	orrs	r3, r1
 800c6d2:	606b      	str	r3, [r5, #4]
 800c6d4:	e77c      	b.n	800c5d0 <HAL_RCC_ClockConfig+0x3c>
 800c6d6:	bf00      	nop
 800c6d8:	40022000 	.word	0x40022000
 800c6dc:	40021000 	.word	0x40021000
 800c6e0:	08018e4d 	.word	0x08018e4d
 800c6e4:	20000000 	.word	0x20000000
 800c6e8:	20000008 	.word	0x20000008

0800c6ec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800c6ec:	4b08      	ldr	r3, [pc, #32]	; (800c710 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	fa92 f2a2 	rbit	r2, r2
 800c6f8:	fab2 f282 	clz	r2, r2
 800c6fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c700:	40d3      	lsrs	r3, r2
 800c702:	4a04      	ldr	r2, [pc, #16]	; (800c714 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c704:	5cd3      	ldrb	r3, [r2, r3]
 800c706:	4a04      	ldr	r2, [pc, #16]	; (800c718 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800c708:	6810      	ldr	r0, [r2, #0]
}    
 800c70a:	40d8      	lsrs	r0, r3
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	40021000 	.word	0x40021000
 800c714:	08018e5d 	.word	0x08018e5d
 800c718:	20000000 	.word	0x20000000

0800c71c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800c71c:	4b08      	ldr	r3, [pc, #32]	; (800c740 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c71e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	fa92 f2a2 	rbit	r2, r2
 800c728:	fab2 f282 	clz	r2, r2
 800c72c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800c730:	40d3      	lsrs	r3, r2
 800c732:	4a04      	ldr	r2, [pc, #16]	; (800c744 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c734:	5cd3      	ldrb	r3, [r2, r3]
 800c736:	4a04      	ldr	r2, [pc, #16]	; (800c748 <HAL_RCC_GetPCLK2Freq+0x2c>)
 800c738:	6810      	ldr	r0, [r2, #0]
} 
 800c73a:	40d8      	lsrs	r0, r3
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	40021000 	.word	0x40021000
 800c744:	08018e5d 	.word	0x08018e5d
 800c748:	20000000 	.word	0x20000000

0800c74c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c74c:	6803      	ldr	r3, [r0, #0]
{
 800c74e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c752:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c754:	03d8      	lsls	r0, r3, #15
 800c756:	d520      	bpl.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x4e>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c758:	4d68      	ldr	r5, [pc, #416]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c75a:	69eb      	ldr	r3, [r5, #28]
 800c75c:	00d9      	lsls	r1, r3, #3
 800c75e:	d473      	bmi.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c760:	69eb      	ldr	r3, [r5, #28]
 800c762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c766:	61eb      	str	r3, [r5, #28]
 800c768:	69eb      	ldr	r3, [r5, #28]
 800c76a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c76e:	9301      	str	r3, [sp, #4]
 800c770:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c772:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c774:	4f62      	ldr	r7, [pc, #392]	; (800c900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	05da      	lsls	r2, r3, #23
 800c77a:	d567      	bpl.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x100>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c77c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c77e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800c782:	d177      	bne.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800c784:	6a2b      	ldr	r3, [r5, #32]
 800c786:	6862      	ldr	r2, [r4, #4]
 800c788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c78c:	4313      	orrs	r3, r2
 800c78e:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c790:	b11e      	cbz	r6, 800c79a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c792:	69eb      	ldr	r3, [r5, #28]
 800c794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c798:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	07d9      	lsls	r1, r3, #31
 800c79e:	d506      	bpl.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c7a0:	4956      	ldr	r1, [pc, #344]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c7a2:	68a0      	ldr	r0, [r4, #8]
 800c7a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c7a6:	f022 0203 	bic.w	r2, r2, #3
 800c7aa:	4302      	orrs	r2, r0
 800c7ac:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c7ae:	079a      	lsls	r2, r3, #30
 800c7b0:	d506      	bpl.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c7b2:	4952      	ldr	r1, [pc, #328]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c7b4:	68e0      	ldr	r0, [r4, #12]
 800c7b6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c7b8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800c7bc:	4302      	orrs	r2, r0
 800c7be:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c7c0:	075f      	lsls	r7, r3, #29
 800c7c2:	d506      	bpl.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c7c4:	494d      	ldr	r1, [pc, #308]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c7c6:	6920      	ldr	r0, [r4, #16]
 800c7c8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c7ca:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800c7ce:	4302      	orrs	r2, r0
 800c7d0:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c7d2:	069e      	lsls	r6, r3, #26
 800c7d4:	d506      	bpl.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c7d6:	4949      	ldr	r1, [pc, #292]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c7d8:	6960      	ldr	r0, [r4, #20]
 800c7da:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c7dc:	f022 0210 	bic.w	r2, r2, #16
 800c7e0:	4302      	orrs	r2, r0
 800c7e2:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c7e4:	039d      	lsls	r5, r3, #14
 800c7e6:	d506      	bpl.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800c7e8:	4944      	ldr	r1, [pc, #272]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c7ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c7ec:	684a      	ldr	r2, [r1, #4]
 800c7ee:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800c7f2:	4302      	orrs	r2, r0
 800c7f4:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c7f6:	0658      	lsls	r0, r3, #25
 800c7f8:	d506      	bpl.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c7fa:	4940      	ldr	r1, [pc, #256]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c7fc:	69a0      	ldr	r0, [r4, #24]
 800c7fe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c800:	f022 0220 	bic.w	r2, r2, #32
 800c804:	4302      	orrs	r2, r0
 800c806:	630a      	str	r2, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800c808:	0619      	lsls	r1, r3, #24
 800c80a:	d506      	bpl.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800c80c:	493b      	ldr	r1, [pc, #236]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c80e:	69e0      	ldr	r0, [r4, #28]
 800c810:	684a      	ldr	r2, [r1, #4]
 800c812:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c816:	4302      	orrs	r2, r0
 800c818:	604a      	str	r2, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800c81a:	051a      	lsls	r2, r3, #20
 800c81c:	d506      	bpl.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800c81e:	4937      	ldr	r1, [pc, #220]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c820:	6a20      	ldr	r0, [r4, #32]
 800c822:	684a      	ldr	r2, [r1, #4]
 800c824:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800c828:	4302      	orrs	r2, r0
 800c82a:	604a      	str	r2, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c82c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c830:	bf1f      	itttt	ne
 800c832:	4a32      	ldrne	r2, [pc, #200]	; (800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c834:	6a61      	ldrne	r1, [r4, #36]	; 0x24
 800c836:	6b13      	ldrne	r3, [r2, #48]	; 0x30
 800c838:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 800c83c:	bf1d      	ittte	ne
 800c83e:	430b      	orrne	r3, r1
 800c840:	6313      	strne	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800c842:	2000      	movne	r0, #0
 800c844:	4618      	moveq	r0, r3
 800c846:	e012      	b.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0x122>
  FlagStatus       pwrclkchanged = RESET;
 800c848:	2600      	movs	r6, #0
 800c84a:	e793      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c852:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800c854:	f7fd ff9e 	bl	800a794 <HAL_GetTick>
 800c858:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	05db      	lsls	r3, r3, #23
 800c85e:	d48d      	bmi.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c860:	f7fd ff98 	bl	800a794 <HAL_GetTick>
 800c864:	eba0 0008 	sub.w	r0, r0, r8
 800c868:	2864      	cmp	r0, #100	; 0x64
 800c86a:	d9f6      	bls.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x10e>
          return HAL_TIMEOUT;
 800c86c:	2003      	movs	r0, #3
}
 800c86e:	b002      	add	sp, #8
 800c870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c874:	6862      	ldr	r2, [r4, #4]
 800c876:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d082      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c87e:	6a29      	ldr	r1, [r5, #32]
 800c880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c884:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800c888:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800c88c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c904 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c890:	fab2 f282 	clz	r2, r2
 800c894:	4462      	add	r2, ip
 800c896:	0092      	lsls	r2, r2, #2
 800c898:	2701      	movs	r7, #1
 800c89a:	6017      	str	r7, [r2, #0]
 800c89c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c8a0:	fab3 f383 	clz	r3, r3
 800c8a4:	4463      	add	r3, ip
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800c8ac:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800c8ae:	07c8      	lsls	r0, r1, #31
 800c8b0:	f57f af68 	bpl.w	800c784 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800c8b4:	f7fd ff6e 	bl	800a794 <HAL_GetTick>
 800c8b8:	f04f 0802 	mov.w	r8, #2
 800c8bc:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8be:	46c2      	mov	sl, r8
 800c8c0:	fa98 f3a8 	rbit	r3, r8
 800c8c4:	fa98 f3a8 	rbit	r3, r8
 800c8c8:	b1a3      	cbz	r3, 800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c8ca:	6a2a      	ldr	r2, [r5, #32]
 800c8cc:	fa9a f3aa 	rbit	r3, sl
 800c8d0:	fab3 f383 	clz	r3, r3
 800c8d4:	f003 031f 	and.w	r3, r3, #31
 800c8d8:	fa07 f303 	lsl.w	r3, r7, r3
 800c8dc:	4213      	tst	r3, r2
 800c8de:	f47f af51 	bne.w	800c784 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8e2:	f7fd ff57 	bl	800a794 <HAL_GetTick>
 800c8e6:	f241 3388 	movw	r3, #5000	; 0x1388
 800c8ea:	eba0 0009 	sub.w	r0, r0, r9
 800c8ee:	4298      	cmp	r0, r3
 800c8f0:	d9e6      	bls.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800c8f2:	e7bb      	b.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800c8f4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c8fa:	e7e7      	b.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c8fc:	40021000 	.word	0x40021000
 800c900:	40007000 	.word	0x40007000
 800c904:	10908100 	.word	0x10908100

0800c908 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c908:	6802      	ldr	r2, [r0, #0]
{
 800c90a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c90c:	68d3      	ldr	r3, [r2, #12]
 800c90e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c912:	60d3      	str	r3, [r2, #12]
{
 800c914:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800c916:	f7fd ff3d 	bl	800a794 <HAL_GetTick>
 800c91a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	069b      	lsls	r3, r3, #26
 800c922:	d501      	bpl.n	800c928 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800c924:	2000      	movs	r0, #0
}
 800c926:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c928:	f7fd ff34 	bl	800a794 <HAL_GetTick>
 800c92c:	1b40      	subs	r0, r0, r5
 800c92e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c932:	d9f3      	bls.n	800c91c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800c934:	2003      	movs	r0, #3
 800c936:	e7f6      	b.n	800c926 <HAL_RTC_WaitForSynchro+0x1e>

0800c938 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c938:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c93a:	6803      	ldr	r3, [r0, #0]
 800c93c:	68da      	ldr	r2, [r3, #12]
 800c93e:	0652      	lsls	r2, r2, #25
{
 800c940:	4604      	mov	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c942:	d501      	bpl.n	800c948 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800c944:	2000      	movs	r0, #0
}
 800c946:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c948:	f04f 32ff 	mov.w	r2, #4294967295
 800c94c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800c94e:	f7fd ff21 	bl	800a794 <HAL_GetTick>
 800c952:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	065b      	lsls	r3, r3, #25
 800c95a:	d4f3      	bmi.n	800c944 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c95c:	f7fd ff1a 	bl	800a794 <HAL_GetTick>
 800c960:	1b40      	subs	r0, r0, r5
 800c962:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c966:	d9f5      	bls.n	800c954 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800c968:	2003      	movs	r0, #3
 800c96a:	e7ec      	b.n	800c946 <RTC_EnterInitMode+0xe>

0800c96c <HAL_RTC_Init>:
{
 800c96c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800c96e:	4604      	mov	r4, r0
 800c970:	b1b8      	cbz	r0, 800c9a2 <HAL_RTC_Init+0x36>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c972:	7f43      	ldrb	r3, [r0, #29]
 800c974:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c978:	b913      	cbnz	r3, 800c980 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800c97a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800c97c:	f7fd fb1e 	bl	8009fbc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c980:	2302      	movs	r3, #2
 800c982:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	22ca      	movs	r2, #202	; 0xca
 800c988:	625a      	str	r2, [r3, #36]	; 0x24
 800c98a:	2253      	movs	r2, #83	; 0x53
 800c98c:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c98e:	4620      	mov	r0, r4
 800c990:	f7ff ffd2 	bl	800c938 <RTC_EnterInitMode>
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	4605      	mov	r5, r0
 800c998:	b128      	cbz	r0, 800c9a6 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c99a:	22ff      	movs	r2, #255	; 0xff
 800c99c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c99e:	2304      	movs	r3, #4
 800c9a0:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800c9a2:	2501      	movs	r5, #1
 800c9a4:	e02e      	b.n	800ca04 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c9a6:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c9a8:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c9aa:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800c9ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9b2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c9b4:	6862      	ldr	r2, [r4, #4]
 800c9b6:	6899      	ldr	r1, [r3, #8]
 800c9b8:	4302      	orrs	r2, r0
 800c9ba:	6960      	ldr	r0, [r4, #20]
 800c9bc:	4302      	orrs	r2, r0
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c9c2:	68e2      	ldr	r2, [r4, #12]
 800c9c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c9c6:	691a      	ldr	r2, [r3, #16]
 800c9c8:	68a1      	ldr	r1, [r4, #8]
 800c9ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c9ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c9d0:	68da      	ldr	r2, [r3, #12]
 800c9d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9d6:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	069b      	lsls	r3, r3, #26
 800c9dc:	d405      	bmi.n	800c9ea <HAL_RTC_Init+0x7e>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f7ff ff92 	bl	800c908 <HAL_RTC_WaitForSynchro>
 800c9e4:	b108      	cbz	r0, 800c9ea <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	e7d7      	b.n	800c99a <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c9ea:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c9ec:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c9ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c9f4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c9f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9f8:	430a      	orrs	r2, r1
 800c9fa:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9fc:	22ff      	movs	r2, #255	; 0xff
 800c9fe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800ca00:	2301      	movs	r3, #1
 800ca02:	7763      	strb	r3, [r4, #29]
}
 800ca04:	4628      	mov	r0, r5
 800ca06:	bd38      	pop	{r3, r4, r5, pc}

0800ca08 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800ca08:	2300      	movs	r3, #0

  while (Value >= 10U)
 800ca0a:	2809      	cmp	r0, #9
 800ca0c:	d803      	bhi.n	800ca16 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800ca0e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800ca12:	b2c0      	uxtb	r0, r0
 800ca14:	4770      	bx	lr
    Value -= 10U;
 800ca16:	380a      	subs	r0, #10
    bcdhigh++;
 800ca18:	3301      	adds	r3, #1
    Value -= 10U;
 800ca1a:	b2c0      	uxtb	r0, r0
 800ca1c:	e7f5      	b.n	800ca0a <RTC_ByteToBcd2+0x2>

0800ca1e <HAL_RTC_SetTime>:
{
 800ca1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800ca22:	7f03      	ldrb	r3, [r0, #28]
 800ca24:	2b01      	cmp	r3, #1
{
 800ca26:	4605      	mov	r5, r0
 800ca28:	460e      	mov	r6, r1
 800ca2a:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 800ca2e:	d02e      	beq.n	800ca8e <HAL_RTC_SetTime+0x70>
 800ca30:	2301      	movs	r3, #1
 800ca32:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca34:	7747      	strb	r7, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 800ca36:	6801      	ldr	r1, [r0, #0]
 800ca38:	7874      	ldrb	r4, [r6, #1]
 800ca3a:	7830      	ldrb	r0, [r6, #0]
 800ca3c:	78b7      	ldrb	r7, [r6, #2]
 800ca3e:	bb4a      	cbnz	r2, 800ca94 <HAL_RTC_SetTime+0x76>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ca40:	688a      	ldr	r2, [r1, #8]
 800ca42:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 800ca46:	bf08      	it	eq
 800ca48:	70f2      	strbeq	r2, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ca4a:	f7ff ffdd 	bl	800ca08 <RTC_ByteToBcd2>
 800ca4e:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ca50:	4620      	mov	r0, r4
 800ca52:	f7ff ffd9 	bl	800ca08 <RTC_ByteToBcd2>
 800ca56:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ca58:	4638      	mov	r0, r7
 800ca5a:	f7ff ffd5 	bl	800ca08 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800ca5e:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ca60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800ca64:	ea42 4308 	orr.w	r3, r2, r8, lsl #16
 800ca68:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca6c:	23ca      	movs	r3, #202	; 0xca
 800ca6e:	624b      	str	r3, [r1, #36]	; 0x24
 800ca70:	2353      	movs	r3, #83	; 0x53
 800ca72:	624b      	str	r3, [r1, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ca74:	4628      	mov	r0, r5
 800ca76:	f7ff ff5f 	bl	800c938 <RTC_EnterInitMode>
 800ca7a:	682a      	ldr	r2, [r5, #0]
 800ca7c:	4607      	mov	r7, r0
 800ca7e:	b1b0      	cbz	r0, 800caae <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca80:	23ff      	movs	r3, #255	; 0xff
 800ca82:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ca84:	2304      	movs	r3, #4
 800ca86:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800ca88:	2300      	movs	r3, #0
 800ca8a:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 800ca8c:	2701      	movs	r7, #1
}
 800ca8e:	4638      	mov	r0, r7
 800ca90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ca94:	688a      	ldr	r2, [r1, #8]
 800ca96:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 800ca9a:	bf08      	it	eq
 800ca9c:	70f2      	strbeq	r2, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ca9e:	0224      	lsls	r4, r4, #8
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800caa0:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800caa2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800caa6:	433c      	orrs	r4, r7
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800caa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800caac:	e7de      	b.n	800ca6c <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800caae:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800cab2:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800cab6:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800cab8:	6893      	ldr	r3, [r2, #8]
 800caba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cabe:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cac0:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 800cac4:	6891      	ldr	r1, [r2, #8]
 800cac6:	4303      	orrs	r3, r0
 800cac8:	430b      	orrs	r3, r1
 800caca:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cacc:	68d3      	ldr	r3, [r2, #12]
 800cace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cad2:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cad4:	6893      	ldr	r3, [r2, #8]
 800cad6:	069b      	lsls	r3, r3, #26
 800cad8:	d40a      	bmi.n	800caf0 <HAL_RTC_SetTime+0xd2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cada:	4628      	mov	r0, r5
 800cadc:	f7ff ff14 	bl	800c908 <HAL_RTC_WaitForSynchro>
 800cae0:	b130      	cbz	r0, 800caf0 <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cae2:	682b      	ldr	r3, [r5, #0]
 800cae4:	22ff      	movs	r2, #255	; 0xff
 800cae6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cae8:	2304      	movs	r3, #4
 800caea:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 800caec:	772f      	strb	r7, [r5, #28]
 800caee:	e7cd      	b.n	800ca8c <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	22ff      	movs	r2, #255	; 0xff
 800caf4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800caf6:	2301      	movs	r3, #1
 800caf8:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800cafa:	2300      	movs	r3, #0
 800cafc:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 800cafe:	e7c6      	b.n	800ca8e <HAL_RTC_SetTime+0x70>

0800cb00 <HAL_RTC_SetDate>:
{
 800cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800cb02:	7f03      	ldrb	r3, [r0, #28]
 800cb04:	2b01      	cmp	r3, #1
{
 800cb06:	4604      	mov	r4, r0
 800cb08:	f04f 0602 	mov.w	r6, #2
  __HAL_LOCK(hrtc);
 800cb0c:	d031      	beq.n	800cb72 <HAL_RTC_SetDate+0x72>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb12:	7746      	strb	r6, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cb14:	780d      	ldrb	r5, [r1, #0]
 800cb16:	78c8      	ldrb	r0, [r1, #3]
 800cb18:	784b      	ldrb	r3, [r1, #1]
 800cb1a:	788f      	ldrb	r7, [r1, #2]
 800cb1c:	036d      	lsls	r5, r5, #13
 800cb1e:	2a00      	cmp	r2, #0
 800cb20:	d148      	bne.n	800cbb4 <HAL_RTC_SetDate+0xb4>
 800cb22:	06da      	lsls	r2, r3, #27
 800cb24:	d503      	bpl.n	800cb2e <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cb26:	f023 0310 	bic.w	r3, r3, #16
 800cb2a:	330a      	adds	r3, #10
 800cb2c:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cb2e:	f7ff ff6b 	bl	800ca08 <RTC_ByteToBcd2>
 800cb32:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cb34:	7848      	ldrb	r0, [r1, #1]
 800cb36:	f7ff ff67 	bl	800ca08 <RTC_ByteToBcd2>
 800cb3a:	4601      	mov	r1, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	f7ff ff63 	bl	800ca08 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cb42:	ea40 0205 	orr.w	r2, r0, r5
 800cb46:	ea42 4306 	orr.w	r3, r2, r6, lsl #16
 800cb4a:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	22ca      	movs	r2, #202	; 0xca
 800cb52:	625a      	str	r2, [r3, #36]	; 0x24
 800cb54:	2253      	movs	r2, #83	; 0x53
 800cb56:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f7ff feed 	bl	800c938 <RTC_EnterInitMode>
 800cb5e:	6822      	ldr	r2, [r4, #0]
 800cb60:	4606      	mov	r6, r0
 800cb62:	b140      	cbz	r0, 800cb76 <HAL_RTC_SetDate+0x76>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb64:	23ff      	movs	r3, #255	; 0xff
 800cb66:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cb68:	2304      	movs	r3, #4
 800cb6a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800cb70:	2601      	movs	r6, #1
}
 800cb72:	4630      	mov	r0, r6
 800cb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cb76:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800cb7a:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800cb7e:	6055      	str	r5, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cb80:	68d3      	ldr	r3, [r2, #12]
 800cb82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb86:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cb88:	6893      	ldr	r3, [r2, #8]
 800cb8a:	069b      	lsls	r3, r3, #26
 800cb8c:	d40a      	bmi.n	800cba4 <HAL_RTC_SetDate+0xa4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f7ff feba 	bl	800c908 <HAL_RTC_WaitForSynchro>
 800cb94:	b130      	cbz	r0, 800cba4 <HAL_RTC_SetDate+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	22ff      	movs	r2, #255	; 0xff
 800cb9a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cb9c:	2304      	movs	r3, #4
 800cb9e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800cba0:	7726      	strb	r6, [r4, #28]
 800cba2:	e7e5      	b.n	800cb70 <HAL_RTC_SetDate+0x70>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cba4:	6823      	ldr	r3, [r4, #0]
 800cba6:	22ff      	movs	r2, #255	; 0xff
 800cba8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800cbae:	2300      	movs	r3, #0
 800cbb0:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 800cbb2:	e7de      	b.n	800cb72 <HAL_RTC_SetDate+0x72>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cbb4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800cbb8:	433d      	orrs	r5, r7
 800cbba:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800cbbe:	e7c6      	b.n	800cb4e <HAL_RTC_SetDate+0x4e>

0800cbc0 <HAL_RTC_SetAlarm>:
{
 800cbc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hrtc);
 800cbc4:	7f03      	ldrb	r3, [r0, #28]
 800cbc6:	2b01      	cmp	r3, #1
{
 800cbc8:	4604      	mov	r4, r0
 800cbca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800cbce:	d076      	beq.n	800ccbe <HAL_RTC_SetAlarm+0xfe>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	6827      	ldr	r7, [r4, #0]
 800cbd4:	7723      	strb	r3, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cbd6:	7760      	strb	r0, [r4, #29]
  if (Format == RTC_FORMAT_BIN)
 800cbd8:	7808      	ldrb	r0, [r1, #0]
 800cbda:	f891 9001 	ldrb.w	r9, [r1, #1]
 800cbde:	f891 b002 	ldrb.w	fp, [r1, #2]
 800cbe2:	f891 8020 	ldrb.w	r8, [r1, #32]
 800cbe6:	69ce      	ldr	r6, [r1, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cbe8:	68bb      	ldr	r3, [r7, #8]
  if (Format == RTC_FORMAT_BIN)
 800cbea:	2a00      	cmp	r2, #0
 800cbec:	d148      	bne.n	800cc80 <HAL_RTC_SetAlarm+0xc0>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cbee:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cbf2:	bf08      	it	eq
 800cbf4:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800cbf6:	f7ff ff07 	bl	800ca08 <RTC_ByteToBcd2>
 800cbfa:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cbfc:	4648      	mov	r0, r9
 800cbfe:	f7ff ff03 	bl	800ca08 <RTC_ByteToBcd2>
 800cc02:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cc04:	4658      	mov	r0, fp
 800cc06:	f7ff feff 	bl	800ca08 <RTC_ByteToBcd2>
 800cc0a:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cc0c:	4640      	mov	r0, r8
 800cc0e:	f7ff fefb 	bl	800ca08 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800cc12:	694b      	ldr	r3, [r1, #20]
 800cc14:	ea46 0c03 	orr.w	ip, r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cc18:	78ce      	ldrb	r6, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800cc1a:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 800cc1e:	ea4c 0202 	orr.w	r2, ip, r2
 800cc22:	ea42 460a 	orr.w	r6, r2, sl, lsl #16
 800cc26:	ea46 2309 	orr.w	r3, r6, r9, lsl #8
 800cc2a:	ea43 6500 	orr.w	r5, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cc2e:	698b      	ldr	r3, [r1, #24]
 800cc30:	684e      	ldr	r6, [r1, #4]
 800cc32:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc34:	23ca      	movs	r3, #202	; 0xca
 800cc36:	627b      	str	r3, [r7, #36]	; 0x24
 800cc38:	2353      	movs	r3, #83	; 0x53
 800cc3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800cc3c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800cc3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cc42:	68bb      	ldr	r3, [r7, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800cc44:	d13d      	bne.n	800ccc2 <HAL_RTC_SetAlarm+0x102>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cc46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc4a:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc52:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800cc54:	f7fd fd9e 	bl	800a794 <HAL_GetTick>
 800cc58:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	68df      	ldr	r7, [r3, #12]
 800cc5e:	f017 0701 	ands.w	r7, r7, #1
 800cc62:	d01f      	beq.n	800cca4 <HAL_RTC_SetAlarm+0xe4>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cc64:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cc66:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cc68:	689a      	ldr	r2, [r3, #8]
 800cc6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cc6e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	22ff      	movs	r2, #255	; 0xff
 800cc74:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800cc76:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 800cc7c:	7720      	strb	r0, [r4, #28]
  return HAL_OK;
 800cc7e:	e01e      	b.n	800ccbe <HAL_RTC_SetAlarm+0xfe>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cc80:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cc84:	bf08      	it	eq
 800cc86:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cc88:	694b      	ldr	r3, [r1, #20]
 800cc8a:	431e      	orrs	r6, r3
 800cc8c:	ea46 060b 	orr.w	r6, r6, fp
 800cc90:	ea46 4500 	orr.w	r5, r6, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cc94:	78c8      	ldrb	r0, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cc96:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 800cc9a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800cc9e:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 800cca2:	e7c4      	b.n	800cc2e <HAL_RTC_SetAlarm+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cca4:	f7fd fd76 	bl	800a794 <HAL_GetTick>
 800cca8:	eba0 0008 	sub.w	r0, r0, r8
 800ccac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ccb0:	d9d3      	bls.n	800cc5a <HAL_RTC_SetAlarm+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccb6:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccb8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccba:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800ccbc:	7727      	strb	r7, [r4, #28]
}
 800ccbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ccc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ccc6:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ccce:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800ccd0:	f7fd fd60 	bl	800a794 <HAL_GetTick>
 800ccd4:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	68df      	ldr	r7, [r3, #12]
 800ccda:	f017 0702 	ands.w	r7, r7, #2
 800ccde:	d005      	beq.n	800ccec <HAL_RTC_SetAlarm+0x12c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cce0:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cce2:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cce4:	689a      	ldr	r2, [r3, #8]
 800cce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccea:	e7c0      	b.n	800cc6e <HAL_RTC_SetAlarm+0xae>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ccec:	f7fd fd52 	bl	800a794 <HAL_GetTick>
 800ccf0:	eba0 0008 	sub.w	r0, r0, r8
 800ccf4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ccf8:	d9ed      	bls.n	800ccd6 <HAL_RTC_SetAlarm+0x116>
 800ccfa:	e7da      	b.n	800ccb2 <HAL_RTC_SetAlarm+0xf2>

0800ccfc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800ccfc:	0903      	lsrs	r3, r0, #4
 800ccfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 800cd02:	f000 000f 	and.w	r0, r0, #15
 800cd06:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800cd0a:	b2c0      	uxtb	r0, r0
 800cd0c:	4770      	bx	lr

0800cd0e <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cd0e:	6803      	ldr	r3, [r0, #0]
 800cd10:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800cd12:	6048      	str	r0, [r1, #4]
{
 800cd14:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cd16:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cd18:	681c      	ldr	r4, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cd1a:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800cd1e:	f3c4 4506 	ubfx	r5, r4, #16, #7
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800cd22:	f3c4 2606 	ubfx	r6, r4, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cd26:	6088      	str	r0, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800cd28:	f005 0340 	and.w	r3, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800cd2c:	f3c4 4005 	ubfx	r0, r4, #16, #6
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800cd30:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800cd34:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800cd36:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800cd38:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800cd3a:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 800cd3c:	b952      	cbnz	r2, 800cd54 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cd3e:	f7ff ffdd 	bl	800ccfc <RTC_Bcd2ToByte>
 800cd42:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cd44:	4630      	mov	r0, r6
 800cd46:	f7ff ffd9 	bl	800ccfc <RTC_Bcd2ToByte>
 800cd4a:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f7ff ffd5 	bl	800ccfc <RTC_Bcd2ToByte>
 800cd52:	7088      	strb	r0, [r1, #2]
}
 800cd54:	2000      	movs	r0, #0
 800cd56:	bd70      	pop	{r4, r5, r6, pc}

0800cd58 <HAL_RTC_GetDate>:
{
 800cd58:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cd5a:	6803      	ldr	r3, [r0, #0]
 800cd5c:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800cd5e:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800cd62:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cd66:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800cd6a:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800cd6e:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800cd70:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cd72:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800cd74:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800cd76:	b952      	cbnz	r2, 800cd8e <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cd78:	f7ff ffc0 	bl	800ccfc <RTC_Bcd2ToByte>
 800cd7c:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cd7e:	4628      	mov	r0, r5
 800cd80:	f7ff ffbc 	bl	800ccfc <RTC_Bcd2ToByte>
 800cd84:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cd86:	4620      	mov	r0, r4
 800cd88:	f7ff ffb8 	bl	800ccfc <RTC_Bcd2ToByte>
 800cd8c:	7088      	strb	r0, [r1, #2]
}
 800cd8e:	2000      	movs	r0, #0
 800cd90:	bd38      	pop	{r3, r4, r5, pc}

0800cd92 <HAL_RTC_GetAlarm>:
  if (Alarm == RTC_ALARM_A)
 800cd92:	6800      	ldr	r0, [r0, #0]
 800cd94:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    sAlarm->Alarm = RTC_ALARM_B;
 800cd98:	bf15      	itete	ne
 800cd9a:	f44f 7200 	movne.w	r2, #512	; 0x200
    sAlarm->Alarm = RTC_ALARM_A;
 800cd9e:	624a      	streq	r2, [r1, #36]	; 0x24
    sAlarm->Alarm = RTC_ALARM_B;
 800cda0:	624a      	strne	r2, [r1, #36]	; 0x24
    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800cda2:	69c2      	ldreq	r2, [r0, #28]
    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800cda4:	bf18      	it	ne
 800cda6:	6a02      	ldrne	r2, [r0, #32]
{
 800cda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800cdaa:	bf0c      	ite	eq
 800cdac:	6c44      	ldreq	r4, [r0, #68]	; 0x44
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800cdae:	6c84      	ldrne	r4, [r0, #72]	; 0x48
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800cdb0:	f3c2 4507 	ubfx	r5, r2, #16, #8
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800cdb4:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 800cdb8:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800cdbc:	f3c2 4005 	ubfx	r0, r2, #16, #6
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800cdc0:	f3c2 2706 	ubfx	r7, r2, #8, #7
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 800cdc4:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 800cdc8:	70cd      	strb	r5, [r1, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800cdca:	604c      	str	r4, [r1, #4]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800cdcc:	f002 4580 	and.w	r5, r2, #1073741824	; 0x40000000
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800cdd0:	f3c2 6405 	ubfx	r4, r2, #24, #6
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800cdd4:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800cdd8:	7008      	strb	r0, [r1, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800cdda:	704f      	strb	r7, [r1, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 800cddc:	708e      	strb	r6, [r1, #2]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800cdde:	f881 4020 	strb.w	r4, [r1, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800cde2:	61cd      	str	r5, [r1, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800cde4:	614a      	str	r2, [r1, #20]
  if (Format == RTC_FORMAT_BIN)
 800cde6:	b97b      	cbnz	r3, 800ce08 <HAL_RTC_GetAlarm+0x76>
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800cde8:	f7ff ff88 	bl	800ccfc <RTC_Bcd2ToByte>
 800cdec:	7008      	strb	r0, [r1, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800cdee:	4638      	mov	r0, r7
 800cdf0:	f7ff ff84 	bl	800ccfc <RTC_Bcd2ToByte>
 800cdf4:	7048      	strb	r0, [r1, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f7ff ff80 	bl	800ccfc <RTC_Bcd2ToByte>
 800cdfc:	7088      	strb	r0, [r1, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f7ff ff7c 	bl	800ccfc <RTC_Bcd2ToByte>
 800ce04:	f881 0020 	strb.w	r0, [r1, #32]
}
 800ce08:	2000      	movs	r0, #0
 800ce0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce0c <SDADC_EnterInitMode.isra.0>:
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800ce0c:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
 800ce0e:	b538      	push	{r3, r4, r5, lr}
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800ce10:	6813      	ldr	r3, [r2, #0]
 800ce12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce16:	6013      	str	r3, [r2, #0]
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
 800ce18:	4604      	mov	r4, r0

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 800ce1a:	f7fd fcbb 	bl	800a794 <HAL_GetTick>
 800ce1e:	4605      	mov	r5, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	da01      	bge.n	800ce2c <SDADC_EnterInitMode.isra.0+0x20>
      return HAL_TIMEOUT;
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 800ce28:	2000      	movs	r0, #0
}
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 800ce2c:	f7fd fcb2 	bl	800a794 <HAL_GetTick>
 800ce30:	1b40      	subs	r0, r0, r5
 800ce32:	28c8      	cmp	r0, #200	; 0xc8
 800ce34:	d9f4      	bls.n	800ce20 <SDADC_EnterInitMode.isra.0+0x14>
      return HAL_TIMEOUT;
 800ce36:	2003      	movs	r0, #3
 800ce38:	e7f7      	b.n	800ce2a <SDADC_EnterInitMode.isra.0+0x1e>

0800ce3a <SDADC_InjConvStart>:
static HAL_StatusTypeDef SDADC_InjConvStart(SDADC_HandleTypeDef* hsdadc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Initialize number of injected conversions remaining */
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800ce3a:	6a03      	ldr	r3, [r0, #32]
{
 800ce3c:	b510      	push	{r4, lr}
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800ce3e:	6243      	str	r3, [r0, #36]	; 0x24

  /* Check injected trigger */
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 800ce40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800ce42:	4604      	mov	r4, r0
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 800ce44:	b973      	cbnz	r3, 800ce64 <SDADC_InjConvStart+0x2a>
  {
    /* Set JSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 800ce46:	6802      	ldr	r2, [r0, #0]
 800ce48:	6853      	ldr	r3, [r2, #4]
 800ce4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce4e:	6053      	str	r3, [r2, #4]
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 800ce50:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	bf0c      	ite	eq
 800ce58:	2304      	moveq	r3, #4
 800ce5a:	2305      	movne	r3, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 800ce5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800ce60:	2000      	movs	r0, #0
 800ce62:	e006      	b.n	800ce72 <SDADC_InjConvStart+0x38>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800ce64:	f7ff ffd2 	bl	800ce0c <SDADC_EnterInitMode.isra.0>
 800ce68:	b120      	cbz	r0, 800ce74 <SDADC_InjConvStart+0x3a>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800ce6a:	23ff      	movs	r3, #255	; 0xff
 800ce6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800ce70:	2003      	movs	r0, #3
  }
  /* Return function status */
  return status;
}
 800ce72:	bd10      	pop	{r4, pc}
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800ce74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	2a01      	cmp	r2, #1
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800ce7a:	bf0d      	iteet	eq
 800ce7c:	681a      	ldreq	r2, [r3, #0]
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 800ce7e:	685a      	ldrne	r2, [r3, #4]
 800ce80:	6b21      	ldrne	r1, [r4, #48]	; 0x30
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800ce82:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 800ce86:	bf16      	itet	ne
 800ce88:	430a      	orrne	r2, r1
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800ce8a:	601a      	streq	r2, [r3, #0]
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 800ce8c:	605a      	strne	r2, [r3, #4]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ce94:	601a      	str	r2, [r3, #0]
  if(status == HAL_OK)
 800ce96:	e7db      	b.n	800ce50 <SDADC_InjConvStart+0x16>

0800ce98 <SDADC_InjConvStop>:
{
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;
  
  /* Check continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 800ce98:	69c3      	ldr	r3, [r0, #28]
 800ce9a:	2b01      	cmp	r3, #1
{
 800ce9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce9e:	4604      	mov	r4, r0
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 800cea0:	d107      	bne.n	800ceb2 <SDADC_InjConvStop+0x1a>
  {
    /* Clear JEOCF by reading SDADC_JDATAR register */
    dummy_read_for_register_reset =  hsdadc->Instance->JDATAR;
 800cea2:	6803      	ldr	r3, [r0, #0]
 800cea4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cea6:	9201      	str	r2, [sp, #4]
    UNUSED(dummy_read_for_register_reset);
 800cea8:	9a01      	ldr	r2, [sp, #4]

    /* Clear JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	f022 0220 	bic.w	r2, r2, #32
 800ceb0:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of injected conversion */
  tickstart = HAL_GetTick();  
 800ceb2:	f7fd fc6f 	bl	800a794 <HAL_GetTick>
 800ceb6:	4605      	mov	r5, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	049b      	lsls	r3, r3, #18
 800cebe:	d430      	bmi.n	800cf22 <SDADC_InjConvStop+0x8a>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
      return HAL_TIMEOUT;
    }
  }
  /* Check if trigger is not software */
  if(hsdadc->InjectedTrigger != SDADC_SOFTWARE_TRIGGER)
 800cec0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cec2:	b1ab      	cbz	r3, 800cef0 <SDADC_InjConvStop+0x58>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800cec4:	4620      	mov	r0, r4
 800cec6:	f7ff ffa1 	bl	800ce0c <SDADC_EnterInitMode.isra.0>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d12e      	bne.n	800cf2c <SDADC_InjConvStop+0x94>
      return HAL_TIMEOUT;
    }
    else
    {
      /* Check if trigger is synchronuous */
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800cece:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	2a01      	cmp	r2, #1
      {
        /* Clear JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 800ced4:	bf0b      	itete	eq
 800ced6:	681a      	ldreq	r2, [r3, #0]
      }
      else /* external trigger */
      {
        /* Clear JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 800ced8:	685a      	ldrne	r2, [r3, #4]
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 800ceda:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 800cede:	f422 42c0 	bicne.w	r2, r2, #24576	; 0x6000
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 800cee2:	bf0c      	ite	eq
 800cee4:	601a      	streq	r2, [r3, #0]
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 800cee6:	605a      	strne	r2, [r3, #4]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ceee:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
    }
  }
  /* Check if continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 800cef0:	69e2      	ldr	r2, [r4, #28]
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	2a01      	cmp	r2, #1
  {
    /* Restore JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 800cef6:	bf02      	ittt	eq
 800cef8:	685a      	ldreq	r2, [r3, #4]
 800cefa:	f042 0220 	orreq.w	r2, r2, #32
 800cefe:	605a      	streq	r2, [r3, #4]
  }
  /* Clear JEOCF by reading SDADC_JDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->JDATAR;
 800cf00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cf02:	9201      	str	r2, [sp, #4]
  UNUSED(dummy_read_for_register_reset);
 800cf04:	9a01      	ldr	r2, [sp, #4]

  /* Set CLRJOVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 800cf06:	68da      	ldr	r2, [r3, #12]
 800cf08:	f042 0204 	orr.w	r2, r2, #4
 800cf0c:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 800cf0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cf12:	2b04      	cmp	r3, #4
 800cf14:	bf0c      	ite	eq
 800cf16:	2301      	moveq	r3, #1
 800cf18:	2303      	movne	r3, #3
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 800cf1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800cf1e:	2000      	movs	r0, #0
 800cf20:	e008      	b.n	800cf34 <SDADC_InjConvStop+0x9c>
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 800cf22:	f7fd fc37 	bl	800a794 <HAL_GetTick>
 800cf26:	1b40      	subs	r0, r0, r5
 800cf28:	28c8      	cmp	r0, #200	; 0xc8
 800cf2a:	d9c5      	bls.n	800ceb8 <SDADC_InjConvStop+0x20>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800cf2c:	23ff      	movs	r3, #255	; 0xff
 800cf2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 800cf32:	2003      	movs	r0, #3
}
 800cf34:	b003      	add	sp, #12
 800cf36:	bd30      	pop	{r4, r5, pc}

0800cf38 <HAL_SDADC_Init>:
{
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	2301      	movs	r3, #1
  if(hsdadc == NULL)
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d03e      	beq.n	800cfc0 <HAL_SDADC_Init+0x88>
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 800cf42:	2200      	movs	r2, #0
  hsdadc->InjConvRemaining    = 1U;
 800cf44:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 800cf48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 800cf4c:	e9c0 320c 	strd	r3, r2, [r0, #48]	; 0x30
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 800cf50:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 800cf54:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 800cf58:	6382      	str	r2, [r0, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 800cf5a:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_SDADC_MspInit(hsdadc);
 800cf5c:	f7fd f842 	bl	8009fe4 <HAL_SDADC_MspInit>
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 800cf60:	6823      	ldr	r3, [r4, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800cf62:	68e0      	ldr	r0, [r4, #12]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800cf6a:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800cf6c:	6862      	ldr	r2, [r4, #4]
 800cf6e:	6819      	ldr	r1, [r3, #0]
 800cf70:	4302      	orrs	r2, r0
 800cf72:	430a      	orrs	r2, r1
 800cf74:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 800cf76:	685a      	ldr	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 800cf78:	68a1      	ldr	r1, [r4, #8]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 800cf7a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800cf7e:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	430a      	orrs	r2, r1
 800cf84:	605a      	str	r2, [r3, #4]
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 800cf86:	4b0f      	ldr	r3, [pc, #60]	; (800cfc4 <HAL_SDADC_Init+0x8c>)
 800cf88:	6922      	ldr	r2, [r4, #16]
 800cf8a:	6819      	ldr	r1, [r3, #0]
 800cf8c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800cf90:	4291      	cmp	r1, r2
 800cf92:	d009      	beq.n	800cfa8 <HAL_SDADC_Init+0x70>
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 800cf94:	6819      	ldr	r1, [r3, #0]
 800cf96:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800cf9a:	6019      	str	r1, [r3, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 800cf9c:	6819      	ldr	r1, [r3, #0]
 800cf9e:	430a      	orrs	r2, r1
 800cfa0:	601a      	str	r2, [r3, #0]
    HAL_Delay(2U);
 800cfa2:	2002      	movs	r0, #2
 800cfa4:	f7fd fbfc 	bl	800a7a0 <HAL_Delay>
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 800cfa8:	6822      	ldr	r2, [r4, #0]
 800cfaa:	6853      	ldr	r3, [r2, #4]
 800cfac:	f043 0301 	orr.w	r3, r3, #1
 800cfb0:	6053      	str	r3, [r2, #4]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 800cfb2:	6893      	ldr	r3, [r2, #8]
 800cfb4:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800cfb8:	d1fb      	bne.n	800cfb2 <HAL_SDADC_Init+0x7a>
  hsdadc->State = HAL_SDADC_STATE_READY;
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800cfc0:	4618      	mov	r0, r3
}
 800cfc2:	bd10      	pop	{r4, pc}
 800cfc4:	40016000 	.word	0x40016000

0800cfc8 <HAL_SDADC_PrepareChannelConfig>:
{
 800cfc8:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800cfca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cfce:	2b01      	cmp	r3, #1
{
 800cfd0:	4606      	mov	r6, r0
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	4615      	mov	r5, r2
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800cfd6:	d117      	bne.n	800d008 <HAL_SDADC_PrepareChannelConfig+0x40>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800cfd8:	f7ff ff18 	bl	800ce0c <SDADC_EnterInitMode.isra.0>
 800cfdc:	b120      	cbz	r0, 800cfe8 <HAL_SDADC_PrepareChannelConfig+0x20>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800cfde:	23ff      	movs	r3, #255	; 0xff
 800cfe0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800cfe4:	2003      	movs	r0, #3
}
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800cfe8:	e9d5 3100 	ldrd	r3, r1, [r5]
 800cfec:	430b      	orrs	r3, r1
                                             ConfParamStruct->Gain | \
 800cfee:	68a9      	ldr	r1, [r5, #8]
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 800cff0:	6832      	ldr	r2, [r6, #0]
                                             ConfParamStruct->Gain | \
 800cff2:	430b      	orrs	r3, r1
                       (uint32_t)(ConfIndex << 2UL));
 800cff4:	00a4      	lsls	r4, r4, #2
                                             ConfParamStruct->CommonMode | \
 800cff6:	68e9      	ldr	r1, [r5, #12]
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 800cff8:	3420      	adds	r4, #32
                                             ConfParamStruct->CommonMode | \
 800cffa:	430b      	orrs	r3, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800cffc:	5113      	str	r3, [r2, r4]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800cffe:	6813      	ldr	r3, [r2, #0]
 800d000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d004:	6013      	str	r3, [r2, #0]
}
 800d006:	e7ee      	b.n	800cfe6 <HAL_SDADC_PrepareChannelConfig+0x1e>
    status = HAL_ERROR;
 800d008:	2001      	movs	r0, #1
 800d00a:	e7ec      	b.n	800cfe6 <HAL_SDADC_PrepareChannelConfig+0x1e>

0800d00c <HAL_SDADC_AssociateChannelConfig>:
{
 800d00c:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800d00e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d012:	2b01      	cmp	r3, #1
{
 800d014:	4605      	mov	r5, r0
 800d016:	460c      	mov	r4, r1
 800d018:	4616      	mov	r6, r2
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800d01a:	d120      	bne.n	800d05e <HAL_SDADC_AssociateChannelConfig+0x52>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800d01c:	f7ff fef6 	bl	800ce0c <SDADC_EnterInitMode.isra.0>
 800d020:	b120      	cbz	r0, 800d02c <HAL_SDADC_AssociateChannelConfig+0x20>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800d022:	23ff      	movs	r3, #255	; 0xff
 800d024:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800d028:	2003      	movs	r0, #3
}
 800d02a:	bd70      	pop	{r4, r5, r6, pc}
      if(Channel != SDADC_CHANNEL_8)
 800d02c:	4a0d      	ldr	r2, [pc, #52]	; (800d064 <HAL_SDADC_AssociateChannelConfig+0x58>)
 800d02e:	682b      	ldr	r3, [r5, #0]
 800d030:	4294      	cmp	r4, r2
 800d032:	d012      	beq.n	800d05a <HAL_SDADC_AssociateChannelConfig+0x4e>
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 800d034:	0ba1      	lsrs	r1, r4, #14
 800d036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d038:	f001 041c 	and.w	r4, r1, #28
 800d03c:	2103      	movs	r1, #3
 800d03e:	40a1      	lsls	r1, r4
 800d040:	ea22 0201 	bic.w	r2, r2, r1
 800d044:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 800d046:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d048:	fa06 f204 	lsl.w	r2, r6, r4
 800d04c:	430a      	orrs	r2, r1
 800d04e:	641a      	str	r2, [r3, #64]	; 0x40
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800d056:	601a      	str	r2, [r3, #0]
}
 800d058:	e7e7      	b.n	800d02a <HAL_SDADC_AssociateChannelConfig+0x1e>
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 800d05a:	645e      	str	r6, [r3, #68]	; 0x44
 800d05c:	e7f8      	b.n	800d050 <HAL_SDADC_AssociateChannelConfig+0x44>
    status = HAL_ERROR;
 800d05e:	2001      	movs	r0, #1
 800d060:	e7e3      	b.n	800d02a <HAL_SDADC_AssociateChannelConfig+0x1e>
 800d062:	bf00      	nop
 800d064:	00080100 	.word	0x00080100

0800d068 <HAL_SDADC_InjectedConfigChannel>:
{
 800d068:	b510      	push	{r4, lr}
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 800d06a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d06e:	3b01      	subs	r3, #1
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2bfd      	cmp	r3, #253	; 0xfd
 800d074:	d817      	bhi.n	800d0a6 <HAL_SDADC_InjectedConfigChannel+0x3e>
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 800d076:	6803      	ldr	r3, [r0, #0]
 800d078:	b289      	uxth	r1, r1
 800d07a:	6159      	str	r1, [r3, #20]
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 800d07c:	685c      	ldr	r4, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 800d07e:	2a01      	cmp	r2, #1
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 800d080:	bf0c      	ite	eq
 800d082:	f044 0420 	orreq.w	r4, r4, #32
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 800d086:	f024 0420 	bicne.w	r4, r4, #32
 800d08a:	605c      	str	r4, [r3, #4]
    hsdadc->InjectedContMode = ContinuousMode;
 800d08c:	61c2      	str	r2, [r0, #28]
 800d08e:	2309      	movs	r3, #9
  uint32_t nbChannels = 0UL;
 800d090:	2200      	movs	r2, #0
    if((tmp & 0x00000001UL) != 0UL)
 800d092:	07cc      	lsls	r4, r1, #31
      nbChannels++;
 800d094:	bf48      	it	mi
 800d096:	3201      	addmi	r2, #1
  for(i = 0UL ; i < 9UL ; i++)
 800d098:	3b01      	subs	r3, #1
    tmp = (uint32_t) (tmp >> 1UL);
 800d09a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  for(i = 0UL ; i < 9UL ; i++)
 800d09e:	d1f8      	bne.n	800d092 <HAL_SDADC_InjectedConfigChannel+0x2a>
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 800d0a0:	6202      	str	r2, [r0, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d0a2:	4618      	mov	r0, r3
}
 800d0a4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800d0a6:	2001      	movs	r0, #1
 800d0a8:	e7fc      	b.n	800d0a4 <HAL_SDADC_InjectedConfigChannel+0x3c>
	...

0800d0ac <HAL_SDADC_SelectInjectedTrigger>:
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 800d0ac:	6802      	ldr	r2, [r0, #0]
 800d0ae:	4b07      	ldr	r3, [pc, #28]	; (800d0cc <HAL_SDADC_SelectInjectedTrigger+0x20>)
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d101      	bne.n	800d0b8 <HAL_SDADC_SelectInjectedTrigger+0xc>
 800d0b4:	2901      	cmp	r1, #1
 800d0b6:	d007      	beq.n	800d0c8 <HAL_SDADC_SelectInjectedTrigger+0x1c>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 800d0b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d802      	bhi.n	800d0c8 <HAL_SDADC_SelectInjectedTrigger+0x1c>
    hsdadc->InjectedTrigger = Trigger;
 800d0c2:	62c1      	str	r1, [r0, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	4770      	bx	lr
    status = HAL_ERROR;
 800d0c8:	2001      	movs	r0, #1
}
 800d0ca:	4770      	bx	lr
 800d0cc:	40016000 	.word	0x40016000

0800d0d0 <HAL_SDADC_SelectInjectedExtTrigger>:
{
 800d0d0:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800d0d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d0d6:	2b01      	cmp	r3, #1
{
 800d0d8:	4604      	mov	r4, r0
 800d0da:	460e      	mov	r6, r1
 800d0dc:	4615      	mov	r5, r2
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800d0de:	d115      	bne.n	800d10c <HAL_SDADC_SelectInjectedExtTrigger+0x3c>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800d0e0:	f7ff fe94 	bl	800ce0c <SDADC_EnterInitMode.isra.0>
 800d0e4:	b120      	cbz	r0, 800d0f0 <HAL_SDADC_SelectInjectedExtTrigger+0x20>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800d0e6:	23ff      	movs	r3, #255	; 0xff
 800d0e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800d0ec:	2003      	movs	r0, #3
}
 800d0ee:	bd70      	pop	{r4, r5, r6, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTSEL);
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	685a      	ldr	r2, [r3, #4]
 800d0f4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800d0f8:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedExtTrigger;
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	4332      	orrs	r2, r6
 800d0fe:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800d100:	681a      	ldr	r2, [r3, #0]
      hsdadc->ExtTriggerEdge = ExtTriggerEdge;
 800d102:	6325      	str	r5, [r4, #48]	; 0x30
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800d104:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800d108:	601a      	str	r2, [r3, #0]
}
 800d10a:	e7f0      	b.n	800d0ee <HAL_SDADC_SelectInjectedExtTrigger+0x1e>
    status = HAL_ERROR;
 800d10c:	2001      	movs	r0, #1
 800d10e:	e7ee      	b.n	800d0ee <HAL_SDADC_SelectInjectedExtTrigger+0x1e>

0800d110 <HAL_SDADC_SelectInjectedDelay>:
{
 800d110:	b538      	push	{r3, r4, r5, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800d112:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d116:	2b01      	cmp	r3, #1
{
 800d118:	4604      	mov	r4, r0
 800d11a:	460d      	mov	r5, r1
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800d11c:	d114      	bne.n	800d148 <HAL_SDADC_SelectInjectedDelay+0x38>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800d11e:	f7ff fe75 	bl	800ce0c <SDADC_EnterInitMode.isra.0>
 800d122:	b120      	cbz	r0, 800d12e <HAL_SDADC_SelectInjectedDelay+0x1e>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800d124:	23ff      	movs	r3, #255	; 0xff
 800d126:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800d12a:	2003      	movs	r0, #3
}
 800d12c:	bd38      	pop	{r3, r4, r5, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d136:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 800d138:	685a      	ldr	r2, [r3, #4]
 800d13a:	432a      	orrs	r2, r5
 800d13c:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800d144:	601a      	str	r2, [r3, #0]
}
 800d146:	e7f1      	b.n	800d12c <HAL_SDADC_SelectInjectedDelay+0x1c>
    status = HAL_ERROR;
 800d148:	2001      	movs	r0, #1
 800d14a:	e7ef      	b.n	800d12c <HAL_SDADC_SelectInjectedDelay+0x1c>

0800d14c <HAL_SDADC_CalibrationStart>:
{
 800d14c:	b538      	push	{r3, r4, r5, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800d14e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d152:	2b01      	cmp	r3, #1
{
 800d154:	4604      	mov	r4, r0
 800d156:	460d      	mov	r5, r1
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800d158:	d11b      	bne.n	800d192 <HAL_SDADC_CalibrationStart+0x46>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800d15a:	f7ff fe57 	bl	800ce0c <SDADC_EnterInitMode.isra.0>
 800d15e:	b120      	cbz	r0, 800d16a <HAL_SDADC_CalibrationStart+0x1e>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800d160:	23ff      	movs	r3, #255	; 0xff
 800d162:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800d166:	2003      	movs	r0, #3
}
 800d168:	bd38      	pop	{r3, r4, r5, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 800d16a:	6823      	ldr	r3, [r4, #0]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	f022 0206 	bic.w	r2, r2, #6
 800d172:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	432a      	orrs	r2, r5
 800d178:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800d180:	601a      	str	r2, [r3, #0]
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 800d182:	685a      	ldr	r2, [r3, #4]
 800d184:	f042 0210 	orr.w	r2, r2, #16
 800d188:	605a      	str	r2, [r3, #4]
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 800d18a:	2302      	movs	r3, #2
 800d18c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800d190:	e7ea      	b.n	800d168 <HAL_SDADC_CalibrationStart+0x1c>
    status = HAL_ERROR;
 800d192:	2001      	movs	r0, #1
 800d194:	e7e8      	b.n	800d168 <HAL_SDADC_CalibrationStart+0x1c>

0800d196 <HAL_SDADC_PollForCalibEvent>:
{
 800d196:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800d198:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d19c:	2b02      	cmp	r3, #2
{
 800d19e:	4604      	mov	r4, r0
 800d1a0:	460d      	mov	r5, r1
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800d1a2:	d11a      	bne.n	800d1da <HAL_SDADC_PollForCalibEvent+0x44>
    tickstart = HAL_GetTick();  
 800d1a4:	f7fd faf6 	bl	800a794 <HAL_GetTick>
 800d1a8:	4606      	mov	r6, r0
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 800d1aa:	6823      	ldr	r3, [r4, #0]
 800d1ac:	689a      	ldr	r2, [r3, #8]
 800d1ae:	07d2      	lsls	r2, r2, #31
 800d1b0:	d508      	bpl.n	800d1c4 <HAL_SDADC_PollForCalibEvent+0x2e>
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 800d1b2:	68da      	ldr	r2, [r3, #12]
 800d1b4:	f042 0201 	orr.w	r2, r2, #1
 800d1b8:	60da      	str	r2, [r3, #12]
    hsdadc->State = HAL_SDADC_STATE_READY;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800d1c0:	2000      	movs	r0, #0
}
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 800d1c4:	1c69      	adds	r1, r5, #1
 800d1c6:	d0f1      	beq.n	800d1ac <HAL_SDADC_PollForCalibEvent+0x16>
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 800d1c8:	f7fd fae4 	bl	800a794 <HAL_GetTick>
 800d1cc:	1b80      	subs	r0, r0, r6
 800d1ce:	42a8      	cmp	r0, r5
 800d1d0:	d801      	bhi.n	800d1d6 <HAL_SDADC_PollForCalibEvent+0x40>
 800d1d2:	2d00      	cmp	r5, #0
 800d1d4:	d1e9      	bne.n	800d1aa <HAL_SDADC_PollForCalibEvent+0x14>
          return HAL_TIMEOUT;
 800d1d6:	2003      	movs	r0, #3
 800d1d8:	e7f3      	b.n	800d1c2 <HAL_SDADC_PollForCalibEvent+0x2c>
    return HAL_ERROR;
 800d1da:	2001      	movs	r0, #1
 800d1dc:	e7f1      	b.n	800d1c2 <HAL_SDADC_PollForCalibEvent+0x2c>
	...

0800d1e0 <HAL_SDADC_InjectedStart_DMA>:
{
 800d1e0:	b538      	push	{r3, r4, r5, lr}
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 800d1e2:	6805      	ldr	r5, [r0, #0]
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	039b      	lsls	r3, r3, #14
{
 800d1e8:	4604      	mov	r4, r0
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 800d1ea:	d42a      	bmi.n	800d242 <HAL_SDADC_InjectedStart_DMA+0x62>
  else if((hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800d1ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d1ee:	b953      	cbnz	r3, 800d206 <HAL_SDADC_InjectedStart_DMA+0x26>
 800d1f0:	69c3      	ldr	r3, [r0, #28]
 800d1f2:	b943      	cbnz	r3, 800d206 <HAL_SDADC_InjectedStart_DMA+0x26>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 800d1f4:	6943      	ldr	r3, [r0, #20]
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800d1f6:	6998      	ldr	r0, [r3, #24]
 800d1f8:	b910      	cbnz	r0, 800d200 <HAL_SDADC_InjectedStart_DMA+0x20>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 800d1fa:	6a20      	ldr	r0, [r4, #32]
 800d1fc:	4290      	cmp	r0, r2
 800d1fe:	d320      	bcc.n	800d242 <HAL_SDADC_InjectedStart_DMA+0x62>
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	2b20      	cmp	r3, #32
 800d204:	d01d      	beq.n	800d242 <HAL_SDADC_InjectedStart_DMA+0x62>
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800d206:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d20a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d117      	bne.n	800d242 <HAL_SDADC_InjectedStart_DMA+0x62>
    hsdadc->hdma->XferCpltCallback = SDADC_DMAInjectedConvCplt;
 800d212:	6960      	ldr	r0, [r4, #20]
 800d214:	4b0e      	ldr	r3, [pc, #56]	; (800d250 <HAL_SDADC_InjectedStart_DMA+0x70>)
 800d216:	6283      	str	r3, [r0, #40]	; 0x28
    hsdadc->hdma->XferErrorCallback = SDADC_DMAError;
 800d218:	4b0e      	ldr	r3, [pc, #56]	; (800d254 <HAL_SDADC_InjectedStart_DMA+0x74>)
 800d21a:	6303      	str	r3, [r0, #48]	; 0x30
    if(hsdadc->hdma->Init.Mode == DMA_CIRCULAR)
 800d21c:	6983      	ldr	r3, [r0, #24]
 800d21e:	2b20      	cmp	r3, #32
      hsdadc->hdma->XferHalfCpltCallback = SDADC_DMAInjectedHalfConvCplt;
 800d220:	bf04      	itt	eq
 800d222:	4b0d      	ldreq	r3, [pc, #52]	; (800d258 <HAL_SDADC_InjectedStart_DMA+0x78>)
 800d224:	62c3      	streq	r3, [r0, #44]	; 0x2c
    hsdadc->Instance->CR1 |= SDADC_CR1_JDMAEN;
 800d226:	682b      	ldr	r3, [r5, #0]
 800d228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d22c:	f845 3b60 	str.w	r3, [r5], #96
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->JDATAR, \
 800d230:	4613      	mov	r3, r2
 800d232:	460a      	mov	r2, r1
 800d234:	4629      	mov	r1, r5
 800d236:	f7fd fee2 	bl	800affe <HAL_DMA_Start_IT>
 800d23a:	b120      	cbz	r0, 800d246 <HAL_SDADC_InjectedStart_DMA+0x66>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800d23c:	23ff      	movs	r3, #255	; 0xff
 800d23e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d242:	2001      	movs	r0, #1
 800d244:	bd38      	pop	{r3, r4, r5, pc}
      status = SDADC_InjConvStart(hsdadc);
 800d246:	4620      	mov	r0, r4
}
 800d248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      status = SDADC_InjConvStart(hsdadc);
 800d24c:	f7ff bdf5 	b.w	800ce3a <SDADC_InjConvStart>
 800d250:	0800d29f 	.word	0x0800d29f
 800d254:	0800d2ab 	.word	0x0800d2ab
 800d258:	0800d293 	.word	0x0800d293

0800d25c <HAL_SDADC_InjectedStop_DMA>:
{
 800d25c:	b510      	push	{r4, lr}
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 800d25e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d262:	3b04      	subs	r3, #4
 800d264:	2b01      	cmp	r3, #1
{
 800d266:	4604      	mov	r4, r0
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 800d268:	d80b      	bhi.n	800d282 <HAL_SDADC_InjectedStop_DMA+0x26>
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_JDMAEN);
 800d26a:	6802      	ldr	r2, [r0, #0]
    if(HAL_DMA_Abort(hsdadc->hdma) != HAL_OK)
 800d26c:	6940      	ldr	r0, [r0, #20]
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_JDMAEN);
 800d26e:	6813      	ldr	r3, [r2, #0]
 800d270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d274:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Abort(hsdadc->hdma) != HAL_OK)
 800d276:	f7fd fefe 	bl	800b076 <HAL_DMA_Abort>
 800d27a:	b120      	cbz	r0, 800d286 <HAL_SDADC_InjectedStop_DMA+0x2a>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800d27c:	23ff      	movs	r3, #255	; 0xff
 800d27e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d282:	2001      	movs	r0, #1
 800d284:	bd10      	pop	{r4, pc}
      status = SDADC_InjConvStop(hsdadc);
 800d286:	4620      	mov	r0, r4
}
 800d288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      status = SDADC_InjConvStop(hsdadc);
 800d28c:	f7ff be04 	b.w	800ce98 <SDADC_InjConvStop>

0800d290 <HAL_SDADC_InjectedConvHalfCpltCallback>:
 800d290:	4770      	bx	lr

0800d292 <SDADC_DMAInjectedHalfConvCplt>:
{
 800d292:	b508      	push	{r3, lr}
  HAL_SDADC_InjectedConvHalfCpltCallback(hsdadc);
 800d294:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d296:	f7ff fffb 	bl	800d290 <HAL_SDADC_InjectedConvHalfCpltCallback>
}
 800d29a:	bd08      	pop	{r3, pc}

0800d29c <HAL_SDADC_InjectedConvCpltCallback>:
 800d29c:	4770      	bx	lr

0800d29e <SDADC_DMAInjectedConvCplt>:
{
 800d29e:	b508      	push	{r3, lr}
  HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 800d2a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d2a2:	f7ff fffb 	bl	800d29c <HAL_SDADC_InjectedConvCpltCallback>
}
 800d2a6:	bd08      	pop	{r3, pc}

0800d2a8 <HAL_SDADC_ErrorCallback>:
 800d2a8:	4770      	bx	lr

0800d2aa <SDADC_DMAError>:
{
 800d2aa:	b508      	push	{r3, lr}
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800d2ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hsdadc->ErrorCode = SDADC_ERROR_DMA;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_SDADC_ErrorCallback(hsdadc);
 800d2b2:	f7ff fff9 	bl	800d2a8 <HAL_SDADC_ErrorCallback>
}
 800d2b6:	bd08      	pop	{r3, pc}

0800d2b8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800d2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2ba:	460e      	mov	r6, r1
 800d2bc:	4617      	mov	r7, r2
 800d2be:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d2c0:	f7fd fa68 	bl	800a794 <HAL_GetTick>
 800d2c4:	4437      	add	r7, r6
 800d2c6:	1a3c      	subs	r4, r7, r0
  tmp_tickstart = HAL_GetTick();
 800d2c8:	f7fd fa64 	bl	800a794 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d2cc:	4b22      	ldr	r3, [pc, #136]	; (800d358 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 800d2d4:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d2d6:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d2d8:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800d2da:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d2dc:	6893      	ldr	r3, [r2, #8]
 800d2de:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800d2e2:	d101      	bne.n	800d2e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
    }
  }

  return HAL_OK;
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	e02d      	b.n	800d344 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 800d2e8:	1c73      	adds	r3, r6, #1
 800d2ea:	d0f7      	beq.n	800d2dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d2ec:	f7fd fa52 	bl	800a794 <HAL_GetTick>
 800d2f0:	1bc0      	subs	r0, r0, r7
 800d2f2:	42a0      	cmp	r0, r4
 800d2f4:	d328      	bcc.n	800d348 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d2f6:	682b      	ldr	r3, [r5, #0]
 800d2f8:	685a      	ldr	r2, [r3, #4]
 800d2fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d2fe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d300:	686a      	ldr	r2, [r5, #4]
 800d302:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800d306:	d10a      	bne.n	800d31e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 800d308:	68aa      	ldr	r2, [r5, #8]
 800d30a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d30e:	d002      	beq.n	800d316 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d310:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d314:	d103      	bne.n	800d31e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d31c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d31e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d320:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d324:	d107      	bne.n	800d336 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d334:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800d336:	2301      	movs	r3, #1
 800d338:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800d33c:	2300      	movs	r3, #0
 800d33e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
 800d342:	2003      	movs	r0, #3
}
 800d344:	b003      	add	sp, #12
 800d346:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 800d348:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800d34a:	2b00      	cmp	r3, #0
      count--;
 800d34c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800d34e:	bf08      	it	eq
 800d350:	2400      	moveq	r4, #0
      count--;
 800d352:	3b01      	subs	r3, #1
 800d354:	e7c0      	b.n	800d2d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 800d356:	bf00      	nop
 800d358:	20000000 	.word	0x20000000

0800d35c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d35c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d360:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d362:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d364:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800d366:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d36a:	4605      	mov	r5, r0
 800d36c:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d36e:	f7fd fa11 	bl	800a794 <HAL_GetTick>
 800d372:	44b8      	add	r8, r7
 800d374:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 800d378:	f7fd fa0c 	bl	800a794 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d37c:	4b29      	ldr	r3, [pc, #164]	; (800d424 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d37e:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	2323      	movs	r3, #35	; 0x23
 800d386:	4353      	muls	r3, r2
 800d388:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 800d38a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d38c:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 800d38e:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 800d390:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800d392:	6893      	ldr	r3, [r2, #8]
 800d394:	4033      	ands	r3, r6
 800d396:	d101      	bne.n	800d39c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
    }
  }

  return HAL_OK;
 800d398:	4618      	mov	r0, r3
 800d39a:	e038      	b.n	800d40e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d39c:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg8 = *ptmpreg8;
 800d3a0:	bf01      	itttt	eq
 800d3a2:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 800d3a6:	b2db      	uxtbeq	r3, r3
 800d3a8:	f88d 3003 	strbeq.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800d3ac:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 800d3b0:	1c7b      	adds	r3, r7, #1
 800d3b2:	d0ee      	beq.n	800d392 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d3b4:	f7fd f9ee 	bl	800a794 <HAL_GetTick>
 800d3b8:	eba0 0008 	sub.w	r0, r0, r8
 800d3bc:	42a0      	cmp	r0, r4
 800d3be:	d329      	bcc.n	800d414 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	685a      	ldr	r2, [r3, #4]
 800d3c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d3c8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3ca:	686a      	ldr	r2, [r5, #4]
 800d3cc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800d3d0:	d10a      	bne.n	800d3e8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
 800d3d2:	68aa      	ldr	r2, [r5, #8]
 800d3d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d3d8:	d002      	beq.n	800d3e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d3da:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d3de:	d103      	bne.n	800d3e8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
          __HAL_SPI_DISABLE(hspi);
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3e6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d3e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d3ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d3ee:	d107      	bne.n	800d400 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          SPI_RESET_CRC(hspi);
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3fe:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800d400:	2301      	movs	r3, #1
 800d402:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800d406:	2300      	movs	r3, #0
 800d408:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800d40c:	2003      	movs	r0, #3
}
 800d40e:	b003      	add	sp, #12
 800d410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(count == 0U)
 800d414:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800d416:	2b00      	cmp	r3, #0
      count--;
 800d418:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800d41a:	bf08      	it	eq
 800d41c:	2400      	moveq	r4, #0
      count--;
 800d41e:	3b01      	subs	r3, #1
 800d420:	e7b5      	b.n	800d38e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 800d422:	bf00      	nop
 800d424:	20000000 	.word	0x20000000

0800d428 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d428:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d42a:	6842      	ldr	r2, [r0, #4]
 800d42c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800d430:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d432:	4604      	mov	r4, r0
 800d434:	460e      	mov	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d436:	d10b      	bne.n	800d450 <SPI_EndRxTransaction+0x28>
 800d438:	6882      	ldr	r2, [r0, #8]
 800d43a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d43e:	d002      	beq.n	800d446 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d440:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d444:	d104      	bne.n	800d450 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d446:	6820      	ldr	r0, [r4, #0]
 800d448:	6802      	ldr	r2, [r0, #0]
 800d44a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d44e:	6002      	str	r2, [r0, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d450:	461a      	mov	r2, r3
 800d452:	4631      	mov	r1, r6
 800d454:	4620      	mov	r0, r4
 800d456:	9301      	str	r3, [sp, #4]
 800d458:	f7ff ff2e 	bl	800d2b8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800d45c:	9b01      	ldr	r3, [sp, #4]
 800d45e:	4605      	mov	r5, r0
 800d460:	b128      	cbz	r0, 800d46e <SPI_EndRxTransaction+0x46>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d462:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d464:	f043 0320 	orr.w	r3, r3, #32
 800d468:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800d46a:	2503      	movs	r5, #3
 800d46c:	e012      	b.n	800d494 <SPI_EndRxTransaction+0x6c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d46e:	6862      	ldr	r2, [r4, #4]
 800d470:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800d474:	d10e      	bne.n	800d494 <SPI_EndRxTransaction+0x6c>
 800d476:	68a2      	ldr	r2, [r4, #8]
 800d478:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d47c:	d002      	beq.n	800d484 <SPI_EndRxTransaction+0x5c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d47e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d482:	d107      	bne.n	800d494 <SPI_EndRxTransaction+0x6c>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d484:	4632      	mov	r2, r6
 800d486:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d48a:	4620      	mov	r0, r4
 800d48c:	f7ff ff66 	bl	800d35c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800d490:	2800      	cmp	r0, #0
 800d492:	d1e6      	bne.n	800d462 <SPI_EndRxTransaction+0x3a>
}
 800d494:	4628      	mov	r0, r5
 800d496:	b002      	add	sp, #8
 800d498:	bd70      	pop	{r4, r5, r6, pc}

0800d49a <SPI_EndRxTxTransaction>:
{
 800d49a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d49c:	4613      	mov	r3, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d49e:	9201      	str	r2, [sp, #4]
{
 800d4a0:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d4a2:	460a      	mov	r2, r1
 800d4a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800d4a8:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d4aa:	f7ff ff57 	bl	800d35c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800d4ae:	9b01      	ldr	r3, [sp, #4]
 800d4b0:	b128      	cbz	r0, 800d4be <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d4b4:	f043 0320 	orr.w	r3, r3, #32
 800d4b8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800d4ba:	2003      	movs	r0, #3
 800d4bc:	e010      	b.n	800d4e0 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d4be:	461a      	mov	r2, r3
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	9301      	str	r3, [sp, #4]
 800d4c6:	f7ff fef7 	bl	800d2b8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800d4ca:	9b01      	ldr	r3, [sp, #4]
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	d1f0      	bne.n	800d4b2 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d4d0:	462a      	mov	r2, r5
 800d4d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	f7ff ff40 	bl	800d35c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d1e8      	bne.n	800d4b2 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 800d4e0:	b003      	add	sp, #12
 800d4e2:	bd30      	pop	{r4, r5, pc}

0800d4e4 <HAL_SPI_Init>:
{
 800d4e4:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d063      	beq.n	800d5b4 <HAL_SPI_Init+0xd0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d4ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d15c      	bne.n	800d5ac <HAL_SPI_Init+0xc8>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4f2:	6842      	ldr	r2, [r0, #4]
 800d4f4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800d4f8:	d000      	beq.n	800d4fc <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d4fa:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800d500:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d504:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d508:	b923      	cbnz	r3, 800d514 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800d50a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800d50e:	4620      	mov	r0, r4
 800d510:	f7fc fe32 	bl	800a178 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800d514:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d516:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d518:	2302      	movs	r3, #2
 800d51a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800d51e:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d520:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800d524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d528:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d52a:	f04f 0300 	mov.w	r3, #0
 800d52e:	d843      	bhi.n	800d5b8 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d530:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d534:	d000      	beq.n	800d538 <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d536:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d538:	6863      	ldr	r3, [r4, #4]
 800d53a:	68a6      	ldr	r6, [r4, #8]
 800d53c:	69a1      	ldr	r1, [r4, #24]
 800d53e:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 800d542:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800d546:	4333      	orrs	r3, r6
 800d548:	6926      	ldr	r6, [r4, #16]
 800d54a:	f006 0602 	and.w	r6, r6, #2
 800d54e:	4333      	orrs	r3, r6
 800d550:	6966      	ldr	r6, [r4, #20]
 800d552:	f006 0601 	and.w	r6, r6, #1
 800d556:	4333      	orrs	r3, r6
 800d558:	f401 7600 	and.w	r6, r1, #512	; 0x200
 800d55c:	4333      	orrs	r3, r6
 800d55e:	69e6      	ldr	r6, [r4, #28]
 800d560:	f006 0638 	and.w	r6, r6, #56	; 0x38
 800d564:	4333      	orrs	r3, r6
 800d566:	6a26      	ldr	r6, [r4, #32]
 800d568:	f006 0680 	and.w	r6, r6, #128	; 0x80
 800d56c:	4333      	orrs	r3, r6
 800d56e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d570:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 800d574:	4333      	orrs	r3, r6
 800d576:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d578:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800d57a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d57c:	f006 0608 	and.w	r6, r6, #8
 800d580:	f003 0310 	and.w	r3, r3, #16
 800d584:	4333      	orrs	r3, r6
 800d586:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 800d58a:	0c09      	lsrs	r1, r1, #16
 800d58c:	4318      	orrs	r0, r3
 800d58e:	f001 0104 	and.w	r1, r1, #4
 800d592:	4301      	orrs	r1, r0
 800d594:	430d      	orrs	r5, r1
 800d596:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d598:	69d3      	ldr	r3, [r2, #28]
 800d59a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d59e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d5a0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800d5a2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d5a4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d5a6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800d5aa:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d5ac:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5b2:	e7a3      	b.n	800d4fc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800d5b4:	2001      	movs	r0, #1
 800d5b6:	e7f8      	b.n	800d5aa <HAL_SPI_Init+0xc6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d5b8:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d5ba:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 800d5be:	e7b9      	b.n	800d534 <HAL_SPI_Init+0x50>

0800d5c0 <HAL_SPI_Transmit>:
{
 800d5c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5c4:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800d5c6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800d5ca:	2b01      	cmp	r3, #1
{
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800d5d2:	f000 80b6 	beq.w	800d742 <HAL_SPI_Transmit+0x182>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800d5dc:	f7fd f8da 	bl	800a794 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d5e0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d5e4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800d5e6:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d5e8:	b2d8      	uxtb	r0, r3
 800d5ea:	f040 80a8 	bne.w	800d73e <HAL_SPI_Transmit+0x17e>
  if ((pData == NULL) || (Size == 0U))
 800d5ee:	2d00      	cmp	r5, #0
 800d5f0:	d063      	beq.n	800d6ba <HAL_SPI_Transmit+0xfa>
 800d5f2:	f1b8 0f00 	cmp.w	r8, #0
 800d5f6:	d060      	beq.n	800d6ba <HAL_SPI_Transmit+0xfa>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5fe:	2300      	movs	r3, #0
 800d600:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800d602:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 800d606:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d60a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d60c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d610:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d614:	68a3      	ldr	r3, [r4, #8]
 800d616:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d618:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d61a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800d61e:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d622:	d107      	bne.n	800d634 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 800d624:	6833      	ldr	r3, [r6, #0]
 800d626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d62a:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800d62c:	6833      	ldr	r3, [r6, #0]
 800d62e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d632:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d634:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d636:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d638:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800d63a:	bf5e      	ittt	pl
 800d63c:	6833      	ldrpl	r3, [r6, #0]
 800d63e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800d642:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d644:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800d648:	6863      	ldr	r3, [r4, #4]
 800d64a:	d93f      	bls.n	800d6cc <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d64c:	b113      	cbz	r3, 800d654 <HAL_SPI_Transmit+0x94>
 800d64e:	f1b8 0f01 	cmp.w	r8, #1
 800d652:	d107      	bne.n	800d664 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d654:	f835 3b02 	ldrh.w	r3, [r5], #2
 800d658:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d65a:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d65c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d65e:	3b01      	subs	r3, #1
 800d660:	b29b      	uxth	r3, r3
 800d662:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d664:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d666:	b29b      	uxth	r3, r3
 800d668:	b9a3      	cbnz	r3, 800d694 <HAL_SPI_Transmit+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d66a:	464a      	mov	r2, r9
 800d66c:	4639      	mov	r1, r7
 800d66e:	4620      	mov	r0, r4
 800d670:	f7ff ff13 	bl	800d49a <SPI_EndRxTxTransaction>
 800d674:	2800      	cmp	r0, #0
 800d676:	d15f      	bne.n	800d738 <HAL_SPI_Transmit+0x178>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d678:	68a3      	ldr	r3, [r4, #8]
 800d67a:	b933      	cbnz	r3, 800d68a <HAL_SPI_Transmit+0xca>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d67c:	9301      	str	r3, [sp, #4]
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	68da      	ldr	r2, [r3, #12]
 800d682:	9201      	str	r2, [sp, #4]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d68a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800d68c:	3800      	subs	r0, #0
 800d68e:	bf18      	it	ne
 800d690:	2001      	movne	r0, #1
error:
 800d692:	e012      	b.n	800d6ba <HAL_SPI_Transmit+0xfa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d694:	6822      	ldr	r2, [r4, #0]
 800d696:	6893      	ldr	r3, [r2, #8]
 800d698:	079d      	lsls	r5, r3, #30
 800d69a:	d505      	bpl.n	800d6a8 <HAL_SPI_Transmit+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d69c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d69e:	f833 1b02 	ldrh.w	r1, [r3], #2
 800d6a2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6a4:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6a6:	e7d9      	b.n	800d65c <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6a8:	f7fd f874 	bl	800a794 <HAL_GetTick>
 800d6ac:	eba0 0009 	sub.w	r0, r0, r9
 800d6b0:	42b8      	cmp	r0, r7
 800d6b2:	d3d7      	bcc.n	800d664 <HAL_SPI_Transmit+0xa4>
 800d6b4:	1c78      	adds	r0, r7, #1
 800d6b6:	d0d5      	beq.n	800d664 <HAL_SPI_Transmit+0xa4>
          errorcode = HAL_TIMEOUT;
 800d6b8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800d6c6:	b003      	add	sp, #12
 800d6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d6cc:	b113      	cbz	r3, 800d6d4 <HAL_SPI_Transmit+0x114>
 800d6ce:	f1b8 0f01 	cmp.w	r8, #1
 800d6d2:	d113      	bne.n	800d6fc <HAL_SPI_Transmit+0x13c>
      if (hspi->TxXferCount > 1U)
 800d6d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d906      	bls.n	800d6ea <HAL_SPI_Transmit+0x12a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d6dc:	f835 3b02 	ldrh.w	r3, [r5], #2
 800d6e0:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6e2:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d6e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d6e6:	3b02      	subs	r3, #2
 800d6e8:	e006      	b.n	800d6f8 <HAL_SPI_Transmit+0x138>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d6ea:	782b      	ldrb	r3, [r5, #0]
 800d6ec:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 800d6ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d6f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d6fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	2b00      	cmp	r3, #0
 800d702:	d0b2      	beq.n	800d66a <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d704:	6822      	ldr	r2, [r4, #0]
 800d706:	6893      	ldr	r3, [r2, #8]
 800d708:	0799      	lsls	r1, r3, #30
 800d70a:	d50c      	bpl.n	800d726 <HAL_SPI_Transmit+0x166>
        if (hspi->TxXferCount > 1U)
 800d70c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800d70e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d710:	b289      	uxth	r1, r1
 800d712:	2901      	cmp	r1, #1
 800d714:	d904      	bls.n	800d720 <HAL_SPI_Transmit+0x160>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d716:	f833 1b02 	ldrh.w	r1, [r3], #2
 800d71a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d71c:	63a3      	str	r3, [r4, #56]	; 0x38
 800d71e:	e7e1      	b.n	800d6e4 <HAL_SPI_Transmit+0x124>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800d724:	e7e3      	b.n	800d6ee <HAL_SPI_Transmit+0x12e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d726:	f7fd f835 	bl	800a794 <HAL_GetTick>
 800d72a:	eba0 0009 	sub.w	r0, r0, r9
 800d72e:	42b8      	cmp	r0, r7
 800d730:	d3e4      	bcc.n	800d6fc <HAL_SPI_Transmit+0x13c>
 800d732:	1c7b      	adds	r3, r7, #1
 800d734:	d0e2      	beq.n	800d6fc <HAL_SPI_Transmit+0x13c>
 800d736:	e7bf      	b.n	800d6b8 <HAL_SPI_Transmit+0xf8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d738:	2320      	movs	r3, #32
 800d73a:	6623      	str	r3, [r4, #96]	; 0x60
 800d73c:	e79c      	b.n	800d678 <HAL_SPI_Transmit+0xb8>
    errorcode = HAL_BUSY;
 800d73e:	2002      	movs	r0, #2
 800d740:	e7bb      	b.n	800d6ba <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800d742:	2002      	movs	r0, #2
 800d744:	e7bf      	b.n	800d6c6 <HAL_SPI_Transmit+0x106>

0800d746 <HAL_SPI_TransmitReceive>:
{
 800d746:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d74a:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800d74c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800d750:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 800d754:	2b01      	cmp	r3, #1
{
 800d756:	4604      	mov	r4, r0
 800d758:	460d      	mov	r5, r1
 800d75a:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800d75c:	f000 8117 	beq.w	800d98e <HAL_SPI_TransmitReceive+0x248>
 800d760:	2301      	movs	r3, #1
 800d762:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800d766:	f7fd f815 	bl	800a794 <HAL_GetTick>
  tmp_state           = hspi->State;
 800d76a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800d76e:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d770:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 800d772:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800d774:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d776:	d00a      	beq.n	800d78e <HAL_SPI_TransmitReceive+0x48>
 800d778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d77c:	f040 8105 	bne.w	800d98a <HAL_SPI_TransmitReceive+0x244>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d780:	68a2      	ldr	r2, [r4, #8]
 800d782:	2a00      	cmp	r2, #0
 800d784:	f040 8101 	bne.w	800d98a <HAL_SPI_TransmitReceive+0x244>
 800d788:	2904      	cmp	r1, #4
 800d78a:	f040 80fe 	bne.w	800d98a <HAL_SPI_TransmitReceive+0x244>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d78e:	2d00      	cmp	r5, #0
 800d790:	d047      	beq.n	800d822 <HAL_SPI_TransmitReceive+0xdc>
 800d792:	2e00      	cmp	r6, #0
 800d794:	d045      	beq.n	800d822 <HAL_SPI_TransmitReceive+0xdc>
 800d796:	2f00      	cmp	r7, #0
 800d798:	d043      	beq.n	800d822 <HAL_SPI_TransmitReceive+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d79a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d79e:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d7a0:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d7a2:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d7a4:	bf1c      	itt	ne
 800d7a6:	2205      	movne	r2, #5
 800d7a8:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7ac:	6826      	ldr	r6, [r4, #0]
  hspi->RxXferSize  = Size;
 800d7ae:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	6622      	str	r2, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d7b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->RxXferCount = Size;
 800d7ba:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800d7be:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d7c0:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d7c4:	63a5      	str	r5, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d7c6:	6872      	ldr	r2, [r6, #4]
  hspi->TxXferSize  = Size;
 800d7c8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d7ca:	d801      	bhi.n	800d7d0 <HAL_SPI_TransmitReceive+0x8a>
 800d7cc:	2f01      	cmp	r7, #1
 800d7ce:	d92a      	bls.n	800d826 <HAL_SPI_TransmitReceive+0xe0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d7d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d7d4:	6072      	str	r2, [r6, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d7d6:	6832      	ldr	r2, [r6, #0]
 800d7d8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800d7da:	bf5e      	ittt	pl
 800d7dc:	6832      	ldrpl	r2, [r6, #0]
 800d7de:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800d7e2:	6032      	strpl	r2, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d7e8:	d958      	bls.n	800d89c <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7ea:	b10b      	cbz	r3, 800d7f0 <HAL_SPI_TransmitReceive+0xaa>
 800d7ec:	2f01      	cmp	r7, #1
 800d7ee:	d107      	bne.n	800d800 <HAL_SPI_TransmitReceive+0xba>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7f0:	f835 3b02 	ldrh.w	r3, [r5], #2
 800d7f4:	60f3      	str	r3, [r6, #12]
      hspi->TxXferCount--;
 800d7f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7f8:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800d800:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d802:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d804:	b29b      	uxth	r3, r3
 800d806:	b98b      	cbnz	r3, 800d82c <HAL_SPI_TransmitReceive+0xe6>
 800d808:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	b96b      	cbnz	r3, 800d82c <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d810:	464a      	mov	r2, r9
 800d812:	4641      	mov	r1, r8
 800d814:	4620      	mov	r0, r4
 800d816:	f7ff fe40 	bl	800d49a <SPI_EndRxTxTransaction>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d036      	beq.n	800d88c <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d81e:	2320      	movs	r3, #32
 800d820:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d822:	2001      	movs	r0, #1
 800d824:	e032      	b.n	800d88c <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d826:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d82a:	e7d3      	b.n	800d7d4 <HAL_SPI_TransmitReceive+0x8e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d82c:	6821      	ldr	r1, [r4, #0]
 800d82e:	688b      	ldr	r3, [r1, #8]
 800d830:	079a      	lsls	r2, r3, #30
 800d832:	d50d      	bpl.n	800d850 <HAL_SPI_TransmitReceive+0x10a>
 800d834:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d836:	b29b      	uxth	r3, r3
 800d838:	b153      	cbz	r3, 800d850 <HAL_SPI_TransmitReceive+0x10a>
 800d83a:	b14d      	cbz	r5, 800d850 <HAL_SPI_TransmitReceive+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d83c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d83e:	f833 2b02 	ldrh.w	r2, [r3], #2
 800d842:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d844:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d846:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d848:	3b01      	subs	r3, #1
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800d84e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d850:	688a      	ldr	r2, [r1, #8]
 800d852:	f012 0201 	ands.w	r2, r2, #1
 800d856:	d00f      	beq.n	800d878 <HAL_SPI_TransmitReceive+0x132>
 800d858:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	b15b      	cbz	r3, 800d878 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d862:	68c9      	ldr	r1, [r1, #12]
 800d864:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d868:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800d86a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d86e:	3b01      	subs	r3, #1
 800d870:	b29b      	uxth	r3, r3
 800d872:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800d876:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d878:	f7fc ff8c 	bl	800a794 <HAL_GetTick>
 800d87c:	eba0 0009 	sub.w	r0, r0, r9
 800d880:	4540      	cmp	r0, r8
 800d882:	d3be      	bcc.n	800d802 <HAL_SPI_TransmitReceive+0xbc>
 800d884:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d888:	d0bb      	beq.n	800d802 <HAL_SPI_TransmitReceive+0xbc>
        errorcode = HAL_TIMEOUT;
 800d88a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800d88c:	2301      	movs	r3, #1
 800d88e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d892:	2300      	movs	r3, #0
 800d894:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800d898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d89c:	b10b      	cbz	r3, 800d8a2 <HAL_SPI_TransmitReceive+0x15c>
 800d89e:	2f01      	cmp	r7, #1
 800d8a0:	d10b      	bne.n	800d8ba <HAL_SPI_TransmitReceive+0x174>
      if (hspi->TxXferCount > 1U)
 800d8a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d953      	bls.n	800d952 <HAL_SPI_TransmitReceive+0x20c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d8aa:	f835 3b02 	ldrh.w	r3, [r5], #2
 800d8ae:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount -= 2U;
 800d8b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8b2:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d8b4:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800d8ba:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d8bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	b923      	cbnz	r3, 800d8cc <HAL_SPI_TransmitReceive+0x186>
 800d8c2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d0a1      	beq.n	800d810 <HAL_SPI_TransmitReceive+0xca>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d8cc:	6822      	ldr	r2, [r4, #0]
 800d8ce:	6893      	ldr	r3, [r2, #8]
 800d8d0:	079b      	lsls	r3, r3, #30
 800d8d2:	d511      	bpl.n	800d8f8 <HAL_SPI_TransmitReceive+0x1b2>
 800d8d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	b173      	cbz	r3, 800d8f8 <HAL_SPI_TransmitReceive+0x1b2>
 800d8da:	b16d      	cbz	r5, 800d8f8 <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 800d8dc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800d8de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d8e0:	b289      	uxth	r1, r1
 800d8e2:	2901      	cmp	r1, #1
 800d8e4:	d93d      	bls.n	800d962 <HAL_SPI_TransmitReceive+0x21c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d8e6:	f833 1b02 	ldrh.w	r1, [r3], #2
 800d8ea:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8ec:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d8ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d8f0:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800d8f6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d8f8:	6822      	ldr	r2, [r4, #0]
 800d8fa:	6893      	ldr	r3, [r2, #8]
 800d8fc:	f013 0301 	ands.w	r3, r3, #1
 800d900:	d01d      	beq.n	800d93e <HAL_SPI_TransmitReceive+0x1f8>
 800d902:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800d906:	b289      	uxth	r1, r1
 800d908:	b1c9      	cbz	r1, 800d93e <HAL_SPI_TransmitReceive+0x1f8>
        if (hspi->RxXferCount > 1U)
 800d90a:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 800d90e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d910:	b280      	uxth	r0, r0
 800d912:	2801      	cmp	r0, #1
 800d914:	d92d      	bls.n	800d972 <HAL_SPI_TransmitReceive+0x22c>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d916:	68d0      	ldr	r0, [r2, #12]
 800d918:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d91c:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800d91e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800d922:	3902      	subs	r1, #2
 800d924:	b289      	uxth	r1, r1
 800d926:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800d92a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800d92e:	b289      	uxth	r1, r1
 800d930:	2901      	cmp	r1, #1
 800d932:	d803      	bhi.n	800d93c <HAL_SPI_TransmitReceive+0x1f6>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d934:	6851      	ldr	r1, [r2, #4]
 800d936:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800d93a:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 800d93c:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d93e:	f7fc ff29 	bl	800a794 <HAL_GetTick>
 800d942:	eba0 0009 	sub.w	r0, r0, r9
 800d946:	4540      	cmp	r0, r8
 800d948:	d3b8      	bcc.n	800d8bc <HAL_SPI_TransmitReceive+0x176>
 800d94a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d94e:	d0b5      	beq.n	800d8bc <HAL_SPI_TransmitReceive+0x176>
 800d950:	e79b      	b.n	800d88a <HAL_SPI_TransmitReceive+0x144>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d952:	782b      	ldrb	r3, [r5, #0]
 800d954:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr++;
 800d956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d958:	3301      	adds	r3, #1
 800d95a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d95c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d95e:	3b01      	subs	r3, #1
 800d960:	e7a9      	b.n	800d8b6 <HAL_SPI_TransmitReceive+0x170>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800d966:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d968:	3301      	adds	r3, #1
 800d96a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800d96c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d96e:	3b01      	subs	r3, #1
 800d970:	e7bf      	b.n	800d8f2 <HAL_SPI_TransmitReceive+0x1ac>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d972:	7b12      	ldrb	r2, [r2, #12]
 800d974:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 800d976:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d978:	3201      	adds	r2, #1
 800d97a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800d97c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800d980:	3a01      	subs	r2, #1
 800d982:	b292      	uxth	r2, r2
 800d984:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 800d988:	e7d8      	b.n	800d93c <HAL_SPI_TransmitReceive+0x1f6>
    errorcode = HAL_BUSY;
 800d98a:	2002      	movs	r0, #2
 800d98c:	e77e      	b.n	800d88c <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 800d98e:	2002      	movs	r0, #2
 800d990:	e782      	b.n	800d898 <HAL_SPI_TransmitReceive+0x152>

0800d992 <HAL_SPI_Receive>:
{
 800d992:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d996:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d998:	6843      	ldr	r3, [r0, #4]
 800d99a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4688      	mov	r8, r1
 800d9a2:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d9a4:	d10c      	bne.n	800d9c0 <HAL_SPI_Receive+0x2e>
 800d9a6:	6883      	ldr	r3, [r0, #8]
 800d9a8:	b953      	cbnz	r3, 800d9c0 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d9aa:	2304      	movs	r3, #4
 800d9ac:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	9500      	str	r5, [sp, #0]
 800d9b4:	460a      	mov	r2, r1
 800d9b6:	f7ff fec6 	bl	800d746 <HAL_SPI_TransmitReceive>
}
 800d9ba:	b002      	add	sp, #8
 800d9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800d9c0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	f000 8092 	beq.w	800daee <HAL_SPI_Receive+0x15c>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800d9d0:	f7fc fee0 	bl	800a794 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d9d4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d9d8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800d9da:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d9dc:	b2d8      	uxtb	r0, r3
 800d9de:	f040 8084 	bne.w	800daea <HAL_SPI_Receive+0x158>
  if ((pData == NULL) || (Size == 0U))
 800d9e2:	f1b8 0f00 	cmp.w	r8, #0
 800d9e6:	d06e      	beq.n	800dac6 <HAL_SPI_Receive+0x134>
 800d9e8:	2e00      	cmp	r6, #0
 800d9ea:	d06c      	beq.n	800dac6 <HAL_SPI_Receive+0x134>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d9ec:	2304      	movs	r3, #4
 800d9ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9f2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9f4:	68e2      	ldr	r2, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d9f6:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800d9fe:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800da02:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800da04:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800da08:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800da0a:	87a3      	strh	r3, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da0c:	684b      	ldr	r3, [r1, #4]
  hspi->RxXferSize  = Size;
 800da0e:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da12:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da16:	bf8c      	ite	hi
 800da18:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da1c:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 800da20:	604b      	str	r3, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da22:	68a3      	ldr	r3, [r4, #8]
 800da24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da28:	d107      	bne.n	800da3a <HAL_SPI_Receive+0xa8>
    __HAL_SPI_DISABLE(hspi);
 800da2a:	680b      	ldr	r3, [r1, #0]
 800da2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da30:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 800da32:	680b      	ldr	r3, [r1, #0]
 800da34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da38:	600b      	str	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da3a:	680b      	ldr	r3, [r1, #0]
 800da3c:	065e      	lsls	r6, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800da3e:	bf5e      	ittt	pl
 800da40:	680b      	ldrpl	r3, [r1, #0]
 800da42:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800da46:	600b      	strpl	r3, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800da48:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800da4c:	d923      	bls.n	800da96 <HAL_SPI_Receive+0x104>
    while (hspi->RxXferCount > 0U)
 800da4e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800da52:	b29b      	uxth	r3, r3
 800da54:	b323      	cbz	r3, 800daa0 <HAL_SPI_Receive+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	689a      	ldr	r2, [r3, #8]
 800da5a:	07d2      	lsls	r2, r2, #31
 800da5c:	d53a      	bpl.n	800dad4 <HAL_SPI_Receive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da5e:	68da      	ldr	r2, [r3, #12]
 800da60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da62:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da66:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800da68:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800da6c:	3b01      	subs	r3, #1
 800da6e:	b29b      	uxth	r3, r3
 800da70:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800da74:	e7eb      	b.n	800da4e <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da76:	6823      	ldr	r3, [r4, #0]
 800da78:	689a      	ldr	r2, [r3, #8]
 800da7a:	07d0      	lsls	r0, r2, #31
 800da7c:	d51b      	bpl.n	800dab6 <HAL_SPI_Receive+0x124>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da80:	7b1b      	ldrb	r3, [r3, #12]
 800da82:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800da84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da86:	3301      	adds	r3, #1
 800da88:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800da8a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800da8e:	3b01      	subs	r3, #1
 800da90:	b29b      	uxth	r3, r3
 800da92:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800da96:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1ea      	bne.n	800da76 <HAL_SPI_Receive+0xe4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800daa0:	463a      	mov	r2, r7
 800daa2:	4629      	mov	r1, r5
 800daa4:	4620      	mov	r0, r4
 800daa6:	f7ff fcbf 	bl	800d428 <SPI_EndRxTransaction>
 800daaa:	b9d8      	cbnz	r0, 800dae4 <HAL_SPI_Receive+0x152>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daac:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800daae:	3800      	subs	r0, #0
 800dab0:	bf18      	it	ne
 800dab2:	2001      	movne	r0, #1
error :
 800dab4:	e007      	b.n	800dac6 <HAL_SPI_Receive+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dab6:	f7fc fe6d 	bl	800a794 <HAL_GetTick>
 800daba:	1bc0      	subs	r0, r0, r7
 800dabc:	42a8      	cmp	r0, r5
 800dabe:	d3ea      	bcc.n	800da96 <HAL_SPI_Receive+0x104>
 800dac0:	1c69      	adds	r1, r5, #1
 800dac2:	d0e8      	beq.n	800da96 <HAL_SPI_Receive+0x104>
          errorcode = HAL_TIMEOUT;
 800dac4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800dac6:	2301      	movs	r3, #1
 800dac8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800dacc:	2300      	movs	r3, #0
 800dace:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800dad2:	e772      	b.n	800d9ba <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dad4:	f7fc fe5e 	bl	800a794 <HAL_GetTick>
 800dad8:	1bc0      	subs	r0, r0, r7
 800dada:	42a8      	cmp	r0, r5
 800dadc:	d3b7      	bcc.n	800da4e <HAL_SPI_Receive+0xbc>
 800dade:	1c6b      	adds	r3, r5, #1
 800dae0:	d0b5      	beq.n	800da4e <HAL_SPI_Receive+0xbc>
 800dae2:	e7ef      	b.n	800dac4 <HAL_SPI_Receive+0x132>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dae4:	2320      	movs	r3, #32
 800dae6:	6623      	str	r3, [r4, #96]	; 0x60
 800dae8:	e7e0      	b.n	800daac <HAL_SPI_Receive+0x11a>
    errorcode = HAL_BUSY;
 800daea:	2002      	movs	r0, #2
 800daec:	e7eb      	b.n	800dac6 <HAL_SPI_Receive+0x134>
  __HAL_LOCK(hspi);
 800daee:	2002      	movs	r0, #2
 800daf0:	e763      	b.n	800d9ba <HAL_SPI_Receive+0x28>
	...

0800daf4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800daf4:	6a03      	ldr	r3, [r0, #32]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800daf6:	680a      	ldr	r2, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800daf8:	f023 0301 	bic.w	r3, r3, #1
 800dafc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800dafe:	6a03      	ldr	r3, [r0, #32]
{
 800db00:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800db02:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800db04:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800db06:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800db0a:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800db0c:	688a      	ldr	r2, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800db0e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800db12:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800db14:	4a12      	ldr	r2, [pc, #72]	; (800db60 <TIM_OC1_SetConfig+0x6c>)
 800db16:	4290      	cmp	r0, r2
 800db18:	d006      	beq.n	800db28 <TIM_OC1_SetConfig+0x34>
 800db1a:	4e12      	ldr	r6, [pc, #72]	; (800db64 <TIM_OC1_SetConfig+0x70>)
 800db1c:	42b0      	cmp	r0, r6
 800db1e:	d003      	beq.n	800db28 <TIM_OC1_SetConfig+0x34>
 800db20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800db24:	42b0      	cmp	r0, r6
 800db26:	d114      	bne.n	800db52 <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800db28:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800db2a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800db2e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db30:	4290      	cmp	r0, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 800db32:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db36:	d006      	beq.n	800db46 <TIM_OC1_SetConfig+0x52>
 800db38:	4a0a      	ldr	r2, [pc, #40]	; (800db64 <TIM_OC1_SetConfig+0x70>)
 800db3a:	4290      	cmp	r0, r2
 800db3c:	d003      	beq.n	800db46 <TIM_OC1_SetConfig+0x52>
 800db3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db42:	4290      	cmp	r0, r2
 800db44:	d105      	bne.n	800db52 <TIM_OC1_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800db46:	e9d1 2605 	ldrd	r2, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800db4a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800db4e:	4332      	orrs	r2, r6
 800db50:	4315      	orrs	r5, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800db52:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800db54:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800db56:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800db58:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db5a:	6203      	str	r3, [r0, #32]
}
 800db5c:	bd70      	pop	{r4, r5, r6, pc}
 800db5e:	bf00      	nop
 800db60:	40014000 	.word	0x40014000
 800db64:	40014400 	.word	0x40014400

0800db68 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800db68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d128      	bne.n	800dbc2 <HAL_TIM_Base_Start+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800db70:	2302      	movs	r3, #2
 800db72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db76:	6803      	ldr	r3, [r0, #0]
 800db78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db7c:	d016      	beq.n	800dbac <HAL_TIM_Base_Start+0x44>
 800db7e:	4a12      	ldr	r2, [pc, #72]	; (800dbc8 <HAL_TIM_Base_Start+0x60>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d013      	beq.n	800dbac <HAL_TIM_Base_Start+0x44>
 800db84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db88:	4293      	cmp	r3, r2
 800db8a:	d00f      	beq.n	800dbac <HAL_TIM_Base_Start+0x44>
 800db8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db90:	4293      	cmp	r3, r2
 800db92:	d00b      	beq.n	800dbac <HAL_TIM_Base_Start+0x44>
 800db94:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800db98:	4293      	cmp	r3, r2
 800db9a:	d007      	beq.n	800dbac <HAL_TIM_Base_Start+0x44>
 800db9c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d003      	beq.n	800dbac <HAL_TIM_Base_Start+0x44>
 800dba4:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d104      	bne.n	800dbb6 <HAL_TIM_Base_Start+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbac:	689a      	ldr	r2, [r3, #8]
 800dbae:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbb2:	2a06      	cmp	r2, #6
 800dbb4:	d003      	beq.n	800dbbe <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	f042 0201 	orr.w	r2, r2, #1
 800dbbc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800dbbe:	2000      	movs	r0, #0
}
 800dbc0:	4770      	bx	lr
    return HAL_ERROR;
 800dbc2:	2001      	movs	r0, #1
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop
 800dbc8:	40000400 	.word	0x40000400

0800dbcc <HAL_TIM_OC_MspInit>:
 800dbcc:	4770      	bx	lr

0800dbce <HAL_TIM_PWM_MspInit>:
 800dbce:	4770      	bx	lr

0800dbd0 <HAL_TIM_IC_MspInit>:
 800dbd0:	4770      	bx	lr

0800dbd2 <HAL_TIM_Encoder_Start>:
{
 800dbd2:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dbd4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800dbd8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800dbdc:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dbe0:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dbe4:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800dbe6:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800dbe8:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dbea:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 800dbec:	b9c9      	cbnz	r1, 800dc22 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dbee:	2a01      	cmp	r2, #1
 800dbf0:	d146      	bne.n	800dc80 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800dbf2:	2d01      	cmp	r5, #1
 800dbf4:	d146      	bne.n	800dc84 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbf6:	2302      	movs	r3, #2
 800dbf8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbfc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dc00:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc02:	6a1a      	ldr	r2, [r3, #32]
 800dc04:	f022 0201 	bic.w	r2, r2, #1
 800dc08:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc0a:	6a1a      	ldr	r2, [r3, #32]
 800dc0c:	f042 0201 	orr.w	r2, r2, #1
 800dc10:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800dc12:	6802      	ldr	r2, [r0, #0]
 800dc14:	6813      	ldr	r3, [r2, #0]
 800dc16:	f043 0301 	orr.w	r3, r3, #1
 800dc1a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 800dc22:	2904      	cmp	r1, #4
 800dc24:	d111      	bne.n	800dc4a <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d12a      	bne.n	800dc80 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc2a:	2c01      	cmp	r4, #1
 800dc2c:	d1f7      	bne.n	800dc1e <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc2e:	2302      	movs	r3, #2
 800dc30:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc34:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dc38:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800dc3a:	6a1a      	ldr	r2, [r3, #32]
 800dc3c:	f022 0210 	bic.w	r2, r2, #16
 800dc40:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc42:	6a1a      	ldr	r2, [r3, #32]
 800dc44:	f042 0210 	orr.w	r2, r2, #16
 800dc48:	e7e2      	b.n	800dc10 <HAL_TIM_Encoder_Start+0x3e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc4a:	2a01      	cmp	r2, #1
 800dc4c:	d118      	bne.n	800dc80 <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d118      	bne.n	800dc84 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc52:	2d01      	cmp	r5, #1
 800dc54:	d1e3      	bne.n	800dc1e <HAL_TIM_Encoder_Start+0x4c>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc56:	2c01      	cmp	r4, #1
 800dc58:	d1e1      	bne.n	800dc1e <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc5a:	2302      	movs	r3, #2
 800dc5c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc60:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc64:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc68:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  switch (Channel)
 800dc6c:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800dc6e:	6a1a      	ldr	r2, [r3, #32]
 800dc70:	f022 0201 	bic.w	r2, r2, #1
 800dc74:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc76:	6a1a      	ldr	r2, [r3, #32]
 800dc78:	f042 0201 	orr.w	r2, r2, #1
 800dc7c:	621a      	str	r2, [r3, #32]
 800dc7e:	e7dc      	b.n	800dc3a <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 800dc80:	2301      	movs	r3, #1
 800dc82:	e7cc      	b.n	800dc1e <HAL_TIM_Encoder_Start+0x4c>
 800dc84:	4613      	mov	r3, r2
 800dc86:	e7ca      	b.n	800dc1e <HAL_TIM_Encoder_Start+0x4c>

0800dc88 <HAL_TIM_IC_CaptureCallback>:
 800dc88:	4770      	bx	lr

0800dc8a <TIM_DMACaptureCplt>:
{
 800dc8a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dc8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dc90:	4282      	cmp	r2, r0
 800dc92:	d10d      	bne.n	800dcb0 <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc94:	2301      	movs	r3, #1
 800dc96:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800dc98:	6992      	ldr	r2, [r2, #24]
 800dc9a:	b91a      	cbnz	r2, 800dca4 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dc9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dca0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800dca4:	4620      	mov	r0, r4
 800dca6:	f7ff ffef 	bl	800dc88 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	7723      	strb	r3, [r4, #28]
}
 800dcae:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dcb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dcb2:	4283      	cmp	r3, r0
 800dcb4:	d10a      	bne.n	800dccc <TIM_DMACaptureCplt+0x42>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800dcba:	699b      	ldr	r3, [r3, #24]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1f1      	bne.n	800dca4 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dcc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcca:	e7eb      	b.n	800dca4 <TIM_DMACaptureCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dcce:	4283      	cmp	r3, r0
 800dcd0:	d10a      	bne.n	800dce8 <TIM_DMACaptureCplt+0x5e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dcd2:	2204      	movs	r2, #4
 800dcd4:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1e3      	bne.n	800dca4 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800dcdc:	2301      	movs	r3, #1
 800dcde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800dce2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800dce6:	e7dd      	b.n	800dca4 <TIM_DMACaptureCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800dce8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dcea:	4283      	cmp	r3, r0
 800dcec:	d1da      	bne.n	800dca4 <TIM_DMACaptureCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dcee:	2208      	movs	r2, #8
 800dcf0:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800dcf2:	699b      	ldr	r3, [r3, #24]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d1d5      	bne.n	800dca4 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800dcfe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800dd02:	e7cf      	b.n	800dca4 <TIM_DMACaptureCplt+0x1a>

0800dd04 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800dd04:	4770      	bx	lr

0800dd06 <TIM_DMACaptureHalfCplt>:
{
 800dd06:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd08:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dd0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd0c:	4283      	cmp	r3, r0
 800dd0e:	d107      	bne.n	800dd20 <TIM_DMACaptureHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd10:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd12:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800dd14:	4620      	mov	r0, r4
 800dd16:	f7ff fff5 	bl	800dd04 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	7723      	strb	r3, [r4, #28]
}
 800dd1e:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dd20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd22:	4283      	cmp	r3, r0
 800dd24:	d101      	bne.n	800dd2a <TIM_DMACaptureHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd26:	2302      	movs	r3, #2
 800dd28:	e7f3      	b.n	800dd12 <TIM_DMACaptureHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dd2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd2c:	4283      	cmp	r3, r0
 800dd2e:	d101      	bne.n	800dd34 <TIM_DMACaptureHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd30:	2304      	movs	r3, #4
 800dd32:	e7ee      	b.n	800dd12 <TIM_DMACaptureHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800dd34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dd36:	4283      	cmp	r3, r0
 800dd38:	d1ec      	bne.n	800dd14 <TIM_DMACaptureHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd3a:	2308      	movs	r3, #8
 800dd3c:	e7e9      	b.n	800dd12 <TIM_DMACaptureHalfCplt+0xc>

0800dd3e <HAL_TIM_ErrorCallback>:
 800dd3e:	4770      	bx	lr

0800dd40 <TIM_DMAError>:
{
 800dd40:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd42:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dd44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd46:	4283      	cmp	r3, r0
 800dd48:	d109      	bne.n	800dd5e <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dd4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800dd52:	4620      	mov	r0, r4
 800dd54:	f7ff fff3 	bl	800dd3e <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	7723      	strb	r3, [r4, #28]
}
 800dd5c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dd5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd60:	4283      	cmp	r3, r0
 800dd62:	d105      	bne.n	800dd70 <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd64:	2302      	movs	r3, #2
 800dd66:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dd68:	2301      	movs	r3, #1
 800dd6a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800dd6e:	e7f0      	b.n	800dd52 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dd70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd72:	4283      	cmp	r3, r0
 800dd74:	f04f 0301 	mov.w	r3, #1
 800dd78:	d104      	bne.n	800dd84 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd7a:	2204      	movs	r2, #4
 800dd7c:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800dd7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dd82:	e7e6      	b.n	800dd52 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800dd84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dd86:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd88:	bf03      	ittte	eq
 800dd8a:	2208      	moveq	r2, #8
 800dd8c:	7722      	strbeq	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800dd8e:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->State = HAL_TIM_STATE_READY;
 800dd92:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 800dd96:	e7dc      	b.n	800dd52 <TIM_DMAError+0x12>

0800dd98 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800dd9c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd9e:	d00e      	beq.n	800ddbe <TIM_Base_SetConfig+0x26>
 800dda0:	4a2c      	ldr	r2, [pc, #176]	; (800de54 <TIM_Base_SetConfig+0xbc>)
 800dda2:	4290      	cmp	r0, r2
 800dda4:	d00b      	beq.n	800ddbe <TIM_Base_SetConfig+0x26>
 800dda6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ddaa:	4290      	cmp	r0, r2
 800ddac:	d007      	beq.n	800ddbe <TIM_Base_SetConfig+0x26>
 800ddae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ddb2:	4290      	cmp	r0, r2
 800ddb4:	d003      	beq.n	800ddbe <TIM_Base_SetConfig+0x26>
 800ddb6:	f502 32a8 	add.w	r2, r2, #86016	; 0x15000
 800ddba:	4290      	cmp	r0, r2
 800ddbc:	d112      	bne.n	800dde4 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 800ddbe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ddc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 800ddc8:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddcc:	d025      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800ddce:	4a21      	ldr	r2, [pc, #132]	; (800de54 <TIM_Base_SetConfig+0xbc>)
 800ddd0:	4290      	cmp	r0, r2
 800ddd2:	d022      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800ddd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ddd8:	4290      	cmp	r0, r2
 800ddda:	d01e      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800dddc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dde0:	4290      	cmp	r0, r2
 800dde2:	d01a      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800dde4:	4a1c      	ldr	r2, [pc, #112]	; (800de58 <TIM_Base_SetConfig+0xc0>)
 800dde6:	4290      	cmp	r0, r2
 800dde8:	d017      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800ddea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ddee:	4290      	cmp	r0, r2
 800ddf0:	d013      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800ddf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ddf6:	4290      	cmp	r0, r2
 800ddf8:	d00f      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800ddfa:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800ddfe:	4290      	cmp	r0, r2
 800de00:	d00b      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800de02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800de06:	4290      	cmp	r0, r2
 800de08:	d007      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800de0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800de0e:	4290      	cmp	r0, r2
 800de10:	d003      	beq.n	800de1a <TIM_Base_SetConfig+0x82>
 800de12:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800de16:	4290      	cmp	r0, r2
 800de18:	d103      	bne.n	800de22 <TIM_Base_SetConfig+0x8a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de1a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800de1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de22:	694a      	ldr	r2, [r1, #20]
 800de24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800de2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de2c:	688b      	ldr	r3, [r1, #8]
 800de2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800de30:	680b      	ldr	r3, [r1, #0]
 800de32:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de34:	4b09      	ldr	r3, [pc, #36]	; (800de5c <TIM_Base_SetConfig+0xc4>)
 800de36:	4298      	cmp	r0, r3
 800de38:	d007      	beq.n	800de4a <TIM_Base_SetConfig+0xb2>
 800de3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de3e:	4298      	cmp	r0, r3
 800de40:	d003      	beq.n	800de4a <TIM_Base_SetConfig+0xb2>
 800de42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de46:	4298      	cmp	r0, r3
 800de48:	d101      	bne.n	800de4e <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
 800de4a:	690b      	ldr	r3, [r1, #16]
 800de4c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800de4e:	2301      	movs	r3, #1
 800de50:	6143      	str	r3, [r0, #20]
}
 800de52:	4770      	bx	lr
 800de54:	40000400 	.word	0x40000400
 800de58:	40001800 	.word	0x40001800
 800de5c:	40014000 	.word	0x40014000

0800de60 <HAL_TIM_Base_Init>:
{
 800de60:	b510      	push	{r4, lr}
  if (htim == NULL)
 800de62:	4604      	mov	r4, r0
 800de64:	b330      	cbz	r0, 800deb4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800de66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800de6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800de6e:	b91b      	cbnz	r3, 800de78 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800de70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800de74:	f7fc f9de 	bl	800a234 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800de78:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de7a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800de7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de80:	1d21      	adds	r1, r4, #4
 800de82:	f7ff ff89 	bl	800dd98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de86:	2301      	movs	r3, #1
 800de88:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800de8c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800de92:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800de96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800de9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800dea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dea6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800deaa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800deae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800deb2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800deb4:	2001      	movs	r0, #1
 800deb6:	e7fc      	b.n	800deb2 <HAL_TIM_Base_Init+0x52>

0800deb8 <HAL_TIM_OC_Init>:
{
 800deb8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800deba:	4604      	mov	r4, r0
 800debc:	b330      	cbz	r0, 800df0c <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800debe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800dec2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dec6:	b91b      	cbnz	r3, 800ded0 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800dec8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800decc:	f7ff fe7e 	bl	800dbcc <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800ded0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ded2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ded4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ded8:	1d21      	adds	r1, r4, #4
 800deda:	f7ff ff5d 	bl	800dd98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dede:	2301      	movs	r3, #1
 800dee0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800dee4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dee6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800deea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800deee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800def2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800def6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800defa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800defe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800df02:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800df06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800df0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800df0c:	2001      	movs	r0, #1
 800df0e:	e7fc      	b.n	800df0a <HAL_TIM_OC_Init+0x52>

0800df10 <HAL_TIM_PWM_Init>:
{
 800df10:	b510      	push	{r4, lr}
  if (htim == NULL)
 800df12:	4604      	mov	r4, r0
 800df14:	b330      	cbz	r0, 800df64 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800df16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800df1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800df1e:	b91b      	cbnz	r3, 800df28 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800df20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800df24:	f7ff fe53 	bl	800dbce <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800df28:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df2a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800df2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df30:	1d21      	adds	r1, r4, #4
 800df32:	f7ff ff31 	bl	800dd98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df36:	2301      	movs	r3, #1
 800df38:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800df3c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800df42:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800df46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800df4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800df52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df56:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800df5a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800df5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800df62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800df64:	2001      	movs	r0, #1
 800df66:	e7fc      	b.n	800df62 <HAL_TIM_PWM_Init+0x52>

0800df68 <HAL_TIM_IC_Init>:
{
 800df68:	b510      	push	{r4, lr}
  if (htim == NULL)
 800df6a:	4604      	mov	r4, r0
 800df6c:	b330      	cbz	r0, 800dfbc <HAL_TIM_IC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800df6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800df72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800df76:	b91b      	cbnz	r3, 800df80 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800df78:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800df7c:	f7ff fe28 	bl	800dbd0 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800df80:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df82:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800df84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df88:	1d21      	adds	r1, r4, #4
 800df8a:	f7ff ff05 	bl	800dd98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df8e:	2301      	movs	r3, #1
 800df90:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800df94:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800df9a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800df9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dfa2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfa6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800dfaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800dfb2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800dfb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800dfba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800dfbc:	2001      	movs	r0, #1
 800dfbe:	e7fc      	b.n	800dfba <HAL_TIM_IC_Init+0x52>

0800dfc0 <HAL_TIM_Encoder_Init>:
{
 800dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc2:	460d      	mov	r5, r1
  if (htim == NULL)
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d04d      	beq.n	800e066 <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 800dfca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800dfce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dfd2:	b91b      	cbnz	r3, 800dfdc <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800dfd4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800dfd8:	f7fc fa08 	bl	800a3ec <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800dfdc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800dfde:	2302      	movs	r3, #2
 800dfe0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800dfe4:	f851 0b04 	ldr.w	r0, [r1], #4
 800dfe8:	6883      	ldr	r3, [r0, #8]
 800dfea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dfee:	f023 0307 	bic.w	r3, r3, #7
 800dff2:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dff4:	f7ff fed0 	bl	800dd98 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800dff8:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800dffa:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 800dffc:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800dffe:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e000:	68a9      	ldr	r1, [r5, #8]
  tmpccer = htim->Instance->CCER;
 800e002:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800e004:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e006:	69ab      	ldr	r3, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e008:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e00c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e010:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800e014:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e016:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e01a:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e01c:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e024:	68e9      	ldr	r1, [r5, #12]
 800e026:	430b      	orrs	r3, r1
 800e028:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e02a:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e02e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800e032:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e034:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e036:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e03a:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 800e03c:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e03e:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800e042:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e044:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e046:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800e048:	6207      	str	r7, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e04a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800e04e:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e050:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e054:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e058:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e05c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800e060:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800e066:	2001      	movs	r0, #1
 800e068:	e7fc      	b.n	800e064 <HAL_TIM_Encoder_Init+0xa4>
	...

0800e06c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e06c:	6a03      	ldr	r3, [r0, #32]
 800e06e:	f023 0310 	bic.w	r3, r3, #16
 800e072:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800e074:	6a03      	ldr	r3, [r0, #32]
{
 800e076:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800e078:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800e07a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e07c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e07e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e082:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e086:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800e088:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e08c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e090:	4d0b      	ldr	r5, [pc, #44]	; (800e0c0 <TIM_OC2_SetConfig+0x54>)
 800e092:	42a8      	cmp	r0, r5
 800e094:	d007      	beq.n	800e0a6 <TIM_OC2_SetConfig+0x3a>
 800e096:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e09a:	42a8      	cmp	r0, r5
 800e09c:	d003      	beq.n	800e0a6 <TIM_OC2_SetConfig+0x3a>
 800e09e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e0a2:	42a8      	cmp	r0, r5
 800e0a4:	d106      	bne.n	800e0b4 <TIM_OC2_SetConfig+0x48>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e0a6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e0aa:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e0ae:	4335      	orrs	r5, r6
 800e0b0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800e0b4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800e0b6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800e0b8:	684a      	ldr	r2, [r1, #4]
 800e0ba:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800e0bc:	6203      	str	r3, [r0, #32]
}
 800e0be:	bd70      	pop	{r4, r5, r6, pc}
 800e0c0:	40014000 	.word	0x40014000

0800e0c4 <HAL_TIM_OC_ConfigChannel>:
{
 800e0c4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800e0c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e0ca:	2b01      	cmp	r3, #1
{
 800e0cc:	4605      	mov	r5, r0
 800e0ce:	460e      	mov	r6, r1
 800e0d0:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 800e0d2:	d046      	beq.n	800e162 <HAL_TIM_OC_ConfigChannel+0x9e>
 800e0d4:	2201      	movs	r2, #1
  switch (Channel)
 800e0d6:	2c08      	cmp	r4, #8
  __HAL_LOCK(htim);
 800e0d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 800e0dc:	d02a      	beq.n	800e134 <HAL_TIM_OC_ConfigChannel+0x70>
 800e0de:	d807      	bhi.n	800e0f0 <HAL_TIM_OC_ConfigChannel+0x2c>
 800e0e0:	b1fc      	cbz	r4, 800e122 <HAL_TIM_OC_ConfigChannel+0x5e>
 800e0e2:	2c04      	cmp	r4, #4
 800e0e4:	d022      	beq.n	800e12c <HAL_TIM_OC_ConfigChannel+0x68>
  __HAL_UNLOCK(htim);
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800e0f0:	2c0c      	cmp	r4, #12
 800e0f2:	d1f8      	bne.n	800e0e6 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e0f4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e0f6:	6834      	ldr	r4, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0f8:	6a1a      	ldr	r2, [r3, #32]
 800e0fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e0fe:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800e100:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800e102:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800e104:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e106:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e10a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e10e:	68b4      	ldr	r4, [r6, #8]
  TIMx->CR2 = tmpcr2;
 800e110:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800e112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  TIMx->CCMR2 = tmpccmrx;
 800e116:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800e118:	6871      	ldr	r1, [r6, #4]
 800e11a:	6419      	str	r1, [r3, #64]	; 0x40
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e11c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 800e120:	e01d      	b.n	800e15e <HAL_TIM_OC_ConfigChannel+0x9a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e122:	6800      	ldr	r0, [r0, #0]
 800e124:	f7ff fce6 	bl	800daf4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800e128:	2200      	movs	r2, #0
}
 800e12a:	e7dc      	b.n	800e0e6 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e12c:	6800      	ldr	r0, [r0, #0]
 800e12e:	f7ff ff9d 	bl	800e06c <TIM_OC2_SetConfig>
      break;
 800e132:	e7f9      	b.n	800e128 <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e134:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800e136:	6834      	ldr	r4, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e138:	6a1a      	ldr	r2, [r3, #32]
 800e13a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e13e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800e140:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800e142:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800e144:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e146:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800e14a:	4321      	orrs	r1, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e14c:	68b4      	ldr	r4, [r6, #8]
  TIMx->CR2 = tmpcr2;
 800e14e:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 800e150:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 800e154:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800e156:	6871      	ldr	r1, [r6, #4]
 800e158:	63d9      	str	r1, [r3, #60]	; 0x3c
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e15a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  TIMx->CCER = tmpccer;
 800e15e:	621a      	str	r2, [r3, #32]
 800e160:	e7e2      	b.n	800e128 <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_LOCK(htim);
 800e162:	2202      	movs	r2, #2
 800e164:	e7c2      	b.n	800e0ec <HAL_TIM_OC_ConfigChannel+0x28>

0800e166 <HAL_TIM_PWM_ConfigChannel>:
{
 800e166:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800e168:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e16c:	2b01      	cmp	r3, #1
{
 800e16e:	4606      	mov	r6, r0
 800e170:	460d      	mov	r5, r1
 800e172:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 800e174:	d079      	beq.n	800e26a <HAL_TIM_PWM_ConfigChannel+0x104>
 800e176:	2201      	movs	r2, #1
  switch (Channel)
 800e178:	2c08      	cmp	r4, #8
  __HAL_LOCK(htim);
 800e17a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 800e17e:	d051      	beq.n	800e224 <HAL_TIM_PWM_ConfigChannel+0xbe>
 800e180:	d807      	bhi.n	800e192 <HAL_TIM_PWM_ConfigChannel+0x2c>
 800e182:	b364      	cbz	r4, 800e1de <HAL_TIM_PWM_ConfigChannel+0x78>
 800e184:	2c04      	cmp	r4, #4
 800e186:	d03c      	beq.n	800e202 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 800e188:	2300      	movs	r3, #0
 800e18a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
}
 800e18e:	4610      	mov	r0, r2
 800e190:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800e192:	2c0c      	cmp	r4, #12
 800e194:	d1f8      	bne.n	800e188 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e196:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e198:	682c      	ldr	r4, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e19a:	6a1a      	ldr	r2, [r3, #32]
 800e19c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1a0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800e1a2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800e1a4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800e1a6:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e1a8:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1ac:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e1b0:	68ac      	ldr	r4, [r5, #8]
  TIMx->CR2 = tmpcr2;
 800e1b2:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800e1b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  TIMx->CCMR2 = tmpccmrx;
 800e1b8:	61d9      	str	r1, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e1ba:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 800e1be:	6869      	ldr	r1, [r5, #4]
 800e1c0:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800e1c2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e1c4:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e1c6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e1c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e1cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e1ce:	69da      	ldr	r2, [r3, #28]
 800e1d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e1d6:	69da      	ldr	r2, [r3, #28]
 800e1d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e1dc:	e043      	b.n	800e266 <HAL_TIM_PWM_ConfigChannel+0x100>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e1de:	6800      	ldr	r0, [r0, #0]
 800e1e0:	f7ff fc88 	bl	800daf4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e1e4:	6833      	ldr	r3, [r6, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e1e6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e1e8:	699a      	ldr	r2, [r3, #24]
 800e1ea:	f042 0208 	orr.w	r2, r2, #8
 800e1ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e1f0:	699a      	ldr	r2, [r3, #24]
 800e1f2:	f022 0204 	bic.w	r2, r2, #4
 800e1f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e1f8:	699a      	ldr	r2, [r3, #24]
 800e1fa:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e1fc:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800e1fe:	2200      	movs	r2, #0
      break;
 800e200:	e7c2      	b.n	800e188 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e202:	6800      	ldr	r0, [r0, #0]
 800e204:	f7ff ff32 	bl	800e06c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e208:	6833      	ldr	r3, [r6, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e20a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e20c:	699a      	ldr	r2, [r3, #24]
 800e20e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e214:	699a      	ldr	r2, [r3, #24]
 800e216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e21a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e21c:	699a      	ldr	r2, [r3, #24]
 800e21e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e222:	e7eb      	b.n	800e1fc <HAL_TIM_PWM_ConfigChannel+0x96>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e224:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800e226:	682c      	ldr	r4, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e228:	6a1a      	ldr	r2, [r3, #32]
 800e22a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e22e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800e230:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800e232:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800e234:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e236:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800e23a:	4321      	orrs	r1, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e23c:	68ac      	ldr	r4, [r5, #8]
  TIMx->CR2 = tmpcr2;
 800e23e:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 800e240:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 800e244:	61d9      	str	r1, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e246:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 800e24a:	6869      	ldr	r1, [r5, #4]
 800e24c:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800e24e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e250:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e252:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e254:	f042 0208 	orr.w	r2, r2, #8
 800e258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e25a:	69da      	ldr	r2, [r3, #28]
 800e25c:	f022 0204 	bic.w	r2, r2, #4
 800e260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e262:	69da      	ldr	r2, [r3, #28]
 800e264:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e266:	61da      	str	r2, [r3, #28]
 800e268:	e7c9      	b.n	800e1fe <HAL_TIM_PWM_ConfigChannel+0x98>
  __HAL_LOCK(htim);
 800e26a:	2202      	movs	r2, #2
 800e26c:	e78f      	b.n	800e18e <HAL_TIM_PWM_ConfigChannel+0x28>
	...

0800e270 <TIM_TI1_SetConfig>:
{
 800e270:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e272:	6a04      	ldr	r4, [r0, #32]
 800e274:	f024 0401 	bic.w	r4, r4, #1
 800e278:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e27a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpccmr1 = TIMx->CCMR1;
 800e27e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800e280:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e282:	d025      	beq.n	800e2d0 <TIM_TI1_SetConfig+0x60>
 800e284:	4e14      	ldr	r6, [pc, #80]	; (800e2d8 <TIM_TI1_SetConfig+0x68>)
 800e286:	42b0      	cmp	r0, r6
 800e288:	d022      	beq.n	800e2d0 <TIM_TI1_SetConfig+0x60>
 800e28a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800e28e:	42b0      	cmp	r0, r6
 800e290:	d01e      	beq.n	800e2d0 <TIM_TI1_SetConfig+0x60>
 800e292:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800e296:	42b0      	cmp	r0, r6
 800e298:	d01a      	beq.n	800e2d0 <TIM_TI1_SetConfig+0x60>
 800e29a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800e29e:	42b0      	cmp	r0, r6
 800e2a0:	d016      	beq.n	800e2d0 <TIM_TI1_SetConfig+0x60>
 800e2a2:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800e2a6:	42b0      	cmp	r0, r6
 800e2a8:	d012      	beq.n	800e2d0 <TIM_TI1_SetConfig+0x60>
 800e2aa:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 800e2ae:	42b0      	cmp	r0, r6
 800e2b0:	d00e      	beq.n	800e2d0 <TIM_TI1_SetConfig+0x60>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e2b2:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e2b6:	011b      	lsls	r3, r3, #4
 800e2b8:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e2ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e2be:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e2c0:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e2c4:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e2c8:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 800e2ca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800e2cc:	6201      	str	r1, [r0, #32]
}
 800e2ce:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e2d0:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800e2d4:	4322      	orrs	r2, r4
 800e2d6:	e7ee      	b.n	800e2b6 <TIM_TI1_SetConfig+0x46>
 800e2d8:	40000400 	.word	0x40000400

0800e2dc <HAL_TIM_IC_ConfigChannel>:
{
 800e2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800e2de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e2e2:	2b01      	cmp	r3, #1
{
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 800e2e8:	f000 8089 	beq.w	800e3fe <HAL_TIM_IC_ConfigChannel+0x122>
 800e2ec:	2001      	movs	r0, #1
 800e2ee:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800e2f2:	b99a      	cbnz	r2, 800e31c <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI1_SetConfig(htim->Instance,
 800e2f4:	68cb      	ldr	r3, [r1, #12]
 800e2f6:	6828      	ldr	r0, [r5, #0]
 800e2f8:	e9d1 1200 	ldrd	r1, r2, [r1]
 800e2fc:	f7ff ffb8 	bl	800e270 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e300:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e302:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e304:	699a      	ldr	r2, [r3, #24]
 800e306:	f022 020c 	bic.w	r2, r2, #12
 800e30a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e30c:	699a      	ldr	r2, [r3, #24]
 800e30e:	430a      	orrs	r2, r1
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e310:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800e312:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800e314:	2300      	movs	r3, #0
 800e316:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800e31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800e31c:	2a04      	cmp	r2, #4
 800e31e:	d123      	bne.n	800e368 <HAL_TIM_IC_ConfigChannel+0x8c>
    TIM_TI2_SetConfig(htim->Instance,
 800e320:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e322:	6a1e      	ldr	r6, [r3, #32]
 800e324:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance,
 800e328:	e9d1 2700 	ldrd	r2, r7, [r1]
 800e32c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e32e:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e330:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 800e332:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e334:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e338:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e33c:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e33e:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e342:	b289      	uxth	r1, r1
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e344:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e346:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e348:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e34c:	f026 00a0 	bic.w	r0, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e350:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800e352:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800e354:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e356:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e358:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e35a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e35e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e360:	699a      	ldr	r2, [r3, #24]
 800e362:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e366:	e7d3      	b.n	800e310 <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_3)
 800e368:	2a08      	cmp	r2, #8
 800e36a:	d122      	bne.n	800e3b2 <HAL_TIM_IC_ConfigChannel+0xd6>
    TIM_TI3_SetConfig(htim->Instance,
 800e36c:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e36e:	6a1e      	ldr	r6, [r3, #32]
 800e370:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800e374:	e9d1 2000 	ldrd	r2, r0, [r1]
 800e378:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e37a:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e37c:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 800e37e:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e380:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800e384:	4338      	orrs	r0, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e386:	0109      	lsls	r1, r1, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e388:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e38c:	b2c9      	uxtb	r1, r1
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e38e:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e390:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e392:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e396:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e39a:	4302      	orrs	r2, r0
  TIMx->CCMR2 = tmpccmr2;
 800e39c:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 800e39e:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e3a0:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e3a2:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e3a4:	f022 020c 	bic.w	r2, r2, #12
 800e3a8:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e3aa:	69da      	ldr	r2, [r3, #28]
 800e3ac:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e3ae:	61da      	str	r2, [r3, #28]
 800e3b0:	e7af      	b.n	800e312 <HAL_TIM_IC_ConfigChannel+0x36>
  else if (Channel == TIM_CHANNEL_4)
 800e3b2:	2a0c      	cmp	r2, #12
 800e3b4:	d1ae      	bne.n	800e314 <HAL_TIM_IC_ConfigChannel+0x38>
    TIM_TI4_SetConfig(htim->Instance,
 800e3b6:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e3b8:	6a1e      	ldr	r6, [r3, #32]
 800e3ba:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800e3be:	e9d1 2700 	ldrd	r2, r7, [r1]
 800e3c2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e3c4:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e3c6:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 800e3c8:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e3ca:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e3ce:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e3d2:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e3d4:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e3d8:	b289      	uxth	r1, r1
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e3da:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e3dc:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e3de:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e3e2:	f426 4020 	bic.w	r0, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e3e6:	4302      	orrs	r2, r0
  TIMx->CCMR2 = tmpccmr2;
 800e3e8:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e3ea:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e3ec:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e3ee:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e3f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e3f4:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e3f6:	69da      	ldr	r2, [r3, #28]
 800e3f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e3fc:	e7d7      	b.n	800e3ae <HAL_TIM_IC_ConfigChannel+0xd2>
  __HAL_LOCK(htim);
 800e3fe:	2002      	movs	r0, #2
 800e400:	e78b      	b.n	800e31a <HAL_TIM_IC_ConfigChannel+0x3e>

0800e402 <TIM_ETR_SetConfig>:
{
 800e402:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 800e404:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e406:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e408:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e40c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800e410:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 800e412:	6083      	str	r3, [r0, #8]
}
 800e414:	bd10      	pop	{r4, pc}

0800e416 <HAL_TIM_ConfigClockSource>:
{
 800e416:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800e418:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e41c:	2b01      	cmp	r3, #1
{
 800e41e:	4604      	mov	r4, r0
 800e420:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800e424:	f000 8091 	beq.w	800e54a <HAL_TIM_ConfigClockSource+0x134>
 800e428:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800e42a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800e42e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800e432:	6800      	ldr	r0, [r0, #0]
 800e434:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e43a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800e43e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800e440:	680b      	ldr	r3, [r1, #0]
 800e442:	2b60      	cmp	r3, #96	; 0x60
 800e444:	d052      	beq.n	800e4ec <HAL_TIM_ConfigClockSource+0xd6>
 800e446:	d833      	bhi.n	800e4b0 <HAL_TIM_ConfigClockSource+0x9a>
 800e448:	2b40      	cmp	r3, #64	; 0x40
 800e44a:	d067      	beq.n	800e51c <HAL_TIM_ConfigClockSource+0x106>
 800e44c:	d816      	bhi.n	800e47c <HAL_TIM_ConfigClockSource+0x66>
 800e44e:	2b20      	cmp	r3, #32
 800e450:	d00d      	beq.n	800e46e <HAL_TIM_ConfigClockSource+0x58>
 800e452:	d80a      	bhi.n	800e46a <HAL_TIM_ConfigClockSource+0x54>
 800e454:	f033 0110 	bics.w	r1, r3, #16
 800e458:	d009      	beq.n	800e46e <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 800e45a:	2301      	movs	r3, #1
 800e45c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e460:	2300      	movs	r3, #0
 800e462:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e466:	4610      	mov	r0, r2
 800e468:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800e46a:	2b30      	cmp	r3, #48	; 0x30
 800e46c:	d1f5      	bne.n	800e45a <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 800e46e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e470:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e474:	4313      	orrs	r3, r2
 800e476:	f043 0307 	orr.w	r3, r3, #7
 800e47a:	e017      	b.n	800e4ac <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 800e47c:	2b50      	cmp	r3, #80	; 0x50
 800e47e:	d1ec      	bne.n	800e45a <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e480:	684a      	ldr	r2, [r1, #4]
 800e482:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800e484:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e486:	6a05      	ldr	r5, [r0, #32]
 800e488:	f025 0501 	bic.w	r5, r5, #1
 800e48c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e48e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e490:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e498:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800e49c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800e49e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800e4a0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800e4a2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e4a8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800e4ac:	6083      	str	r3, [r0, #8]
 800e4ae:	e011      	b.n	800e4d4 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800e4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4b4:	d00e      	beq.n	800e4d4 <HAL_TIM_ConfigClockSource+0xbe>
 800e4b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4ba:	d00d      	beq.n	800e4d8 <HAL_TIM_ConfigClockSource+0xc2>
 800e4bc:	2b70      	cmp	r3, #112	; 0x70
 800e4be:	d1cc      	bne.n	800e45a <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800e4c0:	68cb      	ldr	r3, [r1, #12]
 800e4c2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e4c6:	f7ff ff9c 	bl	800e402 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e4ca:	6822      	ldr	r2, [r4, #0]
 800e4cc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e4ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e4d2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	e7c0      	b.n	800e45a <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800e4d8:	68cb      	ldr	r3, [r1, #12]
 800e4da:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e4de:	f7ff ff90 	bl	800e402 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e4e2:	6822      	ldr	r2, [r4, #0]
 800e4e4:	6893      	ldr	r3, [r2, #8]
 800e4e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4ea:	e7f2      	b.n	800e4d2 <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e4ec:	684d      	ldr	r5, [r1, #4]
 800e4ee:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e4f0:	6a01      	ldr	r1, [r0, #32]
 800e4f2:	f021 0110 	bic.w	r1, r1, #16
 800e4f6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e4f8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800e4fa:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e4fc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e500:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800e504:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e508:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800e50c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800e50e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800e510:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e516:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800e51a:	e7c7      	b.n	800e4ac <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e51c:	684a      	ldr	r2, [r1, #4]
 800e51e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800e520:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e522:	6a05      	ldr	r5, [r0, #32]
 800e524:	f025 0501 	bic.w	r5, r5, #1
 800e528:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e52a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e52c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e534:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800e538:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800e53a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800e53c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800e53e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e544:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800e548:	e7b0      	b.n	800e4ac <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800e54a:	461a      	mov	r2, r3
 800e54c:	e78b      	b.n	800e466 <HAL_TIM_ConfigClockSource+0x50>

0800e54e <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800e54e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e550:	f001 011f 	and.w	r1, r1, #31
{
 800e554:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e556:	2401      	movs	r4, #1
 800e558:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800e55a:	ea23 0304 	bic.w	r3, r3, r4
 800e55e:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e560:	6a03      	ldr	r3, [r0, #32]
 800e562:	408a      	lsls	r2, r1
 800e564:	431a      	orrs	r2, r3
 800e566:	6202      	str	r2, [r0, #32]
}
 800e568:	bd10      	pop	{r4, pc}
	...

0800e56c <HAL_TIM_OC_Start>:
{
 800e56c:	b510      	push	{r4, lr}
 800e56e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e570:	b929      	cbnz	r1, 800e57e <HAL_TIM_OC_Start+0x12>
 800e572:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800e576:	2b01      	cmp	r3, #1
 800e578:	d01d      	beq.n	800e5b6 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 800e57a:	2001      	movs	r0, #1
}
 800e57c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e57e:	2904      	cmp	r1, #4
 800e580:	d107      	bne.n	800e592 <HAL_TIM_OC_Start+0x26>
 800e582:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800e586:	2b01      	cmp	r3, #1
 800e588:	d1f7      	bne.n	800e57a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e58a:	2302      	movs	r3, #2
 800e58c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800e590:	e014      	b.n	800e5bc <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e592:	2908      	cmp	r1, #8
 800e594:	d107      	bne.n	800e5a6 <HAL_TIM_OC_Start+0x3a>
 800e596:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d1ed      	bne.n	800e57a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e59e:	2302      	movs	r3, #2
 800e5a0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800e5a4:	e00a      	b.n	800e5bc <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e5a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d1e5      	bne.n	800e57a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e5ae:	2302      	movs	r3, #2
 800e5b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800e5b4:	e002      	b.n	800e5bc <HAL_TIM_OC_Start+0x50>
 800e5b6:	2302      	movs	r3, #2
 800e5b8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5bc:	2201      	movs	r2, #1
 800e5be:	6820      	ldr	r0, [r4, #0]
 800e5c0:	f7ff ffc5 	bl	800e54e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5c4:	6823      	ldr	r3, [r4, #0]
 800e5c6:	4a1a      	ldr	r2, [pc, #104]	; (800e630 <HAL_TIM_OC_Start+0xc4>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d007      	beq.n	800e5dc <HAL_TIM_OC_Start+0x70>
 800e5cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d003      	beq.n	800e5dc <HAL_TIM_OC_Start+0x70>
 800e5d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d103      	bne.n	800e5e4 <HAL_TIM_OC_Start+0x78>
    __HAL_TIM_MOE_ENABLE(htim);
 800e5dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e5e2:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5e8:	d016      	beq.n	800e618 <HAL_TIM_OC_Start+0xac>
 800e5ea:	4a12      	ldr	r2, [pc, #72]	; (800e634 <HAL_TIM_OC_Start+0xc8>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d013      	beq.n	800e618 <HAL_TIM_OC_Start+0xac>
 800e5f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d00f      	beq.n	800e618 <HAL_TIM_OC_Start+0xac>
 800e5f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d00b      	beq.n	800e618 <HAL_TIM_OC_Start+0xac>
 800e600:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800e604:	4293      	cmp	r3, r2
 800e606:	d007      	beq.n	800e618 <HAL_TIM_OC_Start+0xac>
 800e608:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d003      	beq.n	800e618 <HAL_TIM_OC_Start+0xac>
 800e610:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800e614:	4293      	cmp	r3, r2
 800e616:	d104      	bne.n	800e622 <HAL_TIM_OC_Start+0xb6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e618:	689a      	ldr	r2, [r3, #8]
 800e61a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e61e:	2a06      	cmp	r2, #6
 800e620:	d003      	beq.n	800e62a <HAL_TIM_OC_Start+0xbe>
    __HAL_TIM_ENABLE(htim);
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	f042 0201 	orr.w	r2, r2, #1
 800e628:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800e62a:	2000      	movs	r0, #0
 800e62c:	e7a6      	b.n	800e57c <HAL_TIM_OC_Start+0x10>
 800e62e:	bf00      	nop
 800e630:	40014000 	.word	0x40014000
 800e634:	40000400 	.word	0x40000400

0800e638 <HAL_TIM_PWM_Start>:
 800e638:	f7ff bf98 	b.w	800e56c <HAL_TIM_OC_Start>

0800e63c <HAL_TIM_OC_Stop>:
{
 800e63c:	b538      	push	{r3, r4, r5, lr}
 800e63e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e640:	2200      	movs	r2, #0
 800e642:	6800      	ldr	r0, [r0, #0]
{
 800e644:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e646:	f7ff ff82 	bl	800e54e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	4a1c      	ldr	r2, [pc, #112]	; (800e6c0 <HAL_TIM_OC_Stop+0x84>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d007      	beq.n	800e662 <HAL_TIM_OC_Stop+0x26>
 800e652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e656:	4293      	cmp	r3, r2
 800e658:	d003      	beq.n	800e662 <HAL_TIM_OC_Stop+0x26>
 800e65a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e65e:	4293      	cmp	r3, r2
 800e660:	d10d      	bne.n	800e67e <HAL_TIM_OC_Stop+0x42>
    __HAL_TIM_MOE_DISABLE(htim);
 800e662:	6a19      	ldr	r1, [r3, #32]
 800e664:	f241 1211 	movw	r2, #4369	; 0x1111
 800e668:	4211      	tst	r1, r2
 800e66a:	d108      	bne.n	800e67e <HAL_TIM_OC_Stop+0x42>
 800e66c:	6a19      	ldr	r1, [r3, #32]
 800e66e:	f240 4244 	movw	r2, #1092	; 0x444
 800e672:	4211      	tst	r1, r2
 800e674:	bf02      	ittt	eq
 800e676:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800e678:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800e67c:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800e67e:	6a19      	ldr	r1, [r3, #32]
 800e680:	f241 1211 	movw	r2, #4369	; 0x1111
 800e684:	4211      	tst	r1, r2
 800e686:	d108      	bne.n	800e69a <HAL_TIM_OC_Stop+0x5e>
 800e688:	6a19      	ldr	r1, [r3, #32]
 800e68a:	f240 4244 	movw	r2, #1092	; 0x444
 800e68e:	4211      	tst	r1, r2
 800e690:	bf02      	ittt	eq
 800e692:	681a      	ldreq	r2, [r3, #0]
 800e694:	f022 0201 	biceq.w	r2, r2, #1
 800e698:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e69a:	2301      	movs	r3, #1
 800e69c:	b91d      	cbnz	r5, 800e6a6 <HAL_TIM_OC_Stop+0x6a>
 800e69e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800e6a2:	2000      	movs	r0, #0
 800e6a4:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e6a6:	2d04      	cmp	r5, #4
 800e6a8:	d102      	bne.n	800e6b0 <HAL_TIM_OC_Stop+0x74>
 800e6aa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800e6ae:	e7f8      	b.n	800e6a2 <HAL_TIM_OC_Stop+0x66>
 800e6b0:	2d08      	cmp	r5, #8
 800e6b2:	bf0c      	ite	eq
 800e6b4:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 800e6b8:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 800e6bc:	e7f1      	b.n	800e6a2 <HAL_TIM_OC_Stop+0x66>
 800e6be:	bf00      	nop
 800e6c0:	40014000 	.word	0x40014000

0800e6c4 <HAL_TIM_IC_Start_DMA>:
{
 800e6c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e6c8:	4605      	mov	r5, r0
 800e6ca:	4617      	mov	r7, r2
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e6cc:	4688      	mov	r8, r1
 800e6ce:	b989      	cbnz	r1, 800e6f4 <HAL_TIM_IC_Start_DMA+0x30>
 800e6d0:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e6d4:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e6d8:	b2f6      	uxtb	r6, r6
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800e6da:	2e02      	cmp	r6, #2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e6dc:	b2c4      	uxtb	r4, r0
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800e6de:	f000 80cb 	beq.w	800e878 <HAL_TIM_IC_Start_DMA+0x1b4>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800e6e2:	2c02      	cmp	r4, #2
 800e6e4:	d002      	beq.n	800e6ec <HAL_TIM_IC_Start_DMA+0x28>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800e6e6:	2e01      	cmp	r6, #1
 800e6e8:	d01a      	beq.n	800e720 <HAL_TIM_IC_Start_DMA+0x5c>
    return HAL_ERROR;
 800e6ea:	2401      	movs	r4, #1
}
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	b002      	add	sp, #8
 800e6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e6f4:	2904      	cmp	r1, #4
 800e6f6:	d105      	bne.n	800e704 <HAL_TIM_IC_Start_DMA+0x40>
 800e6f8:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e6fc:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e700:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e702:	e7ea      	b.n	800e6da <HAL_TIM_IC_Start_DMA+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e704:	2908      	cmp	r1, #8
 800e706:	bf0b      	itete	eq
 800e708:	f890 6040 	ldrbeq.w	r6, [r0, #64]	; 0x40
 800e70c:	f895 6041 	ldrbne.w	r6, [r5, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e710:	f890 0046 	ldrbeq.w	r0, [r0, #70]	; 0x46
 800e714:	f895 0047 	ldrbne.w	r0, [r5, #71]	; 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e718:	bf0c      	ite	eq
 800e71a:	b2f6      	uxtbeq	r6, r6
 800e71c:	b2f6      	uxtbne	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e71e:	e7dc      	b.n	800e6da <HAL_TIM_IC_Start_DMA+0x16>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800e720:	2c01      	cmp	r4, #1
 800e722:	d1e2      	bne.n	800e6ea <HAL_TIM_IC_Start_DMA+0x26>
    if ((pData == NULL) && (Length > 0U))
 800e724:	b90f      	cbnz	r7, 800e72a <HAL_TIM_IC_Start_DMA+0x66>
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1df      	bne.n	800e6ea <HAL_TIM_IC_Start_DMA+0x26>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e72a:	2202      	movs	r2, #2
 800e72c:	f1b8 0f00 	cmp.w	r8, #0
 800e730:	d13a      	bne.n	800e7a8 <HAL_TIM_IC_Start_DMA+0xe4>
 800e732:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e736:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e73a:	4641      	mov	r1, r8
 800e73c:	6828      	ldr	r0, [r5, #0]
 800e73e:	9301      	str	r3, [sp, #4]
 800e740:	2201      	movs	r2, #1
 800e742:	f7ff ff04 	bl	800e54e <TIM_CCxChannelCmd>
  switch (Channel)
 800e746:	f1b8 0f08 	cmp.w	r8, #8
 800e74a:	6829      	ldr	r1, [r5, #0]
 800e74c:	9b01      	ldr	r3, [sp, #4]
 800e74e:	d07f      	beq.n	800e850 <HAL_TIM_IC_Start_DMA+0x18c>
 800e750:	d83e      	bhi.n	800e7d0 <HAL_TIM_IC_Start_DMA+0x10c>
 800e752:	f1b8 0f00 	cmp.w	r8, #0
 800e756:	d052      	beq.n	800e7fe <HAL_TIM_IC_Start_DMA+0x13a>
 800e758:	f1b8 0f04 	cmp.w	r8, #4
 800e75c:	d064      	beq.n	800e828 <HAL_TIM_IC_Start_DMA+0x164>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e75e:	682b      	ldr	r3, [r5, #0]
 800e760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e764:	d016      	beq.n	800e794 <HAL_TIM_IC_Start_DMA+0xd0>
 800e766:	4a45      	ldr	r2, [pc, #276]	; (800e87c <HAL_TIM_IC_Start_DMA+0x1b8>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d013      	beq.n	800e794 <HAL_TIM_IC_Start_DMA+0xd0>
 800e76c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e770:	4293      	cmp	r3, r2
 800e772:	d00f      	beq.n	800e794 <HAL_TIM_IC_Start_DMA+0xd0>
 800e774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e778:	4293      	cmp	r3, r2
 800e77a:	d00b      	beq.n	800e794 <HAL_TIM_IC_Start_DMA+0xd0>
 800e77c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800e780:	4293      	cmp	r3, r2
 800e782:	d007      	beq.n	800e794 <HAL_TIM_IC_Start_DMA+0xd0>
 800e784:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800e788:	4293      	cmp	r3, r2
 800e78a:	d003      	beq.n	800e794 <HAL_TIM_IC_Start_DMA+0xd0>
 800e78c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800e790:	4293      	cmp	r3, r2
 800e792:	d104      	bne.n	800e79e <HAL_TIM_IC_Start_DMA+0xda>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e794:	689a      	ldr	r2, [r3, #8]
 800e796:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e79a:	2a06      	cmp	r2, #6
 800e79c:	d0a6      	beq.n	800e6ec <HAL_TIM_IC_Start_DMA+0x28>
    __HAL_TIM_ENABLE(htim);
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	f042 0201 	orr.w	r2, r2, #1
 800e7a4:	601a      	str	r2, [r3, #0]
 800e7a6:	e7a1      	b.n	800e6ec <HAL_TIM_IC_Start_DMA+0x28>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7a8:	f1b8 0f04 	cmp.w	r8, #4
 800e7ac:	d104      	bne.n	800e7b8 <HAL_TIM_IC_Start_DMA+0xf4>
 800e7ae:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7b2:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
 800e7b6:	e7c0      	b.n	800e73a <HAL_TIM_IC_Start_DMA+0x76>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7b8:	f1b8 0f08 	cmp.w	r8, #8
 800e7bc:	bf0b      	itete	eq
 800e7be:	f885 2040 	strbeq.w	r2, [r5, #64]	; 0x40
 800e7c2:	f885 2041 	strbne.w	r2, [r5, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7c6:	f885 2046 	strbeq.w	r2, [r5, #70]	; 0x46
 800e7ca:	f885 2047 	strbne.w	r2, [r5, #71]	; 0x47
 800e7ce:	e7b4      	b.n	800e73a <HAL_TIM_IC_Start_DMA+0x76>
  switch (Channel)
 800e7d0:	f1b8 0f0c 	cmp.w	r8, #12
 800e7d4:	d1c3      	bne.n	800e75e <HAL_TIM_IC_Start_DMA+0x9a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800e7d6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e7d8:	4a29      	ldr	r2, [pc, #164]	; (800e880 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800e7da:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e7dc:	4a29      	ldr	r2, [pc, #164]	; (800e884 <HAL_TIM_IC_Start_DMA+0x1c0>)
 800e7de:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e7e0:	4a29      	ldr	r2, [pc, #164]	; (800e888 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800e7e2:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800e7e4:	3140      	adds	r1, #64	; 0x40
 800e7e6:	463a      	mov	r2, r7
 800e7e8:	f7fc fc09 	bl	800affe <HAL_DMA_Start_IT>
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	f47f af7b 	bne.w	800e6ea <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e7f4:	682a      	ldr	r2, [r5, #0]
 800e7f6:	68d3      	ldr	r3, [r2, #12]
 800e7f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e7fc:	e012      	b.n	800e824 <HAL_TIM_IC_Start_DMA+0x160>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800e7fe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e800:	4a1f      	ldr	r2, [pc, #124]	; (800e880 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800e802:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e804:	4a1f      	ldr	r2, [pc, #124]	; (800e884 <HAL_TIM_IC_Start_DMA+0x1c0>)
 800e806:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e808:	4a1f      	ldr	r2, [pc, #124]	; (800e888 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800e80a:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800e80c:	3134      	adds	r1, #52	; 0x34
 800e80e:	463a      	mov	r2, r7
 800e810:	f7fc fbf5 	bl	800affe <HAL_DMA_Start_IT>
 800e814:	4604      	mov	r4, r0
 800e816:	2800      	cmp	r0, #0
 800e818:	f47f af67 	bne.w	800e6ea <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e81c:	682a      	ldr	r2, [r5, #0]
 800e81e:	68d3      	ldr	r3, [r2, #12]
 800e820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e824:	60d3      	str	r3, [r2, #12]
      break;
 800e826:	e79a      	b.n	800e75e <HAL_TIM_IC_Start_DMA+0x9a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800e828:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800e82a:	4a15      	ldr	r2, [pc, #84]	; (800e880 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800e82c:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e82e:	4a15      	ldr	r2, [pc, #84]	; (800e884 <HAL_TIM_IC_Start_DMA+0x1c0>)
 800e830:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e832:	4a15      	ldr	r2, [pc, #84]	; (800e888 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800e834:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800e836:	3138      	adds	r1, #56	; 0x38
 800e838:	463a      	mov	r2, r7
 800e83a:	f7fc fbe0 	bl	800affe <HAL_DMA_Start_IT>
 800e83e:	4604      	mov	r4, r0
 800e840:	2800      	cmp	r0, #0
 800e842:	f47f af52 	bne.w	800e6ea <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e846:	682a      	ldr	r2, [r5, #0]
 800e848:	68d3      	ldr	r3, [r2, #12]
 800e84a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e84e:	e7e9      	b.n	800e824 <HAL_TIM_IC_Start_DMA+0x160>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800e850:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800e852:	4a0b      	ldr	r2, [pc, #44]	; (800e880 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800e854:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e856:	4a0b      	ldr	r2, [pc, #44]	; (800e884 <HAL_TIM_IC_Start_DMA+0x1c0>)
 800e858:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e85a:	4a0b      	ldr	r2, [pc, #44]	; (800e888 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800e85c:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800e85e:	313c      	adds	r1, #60	; 0x3c
 800e860:	463a      	mov	r2, r7
 800e862:	f7fc fbcc 	bl	800affe <HAL_DMA_Start_IT>
 800e866:	4604      	mov	r4, r0
 800e868:	2800      	cmp	r0, #0
 800e86a:	f47f af3e 	bne.w	800e6ea <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e86e:	682a      	ldr	r2, [r5, #0]
 800e870:	68d3      	ldr	r3, [r2, #12]
 800e872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e876:	e7d5      	b.n	800e824 <HAL_TIM_IC_Start_DMA+0x160>
    return HAL_BUSY;
 800e878:	4634      	mov	r4, r6
 800e87a:	e737      	b.n	800e6ec <HAL_TIM_IC_Start_DMA+0x28>
 800e87c:	40000400 	.word	0x40000400
 800e880:	0800dc8b 	.word	0x0800dc8b
 800e884:	0800dd07 	.word	0x0800dd07
 800e888:	0800dd41 	.word	0x0800dd41

0800e88c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e88c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e88e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e892:	2b01      	cmp	r3, #1
 800e894:	f04f 0302 	mov.w	r3, #2
 800e898:	d02e      	beq.n	800e8f8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e89a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e89e:	6803      	ldr	r3, [r0, #0]
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e8a0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800e8a2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800e8a4:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800e8a6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e8aa:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800e8b0:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8b2:	d016      	beq.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e8b4:	4c11      	ldr	r4, [pc, #68]	; (800e8fc <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800e8b6:	42a3      	cmp	r3, r4
 800e8b8:	d013      	beq.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e8ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800e8be:	42a3      	cmp	r3, r4
 800e8c0:	d00f      	beq.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e8c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800e8c6:	42a3      	cmp	r3, r4
 800e8c8:	d00b      	beq.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e8ca:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800e8ce:	42a3      	cmp	r3, r4
 800e8d0:	d007      	beq.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e8d2:	f504 3494 	add.w	r4, r4, #75776	; 0x12800
 800e8d6:	42a3      	cmp	r3, r4
 800e8d8:	d003      	beq.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e8da:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800e8de:	42a3      	cmp	r3, r4
 800e8e0:	d104      	bne.n	800e8ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8e2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8e8:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800e8f8:	4618      	mov	r0, r3

  return HAL_OK;
}
 800e8fa:	bd30      	pop	{r4, r5, pc}
 800e8fc:	40000400 	.word	0x40000400

0800e900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e904:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e906:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e908:	6925      	ldr	r5, [r4, #16]
 800e90a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e90c:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e90e:	432a      	orrs	r2, r5
 800e910:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e912:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e916:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e918:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e91c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e91e:	430a      	orrs	r2, r1
 800e920:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e922:	685a      	ldr	r2, [r3, #4]
 800e924:	68e1      	ldr	r1, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800e926:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e928:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800e92c:	430a      	orrs	r2, r1
 800e92e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e930:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e932:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e934:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 800e938:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e93a:	430a      	orrs	r2, r1
 800e93c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e93e:	4a55      	ldr	r2, [pc, #340]	; (800ea94 <UART_SetConfig+0x194>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d115      	bne.n	800e970 <UART_SetConfig+0x70>
 800e944:	4b54      	ldr	r3, [pc, #336]	; (800ea98 <UART_SetConfig+0x198>)
 800e946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e948:	f003 0303 	and.w	r3, r3, #3
 800e94c:	3b01      	subs	r3, #1
 800e94e:	2b02      	cmp	r3, #2
 800e950:	f200 8082 	bhi.w	800ea58 <UART_SetConfig+0x158>
 800e954:	4a51      	ldr	r2, [pc, #324]	; (800ea9c <UART_SetConfig+0x19c>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e956:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e95a:	5cd3      	ldrb	r3, [r2, r3]
 800e95c:	d14c      	bne.n	800e9f8 <UART_SetConfig+0xf8>
  {
    switch (clocksource)
 800e95e:	2b08      	cmp	r3, #8
 800e960:	d816      	bhi.n	800e990 <UART_SetConfig+0x90>
 800e962:	e8df f003 	tbb	[pc, r3]
 800e966:	7c8e      	.short	0x7c8e
 800e968:	15821532 	.word	0x15821532
 800e96c:	1515      	.short	0x1515
 800e96e:	33          	.byte	0x33
 800e96f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e970:	4a4b      	ldr	r2, [pc, #300]	; (800eaa0 <UART_SetConfig+0x1a0>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d116      	bne.n	800e9a4 <UART_SetConfig+0xa4>
 800e976:	4b48      	ldr	r3, [pc, #288]	; (800ea98 <UART_SetConfig+0x198>)
 800e978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e97e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e982:	d075      	beq.n	800ea70 <UART_SetConfig+0x170>
 800e984:	d806      	bhi.n	800e994 <UART_SetConfig+0x94>
 800e986:	2b00      	cmp	r3, #0
 800e988:	d078      	beq.n	800ea7c <UART_SetConfig+0x17c>
 800e98a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e98e:	d069      	beq.n	800ea64 <UART_SetConfig+0x164>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e990:	2001      	movs	r0, #1
 800e992:	e07b      	b.n	800ea8c <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e994:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e998:	d1fa      	bne.n	800e990 <UART_SetConfig+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e99a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e99e:	d014      	beq.n	800e9ca <UART_SetConfig+0xca>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e9a0:	4840      	ldr	r0, [pc, #256]	; (800eaa4 <UART_SetConfig+0x1a4>)
 800e9a2:	e044      	b.n	800ea2e <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9a4:	4a40      	ldr	r2, [pc, #256]	; (800eaa8 <UART_SetConfig+0x1a8>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d1f2      	bne.n	800e990 <UART_SetConfig+0x90>
 800e9aa:	4b3b      	ldr	r3, [pc, #236]	; (800ea98 <UART_SetConfig+0x198>)
 800e9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ae:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800e9b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e9b6:	d05b      	beq.n	800ea70 <UART_SetConfig+0x170>
 800e9b8:	d804      	bhi.n	800e9c4 <UART_SetConfig+0xc4>
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d05e      	beq.n	800ea7c <UART_SetConfig+0x17c>
 800e9be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e9c2:	e7e4      	b.n	800e98e <UART_SetConfig+0x8e>
 800e9c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e9c8:	e7e6      	b.n	800e998 <UART_SetConfig+0x98>
        pclk = (uint32_t) HSI_VALUE;
 800e9ca:	4836      	ldr	r0, [pc, #216]	; (800eaa4 <UART_SetConfig+0x1a4>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e9cc:	6862      	ldr	r2, [r4, #4]
 800e9ce:	0853      	lsrs	r3, r2, #1
 800e9d0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e9d4:	fbb0 f0f2 	udiv	r0, r0, r2
 800e9d8:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9da:	f1a3 0110 	sub.w	r1, r3, #16
 800e9de:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800e9e2:	4291      	cmp	r1, r2
 800e9e4:	d8d4      	bhi.n	800e990 <UART_SetConfig+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e9e6:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 800e9ea:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e9ec:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e9ee:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800e9f2:	4318      	orrs	r0, r3
 800e9f4:	60d0      	str	r0, [r2, #12]
 800e9f6:	e048      	b.n	800ea8a <UART_SetConfig+0x18a>
    switch (clocksource)
 800e9f8:	2b08      	cmp	r3, #8
 800e9fa:	d8c9      	bhi.n	800e990 <UART_SetConfig+0x90>
 800e9fc:	a201      	add	r2, pc, #4	; (adr r2, 800ea04 <UART_SetConfig+0x104>)
 800e9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea02:	bf00      	nop
 800ea04:	0800ea29 	.word	0x0800ea29
 800ea08:	0800ea4d 	.word	0x0800ea4d
 800ea0c:	0800e9a1 	.word	0x0800e9a1
 800ea10:	0800e991 	.word	0x0800e991
 800ea14:	0800ea53 	.word	0x0800ea53
 800ea18:	0800e991 	.word	0x0800e991
 800ea1c:	0800e991 	.word	0x0800e991
 800ea20:	0800e991 	.word	0x0800e991
 800ea24:	0800ea77 	.word	0x0800ea77
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea28:	f7fd fe60 	bl	800c6ec <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 800ea2c:	b368      	cbz	r0, 800ea8a <UART_SetConfig+0x18a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ea2e:	6862      	ldr	r2, [r4, #4]
 800ea30:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800ea34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea38:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea3a:	f1a3 0110 	sub.w	r1, r3, #16
 800ea3e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800ea42:	4291      	cmp	r1, r2
 800ea44:	d8a4      	bhi.n	800e990 <UART_SetConfig+0x90>
      {
        huart->Instance->BRR = usartdiv;
 800ea46:	6822      	ldr	r2, [r4, #0]
 800ea48:	60d3      	str	r3, [r2, #12]
 800ea4a:	e01e      	b.n	800ea8a <UART_SetConfig+0x18a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea4c:	f7fd fe66 	bl	800c71c <HAL_RCC_GetPCLK2Freq>
        break;
 800ea50:	e7ec      	b.n	800ea2c <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetSysClockFreq();
 800ea52:	f7fd fd6d 	bl	800c530 <HAL_RCC_GetSysClockFreq>
        break;
 800ea56:	e7e9      	b.n	800ea2c <UART_SetConfig+0x12c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ea5c:	d1f6      	bne.n	800ea4c <UART_SetConfig+0x14c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea5e:	f7fd fe5d 	bl	800c71c <HAL_RCC_GetPCLK2Freq>
        break;
 800ea62:	e010      	b.n	800ea86 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea64:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ea68:	d1f3      	bne.n	800ea52 <UART_SetConfig+0x152>
        pclk = HAL_RCC_GetSysClockFreq();
 800ea6a:	f7fd fd61 	bl	800c530 <HAL_RCC_GetSysClockFreq>
        break;
 800ea6e:	e00a      	b.n	800ea86 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ea74:	d0aa      	beq.n	800e9cc <UART_SetConfig+0xcc>
        pclk = (uint32_t) LSE_VALUE;
 800ea76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ea7a:	e7d8      	b.n	800ea2e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea7c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ea80:	d1d2      	bne.n	800ea28 <UART_SetConfig+0x128>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea82:	f7fd fe33 	bl	800c6ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d1a0      	bne.n	800e9cc <UART_SetConfig+0xcc>
 800ea8a:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea8c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800ea8e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 800ea92:	bd38      	pop	{r3, r4, r5, pc}
 800ea94:	40013800 	.word	0x40013800
 800ea98:	40021000 	.word	0x40021000
 800ea9c:	08018e85 	.word	0x08018e85
 800eaa0:	40004400 	.word	0x40004400
 800eaa4:	007a1200 	.word	0x007a1200
 800eaa8:	40004800 	.word	0x40004800

0800eaac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eaac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eaae:	07da      	lsls	r2, r3, #31
{
 800eab0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eab2:	d506      	bpl.n	800eac2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eab4:	6801      	ldr	r1, [r0, #0]
 800eab6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800eab8:	684a      	ldr	r2, [r1, #4]
 800eaba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800eabe:	4322      	orrs	r2, r4
 800eac0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eac2:	079c      	lsls	r4, r3, #30
 800eac4:	d506      	bpl.n	800ead4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eac6:	6801      	ldr	r1, [r0, #0]
 800eac8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800eaca:	684a      	ldr	r2, [r1, #4]
 800eacc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ead0:	4322      	orrs	r2, r4
 800ead2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ead4:	0759      	lsls	r1, r3, #29
 800ead6:	d506      	bpl.n	800eae6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ead8:	6801      	ldr	r1, [r0, #0]
 800eada:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800eadc:	684a      	ldr	r2, [r1, #4]
 800eade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800eae2:	4322      	orrs	r2, r4
 800eae4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eae6:	071a      	lsls	r2, r3, #28
 800eae8:	d506      	bpl.n	800eaf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eaea:	6801      	ldr	r1, [r0, #0]
 800eaec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800eaee:	684a      	ldr	r2, [r1, #4]
 800eaf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eaf4:	4322      	orrs	r2, r4
 800eaf6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eaf8:	06dc      	lsls	r4, r3, #27
 800eafa:	d506      	bpl.n	800eb0a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eafc:	6801      	ldr	r1, [r0, #0]
 800eafe:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800eb00:	688a      	ldr	r2, [r1, #8]
 800eb02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eb06:	4322      	orrs	r2, r4
 800eb08:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb0a:	0699      	lsls	r1, r3, #26
 800eb0c:	d506      	bpl.n	800eb1c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb0e:	6801      	ldr	r1, [r0, #0]
 800eb10:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800eb12:	688a      	ldr	r2, [r1, #8]
 800eb14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb18:	4322      	orrs	r2, r4
 800eb1a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb1c:	065a      	lsls	r2, r3, #25
 800eb1e:	d50f      	bpl.n	800eb40 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb20:	6801      	ldr	r1, [r0, #0]
 800eb22:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800eb24:	684a      	ldr	r2, [r1, #4]
 800eb26:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800eb2a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb2c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb30:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb32:	d105      	bne.n	800eb40 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb34:	684a      	ldr	r2, [r1, #4]
 800eb36:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800eb38:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800eb3c:	4322      	orrs	r2, r4
 800eb3e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb40:	061b      	lsls	r3, r3, #24
 800eb42:	d506      	bpl.n	800eb52 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb44:	6802      	ldr	r2, [r0, #0]
 800eb46:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800eb48:	6853      	ldr	r3, [r2, #4]
 800eb4a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800eb4e:	430b      	orrs	r3, r1
 800eb50:	6053      	str	r3, [r2, #4]
  }
}
 800eb52:	bd10      	pop	{r4, pc}

0800eb54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb58:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800eb5c:	4604      	mov	r4, r0
 800eb5e:	460e      	mov	r6, r1
 800eb60:	4615      	mov	r5, r2
 800eb62:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb64:	6822      	ldr	r2, [r4, #0]
 800eb66:	69d3      	ldr	r3, [r2, #28]
 800eb68:	ea36 0303 	bics.w	r3, r6, r3
 800eb6c:	bf0c      	ite	eq
 800eb6e:	2301      	moveq	r3, #1
 800eb70:	2300      	movne	r3, #0
 800eb72:	42ab      	cmp	r3, r5
 800eb74:	d001      	beq.n	800eb7a <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800eb76:	2000      	movs	r0, #0
 800eb78:	e025      	b.n	800ebc6 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 800eb7a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800eb7e:	d0f2      	beq.n	800eb66 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb80:	f7fb fe08 	bl	800a794 <HAL_GetTick>
 800eb84:	1bc0      	subs	r0, r0, r7
 800eb86:	4540      	cmp	r0, r8
 800eb88:	6820      	ldr	r0, [r4, #0]
 800eb8a:	d802      	bhi.n	800eb92 <UART_WaitOnFlagUntilTimeout+0x3e>
 800eb8c:	f1b8 0f00 	cmp.w	r8, #0
 800eb90:	d11b      	bne.n	800ebca <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb92:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eb96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9a:	e840 3200 	strex	r2, r3, [r0]
 800eb9e:	2a00      	cmp	r2, #0
 800eba0:	d1f7      	bne.n	800eb92 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eba2:	f100 0308 	add.w	r3, r0, #8
 800eba6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebaa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebae:	f100 0108 	add.w	r1, r0, #8
 800ebb2:	e841 3200 	strex	r2, r3, [r1]
 800ebb6:	2a00      	cmp	r2, #0
 800ebb8:	d1f3      	bne.n	800eba2 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800ebba:	2320      	movs	r3, #32
 800ebbc:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ebbe:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800ebc0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 800ebc4:	2003      	movs	r0, #3
}
 800ebc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ebca:	6803      	ldr	r3, [r0, #0]
 800ebcc:	075a      	lsls	r2, r3, #29
 800ebce:	d5c9      	bpl.n	800eb64 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ebd0:	69c3      	ldr	r3, [r0, #28]
 800ebd2:	051b      	lsls	r3, r3, #20
 800ebd4:	d5c6      	bpl.n	800eb64 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebda:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebdc:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ebe0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe4:	e840 3200 	strex	r2, r3, [r0]
 800ebe8:	2a00      	cmp	r2, #0
 800ebea:	d1f7      	bne.n	800ebdc <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebec:	f100 0308 	add.w	r3, r0, #8
 800ebf0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebf4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebf8:	f100 0108 	add.w	r1, r0, #8
 800ebfc:	e841 3200 	strex	r2, r3, [r1]
 800ec00:	2a00      	cmp	r2, #0
 800ec02:	d1f3      	bne.n	800ebec <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 800ec04:	2320      	movs	r3, #32
 800ec06:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ec08:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec0a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800ec0e:	e7d7      	b.n	800ebc0 <UART_WaitOnFlagUntilTimeout+0x6c>

0800ec10 <UART_CheckIdleState>:
{
 800ec10:	b530      	push	{r4, r5, lr}
 800ec12:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec14:	2500      	movs	r5, #0
{
 800ec16:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec18:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800ec1c:	f7fb fdba 	bl	800a794 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec20:	6822      	ldr	r2, [r4, #0]
 800ec22:	6812      	ldr	r2, [r2, #0]
 800ec24:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800ec26:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec28:	d415      	bmi.n	800ec56 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ec2a:	6822      	ldr	r2, [r4, #0]
 800ec2c:	6812      	ldr	r2, [r2, #0]
 800ec2e:	0752      	lsls	r2, r2, #29
 800ec30:	d509      	bpl.n	800ec46 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec32:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800ec36:	9200      	str	r2, [sp, #0]
 800ec38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f7ff ff88 	bl	800eb54 <UART_WaitOnFlagUntilTimeout>
 800ec44:	b9a0      	cbnz	r0, 800ec70 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800ec46:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec48:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800ec4a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800ec4c:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ec50:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec52:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 800ec54:	e00d      	b.n	800ec72 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec56:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800ec5a:	9200      	str	r2, [sp, #0]
 800ec5c:	9003      	str	r0, [sp, #12]
 800ec5e:	462a      	mov	r2, r5
 800ec60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ec64:	4620      	mov	r0, r4
 800ec66:	f7ff ff75 	bl	800eb54 <UART_WaitOnFlagUntilTimeout>
 800ec6a:	9b03      	ldr	r3, [sp, #12]
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	d0dc      	beq.n	800ec2a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800ec70:	2003      	movs	r0, #3
}
 800ec72:	b005      	add	sp, #20
 800ec74:	bd30      	pop	{r4, r5, pc}

0800ec76 <HAL_UART_Init>:
{
 800ec76:	b510      	push	{r4, lr}
  if (huart == NULL)
 800ec78:	4604      	mov	r4, r0
 800ec7a:	b340      	cbz	r0, 800ecce <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800ec7c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ec7e:	b91b      	cbnz	r3, 800ec88 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800ec80:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800ec84:	f7fb fc52 	bl	800a52c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800ec88:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ec8a:	2324      	movs	r3, #36	; 0x24
 800ec8c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800ec8e:	6813      	ldr	r3, [r2, #0]
 800ec90:	f023 0301 	bic.w	r3, r3, #1
 800ec94:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec96:	4620      	mov	r0, r4
 800ec98:	f7ff fe32 	bl	800e900 <UART_SetConfig>
 800ec9c:	2801      	cmp	r0, #1
 800ec9e:	d016      	beq.n	800ecce <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eca2:	b113      	cbz	r3, 800ecaa <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800eca4:	4620      	mov	r0, r4
 800eca6:	f7ff ff01 	bl	800eaac <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	685a      	ldr	r2, [r3, #4]
 800ecae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ecb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ecb4:	689a      	ldr	r2, [r3, #8]
 800ecb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ecba:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800ecc2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800ecc4:	601a      	str	r2, [r3, #0]
}
 800ecc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800ecca:	f7ff bfa1 	b.w	800ec10 <UART_CheckIdleState>
}
 800ecce:	2001      	movs	r0, #1
 800ecd0:	bd10      	pop	{r4, pc}

0800ecd2 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ecd2:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ecd4:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800ecd8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800ecdc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	4770      	bx	lr

0800ece4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ece4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800ece8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ecec:	045b      	lsls	r3, r3, #17
 800ecee:	0c5b      	lsrs	r3, r3, #17
 800ecf0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	4770      	bx	lr

0800ecf8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ecf8:	b084      	sub	sp, #16
 800ecfa:	b510      	push	{r4, lr}
 800ecfc:	ac03      	add	r4, sp, #12
 800ecfe:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800ed02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ed06:	2301      	movs	r3, #1
 800ed08:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800ed12:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 800ed14:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800ed18:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	4770      	bx	lr

0800ed20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ed20:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ed22:	780c      	ldrb	r4, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800ed24:	78ca      	ldrb	r2, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ed26:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800ed2a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ed2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed32:	041b      	lsls	r3, r3, #16
 800ed34:	0c1b      	lsrs	r3, r3, #16
  switch (ep->type)
 800ed36:	2a03      	cmp	r2, #3
 800ed38:	d851      	bhi.n	800edde <USB_ActivateEndpoint+0xbe>
 800ed3a:	e8df f002 	tbb	[pc, r2]
 800ed3e:	4d02      	.short	0x4d02
 800ed40:	494b      	.short	0x494b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ed42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ed46:	f248 0680 	movw	r6, #32896	; 0x8080
 800ed4a:	4333      	orrs	r3, r6
 800ed4c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ed50:	780f      	ldrb	r7, [r1, #0]
 800ed52:	4da8      	ldr	r5, [pc, #672]	; (800eff4 <USB_ActivateEndpoint+0x2d4>)
 800ed54:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	402b      	ands	r3, r5
 800ed5c:	433b      	orrs	r3, r7
 800ed5e:	4333      	orrs	r3, r6
 800ed60:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]

  if (ep->doublebuffer == 0U)
 800ed64:	7b0c      	ldrb	r4, [r1, #12]
 800ed66:	780b      	ldrb	r3, [r1, #0]
 800ed68:	2c00      	cmp	r4, #0
 800ed6a:	f040 808b 	bne.w	800ee84 <USB_ActivateEndpoint+0x164>
  {
    if (ep->is_in != 0U)
 800ed6e:	88cc      	ldrh	r4, [r1, #6]
 800ed70:	784f      	ldrb	r7, [r1, #1]
 800ed72:	0864      	lsrs	r4, r4, #1
 800ed74:	2610      	movs	r6, #16
 800ed76:	0064      	lsls	r4, r4, #1
 800ed78:	fb16 0303 	smlabb	r3, r6, r3, r0
 800ed7c:	b38f      	cbz	r7, 800ede2 <USB_ActivateEndpoint+0xc2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ed7e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800ed82:	fa13 f386 	uxtah	r3, r3, r6
 800ed86:	f8a3 4400 	strh.w	r4, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ed8a:	780b      	ldrb	r3, [r1, #0]
 800ed8c:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 800ed90:	0667      	lsls	r7, r4, #25
 800ed92:	d509      	bpl.n	800eda8 <USB_ActivateEndpoint+0x88>
 800ed94:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 800ed98:	b2a4      	uxth	r4, r4
 800ed9a:	402c      	ands	r4, r5
 800ed9c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800eda0:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800eda4:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800eda8:	78cb      	ldrb	r3, [r1, #3]
 800edaa:	780c      	ldrb	r4, [r1, #0]
 800edac:	4992      	ldr	r1, [pc, #584]	; (800eff8 <USB_ActivateEndpoint+0x2d8>)
 800edae:	2b01      	cmp	r3, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800edb0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	ea03 0301 	and.w	r3, r3, r1
 800edba:	bf18      	it	ne
 800edbc:	f083 0320 	eorne.w	r3, r3, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800edc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edc8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800edcc:	4610      	mov	r0, r2
 800edce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 800edd0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800edd4:	2200      	movs	r2, #0
      break;
 800edd6:	e7b6      	b.n	800ed46 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800edd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      break;
 800eddc:	e7fa      	b.n	800edd4 <USB_ActivateEndpoint+0xb4>
      ret = HAL_ERROR;
 800edde:	2201      	movs	r2, #1
 800ede0:	e7b1      	b.n	800ed46 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ede2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800ede6:	fa13 f385 	uxtah	r3, r3, r5
 800edea:	f8a3 4408 	strh.w	r4, [r3, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800edee:	780b      	ldrb	r3, [r1, #0]
 800edf0:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 800edf4:	fb16 0303 	smlabb	r3, r6, r3, r0
 800edf8:	690e      	ldr	r6, [r1, #16]
 800edfa:	b2a4      	uxth	r4, r4
 800edfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ee00:	bb7e      	cbnz	r6, 800ee62 <USB_ActivateEndpoint+0x142>
 800ee02:	5b1d      	ldrh	r5, [r3, r4]
 800ee04:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800ee08:	042d      	lsls	r5, r5, #16
 800ee0a:	0c2d      	lsrs	r5, r5, #16
 800ee0c:	531d      	strh	r5, [r3, r4]
 800ee0e:	5b1d      	ldrh	r5, [r3, r4]
 800ee10:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800ee14:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800ee18:	b2ad      	uxth	r5, r5
 800ee1a:	531d      	strh	r5, [r3, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ee1c:	780c      	ldrb	r4, [r1, #0]
 800ee1e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800ee22:	045b      	lsls	r3, r3, #17
 800ee24:	d50d      	bpl.n	800ee42 <USB_ActivateEndpoint+0x122>
 800ee26:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800ee2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee32:	041b      	lsls	r3, r3, #16
 800ee34:	0c1b      	lsrs	r3, r3, #16
 800ee36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ee3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee3e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ee42:	7809      	ldrb	r1, [r1, #0]
 800ee44:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800ee48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee50:	041b      	lsls	r3, r3, #16
 800ee52:	0c1b      	lsrs	r3, r3, #16
 800ee54:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ee58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee60:	e07b      	b.n	800ef5a <USB_ActivateEndpoint+0x23a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ee62:	2e3e      	cmp	r6, #62	; 0x3e
 800ee64:	d805      	bhi.n	800ee72 <USB_ActivateEndpoint+0x152>
 800ee66:	0875      	lsrs	r5, r6, #1
 800ee68:	07f6      	lsls	r6, r6, #31
 800ee6a:	bf48      	it	mi
 800ee6c:	3501      	addmi	r5, #1
 800ee6e:	02ad      	lsls	r5, r5, #10
 800ee70:	e7d2      	b.n	800ee18 <USB_ActivateEndpoint+0xf8>
 800ee72:	0977      	lsrs	r7, r6, #5
 800ee74:	06f5      	lsls	r5, r6, #27
 800ee76:	4d61      	ldr	r5, [pc, #388]	; (800effc <USB_ActivateEndpoint+0x2dc>)
 800ee78:	bf08      	it	eq
 800ee7a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800ee7e:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800ee82:	e7c9      	b.n	800ee18 <USB_ActivateEndpoint+0xf8>
    if (ep->type == EP_TYPE_BULK)
 800ee84:	78cc      	ldrb	r4, [r1, #3]
 800ee86:	b21b      	sxth	r3, r3
 800ee88:	2c02      	cmp	r4, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ee8a:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 800ee8e:	d167      	bne.n	800ef60 <USB_ActivateEndpoint+0x240>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ee90:	b2a4      	uxth	r4, r4
 800ee92:	402c      	ands	r4, r5
 800ee94:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800ee98:	f044 0480 	orr.w	r4, r4, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ee9c:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800eea0:	780c      	ldrb	r4, [r1, #0]
 800eea2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800eea6:	890d      	ldrh	r5, [r1, #8]
 800eea8:	2310      	movs	r3, #16
 800eeaa:	fb13 0404 	smlabb	r4, r3, r4, r0
 800eeae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800eeb2:	b2b6      	uxth	r6, r6
 800eeb4:	086d      	lsrs	r5, r5, #1
 800eeb6:	006d      	lsls	r5, r5, #1
 800eeb8:	53a5      	strh	r5, [r4, r6]
 800eeba:	780c      	ldrb	r4, [r1, #0]
 800eebc:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800eec0:	fb13 0304 	smlabb	r3, r3, r4, r0
 800eec4:	894c      	ldrh	r4, [r1, #10]
 800eec6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800eeca:	b2ad      	uxth	r5, r5
 800eecc:	0864      	lsrs	r4, r4, #1
 800eece:	0064      	lsls	r4, r4, #1
 800eed0:	535c      	strh	r4, [r3, r5]
    if (ep->is_in == 0U)
 800eed2:	780c      	ldrb	r4, [r1, #0]
 800eed4:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eed6:	b224      	sxth	r4, r4
    if (ep->is_in == 0U)
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d149      	bne.n	800ef70 <USB_ActivateEndpoint+0x250>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eedc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800eee0:	045f      	lsls	r7, r3, #17
 800eee2:	d50d      	bpl.n	800ef00 <USB_ActivateEndpoint+0x1e0>
 800eee4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800eee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eeec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eef0:	041b      	lsls	r3, r3, #16
 800eef2:	0c1b      	lsrs	r3, r3, #16
 800eef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eefc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef00:	780c      	ldrb	r4, [r1, #0]
 800ef02:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800ef06:	065e      	lsls	r6, r3, #25
 800ef08:	d50d      	bpl.n	800ef26 <USB_ActivateEndpoint+0x206>
 800ef0a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800ef0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef16:	041b      	lsls	r3, r3, #16
 800ef18:	0c1b      	lsrs	r3, r3, #16
 800ef1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ef22:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ef26:	780d      	ldrb	r5, [r1, #0]
 800ef28:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800ef2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef34:	041b      	lsls	r3, r3, #16
 800ef36:	0c1b      	lsrs	r3, r3, #16
 800ef38:	f248 0480 	movw	r4, #32896	; 0x8080
 800ef3c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800ef40:	4323      	orrs	r3, r4
 800ef42:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef46:	7809      	ldrb	r1, [r1, #0]
 800ef48:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800ef4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef54:	041b      	lsls	r3, r3, #16
 800ef56:	0c1b      	lsrs	r3, r3, #16
 800ef58:	4323      	orrs	r3, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ef5a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800ef5e:	e735      	b.n	800edcc <USB_ActivateEndpoint+0xac>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ef60:	f424 44e2 	bic.w	r4, r4, #28928	; 0x7100
 800ef64:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800ef68:	0424      	lsls	r4, r4, #16
 800ef6a:	0c24      	lsrs	r4, r4, #16
 800ef6c:	4334      	orrs	r4, r6
 800ef6e:	e795      	b.n	800ee9c <USB_ActivateEndpoint+0x17c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef70:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800ef74:	045d      	lsls	r5, r3, #17
 800ef76:	d50d      	bpl.n	800ef94 <USB_ActivateEndpoint+0x274>
 800ef78:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800ef7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef84:	041b      	lsls	r3, r3, #16
 800ef86:	0c1b      	lsrs	r3, r3, #16
 800ef88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ef8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef90:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef94:	780c      	ldrb	r4, [r1, #0]
 800ef96:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800ef9a:	065b      	lsls	r3, r3, #25
 800ef9c:	d50d      	bpl.n	800efba <USB_ActivateEndpoint+0x29a>
 800ef9e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800efa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efaa:	041b      	lsls	r3, r3, #16
 800efac:	0c1b      	lsrs	r3, r3, #16
 800efae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800efb6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800efba:	78cb      	ldrb	r3, [r1, #3]
 800efbc:	780c      	ldrb	r4, [r1, #0]
 800efbe:	4d0e      	ldr	r5, [pc, #56]	; (800eff8 <USB_ActivateEndpoint+0x2d8>)
 800efc0:	2b01      	cmp	r3, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800efc2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	ea03 0305 	and.w	r3, r3, r5
 800efcc:	bf18      	it	ne
 800efce:	f083 0320 	eorne.w	r3, r3, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800efd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efda:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800efde:	7809      	ldrb	r1, [r1, #0]
 800efe0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800efe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800efe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efec:	041b      	lsls	r3, r3, #16
 800efee:	0c1b      	lsrs	r3, r3, #16
 800eff0:	e732      	b.n	800ee58 <USB_ActivateEndpoint+0x138>
 800eff2:	bf00      	nop
 800eff4:	ffff8f8f 	.word	0xffff8f8f
 800eff8:	ffff8fbf 	.word	0xffff8fbf
 800effc:	ffff8000 	.word	0xffff8000

0800f000 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f000:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 800f002:	7b0c      	ldrb	r4, [r1, #12]
 800f004:	784b      	ldrb	r3, [r1, #1]
 800f006:	780a      	ldrb	r2, [r1, #0]
 800f008:	2c00      	cmp	r4, #0
 800f00a:	d13d      	bne.n	800f088 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 800f00c:	b313      	cbz	r3, 800f054 <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f00e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f012:	065c      	lsls	r4, r3, #25
 800f014:	d50d      	bpl.n	800f032 <USB_DeactivateEndpoint+0x32>
 800f016:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f01a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f01e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f022:	041b      	lsls	r3, r3, #16
 800f024:	0c1b      	lsrs	r3, r3, #16
 800f026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f02a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f02e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f032:	780a      	ldrb	r2, [r1, #0]
 800f034:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f03c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f040:	041b      	lsls	r3, r3, #16
 800f042:	0c1b      	lsrs	r3, r3, #16
 800f044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f04c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800f050:	2000      	movs	r0, #0
 800f052:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f054:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f058:	045b      	lsls	r3, r3, #17
 800f05a:	d50d      	bpl.n	800f078 <USB_DeactivateEndpoint+0x78>
 800f05c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f068:	041b      	lsls	r3, r3, #16
 800f06a:	0c1b      	lsrs	r3, r3, #16
 800f06c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f074:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f078:	780a      	ldrb	r2, [r1, #0]
 800f07a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f07e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f086:	e7db      	b.n	800f040 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d14e      	bne.n	800f12a <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f08c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f090:	045c      	lsls	r4, r3, #17
 800f092:	d50d      	bpl.n	800f0b0 <USB_DeactivateEndpoint+0xb0>
 800f094:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f09c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0a0:	041b      	lsls	r3, r3, #16
 800f0a2:	0c1b      	lsrs	r3, r3, #16
 800f0a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f0b0:	780a      	ldrb	r2, [r1, #0]
 800f0b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f0b6:	065b      	lsls	r3, r3, #25
 800f0b8:	d50d      	bpl.n	800f0d6 <USB_DeactivateEndpoint+0xd6>
 800f0ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f0be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0c6:	041b      	lsls	r3, r3, #16
 800f0c8:	0c1b      	lsrs	r3, r3, #16
 800f0ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f0d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800f0d6:	780a      	ldrb	r2, [r1, #0]
 800f0d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f0dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0e4:	041b      	lsls	r3, r3, #16
 800f0e6:	0c1b      	lsrs	r3, r3, #16
 800f0e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f0f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f0f4:	780c      	ldrb	r4, [r1, #0]
 800f0f6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800f0fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f102:	041b      	lsls	r3, r3, #16
 800f104:	0c1b      	lsrs	r3, r3, #16
 800f106:	f248 0280 	movw	r2, #32896	; 0x8080
 800f10a:	4313      	orrs	r3, r2
 800f10c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f110:	7809      	ldrb	r1, [r1, #0]
 800f112:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800f116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f11a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f11e:	041b      	lsls	r3, r3, #16
 800f120:	0c1b      	lsrs	r3, r3, #16
 800f122:	4313      	orrs	r3, r2
 800f124:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800f128:	e792      	b.n	800f050 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f12a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f12e:	045c      	lsls	r4, r3, #17
 800f130:	d50d      	bpl.n	800f14e <USB_DeactivateEndpoint+0x14e>
 800f132:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f13a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f13e:	041b      	lsls	r3, r3, #16
 800f140:	0c1b      	lsrs	r3, r3, #16
 800f142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f14a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f14e:	780a      	ldrb	r2, [r1, #0]
 800f150:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f154:	065b      	lsls	r3, r3, #25
 800f156:	d50d      	bpl.n	800f174 <USB_DeactivateEndpoint+0x174>
 800f158:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f15c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f164:	041b      	lsls	r3, r3, #16
 800f166:	0c1b      	lsrs	r3, r3, #16
 800f168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f16c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f170:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800f174:	780a      	ldrb	r2, [r1, #0]
 800f176:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f182:	041b      	lsls	r3, r3, #16
 800f184:	0c1b      	lsrs	r3, r3, #16
 800f186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f18e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f192:	780c      	ldrb	r4, [r1, #0]
 800f194:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800f198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f19c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1a0:	041b      	lsls	r3, r3, #16
 800f1a2:	0c1b      	lsrs	r3, r3, #16
 800f1a4:	f248 0280 	movw	r2, #32896	; 0x8080
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f1ae:	7809      	ldrb	r1, [r1, #0]
 800f1b0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800f1b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1bc:	e7af      	b.n	800f11e <USB_DeactivateEndpoint+0x11e>

0800f1be <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800f1be:	784b      	ldrb	r3, [r1, #1]
 800f1c0:	780a      	ldrb	r2, [r1, #0]
 800f1c2:	b18b      	cbz	r3, 800f1e8 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f1c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f1c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1d0:	041b      	lsls	r3, r3, #16
 800f1d2:	0c1b      	lsrs	r3, r3, #16
 800f1d4:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f1d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f1e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f1ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1f4:	041b      	lsls	r3, r3, #16
 800f1f6:	0c1b      	lsrs	r3, r3, #16
 800f1f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f1fc:	e7ec      	b.n	800f1d8 <USB_EPSetStall+0x1a>

0800f1fe <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800f1fe:	7b0b      	ldrb	r3, [r1, #12]
 800f200:	bb43      	cbnz	r3, 800f254 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 800f202:	784b      	ldrb	r3, [r1, #1]
 800f204:	780a      	ldrb	r2, [r1, #0]
 800f206:	b33b      	cbz	r3, 800f258 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f208:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f20c:	065b      	lsls	r3, r3, #25
 800f20e:	d50d      	bpl.n	800f22c <USB_EPClearStall+0x2e>
 800f210:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f21c:	041b      	lsls	r3, r3, #16
 800f21e:	0c1b      	lsrs	r3, r3, #16
 800f220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f224:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f228:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800f22c:	78cb      	ldrb	r3, [r1, #3]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d010      	beq.n	800f254 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f232:	780a      	ldrb	r2, [r1, #0]
 800f234:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f23c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f240:	041b      	lsls	r3, r3, #16
 800f242:	0c1b      	lsrs	r3, r3, #16
 800f244:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f250:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800f254:	2000      	movs	r0, #0
 800f256:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f258:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f25c:	045b      	lsls	r3, r3, #17
 800f25e:	d50d      	bpl.n	800f27c <USB_EPClearStall+0x7e>
 800f260:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f26c:	041b      	lsls	r3, r3, #16
 800f26e:	0c1b      	lsrs	r3, r3, #16
 800f270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f278:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f27c:	780a      	ldrb	r2, [r1, #0]
 800f27e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f28a:	041b      	lsls	r3, r3, #16
 800f28c:	0c1b      	lsrs	r3, r3, #16
 800f28e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800f292:	e7d9      	b.n	800f248 <USB_EPClearStall+0x4a>

0800f294 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800f294:	b911      	cbnz	r1, 800f29c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f296:	2380      	movs	r3, #128	; 0x80
 800f298:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800f29c:	2000      	movs	r0, #0
 800f29e:	4770      	bx	lr

0800f2a0 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	4770      	bx	lr

0800f2a4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f2a4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800f2a8:	b280      	uxth	r0, r0
 800f2aa:	4770      	bx	lr

0800f2ac <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f2ac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f2b0:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f2b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f2b6:	085b      	lsrs	r3, r3, #1
 800f2b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d100      	bne.n	800f2c2 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800f2c0:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800f2c2:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800f2c6:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 800f2ca:	e7f7      	b.n	800f2bc <USB_WritePMA+0x10>

0800f2cc <USB_EPStartXfer>:
{
 800f2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ce:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800f2d0:	7849      	ldrb	r1, [r1, #1]
 800f2d2:	7b22      	ldrb	r2, [r4, #12]
 800f2d4:	2901      	cmp	r1, #1
{
 800f2d6:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800f2d8:	f040 8187 	bne.w	800f5ea <USB_EPStartXfer+0x31e>
    if (ep->xfer_len > ep->maxpacket)
 800f2dc:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800f2e0:	69a6      	ldr	r6, [r4, #24]
 800f2e2:	6961      	ldr	r1, [r4, #20]
 800f2e4:	4566      	cmp	r6, ip
 800f2e6:	bf28      	it	cs
 800f2e8:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 800f2ea:	bb0a      	cbnz	r2, 800f330 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f2ec:	b2b6      	uxth	r6, r6
 800f2ee:	88e2      	ldrh	r2, [r4, #6]
 800f2f0:	4633      	mov	r3, r6
 800f2f2:	f7ff ffdb 	bl	800f2ac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f2f6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f2fa:	7823      	ldrb	r3, [r4, #0]
 800f2fc:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800f300:	fa11 f282 	uxtah	r2, r1, r2
 800f304:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800f308:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f30a:	7822      	ldrb	r2, [r4, #0]
 800f30c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800f310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f318:	041b      	lsls	r3, r3, #16
 800f31a:	0c1b      	lsrs	r3, r3, #16
 800f31c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f328:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800f32c:	2000      	movs	r0, #0
}
 800f32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 800f330:	78e2      	ldrb	r2, [r4, #3]
 800f332:	6a23      	ldr	r3, [r4, #32]
 800f334:	7827      	ldrb	r7, [r4, #0]
 800f336:	2a02      	cmp	r2, #2
 800f338:	f040 813e 	bne.w	800f5b8 <USB_EPStartXfer+0x2ec>
        if (ep->xfer_len_db > ep->maxpacket)
 800f33c:	459c      	cmp	ip, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f33e:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800f342:	f080 8120 	bcs.w	800f586 <USB_EPStartXfer+0x2ba>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f346:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800f34a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f34e:	0412      	lsls	r2, r2, #16
 800f350:	0c12      	lsrs	r2, r2, #16
 800f352:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800f356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f35a:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f35e:	7820      	ldrb	r0, [r4, #0]
 800f360:	f835 2020 	ldrh.w	r2, [r5, r0, lsl #2]
          ep->xfer_len_db -= len;
 800f364:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f366:	f012 0f40 	tst.w	r2, #64	; 0x40
          ep->xfer_len_db -= len;
 800f36a:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f36c:	7862      	ldrb	r2, [r4, #1]
 800f36e:	b2b3      	uxth	r3, r6
 800f370:	f000 8086 	beq.w	800f480 <USB_EPStartXfer+0x1b4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f374:	2a00      	cmp	r2, #0
 800f376:	d153      	bne.n	800f420 <USB_EPStartXfer+0x154>
 800f378:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f37c:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 800f380:	fa17 f282 	uxtah	r2, r7, r2
 800f384:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800f388:	2e00      	cmp	r6, #0
 800f38a:	d138      	bne.n	800f3fe <USB_EPStartXfer+0x132>
 800f38c:	8810      	ldrh	r0, [r2, #0]
 800f38e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800f392:	0400      	lsls	r0, r0, #16
 800f394:	0c00      	lsrs	r0, r0, #16
 800f396:	8010      	strh	r0, [r2, #0]
 800f398:	8810      	ldrh	r0, [r2, #0]
 800f39a:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800f39e:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800f3a2:	b280      	uxth	r0, r0
 800f3a4:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f3a6:	8962      	ldrh	r2, [r4, #10]
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	f7ff ff7f 	bl	800f2ac <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800f3ae:	6a20      	ldr	r0, [r4, #32]
 800f3b0:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800f3b2:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f3b4:	7862      	ldrb	r2, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800f3b6:	4298      	cmp	r0, r3
              ep->xfer_len_db -= len;
 800f3b8:	bf8c      	ite	hi
 800f3ba:	1b83      	subhi	r3, r0, r6
              ep->xfer_len_db = 0U;
 800f3bc:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 800f3be:	4431      	add	r1, r6
 800f3c0:	bf88      	it	hi
 800f3c2:	4630      	movhi	r0, r6
 800f3c4:	6223      	str	r3, [r4, #32]
 800f3c6:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f3c8:	b283      	uxth	r3, r0
 800f3ca:	2a00      	cmp	r2, #0
 800f3cc:	d14b      	bne.n	800f466 <USB_EPStartXfer+0x19a>
 800f3ce:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f3d2:	7826      	ldrb	r6, [r4, #0]
 800f3d4:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800f3d8:	fa17 f282 	uxtah	r2, r7, r2
 800f3dc:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 800f3e0:	bb50      	cbnz	r0, 800f438 <USB_EPStartXfer+0x16c>
 800f3e2:	8810      	ldrh	r0, [r2, #0]
 800f3e4:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800f3e8:	0400      	lsls	r0, r0, #16
 800f3ea:	0c00      	lsrs	r0, r0, #16
 800f3ec:	8010      	strh	r0, [r2, #0]
 800f3ee:	8810      	ldrh	r0, [r2, #0]
 800f3f0:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800f3f4:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800f3f8:	b280      	uxth	r0, r0
 800f3fa:	8010      	strh	r0, [r2, #0]
 800f3fc:	e025      	b.n	800f44a <USB_EPStartXfer+0x17e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f3fe:	2e3e      	cmp	r6, #62	; 0x3e
 800f400:	d805      	bhi.n	800f40e <USB_EPStartXfer+0x142>
 800f402:	0870      	lsrs	r0, r6, #1
 800f404:	07f7      	lsls	r7, r6, #31
 800f406:	bf48      	it	mi
 800f408:	3001      	addmi	r0, #1
 800f40a:	0280      	lsls	r0, r0, #10
 800f40c:	e7c9      	b.n	800f3a2 <USB_EPStartXfer+0xd6>
 800f40e:	0977      	lsrs	r7, r6, #5
 800f410:	06f0      	lsls	r0, r6, #27
 800f412:	4895      	ldr	r0, [pc, #596]	; (800f668 <USB_EPStartXfer+0x39c>)
 800f414:	bf08      	it	eq
 800f416:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800f41a:	ea40 2087 	orr.w	r0, r0, r7, lsl #10
 800f41e:	e7c0      	b.n	800f3a2 <USB_EPStartXfer+0xd6>
 800f420:	2a01      	cmp	r2, #1
 800f422:	d1c0      	bne.n	800f3a6 <USB_EPStartXfer+0xda>
 800f424:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f428:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 800f42c:	fa17 f282 	uxtah	r2, r7, r2
 800f430:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800f434:	8013      	strh	r3, [r2, #0]
 800f436:	e7b6      	b.n	800f3a6 <USB_EPStartXfer+0xda>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f438:	283e      	cmp	r0, #62	; 0x3e
 800f43a:	d80b      	bhi.n	800f454 <USB_EPStartXfer+0x188>
 800f43c:	0846      	lsrs	r6, r0, #1
 800f43e:	07c7      	lsls	r7, r0, #31
 800f440:	bf48      	it	mi
 800f442:	3601      	addmi	r6, #1
 800f444:	02b6      	lsls	r6, r6, #10
 800f446:	b2b6      	uxth	r6, r6
 800f448:	8016      	strh	r6, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f44a:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f44c:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f44e:	f7ff ff2d 	bl	800f2ac <USB_WritePMA>
 800f452:	e75a      	b.n	800f30a <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f454:	0946      	lsrs	r6, r0, #5
 800f456:	06c0      	lsls	r0, r0, #27
 800f458:	4883      	ldr	r0, [pc, #524]	; (800f668 <USB_EPStartXfer+0x39c>)
 800f45a:	bf08      	it	eq
 800f45c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800f460:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800f464:	e7c8      	b.n	800f3f8 <USB_EPStartXfer+0x12c>
 800f466:	2a01      	cmp	r2, #1
 800f468:	d1ef      	bne.n	800f44a <USB_EPStartXfer+0x17e>
 800f46a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f46e:	7820      	ldrb	r0, [r4, #0]
 800f470:	f205 4604 	addw	r6, r5, #1028	; 0x404
 800f474:	fa16 f282 	uxtah	r2, r6, r2
 800f478:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800f47c:	8013      	strh	r3, [r2, #0]
 800f47e:	e7e4      	b.n	800f44a <USB_EPStartXfer+0x17e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f480:	2a00      	cmp	r2, #0
 800f482:	d153      	bne.n	800f52c <USB_EPStartXfer+0x260>
 800f484:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f488:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800f48c:	fa17 f282 	uxtah	r2, r7, r2
 800f490:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800f494:	2e00      	cmp	r6, #0
 800f496:	d138      	bne.n	800f50a <USB_EPStartXfer+0x23e>
 800f498:	8810      	ldrh	r0, [r2, #0]
 800f49a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800f49e:	0400      	lsls	r0, r0, #16
 800f4a0:	0c00      	lsrs	r0, r0, #16
 800f4a2:	8010      	strh	r0, [r2, #0]
 800f4a4:	8810      	ldrh	r0, [r2, #0]
 800f4a6:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800f4aa:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800f4ae:	b280      	uxth	r0, r0
 800f4b0:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f4b2:	8922      	ldrh	r2, [r4, #8]
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	f7ff fef9 	bl	800f2ac <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800f4ba:	6a20      	ldr	r0, [r4, #32]
 800f4bc:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800f4be:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f4c0:	7862      	ldrb	r2, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800f4c2:	4298      	cmp	r0, r3
              ep->xfer_len_db -= len;
 800f4c4:	bf8c      	ite	hi
 800f4c6:	1b83      	subhi	r3, r0, r6
              ep->xfer_len_db = 0U;
 800f4c8:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 800f4ca:	4431      	add	r1, r6
 800f4cc:	bf88      	it	hi
 800f4ce:	4630      	movhi	r0, r6
 800f4d0:	6223      	str	r3, [r4, #32]
 800f4d2:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f4d4:	b283      	uxth	r3, r0
 800f4d6:	2a00      	cmp	r2, #0
 800f4d8:	d148      	bne.n	800f56c <USB_EPStartXfer+0x2a0>
 800f4da:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f4de:	7826      	ldrb	r6, [r4, #0]
 800f4e0:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 800f4e4:	fa17 f282 	uxtah	r2, r7, r2
 800f4e8:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 800f4ec:	bb50      	cbnz	r0, 800f544 <USB_EPStartXfer+0x278>
 800f4ee:	8810      	ldrh	r0, [r2, #0]
 800f4f0:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800f4f4:	0400      	lsls	r0, r0, #16
 800f4f6:	0c00      	lsrs	r0, r0, #16
 800f4f8:	8010      	strh	r0, [r2, #0]
 800f4fa:	8810      	ldrh	r0, [r2, #0]
 800f4fc:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800f500:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800f504:	b280      	uxth	r0, r0
 800f506:	8010      	strh	r0, [r2, #0]
 800f508:	e025      	b.n	800f556 <USB_EPStartXfer+0x28a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f50a:	2e3e      	cmp	r6, #62	; 0x3e
 800f50c:	d805      	bhi.n	800f51a <USB_EPStartXfer+0x24e>
 800f50e:	0870      	lsrs	r0, r6, #1
 800f510:	07f7      	lsls	r7, r6, #31
 800f512:	bf48      	it	mi
 800f514:	3001      	addmi	r0, #1
 800f516:	0280      	lsls	r0, r0, #10
 800f518:	e7c9      	b.n	800f4ae <USB_EPStartXfer+0x1e2>
 800f51a:	0977      	lsrs	r7, r6, #5
 800f51c:	06f0      	lsls	r0, r6, #27
 800f51e:	4852      	ldr	r0, [pc, #328]	; (800f668 <USB_EPStartXfer+0x39c>)
 800f520:	bf08      	it	eq
 800f522:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800f526:	ea40 2087 	orr.w	r0, r0, r7, lsl #10
 800f52a:	e7c0      	b.n	800f4ae <USB_EPStartXfer+0x1e2>
 800f52c:	2a01      	cmp	r2, #1
 800f52e:	d1c0      	bne.n	800f4b2 <USB_EPStartXfer+0x1e6>
 800f530:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f534:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800f538:	fa17 f282 	uxtah	r2, r7, r2
 800f53c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800f540:	8013      	strh	r3, [r2, #0]
 800f542:	e7b6      	b.n	800f4b2 <USB_EPStartXfer+0x1e6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f544:	283e      	cmp	r0, #62	; 0x3e
 800f546:	d808      	bhi.n	800f55a <USB_EPStartXfer+0x28e>
 800f548:	0846      	lsrs	r6, r0, #1
 800f54a:	07c0      	lsls	r0, r0, #31
 800f54c:	bf48      	it	mi
 800f54e:	3601      	addmi	r6, #1
 800f550:	02b6      	lsls	r6, r6, #10
 800f552:	b2b6      	uxth	r6, r6
 800f554:	8016      	strh	r6, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f556:	8962      	ldrh	r2, [r4, #10]
 800f558:	e778      	b.n	800f44c <USB_EPStartXfer+0x180>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f55a:	0946      	lsrs	r6, r0, #5
 800f55c:	06c7      	lsls	r7, r0, #27
 800f55e:	4842      	ldr	r0, [pc, #264]	; (800f668 <USB_EPStartXfer+0x39c>)
 800f560:	bf08      	it	eq
 800f562:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800f566:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800f56a:	e7cb      	b.n	800f504 <USB_EPStartXfer+0x238>
 800f56c:	2a01      	cmp	r2, #1
 800f56e:	d1f2      	bne.n	800f556 <USB_EPStartXfer+0x28a>
 800f570:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f574:	7820      	ldrb	r0, [r4, #0]
 800f576:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 800f57a:	fa16 f282 	uxtah	r2, r6, r2
 800f57e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800f582:	8013      	strh	r3, [r2, #0]
 800f584:	e7e7      	b.n	800f556 <USB_EPStartXfer+0x28a>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f586:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800f58a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f58e:	0412      	lsls	r2, r2, #16
 800f590:	0c12      	lsrs	r2, r2, #16
 800f592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f59a:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f59e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800f5a2:	7826      	ldrb	r6, [r4, #0]
 800f5a4:	f200 4704 	addw	r7, r0, #1028	; 0x404
 800f5a8:	fa17 f282 	uxtah	r2, r7, r2
 800f5ac:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f5b4:	8922      	ldrh	r2, [r4, #8]
 800f5b6:	e74a      	b.n	800f44e <USB_EPStartXfer+0x182>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f5b8:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 800f5bc:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f5be:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 800f5c2:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f5c4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800f5c8:	b2b3      	uxth	r3, r6
 800f5ca:	ea4f 1707 	mov.w	r7, r7, lsl #4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f5ce:	d006      	beq.n	800f5de <USB_EPStartXfer+0x312>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f5d0:	f200 460c 	addw	r6, r0, #1036	; 0x40c
 800f5d4:	fa16 f282 	uxtah	r2, r6, r2
 800f5d8:	53d3      	strh	r3, [r2, r7]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f5da:	8962      	ldrh	r2, [r4, #10]
 800f5dc:	e737      	b.n	800f44e <USB_EPStartXfer+0x182>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f5de:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800f5e2:	fa16 f282 	uxtah	r2, r6, r2
 800f5e6:	53d3      	strh	r3, [r2, r7]
 800f5e8:	e7e4      	b.n	800f5b4 <USB_EPStartXfer+0x2e8>
    if (ep->doublebuffer == 0U)
 800f5ea:	2a00      	cmp	r2, #0
 800f5ec:	d13e      	bne.n	800f66c <USB_EPStartXfer+0x3a0>
      if (ep->xfer_len > ep->maxpacket)
 800f5ee:	69a3      	ldr	r3, [r4, #24]
 800f5f0:	6921      	ldr	r1, [r4, #16]
 800f5f2:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800f5f4:	bf84      	itt	hi
 800f5f6:	1a5a      	subhi	r2, r3, r1
 800f5f8:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f5fa:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800f5fe:	61a2      	str	r2, [r4, #24]
 800f600:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800f604:	7822      	ldrb	r2, [r4, #0]
 800f606:	fa10 f181 	uxtah	r1, r0, r1
 800f60a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800f60e:	b96b      	cbnz	r3, 800f62c <USB_EPStartXfer+0x360>
 800f610:	880b      	ldrh	r3, [r1, #0]
 800f612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f616:	041b      	lsls	r3, r3, #16
 800f618:	0c1b      	lsrs	r3, r3, #16
 800f61a:	800b      	strh	r3, [r1, #0]
 800f61c:	880b      	ldrh	r3, [r1, #0]
 800f61e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f626:	b29b      	uxth	r3, r3
 800f628:	800b      	strh	r3, [r1, #0]
 800f62a:	e008      	b.n	800f63e <USB_EPStartXfer+0x372>
 800f62c:	2b3e      	cmp	r3, #62	; 0x3e
 800f62e:	d812      	bhi.n	800f656 <USB_EPStartXfer+0x38a>
 800f630:	085a      	lsrs	r2, r3, #1
 800f632:	07d8      	lsls	r0, r3, #31
 800f634:	bf48      	it	mi
 800f636:	3201      	addmi	r2, #1
 800f638:	0292      	lsls	r2, r2, #10
 800f63a:	b292      	uxth	r2, r2
 800f63c:	800a      	strh	r2, [r1, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f63e:	7822      	ldrb	r2, [r4, #0]
 800f640:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800f644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f64c:	041b      	lsls	r3, r3, #16
 800f64e:	0c1b      	lsrs	r3, r3, #16
 800f650:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800f654:	e664      	b.n	800f320 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f656:	095a      	lsrs	r2, r3, #5
 800f658:	06db      	lsls	r3, r3, #27
 800f65a:	4b03      	ldr	r3, [pc, #12]	; (800f668 <USB_EPStartXfer+0x39c>)
 800f65c:	bf08      	it	eq
 800f65e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800f662:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800f666:	e7de      	b.n	800f626 <USB_EPStartXfer+0x35a>
 800f668:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 800f66c:	78e3      	ldrb	r3, [r4, #3]
 800f66e:	2b02      	cmp	r3, #2
 800f670:	f040 8081 	bne.w	800f776 <USB_EPStartXfer+0x4aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f674:	b9c1      	cbnz	r1, 800f6a8 <USB_EPStartXfer+0x3dc>
 800f676:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800f67a:	7823      	ldrb	r3, [r4, #0]
 800f67c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800f680:	fa12 f181 	uxtah	r1, r2, r1
 800f684:	6922      	ldr	r2, [r4, #16]
 800f686:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800f68a:	2a00      	cmp	r2, #0
 800f68c:	d145      	bne.n	800f71a <USB_EPStartXfer+0x44e>
 800f68e:	880b      	ldrh	r3, [r1, #0]
 800f690:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f694:	041b      	lsls	r3, r3, #16
 800f696:	0c1b      	lsrs	r3, r3, #16
 800f698:	800b      	strh	r3, [r1, #0]
 800f69a:	880b      	ldrh	r3, [r1, #0]
 800f69c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	800b      	strh	r3, [r1, #0]
 800f6a8:	7862      	ldrb	r2, [r4, #1]
 800f6aa:	7823      	ldrb	r3, [r4, #0]
 800f6ac:	2a00      	cmp	r2, #0
 800f6ae:	d156      	bne.n	800f75e <USB_EPStartXfer+0x492>
 800f6b0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f6b4:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800f6b8:	fa11 f282 	uxtah	r2, r1, r2
 800f6bc:	6921      	ldr	r1, [r4, #16]
 800f6be:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800f6c2:	2900      	cmp	r1, #0
 800f6c4:	d13a      	bne.n	800f73c <USB_EPStartXfer+0x470>
 800f6c6:	881a      	ldrh	r2, [r3, #0]
 800f6c8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800f6cc:	0412      	lsls	r2, r2, #16
 800f6ce:	0c12      	lsrs	r2, r2, #16
 800f6d0:	801a      	strh	r2, [r3, #0]
 800f6d2:	881a      	ldrh	r2, [r3, #0]
 800f6d4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800f6d8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800f6dc:	b292      	uxth	r2, r2
 800f6de:	801a      	strh	r2, [r3, #0]
        if (ep->xfer_count != 0U)
 800f6e0:	69e3      	ldr	r3, [r4, #28]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d0ab      	beq.n	800f63e <USB_EPStartXfer+0x372>
 800f6e6:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f6e8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f6ec:	f244 0340 	movw	r3, #16448	; 0x4040
 800f6f0:	ea03 0001 	and.w	r0, r3, r1
 800f6f4:	438b      	bics	r3, r1
 800f6f6:	d001      	beq.n	800f6fc <USB_EPStartXfer+0x430>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d1a0      	bne.n	800f63e <USB_EPStartXfer+0x372>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800f6fc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800f700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f708:	041b      	lsls	r3, r3, #16
 800f70a:	0c1b      	lsrs	r3, r3, #16
 800f70c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f710:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f714:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800f718:	e791      	b.n	800f63e <USB_EPStartXfer+0x372>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f71a:	2a3e      	cmp	r2, #62	; 0x3e
 800f71c:	d805      	bhi.n	800f72a <USB_EPStartXfer+0x45e>
 800f71e:	0853      	lsrs	r3, r2, #1
 800f720:	07d7      	lsls	r7, r2, #31
 800f722:	bf48      	it	mi
 800f724:	3301      	addmi	r3, #1
 800f726:	029b      	lsls	r3, r3, #10
 800f728:	e7bc      	b.n	800f6a4 <USB_EPStartXfer+0x3d8>
 800f72a:	0950      	lsrs	r0, r2, #5
 800f72c:	4b49      	ldr	r3, [pc, #292]	; (800f854 <USB_EPStartXfer+0x588>)
 800f72e:	06d6      	lsls	r6, r2, #27
 800f730:	bf08      	it	eq
 800f732:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800f736:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800f73a:	e7b3      	b.n	800f6a4 <USB_EPStartXfer+0x3d8>
 800f73c:	293e      	cmp	r1, #62	; 0x3e
 800f73e:	d805      	bhi.n	800f74c <USB_EPStartXfer+0x480>
 800f740:	084a      	lsrs	r2, r1, #1
 800f742:	07c9      	lsls	r1, r1, #31
 800f744:	bf48      	it	mi
 800f746:	3201      	addmi	r2, #1
 800f748:	0292      	lsls	r2, r2, #10
 800f74a:	e7c7      	b.n	800f6dc <USB_EPStartXfer+0x410>
 800f74c:	0948      	lsrs	r0, r1, #5
 800f74e:	06ca      	lsls	r2, r1, #27
 800f750:	4a40      	ldr	r2, [pc, #256]	; (800f854 <USB_EPStartXfer+0x588>)
 800f752:	bf08      	it	eq
 800f754:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800f758:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800f75c:	e7be      	b.n	800f6dc <USB_EPStartXfer+0x410>
 800f75e:	2a01      	cmp	r2, #1
 800f760:	d1be      	bne.n	800f6e0 <USB_EPStartXfer+0x414>
 800f762:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800f766:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800f76a:	fa11 f282 	uxtah	r2, r1, r2
 800f76e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800f772:	8a22      	ldrh	r2, [r4, #16]
 800f774:	e7b3      	b.n	800f6de <USB_EPStartXfer+0x412>
      else if (ep->type == EP_TYPE_ISOC)
 800f776:	2b01      	cmp	r3, #1
 800f778:	d16a      	bne.n	800f850 <USB_EPStartXfer+0x584>
        if (ep->xfer_len > ep->maxpacket)
 800f77a:	69a3      	ldr	r3, [r4, #24]
 800f77c:	6922      	ldr	r2, [r4, #16]
 800f77e:	4293      	cmp	r3, r2
          ep->xfer_len -= len;
 800f780:	bf8a      	itet	hi
 800f782:	1a98      	subhi	r0, r3, r2
          ep->xfer_len = 0U;
 800f784:	2000      	movls	r0, #0
 800f786:	4613      	movhi	r3, r2
 800f788:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f78a:	b9b1      	cbnz	r1, 800f7ba <USB_EPStartXfer+0x4ee>
 800f78c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800f790:	7822      	ldrb	r2, [r4, #0]
 800f792:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800f796:	fa10 f181 	uxtah	r1, r0, r1
 800f79a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800f79e:	bb3b      	cbnz	r3, 800f7f0 <USB_EPStartXfer+0x524>
 800f7a0:	880a      	ldrh	r2, [r1, #0]
 800f7a2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800f7a6:	0412      	lsls	r2, r2, #16
 800f7a8:	0c12      	lsrs	r2, r2, #16
 800f7aa:	800a      	strh	r2, [r1, #0]
 800f7ac:	880a      	ldrh	r2, [r1, #0]
 800f7ae:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800f7b2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800f7b6:	b292      	uxth	r2, r2
 800f7b8:	800a      	strh	r2, [r1, #0]
 800f7ba:	7861      	ldrb	r1, [r4, #1]
 800f7bc:	7822      	ldrb	r2, [r4, #0]
 800f7be:	2900      	cmp	r1, #0
 800f7c0:	d13a      	bne.n	800f838 <USB_EPStartXfer+0x56c>
 800f7c2:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800f7c6:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800f7ca:	fa10 f181 	uxtah	r1, r0, r1
 800f7ce:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800f7d2:	b9f3      	cbnz	r3, 800f812 <USB_EPStartXfer+0x546>
 800f7d4:	8813      	ldrh	r3, [r2, #0]
 800f7d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f7da:	041b      	lsls	r3, r3, #16
 800f7dc:	0c1b      	lsrs	r3, r3, #16
 800f7de:	8013      	strh	r3, [r2, #0]
 800f7e0:	8813      	ldrh	r3, [r2, #0]
 800f7e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	8013      	strh	r3, [r2, #0]
 800f7ee:	e726      	b.n	800f63e <USB_EPStartXfer+0x372>
 800f7f0:	2b3e      	cmp	r3, #62	; 0x3e
 800f7f2:	d805      	bhi.n	800f800 <USB_EPStartXfer+0x534>
 800f7f4:	085a      	lsrs	r2, r3, #1
 800f7f6:	07df      	lsls	r7, r3, #31
 800f7f8:	bf48      	it	mi
 800f7fa:	3201      	addmi	r2, #1
 800f7fc:	0292      	lsls	r2, r2, #10
 800f7fe:	e7da      	b.n	800f7b6 <USB_EPStartXfer+0x4ea>
 800f800:	0958      	lsrs	r0, r3, #5
 800f802:	4a14      	ldr	r2, [pc, #80]	; (800f854 <USB_EPStartXfer+0x588>)
 800f804:	06de      	lsls	r6, r3, #27
 800f806:	bf08      	it	eq
 800f808:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800f80c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800f810:	e7d1      	b.n	800f7b6 <USB_EPStartXfer+0x4ea>
 800f812:	2b3e      	cmp	r3, #62	; 0x3e
 800f814:	d807      	bhi.n	800f826 <USB_EPStartXfer+0x55a>
 800f816:	0859      	lsrs	r1, r3, #1
 800f818:	07d8      	lsls	r0, r3, #31
 800f81a:	bf48      	it	mi
 800f81c:	3101      	addmi	r1, #1
 800f81e:	0289      	lsls	r1, r1, #10
 800f820:	b289      	uxth	r1, r1
 800f822:	8011      	strh	r1, [r2, #0]
 800f824:	e70b      	b.n	800f63e <USB_EPStartXfer+0x372>
 800f826:	0959      	lsrs	r1, r3, #5
 800f828:	06db      	lsls	r3, r3, #27
 800f82a:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <USB_EPStartXfer+0x588>)
 800f82c:	bf08      	it	eq
 800f82e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800f832:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800f836:	e7d8      	b.n	800f7ea <USB_EPStartXfer+0x51e>
 800f838:	2901      	cmp	r1, #1
 800f83a:	f47f af00 	bne.w	800f63e <USB_EPStartXfer+0x372>
 800f83e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800f842:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800f846:	fa10 f181 	uxtah	r1, r0, r1
 800f84a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800f84e:	e7cc      	b.n	800f7ea <USB_EPStartXfer+0x51e>
        return HAL_ERROR;
 800f850:	2001      	movs	r0, #1
 800f852:	e56c      	b.n	800f32e <USB_EPStartXfer+0x62>
 800f854:	ffff8000 	.word	0xffff8000

0800f858 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f858:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 800f85c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f85e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f862:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 800f864:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f866:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 800f868:	462e      	mov	r6, r5
 800f86a:	3402      	adds	r4, #2
 800f86c:	b936      	cbnz	r6, 800f87c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800f86e:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800f870:	bf44      	itt	mi
 800f872:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f876:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800f87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 800f87c:	f837 0b04 	ldrh.w	r0, [r7], #4
 800f880:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f882:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800f886:	0a00      	lsrs	r0, r0, #8
 800f888:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 800f88c:	3e01      	subs	r6, #1
 800f88e:	e7ec      	b.n	800f86a <USB_ReadPMA+0x12>

0800f890 <MX_FATFS_DeInit>:
char USERPath[4];   /* USER logical drive path */
FATFS USERFatFS;    /* File system object for USER logical drive */
FIL USERFile;       /* File object for USER */

/* USER CODE BEGIN Variables */
void MX_FATFS_DeInit(void) {
 800f890:	b508      	push	{r3, lr}
	retUSER = FATFS_UnLinkDriver(USERPath);
 800f892:	4803      	ldr	r0, [pc, #12]	; (800f8a0 <MX_FATFS_DeInit+0x10>)
 800f894:	f002 fb5a 	bl	8011f4c <FATFS_UnLinkDriver>
 800f898:	4b02      	ldr	r3, [pc, #8]	; (800f8a4 <MX_FATFS_DeInit+0x14>)
 800f89a:	7018      	strb	r0, [r3, #0]
}
 800f89c:	bd08      	pop	{r3, pc}
 800f89e:	bf00      	nop
 800f8a0:	2000383c 	.word	0x2000383c
 800f8a4:	20003840 	.word	0x20003840

0800f8a8 <MX_FATFS_Init>:
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f8a8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f8aa:	490a      	ldr	r1, [pc, #40]	; (800f8d4 <MX_FATFS_Init+0x2c>)
 800f8ac:	480a      	ldr	r0, [pc, #40]	; (800f8d8 <MX_FATFS_Init+0x30>)
 800f8ae:	f002 fb31 	bl	8011f14 <FATFS_LinkDriver>
 800f8b2:	4b0a      	ldr	r3, [pc, #40]	; (800f8dc <MX_FATFS_Init+0x34>)

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  memset(&USERFatFS, 0, sizeof(USERFatFS));
 800f8b4:	f44f 720c 	mov.w	r2, #560	; 0x230
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f8b8:	7018      	strb	r0, [r3, #0]
  memset(&USERFatFS, 0, sizeof(USERFatFS));
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	4808      	ldr	r0, [pc, #32]	; (800f8e0 <MX_FATFS_Init+0x38>)
 800f8be:	f002 fdbf 	bl	8012440 <memset>
  memset(&USERFile, 0, sizeof(USERFile));
  /* USER CODE END Init */
}
 800f8c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memset(&USERFile, 0, sizeof(USERFile));
 800f8c6:	4807      	ldr	r0, [pc, #28]	; (800f8e4 <MX_FATFS_Init+0x3c>)
 800f8c8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	f002 bdb7 	b.w	8012440 <memset>
 800f8d2:	bf00      	nop
 800f8d4:	2000383c 	.word	0x2000383c
 800f8d8:	2000000c 	.word	0x2000000c
 800f8dc:	20003840 	.word	0x20003840
 800f8e0:	20002f7c 	.word	0x20002f7c
 800f8e4:	20002d50 	.word	0x20002d50

0800f8e8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	4770      	bx	lr

0800f8ec <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800f8ec:	f000 b908 	b.w	800fb00 <USER_SPI_initialize>

0800f8f0 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800f8f0:	f000 b9ae 	b.w	800fc50 <USER_SPI_status>

0800f8f4 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800f8f4:	f000 b9b6 	b.w	800fc64 <USER_SPI_read>

0800f8f8 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800f8f8:	f000 b9f4 	b.w	800fce4 <USER_SPI_write>

0800f8fc <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800f8fc:	f000 ba56 	b.w	800fdac <USER_SPI_ioctl>

0800f900 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800f900:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BYTE rxDat;
    HAL_SPI_TransmitReceive(SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800f902:	2332      	movs	r3, #50	; 0x32
{
 800f904:	f88d 000f 	strb.w	r0, [sp, #15]
    HAL_SPI_TransmitReceive(SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800f908:	4807      	ldr	r0, [pc, #28]	; (800f928 <xchg_spi+0x28>)
 800f90a:	9300      	str	r3, [sp, #0]
 800f90c:	f10d 0217 	add.w	r2, sp, #23
 800f910:	2301      	movs	r3, #1
 800f912:	f10d 010f 	add.w	r1, sp, #15
 800f916:	6800      	ldr	r0, [r0, #0]
 800f918:	f7fd ff15 	bl	800d746 <HAL_SPI_TransmitReceive>
    return rxDat;
}
 800f91c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800f920:	b007      	add	sp, #28
 800f922:	f85d fb04 	ldr.w	pc, [sp], #4
 800f926:	bf00      	nop
 800f928:	20002a88 	.word	0x20002a88

0800f92c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800f92c:	b570      	push	{r4, r5, r6, lr}
 800f92e:	4605      	mov	r5, r0
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800f930:	f7fa ff30 	bl	800a794 <HAL_GetTick>
 800f934:	4606      	mov	r6, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
	do {
		d = xchg_spi(0xFF);
 800f936:	20ff      	movs	r0, #255	; 0xff
 800f938:	f7ff ffe2 	bl	800f900 <xchg_spi>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800f93c:	28ff      	cmp	r0, #255	; 0xff
		d = xchg_spi(0xFF);
 800f93e:	4604      	mov	r4, r0
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800f940:	d004      	beq.n	800f94c <wait_ready+0x20>
 800f942:	f7fa ff27 	bl	800a794 <HAL_GetTick>
 800f946:	1b83      	subs	r3, r0, r6
 800f948:	42ab      	cmp	r3, r5
 800f94a:	d3f4      	bcc.n	800f936 <wait_ready+0xa>

	return (d == 0xFF) ? 1 : 0;
}
 800f94c:	f1a4 03ff 	sub.w	r3, r4, #255	; 0xff
 800f950:	4258      	negs	r0, r3
 800f952:	4158      	adcs	r0, r3
 800f954:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f958 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800f958:	b508      	push	{r3, lr}
	CS_HIGH();		/* Set CS# high */
 800f95a:	4b05      	ldr	r3, [pc, #20]	; (800f970 <despiselect+0x18>)
 800f95c:	4805      	ldr	r0, [pc, #20]	; (800f974 <despiselect+0x1c>)
 800f95e:	8819      	ldrh	r1, [r3, #0]
 800f960:	2201      	movs	r2, #1
 800f962:	f7fb fcb9 	bl	800b2d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */

}
 800f966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800f96a:	20ff      	movs	r0, #255	; 0xff
 800f96c:	f7ff bfc8 	b.w	800f900 <xchg_spi>
 800f970:	20002a86 	.word	0x20002a86
 800f974:	48000c00 	.word	0x48000c00

0800f978 <spiselect>:
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
 800f978:	4b0a      	ldr	r3, [pc, #40]	; (800f9a4 <spiselect+0x2c>)
 800f97a:	480b      	ldr	r0, [pc, #44]	; (800f9a8 <spiselect+0x30>)
 800f97c:	8819      	ldrh	r1, [r3, #0]
{
 800f97e:	b510      	push	{r4, lr}
	CS_LOW();		/* Set CS# low */
 800f980:	2200      	movs	r2, #0
 800f982:	f7fb fca9 	bl	800b2d8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800f986:	20ff      	movs	r0, #255	; 0xff
 800f988:	f7ff ffba 	bl	800f900 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800f98c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f990:	f7ff ffcc 	bl	800f92c <wait_ready>
 800f994:	4604      	mov	r4, r0
 800f996:	b918      	cbnz	r0, 800f9a0 <spiselect+0x28>

	despiselect();
 800f998:	f7ff ffde 	bl	800f958 <despiselect>
	return 0;	/* Timeout */
}
 800f99c:	4620      	mov	r0, r4
 800f99e:	bd10      	pop	{r4, pc}
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800f9a0:	2401      	movs	r4, #1
 800f9a2:	e7fb      	b.n	800f99c <spiselect+0x24>
 800f9a4:	20002a86 	.word	0x20002a86
 800f9a8:	48000c00 	.word	0x48000c00

0800f9ac <send_cmd>:
)
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800f9ac:	0602      	lsls	r2, r0, #24
{
 800f9ae:	b538      	push	{r3, r4, r5, lr}
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	460d      	mov	r5, r1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800f9b4:	d507      	bpl.n	800f9c6 <send_cmd+0x1a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	2037      	movs	r0, #55	; 0x37
 800f9ba:	f7ff fff7 	bl	800f9ac <send_cmd>
		if (res > 1) return res;
 800f9be:	2801      	cmp	r0, #1
 800f9c0:	d82b      	bhi.n	800fa1a <send_cmd+0x6e>
		cmd &= 0x7F;
 800f9c2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800f9c6:	2c0c      	cmp	r4, #12
 800f9c8:	d128      	bne.n	800fa1c <send_cmd+0x70>
		despiselect();
		if (!spiselect()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800f9ca:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 800f9ce:	f7ff ff97 	bl	800f900 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800f9d2:	0e28      	lsrs	r0, r5, #24
 800f9d4:	f7ff ff94 	bl	800f900 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800f9d8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 800f9dc:	f7ff ff90 	bl	800f900 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800f9e0:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800f9e4:	f7ff ff8c 	bl	800f900 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800f9e8:	b2e8      	uxtb	r0, r5
 800f9ea:	f7ff ff89 	bl	800f900 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800f9ee:	b1ec      	cbz	r4, 800fa2c <send_cmd+0x80>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800f9f0:	2c08      	cmp	r4, #8
 800f9f2:	bf14      	ite	ne
 800f9f4:	2001      	movne	r0, #1
 800f9f6:	2087      	moveq	r0, #135	; 0x87
	xchg_spi(n);
 800f9f8:	f7ff ff82 	bl	800f900 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800f9fc:	2c0c      	cmp	r4, #12
 800f9fe:	d102      	bne.n	800fa06 <send_cmd+0x5a>
 800fa00:	20ff      	movs	r0, #255	; 0xff
 800fa02:	f7ff ff7d 	bl	800f900 <xchg_spi>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800fa06:	240a      	movs	r4, #10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 800fa08:	20ff      	movs	r0, #255	; 0xff
 800fa0a:	f7ff ff79 	bl	800f900 <xchg_spi>
	} while ((res & 0x80) && --n);
 800fa0e:	0603      	lsls	r3, r0, #24
 800fa10:	d503      	bpl.n	800fa1a <send_cmd+0x6e>
 800fa12:	3c01      	subs	r4, #1
 800fa14:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800fa18:	d1f6      	bne.n	800fa08 <send_cmd+0x5c>

	return res;							/* Return received response */
}
 800fa1a:	bd38      	pop	{r3, r4, r5, pc}
		despiselect();
 800fa1c:	f7ff ff9c 	bl	800f958 <despiselect>
		if (!spiselect()) return 0xFF;
 800fa20:	f7ff ffaa 	bl	800f978 <spiselect>
 800fa24:	2800      	cmp	r0, #0
 800fa26:	d1d0      	bne.n	800f9ca <send_cmd+0x1e>
 800fa28:	20ff      	movs	r0, #255	; 0xff
 800fa2a:	e7f6      	b.n	800fa1a <send_cmd+0x6e>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800fa2c:	2095      	movs	r0, #149	; 0x95
 800fa2e:	e7e3      	b.n	800f9f8 <send_cmd+0x4c>

0800fa30 <xmit_datablock.part.0>:
int xmit_datablock (	/* 1:OK, 0:Failed */
 800fa30:	b538      	push	{r3, r4, r5, lr}
 800fa32:	1e45      	subs	r5, r0, #1
 800fa34:	f200 14ff 	addw	r4, r0, #511	; 0x1ff
		xchg_spi(*(buff+i));
 800fa38:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800fa3c:	f7ff ff60 	bl	800f900 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800fa40:	42a5      	cmp	r5, r4
 800fa42:	d1f9      	bne.n	800fa38 <xmit_datablock.part.0+0x8>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800fa44:	20ff      	movs	r0, #255	; 0xff
 800fa46:	f7ff ff5b 	bl	800f900 <xchg_spi>
 800fa4a:	20ff      	movs	r0, #255	; 0xff
 800fa4c:	f7ff ff58 	bl	800f900 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 800fa50:	20ff      	movs	r0, #255	; 0xff
 800fa52:	f7ff ff55 	bl	800f900 <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800fa56:	f000 001f 	and.w	r0, r0, #31
}
 800fa5a:	1f43      	subs	r3, r0, #5
 800fa5c:	4258      	negs	r0, r3
 800fa5e:	4158      	adcs	r0, r3
 800fa60:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fa64 <SD_init>:
	SD_SPI_HANDLE = hspi;
 800fa64:	4b02      	ldr	r3, [pc, #8]	; (800fa70 <SD_init+0xc>)
 800fa66:	6018      	str	r0, [r3, #0]
	SD_SPI_CS_Pin = SD_CS_PIN;
 800fa68:	4b02      	ldr	r3, [pc, #8]	; (800fa74 <SD_init+0x10>)
 800fa6a:	801a      	strh	r2, [r3, #0]
}
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	20002a88 	.word	0x20002a88
 800fa74:	20002a86 	.word	0x20002a86

0800fa78 <SPI_Timer_On>:
void SPI_Timer_On(uint32_t waitTicks) {
 800fa78:	b510      	push	{r4, lr}
 800fa7a:	4604      	mov	r4, r0
    spiTimerTickStart = HAL_GetTick();
 800fa7c:	f7fa fe8a 	bl	800a794 <HAL_GetTick>
 800fa80:	4b02      	ldr	r3, [pc, #8]	; (800fa8c <SPI_Timer_On+0x14>)
 800fa82:	6018      	str	r0, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800fa84:	4b02      	ldr	r3, [pc, #8]	; (800fa90 <SPI_Timer_On+0x18>)
 800fa86:	601c      	str	r4, [r3, #0]
}
 800fa88:	bd10      	pop	{r4, pc}
 800fa8a:	bf00      	nop
 800fa8c:	20003844 	.word	0x20003844
 800fa90:	20003848 	.word	0x20003848

0800fa94 <SPI_Timer_Status>:
uint8_t SPI_Timer_Status() {
 800fa94:	b508      	push	{r3, lr}
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800fa96:	f7fa fe7d 	bl	800a794 <HAL_GetTick>
 800fa9a:	4b05      	ldr	r3, [pc, #20]	; (800fab0 <SPI_Timer_Status+0x1c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	1ac0      	subs	r0, r0, r3
 800faa0:	4b04      	ldr	r3, [pc, #16]	; (800fab4 <SPI_Timer_Status+0x20>)
 800faa2:	681b      	ldr	r3, [r3, #0]
}
 800faa4:	4298      	cmp	r0, r3
 800faa6:	bf2c      	ite	cs
 800faa8:	2000      	movcs	r0, #0
 800faaa:	2001      	movcc	r0, #1
 800faac:	bd08      	pop	{r3, pc}
 800faae:	bf00      	nop
 800fab0:	20003844 	.word	0x20003844
 800fab4:	20003848 	.word	0x20003848

0800fab8 <rcvr_datablock>:
{
 800fab8:	b538      	push	{r3, r4, r5, lr}
 800faba:	4604      	mov	r4, r0
	SPI_Timer_On(200);
 800fabc:	20c8      	movs	r0, #200	; 0xc8
{
 800fabe:	460d      	mov	r5, r1
	SPI_Timer_On(200);
 800fac0:	f7ff ffda 	bl	800fa78 <SPI_Timer_On>
		token = xchg_spi(0xFF);
 800fac4:	20ff      	movs	r0, #255	; 0xff
 800fac6:	f7ff ff1b 	bl	800f900 <xchg_spi>
	} while ((token == 0xFF) && SPI_Timer_Status());
 800faca:	28ff      	cmp	r0, #255	; 0xff
 800facc:	d105      	bne.n	800fada <rcvr_datablock+0x22>
 800face:	f7ff ffe1 	bl	800fa94 <SPI_Timer_Status>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d1f6      	bne.n	800fac4 <rcvr_datablock+0xc>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800fad6:	2000      	movs	r0, #0
}
 800fad8:	bd38      	pop	{r3, r4, r5, pc}
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800fada:	28fe      	cmp	r0, #254	; 0xfe
 800fadc:	d1fb      	bne.n	800fad6 <rcvr_datablock+0x1e>
 800fade:	4425      	add	r5, r4
		*(buff+i) = xchg_spi(0xFF);
 800fae0:	20ff      	movs	r0, #255	; 0xff
 800fae2:	f7ff ff0d 	bl	800f900 <xchg_spi>
 800fae6:	f804 0b01 	strb.w	r0, [r4], #1
	for(UINT i=0; i<btr; i++) {
 800faea:	42a5      	cmp	r5, r4
 800faec:	d1f8      	bne.n	800fae0 <rcvr_datablock+0x28>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800faee:	20ff      	movs	r0, #255	; 0xff
 800faf0:	f7ff ff06 	bl	800f900 <xchg_spi>
 800faf4:	20ff      	movs	r0, #255	; 0xff
 800faf6:	f7ff ff03 	bl	800f900 <xchg_spi>
 800fafa:	2001      	movs	r0, #1
 800fafc:	e7ec      	b.n	800fad8 <rcvr_datablock+0x20>
	...

0800fb00 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800fb00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800fb04:	2800      	cmp	r0, #0
 800fb06:	f040 809a 	bne.w	800fc3e <USER_SPI_initialize+0x13e>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800fb0a:	4b4e      	ldr	r3, [pc, #312]	; (800fc44 <USER_SPI_initialize+0x144>)
 800fb0c:	781a      	ldrb	r2, [r3, #0]
 800fb0e:	f012 0f02 	tst.w	r2, #2
 800fb12:	461e      	mov	r6, r3
 800fb14:	d004      	beq.n	800fb20 <USER_SPI_initialize+0x20>
 800fb16:	7818      	ldrb	r0, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
 800fb18:	b2c0      	uxtb	r0, r0
}
 800fb1a:	b002      	add	sp, #8
 800fb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FCLK_SLOW();
 800fb20:	4f49      	ldr	r7, [pc, #292]	; (800fc48 <USER_SPI_initialize+0x148>)
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	6813      	ldr	r3, [r2, #0]
 800fb28:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800fb2c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800fb30:	6013      	str	r3, [r2, #0]
 800fb32:	240a      	movs	r4, #10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800fb34:	20ff      	movs	r0, #255	; 0xff
 800fb36:	3c01      	subs	r4, #1
 800fb38:	f7ff fee2 	bl	800f900 <xchg_spi>
 800fb3c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800fb40:	d1f8      	bne.n	800fb34 <USER_SPI_initialize+0x34>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800fb42:	4621      	mov	r1, r4
 800fb44:	4620      	mov	r0, r4
 800fb46:	f7ff ff31 	bl	800f9ac <send_cmd>
 800fb4a:	2801      	cmp	r0, #1
 800fb4c:	4605      	mov	r5, r0
 800fb4e:	d172      	bne.n	800fc36 <USER_SPI_initialize+0x136>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800fb50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fb54:	f7ff ff90 	bl	800fa78 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800fb58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb5c:	2008      	movs	r0, #8
 800fb5e:	f7ff ff25 	bl	800f9ac <send_cmd>
 800fb62:	2801      	cmp	r0, #1
 800fb64:	d14b      	bne.n	800fbfe <USER_SPI_initialize+0xfe>
 800fb66:	ad01      	add	r5, sp, #4
 800fb68:	46a8      	mov	r8, r5
 800fb6a:	2404      	movs	r4, #4
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800fb6c:	20ff      	movs	r0, #255	; 0xff
 800fb6e:	f7ff fec7 	bl	800f900 <xchg_spi>
 800fb72:	3c01      	subs	r4, #1
 800fb74:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800fb78:	f808 0b01 	strb.w	r0, [r8], #1
 800fb7c:	d1f6      	bne.n	800fb6c <USER_SPI_initialize+0x6c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800fb7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d157      	bne.n	800fc36 <USER_SPI_initialize+0x136>
 800fb86:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fb8a:	2baa      	cmp	r3, #170	; 0xaa
 800fb8c:	d153      	bne.n	800fc36 <USER_SPI_initialize+0x136>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800fb8e:	f7ff ff81 	bl	800fa94 <SPI_Timer_Status>
 800fb92:	b130      	cbz	r0, 800fba2 <USER_SPI_initialize+0xa2>
 800fb94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800fb98:	20a9      	movs	r0, #169	; 0xa9
 800fb9a:	f7ff ff07 	bl	800f9ac <send_cmd>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d1f5      	bne.n	800fb8e <USER_SPI_initialize+0x8e>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800fba2:	f7ff ff77 	bl	800fa94 <SPI_Timer_Status>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d045      	beq.n	800fc36 <USER_SPI_initialize+0x136>
 800fbaa:	2100      	movs	r1, #0
 800fbac:	203a      	movs	r0, #58	; 0x3a
 800fbae:	f7ff fefd 	bl	800f9ac <send_cmd>
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	d13f      	bne.n	800fc36 <USER_SPI_initialize+0x136>
 800fbb6:	2404      	movs	r4, #4
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800fbb8:	20ff      	movs	r0, #255	; 0xff
 800fbba:	f7ff fea1 	bl	800f900 <xchg_spi>
 800fbbe:	3c01      	subs	r4, #1
 800fbc0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800fbc4:	f805 0b01 	strb.w	r0, [r5], #1
 800fbc8:	d1f6      	bne.n	800fbb8 <USER_SPI_initialize+0xb8>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800fbca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fbce:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fbd2:	bf14      	ite	ne
 800fbd4:	240c      	movne	r4, #12
 800fbd6:	2404      	moveq	r4, #4
	CardType = ty;	/* Card type */
 800fbd8:	4b1c      	ldr	r3, [pc, #112]	; (800fc4c <USER_SPI_initialize+0x14c>)
 800fbda:	701c      	strb	r4, [r3, #0]
	despiselect();
 800fbdc:	f7ff febc 	bl	800f958 <despiselect>
	if (ty) {			/* OK */
 800fbe0:	b35c      	cbz	r4, 800fc3a <USER_SPI_initialize+0x13a>
		FCLK_FAST();			/* Set fast clock */
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	6813      	ldr	r3, [r2, #0]
 800fbe8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800fbec:	f043 0310 	orr.w	r3, r3, #16
 800fbf0:	6013      	str	r3, [r2, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800fbf2:	7833      	ldrb	r3, [r6, #0]
 800fbf4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		Stat = STA_NOINIT;
 800fbf8:	7033      	strb	r3, [r6, #0]
	return Stat;
 800fbfa:	7830      	ldrb	r0, [r6, #0]
 800fbfc:	e78c      	b.n	800fb18 <USER_SPI_initialize+0x18>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800fbfe:	4621      	mov	r1, r4
 800fc00:	20a9      	movs	r0, #169	; 0xa9
 800fc02:	f7ff fed3 	bl	800f9ac <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800fc06:	2802      	cmp	r0, #2
 800fc08:	bf36      	itet	cc
 800fc0a:	2402      	movcc	r4, #2
 800fc0c:	2401      	movcs	r4, #1
 800fc0e:	25a9      	movcc	r5, #169	; 0xa9
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800fc10:	f7ff ff40 	bl	800fa94 <SPI_Timer_Status>
 800fc14:	b128      	cbz	r0, 800fc22 <USER_SPI_initialize+0x122>
 800fc16:	2100      	movs	r1, #0
 800fc18:	4628      	mov	r0, r5
 800fc1a:	f7ff fec7 	bl	800f9ac <send_cmd>
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d1f6      	bne.n	800fc10 <USER_SPI_initialize+0x110>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800fc22:	f7ff ff37 	bl	800fa94 <SPI_Timer_Status>
 800fc26:	b130      	cbz	r0, 800fc36 <USER_SPI_initialize+0x136>
 800fc28:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fc2c:	2010      	movs	r0, #16
 800fc2e:	f7ff febd 	bl	800f9ac <send_cmd>
 800fc32:	2800      	cmp	r0, #0
 800fc34:	d0d0      	beq.n	800fbd8 <USER_SPI_initialize+0xd8>
				ty = 0;
 800fc36:	2400      	movs	r4, #0
 800fc38:	e7ce      	b.n	800fbd8 <USER_SPI_initialize+0xd8>
		Stat = STA_NOINIT;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e7dc      	b.n	800fbf8 <USER_SPI_initialize+0xf8>
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800fc3e:	2001      	movs	r0, #1
 800fc40:	e76b      	b.n	800fb1a <USER_SPI_initialize+0x1a>
 800fc42:	bf00      	nop
 800fc44:	20000020 	.word	0x20000020
 800fc48:	20002a88 	.word	0x20002a88
 800fc4c:	20002a84 	.word	0x20002a84

0800fc50 <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800fc50:	b918      	cbnz	r0, 800fc5a <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 800fc52:	4b03      	ldr	r3, [pc, #12]	; (800fc60 <USER_SPI_status+0x10>)
 800fc54:	7818      	ldrb	r0, [r3, #0]
 800fc56:	b2c0      	uxtb	r0, r0
 800fc58:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800fc5a:	2001      	movs	r0, #1
}
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	20000020 	.word	0x20000020

0800fc64 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800fc64:	b538      	push	{r3, r4, r5, lr}
 800fc66:	460d      	mov	r5, r1
 800fc68:	461c      	mov	r4, r3
 800fc6a:	4611      	mov	r1, r2
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800fc6c:	bb88      	cbnz	r0, 800fcd2 <USER_SPI_read+0x6e>
 800fc6e:	b383      	cbz	r3, 800fcd2 <USER_SPI_read+0x6e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800fc70:	4b1a      	ldr	r3, [pc, #104]	; (800fcdc <USER_SPI_read+0x78>)
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	07da      	lsls	r2, r3, #31
 800fc76:	d42e      	bmi.n	800fcd6 <USER_SPI_read+0x72>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800fc78:	4b19      	ldr	r3, [pc, #100]	; (800fce0 <USER_SPI_read+0x7c>)
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	071b      	lsls	r3, r3, #28
 800fc7e:	bf58      	it	pl
 800fc80:	0249      	lslpl	r1, r1, #9

	if (count == 1) {	/* Single sector read */
 800fc82:	2c01      	cmp	r4, #1
 800fc84:	d111      	bne.n	800fcaa <USER_SPI_read+0x46>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800fc86:	2011      	movs	r0, #17
 800fc88:	f7ff fe90 	bl	800f9ac <send_cmd>
 800fc8c:	b938      	cbnz	r0, 800fc9e <USER_SPI_read+0x3a>
			&& rcvr_datablock(buff, 512)) {
 800fc8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fc92:	4628      	mov	r0, r5
 800fc94:	f7ff ff10 	bl	800fab8 <rcvr_datablock>
 800fc98:	fab0 f480 	clz	r4, r0
 800fc9c:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	despiselect();
 800fc9e:	f7ff fe5b 	bl	800f958 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800fca2:	1e20      	subs	r0, r4, #0
 800fca4:	bf18      	it	ne
 800fca6:	2001      	movne	r0, #1
}
 800fca8:	bd38      	pop	{r3, r4, r5, pc}
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800fcaa:	2012      	movs	r0, #18
 800fcac:	f7ff fe7e 	bl	800f9ac <send_cmd>
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d1f4      	bne.n	800fc9e <USER_SPI_read+0x3a>
				if (!rcvr_datablock(buff, 512)) break;
 800fcb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fcb8:	4628      	mov	r0, r5
 800fcba:	f7ff fefd 	bl	800fab8 <rcvr_datablock>
 800fcbe:	b118      	cbz	r0, 800fcc8 <USER_SPI_read+0x64>
			} while (--count);
 800fcc0:	3c01      	subs	r4, #1
				buff += 512;
 800fcc2:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 800fcc6:	d1f5      	bne.n	800fcb4 <USER_SPI_read+0x50>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800fcc8:	2100      	movs	r1, #0
 800fcca:	200c      	movs	r0, #12
 800fccc:	f7ff fe6e 	bl	800f9ac <send_cmd>
 800fcd0:	e7e5      	b.n	800fc9e <USER_SPI_read+0x3a>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800fcd2:	2004      	movs	r0, #4
 800fcd4:	e7e8      	b.n	800fca8 <USER_SPI_read+0x44>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800fcd6:	2003      	movs	r0, #3
 800fcd8:	e7e6      	b.n	800fca8 <USER_SPI_read+0x44>
 800fcda:	bf00      	nop
 800fcdc:	20000020 	.word	0x20000020
 800fce0:	20002a84 	.word	0x20002a84

0800fce4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800fce4:	b570      	push	{r4, r5, r6, lr}
 800fce6:	460d      	mov	r5, r1
 800fce8:	4616      	mov	r6, r2
 800fcea:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800fcec:	2800      	cmp	r0, #0
 800fcee:	d152      	bne.n	800fd96 <USER_SPI_write+0xb2>
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d050      	beq.n	800fd96 <USER_SPI_write+0xb2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800fcf4:	4b2b      	ldr	r3, [pc, #172]	; (800fda4 <USER_SPI_write+0xc0>)
 800fcf6:	781a      	ldrb	r2, [r3, #0]
 800fcf8:	07d0      	lsls	r0, r2, #31
 800fcfa:	d44e      	bmi.n	800fd9a <USER_SPI_write+0xb6>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	0759      	lsls	r1, r3, #29
 800fd00:	d44d      	bmi.n	800fd9e <USER_SPI_write+0xba>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800fd02:	4b29      	ldr	r3, [pc, #164]	; (800fda8 <USER_SPI_write+0xc4>)
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	071a      	lsls	r2, r3, #28
 800fd08:	bf58      	it	pl
 800fd0a:	0276      	lslpl	r6, r6, #9

	if (count == 1) {	/* Single sector write */
 800fd0c:	2c01      	cmp	r4, #1
 800fd0e:	d11b      	bne.n	800fd48 <USER_SPI_write+0x64>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800fd10:	4631      	mov	r1, r6
 800fd12:	2018      	movs	r0, #24
 800fd14:	f7ff fe4a 	bl	800f9ac <send_cmd>
 800fd18:	b130      	cbz	r0, 800fd28 <USER_SPI_write+0x44>
{
 800fd1a:	2401      	movs	r4, #1
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	despiselect();
 800fd1c:	f7ff fe1c 	bl	800f958 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800fd20:	1e20      	subs	r0, r4, #0
 800fd22:	bf18      	it	ne
 800fd24:	2001      	movne	r0, #1
}
 800fd26:	bd70      	pop	{r4, r5, r6, pc}
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800fd28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fd2c:	f7ff fdfe 	bl	800f92c <wait_ready>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d0f2      	beq.n	800fd1a <USER_SPI_write+0x36>
	xchg_spi(token);					/* Send token */
 800fd34:	20fe      	movs	r0, #254	; 0xfe
 800fd36:	f7ff fde3 	bl	800f900 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800fd3a:	4628      	mov	r0, r5
 800fd3c:	f7ff fe78 	bl	800fa30 <xmit_datablock.part.0>
			&& xmit_datablock(buff, 0xFE)) {
 800fd40:	fab0 f480 	clz	r4, r0
 800fd44:	0964      	lsrs	r4, r4, #5
 800fd46:	e7e9      	b.n	800fd1c <USER_SPI_write+0x38>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800fd48:	f013 0f06 	tst.w	r3, #6
 800fd4c:	d003      	beq.n	800fd56 <USER_SPI_write+0x72>
 800fd4e:	4621      	mov	r1, r4
 800fd50:	2097      	movs	r0, #151	; 0x97
 800fd52:	f7ff fe2b 	bl	800f9ac <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800fd56:	4631      	mov	r1, r6
 800fd58:	2019      	movs	r0, #25
 800fd5a:	f7ff fe27 	bl	800f9ac <send_cmd>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d1dc      	bne.n	800fd1c <USER_SPI_write+0x38>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800fd62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fd66:	f7ff fde1 	bl	800f92c <wait_ready>
 800fd6a:	b150      	cbz	r0, 800fd82 <USER_SPI_write+0x9e>
	xchg_spi(token);					/* Send token */
 800fd6c:	20fc      	movs	r0, #252	; 0xfc
 800fd6e:	f7ff fdc7 	bl	800f900 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800fd72:	4628      	mov	r0, r5
 800fd74:	f7ff fe5c 	bl	800fa30 <xmit_datablock.part.0>
				if (!xmit_datablock(buff, 0xFC)) break;
 800fd78:	b118      	cbz	r0, 800fd82 <USER_SPI_write+0x9e>
			} while (--count);
 800fd7a:	3c01      	subs	r4, #1
				buff += 512;
 800fd7c:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 800fd80:	d1ef      	bne.n	800fd62 <USER_SPI_write+0x7e>
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800fd82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fd86:	f7ff fdd1 	bl	800f92c <wait_ready>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d0c5      	beq.n	800fd1a <USER_SPI_write+0x36>
	xchg_spi(token);					/* Send token */
 800fd8e:	20fd      	movs	r0, #253	; 0xfd
 800fd90:	f7ff fdb6 	bl	800f900 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800fd94:	e7c2      	b.n	800fd1c <USER_SPI_write+0x38>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800fd96:	2004      	movs	r0, #4
 800fd98:	e7c5      	b.n	800fd26 <USER_SPI_write+0x42>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800fd9a:	2003      	movs	r0, #3
 800fd9c:	e7c3      	b.n	800fd26 <USER_SPI_write+0x42>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800fd9e:	2002      	movs	r0, #2
 800fda0:	e7c1      	b.n	800fd26 <USER_SPI_write+0x42>
 800fda2:	bf00      	nop
 800fda4:	20000020 	.word	0x20000020
 800fda8:	20002a84 	.word	0x20002a84

0800fdac <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800fdac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fdae:	4615      	mov	r5, r2
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	f040 80da 	bne.w	800ff6a <USER_SPI_ioctl+0x1be>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800fdb6:	4b6f      	ldr	r3, [pc, #444]	; (800ff74 <USER_SPI_ioctl+0x1c8>)
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	07d8      	lsls	r0, r3, #31
 800fdbc:	f100 80d7 	bmi.w	800ff6e <USER_SPI_ioctl+0x1c2>

	res = RES_ERROR;

	switch (cmd) {
 800fdc0:	2904      	cmp	r1, #4
 800fdc2:	f200 80d0 	bhi.w	800ff66 <USER_SPI_ioctl+0x1ba>
 800fdc6:	e8df f001 	tbb	[pc, r1]
 800fdca:	0903      	.short	0x0903
 800fdcc:	4ace      	.short	0x4ace
 800fdce:	94          	.byte	0x94
 800fdcf:	00          	.byte	0x00
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800fdd0:	f7ff fdd2 	bl	800f978 <spiselect>
 800fdd4:	fab0 f480 	clz	r4, r0
 800fdd8:	0964      	lsrs	r4, r4, #5
 800fdda:	e006      	b.n	800fdea <USER_SPI_ioctl+0x3e>
		break;

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800fddc:	2100      	movs	r1, #0
 800fdde:	2009      	movs	r0, #9
 800fde0:	f7ff fde4 	bl	800f9ac <send_cmd>
 800fde4:	4604      	mov	r4, r0
 800fde6:	b128      	cbz	r0, 800fdf4 <USER_SPI_ioctl+0x48>
	res = RES_ERROR;
 800fde8:	2401      	movs	r4, #1

	default:
		res = RES_PARERR;
	}

	despiselect();
 800fdea:	f7ff fdb5 	bl	800f958 <despiselect>

	return res;
}
 800fdee:	4620      	mov	r0, r4
 800fdf0:	b004      	add	sp, #16
 800fdf2:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800fdf4:	2110      	movs	r1, #16
 800fdf6:	4668      	mov	r0, sp
 800fdf8:	f7ff fe5e 	bl	800fab8 <rcvr_datablock>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d0f3      	beq.n	800fde8 <USER_SPI_ioctl+0x3c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800fe00:	f89d 3000 	ldrb.w	r3, [sp]
 800fe04:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800fe08:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800fe0c:	099b      	lsrs	r3, r3, #6
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe14:	d109      	bne.n	800fe2a <USER_SPI_ioctl+0x7e>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800fe16:	041a      	lsls	r2, r3, #16
 800fe18:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800fe1c:	eb00 2101 	add.w	r1, r0, r1, lsl #8
 800fe20:	3201      	adds	r2, #1
 800fe22:	440a      	add	r2, r1
				*(DWORD*)buff = csize << 10;
 800fe24:	0292      	lsls	r2, r2, #10
 800fe26:	602a      	str	r2, [r5, #0]
 800fe28:	e7df      	b.n	800fdea <USER_SPI_ioctl+0x3e>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800fe2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	0292      	lsls	r2, r2, #10
 800fe32:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 800fe36:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800fe3a:	4413      	add	r3, r2
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800fe3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe40:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800fe44:	f002 020f 	and.w	r2, r2, #15
 800fe48:	eb02 12d1 	add.w	r2, r2, r1, lsr #7
 800fe4c:	0041      	lsls	r1, r0, #1
 800fe4e:	f001 0106 	and.w	r1, r1, #6
				*(DWORD*)buff = csize << (n - 9);
 800fe52:	440a      	add	r2, r1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800fe54:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 800fe56:	3a07      	subs	r2, #7
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800fe58:	4093      	lsls	r3, r2
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800fe5a:	602b      	str	r3, [r5, #0]
 800fe5c:	e7c5      	b.n	800fdea <USER_SPI_ioctl+0x3e>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800fe5e:	4e46      	ldr	r6, [pc, #280]	; (800ff78 <USER_SPI_ioctl+0x1cc>)
 800fe60:	7831      	ldrb	r1, [r6, #0]
 800fe62:	f011 0104 	ands.w	r1, r1, #4
 800fe66:	d01b      	beq.n	800fea0 <USER_SPI_ioctl+0xf4>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800fe68:	2100      	movs	r1, #0
 800fe6a:	208d      	movs	r0, #141	; 0x8d
 800fe6c:	f7ff fd9e 	bl	800f9ac <send_cmd>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d1b9      	bne.n	800fde8 <USER_SPI_ioctl+0x3c>
				xchg_spi(0xFF);
 800fe74:	20ff      	movs	r0, #255	; 0xff
 800fe76:	f7ff fd43 	bl	800f900 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800fe7a:	2110      	movs	r1, #16
 800fe7c:	4668      	mov	r0, sp
 800fe7e:	f7ff fe1b 	bl	800fab8 <rcvr_datablock>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d0b0      	beq.n	800fde8 <USER_SPI_ioctl+0x3c>
 800fe86:	2430      	movs	r4, #48	; 0x30
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800fe88:	20ff      	movs	r0, #255	; 0xff
 800fe8a:	f7ff fd39 	bl	800f900 <xchg_spi>
 800fe8e:	1e60      	subs	r0, r4, #1
 800fe90:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 800fe94:	d1f8      	bne.n	800fe88 <USER_SPI_ioctl+0xdc>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800fe96:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800fe9a:	091a      	lsrs	r2, r3, #4
 800fe9c:	2310      	movs	r3, #16
 800fe9e:	e7db      	b.n	800fe58 <USER_SPI_ioctl+0xac>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800fea0:	2009      	movs	r0, #9
 800fea2:	f7ff fd83 	bl	800f9ac <send_cmd>
 800fea6:	4604      	mov	r4, r0
 800fea8:	2800      	cmp	r0, #0
 800feaa:	d19d      	bne.n	800fde8 <USER_SPI_ioctl+0x3c>
 800feac:	2110      	movs	r1, #16
 800feae:	4668      	mov	r0, sp
 800feb0:	f7ff fe02 	bl	800fab8 <rcvr_datablock>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d097      	beq.n	800fde8 <USER_SPI_ioctl+0x3c>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800feb8:	7832      	ldrb	r2, [r6, #0]
 800feba:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800febe:	f89d 100b 	ldrb.w	r1, [sp, #11]
 800fec2:	0792      	lsls	r2, r2, #30
 800fec4:	d50a      	bpl.n	800fedc <USER_SPI_ioctl+0x130>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800fec6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800feca:	005b      	lsls	r3, r3, #1
 800fecc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800fed0:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 800fed4:	0992      	lsrs	r2, r2, #6
 800fed6:	3301      	adds	r3, #1
 800fed8:	3a01      	subs	r2, #1
 800feda:	e7bd      	b.n	800fe58 <USER_SPI_ioctl+0xac>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800fedc:	00ca      	lsls	r2, r1, #3
 800fede:	f002 0218 	and.w	r2, r2, #24
 800fee2:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800fee6:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 800feea:	3301      	adds	r3, #1
 800feec:	fb02 3303 	mla	r3, r2, r3, r3
 800fef0:	e7b3      	b.n	800fe5a <USER_SPI_ioctl+0xae>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800fef2:	4e21      	ldr	r6, [pc, #132]	; (800ff78 <USER_SPI_ioctl+0x1cc>)
 800fef4:	7833      	ldrb	r3, [r6, #0]
 800fef6:	f013 0f06 	tst.w	r3, #6
 800fefa:	f43f af75 	beq.w	800fde8 <USER_SPI_ioctl+0x3c>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800fefe:	466a      	mov	r2, sp
 800ff00:	210b      	movs	r1, #11
 800ff02:	2000      	movs	r0, #0
 800ff04:	f7ff ff52 	bl	800fdac <USER_SPI_ioctl>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	f47f af6d 	bne.w	800fde8 <USER_SPI_ioctl+0x3c>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ff0e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800ff12:	f89d 2000 	ldrb.w	r2, [sp]
 800ff16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff1a:	ea53 1392 	orrs.w	r3, r3, r2, lsr #6
 800ff1e:	f43f af63 	beq.w	800fde8 <USER_SPI_ioctl+0x3c>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800ff22:	e9d5 1400 	ldrd	r1, r4, [r5]
		if (!(CardType & CT_BLOCK)) {
 800ff26:	7833      	ldrb	r3, [r6, #0]
 800ff28:	071b      	lsls	r3, r3, #28
			st *= 512; ed *= 512;
 800ff2a:	bf58      	it	pl
 800ff2c:	0249      	lslpl	r1, r1, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800ff2e:	f04f 0020 	mov.w	r0, #32
			st *= 512; ed *= 512;
 800ff32:	bf58      	it	pl
 800ff34:	0264      	lslpl	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800ff36:	f7ff fd39 	bl	800f9ac <send_cmd>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	f47f af54 	bne.w	800fde8 <USER_SPI_ioctl+0x3c>
 800ff40:	4621      	mov	r1, r4
 800ff42:	2021      	movs	r0, #33	; 0x21
 800ff44:	f7ff fd32 	bl	800f9ac <send_cmd>
 800ff48:	4601      	mov	r1, r0
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	f47f af4c 	bne.w	800fde8 <USER_SPI_ioctl+0x3c>
 800ff50:	2026      	movs	r0, #38	; 0x26
 800ff52:	f7ff fd2b 	bl	800f9ac <send_cmd>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	f47f af46 	bne.w	800fde8 <USER_SPI_ioctl+0x3c>
 800ff5c:	f247 5030 	movw	r0, #30000	; 0x7530
 800ff60:	f7ff fce4 	bl	800f92c <wait_ready>
 800ff64:	e736      	b.n	800fdd4 <USER_SPI_ioctl+0x28>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ff66:	2404      	movs	r4, #4
 800ff68:	e73f      	b.n	800fdea <USER_SPI_ioctl+0x3e>
	if (drv) return RES_PARERR;					/* Check parameter */
 800ff6a:	2404      	movs	r4, #4
 800ff6c:	e73f      	b.n	800fdee <USER_SPI_ioctl+0x42>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ff6e:	2403      	movs	r4, #3
 800ff70:	e73d      	b.n	800fdee <USER_SPI_ioctl+0x42>
 800ff72:	bf00      	nop
 800ff74:	20000020 	.word	0x20000020
 800ff78:	20002a84 	.word	0x20002a84

0800ff7c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ff7c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800ff80:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ff82:	b16b      	cbz	r3, 800ffa0 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ff84:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ff88:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800ff8c:	28ff      	cmp	r0, #255	; 0xff
 800ff8e:	d007      	beq.n	800ffa0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800ff96:	4621      	mov	r1, r4
 800ff98:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800ff9a:	23ff      	movs	r3, #255	; 0xff
 800ff9c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	bd10      	pop	{r4, pc}

0800ffa4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ffa4:	2343      	movs	r3, #67	; 0x43
 800ffa6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800ffa8:	4800      	ldr	r0, [pc, #0]	; (800ffac <USBD_CDC_GetFSCfgDesc+0x8>)
 800ffaa:	4770      	bx	lr
 800ffac:	2000005c 	.word	0x2000005c

0800ffb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ffb0:	2343      	movs	r3, #67	; 0x43
 800ffb2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800ffb4:	4800      	ldr	r0, [pc, #0]	; (800ffb8 <USBD_CDC_GetHSCfgDesc+0x8>)
 800ffb6:	4770      	bx	lr
 800ffb8:	200000a0 	.word	0x200000a0

0800ffbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ffbc:	2343      	movs	r3, #67	; 0x43
 800ffbe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800ffc0:	4800      	ldr	r0, [pc, #0]	; (800ffc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800ffc2:	4770      	bx	lr
 800ffc4:	200000f0 	.word	0x200000f0

0800ffc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ffc8:	230a      	movs	r3, #10
 800ffca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800ffcc:	4800      	ldr	r0, [pc, #0]	; (800ffd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800ffce:	4770      	bx	lr
 800ffd0:	200000e4 	.word	0x200000e4

0800ffd4 <USBD_CDC_DataOut>:
{
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ffd8:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ffdc:	f002 f9e6 	bl	80123ac <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800ffe0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ffe4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800ffe8:	b14b      	cbz	r3, 800fffe <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ffea:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800ffee:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800fff2:	68db      	ldr	r3, [r3, #12]
 800fff4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800fff8:	4798      	blx	r3
    return USBD_OK;
 800fffa:	2000      	movs	r0, #0
}
 800fffc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800fffe:	2002      	movs	r0, #2
 8010000:	e7fc      	b.n	800fffc <USBD_CDC_DataOut+0x28>

08010002 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010002:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8010006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData != NULL)
 8010008:	b1d2      	cbz	r2, 8010040 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801000a:	2714      	movs	r7, #20
 801000c:	fb07 0701 	mla	r7, r7, r1, r0
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	b18b      	cbz	r3, 8010038 <USBD_CDC_DataIn+0x36>
 8010014:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8010018:	2628      	movs	r6, #40	; 0x28
 801001a:	fb06 4501 	mla	r5, r6, r1, r4
 801001e:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8010020:	fbb3 f4f5 	udiv	r4, r3, r5
 8010024:	fb05 3414 	mls	r4, r5, r4, r3
 8010028:	b934      	cbnz	r4, 8010038 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 801002a:	61fc      	str	r4, [r7, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801002c:	4623      	mov	r3, r4
 801002e:	4622      	mov	r2, r4
 8010030:	f002 f9a0 	bl	8012374 <USBD_LL_Transmit>
    return USBD_OK;
 8010034:	4620      	mov	r0, r4
}
 8010036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8010038:	2000      	movs	r0, #0
 801003a:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 801003e:	e7fa      	b.n	8010036 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8010040:	2002      	movs	r0, #2
 8010042:	e7f8      	b.n	8010036 <USBD_CDC_DataIn+0x34>

08010044 <USBD_CDC_Setup>:
{
 8010044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010048:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801004a:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 801004e:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010052:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8010056:	4605      	mov	r5, r0
 8010058:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 801005a:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 801005e:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010062:	d028      	beq.n	80100b6 <USBD_CDC_Setup+0x72>
 8010064:	2c20      	cmp	r4, #32
 8010066:	d142      	bne.n	80100ee <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8010068:	88cc      	ldrh	r4, [r1, #6]
 801006a:	784b      	ldrb	r3, [r1, #1]
 801006c:	b1e4      	cbz	r4, 80100a8 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 801006e:	0612      	lsls	r2, r2, #24
 8010070:	d511      	bpl.n	8010096 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010072:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8010076:	4639      	mov	r1, r7
 8010078:	f8d2 9008 	ldr.w	r9, [r2, #8]
 801007c:	4618      	mov	r0, r3
 801007e:	4622      	mov	r2, r4
 8010080:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010082:	88f2      	ldrh	r2, [r6, #6]
 8010084:	4639      	mov	r1, r7
 8010086:	4628      	mov	r0, r5
 8010088:	f000 fc47 	bl	801091a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 801008c:	4644      	mov	r4, r8
}
 801008e:	4620      	mov	r0, r4
 8010090:	b003      	add	sp, #12
 8010092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8010096:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801009a:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801009e:	4622      	mov	r2, r4
 80100a0:	4639      	mov	r1, r7
 80100a2:	f000 fc4f 	bl	8010944 <USBD_CtlPrepareRx>
 80100a6:	e7f1      	b.n	801008c <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80100a8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80100ac:	4618      	mov	r0, r3
 80100ae:	6895      	ldr	r5, [r2, #8]
 80100b0:	4622      	mov	r2, r4
 80100b2:	47a8      	blx	r5
 80100b4:	e7eb      	b.n	801008e <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80100b6:	784b      	ldrb	r3, [r1, #1]
 80100b8:	2b0a      	cmp	r3, #10
 80100ba:	d00c      	beq.n	80100d6 <USBD_CDC_Setup+0x92>
 80100bc:	2b0b      	cmp	r3, #11
 80100be:	d012      	beq.n	80100e6 <USBD_CDC_Setup+0xa2>
 80100c0:	b9ab      	cbnz	r3, 80100ee <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80100c6:	2b03      	cmp	r3, #3
 80100c8:	d111      	bne.n	80100ee <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80100ca:	2202      	movs	r2, #2
 80100cc:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80100d0:	f000 fc23 	bl	801091a <USBD_CtlSendData>
 80100d4:	e7db      	b.n	801008e <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80100da:	2b03      	cmp	r3, #3
 80100dc:	d107      	bne.n	80100ee <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80100de:	2201      	movs	r2, #1
 80100e0:	f10d 0105 	add.w	r1, sp, #5
 80100e4:	e7f4      	b.n	80100d0 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80100e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80100ea:	2b03      	cmp	r3, #3
 80100ec:	d0cf      	beq.n	801008e <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80100ee:	4631      	mov	r1, r6
 80100f0:	4628      	mov	r0, r5
 80100f2:	f000 fbeb 	bl	80108cc <USBD_CtlError>
          ret = USBD_FAIL;
 80100f6:	2402      	movs	r4, #2
          break;
 80100f8:	e7c9      	b.n	801008e <USBD_CDC_Setup+0x4a>

080100fa <USBD_CDC_DeInit>:
{
 80100fa:	b538      	push	{r3, r4, r5, lr}
 80100fc:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80100fe:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010100:	2181      	movs	r1, #129	; 0x81
 8010102:	f002 f8eb 	bl	80122dc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010106:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010108:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801010a:	4620      	mov	r0, r4
 801010c:	f002 f8e6 	bl	80122dc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010110:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010114:	2182      	movs	r1, #130	; 0x82
 8010116:	4620      	mov	r0, r4
 8010118:	f002 f8e0 	bl	80122dc <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 801011c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010120:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8010122:	b14b      	cbz	r3, 8010138 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010124:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801012c:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8010130:	f002 f944 	bl	80123bc <USBD_static_free>
    pdev->pClassData = NULL;
 8010134:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8010138:	2000      	movs	r0, #0
 801013a:	bd38      	pop	{r3, r4, r5, pc}

0801013c <USBD_CDC_Init>:
{
 801013c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010140:	7c03      	ldrb	r3, [r0, #16]
{
 8010142:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010144:	bbbb      	cbnz	r3, 80101b6 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010146:	f44f 7300 	mov.w	r3, #512	; 0x200
 801014a:	2202      	movs	r2, #2
 801014c:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801014e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010150:	f002 f8b4 	bl	80122bc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010154:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010156:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801015a:	4629      	mov	r1, r5
 801015c:	2202      	movs	r2, #2
 801015e:	4620      	mov	r0, r4
 8010160:	f002 f8ac 	bl	80122bc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010164:	2701      	movs	r7, #1
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010166:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801016a:	2308      	movs	r3, #8
 801016c:	2203      	movs	r2, #3
 801016e:	2182      	movs	r1, #130	; 0x82
 8010170:	4620      	mov	r0, r4
 8010172:	f002 f8a3 	bl	80122bc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010176:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010178:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801017c:	f002 f91a 	bl	80123b4 <USBD_static_malloc>
 8010180:	4605      	mov	r5, r0
 8010182:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8010186:	b340      	cbz	r0, 80101da <USBD_CDC_Init+0x9e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010188:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hcdc->TxState = 0U;
 801018c:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4798      	blx	r3
    hcdc->TxState = 0U;
 8010194:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8010198:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801019c:	7c26      	ldrb	r6, [r4, #16]
 801019e:	b99e      	cbnz	r6, 80101c8 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80101a0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80101a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101a8:	4639      	mov	r1, r7
 80101aa:	4620      	mov	r0, r4
 80101ac:	f002 f8f0 	bl	8012390 <USBD_LL_PrepareReceive>
}
 80101b0:	4630      	mov	r0, r6
 80101b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80101b6:	2340      	movs	r3, #64	; 0x40
 80101b8:	2202      	movs	r2, #2
 80101ba:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80101bc:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80101be:	f002 f87d 	bl	80122bc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80101c2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80101c4:	2340      	movs	r3, #64	; 0x40
 80101c6:	e7c8      	b.n	801015a <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80101c8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80101cc:	2340      	movs	r3, #64	; 0x40
 80101ce:	4639      	mov	r1, r7
 80101d0:	4620      	mov	r0, r4
 80101d2:	f002 f8dd 	bl	8012390 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80101d6:	4646      	mov	r6, r8
 80101d8:	e7ea      	b.n	80101b0 <USBD_CDC_Init+0x74>
    ret = 1U;
 80101da:	463e      	mov	r6, r7
 80101dc:	e7e8      	b.n	80101b0 <USBD_CDC_Init+0x74>

080101de <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80101de:	b119      	cbz	r1, 80101e8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80101e0:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80101e4:	2000      	movs	r0, #0
 80101e6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80101e8:	2002      	movs	r0, #2
  }

  return ret;
}
 80101ea:	4770      	bx	lr

080101ec <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80101ec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80101f0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80101f2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80101f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80101fa:	4770      	bx	lr

080101fc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80101fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8010200:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8010202:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8010206:	4770      	bx	lr

08010208 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010208:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 801020c:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 801020e:	b182      	cbz	r2, 8010232 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8010210:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8010214:	2301      	movs	r3, #1
 8010216:	b974      	cbnz	r4, 8010236 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8010218:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801021c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8010220:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010222:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8010226:	b29b      	uxth	r3, r3
 8010228:	2181      	movs	r1, #129	; 0x81
 801022a:	f002 f8a3 	bl	8012374 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 801022e:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8010230:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8010232:	2002      	movs	r0, #2
 8010234:	e7fc      	b.n	8010230 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8010236:	4618      	mov	r0, r3
 8010238:	e7fa      	b.n	8010230 <USBD_CDC_TransmitPacket+0x28>

0801023a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801023a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 801023e:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8010240:	b182      	cbz	r2, 8010264 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010242:	7c04      	ldrb	r4, [r0, #16]
 8010244:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8010248:	b934      	cbnz	r4, 8010258 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801024a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801024e:	2101      	movs	r1, #1
 8010250:	f002 f89e 	bl	8012390 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8010254:	4620      	mov	r0, r4
 8010256:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8010258:	2340      	movs	r3, #64	; 0x40
 801025a:	2101      	movs	r1, #1
 801025c:	f002 f898 	bl	8012390 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8010260:	2400      	movs	r4, #0
 8010262:	e7f7      	b.n	8010254 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8010264:	2402      	movs	r4, #2
 8010266:	e7f5      	b.n	8010254 <USBD_CDC_ReceivePacket+0x1a>

08010268 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010268:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801026a:	b180      	cbz	r0, 801028e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801026c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010270:	b113      	cbz	r3, 8010278 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8010272:	2300      	movs	r3, #0
 8010274:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010278:	b109      	cbz	r1, 801027e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 801027a:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801027e:	2301      	movs	r3, #1
 8010280:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8010284:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010286:	f001 ffc9 	bl	801221c <USBD_LL_Init>

  return USBD_OK;
 801028a:	2000      	movs	r0, #0
}
 801028c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 801028e:	2002      	movs	r0, #2
 8010290:	e7fc      	b.n	801028c <USBD_Init+0x24>

08010292 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8010292:	b119      	cbz	r1, 801029c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010294:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8010298:	2000      	movs	r0, #0
 801029a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801029c:	2002      	movs	r0, #2
  }

  return status;
}
 801029e:	4770      	bx	lr

080102a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80102a0:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80102a2:	f001 fffd 	bl	80122a0 <USBD_LL_Start>

  return USBD_OK;
}
 80102a6:	2000      	movs	r0, #0
 80102a8:	bd08      	pop	{r3, pc}

080102aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80102aa:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80102ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80102b0:	b90b      	cbnz	r3, 80102b6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80102b2:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80102b4:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4798      	blx	r3
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d0fa      	beq.n	80102b4 <USBD_SetClassConfig+0xa>
 80102be:	e7f8      	b.n	80102b2 <USBD_SetClassConfig+0x8>

080102c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80102c0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80102c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	4798      	blx	r3

  return USBD_OK;
}
 80102ca:	2000      	movs	r0, #0
 80102cc:	bd08      	pop	{r3, pc}

080102ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80102ce:	b538      	push	{r3, r4, r5, lr}
 80102d0:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80102d2:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80102d6:	4628      	mov	r0, r5
 80102d8:	f000 fae4 	bl	80108a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80102dc:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80102de:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80102e2:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80102e6:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80102ea:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80102ee:	f001 031f 	and.w	r3, r1, #31
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d008      	beq.n	8010308 <USBD_LL_SetupStage+0x3a>
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	d00b      	beq.n	8010312 <USBD_LL_SetupStage+0x44>
 80102fa:	b97b      	cbnz	r3, 801031c <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80102fc:	4629      	mov	r1, r5
 80102fe:	4620      	mov	r0, r4
 8010300:	f000 f8fc 	bl	80104fc <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8010304:	2000      	movs	r0, #0
 8010306:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8010308:	4629      	mov	r1, r5
 801030a:	4620      	mov	r0, r4
 801030c:	f000 fa1e 	bl	801074c <USBD_StdItfReq>
      break;
 8010310:	e7f8      	b.n	8010304 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8010312:	4629      	mov	r1, r5
 8010314:	4620      	mov	r0, r4
 8010316:	f000 fa3d 	bl	8010794 <USBD_StdEPReq>
      break;
 801031a:	e7f3      	b.n	8010304 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801031c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8010320:	4620      	mov	r0, r4
 8010322:	f001 ffe9 	bl	80122f8 <USBD_LL_StallEP>
      break;
 8010326:	e7ed      	b.n	8010304 <USBD_LL_SetupStage+0x36>

08010328 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010328:	b570      	push	{r4, r5, r6, lr}
 801032a:	4604      	mov	r4, r0
 801032c:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801032e:	460d      	mov	r5, r1
 8010330:	bb39      	cbnz	r1, 8010382 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010332:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8010336:	2b03      	cmp	r3, #3
 8010338:	d11c      	bne.n	8010374 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 801033a:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 801033e:	4291      	cmp	r1, r2
 8010340:	d90b      	bls.n	801035a <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8010342:	1a89      	subs	r1, r1, r2

        USBD_CtlContinueRx(pdev, pdata,
 8010344:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8010346:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 801034a:	bf8c      	ite	hi
 801034c:	b28a      	uxthhi	r2, r1
 801034e:	b292      	uxthls	r2, r2
 8010350:	4631      	mov	r1, r6
 8010352:	f000 fb04 	bl	801095e <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8010356:	4628      	mov	r0, r5
 8010358:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801035a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801035e:	691b      	ldr	r3, [r3, #16]
 8010360:	b123      	cbz	r3, 801036c <USBD_LL_DataOutStage+0x44>
 8010362:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8010366:	2a03      	cmp	r2, #3
 8010368:	d100      	bne.n	801036c <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 801036a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 801036c:	4620      	mov	r0, r4
 801036e:	f000 fafe 	bl	801096e <USBD_CtlSendStatus>
 8010372:	e7f0      	b.n	8010356 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8010374:	2b05      	cmp	r3, #5
 8010376:	d1ee      	bne.n	8010356 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8010378:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801037c:	f001 ffbc 	bl	80122f8 <USBD_LL_StallEP>
 8010380:	e7e9      	b.n	8010356 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8010382:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010386:	699b      	ldr	r3, [r3, #24]
 8010388:	b133      	cbz	r3, 8010398 <USBD_LL_DataOutStage+0x70>
 801038a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801038e:	2a03      	cmp	r2, #3
 8010390:	d102      	bne.n	8010398 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8010392:	4798      	blx	r3
  return USBD_OK;
 8010394:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8010396:	e7de      	b.n	8010356 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8010398:	2502      	movs	r5, #2
 801039a:	e7dc      	b.n	8010356 <USBD_LL_DataOutStage+0x2e>

0801039c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801039e:	4604      	mov	r4, r0
 80103a0:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80103a2:	460d      	mov	r5, r1
 80103a4:	2900      	cmp	r1, #0
 80103a6:	d147      	bne.n	8010438 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80103a8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	d13c      	bne.n	801042a <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80103b0:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 80103b4:	429e      	cmp	r6, r3
 80103b6:	d914      	bls.n	80103e2 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80103b8:	1af3      	subs	r3, r6, r3
 80103ba:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80103bc:	b29a      	uxth	r2, r3
 80103be:	4639      	mov	r1, r7
 80103c0:	f000 fab8 	bl	8010934 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80103c4:	462b      	mov	r3, r5
 80103c6:	462a      	mov	r2, r5
 80103c8:	4629      	mov	r1, r5
 80103ca:	4620      	mov	r0, r4
 80103cc:	f001 ffe0 	bl	8012390 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80103d0:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d102      	bne.n	80103de <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80103d8:	2300      	movs	r3, #0
 80103da:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80103de:	4628      	mov	r0, r5
 80103e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80103e2:	69c2      	ldr	r2, [r0, #28]
 80103e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80103e8:	fb03 2616 	mls	r6, r3, r6, r2
 80103ec:	b95e      	cbnz	r6, 8010406 <USBD_LL_DataInStage+0x6a>
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d809      	bhi.n	8010406 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80103f2:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d205      	bcs.n	8010406 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80103fa:	460a      	mov	r2, r1
 80103fc:	f000 fa9a 	bl	8010934 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010400:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8010404:	e7de      	b.n	80103c4 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010406:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	b12b      	cbz	r3, 801041a <USBD_LL_DataInStage+0x7e>
 801040e:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8010412:	2a03      	cmp	r2, #3
 8010414:	d101      	bne.n	801041a <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8010416:	4620      	mov	r0, r4
 8010418:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 801041a:	2180      	movs	r1, #128	; 0x80
 801041c:	4620      	mov	r0, r4
 801041e:	f001 ff6b 	bl	80122f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010422:	4620      	mov	r0, r4
 8010424:	f000 faae 	bl	8010984 <USBD_CtlReceiveStatus>
 8010428:	e7d2      	b.n	80103d0 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801042a:	f033 0304 	bics.w	r3, r3, #4
 801042e:	d1cf      	bne.n	80103d0 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8010430:	2180      	movs	r1, #128	; 0x80
 8010432:	f001 ff61 	bl	80122f8 <USBD_LL_StallEP>
 8010436:	e7cb      	b.n	80103d0 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8010438:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801043c:	695b      	ldr	r3, [r3, #20]
 801043e:	b133      	cbz	r3, 801044e <USBD_LL_DataInStage+0xb2>
 8010440:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8010444:	2a03      	cmp	r2, #3
 8010446:	d102      	bne.n	801044e <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8010448:	4798      	blx	r3
  return USBD_OK;
 801044a:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 801044c:	e7c7      	b.n	80103de <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 801044e:	2502      	movs	r5, #2
 8010450:	e7c5      	b.n	80103de <USBD_LL_DataInStage+0x42>

08010452 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010452:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010454:	2200      	movs	r2, #0
{
 8010456:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010458:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801045a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801045c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801045e:	2340      	movs	r3, #64	; 0x40
 8010460:	f001 ff2c 	bl	80122bc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010464:	4633      	mov	r3, r6
 8010466:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010468:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801046c:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010470:	2200      	movs	r2, #0
 8010472:	4620      	mov	r0, r4
 8010474:	f001 ff22 	bl	80122bc <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8010478:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801047c:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 801047e:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010480:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010482:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010486:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 801048a:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 801048c:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8010490:	b123      	cbz	r3, 801049c <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010492:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8010496:	4620      	mov	r0, r4
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	4798      	blx	r3
  }

  return USBD_OK;
}
 801049c:	2000      	movs	r0, #0
 801049e:	bd70      	pop	{r4, r5, r6, pc}

080104a0 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80104a0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80104a2:	2000      	movs	r0, #0
 80104a4:	4770      	bx	lr

080104a6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80104a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80104aa:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80104ae:	2304      	movs	r3, #4
 80104b0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80104b4:	2000      	movs	r0, #0
 80104b6:	4770      	bx	lr

080104b8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80104b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80104bc:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80104be:	bf04      	itt	eq
 80104c0:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80104c4:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80104c8:	2000      	movs	r0, #0
 80104ca:	4770      	bx	lr

080104cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80104cc:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104ce:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80104d2:	2a03      	cmp	r2, #3
 80104d4:	d104      	bne.n	80104e0 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80104d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80104da:	69db      	ldr	r3, [r3, #28]
 80104dc:	b103      	cbz	r3, 80104e0 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80104de:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80104e0:	2000      	movs	r0, #0
 80104e2:	bd08      	pop	{r3, pc}

080104e4 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80104e4:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80104e6:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80104e8:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80104ea:	f001 ff05 	bl	80122f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80104ee:	4620      	mov	r0, r4
 80104f0:	2100      	movs	r1, #0
}
 80104f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80104f6:	f001 beff 	b.w	80122f8 <USBD_LL_StallEP>
	...

080104fc <USBD_StdDevReq>:
{
 80104fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104fe:	780b      	ldrb	r3, [r1, #0]
 8010500:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010504:	2b20      	cmp	r3, #32
{
 8010506:	4604      	mov	r4, r0
 8010508:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801050a:	d012      	beq.n	8010532 <USBD_StdDevReq+0x36>
 801050c:	2b40      	cmp	r3, #64	; 0x40
 801050e:	d010      	beq.n	8010532 <USBD_StdDevReq+0x36>
 8010510:	2b00      	cmp	r3, #0
 8010512:	d151      	bne.n	80105b8 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8010514:	784b      	ldrb	r3, [r1, #1]
 8010516:	2b09      	cmp	r3, #9
 8010518:	d84e      	bhi.n	80105b8 <USBD_StdDevReq+0xbc>
 801051a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801051e:	00ee      	.short	0x00ee
 8010520:	004d0109 	.word	0x004d0109
 8010524:	004d0102 	.word	0x004d0102
 8010528:	00130087 	.word	0x00130087
 801052c:	00d6004d 	.word	0x00d6004d
 8010530:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8010532:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8010536:	4629      	mov	r1, r5
 8010538:	689b      	ldr	r3, [r3, #8]
 801053a:	4620      	mov	r0, r4
 801053c:	4798      	blx	r3
}
 801053e:	2000      	movs	r0, #0
 8010540:	b003      	add	sp, #12
 8010542:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8010544:	2300      	movs	r3, #0
 8010546:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 801054a:	884b      	ldrh	r3, [r1, #2]
 801054c:	0a1a      	lsrs	r2, r3, #8
 801054e:	3a01      	subs	r2, #1
 8010550:	2a06      	cmp	r2, #6
 8010552:	d831      	bhi.n	80105b8 <USBD_StdDevReq+0xbc>
 8010554:	e8df f002 	tbb	[pc, r2]
 8010558:	30231604 	.word	0x30231604
 801055c:	4830      	.short	0x4830
 801055e:	52          	.byte	0x52
 801055f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010560:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8010564:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010566:	7c20      	ldrb	r0, [r4, #16]
 8010568:	f10d 0106 	add.w	r1, sp, #6
 801056c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 801056e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010572:	2a00      	cmp	r2, #0
 8010574:	d056      	beq.n	8010624 <USBD_StdDevReq+0x128>
 8010576:	88eb      	ldrh	r3, [r5, #6]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d14a      	bne.n	8010612 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 801057c:	4620      	mov	r0, r4
 801057e:	f000 f9f6 	bl	801096e <USBD_CtlSendStatus>
 8010582:	e7dc      	b.n	801053e <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010584:	7c02      	ldrb	r2, [r0, #16]
 8010586:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801058a:	b932      	cbnz	r2, 801059a <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801058c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801058e:	f10d 0006 	add.w	r0, sp, #6
 8010592:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010594:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010596:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8010598:	e7e9      	b.n	801056e <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801059a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801059c:	e7f7      	b.n	801058e <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b05      	cmp	r3, #5
 80105a2:	d809      	bhi.n	80105b8 <USBD_StdDevReq+0xbc>
 80105a4:	e8df f003 	tbb	[pc, r3]
 80105a8:	14100c03 	.word	0x14100c03
 80105ac:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80105ae:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80105b2:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d1d6      	bne.n	8010566 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80105b8:	4620      	mov	r0, r4
 80105ba:	f7ff ff93 	bl	80104e4 <USBD_CtlError.constprop.0>
        break;
 80105be:	e7be      	b.n	801053e <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80105c0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80105c4:	689b      	ldr	r3, [r3, #8]
 80105c6:	e7f5      	b.n	80105b4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80105c8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80105cc:	68db      	ldr	r3, [r3, #12]
 80105ce:	e7f1      	b.n	80105b4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80105d0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80105d4:	691b      	ldr	r3, [r3, #16]
 80105d6:	e7ed      	b.n	80105b4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80105d8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80105dc:	695b      	ldr	r3, [r3, #20]
 80105de:	e7e9      	b.n	80105b4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80105e0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80105e4:	699b      	ldr	r3, [r3, #24]
 80105e6:	e7e5      	b.n	80105b4 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105e8:	7c03      	ldrb	r3, [r0, #16]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d1e4      	bne.n	80105b8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80105ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80105f2:	f10d 0006 	add.w	r0, sp, #6
 80105f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105f8:	4798      	blx	r3
  if (err != 0U)
 80105fa:	e7b8      	b.n	801056e <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105fc:	7c03      	ldrb	r3, [r0, #16]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d1da      	bne.n	80105b8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010602:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010606:	f10d 0006 	add.w	r0, sp, #6
 801060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801060c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801060e:	2307      	movs	r3, #7
 8010610:	e7c1      	b.n	8010596 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8010612:	429a      	cmp	r2, r3
 8010614:	bf28      	it	cs
 8010616:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010618:	4601      	mov	r1, r0
 801061a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 801061c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010620:	f000 f97b 	bl	801091a <USBD_CtlSendData>
    if (req->wLength == 0U)
 8010624:	88eb      	ldrh	r3, [r5, #6]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d189      	bne.n	801053e <USBD_StdDevReq+0x42>
 801062a:	e7a7      	b.n	801057c <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801062c:	888b      	ldrh	r3, [r1, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1c2      	bne.n	80105b8 <USBD_StdDevReq+0xbc>
 8010632:	88cb      	ldrh	r3, [r1, #6]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1bf      	bne.n	80105b8 <USBD_StdDevReq+0xbc>
 8010638:	884d      	ldrh	r5, [r1, #2]
 801063a:	2d7f      	cmp	r5, #127	; 0x7f
 801063c:	d8bc      	bhi.n	80105b8 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801063e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010642:	2b03      	cmp	r3, #3
 8010644:	d0b8      	beq.n	80105b8 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010646:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8010648:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801064c:	f001 fe84 	bl	8012358 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010650:	4620      	mov	r0, r4
 8010652:	f000 f98c 	bl	801096e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8010656:	b11d      	cbz	r5, 8010660 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010658:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 801065a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 801065e:	e76e      	b.n	801053e <USBD_StdDevReq+0x42>
 8010660:	2301      	movs	r3, #1
 8010662:	e7fa      	b.n	801065a <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8010664:	7889      	ldrb	r1, [r1, #2]
 8010666:	4d38      	ldr	r5, [pc, #224]	; (8010748 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010668:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 801066a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801066c:	d8a4      	bhi.n	80105b8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 801066e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010672:	2b02      	cmp	r3, #2
 8010674:	d008      	beq.n	8010688 <USBD_StdDevReq+0x18c>
 8010676:	2b03      	cmp	r3, #3
 8010678:	d015      	beq.n	80106a6 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 801067a:	f7ff ff33 	bl	80104e4 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 801067e:	7829      	ldrb	r1, [r5, #0]
 8010680:	4620      	mov	r0, r4
 8010682:	f7ff fe1d 	bl	80102c0 <USBD_ClrClassConfig>
        break;
 8010686:	e75a      	b.n	801053e <USBD_StdDevReq+0x42>
        if (cfgidx)
 8010688:	2900      	cmp	r1, #0
 801068a:	f43f af77 	beq.w	801057c <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 801068e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010690:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8010692:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010694:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010698:	4620      	mov	r0, r4
 801069a:	f7ff fe06 	bl	80102aa <USBD_SetClassConfig>
 801069e:	2802      	cmp	r0, #2
 80106a0:	f47f af6c 	bne.w	801057c <USBD_StdDevReq+0x80>
 80106a4:	e788      	b.n	80105b8 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80106a6:	b931      	cbnz	r1, 80106b6 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80106a8:	2302      	movs	r3, #2
 80106aa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80106ae:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80106b0:	f7ff fe06 	bl	80102c0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80106b4:	e762      	b.n	801057c <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80106b6:	6841      	ldr	r1, [r0, #4]
 80106b8:	2901      	cmp	r1, #1
 80106ba:	f43f af5f 	beq.w	801057c <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80106be:	b2c9      	uxtb	r1, r1
 80106c0:	f7ff fdfe 	bl	80102c0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80106c4:	7829      	ldrb	r1, [r5, #0]
 80106c6:	6061      	str	r1, [r4, #4]
 80106c8:	e7e6      	b.n	8010698 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 80106ca:	88ca      	ldrh	r2, [r1, #6]
 80106cc:	2a01      	cmp	r2, #1
 80106ce:	f47f af73 	bne.w	80105b8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80106d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80106d6:	2b02      	cmp	r3, #2
 80106d8:	d80a      	bhi.n	80106f0 <USBD_StdDevReq+0x1f4>
 80106da:	2b00      	cmp	r3, #0
 80106dc:	f43f af6c 	beq.w	80105b8 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80106e0:	4601      	mov	r1, r0
 80106e2:	2300      	movs	r3, #0
 80106e4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80106e8:	4620      	mov	r0, r4
 80106ea:	f000 f916 	bl	801091a <USBD_CtlSendData>
      break;
 80106ee:	e726      	b.n	801053e <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 80106f0:	2b03      	cmp	r3, #3
 80106f2:	f47f af61 	bne.w	80105b8 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80106f6:	1d01      	adds	r1, r0, #4
 80106f8:	e7f6      	b.n	80106e8 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 80106fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80106fe:	3b01      	subs	r3, #1
 8010700:	2b02      	cmp	r3, #2
 8010702:	f63f af59 	bhi.w	80105b8 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8010706:	88ca      	ldrh	r2, [r1, #6]
 8010708:	2a02      	cmp	r2, #2
 801070a:	f47f af55 	bne.w	80105b8 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 801070e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010712:	4601      	mov	r1, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	bf14      	ite	ne
 8010718:	4613      	movne	r3, r2
 801071a:	2300      	moveq	r3, #0
 801071c:	f841 3f0c 	str.w	r3, [r1, #12]!
 8010720:	e7e2      	b.n	80106e8 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010722:	884b      	ldrh	r3, [r1, #2]
 8010724:	2b01      	cmp	r3, #1
 8010726:	f47f af0a 	bne.w	801053e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 801072a:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 801072e:	e725      	b.n	801057c <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8010730:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010734:	3b01      	subs	r3, #1
 8010736:	2b02      	cmp	r3, #2
 8010738:	f63f af3e 	bhi.w	80105b8 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801073c:	884b      	ldrh	r3, [r1, #2]
 801073e:	2b01      	cmp	r3, #1
 8010740:	f47f aefd 	bne.w	801053e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8010744:	2300      	movs	r3, #0
 8010746:	e7f0      	b.n	801072a <USBD_StdDevReq+0x22e>
 8010748:	20002a8c 	.word	0x20002a8c

0801074c <USBD_StdItfReq>:
{
 801074c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801074e:	780b      	ldrb	r3, [r1, #0]
 8010750:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8010754:	2a40      	cmp	r2, #64	; 0x40
{
 8010756:	4604      	mov	r4, r0
 8010758:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801075a:	d001      	beq.n	8010760 <USBD_StdItfReq+0x14>
 801075c:	065b      	lsls	r3, r3, #25
 801075e:	d415      	bmi.n	801078c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8010760:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8010764:	3b01      	subs	r3, #1
 8010766:	2b02      	cmp	r3, #2
 8010768:	d810      	bhi.n	801078c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801076a:	792b      	ldrb	r3, [r5, #4]
 801076c:	2b01      	cmp	r3, #1
 801076e:	d80d      	bhi.n	801078c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010770:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8010774:	4629      	mov	r1, r5
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	4620      	mov	r0, r4
 801077a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 801077c:	88eb      	ldrh	r3, [r5, #6]
 801077e:	b91b      	cbnz	r3, 8010788 <USBD_StdItfReq+0x3c>
 8010780:	b910      	cbnz	r0, 8010788 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8010782:	4620      	mov	r0, r4
 8010784:	f000 f8f3 	bl	801096e <USBD_CtlSendStatus>
}
 8010788:	2000      	movs	r0, #0
 801078a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 801078c:	4620      	mov	r0, r4
 801078e:	f7ff fea9 	bl	80104e4 <USBD_CtlError.constprop.0>
          break;
 8010792:	e7f9      	b.n	8010788 <USBD_StdItfReq+0x3c>

08010794 <USBD_StdEPReq>:
{
 8010794:	b538      	push	{r3, r4, r5, lr}
 8010796:	780a      	ldrb	r2, [r1, #0]
 8010798:	f002 0260 	and.w	r2, r2, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801079c:	2a20      	cmp	r2, #32
{
 801079e:	4604      	mov	r4, r0
 80107a0:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107a2:	d027      	beq.n	80107f4 <USBD_StdEPReq+0x60>
 80107a4:	2a40      	cmp	r2, #64	; 0x40
 80107a6:	d025      	beq.n	80107f4 <USBD_StdEPReq+0x60>
 80107a8:	bb92      	cbnz	r2, 8010810 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 80107aa:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80107ac:	888d      	ldrh	r5, [r1, #4]
 80107ae:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 80107b0:	2a01      	cmp	r2, #1
 80107b2:	d03d      	beq.n	8010830 <USBD_StdEPReq+0x9c>
 80107b4:	2a03      	cmp	r2, #3
 80107b6:	d025      	beq.n	8010804 <USBD_StdEPReq+0x70>
 80107b8:	bb52      	cbnz	r2, 8010810 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80107ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80107be:	2b02      	cmp	r3, #2
 80107c0:	d04d      	beq.n	801085e <USBD_StdEPReq+0xca>
 80107c2:	2b03      	cmp	r3, #3
 80107c4:	d124      	bne.n	8010810 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80107c6:	f001 030f 	and.w	r3, r1, #15
 80107ca:	2214      	movs	r2, #20
 80107cc:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80107d0:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80107d4:	d052      	beq.n	801087c <USBD_StdEPReq+0xe8>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80107d6:	699b      	ldr	r3, [r3, #24]
 80107d8:	b1d3      	cbz	r3, 8010810 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80107da:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80107de:	2314      	movs	r3, #20
 80107e0:	fb05 3303 	mla	r3, r5, r3, r3
 80107e4:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80107e6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80107ea:	d153      	bne.n	8010894 <USBD_StdEPReq+0x100>
                pep->status = 0x0001U;
 80107ec:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80107ee:	2202      	movs	r2, #2
 80107f0:	4629      	mov	r1, r5
 80107f2:	e03f      	b.n	8010874 <USBD_StdEPReq+0xe0>
      pdev->pClass->Setup(pdev, req);
 80107f4:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80107f8:	4619      	mov	r1, r3
 80107fa:	6892      	ldr	r2, [r2, #8]
 80107fc:	4620      	mov	r0, r4
 80107fe:	4790      	blx	r2
}
 8010800:	2000      	movs	r0, #0
 8010802:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8010804:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8010808:	2a02      	cmp	r2, #2
 801080a:	d01f      	beq.n	801084c <USBD_StdEPReq+0xb8>
 801080c:	2a03      	cmp	r2, #3
 801080e:	d003      	beq.n	8010818 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8010810:	4620      	mov	r0, r4
 8010812:	f7ff fe67 	bl	80104e4 <USBD_CtlError.constprop.0>
              break;
 8010816:	e7f3      	b.n	8010800 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010818:	885a      	ldrh	r2, [r3, #2]
 801081a:	b92a      	cbnz	r2, 8010828 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 801081c:	064a      	lsls	r2, r1, #25
 801081e:	d003      	beq.n	8010828 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010820:	88db      	ldrh	r3, [r3, #6]
 8010822:	b90b      	cbnz	r3, 8010828 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8010824:	f001 fd68 	bl	80122f8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8010828:	4620      	mov	r0, r4
 801082a:	f000 f8a0 	bl	801096e <USBD_CtlSendStatus>
              break;
 801082e:	e7e7      	b.n	8010800 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8010830:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8010834:	2a02      	cmp	r2, #2
 8010836:	d009      	beq.n	801084c <USBD_StdEPReq+0xb8>
 8010838:	2a03      	cmp	r2, #3
 801083a:	d1e9      	bne.n	8010810 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 801083c:	885b      	ldrh	r3, [r3, #2]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d1de      	bne.n	8010800 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8010842:	064d      	lsls	r5, r1, #25
 8010844:	d0f0      	beq.n	8010828 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8010846:	f001 fd65 	bl	8012314 <USBD_LL_ClearStallEP>
 801084a:	e7ed      	b.n	8010828 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801084c:	064b      	lsls	r3, r1, #25
 801084e:	d0df      	beq.n	8010810 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8010850:	f001 fd52 	bl	80122f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8010854:	2180      	movs	r1, #128	; 0x80
 8010856:	4620      	mov	r0, r4
 8010858:	f001 fd4e 	bl	80122f8 <USBD_LL_StallEP>
 801085c:	e7d0      	b.n	8010800 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801085e:	064a      	lsls	r2, r1, #25
 8010860:	d1d6      	bne.n	8010810 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010862:	062b      	lsls	r3, r5, #24
 8010864:	bf4c      	ite	mi
 8010866:	f100 0114 	addmi.w	r1, r0, #20
 801086a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 801086e:	2300      	movs	r3, #0
 8010870:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010872:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010874:	4620      	mov	r0, r4
 8010876:	f000 f850 	bl	801091a <USBD_CtlSendData>
              break;
 801087a:	e7c1      	b.n	8010800 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801087c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8010880:	2b00      	cmp	r3, #0
 8010882:	d0c5      	beq.n	8010810 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010884:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8010888:	2314      	movs	r3, #20
 801088a:	fb03 0505 	mla	r5, r3, r5, r0
 801088e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8010892:	e7a8      	b.n	80107e6 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8010894:	4620      	mov	r0, r4
 8010896:	f001 fd4b 	bl	8012330 <USBD_LL_IsStallEP>
 801089a:	b108      	cbz	r0, 80108a0 <USBD_StdEPReq+0x10c>
                pep->status = 0x0001U;
 801089c:	2301      	movs	r3, #1
 801089e:	e7a5      	b.n	80107ec <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 80108a0:	6028      	str	r0, [r5, #0]
 80108a2:	e7a4      	b.n	80107ee <USBD_StdEPReq+0x5a>

080108a4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80108a4:	780b      	ldrb	r3, [r1, #0]
 80108a6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80108a8:	784b      	ldrb	r3, [r1, #1]
 80108aa:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80108ac:	78ca      	ldrb	r2, [r1, #3]
 80108ae:	788b      	ldrb	r3, [r1, #2]
 80108b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80108b4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80108b6:	794a      	ldrb	r2, [r1, #5]
 80108b8:	790b      	ldrb	r3, [r1, #4]
 80108ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80108be:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80108c0:	79ca      	ldrb	r2, [r1, #7]
 80108c2:	798b      	ldrb	r3, [r1, #6]
 80108c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80108c8:	80c3      	strh	r3, [r0, #6]
}
 80108ca:	4770      	bx	lr

080108cc <USBD_CtlError>:
{
 80108cc:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 80108ce:	2180      	movs	r1, #128	; 0x80
{
 80108d0:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80108d2:	f001 fd11 	bl	80122f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80108d6:	4620      	mov	r0, r4
 80108d8:	2100      	movs	r1, #0
}
 80108da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80108de:	f001 bd0b 	b.w	80122f8 <USBD_LL_StallEP>

080108e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80108e2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80108e4:	b188      	cbz	r0, 801090a <USBD_GetString+0x28>
 80108e6:	2500      	movs	r5, #0
 80108e8:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80108ea:	462b      	mov	r3, r5
 80108ec:	3501      	adds	r5, #1
 80108ee:	5d44      	ldrb	r4, [r0, r5]
 80108f0:	2c00      	cmp	r4, #0
 80108f2:	d1fa      	bne.n	80108ea <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	3301      	adds	r3, #1
 80108f8:	005b      	lsls	r3, r3, #1
 80108fa:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80108fc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80108fe:	2303      	movs	r3, #3
 8010900:	704b      	strb	r3, [r1, #1]
 8010902:	2302      	movs	r3, #2
    while (*desc != '\0')
 8010904:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8010908:	b905      	cbnz	r5, 801090c <USBD_GetString+0x2a>
}
 801090a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 801090c:	1c5a      	adds	r2, r3, #1
 801090e:	b2d2      	uxtb	r2, r2
 8010910:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8010912:	3302      	adds	r3, #2
 8010914:	548c      	strb	r4, [r1, r2]
 8010916:	b2db      	uxtb	r3, r3
 8010918:	e7f4      	b.n	8010904 <USBD_GetString+0x22>

0801091a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801091a:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801091c:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801091e:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length   = len;
 8010920:	e9c0 2207 	strd	r2, r2, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010924:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010928:	460a      	mov	r2, r1
 801092a:	2100      	movs	r1, #0
 801092c:	f001 fd22 	bl	8012374 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010930:	2000      	movs	r0, #0
 8010932:	bd10      	pop	{r4, pc}

08010934 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8010934:	b508      	push	{r3, lr}
 8010936:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010938:	460a      	mov	r2, r1
 801093a:	2100      	movs	r1, #0
 801093c:	f001 fd1a 	bl	8012374 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010940:	2000      	movs	r0, #0
 8010942:	bd08      	pop	{r3, pc}

08010944 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8010944:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010946:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010948:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length   = len;
 801094a:	e9c0 2257 	strd	r2, r2, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801094e:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010952:	460a      	mov	r2, r1
 8010954:	2100      	movs	r1, #0
 8010956:	f001 fd1b 	bl	8012390 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801095a:	2000      	movs	r0, #0
 801095c:	bd10      	pop	{r4, pc}

0801095e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801095e:	b508      	push	{r3, lr}
 8010960:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010962:	460a      	mov	r2, r1
 8010964:	2100      	movs	r1, #0
 8010966:	f001 fd13 	bl	8012390 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801096a:	2000      	movs	r0, #0
 801096c:	bd08      	pop	{r3, pc}

0801096e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801096e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010970:	2304      	movs	r3, #4
 8010972:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010976:	2300      	movs	r3, #0
 8010978:	461a      	mov	r2, r3
 801097a:	4619      	mov	r1, r3
 801097c:	f001 fcfa 	bl	8012374 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010980:	2000      	movs	r0, #0
 8010982:	bd08      	pop	{r3, pc}

08010984 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010984:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010986:	2305      	movs	r3, #5
 8010988:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801098c:	2300      	movs	r3, #0
 801098e:	461a      	mov	r2, r3
 8010990:	4619      	mov	r1, r3
 8010992:	f001 fcfd 	bl	8012390 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010996:	2000      	movs	r0, #0
 8010998:	bd08      	pop	{r3, pc}
	...

0801099c <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801099c:	4b03      	ldr	r3, [pc, #12]	; (80109ac <disk_status+0x10>)
 801099e:	181a      	adds	r2, r3, r0
 80109a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80109a4:	6843      	ldr	r3, [r0, #4]
 80109a6:	7a10      	ldrb	r0, [r2, #8]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	4718      	bx	r3
 80109ac:	20002ab0 	.word	0x20002ab0

080109b0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80109b0:	4b06      	ldr	r3, [pc, #24]	; (80109cc <disk_initialize+0x1c>)
 80109b2:	5c1a      	ldrb	r2, [r3, r0]
 80109b4:	b942      	cbnz	r2, 80109c8 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 80109b6:	2201      	movs	r2, #1
 80109b8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80109ba:	181a      	adds	r2, r3, r0
 80109bc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80109c0:	7a10      	ldrb	r0, [r2, #8]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4718      	bx	r3
  }
  return stat;
}
 80109c8:	2000      	movs	r0, #0
 80109ca:	4770      	bx	lr
 80109cc:	20002ab0 	.word	0x20002ab0

080109d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80109d0:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80109d2:	4c05      	ldr	r4, [pc, #20]	; (80109e8 <disk_read+0x18>)
 80109d4:	1825      	adds	r5, r4, r0
 80109d6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80109da:	6840      	ldr	r0, [r0, #4]
 80109dc:	6884      	ldr	r4, [r0, #8]
 80109de:	7a28      	ldrb	r0, [r5, #8]
 80109e0:	46a4      	mov	ip, r4
  return res;
}
 80109e2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80109e4:	4760      	bx	ip
 80109e6:	bf00      	nop
 80109e8:	20002ab0 	.word	0x20002ab0

080109ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80109ec:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80109ee:	4c05      	ldr	r4, [pc, #20]	; (8010a04 <disk_write+0x18>)
 80109f0:	1825      	adds	r5, r4, r0
 80109f2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80109f6:	6840      	ldr	r0, [r0, #4]
 80109f8:	68c4      	ldr	r4, [r0, #12]
 80109fa:	7a28      	ldrb	r0, [r5, #8]
 80109fc:	46a4      	mov	ip, r4
  return res;
}
 80109fe:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010a00:	4760      	bx	ip
 8010a02:	bf00      	nop
 8010a04:	20002ab0 	.word	0x20002ab0

08010a08 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010a08:	4b05      	ldr	r3, [pc, #20]	; (8010a20 <disk_ioctl+0x18>)
{
 8010a0a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010a0c:	181c      	adds	r4, r3, r0
 8010a0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010a12:	6843      	ldr	r3, [r0, #4]
 8010a14:	7a20      	ldrb	r0, [r4, #8]
 8010a16:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8010a18:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010a1c:	4718      	bx	r3
 8010a1e:	bf00      	nop
 8010a20:	20002ab0 	.word	0x20002ab0

08010a24 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8010a24:	3801      	subs	r0, #1
 8010a26:	440a      	add	r2, r1
 8010a28:	4291      	cmp	r1, r2
 8010a2a:	d100      	bne.n	8010a2e <mem_cpy+0xa>
		*d++ = *s++;
}
 8010a2c:	4770      	bx	lr
		*d++ = *s++;
 8010a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a32:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010a36:	e7f7      	b.n	8010a28 <mem_cpy+0x4>

08010a38 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8010a38:	4402      	add	r2, r0
 8010a3a:	4290      	cmp	r0, r2
 8010a3c:	d100      	bne.n	8010a40 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8010a3e:	4770      	bx	lr
		*d++ = (BYTE)val;
 8010a40:	f800 1b01 	strb.w	r1, [r0], #1
 8010a44:	e7f9      	b.n	8010a3a <mem_set+0x2>
	...

08010a48 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8010a48:	4a1e      	ldr	r2, [pc, #120]	; (8010ac4 <chk_lock+0x7c>)
 8010a4a:	6813      	ldr	r3, [r2, #0]
{
 8010a4c:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8010a4e:	b17b      	cbz	r3, 8010a70 <chk_lock+0x28>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8010a50:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 8010a54:	429c      	cmp	r4, r3
 8010a56:	d109      	bne.n	8010a6c <chk_lock+0x24>
 8010a58:	6854      	ldr	r4, [r2, #4]
 8010a5a:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 8010a5e:	429c      	cmp	r4, r3
 8010a60:	d104      	bne.n	8010a6c <chk_lock+0x24>
				Files[i].clu == dp->sclust &&
 8010a62:	8914      	ldrh	r4, [r2, #8]
 8010a64:	f8b0 3206 	ldrh.w	r3, [r0, #518]	; 0x206
 8010a68:	429c      	cmp	r4, r3
 8010a6a:	d024      	beq.n	8010ab6 <chk_lock+0x6e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010a6c:	2400      	movs	r4, #0
 8010a6e:	e000      	b.n	8010a72 <chk_lock+0x2a>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
 8010a70:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8010a72:	68d3      	ldr	r3, [r2, #12]
 8010a74:	b1eb      	cbz	r3, 8010ab2 <chk_lock+0x6a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8010a76:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8010a7a:	42ab      	cmp	r3, r5
 8010a7c:	d109      	bne.n	8010a92 <chk_lock+0x4a>
 8010a7e:	6915      	ldr	r5, [r2, #16]
 8010a80:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 8010a84:	429d      	cmp	r5, r3
 8010a86:	d104      	bne.n	8010a92 <chk_lock+0x4a>
				Files[i].clu == dp->sclust &&
 8010a88:	8a95      	ldrh	r5, [r2, #20]
 8010a8a:	f8b0 3206 	ldrh.w	r3, [r0, #518]	; 0x206
 8010a8e:	429d      	cmp	r5, r3
 8010a90:	d016      	beq.n	8010ac0 <chk_lock+0x78>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010a92:	b974      	cbnz	r4, 8010ab2 <chk_lock+0x6a>
 8010a94:	2902      	cmp	r1, #2
 8010a96:	bf0c      	ite	eq
 8010a98:	2000      	moveq	r0, #0
 8010a9a:	2012      	movne	r0, #18

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8010a9c:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010a9e:	210c      	movs	r1, #12
 8010aa0:	fb01 2203 	mla	r2, r1, r3, r2
 8010aa4:	8953      	ldrh	r3, [r2, #10]
 8010aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010aaa:	bf14      	ite	ne
 8010aac:	2000      	movne	r0, #0
 8010aae:	2010      	moveq	r0, #16
 8010ab0:	e7f4      	b.n	8010a9c <chk_lock+0x54>
 8010ab2:	2000      	movs	r0, #0
 8010ab4:	e7f2      	b.n	8010a9c <chk_lock+0x54>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010ab6:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010ab8:	2900      	cmp	r1, #0
 8010aba:	d0f0      	beq.n	8010a9e <chk_lock+0x56>
 8010abc:	2010      	movs	r0, #16
 8010abe:	e7ed      	b.n	8010a9c <chk_lock+0x54>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	e7f9      	b.n	8010ab8 <chk_lock+0x70>
 8010ac4:	20002a94 	.word	0x20002a94

08010ac8 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8010ac8:	4a24      	ldr	r2, [pc, #144]	; (8010b5c <inc_lock+0x94>)
{
 8010aca:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 8010acc:	6813      	ldr	r3, [r2, #0]
 8010ace:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
 8010ad2:	429e      	cmp	r6, r3
 8010ad4:	d109      	bne.n	8010aea <inc_lock+0x22>
 8010ad6:	6855      	ldr	r5, [r2, #4]
 8010ad8:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
 8010adc:	42a5      	cmp	r5, r4
 8010ade:	d104      	bne.n	8010aea <inc_lock+0x22>
			Files[i].clu == dp->sclust &&
 8010ae0:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8010ae4:	8914      	ldrh	r4, [r2, #8]
 8010ae6:	42a5      	cmp	r5, r4
 8010ae8:	d01f      	beq.n	8010b2a <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 8010aea:	68d4      	ldr	r4, [r2, #12]
 8010aec:	42b4      	cmp	r4, r6
 8010aee:	d109      	bne.n	8010b04 <inc_lock+0x3c>
 8010af0:	6917      	ldr	r7, [r2, #16]
 8010af2:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8010af6:	42af      	cmp	r7, r5
 8010af8:	d104      	bne.n	8010b04 <inc_lock+0x3c>
			Files[i].clu == dp->sclust &&
 8010afa:	8a97      	ldrh	r7, [r2, #20]
 8010afc:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8010b00:	42af      	cmp	r7, r5
 8010b02:	d01c      	beq.n	8010b3e <inc_lock+0x76>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010b04:	b10b      	cbz	r3, 8010b0a <inc_lock+0x42>
 8010b06:	b9c4      	cbnz	r4, 8010b3a <inc_lock+0x72>
 8010b08:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8010b0a:	240c      	movs	r4, #12
 8010b0c:	435c      	muls	r4, r3
 8010b0e:	1915      	adds	r5, r2, r4
 8010b10:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8010b12:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8010b16:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8010b1a:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8010b1c:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8010b1e:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8010b20:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010b22:	b171      	cbz	r1, 8010b42 <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010b28:	e011      	b.n	8010b4e <inc_lock+0x86>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010b2a:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010b2c:	b149      	cbz	r1, 8010b42 <inc_lock+0x7a>
 8010b2e:	210c      	movs	r1, #12
 8010b30:	fb01 2103 	mla	r1, r1, r3, r2
 8010b34:	8949      	ldrh	r1, [r1, #10]
 8010b36:	2900      	cmp	r1, #0
 8010b38:	d0f4      	beq.n	8010b24 <inc_lock+0x5c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	e00c      	b.n	8010b58 <inc_lock+0x90>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010b3e:	2301      	movs	r3, #1
 8010b40:	e7f4      	b.n	8010b2c <inc_lock+0x64>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010b42:	210c      	movs	r1, #12
 8010b44:	fb01 2103 	mla	r1, r1, r3, r2
 8010b48:	8949      	ldrh	r1, [r1, #10]
 8010b4a:	3101      	adds	r1, #1
 8010b4c:	b289      	uxth	r1, r1
 8010b4e:	200c      	movs	r0, #12
 8010b50:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8010b54:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010b56:	8151      	strh	r1, [r2, #10]
}
 8010b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	20002a94 	.word	0x20002a94

08010b60 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010b60:	3801      	subs	r0, #1
 8010b62:	2801      	cmp	r0, #1
 8010b64:	d817      	bhi.n	8010b96 <dec_lock+0x36>
		n = Files[i].ctr;
 8010b66:	490d      	ldr	r1, [pc, #52]	; (8010b9c <dec_lock+0x3c>)
 8010b68:	220c      	movs	r2, #12
 8010b6a:	fb02 1200 	mla	r2, r2, r0, r1
 8010b6e:	8953      	ldrh	r3, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b74:	d106      	bne.n	8010b84 <dec_lock+0x24>
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
 8010b76:	2300      	movs	r3, #0
 8010b78:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010b7a:	230c      	movs	r3, #12
 8010b7c:	4343      	muls	r3, r0
 8010b7e:	2000      	movs	r0, #0
 8010b80:	50c8      	str	r0, [r1, r3]
 8010b82:	4770      	bx	lr
		if (n) n--;					/* Decrement read mode open count */
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d0f8      	beq.n	8010b7a <dec_lock+0x1a>
 8010b88:	3b01      	subs	r3, #1
 8010b8a:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8010b8c:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d0f3      	beq.n	8010b7a <dec_lock+0x1a>
		res = FR_OK;
 8010b92:	2000      	movs	r0, #0
 8010b94:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010b96:	2002      	movs	r0, #2
	}
	return res;
}
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop
 8010b9c:	20002a94 	.word	0x20002a94

08010ba0 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010ba0:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8010ba4:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010ba8:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8010baa:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010bae:	0a49      	lsrs	r1, r1, #9
 8010bb0:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010bb4:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8010bb6:	b130      	cbz	r0, 8010bc6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010bb8:	4281      	cmp	r1, r0
 8010bba:	d302      	bcc.n	8010bc2 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8010bbc:	1a09      	subs	r1, r1, r0
 8010bbe:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010bc0:	e7f8      	b.n	8010bb4 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8010bc2:	6858      	ldr	r0, [r3, #4]
 8010bc4:	4408      	add	r0, r1
}
 8010bc6:	4770      	bx	lr

08010bc8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010bc8:	6802      	ldr	r2, [r0, #0]
{
 8010bca:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8010bcc:	b152      	cbz	r2, 8010be4 <get_ldnumber+0x1c>
 8010bce:	4611      	mov	r1, r2
 8010bd0:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010bd6:	2c20      	cmp	r4, #32
 8010bd8:	d90c      	bls.n	8010bf4 <get_ldnumber+0x2c>
 8010bda:	2c3a      	cmp	r4, #58	; 0x3a
 8010bdc:	d1f8      	bne.n	8010bd0 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8010bde:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010be0:	428b      	cmp	r3, r1
 8010be2:	d002      	beq.n	8010bea <get_ldnumber+0x22>
	int vol = -1;
 8010be4:	f04f 30ff 	mov.w	r0, #4294967295
 8010be8:	e005      	b.n	8010bf6 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010bea:	7812      	ldrb	r2, [r2, #0]
 8010bec:	2a30      	cmp	r2, #48	; 0x30
 8010bee:	d1f9      	bne.n	8010be4 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010bf4:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8010bf6:	bd10      	pop	{r4, pc}

08010bf8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8010bf8:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8010bfa:	b190      	cbz	r0, 8010c22 <validate+0x2a>
 8010bfc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8010c00:	b17b      	cbz	r3, 8010c22 <validate+0x2a>
 8010c02:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8010c06:	b162      	cbz	r2, 8010c22 <validate+0x2a>
 8010c08:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8010c0c:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8010c10:	4291      	cmp	r1, r2
 8010c12:	d106      	bne.n	8010c22 <validate+0x2a>
 8010c14:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010c18:	f7ff fec0 	bl	801099c <disk_status>
 8010c1c:	f010 0001 	ands.w	r0, r0, #1
 8010c20:	d000      	beq.n	8010c24 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8010c22:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8010c24:	bd08      	pop	{r3, pc}

08010c26 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8010c26:	7eca      	ldrb	r2, [r1, #27]
 8010c28:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8010c2a:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8010c2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8010c30:	bf01      	itttt	eq
 8010c32:	7d48      	ldrbeq	r0, [r1, #21]
 8010c34:	7d0a      	ldrbeq	r2, [r1, #20]
 8010c36:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8010c3a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	4770      	bx	lr

08010c42 <sync_window.part.0>:
FRESULT sync_window (
 8010c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8010c44:	f8d0 622c 	ldr.w	r6, [r0, #556]	; 0x22c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8010c48:	4601      	mov	r1, r0
FRESULT sync_window (
 8010c4a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8010c52:	4632      	mov	r2, r6
 8010c54:	f7ff feca 	bl	80109ec <disk_write>
 8010c58:	4605      	mov	r5, r0
 8010c5a:	b9d0      	cbnz	r0, 8010c92 <sync_window.part.0+0x50>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010c5c:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8010c60:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8010c64:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010c68:	1af3      	subs	r3, r6, r3
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d203      	bcs.n	8010c76 <sync_window.part.0+0x34>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c6e:	f894 7203 	ldrb.w	r7, [r4, #515]	; 0x203
 8010c72:	2f01      	cmp	r7, #1
 8010c74:	d801      	bhi.n	8010c7a <sync_window.part.0+0x38>
}
 8010c76:	4628      	mov	r0, r5
 8010c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 8010c7a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8010c7e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8010c82:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8010c84:	4632      	mov	r2, r6
 8010c86:	2301      	movs	r3, #1
 8010c88:	4621      	mov	r1, r4
 8010c8a:	f7ff feaf 	bl	80109ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c8e:	3f01      	subs	r7, #1
 8010c90:	e7ef      	b.n	8010c72 <sync_window.part.0+0x30>
			res = FR_DISK_ERR;
 8010c92:	2501      	movs	r5, #1
 8010c94:	e7ef      	b.n	8010c76 <sync_window.part.0+0x34>

08010c96 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010c96:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8010c9a:	b10b      	cbz	r3, 8010ca0 <sync_window+0xa>
 8010c9c:	f7ff bfd1 	b.w	8010c42 <sync_window.part.0>
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	4770      	bx	lr

08010ca4 <move_window>:
{
 8010ca4:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010ca6:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8010caa:	428b      	cmp	r3, r1
{
 8010cac:	4605      	mov	r5, r0
 8010cae:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010cb0:	d011      	beq.n	8010cd6 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8010cb2:	f7ff fff0 	bl	8010c96 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010cb6:	b968      	cbnz	r0, 8010cd4 <move_window+0x30>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8010cb8:	4622      	mov	r2, r4
 8010cba:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	f7ff fe85 	bl	80109d0 <disk_read>
				res = FR_DISK_ERR;
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	bf1c      	itt	ne
 8010cca:	f04f 34ff 	movne.w	r4, #4294967295
 8010cce:	2001      	movne	r0, #1
			fs->winsect = sector;
 8010cd0:	f8c5 422c 	str.w	r4, [r5, #556]	; 0x22c
}
 8010cd4:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8010cd6:	2000      	movs	r0, #0
 8010cd8:	e7fc      	b.n	8010cd4 <move_window+0x30>
	...

08010cdc <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8010cdc:	2300      	movs	r3, #0
{
 8010cde:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8010ce0:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8010ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ce8:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8010cec:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8010cee:	f7ff ffd9 	bl	8010ca4 <move_window>
 8010cf2:	b9c0      	cbnz	r0, 8010d26 <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8010cf4:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8010cf8:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8010cfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010d00:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d110      	bne.n	8010d2a <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8010d08:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8010d0c:	4a08      	ldr	r2, [pc, #32]	; (8010d30 <check_fs+0x54>)
 8010d0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d006      	beq.n	8010d24 <check_fs+0x48>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8010d16:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8010d1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8010d1e:	1a80      	subs	r0, r0, r2
 8010d20:	bf18      	it	ne
 8010d22:	2001      	movne	r0, #1
}
 8010d24:	bd10      	pop	{r4, pc}
		return 3;
 8010d26:	2003      	movs	r0, #3
 8010d28:	e7fc      	b.n	8010d24 <check_fs+0x48>
		return 2;
 8010d2a:	2002      	movs	r0, #2
 8010d2c:	e7fa      	b.n	8010d24 <check_fs+0x48>
 8010d2e:	bf00      	nop
 8010d30:	00544146 	.word	0x00544146

08010d34 <find_volume>:
{
 8010d34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	6003      	str	r3, [r0, #0]
{
 8010d3c:	4605      	mov	r5, r0
	vol = get_ldnumber(path);
 8010d3e:	4608      	mov	r0, r1
{
 8010d40:	4617      	mov	r7, r2
	vol = get_ldnumber(path);
 8010d42:	f7ff ff41 	bl	8010bc8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8010d46:	1e06      	subs	r6, r0, #0
 8010d48:	f2c0 8126 	blt.w	8010f98 <find_volume+0x264>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010d4c:	4b96      	ldr	r3, [pc, #600]	; (8010fa8 <find_volume+0x274>)
 8010d4e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010d52:	2c00      	cmp	r4, #0
 8010d54:	f000 8122 	beq.w	8010f9c <find_volume+0x268>
	*rfs = fs;							/* Return pointer to the file system object */
 8010d58:	602c      	str	r4, [r5, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010d5a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8010d5e:	b183      	cbz	r3, 8010d82 <find_volume+0x4e>
		stat = disk_status(fs->drv);
 8010d60:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8010d64:	f7ff fe1a 	bl	801099c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010d68:	07c1      	lsls	r1, r0, #31
 8010d6a:	d40a      	bmi.n	8010d82 <find_volume+0x4e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8010d6c:	2f00      	cmp	r7, #0
 8010d6e:	f000 8117 	beq.w	8010fa0 <find_volume+0x26c>
 8010d72:	f010 0504 	ands.w	r5, r0, #4
 8010d76:	d000      	beq.n	8010d7a <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8010d78:	250a      	movs	r5, #10
}
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	b004      	add	sp, #16
 8010d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8010d82:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010d84:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8010d86:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010d8a:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010d8e:	f7ff fe0f 	bl	80109b0 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8010d92:	f010 0501 	ands.w	r5, r0, #1
 8010d96:	f040 8105 	bne.w	8010fa4 <find_volume+0x270>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8010d9a:	b10f      	cbz	r7, 8010da0 <find_volume+0x6c>
 8010d9c:	0742      	lsls	r2, r0, #29
 8010d9e:	d4eb      	bmi.n	8010d78 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8010da0:	2100      	movs	r1, #0
 8010da2:	4620      	mov	r0, r4
 8010da4:	f7ff ff9a 	bl	8010cdc <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8010da8:	2801      	cmp	r0, #1
 8010daa:	f040 80dc 	bne.w	8010f66 <find_volume+0x232>
 8010dae:	46e8      	mov	r8, sp
 8010db0:	f504 73df 	add.w	r3, r4, #446	; 0x1be
 8010db4:	f504 70ff 	add.w	r0, r4, #510	; 0x1fe
 8010db8:	4641      	mov	r1, r8
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8010dba:	791a      	ldrb	r2, [r3, #4]
 8010dbc:	b102      	cbz	r2, 8010dc0 <find_volume+0x8c>
 8010dbe:	689a      	ldr	r2, [r3, #8]
 8010dc0:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8010dc4:	3310      	adds	r3, #16
 8010dc6:	4298      	cmp	r0, r3
 8010dc8:	d1f7      	bne.n	8010dba <find_volume+0x86>
 8010dca:	2700      	movs	r7, #0
			bsect = br[i];
 8010dcc:	f858 6b04 	ldr.w	r6, [r8], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8010dd0:	2e00      	cmp	r6, #0
 8010dd2:	f000 80bf 	beq.w	8010f54 <find_volume+0x220>
 8010dd6:	4631      	mov	r1, r6
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f7ff ff7f 	bl	8010cdc <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8010dde:	2800      	cmp	r0, #0
 8010de0:	f040 80b9 	bne.w	8010f56 <find_volume+0x222>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010de4:	7b22      	ldrb	r2, [r4, #12]
 8010de6:	7ae3      	ldrb	r3, [r4, #11]
 8010de8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010df0:	f040 80bc 	bne.w	8010f6c <find_volume+0x238>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8010df4:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8010df6:	f894 e010 	ldrb.w	lr, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8010dfa:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8010dfc:	f884 e203 	strb.w	lr, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8010e00:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8010e04:	f10e 33ff 	add.w	r3, lr, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8010e08:	bf08      	it	eq
 8010e0a:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8010e0c:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	f200 80ab 	bhi.w	8010f6c <find_volume+0x238>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8010e16:	7b67      	ldrb	r7, [r4, #13]
 8010e18:	f884 7202 	strb.w	r7, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8010e1c:	2f00      	cmp	r7, #0
 8010e1e:	f000 80a5 	beq.w	8010f6c <find_volume+0x238>
 8010e22:	1e7b      	subs	r3, r7, #1
 8010e24:	423b      	tst	r3, r7
 8010e26:	f040 80a1 	bne.w	8010f6c <find_volume+0x238>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8010e2a:	7ca3      	ldrb	r3, [r4, #18]
 8010e2c:	7c60      	ldrb	r0, [r4, #17]
 8010e2e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8010e32:	0703      	lsls	r3, r0, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8010e34:	f8a4 0208 	strh.w	r0, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8010e38:	f040 8098 	bne.w	8010f6c <find_volume+0x238>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8010e3c:	7d22      	ldrb	r2, [r4, #20]
 8010e3e:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8010e40:	f894 c00f 	ldrb.w	ip, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8010e44:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8010e48:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8010e4a:	bf08      	it	eq
 8010e4c:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8010e4e:	ea52 220c 	orrs.w	r2, r2, ip, lsl #8
 8010e52:	f000 808b 	beq.w	8010f6c <find_volume+0x238>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8010e56:	fb01 fe0e 	mul.w	lr, r1, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8010e5a:	eb02 1c10 	add.w	ip, r2, r0, lsr #4
 8010e5e:	44f4      	add	ip, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010e60:	4563      	cmp	r3, ip
 8010e62:	f0c0 8083 	bcc.w	8010f6c <find_volume+0x238>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8010e66:	eba3 030c 	sub.w	r3, r3, ip
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8010e6a:	42bb      	cmp	r3, r7
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8010e6c:	fbb3 f8f7 	udiv	r8, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8010e70:	d37c      	bcc.n	8010f6c <find_volume+0x238>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8010e72:	f640 73f5 	movw	r3, #4085	; 0xff5
 8010e76:	4598      	cmp	r8, r3
 8010e78:	d97c      	bls.n	8010f74 <find_volume+0x240>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8010e7a:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 8010e7e:	45b8      	cmp	r8, r7
 8010e80:	bf94      	ite	ls
 8010e82:	2702      	movls	r7, #2
 8010e84:	2703      	movhi	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8010e86:	f108 0302 	add.w	r3, r8, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8010e8a:	4432      	add	r2, r6
	fs->database = bsect + sysect;						/* Data start sector */
 8010e8c:	44b4      	add	ip, r6
	if (fmt == FS_FAT32) {
 8010e8e:	2f03      	cmp	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8010e90:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8010e94:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8010e98:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8010e9c:	f8c4 c228 	str.w	ip, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8010ea0:	d16a      	bne.n	8010f78 <find_volume+0x244>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	d162      	bne.n	8010f6c <find_volume+0x238>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8010ea6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010ea8:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8010eac:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8010eae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010eb2:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8010eb6:	d359      	bcc.n	8010f6c <find_volume+0x238>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8010eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8010ebc:	e9c4 3383 	strd	r3, r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8010ec0:	2f03      	cmp	r7, #3
	fs->fsi_flag = 0x80;
 8010ec2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8010ec6:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8010eca:	d12d      	bne.n	8010f28 <find_volume+0x1f4>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8010ecc:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8010ed0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d125      	bne.n	8010f28 <find_volume+0x1f4>
		&& move_window(fs, bsect + 1) == FR_OK)
 8010edc:	1c71      	adds	r1, r6, #1
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f7ff fee0 	bl	8010ca4 <move_window>
 8010ee4:	bb00      	cbnz	r0, 8010f28 <find_volume+0x1f4>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010ee6:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8010eea:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8010eee:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010ef2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010ef6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d114      	bne.n	8010f28 <find_volume+0x1f4>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8010efe:	6822      	ldr	r2, [r4, #0]
 8010f00:	4b2a      	ldr	r3, [pc, #168]	; (8010fac <find_volume+0x278>)
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d110      	bne.n	8010f28 <find_volume+0x1f4>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8010f06:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8010f0a:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8010f0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010f12:	3320      	adds	r3, #32
 8010f14:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8010f16:	bf01      	itttt	eq
 8010f18:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8010f1c:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8010f20:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8010f24:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8010f28:	4a21      	ldr	r2, [pc, #132]	; (8010fb0 <find_volume+0x27c>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8010f2a:	f884 7200 	strb.w	r7, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8010f2e:	8813      	ldrh	r3, [r2, #0]
 8010f30:	3301      	adds	r3, #1
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	8013      	strh	r3, [r2, #0]
 8010f36:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010f3a:	4b1e      	ldr	r3, [pc, #120]	; (8010fb4 <find_volume+0x280>)
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	4294      	cmp	r4, r2
 8010f40:	bf04      	itt	eq
 8010f42:	2200      	moveq	r2, #0
 8010f44:	601a      	streq	r2, [r3, #0]
 8010f46:	68da      	ldr	r2, [r3, #12]
 8010f48:	4294      	cmp	r4, r2
 8010f4a:	f47f af16 	bne.w	8010d7a <find_volume+0x46>
 8010f4e:	2200      	movs	r2, #0
 8010f50:	60da      	str	r2, [r3, #12]
 8010f52:	e712      	b.n	8010d7a <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8010f54:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8010f56:	3701      	adds	r7, #1
 8010f58:	2f04      	cmp	r7, #4
 8010f5a:	f47f af37 	bne.w	8010dcc <find_volume+0x98>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010f5e:	2803      	cmp	r0, #3
 8010f60:	d104      	bne.n	8010f6c <find_volume+0x238>
 8010f62:	2501      	movs	r5, #1
 8010f64:	e709      	b.n	8010d7a <find_volume+0x46>
 8010f66:	2803      	cmp	r0, #3
 8010f68:	d0fb      	beq.n	8010f62 <find_volume+0x22e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8010f6a:	b108      	cbz	r0, 8010f70 <find_volume+0x23c>
 8010f6c:	250d      	movs	r5, #13
 8010f6e:	e704      	b.n	8010d7a <find_volume+0x46>
	bsect = 0;
 8010f70:	4606      	mov	r6, r0
 8010f72:	e737      	b.n	8010de4 <find_volume+0xb0>
	fmt = FS_FAT12;
 8010f74:	2701      	movs	r7, #1
 8010f76:	e786      	b.n	8010e86 <find_volume+0x152>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	d0f7      	beq.n	8010f6c <find_volume+0x238>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8010f7c:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010f7e:	2f02      	cmp	r7, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8010f80:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8010f84:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010f88:	bf1b      	ittet	ne
 8010f8a:	18d2      	addne	r2, r2, r3
 8010f8c:	f003 0301 	andne.w	r3, r3, #1
 8010f90:	4613      	moveq	r3, r2
 8010f92:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8010f96:	e78a      	b.n	8010eae <find_volume+0x17a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f98:	250b      	movs	r5, #11
 8010f9a:	e6ee      	b.n	8010d7a <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010f9c:	250c      	movs	r5, #12
 8010f9e:	e6ec      	b.n	8010d7a <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8010fa0:	463d      	mov	r5, r7
 8010fa2:	e6ea      	b.n	8010d7a <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010fa4:	2503      	movs	r5, #3
 8010fa6:	e6e8      	b.n	8010d7a <find_volume+0x46>
 8010fa8:	20002a90 	.word	0x20002a90
 8010fac:	41615252 	.word	0x41615252
 8010fb0:	20002aac 	.word	0x20002aac
 8010fb4:	20002a94 	.word	0x20002a94

08010fb8 <sync_fs>:
{
 8010fb8:	b538      	push	{r3, r4, r5, lr}
 8010fba:	4604      	mov	r4, r0
	res = sync_window(fs);
 8010fbc:	f7ff fe6b 	bl	8010c96 <sync_window>
 8010fc0:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8010fc2:	bbb8      	cbnz	r0, 8011034 <sync_fs+0x7c>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010fc4:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8010fc8:	2b03      	cmp	r3, #3
 8010fca:	d12a      	bne.n	8011022 <sync_fs+0x6a>
 8010fcc:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	d126      	bne.n	8011022 <sync_fs+0x6a>
			mem_set(fs->win.d8, 0, SS(fs));
 8010fd4:	4601      	mov	r1, r0
 8010fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f7ff fd2c 	bl	8010a38 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8010fe0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010fe4:	f8a4 21fe 	strh.w	r2, [r4, #510]	; 0x1fe
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8010fe8:	4a13      	ldr	r2, [pc, #76]	; (8011038 <sync_fs+0x80>)
 8010fea:	6022      	str	r2, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8010fec:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 8010ff0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8010ff4:	3220      	adds	r2, #32
 8010ff6:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8010ffa:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8010ffe:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8011002:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8011006:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
			fs->winsect = fs->volbase + 1;
 801100a:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 801100e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			fs->winsect = fs->volbase + 1;
 8011012:	3201      	adds	r2, #1
 8011014:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8011018:	4621      	mov	r1, r4
 801101a:	f7ff fce7 	bl	80109ec <disk_write>
			fs->fsi_flag = 0;
 801101e:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8011022:	2200      	movs	r2, #0
 8011024:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8011028:	4611      	mov	r1, r2
 801102a:	f7ff fced 	bl	8010a08 <disk_ioctl>
	res = sync_window(fs);
 801102e:	3800      	subs	r0, #0
 8011030:	bf18      	it	ne
 8011032:	2001      	movne	r0, #1
}
 8011034:	bd38      	pop	{r3, r4, r5, pc}
 8011036:	bf00      	nop
 8011038:	41615252 	.word	0x41615252

0801103c <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801103c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8011040:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011042:	3b02      	subs	r3, #2
 8011044:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8011046:	bf83      	ittte	hi
 8011048:	f890 3202 	ldrbhi.w	r3, [r0, #514]	; 0x202
 801104c:	f8d0 0228 	ldrhi.w	r0, [r0, #552]	; 0x228
 8011050:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011054:	2000      	movls	r0, #0
}
 8011056:	4770      	bx	lr

08011058 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8011058:	2901      	cmp	r1, #1
{
 801105a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801105c:	4606      	mov	r6, r0
 801105e:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8011060:	d959      	bls.n	8011116 <get_fat+0xbe>
 8011062:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8011066:	428b      	cmp	r3, r1
 8011068:	d955      	bls.n	8011116 <get_fat+0xbe>
		switch (fs->fs_type) {
 801106a:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 801106e:	2b02      	cmp	r3, #2
 8011070:	d027      	beq.n	80110c2 <get_fat+0x6a>
 8011072:	2b03      	cmp	r3, #3
 8011074:	d036      	beq.n	80110e4 <get_fat+0x8c>
 8011076:	2b01      	cmp	r3, #1
 8011078:	d14d      	bne.n	8011116 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 801107a:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801107e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8011082:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8011086:	f7ff fe0d 	bl	8010ca4 <move_window>
 801108a:	b110      	cbz	r0, 8011092 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801108c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011092:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8011096:	1c67      	adds	r7, r4, #1
 8011098:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801109c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80110a0:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 80110a2:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80110a4:	f7ff fdfe 	bl	8010ca4 <move_window>
 80110a8:	2800      	cmp	r0, #0
 80110aa:	d1ef      	bne.n	801108c <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80110ac:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80110b0:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80110b2:	5df0      	ldrb	r0, [r6, r7]
 80110b4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80110b8:	bf4c      	ite	mi
 80110ba:	0900      	lsrmi	r0, r0, #4
 80110bc:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80110c0:	e7e6      	b.n	8011090 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80110c2:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80110c6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80110ca:	f7ff fdeb 	bl	8010ca4 <move_window>
 80110ce:	2800      	cmp	r0, #0
 80110d0:	d1dc      	bne.n	801108c <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80110d2:	006d      	lsls	r5, r5, #1
 80110d4:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 80110d8:	1973      	adds	r3, r6, r5
 80110da:	5d70      	ldrb	r0, [r6, r5]
 80110dc:	785b      	ldrb	r3, [r3, #1]
 80110de:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 80110e2:	e7d5      	b.n	8011090 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80110e4:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80110e8:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 80110ec:	f7ff fdda 	bl	8010ca4 <move_window>
 80110f0:	2800      	cmp	r0, #0
 80110f2:	d1cb      	bne.n	801108c <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80110f4:	00ad      	lsls	r5, r5, #2
 80110f6:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 80110fa:	1972      	adds	r2, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80110fc:	7893      	ldrb	r3, [r2, #2]
 80110fe:	78d0      	ldrb	r0, [r2, #3]
 8011100:	041b      	lsls	r3, r3, #16
 8011102:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8011106:	5d70      	ldrb	r0, [r6, r5]
 8011108:	4318      	orrs	r0, r3
 801110a:	7853      	ldrb	r3, [r2, #1]
 801110c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8011110:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8011114:	e7bc      	b.n	8011090 <get_fat+0x38>
		switch (fs->fs_type) {
 8011116:	2001      	movs	r0, #1
	return val;
 8011118:	e7ba      	b.n	8011090 <get_fat+0x38>

0801111a <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 801111a:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 801111e:	2a01      	cmp	r2, #1
{
 8011120:	b570      	push	{r4, r5, r6, lr}
 8011122:	4604      	mov	r4, r0
 8011124:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8011126:	f8a0 1206 	strh.w	r1, [r0, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 801112a:	d101      	bne.n	8011130 <dir_sdi+0x16>
		return FR_INT_ERR;
 801112c:	2002      	movs	r0, #2
}
 801112e:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8011130:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8011134:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8011138:	4291      	cmp	r1, r2
 801113a:	d9f7      	bls.n	801112c <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 801113c:	b9fa      	cbnz	r2, 801117e <dir_sdi+0x64>
 801113e:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8011142:	2903      	cmp	r1, #3
 8011144:	d102      	bne.n	801114c <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8011146:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801114a:	b9b9      	cbnz	r1, 801117c <dir_sdi+0x62>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 801114c:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8011150:	42a9      	cmp	r1, r5
 8011152:	d9eb      	bls.n	801112c <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8011154:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8011158:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 801115c:	2800      	cmp	r0, #0
 801115e:	d0e5      	beq.n	801112c <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8011160:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8011164:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8011168:	f005 050f 	and.w	r5, r5, #15
 801116c:	eb01 1545 	add.w	r5, r1, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8011170:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8011174:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8011178:	2000      	movs	r0, #0
 801117a:	e7d8      	b.n	801112e <dir_sdi+0x14>
 801117c:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 801117e:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
 8011182:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8011184:	42b5      	cmp	r5, r6
 8011186:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 801118a:	4611      	mov	r1, r2
		while (idx >= ic) {	/* Follow cluster chain */
 801118c:	d202      	bcs.n	8011194 <dir_sdi+0x7a>
		sect = clust2sect(dp->fs, clst);
 801118e:	f7ff ff55 	bl	801103c <clust2sect>
 8011192:	e7e1      	b.n	8011158 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8011194:	f7ff ff60 	bl	8011058 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011198:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 801119a:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801119c:	d009      	beq.n	80111b2 <dir_sdi+0x98>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 801119e:	2801      	cmp	r0, #1
 80111a0:	d9c4      	bls.n	801112c <dir_sdi+0x12>
 80111a2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80111a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80111aa:	4283      	cmp	r3, r0
 80111ac:	d9be      	bls.n	801112c <dir_sdi+0x12>
			idx -= ic;
 80111ae:	1bad      	subs	r5, r5, r6
 80111b0:	e7e8      	b.n	8011184 <dir_sdi+0x6a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80111b2:	2001      	movs	r0, #1
 80111b4:	e7bb      	b.n	801112e <dir_sdi+0x14>

080111b6 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80111b6:	2901      	cmp	r1, #1
{
 80111b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111bc:	4605      	mov	r5, r0
 80111be:	460c      	mov	r4, r1
 80111c0:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80111c2:	d970      	bls.n	80112a6 <put_fat+0xf0>
 80111c4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80111c8:	428b      	cmp	r3, r1
 80111ca:	d96c      	bls.n	80112a6 <put_fat+0xf0>
		switch (fs->fs_type) {
 80111cc:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	d03c      	beq.n	801124e <put_fat+0x98>
 80111d4:	2b03      	cmp	r3, #3
 80111d6:	d04b      	beq.n	8011270 <put_fat+0xba>
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d164      	bne.n	80112a6 <put_fat+0xf0>
			bc = (UINT)clst; bc += bc / 2;
 80111dc:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80111e0:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80111e4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80111e8:	f7ff fd5c 	bl	8010ca4 <move_window>
			if (res != FR_OK) break;
 80111ec:	bb28      	cbnz	r0, 801123a <put_fat+0x84>
			p = &fs->win.d8[bc++ % SS(fs)];
 80111ee:	f107 0801 	add.w	r8, r7, #1
 80111f2:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80111f6:	f014 0401 	ands.w	r4, r4, #1
 80111fa:	bf1f      	itttt	ne
 80111fc:	5deb      	ldrbne	r3, [r5, r7]
 80111fe:	f003 020f 	andne.w	r2, r3, #15
 8011202:	0133      	lslne	r3, r6, #4
 8011204:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8011208:	bf14      	ite	ne
 801120a:	4313      	orrne	r3, r2
 801120c:	b2f3      	uxtbeq	r3, r6
 801120e:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011210:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 8011214:	2301      	movs	r3, #1
 8011216:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801121a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 801121e:	4628      	mov	r0, r5
 8011220:	f7ff fd40 	bl	8010ca4 <move_window>
			if (res != FR_OK) break;
 8011224:	b948      	cbnz	r0, 801123a <put_fat+0x84>
			p = &fs->win.d8[bc % SS(fs)];
 8011226:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801122a:	b144      	cbz	r4, 801123e <put_fat+0x88>
 801122c:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8011230:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8011234:	2301      	movs	r3, #1
 8011236:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
}
 801123a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801123e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8011242:	f022 030f 	bic.w	r3, r2, #15
 8011246:	f3c6 2203 	ubfx	r2, r6, #8, #4
 801124a:	431a      	orrs	r2, r3
 801124c:	e7f0      	b.n	8011230 <put_fat+0x7a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801124e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8011252:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8011256:	f7ff fd25 	bl	8010ca4 <move_window>
			if (res != FR_OK) break;
 801125a:	2800      	cmp	r0, #0
 801125c:	d1ed      	bne.n	801123a <put_fat+0x84>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 801125e:	0064      	lsls	r4, r4, #1
 8011260:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8011264:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8011268:	552e      	strb	r6, [r5, r4]
 801126a:	442c      	add	r4, r5
 801126c:	7062      	strb	r2, [r4, #1]
			fs->wflag = 1;
 801126e:	e7e1      	b.n	8011234 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011270:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8011274:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8011278:	f7ff fd14 	bl	8010ca4 <move_window>
			if (res != FR_OK) break;
 801127c:	2800      	cmp	r0, #0
 801127e:	d1dc      	bne.n	801123a <put_fat+0x84>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8011280:	00a4      	lsls	r4, r4, #2
 8011282:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8011286:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8011288:	78cb      	ldrb	r3, [r1, #3]
 801128a:	061b      	lsls	r3, r3, #24
 801128c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011290:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8011294:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011298:	552a      	strb	r2, [r5, r4]
 801129a:	704b      	strb	r3, [r1, #1]
 801129c:	0c13      	lsrs	r3, r2, #16
 801129e:	0e12      	lsrs	r2, r2, #24
 80112a0:	708b      	strb	r3, [r1, #2]
 80112a2:	70ca      	strb	r2, [r1, #3]
 80112a4:	e7c6      	b.n	8011234 <put_fat+0x7e>
		switch (fs->fs_type) {
 80112a6:	2002      	movs	r0, #2
 80112a8:	e7c7      	b.n	801123a <put_fat+0x84>

080112aa <create_chain>:
{
 80112aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ac:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 80112ae:	460f      	mov	r7, r1
 80112b0:	b989      	cbnz	r1, 80112d6 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 80112b2:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80112b6:	b1f6      	cbz	r6, 80112f6 <create_chain+0x4c>
 80112b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80112bc:	429e      	cmp	r6, r3
 80112be:	bf28      	it	cs
 80112c0:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
 80112c2:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80112c4:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 80112c8:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80112ca:	42a3      	cmp	r3, r4
 80112cc:	d816      	bhi.n	80112fc <create_chain+0x52>
			if (ncl > scl) return 0;	/* No free cluster */
 80112ce:	2e01      	cmp	r6, #1
 80112d0:	d813      	bhi.n	80112fa <create_chain+0x50>
 80112d2:	2400      	movs	r4, #0
 80112d4:	e005      	b.n	80112e2 <create_chain+0x38>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80112d6:	f7ff febf 	bl	8011058 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80112da:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80112dc:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80112de:	d802      	bhi.n	80112e6 <create_chain+0x3c>
 80112e0:	2401      	movs	r4, #1
}
 80112e2:	4620      	mov	r0, r4
 80112e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80112e6:	1c60      	adds	r0, r4, #1
 80112e8:	d035      	beq.n	8011356 <create_chain+0xac>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80112ea:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80112ee:	42a3      	cmp	r3, r4
 80112f0:	d8f7      	bhi.n	80112e2 <create_chain+0x38>
 80112f2:	463e      	mov	r6, r7
 80112f4:	e7e5      	b.n	80112c2 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80112f6:	2601      	movs	r6, #1
 80112f8:	e7e3      	b.n	80112c2 <create_chain+0x18>
			ncl = 2;
 80112fa:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80112fc:	4621      	mov	r1, r4
 80112fe:	4628      	mov	r0, r5
 8011300:	f7ff feaa 	bl	8011058 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8011304:	b130      	cbz	r0, 8011314 <create_chain+0x6a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8011306:	1c41      	adds	r1, r0, #1
 8011308:	d025      	beq.n	8011356 <create_chain+0xac>
 801130a:	2801      	cmp	r0, #1
 801130c:	d0e8      	beq.n	80112e0 <create_chain+0x36>
		if (ncl == scl) return 0;		/* No free cluster */
 801130e:	42b4      	cmp	r4, r6
 8011310:	d1d8      	bne.n	80112c4 <create_chain+0x1a>
 8011312:	e7de      	b.n	80112d2 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8011314:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8011318:	4621      	mov	r1, r4
 801131a:	4628      	mov	r0, r5
 801131c:	f7ff ff4b 	bl	80111b6 <put_fat>
	if (res == FR_OK && clst != 0) {
 8011320:	b9b8      	cbnz	r0, 8011352 <create_chain+0xa8>
 8011322:	b97f      	cbnz	r7, 8011344 <create_chain+0x9a>
		if (fs->free_clust != 0xFFFFFFFF) {
 8011324:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8011328:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 801132c:	1c5a      	adds	r2, r3, #1
 801132e:	d0d8      	beq.n	80112e2 <create_chain+0x38>
			fs->free_clust--;
 8011330:	3b01      	subs	r3, #1
 8011332:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8011336:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 801133a:	f043 0301 	orr.w	r3, r3, #1
 801133e:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8011342:	e7ce      	b.n	80112e2 <create_chain+0x38>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8011344:	4622      	mov	r2, r4
 8011346:	4639      	mov	r1, r7
 8011348:	4628      	mov	r0, r5
 801134a:	f7ff ff34 	bl	80111b6 <put_fat>
	if (res == FR_OK) {
 801134e:	2800      	cmp	r0, #0
 8011350:	d0e8      	beq.n	8011324 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8011352:	2801      	cmp	r0, #1
 8011354:	d1c4      	bne.n	80112e0 <create_chain+0x36>
 8011356:	f04f 34ff 	mov.w	r4, #4294967295
 801135a:	e7c2      	b.n	80112e2 <create_chain+0x38>

0801135c <dir_next>:
{
 801135c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8011360:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8011364:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8011366:	b2b3      	uxth	r3, r6
{
 8011368:	4604      	mov	r4, r0
 801136a:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 801136c:	b913      	cbnz	r3, 8011374 <dir_next+0x18>
		return FR_NO_FILE;
 801136e:	2004      	movs	r0, #4
}
 8011370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8011374:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8011378:	2b00      	cmp	r3, #0
 801137a:	d0f8      	beq.n	801136e <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 801137c:	f016 080f 	ands.w	r8, r6, #15
 8011380:	d10b      	bne.n	801139a <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8011382:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8011386:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		dp->sect++;					/* Next sector */
 801138a:	3301      	adds	r3, #1
 801138c:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
		if (!dp->clust) {		/* Static table */
 8011390:	b969      	cbnz	r1, 80113ae <dir_next+0x52>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8011392:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8011396:	42b3      	cmp	r3, r6
 8011398:	d9e9      	bls.n	801136e <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 801139a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 801139e:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80113a2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80113a6:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 80113aa:	2000      	movs	r0, #0
 80113ac:	e7e0      	b.n	8011370 <dir_next+0x14>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80113ae:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80113b2:	3f01      	subs	r7, #1
 80113b4:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 80113b8:	d1ef      	bne.n	801139a <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80113ba:	f7ff fe4d 	bl	8011058 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80113be:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80113c0:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80113c2:	d801      	bhi.n	80113c8 <dir_next+0x6c>
 80113c4:	2002      	movs	r0, #2
 80113c6:	e7d3      	b.n	8011370 <dir_next+0x14>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80113c8:	1c42      	adds	r2, r0, #1
 80113ca:	d101      	bne.n	80113d0 <dir_next+0x74>
 80113cc:	2001      	movs	r0, #1
 80113ce:	e7cf      	b.n	8011370 <dir_next+0x14>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80113d0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80113d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80113d8:	42ab      	cmp	r3, r5
 80113da:	d82f      	bhi.n	801143c <dir_next+0xe0>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80113dc:	f1b9 0f00 	cmp.w	r9, #0
 80113e0:	d0c5      	beq.n	801136e <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80113e2:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80113e6:	f7ff ff60 	bl	80112aa <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80113ea:	4605      	mov	r5, r0
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d03e      	beq.n	801146e <dir_next+0x112>
					if (clst == 1) return FR_INT_ERR;
 80113f0:	2801      	cmp	r0, #1
 80113f2:	d0e7      	beq.n	80113c4 <dir_next+0x68>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80113f4:	1c43      	adds	r3, r0, #1
 80113f6:	d0e9      	beq.n	80113cc <dir_next+0x70>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80113f8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80113fc:	f7ff fc4b 	bl	8010c96 <sync_window>
 8011400:	4601      	mov	r1, r0
 8011402:	2800      	cmp	r0, #0
 8011404:	d1e2      	bne.n	80113cc <dir_next+0x70>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8011406:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 801140a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801140e:	f7ff fb13 	bl	8010a38 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8011412:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8011416:	4629      	mov	r1, r5
 8011418:	4610      	mov	r0, r2
 801141a:	f7ff fe0f 	bl	801103c <clust2sect>
						dp->fs->wflag = 1;
 801141e:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8011422:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8011426:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 801142a:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 801142e:	42bb      	cmp	r3, r7
 8011430:	d80e      	bhi.n	8011450 <dir_next+0xf4>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8011432:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8011436:	1bdf      	subs	r7, r3, r7
 8011438:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->sect = clust2sect(dp->fs, clst);
 801143c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				dp->clust = clst;				/* Initialize data for new cluster */
 8011440:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8011444:	4629      	mov	r1, r5
 8011446:	f7ff fdf9 	bl	801103c <clust2sect>
 801144a:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 801144e:	e7a4      	b.n	801139a <dir_next+0x3e>
						dp->fs->wflag = 1;
 8011450:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011454:	f7ff fbf5 	bl	8010c42 <sync_window.part.0>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8011458:	2800      	cmp	r0, #0
 801145a:	d1b7      	bne.n	80113cc <dir_next+0x70>
						dp->fs->winsect++;
 801145c:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8011460:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8011464:	3301      	adds	r3, #1
 8011466:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801146a:	3701      	adds	r7, #1
 801146c:	e7db      	b.n	8011426 <dir_next+0xca>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801146e:	2007      	movs	r0, #7
 8011470:	e77e      	b.n	8011370 <dir_next+0x14>
	...

08011474 <follow_path>:
{
 8011474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8011478:	780b      	ldrb	r3, [r1, #0]
 801147a:	2b2f      	cmp	r3, #47	; 0x2f
{
 801147c:	4604      	mov	r4, r0
 801147e:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8011480:	d001      	beq.n	8011486 <follow_path+0x12>
 8011482:	2b5c      	cmp	r3, #92	; 0x5c
 8011484:	d100      	bne.n	8011488 <follow_path+0x14>
		path++;
 8011486:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8011488:	2600      	movs	r6, #0
 801148a:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801148e:	782b      	ldrb	r3, [r5, #0]
 8011490:	2b1f      	cmp	r3, #31
 8011492:	d934      	bls.n	80114fe <follow_path+0x8a>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011494:	4e5f      	ldr	r6, [pc, #380]	; (8011614 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8011496:	462b      	mov	r3, r5
 8011498:	f813 2b01 	ldrb.w	r2, [r3], #1
 801149c:	2a2f      	cmp	r2, #47	; 0x2f
 801149e:	d036      	beq.n	801150e <follow_path+0x9a>
 80114a0:	2a5c      	cmp	r2, #92	; 0x5c
 80114a2:	d034      	beq.n	801150e <follow_path+0x9a>
	sfn = dp->fn;
 80114a4:	f8d4 8218 	ldr.w	r8, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 80114a8:	220b      	movs	r2, #11
 80114aa:	2120      	movs	r1, #32
 80114ac:	4640      	mov	r0, r8
 80114ae:	f7ff fac3 	bl	8010a38 <mem_set>
	si = i = b = 0; ni = 8;
 80114b2:	f04f 0c00 	mov.w	ip, #0
 80114b6:	f105 3eff 	add.w	lr, r5, #4294967295
 80114ba:	2708      	movs	r7, #8
 80114bc:	4663      	mov	r3, ip
 80114be:	f1c5 0902 	rsb	r9, r5, #2
		c = (BYTE)p[si++];
 80114c2:	eb09 010e 	add.w	r1, r9, lr
 80114c6:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80114ca:	2a20      	cmp	r2, #32
 80114cc:	d935      	bls.n	801153a <follow_path+0xc6>
 80114ce:	2a2f      	cmp	r2, #47	; 0x2f
 80114d0:	d033      	beq.n	801153a <follow_path+0xc6>
 80114d2:	2a5c      	cmp	r2, #92	; 0x5c
 80114d4:	d031      	beq.n	801153a <follow_path+0xc6>
		if (c == '.' || i >= ni) {
 80114d6:	2a2e      	cmp	r2, #46	; 0x2e
 80114d8:	f000 8094 	beq.w	8011604 <follow_path+0x190>
 80114dc:	4567      	cmp	r7, ip
 80114de:	d90c      	bls.n	80114fa <follow_path+0x86>
		if (c >= 0x80) {				/* Extended character? */
 80114e0:	0611      	lsls	r1, r2, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80114e2:	bf48      	it	mi
 80114e4:	3a80      	submi	r2, #128	; 0x80
 80114e6:	484c      	ldr	r0, [pc, #304]	; (8011618 <follow_path+0x1a4>)
 80114e8:	bf44      	itt	mi
 80114ea:	5cb2      	ldrbmi	r2, [r6, r2]
			b |= 3;						/* Eliminate NT flag */
 80114ec:	f043 0303 	orrmi.w	r3, r3, #3
	while (*str && *str != chr) str++;
 80114f0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80114f4:	b169      	cbz	r1, 8011512 <follow_path+0x9e>
 80114f6:	428a      	cmp	r2, r1
 80114f8:	d1fa      	bne.n	80114f0 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80114fa:	2006      	movs	r0, #6
	return res;
 80114fc:	e005      	b.n	801150a <follow_path+0x96>
		res = dir_sdi(dp, 0);
 80114fe:	4631      	mov	r1, r6
 8011500:	4620      	mov	r0, r4
 8011502:	f7ff fe0a 	bl	801111a <dir_sdi>
		dp->dir = 0;
 8011506:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
}
 801150a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
 801150e:	461d      	mov	r5, r3
 8011510:	e7c1      	b.n	8011496 <follow_path+0x22>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8011512:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8011516:	2919      	cmp	r1, #25
 8011518:	d806      	bhi.n	8011528 <follow_path+0xb4>
				b |= 2;
 801151a:	f043 0302 	orr.w	r3, r3, #2
			sfn[i++] = c;
 801151e:	f808 200c 	strb.w	r2, [r8, ip]
 8011522:	f10c 0c01 	add.w	ip, ip, #1
 8011526:	e7cc      	b.n	80114c2 <follow_path+0x4e>
				if (IsLower(c)) {		/* ASCII small capital? */
 8011528:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 801152c:	2919      	cmp	r1, #25
					b |= 1; c -= 0x20;
 801152e:	bf9e      	ittt	ls
 8011530:	3a20      	subls	r2, #32
 8011532:	f043 0301 	orrls.w	r3, r3, #1
 8011536:	b2d2      	uxtbls	r2, r2
 8011538:	e7f1      	b.n	801151e <follow_path+0xaa>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 801153a:	2a21      	cmp	r2, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 801153c:	440d      	add	r5, r1
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 801153e:	bf34      	ite	cc
 8011540:	2204      	movcc	r2, #4
 8011542:	2200      	movcs	r2, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8011544:	f1bc 0f00 	cmp.w	ip, #0
 8011548:	d0d7      	beq.n	80114fa <follow_path+0x86>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 801154a:	f898 1000 	ldrb.w	r1, [r8]
 801154e:	29e5      	cmp	r1, #229	; 0xe5
 8011550:	bf04      	itt	eq
 8011552:	2105      	moveq	r1, #5
 8011554:	f888 1000 	strbeq.w	r1, [r8]
	if (ni == 8) b <<= 2;
 8011558:	2f08      	cmp	r7, #8
 801155a:	d12e      	bne.n	80115ba <follow_path+0x146>
 801155c:	009b      	lsls	r3, r3, #2
 801155e:	b2db      	uxtb	r3, r3
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8011560:	f003 030c 	and.w	r3, r3, #12
 8011564:	2b04      	cmp	r3, #4
 8011566:	bf08      	it	eq
 8011568:	f042 0208 	orreq.w	r2, r2, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 801156c:	f888 200b 	strb.w	r2, [r8, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011570:	2100      	movs	r1, #0
 8011572:	4620      	mov	r0, r4
 8011574:	f7ff fdd1 	bl	801111a <dir_sdi>
	if (res != FR_OK) return res;
 8011578:	bb38      	cbnz	r0, 80115ca <follow_path+0x156>
		res = move_window(dp->fs, dp->sect);
 801157a:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 801157e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8011582:	f7ff fb8f 	bl	8010ca4 <move_window>
		if (res != FR_OK) break;
 8011586:	bb00      	cbnz	r0, 80115ca <follow_path+0x156>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8011588:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801158c:	7813      	ldrb	r3, [r2, #0]
 801158e:	b1db      	cbz	r3, 80115c8 <follow_path+0x154>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8011590:	7ad3      	ldrb	r3, [r2, #11]
 8011592:	f013 0008 	ands.w	r0, r3, #8
 8011596:	d10b      	bne.n	80115b0 <follow_path+0x13c>
 8011598:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 801159c:	f102 0c0b 	add.w	ip, r2, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80115a0:	4562      	cmp	r2, ip
 80115a2:	d012      	beq.n	80115ca <follow_path+0x156>
 80115a4:	f812 7b01 	ldrb.w	r7, [r2], #1
 80115a8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80115ac:	428f      	cmp	r7, r1
 80115ae:	d0f7      	beq.n	80115a0 <follow_path+0x12c>
		res = dir_next(dp, 0);		/* Next entry */
 80115b0:	2100      	movs	r1, #0
 80115b2:	4620      	mov	r0, r4
 80115b4:	f7ff fed2 	bl	801135c <dir_next>
 80115b8:	e7de      	b.n	8011578 <follow_path+0x104>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80115ba:	f003 0103 	and.w	r1, r3, #3
 80115be:	2901      	cmp	r1, #1
 80115c0:	bf08      	it	eq
 80115c2:	f042 0210 	orreq.w	r2, r2, #16
 80115c6:	e7cb      	b.n	8011560 <follow_path+0xec>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80115c8:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 80115ca:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80115ce:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80115d0:	b130      	cbz	r0, 80115e0 <follow_path+0x16c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80115d2:	2804      	cmp	r0, #4
 80115d4:	d199      	bne.n	801150a <follow_path+0x96>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80115d6:	f013 0f04 	tst.w	r3, #4
 80115da:	bf08      	it	eq
 80115dc:	2005      	moveq	r0, #5
 80115de:	e794      	b.n	801150a <follow_path+0x96>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80115e0:	075a      	lsls	r2, r3, #29
 80115e2:	d492      	bmi.n	801150a <follow_path+0x96>
			dir = dp->dir;						/* Follow the sub-directory */
 80115e4:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80115e8:	7acb      	ldrb	r3, [r1, #11]
 80115ea:	06db      	lsls	r3, r3, #27
 80115ec:	d508      	bpl.n	8011600 <follow_path+0x18c>
			dp->sclust = ld_clust(dp->fs, dir);
 80115ee:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80115f2:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80115f6:	f7ff fb16 	bl	8010c26 <ld_clust.isra.0>
 80115fa:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80115fe:	e74a      	b.n	8011496 <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011600:	2005      	movs	r0, #5
 8011602:	e782      	b.n	801150a <follow_path+0x96>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8011604:	2f08      	cmp	r7, #8
 8011606:	f47f af78 	bne.w	80114fa <follow_path+0x86>
			b <<= 2; continue;
 801160a:	009b      	lsls	r3, r3, #2
			i = 8; ni = 11;
 801160c:	46bc      	mov	ip, r7
			b <<= 2; continue;
 801160e:	b2db      	uxtb	r3, r3
			i = 8; ni = 11;
 8011610:	270b      	movs	r7, #11
			b <<= 2; continue;
 8011612:	e756      	b.n	80114c2 <follow_path+0x4e>
 8011614:	08018e97 	.word	0x08018e97
 8011618:	08018e88 	.word	0x08018e88

0801161c <dir_register>:
{
 801161c:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 801161e:	2100      	movs	r1, #0
{
 8011620:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8011622:	f7ff fd7a 	bl	801111a <dir_sdi>
	if (res == FR_OK) {
 8011626:	4604      	mov	r4, r0
 8011628:	bb68      	cbnz	r0, 8011686 <dir_register+0x6a>
			res = move_window(dp->fs, dp->sect);
 801162a:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 801162e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8011632:	f7ff fb37 	bl	8010ca4 <move_window>
			if (res != FR_OK) break;
 8011636:	4604      	mov	r4, r0
 8011638:	bb28      	cbnz	r0, 8011686 <dir_register+0x6a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 801163a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	2be5      	cmp	r3, #229	; 0xe5
 8011642:	d119      	bne.n	8011678 <dir_register+0x5c>
		res = move_window(dp->fs, dp->sect);
 8011644:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8011648:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 801164c:	f7ff fb2a 	bl	8010ca4 <move_window>
		if (res == FR_OK) {
 8011650:	4604      	mov	r4, r0
 8011652:	b978      	cbnz	r0, 8011674 <dir_register+0x58>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8011654:	4601      	mov	r1, r0
 8011656:	2220      	movs	r2, #32
 8011658:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 801165c:	f7ff f9ec 	bl	8010a38 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8011660:	220b      	movs	r2, #11
 8011662:	e9d5 0185 	ldrd	r0, r1, [r5, #532]	; 0x214
 8011666:	f7ff f9dd 	bl	8010a24 <mem_cpy>
			dp->fs->wflag = 1;
 801166a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 801166e:	2201      	movs	r2, #1
 8011670:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8011674:	4620      	mov	r0, r4
 8011676:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8011678:	2b00      	cmp	r3, #0
 801167a:	d0e3      	beq.n	8011644 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 801167c:	2101      	movs	r1, #1
 801167e:	4628      	mov	r0, r5
 8011680:	f7ff fe6c 	bl	801135c <dir_next>
 8011684:	e7cf      	b.n	8011626 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011686:	2c04      	cmp	r4, #4
 8011688:	bf08      	it	eq
 801168a:	2407      	moveq	r4, #7
 801168c:	e7f2      	b.n	8011674 <dir_register+0x58>

0801168e <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801168e:	2901      	cmp	r1, #1
{
 8011690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011692:	4605      	mov	r5, r0
 8011694:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8011696:	d92a      	bls.n	80116ee <remove_chain+0x60>
 8011698:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801169c:	428b      	cmp	r3, r1
 801169e:	d926      	bls.n	80116ee <remove_chain+0x60>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80116a0:	4621      	mov	r1, r4
 80116a2:	4628      	mov	r0, r5
 80116a4:	9401      	str	r4, [sp, #4]
 80116a6:	f7ff fcd7 	bl	8011058 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 80116aa:	9901      	ldr	r1, [sp, #4]
 80116ac:	4604      	mov	r4, r0
 80116ae:	b910      	cbnz	r0, 80116b6 <remove_chain+0x28>
		res = FR_INT_ERR;
 80116b0:	2000      	movs	r0, #0
}
 80116b2:	b003      	add	sp, #12
 80116b4:	bd30      	pop	{r4, r5, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80116b6:	2801      	cmp	r0, #1
 80116b8:	d019      	beq.n	80116ee <remove_chain+0x60>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80116ba:	1c60      	adds	r0, r4, #1
 80116bc:	d019      	beq.n	80116f2 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80116be:	2200      	movs	r2, #0
 80116c0:	4628      	mov	r0, r5
 80116c2:	f7ff fd78 	bl	80111b6 <put_fat>
			if (res != FR_OK) break;
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d1f3      	bne.n	80116b2 <remove_chain+0x24>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80116ca:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 80116ce:	1c5a      	adds	r2, r3, #1
 80116d0:	d008      	beq.n	80116e4 <remove_chain+0x56>
				fs->free_clust++;
 80116d2:	3301      	adds	r3, #1
 80116d4:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
				fs->fsi_flag |= 1;
 80116d8:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 80116dc:	f043 0301 	orr.w	r3, r3, #1
 80116e0:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80116e4:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80116e8:	429c      	cmp	r4, r3
 80116ea:	d3d9      	bcc.n	80116a0 <remove_chain+0x12>
 80116ec:	e7e0      	b.n	80116b0 <remove_chain+0x22>
		res = FR_INT_ERR;
 80116ee:	2002      	movs	r0, #2
 80116f0:	e7df      	b.n	80116b2 <remove_chain+0x24>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80116f2:	2001      	movs	r0, #1
 80116f4:	e7dd      	b.n	80116b2 <remove_chain+0x24>
	...

080116f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80116f8:	b530      	push	{r4, r5, lr}
 80116fa:	b085      	sub	sp, #20
 80116fc:	e9cd 1000 	strd	r1, r0, [sp]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8011700:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 8011702:	9103      	str	r1, [sp, #12]
{
 8011704:	4615      	mov	r5, r2
	vol = get_ldnumber(&rp);
 8011706:	f7ff fa5f 	bl	8010bc8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 801170a:	1e01      	subs	r1, r0, #0
 801170c:	db22      	blt.n	8011754 <f_mount+0x5c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801170e:	4c13      	ldr	r4, [pc, #76]	; (801175c <f_mount+0x64>)
 8011710:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]

	if (cfs) {
 8011714:	b168      	cbz	r0, 8011732 <f_mount+0x3a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011716:	4b12      	ldr	r3, [pc, #72]	; (8011760 <f_mount+0x68>)
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	4290      	cmp	r0, r2
 801171c:	bf04      	itt	eq
 801171e:	2200      	moveq	r2, #0
 8011720:	601a      	streq	r2, [r3, #0]
 8011722:	68da      	ldr	r2, [r3, #12]
 8011724:	4290      	cmp	r0, r2
 8011726:	f04f 0200 	mov.w	r2, #0
 801172a:	bf08      	it	eq
 801172c:	60da      	streq	r2, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801172e:	f880 2200 	strb.w	r2, [r0, #512]	; 0x200
	}

	if (fs) {
 8011732:	9801      	ldr	r0, [sp, #4]
 8011734:	b110      	cbz	r0, 801173c <f_mount+0x44>
		fs->fs_type = 0;				/* Clear new fs object */
 8011736:	2300      	movs	r3, #0
 8011738:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801173c:	f844 0021 	str.w	r0, [r4, r1, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011740:	b130      	cbz	r0, 8011750 <f_mount+0x58>
 8011742:	2d01      	cmp	r5, #1
 8011744:	d108      	bne.n	8011758 <f_mount+0x60>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8011746:	2200      	movs	r2, #0
 8011748:	4669      	mov	r1, sp
 801174a:	a801      	add	r0, sp, #4
 801174c:	f7ff faf2 	bl	8010d34 <find_volume>
	LEAVE_FF(fs, res);
}
 8011750:	b005      	add	sp, #20
 8011752:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8011754:	200b      	movs	r0, #11
 8011756:	e7fb      	b.n	8011750 <f_mount+0x58>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011758:	2000      	movs	r0, #0
 801175a:	e7f9      	b.n	8011750 <f_mount+0x58>
 801175c:	20002a90 	.word	0x20002a90
 8011760:	20002a94 	.word	0x20002a94

08011764 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011768:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 801176c:	4617      	mov	r7, r2
 801176e:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8011770:	4605      	mov	r5, r0
 8011772:	2800      	cmp	r0, #0
 8011774:	f000 8091 	beq.w	801189a <f_open+0x136>
	fp->fs = 0;			/* Clear file object */
 8011778:	2300      	movs	r3, #0
 801177a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 801177e:	f002 021e 	and.w	r2, r2, #30
 8011782:	a901      	add	r1, sp, #4
 8011784:	a886      	add	r0, sp, #536	; 0x218
 8011786:	f7ff fad5 	bl	8010d34 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 801178a:	bb10      	cbnz	r0, 80117d2 <f_open+0x6e>
		INIT_BUF(dj);
 801178c:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 801178e:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 8011790:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8011792:	a806      	add	r0, sp, #24
 8011794:	f7ff fe6e 	bl	8011474 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8011798:	f007 041f 	and.w	r4, r7, #31
		dir = dj.dir;
 801179c:	9e8b      	ldr	r6, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801179e:	b940      	cbnz	r0, 80117b2 <f_open+0x4e>
			if (!dir)	/* Default directory itself */
 80117a0:	b1de      	cbz	r6, 80117da <f_open+0x76>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80117a2:	f014 0f1e 	tst.w	r4, #30
 80117a6:	bf14      	ite	ne
 80117a8:	2101      	movne	r1, #1
 80117aa:	2100      	moveq	r1, #0
 80117ac:	a806      	add	r0, sp, #24
 80117ae:	f7ff f94b 	bl	8010a48 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80117b2:	f017 0f1c 	tst.w	r7, #28
 80117b6:	d065      	beq.n	8011884 <f_open+0x120>
			if (res != FR_OK) {					/* No file, create new */
 80117b8:	b188      	cbz	r0, 80117de <f_open+0x7a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80117ba:	2804      	cmp	r0, #4
 80117bc:	d109      	bne.n	80117d2 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80117be:	4b49      	ldr	r3, [pc, #292]	; (80118e4 <f_open+0x180>)
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	b112      	cbz	r2, 80117ca <f_open+0x66>
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d169      	bne.n	801189e <f_open+0x13a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80117ca:	a806      	add	r0, sp, #24
 80117cc:	f7ff ff26 	bl	801161c <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80117d0:	b170      	cbz	r0, 80117f0 <f_open+0x8c>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80117d2:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80117d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 80117da:	2006      	movs	r0, #6
 80117dc:	e7e9      	b.n	80117b2 <f_open+0x4e>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80117de:	7af3      	ldrb	r3, [r6, #11]
 80117e0:	f013 0f11 	tst.w	r3, #17
 80117e4:	d157      	bne.n	8011896 <f_open+0x132>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80117e6:	0778      	lsls	r0, r7, #29
 80117e8:	d45b      	bmi.n	80118a2 <f_open+0x13e>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80117ea:	073b      	lsls	r3, r7, #28
 80117ec:	d534      	bpl.n	8011858 <f_open+0xf4>
 80117ee:	e002      	b.n	80117f6 <f_open+0x92>
				dir = dj.dir;					/* New entry */
 80117f0:	9e8b      	ldr	r6, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80117f2:	f044 0408 	orr.w	r4, r4, #8
				dw = GET_FATTIME();				/* Created time */
 80117f6:	f7fe f877 	bl	800f8e8 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 80117fa:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80117fe:	2700      	movs	r7, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8011800:	73b0      	strb	r0, [r6, #14]
 8011802:	73f3      	strb	r3, [r6, #15]
 8011804:	0c03      	lsrs	r3, r0, #16
 8011806:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8011808:	72f7      	strb	r7, [r6, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 801180a:	7737      	strb	r7, [r6, #28]
 801180c:	7777      	strb	r7, [r6, #29]
 801180e:	77b7      	strb	r7, [r6, #30]
 8011810:	77f7      	strb	r7, [r6, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8011812:	7433      	strb	r3, [r6, #16]
 8011814:	7470      	strb	r0, [r6, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8011816:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8011818:	4631      	mov	r1, r6
 801181a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 801181e:	f7ff fa02 	bl	8010c26 <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 8011822:	76b7      	strb	r7, [r6, #26]
 8011824:	76f7      	strb	r7, [r6, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8011826:	7537      	strb	r7, [r6, #20]
 8011828:	7577      	strb	r7, [r6, #21]
				dj.fs->wflag = 1;
 801182a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 801182c:	2201      	movs	r2, #1
 801182e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8011832:	4607      	mov	r7, r0
 8011834:	b180      	cbz	r0, 8011858 <f_open+0xf4>
					res = remove_chain(dj.fs, cl);
 8011836:	4601      	mov	r1, r0
 8011838:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 801183a:	f8d3 822c 	ldr.w	r8, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 801183e:	f7ff ff26 	bl	801168e <remove_chain>
					if (res == FR_OK) {
 8011842:	2800      	cmp	r0, #0
 8011844:	d1c5      	bne.n	80117d2 <f_open+0x6e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8011846:	9886      	ldr	r0, [sp, #536]	; 0x218
 8011848:	3f01      	subs	r7, #1
 801184a:	f8c0 720c 	str.w	r7, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 801184e:	4641      	mov	r1, r8
 8011850:	f7ff fa28 	bl	8010ca4 <move_window>
		if (res == FR_OK) {
 8011854:	2800      	cmp	r0, #0
 8011856:	d1bc      	bne.n	80117d2 <f_open+0x6e>
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8011858:	9b86      	ldr	r3, [sp, #536]	; 0x218
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801185a:	0722      	lsls	r2, r4, #28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801185c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
				mode |= FA__WRITTEN;
 8011860:	bf48      	it	mi
 8011862:	f044 0420 	orrmi.w	r4, r4, #32
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011866:	f014 0ffe 	tst.w	r4, #254	; 0xfe
			fp->dir_ptr = dir;
 801186a:	e9c5 3687 	strd	r3, r6, [r5, #540]	; 0x21c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801186e:	bf14      	ite	ne
 8011870:	2101      	movne	r1, #1
 8011872:	2100      	moveq	r1, #0
 8011874:	a806      	add	r0, sp, #24
 8011876:	f7ff f927 	bl	8010ac8 <inc_lock>
 801187a:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 801187e:	b9a0      	cbnz	r0, 80118aa <f_open+0x146>
 8011880:	2002      	movs	r0, #2
 8011882:	e7a6      	b.n	80117d2 <f_open+0x6e>
			if (res == FR_OK) {					/* Follow succeeded */
 8011884:	2800      	cmp	r0, #0
 8011886:	d1a4      	bne.n	80117d2 <f_open+0x6e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8011888:	7af3      	ldrb	r3, [r6, #11]
 801188a:	06da      	lsls	r2, r3, #27
 801188c:	d40b      	bmi.n	80118a6 <f_open+0x142>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801188e:	07bf      	lsls	r7, r7, #30
 8011890:	d5e2      	bpl.n	8011858 <f_open+0xf4>
 8011892:	07d8      	lsls	r0, r3, #31
 8011894:	d5e0      	bpl.n	8011858 <f_open+0xf4>
					res = FR_DENIED;
 8011896:	2007      	movs	r0, #7
 8011898:	e79b      	b.n	80117d2 <f_open+0x6e>
	if (!fp) return FR_INVALID_OBJECT;
 801189a:	2009      	movs	r0, #9
 801189c:	e799      	b.n	80117d2 <f_open+0x6e>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801189e:	2012      	movs	r0, #18
 80118a0:	e797      	b.n	80117d2 <f_open+0x6e>
						res = FR_EXIST;
 80118a2:	2008      	movs	r0, #8
 80118a4:	e795      	b.n	80117d2 <f_open+0x6e>
					res = FR_NO_FILE;
 80118a6:	2004      	movs	r0, #4
 80118a8:	e793      	b.n	80117d2 <f_open+0x6e>
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80118aa:	9f86      	ldr	r7, [sp, #536]	; 0x218
			fp->flag = mode;					/* File access mode */
 80118ac:	f885 4206 	strb.w	r4, [r5, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80118b0:	2400      	movs	r4, #0
 80118b2:	f885 4207 	strb.w	r4, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80118b6:	f897 0200 	ldrb.w	r0, [r7, #512]	; 0x200
 80118ba:	4631      	mov	r1, r6
 80118bc:	f7ff f9b3 	bl	8010c26 <ld_clust.isra.0>
 80118c0:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80118c4:	69f3      	ldr	r3, [r6, #28]
			fp->dsect = 0;
 80118c6:	f8c5 4218 	str.w	r4, [r5, #536]	; 0x218
			fp->fptr = 0;						/* File pointer */
 80118ca:	e9c5 4382 	strd	r4, r3, [r5, #520]	; 0x208
			fp->id = fp->fs->id;
 80118ce:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
			fp->cltbl = 0;						/* Normal seek mode */
 80118d2:	f8c5 4224 	str.w	r4, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 80118d6:	f8c5 7200 	str.w	r7, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 80118da:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 80118de:	4620      	mov	r0, r4
 80118e0:	e777      	b.n	80117d2 <f_open+0x6e>
 80118e2:	bf00      	nop
 80118e4:	20002a94 	.word	0x20002a94

080118e8 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80118e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ec:	469a      	mov	sl, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80118ee:	2300      	movs	r3, #0
 80118f0:	f8ca 3000 	str.w	r3, [sl]
{
 80118f4:	4604      	mov	r4, r0
 80118f6:	4689      	mov	r9, r1
 80118f8:	4616      	mov	r6, r2

	res = validate(fp);							/* Check validity */
 80118fa:	f7ff f97d 	bl	8010bf8 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80118fe:	4605      	mov	r5, r0
 8011900:	bb50      	cbnz	r0, 8011958 <f_read+0x70>
	if (fp->err)								/* Check error */
 8011902:	f894 5207 	ldrb.w	r5, [r4, #519]	; 0x207
 8011906:	bb3d      	cbnz	r5, 8011958 <f_read+0x70>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8011908:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 801190c:	f013 0301 	ands.w	r3, r3, #1
 8011910:	9300      	str	r3, [sp, #0]
 8011912:	f000 80ae 	beq.w	8011a72 <f_read+0x18a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8011916:	e9d4 3282 	ldrd	r3, r2, [r4, #520]	; 0x208
 801191a:	1ad2      	subs	r2, r2, r3
 801191c:	4296      	cmp	r6, r2
 801191e:	bf28      	it	cs
 8011920:	4616      	movcs	r6, r2
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8011922:	b1ce      	cbz	r6, 8011958 <f_read+0x70>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8011924:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8011928:	f3c1 0308 	ubfx	r3, r1, #0, #9
 801192c:	2b00      	cmp	r3, #0
 801192e:	f040 8091 	bne.w	8011a54 <f_read+0x16c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8011932:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8011936:	f890 8202 	ldrb.w	r8, [r0, #514]	; 0x202
 801193a:	f108 38ff 	add.w	r8, r8, #4294967295
 801193e:	ea08 2851 	and.w	r8, r8, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8011942:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8011946:	d120      	bne.n	801198a <f_read+0xa2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011948:	b951      	cbnz	r1, 8011960 <f_read+0x78>
					clst = fp->sclust;			/* Follow from the origin */
 801194a:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 801194e:	2801      	cmp	r0, #1
 8011950:	d812      	bhi.n	8011978 <f_read+0x90>
 8011952:	2502      	movs	r5, #2
 8011954:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8011958:	4628      	mov	r0, r5
 801195a:	b003      	add	sp, #12
 801195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl)
 8011960:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8011964:	b11b      	cbz	r3, 801196e <f_read+0x86>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011966:	4620      	mov	r0, r4
 8011968:	f7ff f91a 	bl	8010ba0 <clmt_clust>
 801196c:	e7ef      	b.n	801194e <f_read+0x66>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 801196e:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8011972:	f7ff fb71 	bl	8011058 <get_fat>
 8011976:	e7ea      	b.n	801194e <f_read+0x66>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011978:	1c42      	adds	r2, r0, #1
 801197a:	d104      	bne.n	8011986 <f_read+0x9e>
 801197c:	2301      	movs	r3, #1
 801197e:	9d00      	ldr	r5, [sp, #0]
 8011980:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
 8011984:	e7e8      	b.n	8011958 <f_read+0x70>
				fp->clust = clst;				/* Update current cluster */
 8011986:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 801198a:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
 801198e:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8011992:	4658      	mov	r0, fp
 8011994:	f7ff fb52 	bl	801103c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8011998:	2800      	cmp	r0, #0
 801199a:	d0da      	beq.n	8011952 <f_read+0x6a>
			if (cc) {							/* Read maximum contiguous sectors directly */
 801199c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 80119a0:	eb00 0708 	add.w	r7, r0, r8
			if (cc) {							/* Read maximum contiguous sectors directly */
 80119a4:	d333      	bcc.n	8011a0e <f_read+0x126>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80119a6:	f89b 2202 	ldrb.w	r2, [fp, #514]	; 0x202
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80119aa:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80119ae:	eb08 2156 	add.w	r1, r8, r6, lsr #9
 80119b2:	4291      	cmp	r1, r2
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80119b4:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80119b8:	4649      	mov	r1, r9
					cc = fp->fs->csize - csect;
 80119ba:	bf88      	it	hi
 80119bc:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80119c0:	463a      	mov	r2, r7
 80119c2:	9301      	str	r3, [sp, #4]
 80119c4:	f7ff f804 	bl	80109d0 <disk_read>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d1d7      	bne.n	801197c <f_read+0x94>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80119cc:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 80119d0:	9b01      	ldr	r3, [sp, #4]
 80119d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80119d6:	d00c      	beq.n	80119f2 <f_read+0x10a>
 80119d8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80119dc:	1bc0      	subs	r0, r0, r7
 80119de:	4283      	cmp	r3, r0
 80119e0:	d907      	bls.n	80119f2 <f_read+0x10a>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80119e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119e6:	4621      	mov	r1, r4
 80119e8:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 80119ec:	f7ff f81a 	bl	8010a24 <mem_cpy>
 80119f0:	9b01      	ldr	r3, [sp, #4]
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80119f2:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80119f4:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80119f8:	443b      	add	r3, r7
 80119fa:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 80119fe:	f8da 3000 	ldr.w	r3, [sl]
 8011a02:	443b      	add	r3, r7
 8011a04:	44b9      	add	r9, r7
 8011a06:	f8ca 3000 	str.w	r3, [sl]
 8011a0a:	1bf6      	subs	r6, r6, r7
 8011a0c:	e789      	b.n	8011922 <f_read+0x3a>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8011a0e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8011a12:	4297      	cmp	r7, r2
 8011a14:	d01c      	beq.n	8011a50 <f_read+0x168>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8011a16:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8011a1a:	065b      	lsls	r3, r3, #25
 8011a1c:	d50d      	bpl.n	8011a3a <f_read+0x152>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011a1e:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
 8011a22:	2301      	movs	r3, #1
 8011a24:	4621      	mov	r1, r4
 8011a26:	f7fe ffe1 	bl	80109ec <disk_write>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d1a6      	bne.n	801197c <f_read+0x94>
					fp->flag &= ~FA__DIRTY;
 8011a2e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8011a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a36:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8011a3a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8011a3e:	2301      	movs	r3, #1
 8011a40:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8011a44:	463a      	mov	r2, r7
 8011a46:	4621      	mov	r1, r4
 8011a48:	f7fe ffc2 	bl	80109d0 <disk_read>
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d195      	bne.n	801197c <f_read+0x94>
			fp->dsect = sect;
 8011a50:	f8c4 7218 	str.w	r7, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8011a54:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8011a58:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8011a5c:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
 8011a60:	42b7      	cmp	r7, r6
 8011a62:	bf28      	it	cs
 8011a64:	4637      	movcs	r7, r6
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8011a66:	463a      	mov	r2, r7
 8011a68:	4421      	add	r1, r4
 8011a6a:	4648      	mov	r0, r9
 8011a6c:	f7fe ffda 	bl	8010a24 <mem_cpy>
 8011a70:	e7c0      	b.n	80119f4 <f_read+0x10c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8011a72:	2507      	movs	r5, #7
 8011a74:	e770      	b.n	8011958 <f_read+0x70>

08011a76 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011a76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7a:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	f8c9 3000 	str.w	r3, [r9]
{
 8011a82:	4604      	mov	r4, r0
 8011a84:	4688      	mov	r8, r1
 8011a86:	4616      	mov	r6, r2

	res = validate(fp);						/* Check validity */
 8011a88:	f7ff f8b6 	bl	8010bf8 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8011a8c:	4605      	mov	r5, r0
 8011a8e:	bb30      	cbnz	r0, 8011ade <f_write+0x68>
	if (fp->err)							/* Check error */
 8011a90:	f894 5207 	ldrb.w	r5, [r4, #519]	; 0x207
 8011a94:	bb1d      	cbnz	r5, 8011ade <f_write+0x68>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8011a96:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8011a9a:	0799      	lsls	r1, r3, #30
 8011a9c:	f140 80d2 	bpl.w	8011c44 <f_write+0x1ce>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8011aa0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8011aa4:	42de      	cmn	r6, r3
 8011aa6:	f0c0 8084 	bcc.w	8011bb2 <f_write+0x13c>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8011aaa:	e9d4 3282 	ldrd	r3, r2, [r4, #520]	; 0x208
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	f200 80c5 	bhi.w	8011c3e <f_write+0x1c8>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8011ab4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8011ab8:	f043 0320 	orr.w	r3, r3, #32
 8011abc:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8011ac0:	e00d      	b.n	8011ade <f_write+0x68>
					if (fp->cltbl)
 8011ac2:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8011ac6:	b173      	cbz	r3, 8011ae6 <f_write+0x70>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f7ff f869 	bl	8010ba0 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011ace:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d0ea      	beq.n	8011aaa <f_write+0x34>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8011ad4:	2901      	cmp	r1, #1
 8011ad6:	d109      	bne.n	8011aec <f_write+0x76>
 8011ad8:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011ada:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
}
 8011ade:	4628      	mov	r0, r5
 8011ae0:	b003      	add	sp, #12
 8011ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011ae6:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8011aea:	e07c      	b.n	8011be6 <f_write+0x170>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011aec:	1c4a      	adds	r2, r1, #1
 8011aee:	d101      	bne.n	8011af4 <f_write+0x7e>
 8011af0:	2501      	movs	r5, #1
 8011af2:	e7f2      	b.n	8011ada <f_write+0x64>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8011af4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8011af8:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8011afc:	b90b      	cbnz	r3, 8011b02 <f_write+0x8c>
 8011afe:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8011b02:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8011b06:	065b      	lsls	r3, r3, #25
 8011b08:	d511      	bpl.n	8011b2e <f_write+0xb8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011b0a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8011b0e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8011b12:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8011b16:	2301      	movs	r3, #1
 8011b18:	4621      	mov	r1, r4
 8011b1a:	f7fe ff67 	bl	80109ec <disk_write>
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	d1e6      	bne.n	8011af0 <f_write+0x7a>
				fp->flag &= ~FA__DIRTY;
 8011b22:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8011b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b2a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8011b2e:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
 8011b32:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8011b36:	4658      	mov	r0, fp
 8011b38:	f7ff fa80 	bl	801103c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	d0cb      	beq.n	8011ad8 <f_write+0x62>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011b40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8011b44:	eb00 0a07 	add.w	sl, r0, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011b48:	d350      	bcc.n	8011bec <f_write+0x176>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8011b4a:	f89b 2202 	ldrb.w	r2, [fp, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8011b4e:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8011b52:	eb07 2156 	add.w	r1, r7, r6, lsr #9
 8011b56:	4291      	cmp	r1, r2
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8011b58:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8011b5c:	4641      	mov	r1, r8
					cc = fp->fs->csize - csect;
 8011b5e:	bf88      	it	hi
 8011b60:	1bd3      	subhi	r3, r2, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8011b62:	4652      	mov	r2, sl
 8011b64:	9301      	str	r3, [sp, #4]
 8011b66:	f7fe ff41 	bl	80109ec <disk_write>
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	d1c0      	bne.n	8011af0 <f_write+0x7a>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011b6e:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8011b72:	9b01      	ldr	r3, [sp, #4]
 8011b74:	eba1 010a 	sub.w	r1, r1, sl
 8011b78:	428b      	cmp	r3, r1
 8011b7a:	d90d      	bls.n	8011b98 <f_write+0x122>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8011b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b80:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8011b84:	4620      	mov	r0, r4
 8011b86:	f7fe ff4d 	bl	8010a24 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8011b8a:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8011b8e:	9b01      	ldr	r3, [sp, #4]
 8011b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b94:	f884 2206 	strb.w	r2, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8011b98:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8011b9a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8011b9e:	443b      	add	r3, r7
 8011ba0:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8011ba4:	f8d9 3000 	ldr.w	r3, [r9]
 8011ba8:	443b      	add	r3, r7
 8011baa:	44b8      	add	r8, r7
 8011bac:	f8c9 3000 	str.w	r3, [r9]
 8011bb0:	1bf6      	subs	r6, r6, r7
	for ( ;  btw;							/* Repeat until all data written */
 8011bb2:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8011bb6:	2e00      	cmp	r6, #0
 8011bb8:	f43f af77 	beq.w	8011aaa <f_write+0x34>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8011bbc:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8011bc0:	bb43      	cbnz	r3, 8011c14 <f_write+0x19e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8011bc2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8011bc6:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8011bca:	3f01      	subs	r7, #1
 8011bcc:	ea07 2751 	and.w	r7, r7, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8011bd0:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8011bd4:	d195      	bne.n	8011b02 <f_write+0x8c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011bd6:	2900      	cmp	r1, #0
 8011bd8:	f47f af73 	bne.w	8011ac2 <f_write+0x4c>
					clst = fp->sclust;		/* Follow from the origin */
 8011bdc:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8011be0:	2900      	cmp	r1, #0
 8011be2:	f47f af77 	bne.w	8011ad4 <f_write+0x5e>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011be6:	f7ff fb60 	bl	80112aa <create_chain>
 8011bea:	e770      	b.n	8011ace <f_write+0x58>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8011bec:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8011bf0:	459a      	cmp	sl, r3
 8011bf2:	d00d      	beq.n	8011c10 <f_write+0x19a>
				if (fp->fptr < fp->fsize &&
 8011bf4:	e9d4 3282 	ldrd	r3, r2, [r4, #520]	; 0x208
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d909      	bls.n	8011c10 <f_write+0x19a>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8011bfc:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
 8011c00:	2301      	movs	r3, #1
 8011c02:	4652      	mov	r2, sl
 8011c04:	4621      	mov	r1, r4
 8011c06:	f7fe fee3 	bl	80109d0 <disk_read>
				if (fp->fptr < fp->fsize &&
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	f47f af70 	bne.w	8011af0 <f_write+0x7a>
			fp->dsect = sect;
 8011c10:	f8c4 a218 	str.w	sl, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8011c14:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8011c18:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8011c1c:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;
 8011c20:	42b7      	cmp	r7, r6
 8011c22:	bf28      	it	cs
 8011c24:	4637      	movcs	r7, r6
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8011c26:	463a      	mov	r2, r7
 8011c28:	4641      	mov	r1, r8
 8011c2a:	4420      	add	r0, r4
 8011c2c:	f7fe fefa 	bl	8010a24 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8011c30:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8011c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c38:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8011c3c:	e7ad      	b.n	8011b9a <f_write+0x124>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8011c3e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8011c42:	e737      	b.n	8011ab4 <f_write+0x3e>
		LEAVE_FF(fp->fs, FR_DENIED);
 8011c44:	2507      	movs	r5, #7
 8011c46:	e74a      	b.n	8011ade <f_write+0x68>

08011c48 <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8011c48:	290a      	cmp	r1, #10
{
 8011c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8011c50:	d102      	bne.n	8011c58 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8011c52:	210d      	movs	r1, #13
 8011c54:	f7ff fff8 	bl	8011c48 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8011c58:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	db14      	blt.n	8011c88 <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011c5e:	1c5d      	adds	r5, r3, #1
 8011c60:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011c62:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8011c64:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011c66:	dd0b      	ble.n	8011c80 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011c68:	ab01      	add	r3, sp, #4
 8011c6a:	462a      	mov	r2, r5
 8011c6c:	6820      	ldr	r0, [r4, #0]
 8011c6e:	f104 010c 	add.w	r1, r4, #12
 8011c72:	f7ff ff00 	bl	8011a76 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011c76:	9b01      	ldr	r3, [sp, #4]
 8011c78:	1b5d      	subs	r5, r3, r5
 8011c7a:	bf18      	it	ne
 8011c7c:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 8011c80:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 8011c82:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8011c84:	3301      	adds	r3, #1
 8011c86:	60a3      	str	r3, [r4, #8]
}
 8011c88:	b002      	add	sp, #8
 8011c8a:	bd70      	pop	{r4, r5, r6, pc}

08011c8c <f_sync>:
{
 8011c8c:	b570      	push	{r4, r5, r6, lr}
 8011c8e:	4604      	mov	r4, r0
	res = validate(fp);					/* Check validity of the object */
 8011c90:	f7fe ffb2 	bl	8010bf8 <validate>
	if (res == FR_OK) {
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d159      	bne.n	8011d4c <f_sync+0xc0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8011c98:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8011c9c:	f013 0020 	ands.w	r0, r3, #32
 8011ca0:	d054      	beq.n	8011d4c <f_sync+0xc0>
			if (fp->flag & FA__DIRTY) {
 8011ca2:	065b      	lsls	r3, r3, #25
 8011ca4:	d511      	bpl.n	8011cca <f_sync+0x3e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011ca6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8011caa:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8011cae:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	f7fe fe99 	bl	80109ec <disk_write>
 8011cba:	2800      	cmp	r0, #0
 8011cbc:	d145      	bne.n	8011d4a <f_sync+0xbe>
				fp->flag &= ~FA__DIRTY;
 8011cbe:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8011cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cc6:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			res = move_window(fp->fs, fp->dir_sect);
 8011cca:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8011cce:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8011cd2:	f7fe ffe7 	bl	8010ca4 <move_window>
 8011cd6:	4606      	mov	r6, r0
			if (res == FR_OK) {
 8011cd8:	bbc0      	cbnz	r0, 8011d4c <f_sync+0xc0>
				dir = fp->dir_ptr;
 8011cda:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8011cde:	7aeb      	ldrb	r3, [r5, #11]
 8011ce0:	f043 0320 	orr.w	r3, r3, #32
 8011ce4:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8011ce6:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8011cea:	772b      	strb	r3, [r5, #28]
 8011cec:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8011cf0:	0a1b      	lsrs	r3, r3, #8
 8011cf2:	776b      	strb	r3, [r5, #29]
 8011cf4:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8011cf8:	77ab      	strb	r3, [r5, #30]
 8011cfa:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 8011cfe:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8011d00:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8011d04:	76ab      	strb	r3, [r5, #26]
 8011d06:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8011d0a:	0c1b      	lsrs	r3, r3, #16
 8011d0c:	752b      	strb	r3, [r5, #20]
 8011d0e:	0a1b      	lsrs	r3, r3, #8
 8011d10:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8011d12:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8011d14:	f7fd fde8 	bl	800f8e8 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8011d18:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011d1c:	75eb      	strb	r3, [r5, #23]
 8011d1e:	0c03      	lsrs	r3, r0, #16
 8011d20:	762b      	strb	r3, [r5, #24]
 8011d22:	0e03      	lsrs	r3, r0, #24
 8011d24:	75a8      	strb	r0, [r5, #22]
 8011d26:	766b      	strb	r3, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8011d28:	74ae      	strb	r6, [r5, #18]
 8011d2a:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8011d2c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8011d30:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 8011d34:	f023 0320 	bic.w	r3, r3, #32
 8011d38:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
}
 8011d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8011d46:	f7ff b937 	b.w	8010fb8 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8011d4a:	2001      	movs	r0, #1
}
 8011d4c:	bd70      	pop	{r4, r5, r6, pc}

08011d4e <f_close>:
{
 8011d4e:	b510      	push	{r4, lr}
 8011d50:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8011d52:	f7ff ff9b 	bl	8011c8c <f_sync>
	if (res == FR_OK)
 8011d56:	b950      	cbnz	r0, 8011d6e <f_close+0x20>
		res = validate(fp);				/* Lock volume */
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f7fe ff4d 	bl	8010bf8 <validate>
		if (res == FR_OK) {
 8011d5e:	b930      	cbnz	r0, 8011d6e <f_close+0x20>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8011d60:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 8011d64:	f7fe fefc 	bl	8010b60 <dec_lock>
			if (res == FR_OK)
 8011d68:	b908      	cbnz	r0, 8011d6e <f_close+0x20>
				fp->fs = 0;				/* Invalidate file object */
 8011d6a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
}
 8011d6e:	bd10      	pop	{r4, pc}

08011d70 <f_getfree>:
{
 8011d70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d74:	4615      	mov	r5, r2
 8011d76:	9001      	str	r0, [sp, #4]
 8011d78:	460f      	mov	r7, r1
	res = find_volume(fatfs, &path, 0);
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	a901      	add	r1, sp, #4
 8011d7e:	4628      	mov	r0, r5
 8011d80:	f7fe ffd8 	bl	8010d34 <find_volume>
	if (res == FR_OK) {
 8011d84:	4604      	mov	r4, r0
 8011d86:	b938      	cbnz	r0, 8011d98 <f_getfree+0x28>
	fs = *fatfs;
 8011d88:	682d      	ldr	r5, [r5, #0]
		if (fs->free_clust <= fs->n_fatent - 2) {
 8011d8a:	e9d5 3884 	ldrd	r3, r8, [r5, #528]	; 0x210
 8011d8e:	f1a8 0202 	sub.w	r2, r8, #2
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d804      	bhi.n	8011da0 <f_getfree+0x30>
			*nclst = fs->free_clust;
 8011d96:	603b      	str	r3, [r7, #0]
}
 8011d98:	4620      	mov	r0, r4
 8011d9a:	b002      	add	sp, #8
 8011d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			fat = fs->fs_type;
 8011da0:	f895 9200 	ldrb.w	r9, [r5, #512]	; 0x200
			if (fat == FS_FAT12) {
 8011da4:	f1b9 0f01 	cmp.w	r9, #1
 8011da8:	d11c      	bne.n	8011de4 <f_getfree+0x74>
				clst = 2;
 8011daa:	f04f 0802 	mov.w	r8, #2
			n = 0;
 8011dae:	4606      	mov	r6, r0
					stat = get_fat(fs, clst);
 8011db0:	4641      	mov	r1, r8
 8011db2:	4628      	mov	r0, r5
 8011db4:	f7ff f950 	bl	8011058 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8011db8:	1c43      	adds	r3, r0, #1
 8011dba:	d03b      	beq.n	8011e34 <f_getfree+0xc4>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011dbc:	2801      	cmp	r0, #1
 8011dbe:	d03b      	beq.n	8011e38 <f_getfree+0xc8>
					if (stat == 0) n++;
 8011dc0:	b900      	cbnz	r0, 8011dc4 <f_getfree+0x54>
 8011dc2:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
 8011dc4:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8011dc8:	f108 0801 	add.w	r8, r8, #1
 8011dcc:	4543      	cmp	r3, r8
 8011dce:	d8ef      	bhi.n	8011db0 <f_getfree+0x40>
			fs->fsi_flag |= 1;
 8011dd0:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
			fs->free_clust = n;
 8011dd4:	f8c5 6210 	str.w	r6, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8011dd8:	f043 0301 	orr.w	r3, r3, #1
 8011ddc:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
			*nclst = n;
 8011de0:	603e      	str	r6, [r7, #0]
 8011de2:	e7d9      	b.n	8011d98 <f_getfree+0x28>
				sect = fs->fatbase;
 8011de4:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
				i = 0; p = 0;
 8011de8:	4603      	mov	r3, r0
 8011dea:	4602      	mov	r2, r0
			n = 0;
 8011dec:	4606      	mov	r6, r0
					if (!i) {
 8011dee:	b94a      	cbnz	r2, 8011e04 <f_getfree+0x94>
						res = move_window(fs, sect++);
 8011df0:	4628      	mov	r0, r5
 8011df2:	f101 0a01 	add.w	sl, r1, #1
 8011df6:	f7fe ff55 	bl	8010ca4 <move_window>
						if (res != FR_OK) break;
 8011dfa:	b9f8      	cbnz	r0, 8011e3c <f_getfree+0xcc>
						p = fs->win.d8;
 8011dfc:	462b      	mov	r3, r5
						res = move_window(fs, sect++);
 8011dfe:	4651      	mov	r1, sl
						i = SS(fs);
 8011e00:	f44f 7200 	mov.w	r2, #512	; 0x200
					if (fat == FS_FAT16) {
 8011e04:	f1b9 0f02 	cmp.w	r9, #2
 8011e08:	f893 c001 	ldrb.w	ip, [r3, #1]
 8011e0c:	7818      	ldrb	r0, [r3, #0]
 8011e0e:	d109      	bne.n	8011e24 <f_getfree+0xb4>
						if (LD_WORD(p) == 0) n++;
 8011e10:	ea50 200c 	orrs.w	r0, r0, ip, lsl #8
 8011e14:	bf08      	it	eq
 8011e16:	3601      	addeq	r6, #1
						p += 2; i -= 2;
 8011e18:	3302      	adds	r3, #2
 8011e1a:	3a02      	subs	r2, #2
				} while (--clst);
 8011e1c:	f1b8 0801 	subs.w	r8, r8, #1
 8011e20:	d1e5      	bne.n	8011dee <f_getfree+0x7e>
 8011e22:	e7d5      	b.n	8011dd0 <f_getfree+0x60>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8011e24:	6818      	ldr	r0, [r3, #0]
 8011e26:	f030 4070 	bics.w	r0, r0, #4026531840	; 0xf0000000
 8011e2a:	bf08      	it	eq
 8011e2c:	3601      	addeq	r6, #1
						p += 4; i -= 4;
 8011e2e:	3304      	adds	r3, #4
 8011e30:	3a04      	subs	r2, #4
 8011e32:	e7f3      	b.n	8011e1c <f_getfree+0xac>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8011e34:	2401      	movs	r4, #1
 8011e36:	e7cb      	b.n	8011dd0 <f_getfree+0x60>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011e38:	2402      	movs	r4, #2
 8011e3a:	e7c9      	b.n	8011dd0 <f_getfree+0x60>
						res = move_window(fs, sect++);
 8011e3c:	4604      	mov	r4, r0
 8011e3e:	e7c7      	b.n	8011dd0 <f_getfree+0x60>

08011e40 <f_gets>:
{
 8011e40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011e44:	4604      	mov	r4, r0
 8011e46:	4690      	mov	r8, r2
	TCHAR c, *p = buff;
 8011e48:	4606      	mov	r6, r0
	int n = 0;
 8011e4a:	2500      	movs	r5, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011e4c:	1e4f      	subs	r7, r1, #1
 8011e4e:	42bd      	cmp	r5, r7
 8011e50:	da12      	bge.n	8011e78 <f_gets+0x38>
		f_read(fp, s, 1, &rc);
 8011e52:	ab01      	add	r3, sp, #4
 8011e54:	2201      	movs	r2, #1
 8011e56:	4669      	mov	r1, sp
 8011e58:	4640      	mov	r0, r8
 8011e5a:	f7ff fd45 	bl	80118e8 <f_read>
		if (rc != 1) break;
 8011e5e:	9b01      	ldr	r3, [sp, #4]
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d109      	bne.n	8011e78 <f_gets+0x38>
		c = s[0];
 8011e64:	f89d 3000 	ldrb.w	r3, [sp]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011e68:	2b0d      	cmp	r3, #13
 8011e6a:	d0f0      	beq.n	8011e4e <f_gets+0xe>
		if (c == '\n') break;		/* Break on EOL */
 8011e6c:	2b0a      	cmp	r3, #10
		*p++ = c;
 8011e6e:	f806 3b01 	strb.w	r3, [r6], #1
		n++;
 8011e72:	f105 0501 	add.w	r5, r5, #1
		if (c == '\n') break;		/* Break on EOL */
 8011e76:	d1ea      	bne.n	8011e4e <f_gets+0xe>
	*p = 0;
 8011e78:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011e7a:	429d      	cmp	r5, r3
}
 8011e7c:	bf14      	ite	ne
 8011e7e:	4620      	movne	r0, r4
 8011e80:	4618      	moveq	r0, r3
	*p = 0;
 8011e82:	7033      	strb	r3, [r6, #0]
}
 8011e84:	b002      	add	sp, #8
 8011e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e8a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8011e8a:	b510      	push	{r4, lr}
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 8011e8c:	2300      	movs	r3, #0
{
 8011e8e:	b094      	sub	sp, #80	; 0x50
	pb.nchr = pb.idx = 0;
 8011e90:	e9cd 3302 	strd	r3, r3, [sp, #8]
	pb.fp = fp;				/* Initialize output buffer */
 8011e94:	9101      	str	r1, [sp, #4]

	while (*str)			/* Put the string */
 8011e96:	1e44      	subs	r4, r0, #1
 8011e98:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8011e9c:	b931      	cbnz	r1, 8011eac <f_puts+0x22>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8011e9e:	9a02      	ldr	r2, [sp, #8]
 8011ea0:	2a00      	cmp	r2, #0
 8011ea2:	da07      	bge.n	8011eb4 <f_puts+0x2a>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 8011ea4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011ea8:	b014      	add	sp, #80	; 0x50
 8011eaa:	bd10      	pop	{r4, pc}
		putc_bfd(&pb, *str++);
 8011eac:	a801      	add	r0, sp, #4
 8011eae:	f7ff fecb 	bl	8011c48 <putc_bfd>
 8011eb2:	e7f1      	b.n	8011e98 <f_puts+0xe>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8011eb4:	9801      	ldr	r0, [sp, #4]
 8011eb6:	466b      	mov	r3, sp
 8011eb8:	a904      	add	r1, sp, #16
 8011eba:	f7ff fddc 	bl	8011a76 <f_write>
 8011ebe:	2800      	cmp	r0, #0
 8011ec0:	d1f0      	bne.n	8011ea4 <f_puts+0x1a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8011ec2:	9a02      	ldr	r2, [sp, #8]
 8011ec4:	9b00      	ldr	r3, [sp, #0]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d1ec      	bne.n	8011ea4 <f_puts+0x1a>
 8011eca:	9803      	ldr	r0, [sp, #12]
 8011ecc:	e7ec      	b.n	8011ea8 <f_puts+0x1e>
	...

08011ed0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011ed0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8011ed2:	4b0f      	ldr	r3, [pc, #60]	; (8011f10 <FATFS_LinkDriverEx+0x40>)
 8011ed4:	7a5c      	ldrb	r4, [r3, #9]
 8011ed6:	2c01      	cmp	r4, #1
 8011ed8:	d817      	bhi.n	8011f0a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011eda:	7a5d      	ldrb	r5, [r3, #9]
 8011edc:	b2ed      	uxtb	r5, r5
 8011ede:	2400      	movs	r4, #0
 8011ee0:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8011ee2:	7a5d      	ldrb	r5, [r3, #9]
 8011ee4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8011ee8:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8011eea:	7a58      	ldrb	r0, [r3, #9]
 8011eec:	4418      	add	r0, r3
 8011eee:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8011ef0:	7a5a      	ldrb	r2, [r3, #9]
 8011ef2:	1c50      	adds	r0, r2, #1
 8011ef4:	b2c0      	uxtb	r0, r0
 8011ef6:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8011ef8:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8011efa:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8011efc:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8011efe:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8011f00:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8011f02:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8011f04:	70cc      	strb	r4, [r1, #3]
 8011f06:	4620      	mov	r0, r4
    ret = 0;
  }
  
  return ret;
}
 8011f08:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8011f0a:	2001      	movs	r0, #1
 8011f0c:	e7fc      	b.n	8011f08 <FATFS_LinkDriverEx+0x38>
 8011f0e:	bf00      	nop
 8011f10:	20002ab0 	.word	0x20002ab0

08011f14 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8011f14:	2200      	movs	r2, #0
 8011f16:	f7ff bfdb 	b.w	8011ed0 <FATFS_LinkDriverEx>
	...

08011f1c <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 8011f1c:	4a0a      	ldr	r2, [pc, #40]	; (8011f48 <FATFS_UnLinkDriverEx+0x2c>)
 8011f1e:	7a53      	ldrb	r3, [r2, #9]
 8011f20:	b17b      	cbz	r3, 8011f42 <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 8011f22:	7803      	ldrb	r3, [r0, #0]
 8011f24:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8011f2c:	6848      	ldr	r0, [r1, #4]
 8011f2e:	b140      	cbz	r0, 8011f42 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8011f30:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8011f32:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8011f34:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8011f36:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8011f38:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8011f3a:	3b01      	subs	r3, #1
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	7253      	strb	r3, [r2, #9]
      ret = 0;
 8011f40:	4770      	bx	lr
  uint8_t ret = 1;
 8011f42:	2001      	movs	r0, #1
    }
  }
  
  return ret;
}
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	20002ab0 	.word	0x20002ab0

08011f4c <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	f7ff bfe5 	b.w	8011f1c <FATFS_UnLinkDriverEx>
	...

08011f54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011f54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011f56:	490f      	ldr	r1, [pc, #60]	; (8011f94 <MX_USB_DEVICE_Init+0x40>)
 8011f58:	480f      	ldr	r0, [pc, #60]	; (8011f98 <MX_USB_DEVICE_Init+0x44>)
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f7fe f984 	bl	8010268 <USBD_Init>
 8011f60:	b108      	cbz	r0, 8011f66 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8011f62:	f7f7 ff89 	bl	8009e78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011f66:	490d      	ldr	r1, [pc, #52]	; (8011f9c <MX_USB_DEVICE_Init+0x48>)
 8011f68:	480b      	ldr	r0, [pc, #44]	; (8011f98 <MX_USB_DEVICE_Init+0x44>)
 8011f6a:	f7fe f992 	bl	8010292 <USBD_RegisterClass>
 8011f6e:	b108      	cbz	r0, 8011f74 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8011f70:	f7f7 ff82 	bl	8009e78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011f74:	490a      	ldr	r1, [pc, #40]	; (8011fa0 <MX_USB_DEVICE_Init+0x4c>)
 8011f76:	4808      	ldr	r0, [pc, #32]	; (8011f98 <MX_USB_DEVICE_Init+0x44>)
 8011f78:	f7fe f931 	bl	80101de <USBD_CDC_RegisterInterface>
 8011f7c:	b108      	cbz	r0, 8011f82 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8011f7e:	f7f7 ff7b 	bl	8009e78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011f82:	4805      	ldr	r0, [pc, #20]	; (8011f98 <MX_USB_DEVICE_Init+0x44>)
 8011f84:	f7fe f98c 	bl	80102a0 <USBD_Start>
 8011f88:	b118      	cbz	r0, 8011f92 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8011f8e:	f7f7 bf73 	b.w	8009e78 <Error_Handler>
}
 8011f92:	bd08      	pop	{r3, pc}
 8011f94:	20000144 	.word	0x20000144
 8011f98:	2000384c 	.word	0x2000384c
 8011f9c:	20000024 	.word	0x20000024
 8011fa0:	20000134 	.word	0x20000134

08011fa4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	4770      	bx	lr

08011fa8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8011fa8:	2000      	movs	r0, #0
 8011faa:	4770      	bx	lr

08011fac <CDC_Init_FS>:
{
 8011fac:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011fae:	4c06      	ldr	r4, [pc, #24]	; (8011fc8 <CDC_Init_FS+0x1c>)
 8011fb0:	4906      	ldr	r1, [pc, #24]	; (8011fcc <CDC_Init_FS+0x20>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f7fe f919 	bl	80101ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011fba:	4905      	ldr	r1, [pc, #20]	; (8011fd0 <CDC_Init_FS+0x24>)
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f7fe f91d 	bl	80101fc <USBD_CDC_SetRxBuffer>
}
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	bd10      	pop	{r4, pc}
 8011fc6:	bf00      	nop
 8011fc8:	2000384c 	.word	0x2000384c
 8011fcc:	20003ef8 	.word	0x20003ef8
 8011fd0:	20003b10 	.word	0x20003b10

08011fd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011fd4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011fd6:	4c09      	ldr	r4, [pc, #36]	; (8011ffc <CDC_Transmit_FS+0x28>)
 8011fd8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8011fdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8011fe0:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8011fe2:	b943      	cbnz	r3, 8011ff6 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011fe4:	4601      	mov	r1, r0
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	f7fe f900 	bl	80101ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011fec:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8011fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011ff2:	f7fe b909 	b.w	8010208 <USBD_CDC_TransmitPacket>
}
 8011ff6:	2001      	movs	r0, #1
 8011ff8:	bd10      	pop	{r4, pc}
 8011ffa:	bf00      	nop
 8011ffc:	2000384c 	.word	0x2000384c

08012000 <CDC_Receive_FS>:
{
 8012000:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012002:	4e08      	ldr	r6, [pc, #32]	; (8012024 <CDC_Receive_FS+0x24>)
{
 8012004:	4604      	mov	r4, r0
 8012006:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012008:	4601      	mov	r1, r0
 801200a:	4630      	mov	r0, r6
 801200c:	f7fe f8f6 	bl	80101fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012010:	4630      	mov	r0, r6
 8012012:	f7fe f912 	bl	801023a <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 8012016:	4620      	mov	r0, r4
 8012018:	6829      	ldr	r1, [r5, #0]
 801201a:	f7f0 f85f 	bl	80020dc <CDC_ReceiveCallback>
}
 801201e:	2000      	movs	r0, #0
 8012020:	bd70      	pop	{r4, r5, r6, pc}
 8012022:	bf00      	nop
 8012024:	2000384c 	.word	0x2000384c

08012028 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012028:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 801202a:	4801      	ldr	r0, [pc, #4]	; (8012030 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 801202c:	800b      	strh	r3, [r1, #0]
}
 801202e:	4770      	bx	lr
 8012030:	20000160 	.word	0x20000160

08012034 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012034:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8012036:	4801      	ldr	r0, [pc, #4]	; (801203c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8012038:	800b      	strh	r3, [r1, #0]
}
 801203a:	4770      	bx	lr
 801203c:	20000174 	.word	0x20000174

08012040 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012040:	2300      	movs	r3, #0
 8012042:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8012044:	1c4d      	adds	r5, r1, #1
 8012046:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8012048:	0f04      	lsrs	r4, r0, #28
 801204a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 801204e:	bf34      	ite	cc
 8012050:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012052:	3437      	addcs	r4, #55	; 0x37
 8012054:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8012058:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 801205c:	3301      	adds	r3, #1
  for (idx = 0; idx < len; idx++)
 801205e:	b2dc      	uxtb	r4, r3
 8012060:	42a2      	cmp	r2, r4
    value = value << 4;
 8012062:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8012066:	d8ef      	bhi.n	8012048 <IntToUnicode+0x8>
  }
}
 8012068:	bd70      	pop	{r4, r5, r6, pc}
	...

0801206c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 801206c:	231a      	movs	r3, #26
{
 801206e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8012070:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012072:	4b09      	ldr	r3, [pc, #36]	; (8012098 <USBD_FS_SerialStrDescriptor+0x2c>)
 8012074:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012076:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8012078:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 801207a:	18c0      	adds	r0, r0, r3
 801207c:	d00a      	beq.n	8012094 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801207e:	4b07      	ldr	r3, [pc, #28]	; (801209c <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012080:	4907      	ldr	r1, [pc, #28]	; (80120a0 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012082:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012084:	2208      	movs	r2, #8
 8012086:	f7ff ffdb 	bl	8012040 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801208a:	4906      	ldr	r1, [pc, #24]	; (80120a4 <USBD_FS_SerialStrDescriptor+0x38>)
 801208c:	2204      	movs	r2, #4
 801208e:	4620      	mov	r0, r4
 8012090:	f7ff ffd6 	bl	8012040 <IntToUnicode>
}
 8012094:	4804      	ldr	r0, [pc, #16]	; (80120a8 <USBD_FS_SerialStrDescriptor+0x3c>)
 8012096:	bd10      	pop	{r4, pc}
 8012098:	1ffff7ac 	.word	0x1ffff7ac
 801209c:	1ffff7b0 	.word	0x1ffff7b0
 80120a0:	2000017a 	.word	0x2000017a
 80120a4:	2000018a 	.word	0x2000018a
 80120a8:	20000178 	.word	0x20000178

080120ac <USBD_FS_ManufacturerStrDescriptor>:
{
 80120ac:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80120ae:	4c04      	ldr	r4, [pc, #16]	; (80120c0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80120b0:	4804      	ldr	r0, [pc, #16]	; (80120c4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 80120b2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80120b4:	4621      	mov	r1, r4
 80120b6:	f7fe fc14 	bl	80108e2 <USBD_GetString>
}
 80120ba:	4620      	mov	r0, r4
 80120bc:	bd10      	pop	{r4, pc}
 80120be:	bf00      	nop
 80120c0:	200042e0 	.word	0x200042e0
 80120c4:	08018f17 	.word	0x08018f17

080120c8 <USBD_FS_ProductStrDescriptor>:
{
 80120c8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80120ca:	4c04      	ldr	r4, [pc, #16]	; (80120dc <USBD_FS_ProductStrDescriptor+0x14>)
 80120cc:	4804      	ldr	r0, [pc, #16]	; (80120e0 <USBD_FS_ProductStrDescriptor+0x18>)
{
 80120ce:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80120d0:	4621      	mov	r1, r4
 80120d2:	f7fe fc06 	bl	80108e2 <USBD_GetString>
}
 80120d6:	4620      	mov	r0, r4
 80120d8:	bd10      	pop	{r4, pc}
 80120da:	bf00      	nop
 80120dc:	200042e0 	.word	0x200042e0
 80120e0:	08018f2a 	.word	0x08018f2a

080120e4 <USBD_FS_ConfigStrDescriptor>:
{
 80120e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80120e6:	4c04      	ldr	r4, [pc, #16]	; (80120f8 <USBD_FS_ConfigStrDescriptor+0x14>)
 80120e8:	4804      	ldr	r0, [pc, #16]	; (80120fc <USBD_FS_ConfigStrDescriptor+0x18>)
{
 80120ea:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80120ec:	4621      	mov	r1, r4
 80120ee:	f7fe fbf8 	bl	80108e2 <USBD_GetString>
}
 80120f2:	4620      	mov	r0, r4
 80120f4:	bd10      	pop	{r4, pc}
 80120f6:	bf00      	nop
 80120f8:	200042e0 	.word	0x200042e0
 80120fc:	08018f40 	.word	0x08018f40

08012100 <USBD_FS_InterfaceStrDescriptor>:
{
 8012100:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012102:	4c04      	ldr	r4, [pc, #16]	; (8012114 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8012104:	4804      	ldr	r0, [pc, #16]	; (8012118 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 8012106:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012108:	4621      	mov	r1, r4
 801210a:	f7fe fbea 	bl	80108e2 <USBD_GetString>
}
 801210e:	4620      	mov	r0, r4
 8012110:	bd10      	pop	{r4, pc}
 8012112:	bf00      	nop
 8012114:	200042e0 	.word	0x200042e0
 8012118:	08018f4b 	.word	0x08018f4b

0801211c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801211c:	b530      	push	{r4, r5, lr}
 801211e:	4604      	mov	r4, r0
 8012120:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012122:	2214      	movs	r2, #20
 8012124:	2100      	movs	r1, #0
 8012126:	a803      	add	r0, sp, #12
 8012128:	f000 f98a 	bl	8012440 <memset>
  if(pcdHandle->Instance==USB)
 801212c:	6822      	ldr	r2, [r4, #0]
 801212e:	4b18      	ldr	r3, [pc, #96]	; (8012190 <HAL_PCD_MspInit+0x74>)
 8012130:	429a      	cmp	r2, r3
 8012132:	d12a      	bne.n	801218a <HAL_PCD_MspInit+0x6e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012134:	4c17      	ldr	r4, [pc, #92]	; (8012194 <HAL_PCD_MspInit+0x78>)
 8012136:	6963      	ldr	r3, [r4, #20]
 8012138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801213c:	6163      	str	r3, [r4, #20]
 801213e:	6963      	ldr	r3, [r4, #20]
 8012140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012144:	9301      	str	r3, [sp, #4]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012146:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801214a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801214c:	2302      	movs	r3, #2
 801214e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012152:	2500      	movs	r5, #0
 8012154:	2303      	movs	r3, #3
 8012156:	e9cd 5305 	strd	r5, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801215a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 801215c:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801215e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8012162:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012164:	f7f8 ffec 	bl	800b140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012168:	69e3      	ldr	r3, [r4, #28]
 801216a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801216e:	61e3      	str	r3, [r4, #28]
 8012170:	69e3      	ldr	r3, [r4, #28]
 8012172:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012176:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8012178:	204b      	movs	r0, #75	; 0x4b
 801217a:	462a      	mov	r2, r5
 801217c:	4629      	mov	r1, r5
    __HAL_RCC_USB_CLK_ENABLE();
 801217e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8012180:	f7f8 fe2e 	bl	800ade0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012184:	204b      	movs	r0, #75	; 0x4b
 8012186:	f7f8 fe5d 	bl	800ae44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801218a:	b009      	add	sp, #36	; 0x24
 801218c:	bd30      	pop	{r4, r5, pc}
 801218e:	bf00      	nop
 8012190:	40005c00 	.word	0x40005c00
 8012194:	40021000 	.word	0x40021000

08012198 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012198:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 801219c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80121a0:	f7fe b895 	b.w	80102ce <USBD_LL_SetupStage>

080121a4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80121a4:	2328      	movs	r3, #40	; 0x28
 80121a6:	fb03 0301 	mla	r3, r3, r1, r0
 80121aa:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80121ae:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80121b2:	f7fe b8b9 	b.w	8010328 <USBD_LL_DataOutStage>

080121b6 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80121b6:	2328      	movs	r3, #40	; 0x28
 80121b8:	fb03 0301 	mla	r3, r3, r1, r0
 80121bc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80121c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80121c2:	f7fe b8eb 	b.w	801039c <USBD_LL_DataInStage>

080121c6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80121c6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80121ca:	f7fe b97f 	b.w	80104cc <USBD_LL_SOF>

080121ce <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80121ce:	6883      	ldr	r3, [r0, #8]
 80121d0:	2b02      	cmp	r3, #2
{
 80121d2:	b510      	push	{r4, lr}
 80121d4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80121d6:	d001      	beq.n	80121dc <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80121d8:	f7f7 fe4e 	bl	8009e78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80121dc:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80121e0:	2101      	movs	r1, #1
 80121e2:	f7fe f95d 	bl	80104a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80121e6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 80121ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80121ee:	f7fe b930 	b.w	8010452 <USBD_LL_Reset>
	...

080121f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121f4:	b510      	push	{r4, lr}
 80121f6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80121f8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80121fc:	f7fe f953 	bl	80104a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012200:	69a3      	ldr	r3, [r4, #24]
 8012202:	b123      	cbz	r3, 801220e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012204:	4a02      	ldr	r2, [pc, #8]	; (8012210 <HAL_PCD_SuspendCallback+0x1c>)
 8012206:	6913      	ldr	r3, [r2, #16]
 8012208:	f043 0306 	orr.w	r3, r3, #6
 801220c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801220e:	bd10      	pop	{r4, pc}
 8012210:	e000ed00 	.word	0xe000ed00

08012214 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012214:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8012218:	f7fe b94e 	b.w	80104b8 <USBD_LL_Resume>

0801221c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801221c:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801221e:	4a1e      	ldr	r2, [pc, #120]	; (8012298 <USBD_LL_Init+0x7c>)
{
 8012220:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8012222:	481e      	ldr	r0, [pc, #120]	; (801229c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012224:	2308      	movs	r3, #8
 8012226:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801222a:	2302      	movs	r3, #2
  hpcd_USB_FS.pData = pdev;
 801222c:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012230:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012232:	6103      	str	r3, [r0, #16]
  pdev->pData = &hpcd_USB_FS;
 8012234:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012238:	2300      	movs	r3, #0
 801223a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801223c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801223e:	f7f9 f850 	bl	800b2e2 <HAL_PCD_Init>
 8012242:	b108      	cbz	r0, 8012248 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8012244:	f7f7 fe18 	bl	8009e78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012248:	2200      	movs	r2, #0
 801224a:	4611      	mov	r1, r2
 801224c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8012250:	2318      	movs	r3, #24
 8012252:	f7f9 feb8 	bl	800bfc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012256:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 801225a:	2358      	movs	r3, #88	; 0x58
 801225c:	2200      	movs	r2, #0
 801225e:	2180      	movs	r1, #128	; 0x80
 8012260:	f7f9 feb1 	bl	800bfc6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012264:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8012268:	23c0      	movs	r3, #192	; 0xc0
 801226a:	2200      	movs	r2, #0
 801226c:	2181      	movs	r1, #129	; 0x81
 801226e:	f7f9 feaa 	bl	800bfc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012272:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8012276:	f44f 7388 	mov.w	r3, #272	; 0x110
 801227a:	2200      	movs	r2, #0
 801227c:	2101      	movs	r1, #1
 801227e:	f7f9 fea2 	bl	800bfc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012282:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8012286:	f44f 7380 	mov.w	r3, #256	; 0x100
 801228a:	2200      	movs	r2, #0
 801228c:	2182      	movs	r1, #130	; 0x82
 801228e:	f7f9 fe9a 	bl	800bfc6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8012292:	2000      	movs	r0, #0
 8012294:	bd10      	pop	{r4, pc}
 8012296:	bf00      	nop
 8012298:	40005c00 	.word	0x40005c00
 801229c:	200044e0 	.word	0x200044e0

080122a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80122a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80122a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80122a6:	f7f9 f873 	bl	800b390 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80122aa:	2803      	cmp	r0, #3
 80122ac:	bf96      	itet	ls
 80122ae:	4b02      	ldrls	r3, [pc, #8]	; (80122b8 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80122b0:	2002      	movhi	r0, #2
 80122b2:	5c18      	ldrbls	r0, [r3, r0]
}
 80122b4:	bd08      	pop	{r3, pc}
 80122b6:	bf00      	nop
 80122b8:	08018f59 	.word	0x08018f59

080122bc <USBD_LL_OpenEP>:
{
 80122bc:	b510      	push	{r4, lr}
 80122be:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80122c0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 80122c4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80122c6:	4623      	mov	r3, r4
 80122c8:	f7f9 fd84 	bl	800bdd4 <HAL_PCD_EP_Open>
  switch (hal_status)
 80122cc:	2803      	cmp	r0, #3
 80122ce:	bf96      	itet	ls
 80122d0:	4b01      	ldrls	r3, [pc, #4]	; (80122d8 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80122d2:	2002      	movhi	r0, #2
 80122d4:	5c18      	ldrbls	r0, [r3, r0]
}
 80122d6:	bd10      	pop	{r4, pc}
 80122d8:	08018f59 	.word	0x08018f59

080122dc <USBD_LL_CloseEP>:
{
 80122dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80122de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80122e2:	f7f9 fda9 	bl	800be38 <HAL_PCD_EP_Close>
  switch (hal_status)
 80122e6:	2803      	cmp	r0, #3
 80122e8:	bf96      	itet	ls
 80122ea:	4b02      	ldrls	r3, [pc, #8]	; (80122f4 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80122ec:	2002      	movhi	r0, #2
 80122ee:	5c18      	ldrbls	r0, [r3, r0]
}
 80122f0:	bd08      	pop	{r3, pc}
 80122f2:	bf00      	nop
 80122f4:	08018f59 	.word	0x08018f59

080122f8 <USBD_LL_StallEP>:
{
 80122f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80122fa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80122fe:	f7f9 fe00 	bl	800bf02 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8012302:	2803      	cmp	r0, #3
 8012304:	bf96      	itet	ls
 8012306:	4b02      	ldrls	r3, [pc, #8]	; (8012310 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012308:	2002      	movhi	r0, #2
 801230a:	5c18      	ldrbls	r0, [r3, r0]
}
 801230c:	bd08      	pop	{r3, pc}
 801230e:	bf00      	nop
 8012310:	08018f59 	.word	0x08018f59

08012314 <USBD_LL_ClearStallEP>:
{
 8012314:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012316:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801231a:	f7f9 fe22 	bl	800bf62 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 801231e:	2803      	cmp	r0, #3
 8012320:	bf96      	itet	ls
 8012322:	4b02      	ldrls	r3, [pc, #8]	; (801232c <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012324:	2002      	movhi	r0, #2
 8012326:	5c18      	ldrbls	r0, [r3, r0]
}
 8012328:	bd08      	pop	{r3, pc}
 801232a:	bf00      	nop
 801232c:	08018f59 	.word	0x08018f59

08012330 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8012330:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012334:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012338:	bf18      	it	ne
 801233a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 801233e:	f04f 0328 	mov.w	r3, #40	; 0x28
 8012342:	bf1b      	ittet	ne
 8012344:	fb01 3103 	mlane	r1, r1, r3, r3
 8012348:	1889      	addne	r1, r1, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801234a:	fb03 2101 	mlaeq	r1, r3, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801234e:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012350:	bf08      	it	eq
 8012352:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8012356:	4770      	bx	lr

08012358 <USBD_LL_SetUSBAddress>:
{
 8012358:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801235a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801235e:	f7f9 f830 	bl	800b3c2 <HAL_PCD_SetAddress>
  switch (hal_status)
 8012362:	2803      	cmp	r0, #3
 8012364:	bf96      	itet	ls
 8012366:	4b02      	ldrls	r3, [pc, #8]	; (8012370 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012368:	2002      	movhi	r0, #2
 801236a:	5c18      	ldrbls	r0, [r3, r0]
}
 801236c:	bd08      	pop	{r3, pc}
 801236e:	bf00      	nop
 8012370:	08018f59 	.word	0x08018f59

08012374 <USBD_LL_Transmit>:
{
 8012374:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012376:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801237a:	f7f9 fda4 	bl	800bec6 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 801237e:	2803      	cmp	r0, #3
 8012380:	bf96      	itet	ls
 8012382:	4b02      	ldrls	r3, [pc, #8]	; (801238c <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012384:	2002      	movhi	r0, #2
 8012386:	5c18      	ldrbls	r0, [r3, r0]
}
 8012388:	bd08      	pop	{r3, pc}
 801238a:	bf00      	nop
 801238c:	08018f59 	.word	0x08018f59

08012390 <USBD_LL_PrepareReceive>:
{
 8012390:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012392:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8012396:	f7f9 fd78 	bl	800be8a <HAL_PCD_EP_Receive>
  switch (hal_status)
 801239a:	2803      	cmp	r0, #3
 801239c:	bf96      	itet	ls
 801239e:	4b02      	ldrls	r3, [pc, #8]	; (80123a8 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80123a0:	2002      	movhi	r0, #2
 80123a2:	5c18      	ldrbls	r0, [r3, r0]
}
 80123a4:	bd08      	pop	{r3, pc}
 80123a6:	bf00      	nop
 80123a8:	08018f59 	.word	0x08018f59

080123ac <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80123ac:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80123b0:	f7f9 bd81 	b.w	800beb6 <HAL_PCD_EP_GetRxCount>

080123b4 <USBD_static_malloc>:
}
 80123b4:	4800      	ldr	r0, [pc, #0]	; (80123b8 <USBD_static_malloc+0x4>)
 80123b6:	4770      	bx	lr
 80123b8:	20002abc 	.word	0x20002abc

080123bc <USBD_static_free>:
}
 80123bc:	4770      	bx	lr

080123be <HAL_PCDEx_SetConnectionState>:
}
 80123be:	4770      	bx	lr

080123c0 <atoff>:
 80123c0:	2100      	movs	r1, #0
 80123c2:	f001 baff 	b.w	80139c4 <strtof>

080123c6 <atoi>:
 80123c6:	220a      	movs	r2, #10
 80123c8:	2100      	movs	r1, #0
 80123ca:	f001 bc35 	b.w	8013c38 <strtol>
	...

080123d0 <__errno>:
 80123d0:	4b01      	ldr	r3, [pc, #4]	; (80123d8 <__errno+0x8>)
 80123d2:	6818      	ldr	r0, [r3, #0]
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop
 80123d8:	20000194 	.word	0x20000194

080123dc <__libc_init_array>:
 80123dc:	b570      	push	{r4, r5, r6, lr}
 80123de:	4d0d      	ldr	r5, [pc, #52]	; (8012414 <__libc_init_array+0x38>)
 80123e0:	4c0d      	ldr	r4, [pc, #52]	; (8012418 <__libc_init_array+0x3c>)
 80123e2:	1b64      	subs	r4, r4, r5
 80123e4:	10a4      	asrs	r4, r4, #2
 80123e6:	2600      	movs	r6, #0
 80123e8:	42a6      	cmp	r6, r4
 80123ea:	d109      	bne.n	8012400 <__libc_init_array+0x24>
 80123ec:	4d0b      	ldr	r5, [pc, #44]	; (801241c <__libc_init_array+0x40>)
 80123ee:	4c0c      	ldr	r4, [pc, #48]	; (8012420 <__libc_init_array+0x44>)
 80123f0:	f004 faf6 	bl	80169e0 <_init>
 80123f4:	1b64      	subs	r4, r4, r5
 80123f6:	10a4      	asrs	r4, r4, #2
 80123f8:	2600      	movs	r6, #0
 80123fa:	42a6      	cmp	r6, r4
 80123fc:	d105      	bne.n	801240a <__libc_init_array+0x2e>
 80123fe:	bd70      	pop	{r4, r5, r6, pc}
 8012400:	f855 3b04 	ldr.w	r3, [r5], #4
 8012404:	4798      	blx	r3
 8012406:	3601      	adds	r6, #1
 8012408:	e7ee      	b.n	80123e8 <__libc_init_array+0xc>
 801240a:	f855 3b04 	ldr.w	r3, [r5], #4
 801240e:	4798      	blx	r3
 8012410:	3601      	adds	r6, #1
 8012412:	e7f2      	b.n	80123fa <__libc_init_array+0x1e>
 8012414:	08019468 	.word	0x08019468
 8012418:	08019468 	.word	0x08019468
 801241c:	08019468 	.word	0x08019468
 8012420:	0801946c 	.word	0x0801946c

08012424 <memcpy>:
 8012424:	440a      	add	r2, r1
 8012426:	4291      	cmp	r1, r2
 8012428:	f100 33ff 	add.w	r3, r0, #4294967295
 801242c:	d100      	bne.n	8012430 <memcpy+0xc>
 801242e:	4770      	bx	lr
 8012430:	b510      	push	{r4, lr}
 8012432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012436:	f803 4f01 	strb.w	r4, [r3, #1]!
 801243a:	4291      	cmp	r1, r2
 801243c:	d1f9      	bne.n	8012432 <memcpy+0xe>
 801243e:	bd10      	pop	{r4, pc}

08012440 <memset>:
 8012440:	4402      	add	r2, r0
 8012442:	4603      	mov	r3, r0
 8012444:	4293      	cmp	r3, r2
 8012446:	d100      	bne.n	801244a <memset+0xa>
 8012448:	4770      	bx	lr
 801244a:	f803 1b01 	strb.w	r1, [r3], #1
 801244e:	e7f9      	b.n	8012444 <memset+0x4>

08012450 <__cvt>:
 8012450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012454:	ec55 4b10 	vmov	r4, r5, d0
 8012458:	2d00      	cmp	r5, #0
 801245a:	460e      	mov	r6, r1
 801245c:	4619      	mov	r1, r3
 801245e:	462b      	mov	r3, r5
 8012460:	bfbb      	ittet	lt
 8012462:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012466:	461d      	movlt	r5, r3
 8012468:	2300      	movge	r3, #0
 801246a:	232d      	movlt	r3, #45	; 0x2d
 801246c:	700b      	strb	r3, [r1, #0]
 801246e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012470:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012474:	4691      	mov	r9, r2
 8012476:	f023 0820 	bic.w	r8, r3, #32
 801247a:	bfbc      	itt	lt
 801247c:	4622      	movlt	r2, r4
 801247e:	4614      	movlt	r4, r2
 8012480:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012484:	d005      	beq.n	8012492 <__cvt+0x42>
 8012486:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801248a:	d100      	bne.n	801248e <__cvt+0x3e>
 801248c:	3601      	adds	r6, #1
 801248e:	2102      	movs	r1, #2
 8012490:	e000      	b.n	8012494 <__cvt+0x44>
 8012492:	2103      	movs	r1, #3
 8012494:	ab03      	add	r3, sp, #12
 8012496:	9301      	str	r3, [sp, #4]
 8012498:	ab02      	add	r3, sp, #8
 801249a:	9300      	str	r3, [sp, #0]
 801249c:	ec45 4b10 	vmov	d0, r4, r5
 80124a0:	4653      	mov	r3, sl
 80124a2:	4632      	mov	r2, r6
 80124a4:	f001 fc7c 	bl	8013da0 <_dtoa_r>
 80124a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80124ac:	4607      	mov	r7, r0
 80124ae:	d102      	bne.n	80124b6 <__cvt+0x66>
 80124b0:	f019 0f01 	tst.w	r9, #1
 80124b4:	d022      	beq.n	80124fc <__cvt+0xac>
 80124b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80124ba:	eb07 0906 	add.w	r9, r7, r6
 80124be:	d110      	bne.n	80124e2 <__cvt+0x92>
 80124c0:	783b      	ldrb	r3, [r7, #0]
 80124c2:	2b30      	cmp	r3, #48	; 0x30
 80124c4:	d10a      	bne.n	80124dc <__cvt+0x8c>
 80124c6:	2200      	movs	r2, #0
 80124c8:	2300      	movs	r3, #0
 80124ca:	4620      	mov	r0, r4
 80124cc:	4629      	mov	r1, r5
 80124ce:	f7ee fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80124d2:	b918      	cbnz	r0, 80124dc <__cvt+0x8c>
 80124d4:	f1c6 0601 	rsb	r6, r6, #1
 80124d8:	f8ca 6000 	str.w	r6, [sl]
 80124dc:	f8da 3000 	ldr.w	r3, [sl]
 80124e0:	4499      	add	r9, r3
 80124e2:	2200      	movs	r2, #0
 80124e4:	2300      	movs	r3, #0
 80124e6:	4620      	mov	r0, r4
 80124e8:	4629      	mov	r1, r5
 80124ea:	f7ee faed 	bl	8000ac8 <__aeabi_dcmpeq>
 80124ee:	b108      	cbz	r0, 80124f4 <__cvt+0xa4>
 80124f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80124f4:	2230      	movs	r2, #48	; 0x30
 80124f6:	9b03      	ldr	r3, [sp, #12]
 80124f8:	454b      	cmp	r3, r9
 80124fa:	d307      	bcc.n	801250c <__cvt+0xbc>
 80124fc:	9b03      	ldr	r3, [sp, #12]
 80124fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012500:	1bdb      	subs	r3, r3, r7
 8012502:	4638      	mov	r0, r7
 8012504:	6013      	str	r3, [r2, #0]
 8012506:	b004      	add	sp, #16
 8012508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801250c:	1c59      	adds	r1, r3, #1
 801250e:	9103      	str	r1, [sp, #12]
 8012510:	701a      	strb	r2, [r3, #0]
 8012512:	e7f0      	b.n	80124f6 <__cvt+0xa6>

08012514 <__exponent>:
 8012514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012516:	4603      	mov	r3, r0
 8012518:	2900      	cmp	r1, #0
 801251a:	bfb8      	it	lt
 801251c:	4249      	neglt	r1, r1
 801251e:	f803 2b02 	strb.w	r2, [r3], #2
 8012522:	bfb4      	ite	lt
 8012524:	222d      	movlt	r2, #45	; 0x2d
 8012526:	222b      	movge	r2, #43	; 0x2b
 8012528:	2909      	cmp	r1, #9
 801252a:	7042      	strb	r2, [r0, #1]
 801252c:	dd2a      	ble.n	8012584 <__exponent+0x70>
 801252e:	f10d 0407 	add.w	r4, sp, #7
 8012532:	46a4      	mov	ip, r4
 8012534:	270a      	movs	r7, #10
 8012536:	46a6      	mov	lr, r4
 8012538:	460a      	mov	r2, r1
 801253a:	fb91 f6f7 	sdiv	r6, r1, r7
 801253e:	fb07 1516 	mls	r5, r7, r6, r1
 8012542:	3530      	adds	r5, #48	; 0x30
 8012544:	2a63      	cmp	r2, #99	; 0x63
 8012546:	f104 34ff 	add.w	r4, r4, #4294967295
 801254a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801254e:	4631      	mov	r1, r6
 8012550:	dcf1      	bgt.n	8012536 <__exponent+0x22>
 8012552:	3130      	adds	r1, #48	; 0x30
 8012554:	f1ae 0502 	sub.w	r5, lr, #2
 8012558:	f804 1c01 	strb.w	r1, [r4, #-1]
 801255c:	1c44      	adds	r4, r0, #1
 801255e:	4629      	mov	r1, r5
 8012560:	4561      	cmp	r1, ip
 8012562:	d30a      	bcc.n	801257a <__exponent+0x66>
 8012564:	f10d 0209 	add.w	r2, sp, #9
 8012568:	eba2 020e 	sub.w	r2, r2, lr
 801256c:	4565      	cmp	r5, ip
 801256e:	bf88      	it	hi
 8012570:	2200      	movhi	r2, #0
 8012572:	4413      	add	r3, r2
 8012574:	1a18      	subs	r0, r3, r0
 8012576:	b003      	add	sp, #12
 8012578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801257a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801257e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012582:	e7ed      	b.n	8012560 <__exponent+0x4c>
 8012584:	2330      	movs	r3, #48	; 0x30
 8012586:	3130      	adds	r1, #48	; 0x30
 8012588:	7083      	strb	r3, [r0, #2]
 801258a:	70c1      	strb	r1, [r0, #3]
 801258c:	1d03      	adds	r3, r0, #4
 801258e:	e7f1      	b.n	8012574 <__exponent+0x60>

08012590 <_printf_float>:
 8012590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012594:	ed2d 8b02 	vpush	{d8}
 8012598:	b08d      	sub	sp, #52	; 0x34
 801259a:	460c      	mov	r4, r1
 801259c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80125a0:	4616      	mov	r6, r2
 80125a2:	461f      	mov	r7, r3
 80125a4:	4605      	mov	r5, r0
 80125a6:	f002 fd69 	bl	801507c <_localeconv_r>
 80125aa:	f8d0 a000 	ldr.w	sl, [r0]
 80125ae:	4650      	mov	r0, sl
 80125b0:	f7ed fe0e 	bl	80001d0 <strlen>
 80125b4:	2300      	movs	r3, #0
 80125b6:	930a      	str	r3, [sp, #40]	; 0x28
 80125b8:	6823      	ldr	r3, [r4, #0]
 80125ba:	9305      	str	r3, [sp, #20]
 80125bc:	f8d8 3000 	ldr.w	r3, [r8]
 80125c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80125c4:	3307      	adds	r3, #7
 80125c6:	f023 0307 	bic.w	r3, r3, #7
 80125ca:	f103 0208 	add.w	r2, r3, #8
 80125ce:	f8c8 2000 	str.w	r2, [r8]
 80125d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80125da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80125de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80125e2:	9307      	str	r3, [sp, #28]
 80125e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80125e8:	ee08 0a10 	vmov	s16, r0
 80125ec:	4b9f      	ldr	r3, [pc, #636]	; (801286c <_printf_float+0x2dc>)
 80125ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80125f2:	f04f 32ff 	mov.w	r2, #4294967295
 80125f6:	f7ee fa99 	bl	8000b2c <__aeabi_dcmpun>
 80125fa:	bb88      	cbnz	r0, 8012660 <_printf_float+0xd0>
 80125fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012600:	4b9a      	ldr	r3, [pc, #616]	; (801286c <_printf_float+0x2dc>)
 8012602:	f04f 32ff 	mov.w	r2, #4294967295
 8012606:	f7ee fa73 	bl	8000af0 <__aeabi_dcmple>
 801260a:	bb48      	cbnz	r0, 8012660 <_printf_float+0xd0>
 801260c:	2200      	movs	r2, #0
 801260e:	2300      	movs	r3, #0
 8012610:	4640      	mov	r0, r8
 8012612:	4649      	mov	r1, r9
 8012614:	f7ee fa62 	bl	8000adc <__aeabi_dcmplt>
 8012618:	b110      	cbz	r0, 8012620 <_printf_float+0x90>
 801261a:	232d      	movs	r3, #45	; 0x2d
 801261c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012620:	4b93      	ldr	r3, [pc, #588]	; (8012870 <_printf_float+0x2e0>)
 8012622:	4894      	ldr	r0, [pc, #592]	; (8012874 <_printf_float+0x2e4>)
 8012624:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012628:	bf94      	ite	ls
 801262a:	4698      	movls	r8, r3
 801262c:	4680      	movhi	r8, r0
 801262e:	2303      	movs	r3, #3
 8012630:	6123      	str	r3, [r4, #16]
 8012632:	9b05      	ldr	r3, [sp, #20]
 8012634:	f023 0204 	bic.w	r2, r3, #4
 8012638:	6022      	str	r2, [r4, #0]
 801263a:	f04f 0900 	mov.w	r9, #0
 801263e:	9700      	str	r7, [sp, #0]
 8012640:	4633      	mov	r3, r6
 8012642:	aa0b      	add	r2, sp, #44	; 0x2c
 8012644:	4621      	mov	r1, r4
 8012646:	4628      	mov	r0, r5
 8012648:	f000 f9d8 	bl	80129fc <_printf_common>
 801264c:	3001      	adds	r0, #1
 801264e:	f040 8090 	bne.w	8012772 <_printf_float+0x1e2>
 8012652:	f04f 30ff 	mov.w	r0, #4294967295
 8012656:	b00d      	add	sp, #52	; 0x34
 8012658:	ecbd 8b02 	vpop	{d8}
 801265c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012660:	4642      	mov	r2, r8
 8012662:	464b      	mov	r3, r9
 8012664:	4640      	mov	r0, r8
 8012666:	4649      	mov	r1, r9
 8012668:	f7ee fa60 	bl	8000b2c <__aeabi_dcmpun>
 801266c:	b140      	cbz	r0, 8012680 <_printf_float+0xf0>
 801266e:	464b      	mov	r3, r9
 8012670:	2b00      	cmp	r3, #0
 8012672:	bfbc      	itt	lt
 8012674:	232d      	movlt	r3, #45	; 0x2d
 8012676:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801267a:	487f      	ldr	r0, [pc, #508]	; (8012878 <_printf_float+0x2e8>)
 801267c:	4b7f      	ldr	r3, [pc, #508]	; (801287c <_printf_float+0x2ec>)
 801267e:	e7d1      	b.n	8012624 <_printf_float+0x94>
 8012680:	6863      	ldr	r3, [r4, #4]
 8012682:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012686:	9206      	str	r2, [sp, #24]
 8012688:	1c5a      	adds	r2, r3, #1
 801268a:	d13f      	bne.n	801270c <_printf_float+0x17c>
 801268c:	2306      	movs	r3, #6
 801268e:	6063      	str	r3, [r4, #4]
 8012690:	9b05      	ldr	r3, [sp, #20]
 8012692:	6861      	ldr	r1, [r4, #4]
 8012694:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012698:	2300      	movs	r3, #0
 801269a:	9303      	str	r3, [sp, #12]
 801269c:	ab0a      	add	r3, sp, #40	; 0x28
 801269e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80126a2:	ab09      	add	r3, sp, #36	; 0x24
 80126a4:	ec49 8b10 	vmov	d0, r8, r9
 80126a8:	9300      	str	r3, [sp, #0]
 80126aa:	6022      	str	r2, [r4, #0]
 80126ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80126b0:	4628      	mov	r0, r5
 80126b2:	f7ff fecd 	bl	8012450 <__cvt>
 80126b6:	9b06      	ldr	r3, [sp, #24]
 80126b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126ba:	2b47      	cmp	r3, #71	; 0x47
 80126bc:	4680      	mov	r8, r0
 80126be:	d108      	bne.n	80126d2 <_printf_float+0x142>
 80126c0:	1cc8      	adds	r0, r1, #3
 80126c2:	db02      	blt.n	80126ca <_printf_float+0x13a>
 80126c4:	6863      	ldr	r3, [r4, #4]
 80126c6:	4299      	cmp	r1, r3
 80126c8:	dd41      	ble.n	801274e <_printf_float+0x1be>
 80126ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80126ce:	fa5f fb8b 	uxtb.w	fp, fp
 80126d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80126d6:	d820      	bhi.n	801271a <_printf_float+0x18a>
 80126d8:	3901      	subs	r1, #1
 80126da:	465a      	mov	r2, fp
 80126dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80126e0:	9109      	str	r1, [sp, #36]	; 0x24
 80126e2:	f7ff ff17 	bl	8012514 <__exponent>
 80126e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126e8:	1813      	adds	r3, r2, r0
 80126ea:	2a01      	cmp	r2, #1
 80126ec:	4681      	mov	r9, r0
 80126ee:	6123      	str	r3, [r4, #16]
 80126f0:	dc02      	bgt.n	80126f8 <_printf_float+0x168>
 80126f2:	6822      	ldr	r2, [r4, #0]
 80126f4:	07d2      	lsls	r2, r2, #31
 80126f6:	d501      	bpl.n	80126fc <_printf_float+0x16c>
 80126f8:	3301      	adds	r3, #1
 80126fa:	6123      	str	r3, [r4, #16]
 80126fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012700:	2b00      	cmp	r3, #0
 8012702:	d09c      	beq.n	801263e <_printf_float+0xae>
 8012704:	232d      	movs	r3, #45	; 0x2d
 8012706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801270a:	e798      	b.n	801263e <_printf_float+0xae>
 801270c:	9a06      	ldr	r2, [sp, #24]
 801270e:	2a47      	cmp	r2, #71	; 0x47
 8012710:	d1be      	bne.n	8012690 <_printf_float+0x100>
 8012712:	2b00      	cmp	r3, #0
 8012714:	d1bc      	bne.n	8012690 <_printf_float+0x100>
 8012716:	2301      	movs	r3, #1
 8012718:	e7b9      	b.n	801268e <_printf_float+0xfe>
 801271a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801271e:	d118      	bne.n	8012752 <_printf_float+0x1c2>
 8012720:	2900      	cmp	r1, #0
 8012722:	6863      	ldr	r3, [r4, #4]
 8012724:	dd0b      	ble.n	801273e <_printf_float+0x1ae>
 8012726:	6121      	str	r1, [r4, #16]
 8012728:	b913      	cbnz	r3, 8012730 <_printf_float+0x1a0>
 801272a:	6822      	ldr	r2, [r4, #0]
 801272c:	07d0      	lsls	r0, r2, #31
 801272e:	d502      	bpl.n	8012736 <_printf_float+0x1a6>
 8012730:	3301      	adds	r3, #1
 8012732:	440b      	add	r3, r1
 8012734:	6123      	str	r3, [r4, #16]
 8012736:	65a1      	str	r1, [r4, #88]	; 0x58
 8012738:	f04f 0900 	mov.w	r9, #0
 801273c:	e7de      	b.n	80126fc <_printf_float+0x16c>
 801273e:	b913      	cbnz	r3, 8012746 <_printf_float+0x1b6>
 8012740:	6822      	ldr	r2, [r4, #0]
 8012742:	07d2      	lsls	r2, r2, #31
 8012744:	d501      	bpl.n	801274a <_printf_float+0x1ba>
 8012746:	3302      	adds	r3, #2
 8012748:	e7f4      	b.n	8012734 <_printf_float+0x1a4>
 801274a:	2301      	movs	r3, #1
 801274c:	e7f2      	b.n	8012734 <_printf_float+0x1a4>
 801274e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012754:	4299      	cmp	r1, r3
 8012756:	db05      	blt.n	8012764 <_printf_float+0x1d4>
 8012758:	6823      	ldr	r3, [r4, #0]
 801275a:	6121      	str	r1, [r4, #16]
 801275c:	07d8      	lsls	r0, r3, #31
 801275e:	d5ea      	bpl.n	8012736 <_printf_float+0x1a6>
 8012760:	1c4b      	adds	r3, r1, #1
 8012762:	e7e7      	b.n	8012734 <_printf_float+0x1a4>
 8012764:	2900      	cmp	r1, #0
 8012766:	bfd4      	ite	le
 8012768:	f1c1 0202 	rsble	r2, r1, #2
 801276c:	2201      	movgt	r2, #1
 801276e:	4413      	add	r3, r2
 8012770:	e7e0      	b.n	8012734 <_printf_float+0x1a4>
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	055a      	lsls	r2, r3, #21
 8012776:	d407      	bmi.n	8012788 <_printf_float+0x1f8>
 8012778:	6923      	ldr	r3, [r4, #16]
 801277a:	4642      	mov	r2, r8
 801277c:	4631      	mov	r1, r6
 801277e:	4628      	mov	r0, r5
 8012780:	47b8      	blx	r7
 8012782:	3001      	adds	r0, #1
 8012784:	d12c      	bne.n	80127e0 <_printf_float+0x250>
 8012786:	e764      	b.n	8012652 <_printf_float+0xc2>
 8012788:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801278c:	f240 80e0 	bls.w	8012950 <_printf_float+0x3c0>
 8012790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012794:	2200      	movs	r2, #0
 8012796:	2300      	movs	r3, #0
 8012798:	f7ee f996 	bl	8000ac8 <__aeabi_dcmpeq>
 801279c:	2800      	cmp	r0, #0
 801279e:	d034      	beq.n	801280a <_printf_float+0x27a>
 80127a0:	4a37      	ldr	r2, [pc, #220]	; (8012880 <_printf_float+0x2f0>)
 80127a2:	2301      	movs	r3, #1
 80127a4:	4631      	mov	r1, r6
 80127a6:	4628      	mov	r0, r5
 80127a8:	47b8      	blx	r7
 80127aa:	3001      	adds	r0, #1
 80127ac:	f43f af51 	beq.w	8012652 <_printf_float+0xc2>
 80127b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80127b4:	429a      	cmp	r2, r3
 80127b6:	db02      	blt.n	80127be <_printf_float+0x22e>
 80127b8:	6823      	ldr	r3, [r4, #0]
 80127ba:	07d8      	lsls	r0, r3, #31
 80127bc:	d510      	bpl.n	80127e0 <_printf_float+0x250>
 80127be:	ee18 3a10 	vmov	r3, s16
 80127c2:	4652      	mov	r2, sl
 80127c4:	4631      	mov	r1, r6
 80127c6:	4628      	mov	r0, r5
 80127c8:	47b8      	blx	r7
 80127ca:	3001      	adds	r0, #1
 80127cc:	f43f af41 	beq.w	8012652 <_printf_float+0xc2>
 80127d0:	f04f 0800 	mov.w	r8, #0
 80127d4:	f104 091a 	add.w	r9, r4, #26
 80127d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127da:	3b01      	subs	r3, #1
 80127dc:	4543      	cmp	r3, r8
 80127de:	dc09      	bgt.n	80127f4 <_printf_float+0x264>
 80127e0:	6823      	ldr	r3, [r4, #0]
 80127e2:	079b      	lsls	r3, r3, #30
 80127e4:	f100 8105 	bmi.w	80129f2 <_printf_float+0x462>
 80127e8:	68e0      	ldr	r0, [r4, #12]
 80127ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127ec:	4298      	cmp	r0, r3
 80127ee:	bfb8      	it	lt
 80127f0:	4618      	movlt	r0, r3
 80127f2:	e730      	b.n	8012656 <_printf_float+0xc6>
 80127f4:	2301      	movs	r3, #1
 80127f6:	464a      	mov	r2, r9
 80127f8:	4631      	mov	r1, r6
 80127fa:	4628      	mov	r0, r5
 80127fc:	47b8      	blx	r7
 80127fe:	3001      	adds	r0, #1
 8012800:	f43f af27 	beq.w	8012652 <_printf_float+0xc2>
 8012804:	f108 0801 	add.w	r8, r8, #1
 8012808:	e7e6      	b.n	80127d8 <_printf_float+0x248>
 801280a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801280c:	2b00      	cmp	r3, #0
 801280e:	dc39      	bgt.n	8012884 <_printf_float+0x2f4>
 8012810:	4a1b      	ldr	r2, [pc, #108]	; (8012880 <_printf_float+0x2f0>)
 8012812:	2301      	movs	r3, #1
 8012814:	4631      	mov	r1, r6
 8012816:	4628      	mov	r0, r5
 8012818:	47b8      	blx	r7
 801281a:	3001      	adds	r0, #1
 801281c:	f43f af19 	beq.w	8012652 <_printf_float+0xc2>
 8012820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012824:	4313      	orrs	r3, r2
 8012826:	d102      	bne.n	801282e <_printf_float+0x29e>
 8012828:	6823      	ldr	r3, [r4, #0]
 801282a:	07d9      	lsls	r1, r3, #31
 801282c:	d5d8      	bpl.n	80127e0 <_printf_float+0x250>
 801282e:	ee18 3a10 	vmov	r3, s16
 8012832:	4652      	mov	r2, sl
 8012834:	4631      	mov	r1, r6
 8012836:	4628      	mov	r0, r5
 8012838:	47b8      	blx	r7
 801283a:	3001      	adds	r0, #1
 801283c:	f43f af09 	beq.w	8012652 <_printf_float+0xc2>
 8012840:	f04f 0900 	mov.w	r9, #0
 8012844:	f104 0a1a 	add.w	sl, r4, #26
 8012848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801284a:	425b      	negs	r3, r3
 801284c:	454b      	cmp	r3, r9
 801284e:	dc01      	bgt.n	8012854 <_printf_float+0x2c4>
 8012850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012852:	e792      	b.n	801277a <_printf_float+0x1ea>
 8012854:	2301      	movs	r3, #1
 8012856:	4652      	mov	r2, sl
 8012858:	4631      	mov	r1, r6
 801285a:	4628      	mov	r0, r5
 801285c:	47b8      	blx	r7
 801285e:	3001      	adds	r0, #1
 8012860:	f43f aef7 	beq.w	8012652 <_printf_float+0xc2>
 8012864:	f109 0901 	add.w	r9, r9, #1
 8012868:	e7ee      	b.n	8012848 <_printf_float+0x2b8>
 801286a:	bf00      	nop
 801286c:	7fefffff 	.word	0x7fefffff
 8012870:	08018f64 	.word	0x08018f64
 8012874:	08018f68 	.word	0x08018f68
 8012878:	08018f70 	.word	0x08018f70
 801287c:	08018f6c 	.word	0x08018f6c
 8012880:	08016dbb 	.word	0x08016dbb
 8012884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012888:	429a      	cmp	r2, r3
 801288a:	bfa8      	it	ge
 801288c:	461a      	movge	r2, r3
 801288e:	2a00      	cmp	r2, #0
 8012890:	4691      	mov	r9, r2
 8012892:	dc37      	bgt.n	8012904 <_printf_float+0x374>
 8012894:	f04f 0b00 	mov.w	fp, #0
 8012898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801289c:	f104 021a 	add.w	r2, r4, #26
 80128a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80128a2:	9305      	str	r3, [sp, #20]
 80128a4:	eba3 0309 	sub.w	r3, r3, r9
 80128a8:	455b      	cmp	r3, fp
 80128aa:	dc33      	bgt.n	8012914 <_printf_float+0x384>
 80128ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128b0:	429a      	cmp	r2, r3
 80128b2:	db3b      	blt.n	801292c <_printf_float+0x39c>
 80128b4:	6823      	ldr	r3, [r4, #0]
 80128b6:	07da      	lsls	r2, r3, #31
 80128b8:	d438      	bmi.n	801292c <_printf_float+0x39c>
 80128ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128bc:	9b05      	ldr	r3, [sp, #20]
 80128be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128c0:	1ad3      	subs	r3, r2, r3
 80128c2:	eba2 0901 	sub.w	r9, r2, r1
 80128c6:	4599      	cmp	r9, r3
 80128c8:	bfa8      	it	ge
 80128ca:	4699      	movge	r9, r3
 80128cc:	f1b9 0f00 	cmp.w	r9, #0
 80128d0:	dc35      	bgt.n	801293e <_printf_float+0x3ae>
 80128d2:	f04f 0800 	mov.w	r8, #0
 80128d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128da:	f104 0a1a 	add.w	sl, r4, #26
 80128de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128e2:	1a9b      	subs	r3, r3, r2
 80128e4:	eba3 0309 	sub.w	r3, r3, r9
 80128e8:	4543      	cmp	r3, r8
 80128ea:	f77f af79 	ble.w	80127e0 <_printf_float+0x250>
 80128ee:	2301      	movs	r3, #1
 80128f0:	4652      	mov	r2, sl
 80128f2:	4631      	mov	r1, r6
 80128f4:	4628      	mov	r0, r5
 80128f6:	47b8      	blx	r7
 80128f8:	3001      	adds	r0, #1
 80128fa:	f43f aeaa 	beq.w	8012652 <_printf_float+0xc2>
 80128fe:	f108 0801 	add.w	r8, r8, #1
 8012902:	e7ec      	b.n	80128de <_printf_float+0x34e>
 8012904:	4613      	mov	r3, r2
 8012906:	4631      	mov	r1, r6
 8012908:	4642      	mov	r2, r8
 801290a:	4628      	mov	r0, r5
 801290c:	47b8      	blx	r7
 801290e:	3001      	adds	r0, #1
 8012910:	d1c0      	bne.n	8012894 <_printf_float+0x304>
 8012912:	e69e      	b.n	8012652 <_printf_float+0xc2>
 8012914:	2301      	movs	r3, #1
 8012916:	4631      	mov	r1, r6
 8012918:	4628      	mov	r0, r5
 801291a:	9205      	str	r2, [sp, #20]
 801291c:	47b8      	blx	r7
 801291e:	3001      	adds	r0, #1
 8012920:	f43f ae97 	beq.w	8012652 <_printf_float+0xc2>
 8012924:	9a05      	ldr	r2, [sp, #20]
 8012926:	f10b 0b01 	add.w	fp, fp, #1
 801292a:	e7b9      	b.n	80128a0 <_printf_float+0x310>
 801292c:	ee18 3a10 	vmov	r3, s16
 8012930:	4652      	mov	r2, sl
 8012932:	4631      	mov	r1, r6
 8012934:	4628      	mov	r0, r5
 8012936:	47b8      	blx	r7
 8012938:	3001      	adds	r0, #1
 801293a:	d1be      	bne.n	80128ba <_printf_float+0x32a>
 801293c:	e689      	b.n	8012652 <_printf_float+0xc2>
 801293e:	9a05      	ldr	r2, [sp, #20]
 8012940:	464b      	mov	r3, r9
 8012942:	4442      	add	r2, r8
 8012944:	4631      	mov	r1, r6
 8012946:	4628      	mov	r0, r5
 8012948:	47b8      	blx	r7
 801294a:	3001      	adds	r0, #1
 801294c:	d1c1      	bne.n	80128d2 <_printf_float+0x342>
 801294e:	e680      	b.n	8012652 <_printf_float+0xc2>
 8012950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012952:	2a01      	cmp	r2, #1
 8012954:	dc01      	bgt.n	801295a <_printf_float+0x3ca>
 8012956:	07db      	lsls	r3, r3, #31
 8012958:	d538      	bpl.n	80129cc <_printf_float+0x43c>
 801295a:	2301      	movs	r3, #1
 801295c:	4642      	mov	r2, r8
 801295e:	4631      	mov	r1, r6
 8012960:	4628      	mov	r0, r5
 8012962:	47b8      	blx	r7
 8012964:	3001      	adds	r0, #1
 8012966:	f43f ae74 	beq.w	8012652 <_printf_float+0xc2>
 801296a:	ee18 3a10 	vmov	r3, s16
 801296e:	4652      	mov	r2, sl
 8012970:	4631      	mov	r1, r6
 8012972:	4628      	mov	r0, r5
 8012974:	47b8      	blx	r7
 8012976:	3001      	adds	r0, #1
 8012978:	f43f ae6b 	beq.w	8012652 <_printf_float+0xc2>
 801297c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012980:	2200      	movs	r2, #0
 8012982:	2300      	movs	r3, #0
 8012984:	f7ee f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8012988:	b9d8      	cbnz	r0, 80129c2 <_printf_float+0x432>
 801298a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801298c:	f108 0201 	add.w	r2, r8, #1
 8012990:	3b01      	subs	r3, #1
 8012992:	4631      	mov	r1, r6
 8012994:	4628      	mov	r0, r5
 8012996:	47b8      	blx	r7
 8012998:	3001      	adds	r0, #1
 801299a:	d10e      	bne.n	80129ba <_printf_float+0x42a>
 801299c:	e659      	b.n	8012652 <_printf_float+0xc2>
 801299e:	2301      	movs	r3, #1
 80129a0:	4652      	mov	r2, sl
 80129a2:	4631      	mov	r1, r6
 80129a4:	4628      	mov	r0, r5
 80129a6:	47b8      	blx	r7
 80129a8:	3001      	adds	r0, #1
 80129aa:	f43f ae52 	beq.w	8012652 <_printf_float+0xc2>
 80129ae:	f108 0801 	add.w	r8, r8, #1
 80129b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129b4:	3b01      	subs	r3, #1
 80129b6:	4543      	cmp	r3, r8
 80129b8:	dcf1      	bgt.n	801299e <_printf_float+0x40e>
 80129ba:	464b      	mov	r3, r9
 80129bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80129c0:	e6dc      	b.n	801277c <_printf_float+0x1ec>
 80129c2:	f04f 0800 	mov.w	r8, #0
 80129c6:	f104 0a1a 	add.w	sl, r4, #26
 80129ca:	e7f2      	b.n	80129b2 <_printf_float+0x422>
 80129cc:	2301      	movs	r3, #1
 80129ce:	4642      	mov	r2, r8
 80129d0:	e7df      	b.n	8012992 <_printf_float+0x402>
 80129d2:	2301      	movs	r3, #1
 80129d4:	464a      	mov	r2, r9
 80129d6:	4631      	mov	r1, r6
 80129d8:	4628      	mov	r0, r5
 80129da:	47b8      	blx	r7
 80129dc:	3001      	adds	r0, #1
 80129de:	f43f ae38 	beq.w	8012652 <_printf_float+0xc2>
 80129e2:	f108 0801 	add.w	r8, r8, #1
 80129e6:	68e3      	ldr	r3, [r4, #12]
 80129e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80129ea:	1a5b      	subs	r3, r3, r1
 80129ec:	4543      	cmp	r3, r8
 80129ee:	dcf0      	bgt.n	80129d2 <_printf_float+0x442>
 80129f0:	e6fa      	b.n	80127e8 <_printf_float+0x258>
 80129f2:	f04f 0800 	mov.w	r8, #0
 80129f6:	f104 0919 	add.w	r9, r4, #25
 80129fa:	e7f4      	b.n	80129e6 <_printf_float+0x456>

080129fc <_printf_common>:
 80129fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a00:	4616      	mov	r6, r2
 8012a02:	4699      	mov	r9, r3
 8012a04:	688a      	ldr	r2, [r1, #8]
 8012a06:	690b      	ldr	r3, [r1, #16]
 8012a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	bfb8      	it	lt
 8012a10:	4613      	movlt	r3, r2
 8012a12:	6033      	str	r3, [r6, #0]
 8012a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a18:	4607      	mov	r7, r0
 8012a1a:	460c      	mov	r4, r1
 8012a1c:	b10a      	cbz	r2, 8012a22 <_printf_common+0x26>
 8012a1e:	3301      	adds	r3, #1
 8012a20:	6033      	str	r3, [r6, #0]
 8012a22:	6823      	ldr	r3, [r4, #0]
 8012a24:	0699      	lsls	r1, r3, #26
 8012a26:	bf42      	ittt	mi
 8012a28:	6833      	ldrmi	r3, [r6, #0]
 8012a2a:	3302      	addmi	r3, #2
 8012a2c:	6033      	strmi	r3, [r6, #0]
 8012a2e:	6825      	ldr	r5, [r4, #0]
 8012a30:	f015 0506 	ands.w	r5, r5, #6
 8012a34:	d106      	bne.n	8012a44 <_printf_common+0x48>
 8012a36:	f104 0a19 	add.w	sl, r4, #25
 8012a3a:	68e3      	ldr	r3, [r4, #12]
 8012a3c:	6832      	ldr	r2, [r6, #0]
 8012a3e:	1a9b      	subs	r3, r3, r2
 8012a40:	42ab      	cmp	r3, r5
 8012a42:	dc26      	bgt.n	8012a92 <_printf_common+0x96>
 8012a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012a48:	1e13      	subs	r3, r2, #0
 8012a4a:	6822      	ldr	r2, [r4, #0]
 8012a4c:	bf18      	it	ne
 8012a4e:	2301      	movne	r3, #1
 8012a50:	0692      	lsls	r2, r2, #26
 8012a52:	d42b      	bmi.n	8012aac <_printf_common+0xb0>
 8012a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a58:	4649      	mov	r1, r9
 8012a5a:	4638      	mov	r0, r7
 8012a5c:	47c0      	blx	r8
 8012a5e:	3001      	adds	r0, #1
 8012a60:	d01e      	beq.n	8012aa0 <_printf_common+0xa4>
 8012a62:	6823      	ldr	r3, [r4, #0]
 8012a64:	68e5      	ldr	r5, [r4, #12]
 8012a66:	6832      	ldr	r2, [r6, #0]
 8012a68:	f003 0306 	and.w	r3, r3, #6
 8012a6c:	2b04      	cmp	r3, #4
 8012a6e:	bf08      	it	eq
 8012a70:	1aad      	subeq	r5, r5, r2
 8012a72:	68a3      	ldr	r3, [r4, #8]
 8012a74:	6922      	ldr	r2, [r4, #16]
 8012a76:	bf0c      	ite	eq
 8012a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a7c:	2500      	movne	r5, #0
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	bfc4      	itt	gt
 8012a82:	1a9b      	subgt	r3, r3, r2
 8012a84:	18ed      	addgt	r5, r5, r3
 8012a86:	2600      	movs	r6, #0
 8012a88:	341a      	adds	r4, #26
 8012a8a:	42b5      	cmp	r5, r6
 8012a8c:	d11a      	bne.n	8012ac4 <_printf_common+0xc8>
 8012a8e:	2000      	movs	r0, #0
 8012a90:	e008      	b.n	8012aa4 <_printf_common+0xa8>
 8012a92:	2301      	movs	r3, #1
 8012a94:	4652      	mov	r2, sl
 8012a96:	4649      	mov	r1, r9
 8012a98:	4638      	mov	r0, r7
 8012a9a:	47c0      	blx	r8
 8012a9c:	3001      	adds	r0, #1
 8012a9e:	d103      	bne.n	8012aa8 <_printf_common+0xac>
 8012aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aa8:	3501      	adds	r5, #1
 8012aaa:	e7c6      	b.n	8012a3a <_printf_common+0x3e>
 8012aac:	18e1      	adds	r1, r4, r3
 8012aae:	1c5a      	adds	r2, r3, #1
 8012ab0:	2030      	movs	r0, #48	; 0x30
 8012ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ab6:	4422      	add	r2, r4
 8012ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ac0:	3302      	adds	r3, #2
 8012ac2:	e7c7      	b.n	8012a54 <_printf_common+0x58>
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	4622      	mov	r2, r4
 8012ac8:	4649      	mov	r1, r9
 8012aca:	4638      	mov	r0, r7
 8012acc:	47c0      	blx	r8
 8012ace:	3001      	adds	r0, #1
 8012ad0:	d0e6      	beq.n	8012aa0 <_printf_common+0xa4>
 8012ad2:	3601      	adds	r6, #1
 8012ad4:	e7d9      	b.n	8012a8a <_printf_common+0x8e>
	...

08012ad8 <_printf_i>:
 8012ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012adc:	460c      	mov	r4, r1
 8012ade:	4691      	mov	r9, r2
 8012ae0:	7e27      	ldrb	r7, [r4, #24]
 8012ae2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012ae4:	2f78      	cmp	r7, #120	; 0x78
 8012ae6:	4680      	mov	r8, r0
 8012ae8:	469a      	mov	sl, r3
 8012aea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012aee:	d807      	bhi.n	8012b00 <_printf_i+0x28>
 8012af0:	2f62      	cmp	r7, #98	; 0x62
 8012af2:	d80a      	bhi.n	8012b0a <_printf_i+0x32>
 8012af4:	2f00      	cmp	r7, #0
 8012af6:	f000 80d8 	beq.w	8012caa <_printf_i+0x1d2>
 8012afa:	2f58      	cmp	r7, #88	; 0x58
 8012afc:	f000 80a3 	beq.w	8012c46 <_printf_i+0x16e>
 8012b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012b08:	e03a      	b.n	8012b80 <_printf_i+0xa8>
 8012b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012b0e:	2b15      	cmp	r3, #21
 8012b10:	d8f6      	bhi.n	8012b00 <_printf_i+0x28>
 8012b12:	a001      	add	r0, pc, #4	; (adr r0, 8012b18 <_printf_i+0x40>)
 8012b14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012b18:	08012b71 	.word	0x08012b71
 8012b1c:	08012b85 	.word	0x08012b85
 8012b20:	08012b01 	.word	0x08012b01
 8012b24:	08012b01 	.word	0x08012b01
 8012b28:	08012b01 	.word	0x08012b01
 8012b2c:	08012b01 	.word	0x08012b01
 8012b30:	08012b85 	.word	0x08012b85
 8012b34:	08012b01 	.word	0x08012b01
 8012b38:	08012b01 	.word	0x08012b01
 8012b3c:	08012b01 	.word	0x08012b01
 8012b40:	08012b01 	.word	0x08012b01
 8012b44:	08012c91 	.word	0x08012c91
 8012b48:	08012bb5 	.word	0x08012bb5
 8012b4c:	08012c73 	.word	0x08012c73
 8012b50:	08012b01 	.word	0x08012b01
 8012b54:	08012b01 	.word	0x08012b01
 8012b58:	08012cb3 	.word	0x08012cb3
 8012b5c:	08012b01 	.word	0x08012b01
 8012b60:	08012bb5 	.word	0x08012bb5
 8012b64:	08012b01 	.word	0x08012b01
 8012b68:	08012b01 	.word	0x08012b01
 8012b6c:	08012c7b 	.word	0x08012c7b
 8012b70:	680b      	ldr	r3, [r1, #0]
 8012b72:	1d1a      	adds	r2, r3, #4
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	600a      	str	r2, [r1, #0]
 8012b78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b80:	2301      	movs	r3, #1
 8012b82:	e0a3      	b.n	8012ccc <_printf_i+0x1f4>
 8012b84:	6825      	ldr	r5, [r4, #0]
 8012b86:	6808      	ldr	r0, [r1, #0]
 8012b88:	062e      	lsls	r6, r5, #24
 8012b8a:	f100 0304 	add.w	r3, r0, #4
 8012b8e:	d50a      	bpl.n	8012ba6 <_printf_i+0xce>
 8012b90:	6805      	ldr	r5, [r0, #0]
 8012b92:	600b      	str	r3, [r1, #0]
 8012b94:	2d00      	cmp	r5, #0
 8012b96:	da03      	bge.n	8012ba0 <_printf_i+0xc8>
 8012b98:	232d      	movs	r3, #45	; 0x2d
 8012b9a:	426d      	negs	r5, r5
 8012b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ba0:	485e      	ldr	r0, [pc, #376]	; (8012d1c <_printf_i+0x244>)
 8012ba2:	230a      	movs	r3, #10
 8012ba4:	e019      	b.n	8012bda <_printf_i+0x102>
 8012ba6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012baa:	6805      	ldr	r5, [r0, #0]
 8012bac:	600b      	str	r3, [r1, #0]
 8012bae:	bf18      	it	ne
 8012bb0:	b22d      	sxthne	r5, r5
 8012bb2:	e7ef      	b.n	8012b94 <_printf_i+0xbc>
 8012bb4:	680b      	ldr	r3, [r1, #0]
 8012bb6:	6825      	ldr	r5, [r4, #0]
 8012bb8:	1d18      	adds	r0, r3, #4
 8012bba:	6008      	str	r0, [r1, #0]
 8012bbc:	0628      	lsls	r0, r5, #24
 8012bbe:	d501      	bpl.n	8012bc4 <_printf_i+0xec>
 8012bc0:	681d      	ldr	r5, [r3, #0]
 8012bc2:	e002      	b.n	8012bca <_printf_i+0xf2>
 8012bc4:	0669      	lsls	r1, r5, #25
 8012bc6:	d5fb      	bpl.n	8012bc0 <_printf_i+0xe8>
 8012bc8:	881d      	ldrh	r5, [r3, #0]
 8012bca:	4854      	ldr	r0, [pc, #336]	; (8012d1c <_printf_i+0x244>)
 8012bcc:	2f6f      	cmp	r7, #111	; 0x6f
 8012bce:	bf0c      	ite	eq
 8012bd0:	2308      	moveq	r3, #8
 8012bd2:	230a      	movne	r3, #10
 8012bd4:	2100      	movs	r1, #0
 8012bd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012bda:	6866      	ldr	r6, [r4, #4]
 8012bdc:	60a6      	str	r6, [r4, #8]
 8012bde:	2e00      	cmp	r6, #0
 8012be0:	bfa2      	ittt	ge
 8012be2:	6821      	ldrge	r1, [r4, #0]
 8012be4:	f021 0104 	bicge.w	r1, r1, #4
 8012be8:	6021      	strge	r1, [r4, #0]
 8012bea:	b90d      	cbnz	r5, 8012bf0 <_printf_i+0x118>
 8012bec:	2e00      	cmp	r6, #0
 8012bee:	d04d      	beq.n	8012c8c <_printf_i+0x1b4>
 8012bf0:	4616      	mov	r6, r2
 8012bf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8012bf6:	fb03 5711 	mls	r7, r3, r1, r5
 8012bfa:	5dc7      	ldrb	r7, [r0, r7]
 8012bfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012c00:	462f      	mov	r7, r5
 8012c02:	42bb      	cmp	r3, r7
 8012c04:	460d      	mov	r5, r1
 8012c06:	d9f4      	bls.n	8012bf2 <_printf_i+0x11a>
 8012c08:	2b08      	cmp	r3, #8
 8012c0a:	d10b      	bne.n	8012c24 <_printf_i+0x14c>
 8012c0c:	6823      	ldr	r3, [r4, #0]
 8012c0e:	07df      	lsls	r7, r3, #31
 8012c10:	d508      	bpl.n	8012c24 <_printf_i+0x14c>
 8012c12:	6923      	ldr	r3, [r4, #16]
 8012c14:	6861      	ldr	r1, [r4, #4]
 8012c16:	4299      	cmp	r1, r3
 8012c18:	bfde      	ittt	le
 8012c1a:	2330      	movle	r3, #48	; 0x30
 8012c1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012c20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012c24:	1b92      	subs	r2, r2, r6
 8012c26:	6122      	str	r2, [r4, #16]
 8012c28:	f8cd a000 	str.w	sl, [sp]
 8012c2c:	464b      	mov	r3, r9
 8012c2e:	aa03      	add	r2, sp, #12
 8012c30:	4621      	mov	r1, r4
 8012c32:	4640      	mov	r0, r8
 8012c34:	f7ff fee2 	bl	80129fc <_printf_common>
 8012c38:	3001      	adds	r0, #1
 8012c3a:	d14c      	bne.n	8012cd6 <_printf_i+0x1fe>
 8012c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c40:	b004      	add	sp, #16
 8012c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c46:	4835      	ldr	r0, [pc, #212]	; (8012d1c <_printf_i+0x244>)
 8012c48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012c4c:	6823      	ldr	r3, [r4, #0]
 8012c4e:	680e      	ldr	r6, [r1, #0]
 8012c50:	061f      	lsls	r7, r3, #24
 8012c52:	f856 5b04 	ldr.w	r5, [r6], #4
 8012c56:	600e      	str	r6, [r1, #0]
 8012c58:	d514      	bpl.n	8012c84 <_printf_i+0x1ac>
 8012c5a:	07d9      	lsls	r1, r3, #31
 8012c5c:	bf44      	itt	mi
 8012c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8012c62:	6023      	strmi	r3, [r4, #0]
 8012c64:	b91d      	cbnz	r5, 8012c6e <_printf_i+0x196>
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	f023 0320 	bic.w	r3, r3, #32
 8012c6c:	6023      	str	r3, [r4, #0]
 8012c6e:	2310      	movs	r3, #16
 8012c70:	e7b0      	b.n	8012bd4 <_printf_i+0xfc>
 8012c72:	6823      	ldr	r3, [r4, #0]
 8012c74:	f043 0320 	orr.w	r3, r3, #32
 8012c78:	6023      	str	r3, [r4, #0]
 8012c7a:	2378      	movs	r3, #120	; 0x78
 8012c7c:	4828      	ldr	r0, [pc, #160]	; (8012d20 <_printf_i+0x248>)
 8012c7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012c82:	e7e3      	b.n	8012c4c <_printf_i+0x174>
 8012c84:	065e      	lsls	r6, r3, #25
 8012c86:	bf48      	it	mi
 8012c88:	b2ad      	uxthmi	r5, r5
 8012c8a:	e7e6      	b.n	8012c5a <_printf_i+0x182>
 8012c8c:	4616      	mov	r6, r2
 8012c8e:	e7bb      	b.n	8012c08 <_printf_i+0x130>
 8012c90:	680b      	ldr	r3, [r1, #0]
 8012c92:	6826      	ldr	r6, [r4, #0]
 8012c94:	6960      	ldr	r0, [r4, #20]
 8012c96:	1d1d      	adds	r5, r3, #4
 8012c98:	600d      	str	r5, [r1, #0]
 8012c9a:	0635      	lsls	r5, r6, #24
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	d501      	bpl.n	8012ca4 <_printf_i+0x1cc>
 8012ca0:	6018      	str	r0, [r3, #0]
 8012ca2:	e002      	b.n	8012caa <_printf_i+0x1d2>
 8012ca4:	0671      	lsls	r1, r6, #25
 8012ca6:	d5fb      	bpl.n	8012ca0 <_printf_i+0x1c8>
 8012ca8:	8018      	strh	r0, [r3, #0]
 8012caa:	2300      	movs	r3, #0
 8012cac:	6123      	str	r3, [r4, #16]
 8012cae:	4616      	mov	r6, r2
 8012cb0:	e7ba      	b.n	8012c28 <_printf_i+0x150>
 8012cb2:	680b      	ldr	r3, [r1, #0]
 8012cb4:	1d1a      	adds	r2, r3, #4
 8012cb6:	600a      	str	r2, [r1, #0]
 8012cb8:	681e      	ldr	r6, [r3, #0]
 8012cba:	6862      	ldr	r2, [r4, #4]
 8012cbc:	2100      	movs	r1, #0
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7ed fa8e 	bl	80001e0 <memchr>
 8012cc4:	b108      	cbz	r0, 8012cca <_printf_i+0x1f2>
 8012cc6:	1b80      	subs	r0, r0, r6
 8012cc8:	6060      	str	r0, [r4, #4]
 8012cca:	6863      	ldr	r3, [r4, #4]
 8012ccc:	6123      	str	r3, [r4, #16]
 8012cce:	2300      	movs	r3, #0
 8012cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cd4:	e7a8      	b.n	8012c28 <_printf_i+0x150>
 8012cd6:	6923      	ldr	r3, [r4, #16]
 8012cd8:	4632      	mov	r2, r6
 8012cda:	4649      	mov	r1, r9
 8012cdc:	4640      	mov	r0, r8
 8012cde:	47d0      	blx	sl
 8012ce0:	3001      	adds	r0, #1
 8012ce2:	d0ab      	beq.n	8012c3c <_printf_i+0x164>
 8012ce4:	6823      	ldr	r3, [r4, #0]
 8012ce6:	079b      	lsls	r3, r3, #30
 8012ce8:	d413      	bmi.n	8012d12 <_printf_i+0x23a>
 8012cea:	68e0      	ldr	r0, [r4, #12]
 8012cec:	9b03      	ldr	r3, [sp, #12]
 8012cee:	4298      	cmp	r0, r3
 8012cf0:	bfb8      	it	lt
 8012cf2:	4618      	movlt	r0, r3
 8012cf4:	e7a4      	b.n	8012c40 <_printf_i+0x168>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	4632      	mov	r2, r6
 8012cfa:	4649      	mov	r1, r9
 8012cfc:	4640      	mov	r0, r8
 8012cfe:	47d0      	blx	sl
 8012d00:	3001      	adds	r0, #1
 8012d02:	d09b      	beq.n	8012c3c <_printf_i+0x164>
 8012d04:	3501      	adds	r5, #1
 8012d06:	68e3      	ldr	r3, [r4, #12]
 8012d08:	9903      	ldr	r1, [sp, #12]
 8012d0a:	1a5b      	subs	r3, r3, r1
 8012d0c:	42ab      	cmp	r3, r5
 8012d0e:	dcf2      	bgt.n	8012cf6 <_printf_i+0x21e>
 8012d10:	e7eb      	b.n	8012cea <_printf_i+0x212>
 8012d12:	2500      	movs	r5, #0
 8012d14:	f104 0619 	add.w	r6, r4, #25
 8012d18:	e7f5      	b.n	8012d06 <_printf_i+0x22e>
 8012d1a:	bf00      	nop
 8012d1c:	08018f74 	.word	0x08018f74
 8012d20:	08018f85 	.word	0x08018f85

08012d24 <siprintf>:
 8012d24:	b40e      	push	{r1, r2, r3}
 8012d26:	b500      	push	{lr}
 8012d28:	b09c      	sub	sp, #112	; 0x70
 8012d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8012d2c:	9002      	str	r0, [sp, #8]
 8012d2e:	9006      	str	r0, [sp, #24]
 8012d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012d34:	4809      	ldr	r0, [pc, #36]	; (8012d5c <siprintf+0x38>)
 8012d36:	9107      	str	r1, [sp, #28]
 8012d38:	9104      	str	r1, [sp, #16]
 8012d3a:	4909      	ldr	r1, [pc, #36]	; (8012d60 <siprintf+0x3c>)
 8012d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d40:	9105      	str	r1, [sp, #20]
 8012d42:	6800      	ldr	r0, [r0, #0]
 8012d44:	9301      	str	r3, [sp, #4]
 8012d46:	a902      	add	r1, sp, #8
 8012d48:	f002 ff86 	bl	8015c58 <_svfiprintf_r>
 8012d4c:	9b02      	ldr	r3, [sp, #8]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	701a      	strb	r2, [r3, #0]
 8012d52:	b01c      	add	sp, #112	; 0x70
 8012d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d58:	b003      	add	sp, #12
 8012d5a:	4770      	bx	lr
 8012d5c:	20000194 	.word	0x20000194
 8012d60:	ffff0208 	.word	0xffff0208

08012d64 <strcpy>:
 8012d64:	4603      	mov	r3, r0
 8012d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d6a:	f803 2b01 	strb.w	r2, [r3], #1
 8012d6e:	2a00      	cmp	r2, #0
 8012d70:	d1f9      	bne.n	8012d66 <strcpy+0x2>
 8012d72:	4770      	bx	lr

08012d74 <sulp>:
 8012d74:	b570      	push	{r4, r5, r6, lr}
 8012d76:	4604      	mov	r4, r0
 8012d78:	460d      	mov	r5, r1
 8012d7a:	ec45 4b10 	vmov	d0, r4, r5
 8012d7e:	4616      	mov	r6, r2
 8012d80:	f002 fd06 	bl	8015790 <__ulp>
 8012d84:	ec51 0b10 	vmov	r0, r1, d0
 8012d88:	b17e      	cbz	r6, 8012daa <sulp+0x36>
 8012d8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012d8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	dd09      	ble.n	8012daa <sulp+0x36>
 8012d96:	051b      	lsls	r3, r3, #20
 8012d98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012d9c:	2400      	movs	r4, #0
 8012d9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012da2:	4622      	mov	r2, r4
 8012da4:	462b      	mov	r3, r5
 8012da6:	f7ed fc27 	bl	80005f8 <__aeabi_dmul>
 8012daa:	bd70      	pop	{r4, r5, r6, pc}
 8012dac:	0000      	movs	r0, r0
	...

08012db0 <_strtod_l>:
 8012db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db4:	b0a3      	sub	sp, #140	; 0x8c
 8012db6:	461f      	mov	r7, r3
 8012db8:	2300      	movs	r3, #0
 8012dba:	931e      	str	r3, [sp, #120]	; 0x78
 8012dbc:	4ba4      	ldr	r3, [pc, #656]	; (8013050 <_strtod_l+0x2a0>)
 8012dbe:	9219      	str	r2, [sp, #100]	; 0x64
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	9307      	str	r3, [sp, #28]
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	4688      	mov	r8, r1
 8012dca:	f7ed fa01 	bl	80001d0 <strlen>
 8012dce:	f04f 0a00 	mov.w	sl, #0
 8012dd2:	4605      	mov	r5, r0
 8012dd4:	f04f 0b00 	mov.w	fp, #0
 8012dd8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012dde:	781a      	ldrb	r2, [r3, #0]
 8012de0:	2a2b      	cmp	r2, #43	; 0x2b
 8012de2:	d04c      	beq.n	8012e7e <_strtod_l+0xce>
 8012de4:	d839      	bhi.n	8012e5a <_strtod_l+0xaa>
 8012de6:	2a0d      	cmp	r2, #13
 8012de8:	d832      	bhi.n	8012e50 <_strtod_l+0xa0>
 8012dea:	2a08      	cmp	r2, #8
 8012dec:	d832      	bhi.n	8012e54 <_strtod_l+0xa4>
 8012dee:	2a00      	cmp	r2, #0
 8012df0:	d03c      	beq.n	8012e6c <_strtod_l+0xbc>
 8012df2:	2300      	movs	r3, #0
 8012df4:	930e      	str	r3, [sp, #56]	; 0x38
 8012df6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012df8:	7833      	ldrb	r3, [r6, #0]
 8012dfa:	2b30      	cmp	r3, #48	; 0x30
 8012dfc:	f040 80b4 	bne.w	8012f68 <_strtod_l+0x1b8>
 8012e00:	7873      	ldrb	r3, [r6, #1]
 8012e02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012e06:	2b58      	cmp	r3, #88	; 0x58
 8012e08:	d16c      	bne.n	8012ee4 <_strtod_l+0x134>
 8012e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e0c:	9301      	str	r3, [sp, #4]
 8012e0e:	ab1e      	add	r3, sp, #120	; 0x78
 8012e10:	9702      	str	r7, [sp, #8]
 8012e12:	9300      	str	r3, [sp, #0]
 8012e14:	4a8f      	ldr	r2, [pc, #572]	; (8013054 <_strtod_l+0x2a4>)
 8012e16:	ab1f      	add	r3, sp, #124	; 0x7c
 8012e18:	a91d      	add	r1, sp, #116	; 0x74
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f001 fe26 	bl	8014a6c <__gethex>
 8012e20:	f010 0707 	ands.w	r7, r0, #7
 8012e24:	4605      	mov	r5, r0
 8012e26:	d005      	beq.n	8012e34 <_strtod_l+0x84>
 8012e28:	2f06      	cmp	r7, #6
 8012e2a:	d12a      	bne.n	8012e82 <_strtod_l+0xd2>
 8012e2c:	3601      	adds	r6, #1
 8012e2e:	2300      	movs	r3, #0
 8012e30:	961d      	str	r6, [sp, #116]	; 0x74
 8012e32:	930e      	str	r3, [sp, #56]	; 0x38
 8012e34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	f040 8596 	bne.w	8013968 <_strtod_l+0xbb8>
 8012e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e3e:	b1db      	cbz	r3, 8012e78 <_strtod_l+0xc8>
 8012e40:	4652      	mov	r2, sl
 8012e42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012e46:	ec43 2b10 	vmov	d0, r2, r3
 8012e4a:	b023      	add	sp, #140	; 0x8c
 8012e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e50:	2a20      	cmp	r2, #32
 8012e52:	d1ce      	bne.n	8012df2 <_strtod_l+0x42>
 8012e54:	3301      	adds	r3, #1
 8012e56:	931d      	str	r3, [sp, #116]	; 0x74
 8012e58:	e7c0      	b.n	8012ddc <_strtod_l+0x2c>
 8012e5a:	2a2d      	cmp	r2, #45	; 0x2d
 8012e5c:	d1c9      	bne.n	8012df2 <_strtod_l+0x42>
 8012e5e:	2201      	movs	r2, #1
 8012e60:	920e      	str	r2, [sp, #56]	; 0x38
 8012e62:	1c5a      	adds	r2, r3, #1
 8012e64:	921d      	str	r2, [sp, #116]	; 0x74
 8012e66:	785b      	ldrb	r3, [r3, #1]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d1c4      	bne.n	8012df6 <_strtod_l+0x46>
 8012e6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e6e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	f040 8576 	bne.w	8013964 <_strtod_l+0xbb4>
 8012e78:	4652      	mov	r2, sl
 8012e7a:	465b      	mov	r3, fp
 8012e7c:	e7e3      	b.n	8012e46 <_strtod_l+0x96>
 8012e7e:	2200      	movs	r2, #0
 8012e80:	e7ee      	b.n	8012e60 <_strtod_l+0xb0>
 8012e82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012e84:	b13a      	cbz	r2, 8012e96 <_strtod_l+0xe6>
 8012e86:	2135      	movs	r1, #53	; 0x35
 8012e88:	a820      	add	r0, sp, #128	; 0x80
 8012e8a:	f002 fd8c 	bl	80159a6 <__copybits>
 8012e8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012e90:	4620      	mov	r0, r4
 8012e92:	f002 f951 	bl	8015138 <_Bfree>
 8012e96:	3f01      	subs	r7, #1
 8012e98:	2f05      	cmp	r7, #5
 8012e9a:	d807      	bhi.n	8012eac <_strtod_l+0xfc>
 8012e9c:	e8df f007 	tbb	[pc, r7]
 8012ea0:	1d180b0e 	.word	0x1d180b0e
 8012ea4:	030e      	.short	0x030e
 8012ea6:	f04f 0b00 	mov.w	fp, #0
 8012eaa:	46da      	mov	sl, fp
 8012eac:	0728      	lsls	r0, r5, #28
 8012eae:	d5c1      	bpl.n	8012e34 <_strtod_l+0x84>
 8012eb0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012eb4:	e7be      	b.n	8012e34 <_strtod_l+0x84>
 8012eb6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8012eba:	e7f7      	b.n	8012eac <_strtod_l+0xfc>
 8012ebc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012ec0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012ec2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012ec6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012eca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012ece:	e7ed      	b.n	8012eac <_strtod_l+0xfc>
 8012ed0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8013058 <_strtod_l+0x2a8>
 8012ed4:	f04f 0a00 	mov.w	sl, #0
 8012ed8:	e7e8      	b.n	8012eac <_strtod_l+0xfc>
 8012eda:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012ede:	f04f 3aff 	mov.w	sl, #4294967295
 8012ee2:	e7e3      	b.n	8012eac <_strtod_l+0xfc>
 8012ee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012ee6:	1c5a      	adds	r2, r3, #1
 8012ee8:	921d      	str	r2, [sp, #116]	; 0x74
 8012eea:	785b      	ldrb	r3, [r3, #1]
 8012eec:	2b30      	cmp	r3, #48	; 0x30
 8012eee:	d0f9      	beq.n	8012ee4 <_strtod_l+0x134>
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d09f      	beq.n	8012e34 <_strtod_l+0x84>
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	f04f 0900 	mov.w	r9, #0
 8012efa:	9304      	str	r3, [sp, #16]
 8012efc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012efe:	930a      	str	r3, [sp, #40]	; 0x28
 8012f00:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012f04:	464f      	mov	r7, r9
 8012f06:	220a      	movs	r2, #10
 8012f08:	981d      	ldr	r0, [sp, #116]	; 0x74
 8012f0a:	7806      	ldrb	r6, [r0, #0]
 8012f0c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012f10:	b2d9      	uxtb	r1, r3
 8012f12:	2909      	cmp	r1, #9
 8012f14:	d92a      	bls.n	8012f6c <_strtod_l+0x1bc>
 8012f16:	9907      	ldr	r1, [sp, #28]
 8012f18:	462a      	mov	r2, r5
 8012f1a:	f003 f917 	bl	801614c <strncmp>
 8012f1e:	b398      	cbz	r0, 8012f88 <_strtod_l+0x1d8>
 8012f20:	2000      	movs	r0, #0
 8012f22:	4633      	mov	r3, r6
 8012f24:	463d      	mov	r5, r7
 8012f26:	9007      	str	r0, [sp, #28]
 8012f28:	4602      	mov	r2, r0
 8012f2a:	2b65      	cmp	r3, #101	; 0x65
 8012f2c:	d001      	beq.n	8012f32 <_strtod_l+0x182>
 8012f2e:	2b45      	cmp	r3, #69	; 0x45
 8012f30:	d118      	bne.n	8012f64 <_strtod_l+0x1b4>
 8012f32:	b91d      	cbnz	r5, 8012f3c <_strtod_l+0x18c>
 8012f34:	9b04      	ldr	r3, [sp, #16]
 8012f36:	4303      	orrs	r3, r0
 8012f38:	d098      	beq.n	8012e6c <_strtod_l+0xbc>
 8012f3a:	2500      	movs	r5, #0
 8012f3c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012f40:	f108 0301 	add.w	r3, r8, #1
 8012f44:	931d      	str	r3, [sp, #116]	; 0x74
 8012f46:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012f4a:	2b2b      	cmp	r3, #43	; 0x2b
 8012f4c:	d075      	beq.n	801303a <_strtod_l+0x28a>
 8012f4e:	2b2d      	cmp	r3, #45	; 0x2d
 8012f50:	d07b      	beq.n	801304a <_strtod_l+0x29a>
 8012f52:	f04f 0c00 	mov.w	ip, #0
 8012f56:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012f5a:	2909      	cmp	r1, #9
 8012f5c:	f240 8082 	bls.w	8013064 <_strtod_l+0x2b4>
 8012f60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012f64:	2600      	movs	r6, #0
 8012f66:	e09d      	b.n	80130a4 <_strtod_l+0x2f4>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	e7c4      	b.n	8012ef6 <_strtod_l+0x146>
 8012f6c:	2f08      	cmp	r7, #8
 8012f6e:	bfd8      	it	le
 8012f70:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012f72:	f100 0001 	add.w	r0, r0, #1
 8012f76:	bfda      	itte	le
 8012f78:	fb02 3301 	mlale	r3, r2, r1, r3
 8012f7c:	9309      	strle	r3, [sp, #36]	; 0x24
 8012f7e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012f82:	3701      	adds	r7, #1
 8012f84:	901d      	str	r0, [sp, #116]	; 0x74
 8012f86:	e7bf      	b.n	8012f08 <_strtod_l+0x158>
 8012f88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f8a:	195a      	adds	r2, r3, r5
 8012f8c:	921d      	str	r2, [sp, #116]	; 0x74
 8012f8e:	5d5b      	ldrb	r3, [r3, r5]
 8012f90:	2f00      	cmp	r7, #0
 8012f92:	d037      	beq.n	8013004 <_strtod_l+0x254>
 8012f94:	9007      	str	r0, [sp, #28]
 8012f96:	463d      	mov	r5, r7
 8012f98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012f9c:	2a09      	cmp	r2, #9
 8012f9e:	d912      	bls.n	8012fc6 <_strtod_l+0x216>
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	e7c2      	b.n	8012f2a <_strtod_l+0x17a>
 8012fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012fa6:	1c5a      	adds	r2, r3, #1
 8012fa8:	921d      	str	r2, [sp, #116]	; 0x74
 8012faa:	785b      	ldrb	r3, [r3, #1]
 8012fac:	3001      	adds	r0, #1
 8012fae:	2b30      	cmp	r3, #48	; 0x30
 8012fb0:	d0f8      	beq.n	8012fa4 <_strtod_l+0x1f4>
 8012fb2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012fb6:	2a08      	cmp	r2, #8
 8012fb8:	f200 84db 	bhi.w	8013972 <_strtod_l+0xbc2>
 8012fbc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012fbe:	9007      	str	r0, [sp, #28]
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	920a      	str	r2, [sp, #40]	; 0x28
 8012fc4:	4605      	mov	r5, r0
 8012fc6:	3b30      	subs	r3, #48	; 0x30
 8012fc8:	f100 0201 	add.w	r2, r0, #1
 8012fcc:	d014      	beq.n	8012ff8 <_strtod_l+0x248>
 8012fce:	9907      	ldr	r1, [sp, #28]
 8012fd0:	4411      	add	r1, r2
 8012fd2:	9107      	str	r1, [sp, #28]
 8012fd4:	462a      	mov	r2, r5
 8012fd6:	eb00 0e05 	add.w	lr, r0, r5
 8012fda:	210a      	movs	r1, #10
 8012fdc:	4572      	cmp	r2, lr
 8012fde:	d113      	bne.n	8013008 <_strtod_l+0x258>
 8012fe0:	182a      	adds	r2, r5, r0
 8012fe2:	2a08      	cmp	r2, #8
 8012fe4:	f105 0501 	add.w	r5, r5, #1
 8012fe8:	4405      	add	r5, r0
 8012fea:	dc1c      	bgt.n	8013026 <_strtod_l+0x276>
 8012fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012fee:	220a      	movs	r2, #10
 8012ff0:	fb02 3301 	mla	r3, r2, r1, r3
 8012ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012ffa:	1c59      	adds	r1, r3, #1
 8012ffc:	911d      	str	r1, [sp, #116]	; 0x74
 8012ffe:	785b      	ldrb	r3, [r3, #1]
 8013000:	4610      	mov	r0, r2
 8013002:	e7c9      	b.n	8012f98 <_strtod_l+0x1e8>
 8013004:	4638      	mov	r0, r7
 8013006:	e7d2      	b.n	8012fae <_strtod_l+0x1fe>
 8013008:	2a08      	cmp	r2, #8
 801300a:	dc04      	bgt.n	8013016 <_strtod_l+0x266>
 801300c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801300e:	434e      	muls	r6, r1
 8013010:	9609      	str	r6, [sp, #36]	; 0x24
 8013012:	3201      	adds	r2, #1
 8013014:	e7e2      	b.n	8012fdc <_strtod_l+0x22c>
 8013016:	f102 0c01 	add.w	ip, r2, #1
 801301a:	f1bc 0f10 	cmp.w	ip, #16
 801301e:	bfd8      	it	le
 8013020:	fb01 f909 	mulle.w	r9, r1, r9
 8013024:	e7f5      	b.n	8013012 <_strtod_l+0x262>
 8013026:	2d10      	cmp	r5, #16
 8013028:	bfdc      	itt	le
 801302a:	220a      	movle	r2, #10
 801302c:	fb02 3909 	mlale	r9, r2, r9, r3
 8013030:	e7e1      	b.n	8012ff6 <_strtod_l+0x246>
 8013032:	2300      	movs	r3, #0
 8013034:	9307      	str	r3, [sp, #28]
 8013036:	2201      	movs	r2, #1
 8013038:	e77c      	b.n	8012f34 <_strtod_l+0x184>
 801303a:	f04f 0c00 	mov.w	ip, #0
 801303e:	f108 0302 	add.w	r3, r8, #2
 8013042:	931d      	str	r3, [sp, #116]	; 0x74
 8013044:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013048:	e785      	b.n	8012f56 <_strtod_l+0x1a6>
 801304a:	f04f 0c01 	mov.w	ip, #1
 801304e:	e7f6      	b.n	801303e <_strtod_l+0x28e>
 8013050:	08019284 	.word	0x08019284
 8013054:	08018f98 	.word	0x08018f98
 8013058:	7ff00000 	.word	0x7ff00000
 801305c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801305e:	1c59      	adds	r1, r3, #1
 8013060:	911d      	str	r1, [sp, #116]	; 0x74
 8013062:	785b      	ldrb	r3, [r3, #1]
 8013064:	2b30      	cmp	r3, #48	; 0x30
 8013066:	d0f9      	beq.n	801305c <_strtod_l+0x2ac>
 8013068:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801306c:	2908      	cmp	r1, #8
 801306e:	f63f af79 	bhi.w	8012f64 <_strtod_l+0x1b4>
 8013072:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013076:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013078:	9308      	str	r3, [sp, #32]
 801307a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801307c:	1c59      	adds	r1, r3, #1
 801307e:	911d      	str	r1, [sp, #116]	; 0x74
 8013080:	785b      	ldrb	r3, [r3, #1]
 8013082:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8013086:	2e09      	cmp	r6, #9
 8013088:	d937      	bls.n	80130fa <_strtod_l+0x34a>
 801308a:	9e08      	ldr	r6, [sp, #32]
 801308c:	1b89      	subs	r1, r1, r6
 801308e:	2908      	cmp	r1, #8
 8013090:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013094:	dc02      	bgt.n	801309c <_strtod_l+0x2ec>
 8013096:	4576      	cmp	r6, lr
 8013098:	bfa8      	it	ge
 801309a:	4676      	movge	r6, lr
 801309c:	f1bc 0f00 	cmp.w	ip, #0
 80130a0:	d000      	beq.n	80130a4 <_strtod_l+0x2f4>
 80130a2:	4276      	negs	r6, r6
 80130a4:	2d00      	cmp	r5, #0
 80130a6:	d14f      	bne.n	8013148 <_strtod_l+0x398>
 80130a8:	9904      	ldr	r1, [sp, #16]
 80130aa:	4301      	orrs	r1, r0
 80130ac:	f47f aec2 	bne.w	8012e34 <_strtod_l+0x84>
 80130b0:	2a00      	cmp	r2, #0
 80130b2:	f47f aedb 	bne.w	8012e6c <_strtod_l+0xbc>
 80130b6:	2b69      	cmp	r3, #105	; 0x69
 80130b8:	d027      	beq.n	801310a <_strtod_l+0x35a>
 80130ba:	dc24      	bgt.n	8013106 <_strtod_l+0x356>
 80130bc:	2b49      	cmp	r3, #73	; 0x49
 80130be:	d024      	beq.n	801310a <_strtod_l+0x35a>
 80130c0:	2b4e      	cmp	r3, #78	; 0x4e
 80130c2:	f47f aed3 	bne.w	8012e6c <_strtod_l+0xbc>
 80130c6:	499e      	ldr	r1, [pc, #632]	; (8013340 <_strtod_l+0x590>)
 80130c8:	a81d      	add	r0, sp, #116	; 0x74
 80130ca:	f001 ff27 	bl	8014f1c <__match>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	f43f aecc 	beq.w	8012e6c <_strtod_l+0xbc>
 80130d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	2b28      	cmp	r3, #40	; 0x28
 80130da:	d12d      	bne.n	8013138 <_strtod_l+0x388>
 80130dc:	4999      	ldr	r1, [pc, #612]	; (8013344 <_strtod_l+0x594>)
 80130de:	aa20      	add	r2, sp, #128	; 0x80
 80130e0:	a81d      	add	r0, sp, #116	; 0x74
 80130e2:	f001 ff2f 	bl	8014f44 <__hexnan>
 80130e6:	2805      	cmp	r0, #5
 80130e8:	d126      	bne.n	8013138 <_strtod_l+0x388>
 80130ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80130f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80130f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80130f8:	e69c      	b.n	8012e34 <_strtod_l+0x84>
 80130fa:	210a      	movs	r1, #10
 80130fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013100:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013104:	e7b9      	b.n	801307a <_strtod_l+0x2ca>
 8013106:	2b6e      	cmp	r3, #110	; 0x6e
 8013108:	e7db      	b.n	80130c2 <_strtod_l+0x312>
 801310a:	498f      	ldr	r1, [pc, #572]	; (8013348 <_strtod_l+0x598>)
 801310c:	a81d      	add	r0, sp, #116	; 0x74
 801310e:	f001 ff05 	bl	8014f1c <__match>
 8013112:	2800      	cmp	r0, #0
 8013114:	f43f aeaa 	beq.w	8012e6c <_strtod_l+0xbc>
 8013118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801311a:	498c      	ldr	r1, [pc, #560]	; (801334c <_strtod_l+0x59c>)
 801311c:	3b01      	subs	r3, #1
 801311e:	a81d      	add	r0, sp, #116	; 0x74
 8013120:	931d      	str	r3, [sp, #116]	; 0x74
 8013122:	f001 fefb 	bl	8014f1c <__match>
 8013126:	b910      	cbnz	r0, 801312e <_strtod_l+0x37e>
 8013128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801312a:	3301      	adds	r3, #1
 801312c:	931d      	str	r3, [sp, #116]	; 0x74
 801312e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801335c <_strtod_l+0x5ac>
 8013132:	f04f 0a00 	mov.w	sl, #0
 8013136:	e67d      	b.n	8012e34 <_strtod_l+0x84>
 8013138:	4885      	ldr	r0, [pc, #532]	; (8013350 <_strtod_l+0x5a0>)
 801313a:	f002 ffe9 	bl	8016110 <nan>
 801313e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013142:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013146:	e675      	b.n	8012e34 <_strtod_l+0x84>
 8013148:	9b07      	ldr	r3, [sp, #28]
 801314a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801314c:	1af3      	subs	r3, r6, r3
 801314e:	2f00      	cmp	r7, #0
 8013150:	bf08      	it	eq
 8013152:	462f      	moveq	r7, r5
 8013154:	2d10      	cmp	r5, #16
 8013156:	9308      	str	r3, [sp, #32]
 8013158:	46a8      	mov	r8, r5
 801315a:	bfa8      	it	ge
 801315c:	f04f 0810 	movge.w	r8, #16
 8013160:	f7ed f9d0 	bl	8000504 <__aeabi_ui2d>
 8013164:	2d09      	cmp	r5, #9
 8013166:	4682      	mov	sl, r0
 8013168:	468b      	mov	fp, r1
 801316a:	dd13      	ble.n	8013194 <_strtod_l+0x3e4>
 801316c:	4b79      	ldr	r3, [pc, #484]	; (8013354 <_strtod_l+0x5a4>)
 801316e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013172:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013176:	f7ed fa3f 	bl	80005f8 <__aeabi_dmul>
 801317a:	4682      	mov	sl, r0
 801317c:	4648      	mov	r0, r9
 801317e:	468b      	mov	fp, r1
 8013180:	f7ed f9c0 	bl	8000504 <__aeabi_ui2d>
 8013184:	4602      	mov	r2, r0
 8013186:	460b      	mov	r3, r1
 8013188:	4650      	mov	r0, sl
 801318a:	4659      	mov	r1, fp
 801318c:	f7ed f87e 	bl	800028c <__adddf3>
 8013190:	4682      	mov	sl, r0
 8013192:	468b      	mov	fp, r1
 8013194:	2d0f      	cmp	r5, #15
 8013196:	dc38      	bgt.n	801320a <_strtod_l+0x45a>
 8013198:	9b08      	ldr	r3, [sp, #32]
 801319a:	2b00      	cmp	r3, #0
 801319c:	f43f ae4a 	beq.w	8012e34 <_strtod_l+0x84>
 80131a0:	dd24      	ble.n	80131ec <_strtod_l+0x43c>
 80131a2:	2b16      	cmp	r3, #22
 80131a4:	dc0b      	bgt.n	80131be <_strtod_l+0x40e>
 80131a6:	4d6b      	ldr	r5, [pc, #428]	; (8013354 <_strtod_l+0x5a4>)
 80131a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80131ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80131b0:	4652      	mov	r2, sl
 80131b2:	465b      	mov	r3, fp
 80131b4:	f7ed fa20 	bl	80005f8 <__aeabi_dmul>
 80131b8:	4682      	mov	sl, r0
 80131ba:	468b      	mov	fp, r1
 80131bc:	e63a      	b.n	8012e34 <_strtod_l+0x84>
 80131be:	9a08      	ldr	r2, [sp, #32]
 80131c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80131c4:	4293      	cmp	r3, r2
 80131c6:	db20      	blt.n	801320a <_strtod_l+0x45a>
 80131c8:	4c62      	ldr	r4, [pc, #392]	; (8013354 <_strtod_l+0x5a4>)
 80131ca:	f1c5 050f 	rsb	r5, r5, #15
 80131ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80131d2:	4652      	mov	r2, sl
 80131d4:	465b      	mov	r3, fp
 80131d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131da:	f7ed fa0d 	bl	80005f8 <__aeabi_dmul>
 80131de:	9b08      	ldr	r3, [sp, #32]
 80131e0:	1b5d      	subs	r5, r3, r5
 80131e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80131e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80131ea:	e7e3      	b.n	80131b4 <_strtod_l+0x404>
 80131ec:	9b08      	ldr	r3, [sp, #32]
 80131ee:	3316      	adds	r3, #22
 80131f0:	db0b      	blt.n	801320a <_strtod_l+0x45a>
 80131f2:	9b07      	ldr	r3, [sp, #28]
 80131f4:	4a57      	ldr	r2, [pc, #348]	; (8013354 <_strtod_l+0x5a4>)
 80131f6:	1b9e      	subs	r6, r3, r6
 80131f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80131fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013200:	4650      	mov	r0, sl
 8013202:	4659      	mov	r1, fp
 8013204:	f7ed fb22 	bl	800084c <__aeabi_ddiv>
 8013208:	e7d6      	b.n	80131b8 <_strtod_l+0x408>
 801320a:	9b08      	ldr	r3, [sp, #32]
 801320c:	eba5 0808 	sub.w	r8, r5, r8
 8013210:	4498      	add	r8, r3
 8013212:	f1b8 0f00 	cmp.w	r8, #0
 8013216:	dd71      	ble.n	80132fc <_strtod_l+0x54c>
 8013218:	f018 030f 	ands.w	r3, r8, #15
 801321c:	d00a      	beq.n	8013234 <_strtod_l+0x484>
 801321e:	494d      	ldr	r1, [pc, #308]	; (8013354 <_strtod_l+0x5a4>)
 8013220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013224:	4652      	mov	r2, sl
 8013226:	465b      	mov	r3, fp
 8013228:	e9d1 0100 	ldrd	r0, r1, [r1]
 801322c:	f7ed f9e4 	bl	80005f8 <__aeabi_dmul>
 8013230:	4682      	mov	sl, r0
 8013232:	468b      	mov	fp, r1
 8013234:	f038 080f 	bics.w	r8, r8, #15
 8013238:	d04d      	beq.n	80132d6 <_strtod_l+0x526>
 801323a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801323e:	dd22      	ble.n	8013286 <_strtod_l+0x4d6>
 8013240:	2500      	movs	r5, #0
 8013242:	462e      	mov	r6, r5
 8013244:	9509      	str	r5, [sp, #36]	; 0x24
 8013246:	9507      	str	r5, [sp, #28]
 8013248:	2322      	movs	r3, #34	; 0x22
 801324a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801335c <_strtod_l+0x5ac>
 801324e:	6023      	str	r3, [r4, #0]
 8013250:	f04f 0a00 	mov.w	sl, #0
 8013254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013256:	2b00      	cmp	r3, #0
 8013258:	f43f adec 	beq.w	8012e34 <_strtod_l+0x84>
 801325c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801325e:	4620      	mov	r0, r4
 8013260:	f001 ff6a 	bl	8015138 <_Bfree>
 8013264:	9907      	ldr	r1, [sp, #28]
 8013266:	4620      	mov	r0, r4
 8013268:	f001 ff66 	bl	8015138 <_Bfree>
 801326c:	4631      	mov	r1, r6
 801326e:	4620      	mov	r0, r4
 8013270:	f001 ff62 	bl	8015138 <_Bfree>
 8013274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013276:	4620      	mov	r0, r4
 8013278:	f001 ff5e 	bl	8015138 <_Bfree>
 801327c:	4629      	mov	r1, r5
 801327e:	4620      	mov	r0, r4
 8013280:	f001 ff5a 	bl	8015138 <_Bfree>
 8013284:	e5d6      	b.n	8012e34 <_strtod_l+0x84>
 8013286:	2300      	movs	r3, #0
 8013288:	ea4f 1828 	mov.w	r8, r8, asr #4
 801328c:	4650      	mov	r0, sl
 801328e:	4659      	mov	r1, fp
 8013290:	4699      	mov	r9, r3
 8013292:	f1b8 0f01 	cmp.w	r8, #1
 8013296:	dc21      	bgt.n	80132dc <_strtod_l+0x52c>
 8013298:	b10b      	cbz	r3, 801329e <_strtod_l+0x4ee>
 801329a:	4682      	mov	sl, r0
 801329c:	468b      	mov	fp, r1
 801329e:	4b2e      	ldr	r3, [pc, #184]	; (8013358 <_strtod_l+0x5a8>)
 80132a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80132a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80132a8:	4652      	mov	r2, sl
 80132aa:	465b      	mov	r3, fp
 80132ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 80132b0:	f7ed f9a2 	bl	80005f8 <__aeabi_dmul>
 80132b4:	4b29      	ldr	r3, [pc, #164]	; (801335c <_strtod_l+0x5ac>)
 80132b6:	460a      	mov	r2, r1
 80132b8:	400b      	ands	r3, r1
 80132ba:	4929      	ldr	r1, [pc, #164]	; (8013360 <_strtod_l+0x5b0>)
 80132bc:	428b      	cmp	r3, r1
 80132be:	4682      	mov	sl, r0
 80132c0:	d8be      	bhi.n	8013240 <_strtod_l+0x490>
 80132c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80132c6:	428b      	cmp	r3, r1
 80132c8:	bf86      	itte	hi
 80132ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013364 <_strtod_l+0x5b4>
 80132ce:	f04f 3aff 	movhi.w	sl, #4294967295
 80132d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80132d6:	2300      	movs	r3, #0
 80132d8:	9304      	str	r3, [sp, #16]
 80132da:	e081      	b.n	80133e0 <_strtod_l+0x630>
 80132dc:	f018 0f01 	tst.w	r8, #1
 80132e0:	d007      	beq.n	80132f2 <_strtod_l+0x542>
 80132e2:	4b1d      	ldr	r3, [pc, #116]	; (8013358 <_strtod_l+0x5a8>)
 80132e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80132e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ec:	f7ed f984 	bl	80005f8 <__aeabi_dmul>
 80132f0:	2301      	movs	r3, #1
 80132f2:	f109 0901 	add.w	r9, r9, #1
 80132f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80132fa:	e7ca      	b.n	8013292 <_strtod_l+0x4e2>
 80132fc:	d0eb      	beq.n	80132d6 <_strtod_l+0x526>
 80132fe:	f1c8 0800 	rsb	r8, r8, #0
 8013302:	f018 020f 	ands.w	r2, r8, #15
 8013306:	d00a      	beq.n	801331e <_strtod_l+0x56e>
 8013308:	4b12      	ldr	r3, [pc, #72]	; (8013354 <_strtod_l+0x5a4>)
 801330a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801330e:	4650      	mov	r0, sl
 8013310:	4659      	mov	r1, fp
 8013312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013316:	f7ed fa99 	bl	800084c <__aeabi_ddiv>
 801331a:	4682      	mov	sl, r0
 801331c:	468b      	mov	fp, r1
 801331e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013322:	d0d8      	beq.n	80132d6 <_strtod_l+0x526>
 8013324:	f1b8 0f1f 	cmp.w	r8, #31
 8013328:	dd1e      	ble.n	8013368 <_strtod_l+0x5b8>
 801332a:	2500      	movs	r5, #0
 801332c:	462e      	mov	r6, r5
 801332e:	9509      	str	r5, [sp, #36]	; 0x24
 8013330:	9507      	str	r5, [sp, #28]
 8013332:	2322      	movs	r3, #34	; 0x22
 8013334:	f04f 0a00 	mov.w	sl, #0
 8013338:	f04f 0b00 	mov.w	fp, #0
 801333c:	6023      	str	r3, [r4, #0]
 801333e:	e789      	b.n	8013254 <_strtod_l+0x4a4>
 8013340:	08018f71 	.word	0x08018f71
 8013344:	08018fac 	.word	0x08018fac
 8013348:	08018f69 	.word	0x08018f69
 801334c:	080191a0 	.word	0x080191a0
 8013350:	08017795 	.word	0x08017795
 8013354:	08019320 	.word	0x08019320
 8013358:	080192f8 	.word	0x080192f8
 801335c:	7ff00000 	.word	0x7ff00000
 8013360:	7ca00000 	.word	0x7ca00000
 8013364:	7fefffff 	.word	0x7fefffff
 8013368:	f018 0310 	ands.w	r3, r8, #16
 801336c:	bf18      	it	ne
 801336e:	236a      	movne	r3, #106	; 0x6a
 8013370:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8013728 <_strtod_l+0x978>
 8013374:	9304      	str	r3, [sp, #16]
 8013376:	4650      	mov	r0, sl
 8013378:	4659      	mov	r1, fp
 801337a:	2300      	movs	r3, #0
 801337c:	f018 0f01 	tst.w	r8, #1
 8013380:	d004      	beq.n	801338c <_strtod_l+0x5dc>
 8013382:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013386:	f7ed f937 	bl	80005f8 <__aeabi_dmul>
 801338a:	2301      	movs	r3, #1
 801338c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013390:	f109 0908 	add.w	r9, r9, #8
 8013394:	d1f2      	bne.n	801337c <_strtod_l+0x5cc>
 8013396:	b10b      	cbz	r3, 801339c <_strtod_l+0x5ec>
 8013398:	4682      	mov	sl, r0
 801339a:	468b      	mov	fp, r1
 801339c:	9b04      	ldr	r3, [sp, #16]
 801339e:	b1bb      	cbz	r3, 80133d0 <_strtod_l+0x620>
 80133a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80133a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	4659      	mov	r1, fp
 80133ac:	dd10      	ble.n	80133d0 <_strtod_l+0x620>
 80133ae:	2b1f      	cmp	r3, #31
 80133b0:	f340 8128 	ble.w	8013604 <_strtod_l+0x854>
 80133b4:	2b34      	cmp	r3, #52	; 0x34
 80133b6:	bfde      	ittt	le
 80133b8:	3b20      	suble	r3, #32
 80133ba:	f04f 32ff 	movle.w	r2, #4294967295
 80133be:	fa02 f303 	lslle.w	r3, r2, r3
 80133c2:	f04f 0a00 	mov.w	sl, #0
 80133c6:	bfcc      	ite	gt
 80133c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80133cc:	ea03 0b01 	andle.w	fp, r3, r1
 80133d0:	2200      	movs	r2, #0
 80133d2:	2300      	movs	r3, #0
 80133d4:	4650      	mov	r0, sl
 80133d6:	4659      	mov	r1, fp
 80133d8:	f7ed fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80133dc:	2800      	cmp	r0, #0
 80133de:	d1a4      	bne.n	801332a <_strtod_l+0x57a>
 80133e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133e2:	9300      	str	r3, [sp, #0]
 80133e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133e6:	462b      	mov	r3, r5
 80133e8:	463a      	mov	r2, r7
 80133ea:	4620      	mov	r0, r4
 80133ec:	f001 ff10 	bl	8015210 <__s2b>
 80133f0:	9009      	str	r0, [sp, #36]	; 0x24
 80133f2:	2800      	cmp	r0, #0
 80133f4:	f43f af24 	beq.w	8013240 <_strtod_l+0x490>
 80133f8:	9b07      	ldr	r3, [sp, #28]
 80133fa:	1b9e      	subs	r6, r3, r6
 80133fc:	9b08      	ldr	r3, [sp, #32]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	bfb4      	ite	lt
 8013402:	4633      	movlt	r3, r6
 8013404:	2300      	movge	r3, #0
 8013406:	9310      	str	r3, [sp, #64]	; 0x40
 8013408:	9b08      	ldr	r3, [sp, #32]
 801340a:	2500      	movs	r5, #0
 801340c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013410:	9318      	str	r3, [sp, #96]	; 0x60
 8013412:	462e      	mov	r6, r5
 8013414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013416:	4620      	mov	r0, r4
 8013418:	6859      	ldr	r1, [r3, #4]
 801341a:	f001 fe4d 	bl	80150b8 <_Balloc>
 801341e:	9007      	str	r0, [sp, #28]
 8013420:	2800      	cmp	r0, #0
 8013422:	f43f af11 	beq.w	8013248 <_strtod_l+0x498>
 8013426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013428:	691a      	ldr	r2, [r3, #16]
 801342a:	3202      	adds	r2, #2
 801342c:	f103 010c 	add.w	r1, r3, #12
 8013430:	0092      	lsls	r2, r2, #2
 8013432:	300c      	adds	r0, #12
 8013434:	f7fe fff6 	bl	8012424 <memcpy>
 8013438:	ec4b ab10 	vmov	d0, sl, fp
 801343c:	aa20      	add	r2, sp, #128	; 0x80
 801343e:	a91f      	add	r1, sp, #124	; 0x7c
 8013440:	4620      	mov	r0, r4
 8013442:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013446:	f002 fa1f 	bl	8015888 <__d2b>
 801344a:	901e      	str	r0, [sp, #120]	; 0x78
 801344c:	2800      	cmp	r0, #0
 801344e:	f43f aefb 	beq.w	8013248 <_strtod_l+0x498>
 8013452:	2101      	movs	r1, #1
 8013454:	4620      	mov	r0, r4
 8013456:	f001 ff75 	bl	8015344 <__i2b>
 801345a:	4606      	mov	r6, r0
 801345c:	2800      	cmp	r0, #0
 801345e:	f43f aef3 	beq.w	8013248 <_strtod_l+0x498>
 8013462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013464:	9904      	ldr	r1, [sp, #16]
 8013466:	2b00      	cmp	r3, #0
 8013468:	bfab      	itete	ge
 801346a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801346c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801346e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013470:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8013474:	bfac      	ite	ge
 8013476:	eb03 0902 	addge.w	r9, r3, r2
 801347a:	1ad7      	sublt	r7, r2, r3
 801347c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801347e:	eba3 0801 	sub.w	r8, r3, r1
 8013482:	4490      	add	r8, r2
 8013484:	4ba3      	ldr	r3, [pc, #652]	; (8013714 <_strtod_l+0x964>)
 8013486:	f108 38ff 	add.w	r8, r8, #4294967295
 801348a:	4598      	cmp	r8, r3
 801348c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013490:	f280 80cc 	bge.w	801362c <_strtod_l+0x87c>
 8013494:	eba3 0308 	sub.w	r3, r3, r8
 8013498:	2b1f      	cmp	r3, #31
 801349a:	eba2 0203 	sub.w	r2, r2, r3
 801349e:	f04f 0101 	mov.w	r1, #1
 80134a2:	f300 80b6 	bgt.w	8013612 <_strtod_l+0x862>
 80134a6:	fa01 f303 	lsl.w	r3, r1, r3
 80134aa:	9311      	str	r3, [sp, #68]	; 0x44
 80134ac:	2300      	movs	r3, #0
 80134ae:	930c      	str	r3, [sp, #48]	; 0x30
 80134b0:	eb09 0802 	add.w	r8, r9, r2
 80134b4:	9b04      	ldr	r3, [sp, #16]
 80134b6:	45c1      	cmp	r9, r8
 80134b8:	4417      	add	r7, r2
 80134ba:	441f      	add	r7, r3
 80134bc:	464b      	mov	r3, r9
 80134be:	bfa8      	it	ge
 80134c0:	4643      	movge	r3, r8
 80134c2:	42bb      	cmp	r3, r7
 80134c4:	bfa8      	it	ge
 80134c6:	463b      	movge	r3, r7
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	bfc2      	ittt	gt
 80134cc:	eba8 0803 	subgt.w	r8, r8, r3
 80134d0:	1aff      	subgt	r7, r7, r3
 80134d2:	eba9 0903 	subgt.w	r9, r9, r3
 80134d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80134d8:	2b00      	cmp	r3, #0
 80134da:	dd17      	ble.n	801350c <_strtod_l+0x75c>
 80134dc:	4631      	mov	r1, r6
 80134de:	461a      	mov	r2, r3
 80134e0:	4620      	mov	r0, r4
 80134e2:	f001 ffeb 	bl	80154bc <__pow5mult>
 80134e6:	4606      	mov	r6, r0
 80134e8:	2800      	cmp	r0, #0
 80134ea:	f43f aead 	beq.w	8013248 <_strtod_l+0x498>
 80134ee:	4601      	mov	r1, r0
 80134f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80134f2:	4620      	mov	r0, r4
 80134f4:	f001 ff3c 	bl	8015370 <__multiply>
 80134f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80134fa:	2800      	cmp	r0, #0
 80134fc:	f43f aea4 	beq.w	8013248 <_strtod_l+0x498>
 8013500:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013502:	4620      	mov	r0, r4
 8013504:	f001 fe18 	bl	8015138 <_Bfree>
 8013508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801350a:	931e      	str	r3, [sp, #120]	; 0x78
 801350c:	f1b8 0f00 	cmp.w	r8, #0
 8013510:	f300 8091 	bgt.w	8013636 <_strtod_l+0x886>
 8013514:	9b08      	ldr	r3, [sp, #32]
 8013516:	2b00      	cmp	r3, #0
 8013518:	dd08      	ble.n	801352c <_strtod_l+0x77c>
 801351a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801351c:	9907      	ldr	r1, [sp, #28]
 801351e:	4620      	mov	r0, r4
 8013520:	f001 ffcc 	bl	80154bc <__pow5mult>
 8013524:	9007      	str	r0, [sp, #28]
 8013526:	2800      	cmp	r0, #0
 8013528:	f43f ae8e 	beq.w	8013248 <_strtod_l+0x498>
 801352c:	2f00      	cmp	r7, #0
 801352e:	dd08      	ble.n	8013542 <_strtod_l+0x792>
 8013530:	9907      	ldr	r1, [sp, #28]
 8013532:	463a      	mov	r2, r7
 8013534:	4620      	mov	r0, r4
 8013536:	f002 f81b 	bl	8015570 <__lshift>
 801353a:	9007      	str	r0, [sp, #28]
 801353c:	2800      	cmp	r0, #0
 801353e:	f43f ae83 	beq.w	8013248 <_strtod_l+0x498>
 8013542:	f1b9 0f00 	cmp.w	r9, #0
 8013546:	dd08      	ble.n	801355a <_strtod_l+0x7aa>
 8013548:	4631      	mov	r1, r6
 801354a:	464a      	mov	r2, r9
 801354c:	4620      	mov	r0, r4
 801354e:	f002 f80f 	bl	8015570 <__lshift>
 8013552:	4606      	mov	r6, r0
 8013554:	2800      	cmp	r0, #0
 8013556:	f43f ae77 	beq.w	8013248 <_strtod_l+0x498>
 801355a:	9a07      	ldr	r2, [sp, #28]
 801355c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801355e:	4620      	mov	r0, r4
 8013560:	f002 f88e 	bl	8015680 <__mdiff>
 8013564:	4605      	mov	r5, r0
 8013566:	2800      	cmp	r0, #0
 8013568:	f43f ae6e 	beq.w	8013248 <_strtod_l+0x498>
 801356c:	68c3      	ldr	r3, [r0, #12]
 801356e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013570:	2300      	movs	r3, #0
 8013572:	60c3      	str	r3, [r0, #12]
 8013574:	4631      	mov	r1, r6
 8013576:	f002 f867 	bl	8015648 <__mcmp>
 801357a:	2800      	cmp	r0, #0
 801357c:	da65      	bge.n	801364a <_strtod_l+0x89a>
 801357e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013580:	ea53 030a 	orrs.w	r3, r3, sl
 8013584:	f040 8087 	bne.w	8013696 <_strtod_l+0x8e6>
 8013588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801358c:	2b00      	cmp	r3, #0
 801358e:	f040 8082 	bne.w	8013696 <_strtod_l+0x8e6>
 8013592:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013596:	0d1b      	lsrs	r3, r3, #20
 8013598:	051b      	lsls	r3, r3, #20
 801359a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801359e:	d97a      	bls.n	8013696 <_strtod_l+0x8e6>
 80135a0:	696b      	ldr	r3, [r5, #20]
 80135a2:	b913      	cbnz	r3, 80135aa <_strtod_l+0x7fa>
 80135a4:	692b      	ldr	r3, [r5, #16]
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	dd75      	ble.n	8013696 <_strtod_l+0x8e6>
 80135aa:	4629      	mov	r1, r5
 80135ac:	2201      	movs	r2, #1
 80135ae:	4620      	mov	r0, r4
 80135b0:	f001 ffde 	bl	8015570 <__lshift>
 80135b4:	4631      	mov	r1, r6
 80135b6:	4605      	mov	r5, r0
 80135b8:	f002 f846 	bl	8015648 <__mcmp>
 80135bc:	2800      	cmp	r0, #0
 80135be:	dd6a      	ble.n	8013696 <_strtod_l+0x8e6>
 80135c0:	9904      	ldr	r1, [sp, #16]
 80135c2:	4a55      	ldr	r2, [pc, #340]	; (8013718 <_strtod_l+0x968>)
 80135c4:	465b      	mov	r3, fp
 80135c6:	2900      	cmp	r1, #0
 80135c8:	f000 8085 	beq.w	80136d6 <_strtod_l+0x926>
 80135cc:	ea02 010b 	and.w	r1, r2, fp
 80135d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80135d4:	dc7f      	bgt.n	80136d6 <_strtod_l+0x926>
 80135d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80135da:	f77f aeaa 	ble.w	8013332 <_strtod_l+0x582>
 80135de:	4a4f      	ldr	r2, [pc, #316]	; (801371c <_strtod_l+0x96c>)
 80135e0:	2300      	movs	r3, #0
 80135e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80135e6:	4650      	mov	r0, sl
 80135e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80135ec:	4659      	mov	r1, fp
 80135ee:	f7ed f803 	bl	80005f8 <__aeabi_dmul>
 80135f2:	460b      	mov	r3, r1
 80135f4:	4303      	orrs	r3, r0
 80135f6:	bf08      	it	eq
 80135f8:	2322      	moveq	r3, #34	; 0x22
 80135fa:	4682      	mov	sl, r0
 80135fc:	468b      	mov	fp, r1
 80135fe:	bf08      	it	eq
 8013600:	6023      	streq	r3, [r4, #0]
 8013602:	e62b      	b.n	801325c <_strtod_l+0x4ac>
 8013604:	f04f 32ff 	mov.w	r2, #4294967295
 8013608:	fa02 f303 	lsl.w	r3, r2, r3
 801360c:	ea03 0a0a 	and.w	sl, r3, sl
 8013610:	e6de      	b.n	80133d0 <_strtod_l+0x620>
 8013612:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013616:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801361a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801361e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013622:	fa01 f308 	lsl.w	r3, r1, r8
 8013626:	930c      	str	r3, [sp, #48]	; 0x30
 8013628:	9111      	str	r1, [sp, #68]	; 0x44
 801362a:	e741      	b.n	80134b0 <_strtod_l+0x700>
 801362c:	2300      	movs	r3, #0
 801362e:	930c      	str	r3, [sp, #48]	; 0x30
 8013630:	2301      	movs	r3, #1
 8013632:	9311      	str	r3, [sp, #68]	; 0x44
 8013634:	e73c      	b.n	80134b0 <_strtod_l+0x700>
 8013636:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013638:	4642      	mov	r2, r8
 801363a:	4620      	mov	r0, r4
 801363c:	f001 ff98 	bl	8015570 <__lshift>
 8013640:	901e      	str	r0, [sp, #120]	; 0x78
 8013642:	2800      	cmp	r0, #0
 8013644:	f47f af66 	bne.w	8013514 <_strtod_l+0x764>
 8013648:	e5fe      	b.n	8013248 <_strtod_l+0x498>
 801364a:	465f      	mov	r7, fp
 801364c:	d16e      	bne.n	801372c <_strtod_l+0x97c>
 801364e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013654:	b342      	cbz	r2, 80136a8 <_strtod_l+0x8f8>
 8013656:	4a32      	ldr	r2, [pc, #200]	; (8013720 <_strtod_l+0x970>)
 8013658:	4293      	cmp	r3, r2
 801365a:	d128      	bne.n	80136ae <_strtod_l+0x8fe>
 801365c:	9b04      	ldr	r3, [sp, #16]
 801365e:	4650      	mov	r0, sl
 8013660:	b1eb      	cbz	r3, 801369e <_strtod_l+0x8ee>
 8013662:	4a2d      	ldr	r2, [pc, #180]	; (8013718 <_strtod_l+0x968>)
 8013664:	403a      	ands	r2, r7
 8013666:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801366a:	f04f 31ff 	mov.w	r1, #4294967295
 801366e:	d819      	bhi.n	80136a4 <_strtod_l+0x8f4>
 8013670:	0d12      	lsrs	r2, r2, #20
 8013672:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013676:	fa01 f303 	lsl.w	r3, r1, r3
 801367a:	4298      	cmp	r0, r3
 801367c:	d117      	bne.n	80136ae <_strtod_l+0x8fe>
 801367e:	4b29      	ldr	r3, [pc, #164]	; (8013724 <_strtod_l+0x974>)
 8013680:	429f      	cmp	r7, r3
 8013682:	d102      	bne.n	801368a <_strtod_l+0x8da>
 8013684:	3001      	adds	r0, #1
 8013686:	f43f addf 	beq.w	8013248 <_strtod_l+0x498>
 801368a:	4b23      	ldr	r3, [pc, #140]	; (8013718 <_strtod_l+0x968>)
 801368c:	403b      	ands	r3, r7
 801368e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013692:	f04f 0a00 	mov.w	sl, #0
 8013696:	9b04      	ldr	r3, [sp, #16]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d1a0      	bne.n	80135de <_strtod_l+0x82e>
 801369c:	e5de      	b.n	801325c <_strtod_l+0x4ac>
 801369e:	f04f 33ff 	mov.w	r3, #4294967295
 80136a2:	e7ea      	b.n	801367a <_strtod_l+0x8ca>
 80136a4:	460b      	mov	r3, r1
 80136a6:	e7e8      	b.n	801367a <_strtod_l+0x8ca>
 80136a8:	ea53 030a 	orrs.w	r3, r3, sl
 80136ac:	d088      	beq.n	80135c0 <_strtod_l+0x810>
 80136ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136b0:	b1db      	cbz	r3, 80136ea <_strtod_l+0x93a>
 80136b2:	423b      	tst	r3, r7
 80136b4:	d0ef      	beq.n	8013696 <_strtod_l+0x8e6>
 80136b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136b8:	9a04      	ldr	r2, [sp, #16]
 80136ba:	4650      	mov	r0, sl
 80136bc:	4659      	mov	r1, fp
 80136be:	b1c3      	cbz	r3, 80136f2 <_strtod_l+0x942>
 80136c0:	f7ff fb58 	bl	8012d74 <sulp>
 80136c4:	4602      	mov	r2, r0
 80136c6:	460b      	mov	r3, r1
 80136c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80136cc:	f7ec fdde 	bl	800028c <__adddf3>
 80136d0:	4682      	mov	sl, r0
 80136d2:	468b      	mov	fp, r1
 80136d4:	e7df      	b.n	8013696 <_strtod_l+0x8e6>
 80136d6:	4013      	ands	r3, r2
 80136d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80136dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80136e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80136e4:	f04f 3aff 	mov.w	sl, #4294967295
 80136e8:	e7d5      	b.n	8013696 <_strtod_l+0x8e6>
 80136ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136ec:	ea13 0f0a 	tst.w	r3, sl
 80136f0:	e7e0      	b.n	80136b4 <_strtod_l+0x904>
 80136f2:	f7ff fb3f 	bl	8012d74 <sulp>
 80136f6:	4602      	mov	r2, r0
 80136f8:	460b      	mov	r3, r1
 80136fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80136fe:	f7ec fdc3 	bl	8000288 <__aeabi_dsub>
 8013702:	2200      	movs	r2, #0
 8013704:	2300      	movs	r3, #0
 8013706:	4682      	mov	sl, r0
 8013708:	468b      	mov	fp, r1
 801370a:	f7ed f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 801370e:	2800      	cmp	r0, #0
 8013710:	d0c1      	beq.n	8013696 <_strtod_l+0x8e6>
 8013712:	e60e      	b.n	8013332 <_strtod_l+0x582>
 8013714:	fffffc02 	.word	0xfffffc02
 8013718:	7ff00000 	.word	0x7ff00000
 801371c:	39500000 	.word	0x39500000
 8013720:	000fffff 	.word	0x000fffff
 8013724:	7fefffff 	.word	0x7fefffff
 8013728:	08018fc0 	.word	0x08018fc0
 801372c:	4631      	mov	r1, r6
 801372e:	4628      	mov	r0, r5
 8013730:	f002 f906 	bl	8015940 <__ratio>
 8013734:	ec59 8b10 	vmov	r8, r9, d0
 8013738:	ee10 0a10 	vmov	r0, s0
 801373c:	2200      	movs	r2, #0
 801373e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013742:	4649      	mov	r1, r9
 8013744:	f7ed f9d4 	bl	8000af0 <__aeabi_dcmple>
 8013748:	2800      	cmp	r0, #0
 801374a:	d07c      	beq.n	8013846 <_strtod_l+0xa96>
 801374c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801374e:	2b00      	cmp	r3, #0
 8013750:	d04c      	beq.n	80137ec <_strtod_l+0xa3c>
 8013752:	4b95      	ldr	r3, [pc, #596]	; (80139a8 <_strtod_l+0xbf8>)
 8013754:	2200      	movs	r2, #0
 8013756:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801375a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80139a8 <_strtod_l+0xbf8>
 801375e:	f04f 0800 	mov.w	r8, #0
 8013762:	4b92      	ldr	r3, [pc, #584]	; (80139ac <_strtod_l+0xbfc>)
 8013764:	403b      	ands	r3, r7
 8013766:	9311      	str	r3, [sp, #68]	; 0x44
 8013768:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801376a:	4b91      	ldr	r3, [pc, #580]	; (80139b0 <_strtod_l+0xc00>)
 801376c:	429a      	cmp	r2, r3
 801376e:	f040 80b2 	bne.w	80138d6 <_strtod_l+0xb26>
 8013772:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801377a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801377e:	ec4b ab10 	vmov	d0, sl, fp
 8013782:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8013786:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801378a:	f002 f801 	bl	8015790 <__ulp>
 801378e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013792:	ec53 2b10 	vmov	r2, r3, d0
 8013796:	f7ec ff2f 	bl	80005f8 <__aeabi_dmul>
 801379a:	4652      	mov	r2, sl
 801379c:	465b      	mov	r3, fp
 801379e:	f7ec fd75 	bl	800028c <__adddf3>
 80137a2:	460b      	mov	r3, r1
 80137a4:	4981      	ldr	r1, [pc, #516]	; (80139ac <_strtod_l+0xbfc>)
 80137a6:	4a83      	ldr	r2, [pc, #524]	; (80139b4 <_strtod_l+0xc04>)
 80137a8:	4019      	ands	r1, r3
 80137aa:	4291      	cmp	r1, r2
 80137ac:	4682      	mov	sl, r0
 80137ae:	d95e      	bls.n	801386e <_strtod_l+0xabe>
 80137b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d103      	bne.n	80137c2 <_strtod_l+0xa12>
 80137ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137bc:	3301      	adds	r3, #1
 80137be:	f43f ad43 	beq.w	8013248 <_strtod_l+0x498>
 80137c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80139c0 <_strtod_l+0xc10>
 80137c6:	f04f 3aff 	mov.w	sl, #4294967295
 80137ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 80137cc:	4620      	mov	r0, r4
 80137ce:	f001 fcb3 	bl	8015138 <_Bfree>
 80137d2:	9907      	ldr	r1, [sp, #28]
 80137d4:	4620      	mov	r0, r4
 80137d6:	f001 fcaf 	bl	8015138 <_Bfree>
 80137da:	4631      	mov	r1, r6
 80137dc:	4620      	mov	r0, r4
 80137de:	f001 fcab 	bl	8015138 <_Bfree>
 80137e2:	4629      	mov	r1, r5
 80137e4:	4620      	mov	r0, r4
 80137e6:	f001 fca7 	bl	8015138 <_Bfree>
 80137ea:	e613      	b.n	8013414 <_strtod_l+0x664>
 80137ec:	f1ba 0f00 	cmp.w	sl, #0
 80137f0:	d11b      	bne.n	801382a <_strtod_l+0xa7a>
 80137f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137f6:	b9f3      	cbnz	r3, 8013836 <_strtod_l+0xa86>
 80137f8:	4b6b      	ldr	r3, [pc, #428]	; (80139a8 <_strtod_l+0xbf8>)
 80137fa:	2200      	movs	r2, #0
 80137fc:	4640      	mov	r0, r8
 80137fe:	4649      	mov	r1, r9
 8013800:	f7ed f96c 	bl	8000adc <__aeabi_dcmplt>
 8013804:	b9d0      	cbnz	r0, 801383c <_strtod_l+0xa8c>
 8013806:	4640      	mov	r0, r8
 8013808:	4649      	mov	r1, r9
 801380a:	4b6b      	ldr	r3, [pc, #428]	; (80139b8 <_strtod_l+0xc08>)
 801380c:	2200      	movs	r2, #0
 801380e:	f7ec fef3 	bl	80005f8 <__aeabi_dmul>
 8013812:	4680      	mov	r8, r0
 8013814:	4689      	mov	r9, r1
 8013816:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801381a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801381e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013820:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8013824:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013828:	e79b      	b.n	8013762 <_strtod_l+0x9b2>
 801382a:	f1ba 0f01 	cmp.w	sl, #1
 801382e:	d102      	bne.n	8013836 <_strtod_l+0xa86>
 8013830:	2f00      	cmp	r7, #0
 8013832:	f43f ad7e 	beq.w	8013332 <_strtod_l+0x582>
 8013836:	4b61      	ldr	r3, [pc, #388]	; (80139bc <_strtod_l+0xc0c>)
 8013838:	2200      	movs	r2, #0
 801383a:	e78c      	b.n	8013756 <_strtod_l+0x9a6>
 801383c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80139b8 <_strtod_l+0xc08>
 8013840:	f04f 0800 	mov.w	r8, #0
 8013844:	e7e7      	b.n	8013816 <_strtod_l+0xa66>
 8013846:	4b5c      	ldr	r3, [pc, #368]	; (80139b8 <_strtod_l+0xc08>)
 8013848:	4640      	mov	r0, r8
 801384a:	4649      	mov	r1, r9
 801384c:	2200      	movs	r2, #0
 801384e:	f7ec fed3 	bl	80005f8 <__aeabi_dmul>
 8013852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013854:	4680      	mov	r8, r0
 8013856:	4689      	mov	r9, r1
 8013858:	b933      	cbnz	r3, 8013868 <_strtod_l+0xab8>
 801385a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801385e:	9012      	str	r0, [sp, #72]	; 0x48
 8013860:	9313      	str	r3, [sp, #76]	; 0x4c
 8013862:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013866:	e7dd      	b.n	8013824 <_strtod_l+0xa74>
 8013868:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801386c:	e7f9      	b.n	8013862 <_strtod_l+0xab2>
 801386e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013872:	9b04      	ldr	r3, [sp, #16]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d1a8      	bne.n	80137ca <_strtod_l+0xa1a>
 8013878:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801387c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801387e:	0d1b      	lsrs	r3, r3, #20
 8013880:	051b      	lsls	r3, r3, #20
 8013882:	429a      	cmp	r2, r3
 8013884:	d1a1      	bne.n	80137ca <_strtod_l+0xa1a>
 8013886:	4640      	mov	r0, r8
 8013888:	4649      	mov	r1, r9
 801388a:	f7ed f9fd 	bl	8000c88 <__aeabi_d2lz>
 801388e:	f7ec fe85 	bl	800059c <__aeabi_l2d>
 8013892:	4602      	mov	r2, r0
 8013894:	460b      	mov	r3, r1
 8013896:	4640      	mov	r0, r8
 8013898:	4649      	mov	r1, r9
 801389a:	f7ec fcf5 	bl	8000288 <__aeabi_dsub>
 801389e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80138a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80138a4:	ea43 030a 	orr.w	r3, r3, sl
 80138a8:	4313      	orrs	r3, r2
 80138aa:	4680      	mov	r8, r0
 80138ac:	4689      	mov	r9, r1
 80138ae:	d053      	beq.n	8013958 <_strtod_l+0xba8>
 80138b0:	a335      	add	r3, pc, #212	; (adr r3, 8013988 <_strtod_l+0xbd8>)
 80138b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138b6:	f7ed f911 	bl	8000adc <__aeabi_dcmplt>
 80138ba:	2800      	cmp	r0, #0
 80138bc:	f47f acce 	bne.w	801325c <_strtod_l+0x4ac>
 80138c0:	a333      	add	r3, pc, #204	; (adr r3, 8013990 <_strtod_l+0xbe0>)
 80138c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c6:	4640      	mov	r0, r8
 80138c8:	4649      	mov	r1, r9
 80138ca:	f7ed f925 	bl	8000b18 <__aeabi_dcmpgt>
 80138ce:	2800      	cmp	r0, #0
 80138d0:	f43f af7b 	beq.w	80137ca <_strtod_l+0xa1a>
 80138d4:	e4c2      	b.n	801325c <_strtod_l+0x4ac>
 80138d6:	9b04      	ldr	r3, [sp, #16]
 80138d8:	b333      	cbz	r3, 8013928 <_strtod_l+0xb78>
 80138da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80138e0:	d822      	bhi.n	8013928 <_strtod_l+0xb78>
 80138e2:	a32d      	add	r3, pc, #180	; (adr r3, 8013998 <_strtod_l+0xbe8>)
 80138e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e8:	4640      	mov	r0, r8
 80138ea:	4649      	mov	r1, r9
 80138ec:	f7ed f900 	bl	8000af0 <__aeabi_dcmple>
 80138f0:	b1a0      	cbz	r0, 801391c <_strtod_l+0xb6c>
 80138f2:	4649      	mov	r1, r9
 80138f4:	4640      	mov	r0, r8
 80138f6:	f7ed f957 	bl	8000ba8 <__aeabi_d2uiz>
 80138fa:	2801      	cmp	r0, #1
 80138fc:	bf38      	it	cc
 80138fe:	2001      	movcc	r0, #1
 8013900:	f7ec fe00 	bl	8000504 <__aeabi_ui2d>
 8013904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013906:	4680      	mov	r8, r0
 8013908:	4689      	mov	r9, r1
 801390a:	bb13      	cbnz	r3, 8013952 <_strtod_l+0xba2>
 801390c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013910:	9014      	str	r0, [sp, #80]	; 0x50
 8013912:	9315      	str	r3, [sp, #84]	; 0x54
 8013914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013918:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801391c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801391e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013920:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013924:	1a9b      	subs	r3, r3, r2
 8013926:	930d      	str	r3, [sp, #52]	; 0x34
 8013928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801392c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013934:	f001 ff2c 	bl	8015790 <__ulp>
 8013938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801393c:	ec53 2b10 	vmov	r2, r3, d0
 8013940:	f7ec fe5a 	bl	80005f8 <__aeabi_dmul>
 8013944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013948:	f7ec fca0 	bl	800028c <__adddf3>
 801394c:	4682      	mov	sl, r0
 801394e:	468b      	mov	fp, r1
 8013950:	e78f      	b.n	8013872 <_strtod_l+0xac2>
 8013952:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8013956:	e7dd      	b.n	8013914 <_strtod_l+0xb64>
 8013958:	a311      	add	r3, pc, #68	; (adr r3, 80139a0 <_strtod_l+0xbf0>)
 801395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395e:	f7ed f8bd 	bl	8000adc <__aeabi_dcmplt>
 8013962:	e7b4      	b.n	80138ce <_strtod_l+0xb1e>
 8013964:	2300      	movs	r3, #0
 8013966:	930e      	str	r3, [sp, #56]	; 0x38
 8013968:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801396a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801396c:	6013      	str	r3, [r2, #0]
 801396e:	f7ff ba65 	b.w	8012e3c <_strtod_l+0x8c>
 8013972:	2b65      	cmp	r3, #101	; 0x65
 8013974:	f43f ab5d 	beq.w	8013032 <_strtod_l+0x282>
 8013978:	2b45      	cmp	r3, #69	; 0x45
 801397a:	f43f ab5a 	beq.w	8013032 <_strtod_l+0x282>
 801397e:	2201      	movs	r2, #1
 8013980:	f7ff bb92 	b.w	80130a8 <_strtod_l+0x2f8>
 8013984:	f3af 8000 	nop.w
 8013988:	94a03595 	.word	0x94a03595
 801398c:	3fdfffff 	.word	0x3fdfffff
 8013990:	35afe535 	.word	0x35afe535
 8013994:	3fe00000 	.word	0x3fe00000
 8013998:	ffc00000 	.word	0xffc00000
 801399c:	41dfffff 	.word	0x41dfffff
 80139a0:	94a03595 	.word	0x94a03595
 80139a4:	3fcfffff 	.word	0x3fcfffff
 80139a8:	3ff00000 	.word	0x3ff00000
 80139ac:	7ff00000 	.word	0x7ff00000
 80139b0:	7fe00000 	.word	0x7fe00000
 80139b4:	7c9fffff 	.word	0x7c9fffff
 80139b8:	3fe00000 	.word	0x3fe00000
 80139bc:	bff00000 	.word	0xbff00000
 80139c0:	7fefffff 	.word	0x7fefffff

080139c4 <strtof>:
 80139c4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80139c8:	4e26      	ldr	r6, [pc, #152]	; (8013a64 <strtof+0xa0>)
 80139ca:	4b27      	ldr	r3, [pc, #156]	; (8013a68 <strtof+0xa4>)
 80139cc:	460a      	mov	r2, r1
 80139ce:	ed2d 8b02 	vpush	{d8}
 80139d2:	4601      	mov	r1, r0
 80139d4:	6830      	ldr	r0, [r6, #0]
 80139d6:	f7ff f9eb 	bl	8012db0 <_strtod_l>
 80139da:	ec55 4b10 	vmov	r4, r5, d0
 80139de:	ee10 2a10 	vmov	r2, s0
 80139e2:	ee10 0a10 	vmov	r0, s0
 80139e6:	462b      	mov	r3, r5
 80139e8:	4629      	mov	r1, r5
 80139ea:	f7ed f89f 	bl	8000b2c <__aeabi_dcmpun>
 80139ee:	b190      	cbz	r0, 8013a16 <strtof+0x52>
 80139f0:	2d00      	cmp	r5, #0
 80139f2:	481e      	ldr	r0, [pc, #120]	; (8013a6c <strtof+0xa8>)
 80139f4:	da09      	bge.n	8013a0a <strtof+0x46>
 80139f6:	f002 fba3 	bl	8016140 <nanf>
 80139fa:	eeb1 8a40 	vneg.f32	s16, s0
 80139fe:	eeb0 0a48 	vmov.f32	s0, s16
 8013a02:	ecbd 8b02 	vpop	{d8}
 8013a06:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8013a0a:	ecbd 8b02 	vpop	{d8}
 8013a0e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8013a12:	f002 bb95 	b.w	8016140 <nanf>
 8013a16:	4620      	mov	r0, r4
 8013a18:	4629      	mov	r1, r5
 8013a1a:	f7ed f8e5 	bl	8000be8 <__aeabi_d2f>
 8013a1e:	ee08 0a10 	vmov	s16, r0
 8013a22:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013a70 <strtof+0xac>
 8013a26:	eeb0 7ac8 	vabs.f32	s14, s16
 8013a2a:	eeb4 7a67 	vcmp.f32	s14, s15
 8013a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a32:	dde4      	ble.n	80139fe <strtof+0x3a>
 8013a34:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8013a38:	4b0e      	ldr	r3, [pc, #56]	; (8013a74 <strtof+0xb0>)
 8013a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a3e:	4620      	mov	r0, r4
 8013a40:	4649      	mov	r1, r9
 8013a42:	f7ed f873 	bl	8000b2c <__aeabi_dcmpun>
 8013a46:	b940      	cbnz	r0, 8013a5a <strtof+0x96>
 8013a48:	4b0a      	ldr	r3, [pc, #40]	; (8013a74 <strtof+0xb0>)
 8013a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a4e:	4620      	mov	r0, r4
 8013a50:	4649      	mov	r1, r9
 8013a52:	f7ed f84d 	bl	8000af0 <__aeabi_dcmple>
 8013a56:	2800      	cmp	r0, #0
 8013a58:	d0d1      	beq.n	80139fe <strtof+0x3a>
 8013a5a:	6833      	ldr	r3, [r6, #0]
 8013a5c:	2222      	movs	r2, #34	; 0x22
 8013a5e:	601a      	str	r2, [r3, #0]
 8013a60:	e7cd      	b.n	80139fe <strtof+0x3a>
 8013a62:	bf00      	nop
 8013a64:	20000194 	.word	0x20000194
 8013a68:	200001fc 	.word	0x200001fc
 8013a6c:	08017795 	.word	0x08017795
 8013a70:	7f7fffff 	.word	0x7f7fffff
 8013a74:	7fefffff 	.word	0x7fefffff

08013a78 <strtok>:
 8013a78:	4b16      	ldr	r3, [pc, #88]	; (8013ad4 <strtok+0x5c>)
 8013a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a7c:	681e      	ldr	r6, [r3, #0]
 8013a7e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013a80:	4605      	mov	r5, r0
 8013a82:	b9fc      	cbnz	r4, 8013ac4 <strtok+0x4c>
 8013a84:	2050      	movs	r0, #80	; 0x50
 8013a86:	9101      	str	r1, [sp, #4]
 8013a88:	f001 fafc 	bl	8015084 <malloc>
 8013a8c:	9901      	ldr	r1, [sp, #4]
 8013a8e:	65b0      	str	r0, [r6, #88]	; 0x58
 8013a90:	4602      	mov	r2, r0
 8013a92:	b920      	cbnz	r0, 8013a9e <strtok+0x26>
 8013a94:	4b10      	ldr	r3, [pc, #64]	; (8013ad8 <strtok+0x60>)
 8013a96:	4811      	ldr	r0, [pc, #68]	; (8013adc <strtok+0x64>)
 8013a98:	2157      	movs	r1, #87	; 0x57
 8013a9a:	f000 f8d7 	bl	8013c4c <__assert_func>
 8013a9e:	e9c0 4400 	strd	r4, r4, [r0]
 8013aa2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013aa6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013aaa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013aae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013ab2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013ab6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8013aba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013abe:	6184      	str	r4, [r0, #24]
 8013ac0:	7704      	strb	r4, [r0, #28]
 8013ac2:	6244      	str	r4, [r0, #36]	; 0x24
 8013ac4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	4628      	mov	r0, r5
 8013aca:	b002      	add	sp, #8
 8013acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ad0:	f000 b806 	b.w	8013ae0 <__strtok_r>
 8013ad4:	20000194 	.word	0x20000194
 8013ad8:	08018fe8 	.word	0x08018fe8
 8013adc:	08018fff 	.word	0x08018fff

08013ae0 <__strtok_r>:
 8013ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ae2:	b908      	cbnz	r0, 8013ae8 <__strtok_r+0x8>
 8013ae4:	6810      	ldr	r0, [r2, #0]
 8013ae6:	b188      	cbz	r0, 8013b0c <__strtok_r+0x2c>
 8013ae8:	4604      	mov	r4, r0
 8013aea:	4620      	mov	r0, r4
 8013aec:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013af0:	460f      	mov	r7, r1
 8013af2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013af6:	b91e      	cbnz	r6, 8013b00 <__strtok_r+0x20>
 8013af8:	b965      	cbnz	r5, 8013b14 <__strtok_r+0x34>
 8013afa:	6015      	str	r5, [r2, #0]
 8013afc:	4628      	mov	r0, r5
 8013afe:	e005      	b.n	8013b0c <__strtok_r+0x2c>
 8013b00:	42b5      	cmp	r5, r6
 8013b02:	d1f6      	bne.n	8013af2 <__strtok_r+0x12>
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d1f0      	bne.n	8013aea <__strtok_r+0xa>
 8013b08:	6014      	str	r4, [r2, #0]
 8013b0a:	7003      	strb	r3, [r0, #0]
 8013b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b0e:	461c      	mov	r4, r3
 8013b10:	e00c      	b.n	8013b2c <__strtok_r+0x4c>
 8013b12:	b915      	cbnz	r5, 8013b1a <__strtok_r+0x3a>
 8013b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013b18:	460e      	mov	r6, r1
 8013b1a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013b1e:	42ab      	cmp	r3, r5
 8013b20:	d1f7      	bne.n	8013b12 <__strtok_r+0x32>
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d0f3      	beq.n	8013b0e <__strtok_r+0x2e>
 8013b26:	2300      	movs	r3, #0
 8013b28:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013b2c:	6014      	str	r4, [r2, #0]
 8013b2e:	e7ed      	b.n	8013b0c <__strtok_r+0x2c>

08013b30 <_strtol_l.isra.0>:
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b36:	d001      	beq.n	8013b3c <_strtol_l.isra.0+0xc>
 8013b38:	2b24      	cmp	r3, #36	; 0x24
 8013b3a:	d906      	bls.n	8013b4a <_strtol_l.isra.0+0x1a>
 8013b3c:	f7fe fc48 	bl	80123d0 <__errno>
 8013b40:	2316      	movs	r3, #22
 8013b42:	6003      	str	r3, [r0, #0]
 8013b44:	2000      	movs	r0, #0
 8013b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b4a:	4f3a      	ldr	r7, [pc, #232]	; (8013c34 <_strtol_l.isra.0+0x104>)
 8013b4c:	468e      	mov	lr, r1
 8013b4e:	4676      	mov	r6, lr
 8013b50:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013b54:	5de5      	ldrb	r5, [r4, r7]
 8013b56:	f015 0508 	ands.w	r5, r5, #8
 8013b5a:	d1f8      	bne.n	8013b4e <_strtol_l.isra.0+0x1e>
 8013b5c:	2c2d      	cmp	r4, #45	; 0x2d
 8013b5e:	d134      	bne.n	8013bca <_strtol_l.isra.0+0x9a>
 8013b60:	f89e 4000 	ldrb.w	r4, [lr]
 8013b64:	f04f 0801 	mov.w	r8, #1
 8013b68:	f106 0e02 	add.w	lr, r6, #2
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d05c      	beq.n	8013c2a <_strtol_l.isra.0+0xfa>
 8013b70:	2b10      	cmp	r3, #16
 8013b72:	d10c      	bne.n	8013b8e <_strtol_l.isra.0+0x5e>
 8013b74:	2c30      	cmp	r4, #48	; 0x30
 8013b76:	d10a      	bne.n	8013b8e <_strtol_l.isra.0+0x5e>
 8013b78:	f89e 4000 	ldrb.w	r4, [lr]
 8013b7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013b80:	2c58      	cmp	r4, #88	; 0x58
 8013b82:	d14d      	bne.n	8013c20 <_strtol_l.isra.0+0xf0>
 8013b84:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013b88:	2310      	movs	r3, #16
 8013b8a:	f10e 0e02 	add.w	lr, lr, #2
 8013b8e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013b92:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013b96:	2600      	movs	r6, #0
 8013b98:	fbbc f9f3 	udiv	r9, ip, r3
 8013b9c:	4635      	mov	r5, r6
 8013b9e:	fb03 ca19 	mls	sl, r3, r9, ip
 8013ba2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013ba6:	2f09      	cmp	r7, #9
 8013ba8:	d818      	bhi.n	8013bdc <_strtol_l.isra.0+0xac>
 8013baa:	463c      	mov	r4, r7
 8013bac:	42a3      	cmp	r3, r4
 8013bae:	dd24      	ble.n	8013bfa <_strtol_l.isra.0+0xca>
 8013bb0:	2e00      	cmp	r6, #0
 8013bb2:	db1f      	blt.n	8013bf4 <_strtol_l.isra.0+0xc4>
 8013bb4:	45a9      	cmp	r9, r5
 8013bb6:	d31d      	bcc.n	8013bf4 <_strtol_l.isra.0+0xc4>
 8013bb8:	d101      	bne.n	8013bbe <_strtol_l.isra.0+0x8e>
 8013bba:	45a2      	cmp	sl, r4
 8013bbc:	db1a      	blt.n	8013bf4 <_strtol_l.isra.0+0xc4>
 8013bbe:	fb05 4503 	mla	r5, r5, r3, r4
 8013bc2:	2601      	movs	r6, #1
 8013bc4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013bc8:	e7eb      	b.n	8013ba2 <_strtol_l.isra.0+0x72>
 8013bca:	2c2b      	cmp	r4, #43	; 0x2b
 8013bcc:	bf08      	it	eq
 8013bce:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013bd2:	46a8      	mov	r8, r5
 8013bd4:	bf08      	it	eq
 8013bd6:	f106 0e02 	addeq.w	lr, r6, #2
 8013bda:	e7c7      	b.n	8013b6c <_strtol_l.isra.0+0x3c>
 8013bdc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013be0:	2f19      	cmp	r7, #25
 8013be2:	d801      	bhi.n	8013be8 <_strtol_l.isra.0+0xb8>
 8013be4:	3c37      	subs	r4, #55	; 0x37
 8013be6:	e7e1      	b.n	8013bac <_strtol_l.isra.0+0x7c>
 8013be8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013bec:	2f19      	cmp	r7, #25
 8013bee:	d804      	bhi.n	8013bfa <_strtol_l.isra.0+0xca>
 8013bf0:	3c57      	subs	r4, #87	; 0x57
 8013bf2:	e7db      	b.n	8013bac <_strtol_l.isra.0+0x7c>
 8013bf4:	f04f 36ff 	mov.w	r6, #4294967295
 8013bf8:	e7e4      	b.n	8013bc4 <_strtol_l.isra.0+0x94>
 8013bfa:	2e00      	cmp	r6, #0
 8013bfc:	da05      	bge.n	8013c0a <_strtol_l.isra.0+0xda>
 8013bfe:	2322      	movs	r3, #34	; 0x22
 8013c00:	6003      	str	r3, [r0, #0]
 8013c02:	4665      	mov	r5, ip
 8013c04:	b942      	cbnz	r2, 8013c18 <_strtol_l.isra.0+0xe8>
 8013c06:	4628      	mov	r0, r5
 8013c08:	e79d      	b.n	8013b46 <_strtol_l.isra.0+0x16>
 8013c0a:	f1b8 0f00 	cmp.w	r8, #0
 8013c0e:	d000      	beq.n	8013c12 <_strtol_l.isra.0+0xe2>
 8013c10:	426d      	negs	r5, r5
 8013c12:	2a00      	cmp	r2, #0
 8013c14:	d0f7      	beq.n	8013c06 <_strtol_l.isra.0+0xd6>
 8013c16:	b10e      	cbz	r6, 8013c1c <_strtol_l.isra.0+0xec>
 8013c18:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013c1c:	6011      	str	r1, [r2, #0]
 8013c1e:	e7f2      	b.n	8013c06 <_strtol_l.isra.0+0xd6>
 8013c20:	2430      	movs	r4, #48	; 0x30
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d1b3      	bne.n	8013b8e <_strtol_l.isra.0+0x5e>
 8013c26:	2308      	movs	r3, #8
 8013c28:	e7b1      	b.n	8013b8e <_strtol_l.isra.0+0x5e>
 8013c2a:	2c30      	cmp	r4, #48	; 0x30
 8013c2c:	d0a4      	beq.n	8013b78 <_strtol_l.isra.0+0x48>
 8013c2e:	230a      	movs	r3, #10
 8013c30:	e7ad      	b.n	8013b8e <_strtol_l.isra.0+0x5e>
 8013c32:	bf00      	nop
 8013c34:	0801909d 	.word	0x0801909d

08013c38 <strtol>:
 8013c38:	4613      	mov	r3, r2
 8013c3a:	460a      	mov	r2, r1
 8013c3c:	4601      	mov	r1, r0
 8013c3e:	4802      	ldr	r0, [pc, #8]	; (8013c48 <strtol+0x10>)
 8013c40:	6800      	ldr	r0, [r0, #0]
 8013c42:	f7ff bf75 	b.w	8013b30 <_strtol_l.isra.0>
 8013c46:	bf00      	nop
 8013c48:	20000194 	.word	0x20000194

08013c4c <__assert_func>:
 8013c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c4e:	4614      	mov	r4, r2
 8013c50:	461a      	mov	r2, r3
 8013c52:	4b09      	ldr	r3, [pc, #36]	; (8013c78 <__assert_func+0x2c>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	4605      	mov	r5, r0
 8013c58:	68d8      	ldr	r0, [r3, #12]
 8013c5a:	b14c      	cbz	r4, 8013c70 <__assert_func+0x24>
 8013c5c:	4b07      	ldr	r3, [pc, #28]	; (8013c7c <__assert_func+0x30>)
 8013c5e:	9100      	str	r1, [sp, #0]
 8013c60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c64:	4906      	ldr	r1, [pc, #24]	; (8013c80 <__assert_func+0x34>)
 8013c66:	462b      	mov	r3, r5
 8013c68:	f000 fe86 	bl	8014978 <fiprintf>
 8013c6c:	f002 fb4e 	bl	801630c <abort>
 8013c70:	4b04      	ldr	r3, [pc, #16]	; (8013c84 <__assert_func+0x38>)
 8013c72:	461c      	mov	r4, r3
 8013c74:	e7f3      	b.n	8013c5e <__assert_func+0x12>
 8013c76:	bf00      	nop
 8013c78:	20000194 	.word	0x20000194
 8013c7c:	08019060 	.word	0x08019060
 8013c80:	0801906d 	.word	0x0801906d
 8013c84:	08017795 	.word	0x08017795

08013c88 <quorem>:
 8013c88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c8c:	6903      	ldr	r3, [r0, #16]
 8013c8e:	690c      	ldr	r4, [r1, #16]
 8013c90:	42a3      	cmp	r3, r4
 8013c92:	4607      	mov	r7, r0
 8013c94:	f2c0 8081 	blt.w	8013d9a <quorem+0x112>
 8013c98:	3c01      	subs	r4, #1
 8013c9a:	f101 0814 	add.w	r8, r1, #20
 8013c9e:	f100 0514 	add.w	r5, r0, #20
 8013ca2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013ca6:	9301      	str	r3, [sp, #4]
 8013ca8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013cac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013cb0:	3301      	adds	r3, #1
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013cb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013cbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8013cc0:	d331      	bcc.n	8013d26 <quorem+0x9e>
 8013cc2:	f04f 0e00 	mov.w	lr, #0
 8013cc6:	4640      	mov	r0, r8
 8013cc8:	46ac      	mov	ip, r5
 8013cca:	46f2      	mov	sl, lr
 8013ccc:	f850 2b04 	ldr.w	r2, [r0], #4
 8013cd0:	b293      	uxth	r3, r2
 8013cd2:	fb06 e303 	mla	r3, r6, r3, lr
 8013cd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	ebaa 0303 	sub.w	r3, sl, r3
 8013ce0:	0c12      	lsrs	r2, r2, #16
 8013ce2:	f8dc a000 	ldr.w	sl, [ip]
 8013ce6:	fb06 e202 	mla	r2, r6, r2, lr
 8013cea:	fa13 f38a 	uxtah	r3, r3, sl
 8013cee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013cf2:	fa1f fa82 	uxth.w	sl, r2
 8013cf6:	f8dc 2000 	ldr.w	r2, [ip]
 8013cfa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013cfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d08:	4581      	cmp	r9, r0
 8013d0a:	f84c 3b04 	str.w	r3, [ip], #4
 8013d0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013d12:	d2db      	bcs.n	8013ccc <quorem+0x44>
 8013d14:	f855 300b 	ldr.w	r3, [r5, fp]
 8013d18:	b92b      	cbnz	r3, 8013d26 <quorem+0x9e>
 8013d1a:	9b01      	ldr	r3, [sp, #4]
 8013d1c:	3b04      	subs	r3, #4
 8013d1e:	429d      	cmp	r5, r3
 8013d20:	461a      	mov	r2, r3
 8013d22:	d32e      	bcc.n	8013d82 <quorem+0xfa>
 8013d24:	613c      	str	r4, [r7, #16]
 8013d26:	4638      	mov	r0, r7
 8013d28:	f001 fc8e 	bl	8015648 <__mcmp>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	db24      	blt.n	8013d7a <quorem+0xf2>
 8013d30:	3601      	adds	r6, #1
 8013d32:	4628      	mov	r0, r5
 8013d34:	f04f 0c00 	mov.w	ip, #0
 8013d38:	f858 2b04 	ldr.w	r2, [r8], #4
 8013d3c:	f8d0 e000 	ldr.w	lr, [r0]
 8013d40:	b293      	uxth	r3, r2
 8013d42:	ebac 0303 	sub.w	r3, ip, r3
 8013d46:	0c12      	lsrs	r2, r2, #16
 8013d48:	fa13 f38e 	uxtah	r3, r3, lr
 8013d4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013d50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d5a:	45c1      	cmp	r9, r8
 8013d5c:	f840 3b04 	str.w	r3, [r0], #4
 8013d60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013d64:	d2e8      	bcs.n	8013d38 <quorem+0xb0>
 8013d66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d6e:	b922      	cbnz	r2, 8013d7a <quorem+0xf2>
 8013d70:	3b04      	subs	r3, #4
 8013d72:	429d      	cmp	r5, r3
 8013d74:	461a      	mov	r2, r3
 8013d76:	d30a      	bcc.n	8013d8e <quorem+0x106>
 8013d78:	613c      	str	r4, [r7, #16]
 8013d7a:	4630      	mov	r0, r6
 8013d7c:	b003      	add	sp, #12
 8013d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d82:	6812      	ldr	r2, [r2, #0]
 8013d84:	3b04      	subs	r3, #4
 8013d86:	2a00      	cmp	r2, #0
 8013d88:	d1cc      	bne.n	8013d24 <quorem+0x9c>
 8013d8a:	3c01      	subs	r4, #1
 8013d8c:	e7c7      	b.n	8013d1e <quorem+0x96>
 8013d8e:	6812      	ldr	r2, [r2, #0]
 8013d90:	3b04      	subs	r3, #4
 8013d92:	2a00      	cmp	r2, #0
 8013d94:	d1f0      	bne.n	8013d78 <quorem+0xf0>
 8013d96:	3c01      	subs	r4, #1
 8013d98:	e7eb      	b.n	8013d72 <quorem+0xea>
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	e7ee      	b.n	8013d7c <quorem+0xf4>
	...

08013da0 <_dtoa_r>:
 8013da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da4:	ed2d 8b02 	vpush	{d8}
 8013da8:	ec57 6b10 	vmov	r6, r7, d0
 8013dac:	b095      	sub	sp, #84	; 0x54
 8013dae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013db0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013db4:	9105      	str	r1, [sp, #20]
 8013db6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013dba:	4604      	mov	r4, r0
 8013dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8013dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8013dc0:	b975      	cbnz	r5, 8013de0 <_dtoa_r+0x40>
 8013dc2:	2010      	movs	r0, #16
 8013dc4:	f001 f95e 	bl	8015084 <malloc>
 8013dc8:	4602      	mov	r2, r0
 8013dca:	6260      	str	r0, [r4, #36]	; 0x24
 8013dcc:	b920      	cbnz	r0, 8013dd8 <_dtoa_r+0x38>
 8013dce:	4bb2      	ldr	r3, [pc, #712]	; (8014098 <_dtoa_r+0x2f8>)
 8013dd0:	21ea      	movs	r1, #234	; 0xea
 8013dd2:	48b2      	ldr	r0, [pc, #712]	; (801409c <_dtoa_r+0x2fc>)
 8013dd4:	f7ff ff3a 	bl	8013c4c <__assert_func>
 8013dd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013ddc:	6005      	str	r5, [r0, #0]
 8013dde:	60c5      	str	r5, [r0, #12]
 8013de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013de2:	6819      	ldr	r1, [r3, #0]
 8013de4:	b151      	cbz	r1, 8013dfc <_dtoa_r+0x5c>
 8013de6:	685a      	ldr	r2, [r3, #4]
 8013de8:	604a      	str	r2, [r1, #4]
 8013dea:	2301      	movs	r3, #1
 8013dec:	4093      	lsls	r3, r2
 8013dee:	608b      	str	r3, [r1, #8]
 8013df0:	4620      	mov	r0, r4
 8013df2:	f001 f9a1 	bl	8015138 <_Bfree>
 8013df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013df8:	2200      	movs	r2, #0
 8013dfa:	601a      	str	r2, [r3, #0]
 8013dfc:	1e3b      	subs	r3, r7, #0
 8013dfe:	bfb9      	ittee	lt
 8013e00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013e04:	9303      	strlt	r3, [sp, #12]
 8013e06:	2300      	movge	r3, #0
 8013e08:	f8c8 3000 	strge.w	r3, [r8]
 8013e0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013e10:	4ba3      	ldr	r3, [pc, #652]	; (80140a0 <_dtoa_r+0x300>)
 8013e12:	bfbc      	itt	lt
 8013e14:	2201      	movlt	r2, #1
 8013e16:	f8c8 2000 	strlt.w	r2, [r8]
 8013e1a:	ea33 0309 	bics.w	r3, r3, r9
 8013e1e:	d11b      	bne.n	8013e58 <_dtoa_r+0xb8>
 8013e20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e22:	f242 730f 	movw	r3, #9999	; 0x270f
 8013e26:	6013      	str	r3, [r2, #0]
 8013e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e2c:	4333      	orrs	r3, r6
 8013e2e:	f000 857a 	beq.w	8014926 <_dtoa_r+0xb86>
 8013e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e34:	b963      	cbnz	r3, 8013e50 <_dtoa_r+0xb0>
 8013e36:	4b9b      	ldr	r3, [pc, #620]	; (80140a4 <_dtoa_r+0x304>)
 8013e38:	e024      	b.n	8013e84 <_dtoa_r+0xe4>
 8013e3a:	4b9b      	ldr	r3, [pc, #620]	; (80140a8 <_dtoa_r+0x308>)
 8013e3c:	9300      	str	r3, [sp, #0]
 8013e3e:	3308      	adds	r3, #8
 8013e40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013e42:	6013      	str	r3, [r2, #0]
 8013e44:	9800      	ldr	r0, [sp, #0]
 8013e46:	b015      	add	sp, #84	; 0x54
 8013e48:	ecbd 8b02 	vpop	{d8}
 8013e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e50:	4b94      	ldr	r3, [pc, #592]	; (80140a4 <_dtoa_r+0x304>)
 8013e52:	9300      	str	r3, [sp, #0]
 8013e54:	3303      	adds	r3, #3
 8013e56:	e7f3      	b.n	8013e40 <_dtoa_r+0xa0>
 8013e58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	ec51 0b17 	vmov	r0, r1, d7
 8013e62:	2300      	movs	r3, #0
 8013e64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013e68:	f7ec fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e6c:	4680      	mov	r8, r0
 8013e6e:	b158      	cbz	r0, 8013e88 <_dtoa_r+0xe8>
 8013e70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e72:	2301      	movs	r3, #1
 8013e74:	6013      	str	r3, [r2, #0]
 8013e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f000 8551 	beq.w	8014920 <_dtoa_r+0xb80>
 8013e7e:	488b      	ldr	r0, [pc, #556]	; (80140ac <_dtoa_r+0x30c>)
 8013e80:	6018      	str	r0, [r3, #0]
 8013e82:	1e43      	subs	r3, r0, #1
 8013e84:	9300      	str	r3, [sp, #0]
 8013e86:	e7dd      	b.n	8013e44 <_dtoa_r+0xa4>
 8013e88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013e8c:	aa12      	add	r2, sp, #72	; 0x48
 8013e8e:	a913      	add	r1, sp, #76	; 0x4c
 8013e90:	4620      	mov	r0, r4
 8013e92:	f001 fcf9 	bl	8015888 <__d2b>
 8013e96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013e9a:	4683      	mov	fp, r0
 8013e9c:	2d00      	cmp	r5, #0
 8013e9e:	d07c      	beq.n	8013f9a <_dtoa_r+0x1fa>
 8013ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ea2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013eaa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013eae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013eb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013eb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013eba:	4b7d      	ldr	r3, [pc, #500]	; (80140b0 <_dtoa_r+0x310>)
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	4630      	mov	r0, r6
 8013ec0:	4639      	mov	r1, r7
 8013ec2:	f7ec f9e1 	bl	8000288 <__aeabi_dsub>
 8013ec6:	a36e      	add	r3, pc, #440	; (adr r3, 8014080 <_dtoa_r+0x2e0>)
 8013ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ecc:	f7ec fb94 	bl	80005f8 <__aeabi_dmul>
 8013ed0:	a36d      	add	r3, pc, #436	; (adr r3, 8014088 <_dtoa_r+0x2e8>)
 8013ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed6:	f7ec f9d9 	bl	800028c <__adddf3>
 8013eda:	4606      	mov	r6, r0
 8013edc:	4628      	mov	r0, r5
 8013ede:	460f      	mov	r7, r1
 8013ee0:	f7ec fb20 	bl	8000524 <__aeabi_i2d>
 8013ee4:	a36a      	add	r3, pc, #424	; (adr r3, 8014090 <_dtoa_r+0x2f0>)
 8013ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eea:	f7ec fb85 	bl	80005f8 <__aeabi_dmul>
 8013eee:	4602      	mov	r2, r0
 8013ef0:	460b      	mov	r3, r1
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	4639      	mov	r1, r7
 8013ef6:	f7ec f9c9 	bl	800028c <__adddf3>
 8013efa:	4606      	mov	r6, r0
 8013efc:	460f      	mov	r7, r1
 8013efe:	f7ec fe2b 	bl	8000b58 <__aeabi_d2iz>
 8013f02:	2200      	movs	r2, #0
 8013f04:	4682      	mov	sl, r0
 8013f06:	2300      	movs	r3, #0
 8013f08:	4630      	mov	r0, r6
 8013f0a:	4639      	mov	r1, r7
 8013f0c:	f7ec fde6 	bl	8000adc <__aeabi_dcmplt>
 8013f10:	b148      	cbz	r0, 8013f26 <_dtoa_r+0x186>
 8013f12:	4650      	mov	r0, sl
 8013f14:	f7ec fb06 	bl	8000524 <__aeabi_i2d>
 8013f18:	4632      	mov	r2, r6
 8013f1a:	463b      	mov	r3, r7
 8013f1c:	f7ec fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f20:	b908      	cbnz	r0, 8013f26 <_dtoa_r+0x186>
 8013f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f26:	f1ba 0f16 	cmp.w	sl, #22
 8013f2a:	d854      	bhi.n	8013fd6 <_dtoa_r+0x236>
 8013f2c:	4b61      	ldr	r3, [pc, #388]	; (80140b4 <_dtoa_r+0x314>)
 8013f2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013f3a:	f7ec fdcf 	bl	8000adc <__aeabi_dcmplt>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d04b      	beq.n	8013fda <_dtoa_r+0x23a>
 8013f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f46:	2300      	movs	r3, #0
 8013f48:	930e      	str	r3, [sp, #56]	; 0x38
 8013f4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f4c:	1b5d      	subs	r5, r3, r5
 8013f4e:	1e6b      	subs	r3, r5, #1
 8013f50:	9304      	str	r3, [sp, #16]
 8013f52:	bf43      	ittte	mi
 8013f54:	2300      	movmi	r3, #0
 8013f56:	f1c5 0801 	rsbmi	r8, r5, #1
 8013f5a:	9304      	strmi	r3, [sp, #16]
 8013f5c:	f04f 0800 	movpl.w	r8, #0
 8013f60:	f1ba 0f00 	cmp.w	sl, #0
 8013f64:	db3b      	blt.n	8013fde <_dtoa_r+0x23e>
 8013f66:	9b04      	ldr	r3, [sp, #16]
 8013f68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013f6c:	4453      	add	r3, sl
 8013f6e:	9304      	str	r3, [sp, #16]
 8013f70:	2300      	movs	r3, #0
 8013f72:	9306      	str	r3, [sp, #24]
 8013f74:	9b05      	ldr	r3, [sp, #20]
 8013f76:	2b09      	cmp	r3, #9
 8013f78:	d869      	bhi.n	801404e <_dtoa_r+0x2ae>
 8013f7a:	2b05      	cmp	r3, #5
 8013f7c:	bfc4      	itt	gt
 8013f7e:	3b04      	subgt	r3, #4
 8013f80:	9305      	strgt	r3, [sp, #20]
 8013f82:	9b05      	ldr	r3, [sp, #20]
 8013f84:	f1a3 0302 	sub.w	r3, r3, #2
 8013f88:	bfcc      	ite	gt
 8013f8a:	2500      	movgt	r5, #0
 8013f8c:	2501      	movle	r5, #1
 8013f8e:	2b03      	cmp	r3, #3
 8013f90:	d869      	bhi.n	8014066 <_dtoa_r+0x2c6>
 8013f92:	e8df f003 	tbb	[pc, r3]
 8013f96:	4e2c      	.short	0x4e2c
 8013f98:	5a4c      	.short	0x5a4c
 8013f9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013f9e:	441d      	add	r5, r3
 8013fa0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013fa4:	2b20      	cmp	r3, #32
 8013fa6:	bfc1      	itttt	gt
 8013fa8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013fac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013fb0:	fa09 f303 	lslgt.w	r3, r9, r3
 8013fb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013fb8:	bfda      	itte	le
 8013fba:	f1c3 0320 	rsble	r3, r3, #32
 8013fbe:	fa06 f003 	lslle.w	r0, r6, r3
 8013fc2:	4318      	orrgt	r0, r3
 8013fc4:	f7ec fa9e 	bl	8000504 <__aeabi_ui2d>
 8013fc8:	2301      	movs	r3, #1
 8013fca:	4606      	mov	r6, r0
 8013fcc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013fd0:	3d01      	subs	r5, #1
 8013fd2:	9310      	str	r3, [sp, #64]	; 0x40
 8013fd4:	e771      	b.n	8013eba <_dtoa_r+0x11a>
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	e7b6      	b.n	8013f48 <_dtoa_r+0x1a8>
 8013fda:	900e      	str	r0, [sp, #56]	; 0x38
 8013fdc:	e7b5      	b.n	8013f4a <_dtoa_r+0x1aa>
 8013fde:	f1ca 0300 	rsb	r3, sl, #0
 8013fe2:	9306      	str	r3, [sp, #24]
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	eba8 080a 	sub.w	r8, r8, sl
 8013fea:	930d      	str	r3, [sp, #52]	; 0x34
 8013fec:	e7c2      	b.n	8013f74 <_dtoa_r+0x1d4>
 8013fee:	2300      	movs	r3, #0
 8013ff0:	9308      	str	r3, [sp, #32]
 8013ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	dc39      	bgt.n	801406c <_dtoa_r+0x2cc>
 8013ff8:	f04f 0901 	mov.w	r9, #1
 8013ffc:	f8cd 9004 	str.w	r9, [sp, #4]
 8014000:	464b      	mov	r3, r9
 8014002:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014006:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014008:	2200      	movs	r2, #0
 801400a:	6042      	str	r2, [r0, #4]
 801400c:	2204      	movs	r2, #4
 801400e:	f102 0614 	add.w	r6, r2, #20
 8014012:	429e      	cmp	r6, r3
 8014014:	6841      	ldr	r1, [r0, #4]
 8014016:	d92f      	bls.n	8014078 <_dtoa_r+0x2d8>
 8014018:	4620      	mov	r0, r4
 801401a:	f001 f84d 	bl	80150b8 <_Balloc>
 801401e:	9000      	str	r0, [sp, #0]
 8014020:	2800      	cmp	r0, #0
 8014022:	d14b      	bne.n	80140bc <_dtoa_r+0x31c>
 8014024:	4b24      	ldr	r3, [pc, #144]	; (80140b8 <_dtoa_r+0x318>)
 8014026:	4602      	mov	r2, r0
 8014028:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801402c:	e6d1      	b.n	8013dd2 <_dtoa_r+0x32>
 801402e:	2301      	movs	r3, #1
 8014030:	e7de      	b.n	8013ff0 <_dtoa_r+0x250>
 8014032:	2300      	movs	r3, #0
 8014034:	9308      	str	r3, [sp, #32]
 8014036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014038:	eb0a 0903 	add.w	r9, sl, r3
 801403c:	f109 0301 	add.w	r3, r9, #1
 8014040:	2b01      	cmp	r3, #1
 8014042:	9301      	str	r3, [sp, #4]
 8014044:	bfb8      	it	lt
 8014046:	2301      	movlt	r3, #1
 8014048:	e7dd      	b.n	8014006 <_dtoa_r+0x266>
 801404a:	2301      	movs	r3, #1
 801404c:	e7f2      	b.n	8014034 <_dtoa_r+0x294>
 801404e:	2501      	movs	r5, #1
 8014050:	2300      	movs	r3, #0
 8014052:	9305      	str	r3, [sp, #20]
 8014054:	9508      	str	r5, [sp, #32]
 8014056:	f04f 39ff 	mov.w	r9, #4294967295
 801405a:	2200      	movs	r2, #0
 801405c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014060:	2312      	movs	r3, #18
 8014062:	9209      	str	r2, [sp, #36]	; 0x24
 8014064:	e7cf      	b.n	8014006 <_dtoa_r+0x266>
 8014066:	2301      	movs	r3, #1
 8014068:	9308      	str	r3, [sp, #32]
 801406a:	e7f4      	b.n	8014056 <_dtoa_r+0x2b6>
 801406c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014070:	f8cd 9004 	str.w	r9, [sp, #4]
 8014074:	464b      	mov	r3, r9
 8014076:	e7c6      	b.n	8014006 <_dtoa_r+0x266>
 8014078:	3101      	adds	r1, #1
 801407a:	6041      	str	r1, [r0, #4]
 801407c:	0052      	lsls	r2, r2, #1
 801407e:	e7c6      	b.n	801400e <_dtoa_r+0x26e>
 8014080:	636f4361 	.word	0x636f4361
 8014084:	3fd287a7 	.word	0x3fd287a7
 8014088:	8b60c8b3 	.word	0x8b60c8b3
 801408c:	3fc68a28 	.word	0x3fc68a28
 8014090:	509f79fb 	.word	0x509f79fb
 8014094:	3fd34413 	.word	0x3fd34413
 8014098:	08018fe8 	.word	0x08018fe8
 801409c:	080191aa 	.word	0x080191aa
 80140a0:	7ff00000 	.word	0x7ff00000
 80140a4:	080191a6 	.word	0x080191a6
 80140a8:	0801919d 	.word	0x0801919d
 80140ac:	08016dbc 	.word	0x08016dbc
 80140b0:	3ff80000 	.word	0x3ff80000
 80140b4:	08019320 	.word	0x08019320
 80140b8:	08019209 	.word	0x08019209
 80140bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140be:	9a00      	ldr	r2, [sp, #0]
 80140c0:	601a      	str	r2, [r3, #0]
 80140c2:	9b01      	ldr	r3, [sp, #4]
 80140c4:	2b0e      	cmp	r3, #14
 80140c6:	f200 80ad 	bhi.w	8014224 <_dtoa_r+0x484>
 80140ca:	2d00      	cmp	r5, #0
 80140cc:	f000 80aa 	beq.w	8014224 <_dtoa_r+0x484>
 80140d0:	f1ba 0f00 	cmp.w	sl, #0
 80140d4:	dd36      	ble.n	8014144 <_dtoa_r+0x3a4>
 80140d6:	4ac3      	ldr	r2, [pc, #780]	; (80143e4 <_dtoa_r+0x644>)
 80140d8:	f00a 030f 	and.w	r3, sl, #15
 80140dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80140e0:	ed93 7b00 	vldr	d7, [r3]
 80140e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80140e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80140ec:	eeb0 8a47 	vmov.f32	s16, s14
 80140f0:	eef0 8a67 	vmov.f32	s17, s15
 80140f4:	d016      	beq.n	8014124 <_dtoa_r+0x384>
 80140f6:	4bbc      	ldr	r3, [pc, #752]	; (80143e8 <_dtoa_r+0x648>)
 80140f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80140fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014100:	f7ec fba4 	bl	800084c <__aeabi_ddiv>
 8014104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014108:	f007 070f 	and.w	r7, r7, #15
 801410c:	2503      	movs	r5, #3
 801410e:	4eb6      	ldr	r6, [pc, #728]	; (80143e8 <_dtoa_r+0x648>)
 8014110:	b957      	cbnz	r7, 8014128 <_dtoa_r+0x388>
 8014112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014116:	ec53 2b18 	vmov	r2, r3, d8
 801411a:	f7ec fb97 	bl	800084c <__aeabi_ddiv>
 801411e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014122:	e029      	b.n	8014178 <_dtoa_r+0x3d8>
 8014124:	2502      	movs	r5, #2
 8014126:	e7f2      	b.n	801410e <_dtoa_r+0x36e>
 8014128:	07f9      	lsls	r1, r7, #31
 801412a:	d508      	bpl.n	801413e <_dtoa_r+0x39e>
 801412c:	ec51 0b18 	vmov	r0, r1, d8
 8014130:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014134:	f7ec fa60 	bl	80005f8 <__aeabi_dmul>
 8014138:	ec41 0b18 	vmov	d8, r0, r1
 801413c:	3501      	adds	r5, #1
 801413e:	107f      	asrs	r7, r7, #1
 8014140:	3608      	adds	r6, #8
 8014142:	e7e5      	b.n	8014110 <_dtoa_r+0x370>
 8014144:	f000 80a6 	beq.w	8014294 <_dtoa_r+0x4f4>
 8014148:	f1ca 0600 	rsb	r6, sl, #0
 801414c:	4ba5      	ldr	r3, [pc, #660]	; (80143e4 <_dtoa_r+0x644>)
 801414e:	4fa6      	ldr	r7, [pc, #664]	; (80143e8 <_dtoa_r+0x648>)
 8014150:	f006 020f 	and.w	r2, r6, #15
 8014154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801415c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014160:	f7ec fa4a 	bl	80005f8 <__aeabi_dmul>
 8014164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014168:	1136      	asrs	r6, r6, #4
 801416a:	2300      	movs	r3, #0
 801416c:	2502      	movs	r5, #2
 801416e:	2e00      	cmp	r6, #0
 8014170:	f040 8085 	bne.w	801427e <_dtoa_r+0x4de>
 8014174:	2b00      	cmp	r3, #0
 8014176:	d1d2      	bne.n	801411e <_dtoa_r+0x37e>
 8014178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801417a:	2b00      	cmp	r3, #0
 801417c:	f000 808c 	beq.w	8014298 <_dtoa_r+0x4f8>
 8014180:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014184:	4b99      	ldr	r3, [pc, #612]	; (80143ec <_dtoa_r+0x64c>)
 8014186:	2200      	movs	r2, #0
 8014188:	4630      	mov	r0, r6
 801418a:	4639      	mov	r1, r7
 801418c:	f7ec fca6 	bl	8000adc <__aeabi_dcmplt>
 8014190:	2800      	cmp	r0, #0
 8014192:	f000 8081 	beq.w	8014298 <_dtoa_r+0x4f8>
 8014196:	9b01      	ldr	r3, [sp, #4]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d07d      	beq.n	8014298 <_dtoa_r+0x4f8>
 801419c:	f1b9 0f00 	cmp.w	r9, #0
 80141a0:	dd3c      	ble.n	801421c <_dtoa_r+0x47c>
 80141a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80141a6:	9307      	str	r3, [sp, #28]
 80141a8:	2200      	movs	r2, #0
 80141aa:	4b91      	ldr	r3, [pc, #580]	; (80143f0 <_dtoa_r+0x650>)
 80141ac:	4630      	mov	r0, r6
 80141ae:	4639      	mov	r1, r7
 80141b0:	f7ec fa22 	bl	80005f8 <__aeabi_dmul>
 80141b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141b8:	3501      	adds	r5, #1
 80141ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80141be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80141c2:	4628      	mov	r0, r5
 80141c4:	f7ec f9ae 	bl	8000524 <__aeabi_i2d>
 80141c8:	4632      	mov	r2, r6
 80141ca:	463b      	mov	r3, r7
 80141cc:	f7ec fa14 	bl	80005f8 <__aeabi_dmul>
 80141d0:	4b88      	ldr	r3, [pc, #544]	; (80143f4 <_dtoa_r+0x654>)
 80141d2:	2200      	movs	r2, #0
 80141d4:	f7ec f85a 	bl	800028c <__adddf3>
 80141d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80141dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141e0:	9303      	str	r3, [sp, #12]
 80141e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d15c      	bne.n	80142a2 <_dtoa_r+0x502>
 80141e8:	4b83      	ldr	r3, [pc, #524]	; (80143f8 <_dtoa_r+0x658>)
 80141ea:	2200      	movs	r2, #0
 80141ec:	4630      	mov	r0, r6
 80141ee:	4639      	mov	r1, r7
 80141f0:	f7ec f84a 	bl	8000288 <__aeabi_dsub>
 80141f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80141f8:	4606      	mov	r6, r0
 80141fa:	460f      	mov	r7, r1
 80141fc:	f7ec fc8c 	bl	8000b18 <__aeabi_dcmpgt>
 8014200:	2800      	cmp	r0, #0
 8014202:	f040 8296 	bne.w	8014732 <_dtoa_r+0x992>
 8014206:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801420a:	4630      	mov	r0, r6
 801420c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014210:	4639      	mov	r1, r7
 8014212:	f7ec fc63 	bl	8000adc <__aeabi_dcmplt>
 8014216:	2800      	cmp	r0, #0
 8014218:	f040 8288 	bne.w	801472c <_dtoa_r+0x98c>
 801421c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014220:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014226:	2b00      	cmp	r3, #0
 8014228:	f2c0 8158 	blt.w	80144dc <_dtoa_r+0x73c>
 801422c:	f1ba 0f0e 	cmp.w	sl, #14
 8014230:	f300 8154 	bgt.w	80144dc <_dtoa_r+0x73c>
 8014234:	4b6b      	ldr	r3, [pc, #428]	; (80143e4 <_dtoa_r+0x644>)
 8014236:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801423a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801423e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014240:	2b00      	cmp	r3, #0
 8014242:	f280 80e3 	bge.w	801440c <_dtoa_r+0x66c>
 8014246:	9b01      	ldr	r3, [sp, #4]
 8014248:	2b00      	cmp	r3, #0
 801424a:	f300 80df 	bgt.w	801440c <_dtoa_r+0x66c>
 801424e:	f040 826d 	bne.w	801472c <_dtoa_r+0x98c>
 8014252:	4b69      	ldr	r3, [pc, #420]	; (80143f8 <_dtoa_r+0x658>)
 8014254:	2200      	movs	r2, #0
 8014256:	4640      	mov	r0, r8
 8014258:	4649      	mov	r1, r9
 801425a:	f7ec f9cd 	bl	80005f8 <__aeabi_dmul>
 801425e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014262:	f7ec fc4f 	bl	8000b04 <__aeabi_dcmpge>
 8014266:	9e01      	ldr	r6, [sp, #4]
 8014268:	4637      	mov	r7, r6
 801426a:	2800      	cmp	r0, #0
 801426c:	f040 8243 	bne.w	80146f6 <_dtoa_r+0x956>
 8014270:	9d00      	ldr	r5, [sp, #0]
 8014272:	2331      	movs	r3, #49	; 0x31
 8014274:	f805 3b01 	strb.w	r3, [r5], #1
 8014278:	f10a 0a01 	add.w	sl, sl, #1
 801427c:	e23f      	b.n	80146fe <_dtoa_r+0x95e>
 801427e:	07f2      	lsls	r2, r6, #31
 8014280:	d505      	bpl.n	801428e <_dtoa_r+0x4ee>
 8014282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014286:	f7ec f9b7 	bl	80005f8 <__aeabi_dmul>
 801428a:	3501      	adds	r5, #1
 801428c:	2301      	movs	r3, #1
 801428e:	1076      	asrs	r6, r6, #1
 8014290:	3708      	adds	r7, #8
 8014292:	e76c      	b.n	801416e <_dtoa_r+0x3ce>
 8014294:	2502      	movs	r5, #2
 8014296:	e76f      	b.n	8014178 <_dtoa_r+0x3d8>
 8014298:	9b01      	ldr	r3, [sp, #4]
 801429a:	f8cd a01c 	str.w	sl, [sp, #28]
 801429e:	930c      	str	r3, [sp, #48]	; 0x30
 80142a0:	e78d      	b.n	80141be <_dtoa_r+0x41e>
 80142a2:	9900      	ldr	r1, [sp, #0]
 80142a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80142a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142a8:	4b4e      	ldr	r3, [pc, #312]	; (80143e4 <_dtoa_r+0x644>)
 80142aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80142ae:	4401      	add	r1, r0
 80142b0:	9102      	str	r1, [sp, #8]
 80142b2:	9908      	ldr	r1, [sp, #32]
 80142b4:	eeb0 8a47 	vmov.f32	s16, s14
 80142b8:	eef0 8a67 	vmov.f32	s17, s15
 80142bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80142c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80142c4:	2900      	cmp	r1, #0
 80142c6:	d045      	beq.n	8014354 <_dtoa_r+0x5b4>
 80142c8:	494c      	ldr	r1, [pc, #304]	; (80143fc <_dtoa_r+0x65c>)
 80142ca:	2000      	movs	r0, #0
 80142cc:	f7ec fabe 	bl	800084c <__aeabi_ddiv>
 80142d0:	ec53 2b18 	vmov	r2, r3, d8
 80142d4:	f7eb ffd8 	bl	8000288 <__aeabi_dsub>
 80142d8:	9d00      	ldr	r5, [sp, #0]
 80142da:	ec41 0b18 	vmov	d8, r0, r1
 80142de:	4639      	mov	r1, r7
 80142e0:	4630      	mov	r0, r6
 80142e2:	f7ec fc39 	bl	8000b58 <__aeabi_d2iz>
 80142e6:	900c      	str	r0, [sp, #48]	; 0x30
 80142e8:	f7ec f91c 	bl	8000524 <__aeabi_i2d>
 80142ec:	4602      	mov	r2, r0
 80142ee:	460b      	mov	r3, r1
 80142f0:	4630      	mov	r0, r6
 80142f2:	4639      	mov	r1, r7
 80142f4:	f7eb ffc8 	bl	8000288 <__aeabi_dsub>
 80142f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142fa:	3330      	adds	r3, #48	; 0x30
 80142fc:	f805 3b01 	strb.w	r3, [r5], #1
 8014300:	ec53 2b18 	vmov	r2, r3, d8
 8014304:	4606      	mov	r6, r0
 8014306:	460f      	mov	r7, r1
 8014308:	f7ec fbe8 	bl	8000adc <__aeabi_dcmplt>
 801430c:	2800      	cmp	r0, #0
 801430e:	d165      	bne.n	80143dc <_dtoa_r+0x63c>
 8014310:	4632      	mov	r2, r6
 8014312:	463b      	mov	r3, r7
 8014314:	4935      	ldr	r1, [pc, #212]	; (80143ec <_dtoa_r+0x64c>)
 8014316:	2000      	movs	r0, #0
 8014318:	f7eb ffb6 	bl	8000288 <__aeabi_dsub>
 801431c:	ec53 2b18 	vmov	r2, r3, d8
 8014320:	f7ec fbdc 	bl	8000adc <__aeabi_dcmplt>
 8014324:	2800      	cmp	r0, #0
 8014326:	f040 80b9 	bne.w	801449c <_dtoa_r+0x6fc>
 801432a:	9b02      	ldr	r3, [sp, #8]
 801432c:	429d      	cmp	r5, r3
 801432e:	f43f af75 	beq.w	801421c <_dtoa_r+0x47c>
 8014332:	4b2f      	ldr	r3, [pc, #188]	; (80143f0 <_dtoa_r+0x650>)
 8014334:	ec51 0b18 	vmov	r0, r1, d8
 8014338:	2200      	movs	r2, #0
 801433a:	f7ec f95d 	bl	80005f8 <__aeabi_dmul>
 801433e:	4b2c      	ldr	r3, [pc, #176]	; (80143f0 <_dtoa_r+0x650>)
 8014340:	ec41 0b18 	vmov	d8, r0, r1
 8014344:	2200      	movs	r2, #0
 8014346:	4630      	mov	r0, r6
 8014348:	4639      	mov	r1, r7
 801434a:	f7ec f955 	bl	80005f8 <__aeabi_dmul>
 801434e:	4606      	mov	r6, r0
 8014350:	460f      	mov	r7, r1
 8014352:	e7c4      	b.n	80142de <_dtoa_r+0x53e>
 8014354:	ec51 0b17 	vmov	r0, r1, d7
 8014358:	f7ec f94e 	bl	80005f8 <__aeabi_dmul>
 801435c:	9b02      	ldr	r3, [sp, #8]
 801435e:	9d00      	ldr	r5, [sp, #0]
 8014360:	930c      	str	r3, [sp, #48]	; 0x30
 8014362:	ec41 0b18 	vmov	d8, r0, r1
 8014366:	4639      	mov	r1, r7
 8014368:	4630      	mov	r0, r6
 801436a:	f7ec fbf5 	bl	8000b58 <__aeabi_d2iz>
 801436e:	9011      	str	r0, [sp, #68]	; 0x44
 8014370:	f7ec f8d8 	bl	8000524 <__aeabi_i2d>
 8014374:	4602      	mov	r2, r0
 8014376:	460b      	mov	r3, r1
 8014378:	4630      	mov	r0, r6
 801437a:	4639      	mov	r1, r7
 801437c:	f7eb ff84 	bl	8000288 <__aeabi_dsub>
 8014380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014382:	3330      	adds	r3, #48	; 0x30
 8014384:	f805 3b01 	strb.w	r3, [r5], #1
 8014388:	9b02      	ldr	r3, [sp, #8]
 801438a:	429d      	cmp	r5, r3
 801438c:	4606      	mov	r6, r0
 801438e:	460f      	mov	r7, r1
 8014390:	f04f 0200 	mov.w	r2, #0
 8014394:	d134      	bne.n	8014400 <_dtoa_r+0x660>
 8014396:	4b19      	ldr	r3, [pc, #100]	; (80143fc <_dtoa_r+0x65c>)
 8014398:	ec51 0b18 	vmov	r0, r1, d8
 801439c:	f7eb ff76 	bl	800028c <__adddf3>
 80143a0:	4602      	mov	r2, r0
 80143a2:	460b      	mov	r3, r1
 80143a4:	4630      	mov	r0, r6
 80143a6:	4639      	mov	r1, r7
 80143a8:	f7ec fbb6 	bl	8000b18 <__aeabi_dcmpgt>
 80143ac:	2800      	cmp	r0, #0
 80143ae:	d175      	bne.n	801449c <_dtoa_r+0x6fc>
 80143b0:	ec53 2b18 	vmov	r2, r3, d8
 80143b4:	4911      	ldr	r1, [pc, #68]	; (80143fc <_dtoa_r+0x65c>)
 80143b6:	2000      	movs	r0, #0
 80143b8:	f7eb ff66 	bl	8000288 <__aeabi_dsub>
 80143bc:	4602      	mov	r2, r0
 80143be:	460b      	mov	r3, r1
 80143c0:	4630      	mov	r0, r6
 80143c2:	4639      	mov	r1, r7
 80143c4:	f7ec fb8a 	bl	8000adc <__aeabi_dcmplt>
 80143c8:	2800      	cmp	r0, #0
 80143ca:	f43f af27 	beq.w	801421c <_dtoa_r+0x47c>
 80143ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80143d0:	1e6b      	subs	r3, r5, #1
 80143d2:	930c      	str	r3, [sp, #48]	; 0x30
 80143d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80143d8:	2b30      	cmp	r3, #48	; 0x30
 80143da:	d0f8      	beq.n	80143ce <_dtoa_r+0x62e>
 80143dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80143e0:	e04a      	b.n	8014478 <_dtoa_r+0x6d8>
 80143e2:	bf00      	nop
 80143e4:	08019320 	.word	0x08019320
 80143e8:	080192f8 	.word	0x080192f8
 80143ec:	3ff00000 	.word	0x3ff00000
 80143f0:	40240000 	.word	0x40240000
 80143f4:	401c0000 	.word	0x401c0000
 80143f8:	40140000 	.word	0x40140000
 80143fc:	3fe00000 	.word	0x3fe00000
 8014400:	4baf      	ldr	r3, [pc, #700]	; (80146c0 <_dtoa_r+0x920>)
 8014402:	f7ec f8f9 	bl	80005f8 <__aeabi_dmul>
 8014406:	4606      	mov	r6, r0
 8014408:	460f      	mov	r7, r1
 801440a:	e7ac      	b.n	8014366 <_dtoa_r+0x5c6>
 801440c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014410:	9d00      	ldr	r5, [sp, #0]
 8014412:	4642      	mov	r2, r8
 8014414:	464b      	mov	r3, r9
 8014416:	4630      	mov	r0, r6
 8014418:	4639      	mov	r1, r7
 801441a:	f7ec fa17 	bl	800084c <__aeabi_ddiv>
 801441e:	f7ec fb9b 	bl	8000b58 <__aeabi_d2iz>
 8014422:	9002      	str	r0, [sp, #8]
 8014424:	f7ec f87e 	bl	8000524 <__aeabi_i2d>
 8014428:	4642      	mov	r2, r8
 801442a:	464b      	mov	r3, r9
 801442c:	f7ec f8e4 	bl	80005f8 <__aeabi_dmul>
 8014430:	4602      	mov	r2, r0
 8014432:	460b      	mov	r3, r1
 8014434:	4630      	mov	r0, r6
 8014436:	4639      	mov	r1, r7
 8014438:	f7eb ff26 	bl	8000288 <__aeabi_dsub>
 801443c:	9e02      	ldr	r6, [sp, #8]
 801443e:	9f01      	ldr	r7, [sp, #4]
 8014440:	3630      	adds	r6, #48	; 0x30
 8014442:	f805 6b01 	strb.w	r6, [r5], #1
 8014446:	9e00      	ldr	r6, [sp, #0]
 8014448:	1bae      	subs	r6, r5, r6
 801444a:	42b7      	cmp	r7, r6
 801444c:	4602      	mov	r2, r0
 801444e:	460b      	mov	r3, r1
 8014450:	d137      	bne.n	80144c2 <_dtoa_r+0x722>
 8014452:	f7eb ff1b 	bl	800028c <__adddf3>
 8014456:	4642      	mov	r2, r8
 8014458:	464b      	mov	r3, r9
 801445a:	4606      	mov	r6, r0
 801445c:	460f      	mov	r7, r1
 801445e:	f7ec fb5b 	bl	8000b18 <__aeabi_dcmpgt>
 8014462:	b9c8      	cbnz	r0, 8014498 <_dtoa_r+0x6f8>
 8014464:	4642      	mov	r2, r8
 8014466:	464b      	mov	r3, r9
 8014468:	4630      	mov	r0, r6
 801446a:	4639      	mov	r1, r7
 801446c:	f7ec fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014470:	b110      	cbz	r0, 8014478 <_dtoa_r+0x6d8>
 8014472:	9b02      	ldr	r3, [sp, #8]
 8014474:	07d9      	lsls	r1, r3, #31
 8014476:	d40f      	bmi.n	8014498 <_dtoa_r+0x6f8>
 8014478:	4620      	mov	r0, r4
 801447a:	4659      	mov	r1, fp
 801447c:	f000 fe5c 	bl	8015138 <_Bfree>
 8014480:	2300      	movs	r3, #0
 8014482:	702b      	strb	r3, [r5, #0]
 8014484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014486:	f10a 0001 	add.w	r0, sl, #1
 801448a:	6018      	str	r0, [r3, #0]
 801448c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801448e:	2b00      	cmp	r3, #0
 8014490:	f43f acd8 	beq.w	8013e44 <_dtoa_r+0xa4>
 8014494:	601d      	str	r5, [r3, #0]
 8014496:	e4d5      	b.n	8013e44 <_dtoa_r+0xa4>
 8014498:	f8cd a01c 	str.w	sl, [sp, #28]
 801449c:	462b      	mov	r3, r5
 801449e:	461d      	mov	r5, r3
 80144a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80144a4:	2a39      	cmp	r2, #57	; 0x39
 80144a6:	d108      	bne.n	80144ba <_dtoa_r+0x71a>
 80144a8:	9a00      	ldr	r2, [sp, #0]
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d1f7      	bne.n	801449e <_dtoa_r+0x6fe>
 80144ae:	9a07      	ldr	r2, [sp, #28]
 80144b0:	9900      	ldr	r1, [sp, #0]
 80144b2:	3201      	adds	r2, #1
 80144b4:	9207      	str	r2, [sp, #28]
 80144b6:	2230      	movs	r2, #48	; 0x30
 80144b8:	700a      	strb	r2, [r1, #0]
 80144ba:	781a      	ldrb	r2, [r3, #0]
 80144bc:	3201      	adds	r2, #1
 80144be:	701a      	strb	r2, [r3, #0]
 80144c0:	e78c      	b.n	80143dc <_dtoa_r+0x63c>
 80144c2:	4b7f      	ldr	r3, [pc, #508]	; (80146c0 <_dtoa_r+0x920>)
 80144c4:	2200      	movs	r2, #0
 80144c6:	f7ec f897 	bl	80005f8 <__aeabi_dmul>
 80144ca:	2200      	movs	r2, #0
 80144cc:	2300      	movs	r3, #0
 80144ce:	4606      	mov	r6, r0
 80144d0:	460f      	mov	r7, r1
 80144d2:	f7ec faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80144d6:	2800      	cmp	r0, #0
 80144d8:	d09b      	beq.n	8014412 <_dtoa_r+0x672>
 80144da:	e7cd      	b.n	8014478 <_dtoa_r+0x6d8>
 80144dc:	9a08      	ldr	r2, [sp, #32]
 80144de:	2a00      	cmp	r2, #0
 80144e0:	f000 80c4 	beq.w	801466c <_dtoa_r+0x8cc>
 80144e4:	9a05      	ldr	r2, [sp, #20]
 80144e6:	2a01      	cmp	r2, #1
 80144e8:	f300 80a8 	bgt.w	801463c <_dtoa_r+0x89c>
 80144ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80144ee:	2a00      	cmp	r2, #0
 80144f0:	f000 80a0 	beq.w	8014634 <_dtoa_r+0x894>
 80144f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80144f8:	9e06      	ldr	r6, [sp, #24]
 80144fa:	4645      	mov	r5, r8
 80144fc:	9a04      	ldr	r2, [sp, #16]
 80144fe:	2101      	movs	r1, #1
 8014500:	441a      	add	r2, r3
 8014502:	4620      	mov	r0, r4
 8014504:	4498      	add	r8, r3
 8014506:	9204      	str	r2, [sp, #16]
 8014508:	f000 ff1c 	bl	8015344 <__i2b>
 801450c:	4607      	mov	r7, r0
 801450e:	2d00      	cmp	r5, #0
 8014510:	dd0b      	ble.n	801452a <_dtoa_r+0x78a>
 8014512:	9b04      	ldr	r3, [sp, #16]
 8014514:	2b00      	cmp	r3, #0
 8014516:	dd08      	ble.n	801452a <_dtoa_r+0x78a>
 8014518:	42ab      	cmp	r3, r5
 801451a:	9a04      	ldr	r2, [sp, #16]
 801451c:	bfa8      	it	ge
 801451e:	462b      	movge	r3, r5
 8014520:	eba8 0803 	sub.w	r8, r8, r3
 8014524:	1aed      	subs	r5, r5, r3
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	9304      	str	r3, [sp, #16]
 801452a:	9b06      	ldr	r3, [sp, #24]
 801452c:	b1fb      	cbz	r3, 801456e <_dtoa_r+0x7ce>
 801452e:	9b08      	ldr	r3, [sp, #32]
 8014530:	2b00      	cmp	r3, #0
 8014532:	f000 809f 	beq.w	8014674 <_dtoa_r+0x8d4>
 8014536:	2e00      	cmp	r6, #0
 8014538:	dd11      	ble.n	801455e <_dtoa_r+0x7be>
 801453a:	4639      	mov	r1, r7
 801453c:	4632      	mov	r2, r6
 801453e:	4620      	mov	r0, r4
 8014540:	f000 ffbc 	bl	80154bc <__pow5mult>
 8014544:	465a      	mov	r2, fp
 8014546:	4601      	mov	r1, r0
 8014548:	4607      	mov	r7, r0
 801454a:	4620      	mov	r0, r4
 801454c:	f000 ff10 	bl	8015370 <__multiply>
 8014550:	4659      	mov	r1, fp
 8014552:	9007      	str	r0, [sp, #28]
 8014554:	4620      	mov	r0, r4
 8014556:	f000 fdef 	bl	8015138 <_Bfree>
 801455a:	9b07      	ldr	r3, [sp, #28]
 801455c:	469b      	mov	fp, r3
 801455e:	9b06      	ldr	r3, [sp, #24]
 8014560:	1b9a      	subs	r2, r3, r6
 8014562:	d004      	beq.n	801456e <_dtoa_r+0x7ce>
 8014564:	4659      	mov	r1, fp
 8014566:	4620      	mov	r0, r4
 8014568:	f000 ffa8 	bl	80154bc <__pow5mult>
 801456c:	4683      	mov	fp, r0
 801456e:	2101      	movs	r1, #1
 8014570:	4620      	mov	r0, r4
 8014572:	f000 fee7 	bl	8015344 <__i2b>
 8014576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014578:	2b00      	cmp	r3, #0
 801457a:	4606      	mov	r6, r0
 801457c:	dd7c      	ble.n	8014678 <_dtoa_r+0x8d8>
 801457e:	461a      	mov	r2, r3
 8014580:	4601      	mov	r1, r0
 8014582:	4620      	mov	r0, r4
 8014584:	f000 ff9a 	bl	80154bc <__pow5mult>
 8014588:	9b05      	ldr	r3, [sp, #20]
 801458a:	2b01      	cmp	r3, #1
 801458c:	4606      	mov	r6, r0
 801458e:	dd76      	ble.n	801467e <_dtoa_r+0x8de>
 8014590:	2300      	movs	r3, #0
 8014592:	9306      	str	r3, [sp, #24]
 8014594:	6933      	ldr	r3, [r6, #16]
 8014596:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801459a:	6918      	ldr	r0, [r3, #16]
 801459c:	f000 fe82 	bl	80152a4 <__hi0bits>
 80145a0:	f1c0 0020 	rsb	r0, r0, #32
 80145a4:	9b04      	ldr	r3, [sp, #16]
 80145a6:	4418      	add	r0, r3
 80145a8:	f010 001f 	ands.w	r0, r0, #31
 80145ac:	f000 8086 	beq.w	80146bc <_dtoa_r+0x91c>
 80145b0:	f1c0 0320 	rsb	r3, r0, #32
 80145b4:	2b04      	cmp	r3, #4
 80145b6:	dd7f      	ble.n	80146b8 <_dtoa_r+0x918>
 80145b8:	f1c0 001c 	rsb	r0, r0, #28
 80145bc:	9b04      	ldr	r3, [sp, #16]
 80145be:	4403      	add	r3, r0
 80145c0:	4480      	add	r8, r0
 80145c2:	4405      	add	r5, r0
 80145c4:	9304      	str	r3, [sp, #16]
 80145c6:	f1b8 0f00 	cmp.w	r8, #0
 80145ca:	dd05      	ble.n	80145d8 <_dtoa_r+0x838>
 80145cc:	4659      	mov	r1, fp
 80145ce:	4642      	mov	r2, r8
 80145d0:	4620      	mov	r0, r4
 80145d2:	f000 ffcd 	bl	8015570 <__lshift>
 80145d6:	4683      	mov	fp, r0
 80145d8:	9b04      	ldr	r3, [sp, #16]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	dd05      	ble.n	80145ea <_dtoa_r+0x84a>
 80145de:	4631      	mov	r1, r6
 80145e0:	461a      	mov	r2, r3
 80145e2:	4620      	mov	r0, r4
 80145e4:	f000 ffc4 	bl	8015570 <__lshift>
 80145e8:	4606      	mov	r6, r0
 80145ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d069      	beq.n	80146c4 <_dtoa_r+0x924>
 80145f0:	4631      	mov	r1, r6
 80145f2:	4658      	mov	r0, fp
 80145f4:	f001 f828 	bl	8015648 <__mcmp>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	da63      	bge.n	80146c4 <_dtoa_r+0x924>
 80145fc:	2300      	movs	r3, #0
 80145fe:	4659      	mov	r1, fp
 8014600:	220a      	movs	r2, #10
 8014602:	4620      	mov	r0, r4
 8014604:	f000 fdba 	bl	801517c <__multadd>
 8014608:	9b08      	ldr	r3, [sp, #32]
 801460a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801460e:	4683      	mov	fp, r0
 8014610:	2b00      	cmp	r3, #0
 8014612:	f000 818f 	beq.w	8014934 <_dtoa_r+0xb94>
 8014616:	4639      	mov	r1, r7
 8014618:	2300      	movs	r3, #0
 801461a:	220a      	movs	r2, #10
 801461c:	4620      	mov	r0, r4
 801461e:	f000 fdad 	bl	801517c <__multadd>
 8014622:	f1b9 0f00 	cmp.w	r9, #0
 8014626:	4607      	mov	r7, r0
 8014628:	f300 808e 	bgt.w	8014748 <_dtoa_r+0x9a8>
 801462c:	9b05      	ldr	r3, [sp, #20]
 801462e:	2b02      	cmp	r3, #2
 8014630:	dc50      	bgt.n	80146d4 <_dtoa_r+0x934>
 8014632:	e089      	b.n	8014748 <_dtoa_r+0x9a8>
 8014634:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801463a:	e75d      	b.n	80144f8 <_dtoa_r+0x758>
 801463c:	9b01      	ldr	r3, [sp, #4]
 801463e:	1e5e      	subs	r6, r3, #1
 8014640:	9b06      	ldr	r3, [sp, #24]
 8014642:	42b3      	cmp	r3, r6
 8014644:	bfbf      	itttt	lt
 8014646:	9b06      	ldrlt	r3, [sp, #24]
 8014648:	9606      	strlt	r6, [sp, #24]
 801464a:	1af2      	sublt	r2, r6, r3
 801464c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801464e:	bfb6      	itet	lt
 8014650:	189b      	addlt	r3, r3, r2
 8014652:	1b9e      	subge	r6, r3, r6
 8014654:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014656:	9b01      	ldr	r3, [sp, #4]
 8014658:	bfb8      	it	lt
 801465a:	2600      	movlt	r6, #0
 801465c:	2b00      	cmp	r3, #0
 801465e:	bfb5      	itete	lt
 8014660:	eba8 0503 	sublt.w	r5, r8, r3
 8014664:	9b01      	ldrge	r3, [sp, #4]
 8014666:	2300      	movlt	r3, #0
 8014668:	4645      	movge	r5, r8
 801466a:	e747      	b.n	80144fc <_dtoa_r+0x75c>
 801466c:	9e06      	ldr	r6, [sp, #24]
 801466e:	9f08      	ldr	r7, [sp, #32]
 8014670:	4645      	mov	r5, r8
 8014672:	e74c      	b.n	801450e <_dtoa_r+0x76e>
 8014674:	9a06      	ldr	r2, [sp, #24]
 8014676:	e775      	b.n	8014564 <_dtoa_r+0x7c4>
 8014678:	9b05      	ldr	r3, [sp, #20]
 801467a:	2b01      	cmp	r3, #1
 801467c:	dc18      	bgt.n	80146b0 <_dtoa_r+0x910>
 801467e:	9b02      	ldr	r3, [sp, #8]
 8014680:	b9b3      	cbnz	r3, 80146b0 <_dtoa_r+0x910>
 8014682:	9b03      	ldr	r3, [sp, #12]
 8014684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014688:	b9a3      	cbnz	r3, 80146b4 <_dtoa_r+0x914>
 801468a:	9b03      	ldr	r3, [sp, #12]
 801468c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014690:	0d1b      	lsrs	r3, r3, #20
 8014692:	051b      	lsls	r3, r3, #20
 8014694:	b12b      	cbz	r3, 80146a2 <_dtoa_r+0x902>
 8014696:	9b04      	ldr	r3, [sp, #16]
 8014698:	3301      	adds	r3, #1
 801469a:	9304      	str	r3, [sp, #16]
 801469c:	f108 0801 	add.w	r8, r8, #1
 80146a0:	2301      	movs	r3, #1
 80146a2:	9306      	str	r3, [sp, #24]
 80146a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f47f af74 	bne.w	8014594 <_dtoa_r+0x7f4>
 80146ac:	2001      	movs	r0, #1
 80146ae:	e779      	b.n	80145a4 <_dtoa_r+0x804>
 80146b0:	2300      	movs	r3, #0
 80146b2:	e7f6      	b.n	80146a2 <_dtoa_r+0x902>
 80146b4:	9b02      	ldr	r3, [sp, #8]
 80146b6:	e7f4      	b.n	80146a2 <_dtoa_r+0x902>
 80146b8:	d085      	beq.n	80145c6 <_dtoa_r+0x826>
 80146ba:	4618      	mov	r0, r3
 80146bc:	301c      	adds	r0, #28
 80146be:	e77d      	b.n	80145bc <_dtoa_r+0x81c>
 80146c0:	40240000 	.word	0x40240000
 80146c4:	9b01      	ldr	r3, [sp, #4]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	dc38      	bgt.n	801473c <_dtoa_r+0x99c>
 80146ca:	9b05      	ldr	r3, [sp, #20]
 80146cc:	2b02      	cmp	r3, #2
 80146ce:	dd35      	ble.n	801473c <_dtoa_r+0x99c>
 80146d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80146d4:	f1b9 0f00 	cmp.w	r9, #0
 80146d8:	d10d      	bne.n	80146f6 <_dtoa_r+0x956>
 80146da:	4631      	mov	r1, r6
 80146dc:	464b      	mov	r3, r9
 80146de:	2205      	movs	r2, #5
 80146e0:	4620      	mov	r0, r4
 80146e2:	f000 fd4b 	bl	801517c <__multadd>
 80146e6:	4601      	mov	r1, r0
 80146e8:	4606      	mov	r6, r0
 80146ea:	4658      	mov	r0, fp
 80146ec:	f000 ffac 	bl	8015648 <__mcmp>
 80146f0:	2800      	cmp	r0, #0
 80146f2:	f73f adbd 	bgt.w	8014270 <_dtoa_r+0x4d0>
 80146f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f8:	9d00      	ldr	r5, [sp, #0]
 80146fa:	ea6f 0a03 	mvn.w	sl, r3
 80146fe:	f04f 0800 	mov.w	r8, #0
 8014702:	4631      	mov	r1, r6
 8014704:	4620      	mov	r0, r4
 8014706:	f000 fd17 	bl	8015138 <_Bfree>
 801470a:	2f00      	cmp	r7, #0
 801470c:	f43f aeb4 	beq.w	8014478 <_dtoa_r+0x6d8>
 8014710:	f1b8 0f00 	cmp.w	r8, #0
 8014714:	d005      	beq.n	8014722 <_dtoa_r+0x982>
 8014716:	45b8      	cmp	r8, r7
 8014718:	d003      	beq.n	8014722 <_dtoa_r+0x982>
 801471a:	4641      	mov	r1, r8
 801471c:	4620      	mov	r0, r4
 801471e:	f000 fd0b 	bl	8015138 <_Bfree>
 8014722:	4639      	mov	r1, r7
 8014724:	4620      	mov	r0, r4
 8014726:	f000 fd07 	bl	8015138 <_Bfree>
 801472a:	e6a5      	b.n	8014478 <_dtoa_r+0x6d8>
 801472c:	2600      	movs	r6, #0
 801472e:	4637      	mov	r7, r6
 8014730:	e7e1      	b.n	80146f6 <_dtoa_r+0x956>
 8014732:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014734:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014738:	4637      	mov	r7, r6
 801473a:	e599      	b.n	8014270 <_dtoa_r+0x4d0>
 801473c:	9b08      	ldr	r3, [sp, #32]
 801473e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014742:	2b00      	cmp	r3, #0
 8014744:	f000 80fd 	beq.w	8014942 <_dtoa_r+0xba2>
 8014748:	2d00      	cmp	r5, #0
 801474a:	dd05      	ble.n	8014758 <_dtoa_r+0x9b8>
 801474c:	4639      	mov	r1, r7
 801474e:	462a      	mov	r2, r5
 8014750:	4620      	mov	r0, r4
 8014752:	f000 ff0d 	bl	8015570 <__lshift>
 8014756:	4607      	mov	r7, r0
 8014758:	9b06      	ldr	r3, [sp, #24]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d05c      	beq.n	8014818 <_dtoa_r+0xa78>
 801475e:	6879      	ldr	r1, [r7, #4]
 8014760:	4620      	mov	r0, r4
 8014762:	f000 fca9 	bl	80150b8 <_Balloc>
 8014766:	4605      	mov	r5, r0
 8014768:	b928      	cbnz	r0, 8014776 <_dtoa_r+0x9d6>
 801476a:	4b80      	ldr	r3, [pc, #512]	; (801496c <_dtoa_r+0xbcc>)
 801476c:	4602      	mov	r2, r0
 801476e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014772:	f7ff bb2e 	b.w	8013dd2 <_dtoa_r+0x32>
 8014776:	693a      	ldr	r2, [r7, #16]
 8014778:	3202      	adds	r2, #2
 801477a:	0092      	lsls	r2, r2, #2
 801477c:	f107 010c 	add.w	r1, r7, #12
 8014780:	300c      	adds	r0, #12
 8014782:	f7fd fe4f 	bl	8012424 <memcpy>
 8014786:	2201      	movs	r2, #1
 8014788:	4629      	mov	r1, r5
 801478a:	4620      	mov	r0, r4
 801478c:	f000 fef0 	bl	8015570 <__lshift>
 8014790:	9b00      	ldr	r3, [sp, #0]
 8014792:	3301      	adds	r3, #1
 8014794:	9301      	str	r3, [sp, #4]
 8014796:	9b00      	ldr	r3, [sp, #0]
 8014798:	444b      	add	r3, r9
 801479a:	9307      	str	r3, [sp, #28]
 801479c:	9b02      	ldr	r3, [sp, #8]
 801479e:	f003 0301 	and.w	r3, r3, #1
 80147a2:	46b8      	mov	r8, r7
 80147a4:	9306      	str	r3, [sp, #24]
 80147a6:	4607      	mov	r7, r0
 80147a8:	9b01      	ldr	r3, [sp, #4]
 80147aa:	4631      	mov	r1, r6
 80147ac:	3b01      	subs	r3, #1
 80147ae:	4658      	mov	r0, fp
 80147b0:	9302      	str	r3, [sp, #8]
 80147b2:	f7ff fa69 	bl	8013c88 <quorem>
 80147b6:	4603      	mov	r3, r0
 80147b8:	3330      	adds	r3, #48	; 0x30
 80147ba:	9004      	str	r0, [sp, #16]
 80147bc:	4641      	mov	r1, r8
 80147be:	4658      	mov	r0, fp
 80147c0:	9308      	str	r3, [sp, #32]
 80147c2:	f000 ff41 	bl	8015648 <__mcmp>
 80147c6:	463a      	mov	r2, r7
 80147c8:	4681      	mov	r9, r0
 80147ca:	4631      	mov	r1, r6
 80147cc:	4620      	mov	r0, r4
 80147ce:	f000 ff57 	bl	8015680 <__mdiff>
 80147d2:	68c2      	ldr	r2, [r0, #12]
 80147d4:	9b08      	ldr	r3, [sp, #32]
 80147d6:	4605      	mov	r5, r0
 80147d8:	bb02      	cbnz	r2, 801481c <_dtoa_r+0xa7c>
 80147da:	4601      	mov	r1, r0
 80147dc:	4658      	mov	r0, fp
 80147de:	f000 ff33 	bl	8015648 <__mcmp>
 80147e2:	9b08      	ldr	r3, [sp, #32]
 80147e4:	4602      	mov	r2, r0
 80147e6:	4629      	mov	r1, r5
 80147e8:	4620      	mov	r0, r4
 80147ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80147ee:	f000 fca3 	bl	8015138 <_Bfree>
 80147f2:	9b05      	ldr	r3, [sp, #20]
 80147f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147f6:	9d01      	ldr	r5, [sp, #4]
 80147f8:	ea43 0102 	orr.w	r1, r3, r2
 80147fc:	9b06      	ldr	r3, [sp, #24]
 80147fe:	430b      	orrs	r3, r1
 8014800:	9b08      	ldr	r3, [sp, #32]
 8014802:	d10d      	bne.n	8014820 <_dtoa_r+0xa80>
 8014804:	2b39      	cmp	r3, #57	; 0x39
 8014806:	d029      	beq.n	801485c <_dtoa_r+0xabc>
 8014808:	f1b9 0f00 	cmp.w	r9, #0
 801480c:	dd01      	ble.n	8014812 <_dtoa_r+0xa72>
 801480e:	9b04      	ldr	r3, [sp, #16]
 8014810:	3331      	adds	r3, #49	; 0x31
 8014812:	9a02      	ldr	r2, [sp, #8]
 8014814:	7013      	strb	r3, [r2, #0]
 8014816:	e774      	b.n	8014702 <_dtoa_r+0x962>
 8014818:	4638      	mov	r0, r7
 801481a:	e7b9      	b.n	8014790 <_dtoa_r+0x9f0>
 801481c:	2201      	movs	r2, #1
 801481e:	e7e2      	b.n	80147e6 <_dtoa_r+0xa46>
 8014820:	f1b9 0f00 	cmp.w	r9, #0
 8014824:	db06      	blt.n	8014834 <_dtoa_r+0xa94>
 8014826:	9905      	ldr	r1, [sp, #20]
 8014828:	ea41 0909 	orr.w	r9, r1, r9
 801482c:	9906      	ldr	r1, [sp, #24]
 801482e:	ea59 0101 	orrs.w	r1, r9, r1
 8014832:	d120      	bne.n	8014876 <_dtoa_r+0xad6>
 8014834:	2a00      	cmp	r2, #0
 8014836:	ddec      	ble.n	8014812 <_dtoa_r+0xa72>
 8014838:	4659      	mov	r1, fp
 801483a:	2201      	movs	r2, #1
 801483c:	4620      	mov	r0, r4
 801483e:	9301      	str	r3, [sp, #4]
 8014840:	f000 fe96 	bl	8015570 <__lshift>
 8014844:	4631      	mov	r1, r6
 8014846:	4683      	mov	fp, r0
 8014848:	f000 fefe 	bl	8015648 <__mcmp>
 801484c:	2800      	cmp	r0, #0
 801484e:	9b01      	ldr	r3, [sp, #4]
 8014850:	dc02      	bgt.n	8014858 <_dtoa_r+0xab8>
 8014852:	d1de      	bne.n	8014812 <_dtoa_r+0xa72>
 8014854:	07da      	lsls	r2, r3, #31
 8014856:	d5dc      	bpl.n	8014812 <_dtoa_r+0xa72>
 8014858:	2b39      	cmp	r3, #57	; 0x39
 801485a:	d1d8      	bne.n	801480e <_dtoa_r+0xa6e>
 801485c:	9a02      	ldr	r2, [sp, #8]
 801485e:	2339      	movs	r3, #57	; 0x39
 8014860:	7013      	strb	r3, [r2, #0]
 8014862:	462b      	mov	r3, r5
 8014864:	461d      	mov	r5, r3
 8014866:	3b01      	subs	r3, #1
 8014868:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801486c:	2a39      	cmp	r2, #57	; 0x39
 801486e:	d050      	beq.n	8014912 <_dtoa_r+0xb72>
 8014870:	3201      	adds	r2, #1
 8014872:	701a      	strb	r2, [r3, #0]
 8014874:	e745      	b.n	8014702 <_dtoa_r+0x962>
 8014876:	2a00      	cmp	r2, #0
 8014878:	dd03      	ble.n	8014882 <_dtoa_r+0xae2>
 801487a:	2b39      	cmp	r3, #57	; 0x39
 801487c:	d0ee      	beq.n	801485c <_dtoa_r+0xabc>
 801487e:	3301      	adds	r3, #1
 8014880:	e7c7      	b.n	8014812 <_dtoa_r+0xa72>
 8014882:	9a01      	ldr	r2, [sp, #4]
 8014884:	9907      	ldr	r1, [sp, #28]
 8014886:	f802 3c01 	strb.w	r3, [r2, #-1]
 801488a:	428a      	cmp	r2, r1
 801488c:	d02a      	beq.n	80148e4 <_dtoa_r+0xb44>
 801488e:	4659      	mov	r1, fp
 8014890:	2300      	movs	r3, #0
 8014892:	220a      	movs	r2, #10
 8014894:	4620      	mov	r0, r4
 8014896:	f000 fc71 	bl	801517c <__multadd>
 801489a:	45b8      	cmp	r8, r7
 801489c:	4683      	mov	fp, r0
 801489e:	f04f 0300 	mov.w	r3, #0
 80148a2:	f04f 020a 	mov.w	r2, #10
 80148a6:	4641      	mov	r1, r8
 80148a8:	4620      	mov	r0, r4
 80148aa:	d107      	bne.n	80148bc <_dtoa_r+0xb1c>
 80148ac:	f000 fc66 	bl	801517c <__multadd>
 80148b0:	4680      	mov	r8, r0
 80148b2:	4607      	mov	r7, r0
 80148b4:	9b01      	ldr	r3, [sp, #4]
 80148b6:	3301      	adds	r3, #1
 80148b8:	9301      	str	r3, [sp, #4]
 80148ba:	e775      	b.n	80147a8 <_dtoa_r+0xa08>
 80148bc:	f000 fc5e 	bl	801517c <__multadd>
 80148c0:	4639      	mov	r1, r7
 80148c2:	4680      	mov	r8, r0
 80148c4:	2300      	movs	r3, #0
 80148c6:	220a      	movs	r2, #10
 80148c8:	4620      	mov	r0, r4
 80148ca:	f000 fc57 	bl	801517c <__multadd>
 80148ce:	4607      	mov	r7, r0
 80148d0:	e7f0      	b.n	80148b4 <_dtoa_r+0xb14>
 80148d2:	f1b9 0f00 	cmp.w	r9, #0
 80148d6:	9a00      	ldr	r2, [sp, #0]
 80148d8:	bfcc      	ite	gt
 80148da:	464d      	movgt	r5, r9
 80148dc:	2501      	movle	r5, #1
 80148de:	4415      	add	r5, r2
 80148e0:	f04f 0800 	mov.w	r8, #0
 80148e4:	4659      	mov	r1, fp
 80148e6:	2201      	movs	r2, #1
 80148e8:	4620      	mov	r0, r4
 80148ea:	9301      	str	r3, [sp, #4]
 80148ec:	f000 fe40 	bl	8015570 <__lshift>
 80148f0:	4631      	mov	r1, r6
 80148f2:	4683      	mov	fp, r0
 80148f4:	f000 fea8 	bl	8015648 <__mcmp>
 80148f8:	2800      	cmp	r0, #0
 80148fa:	dcb2      	bgt.n	8014862 <_dtoa_r+0xac2>
 80148fc:	d102      	bne.n	8014904 <_dtoa_r+0xb64>
 80148fe:	9b01      	ldr	r3, [sp, #4]
 8014900:	07db      	lsls	r3, r3, #31
 8014902:	d4ae      	bmi.n	8014862 <_dtoa_r+0xac2>
 8014904:	462b      	mov	r3, r5
 8014906:	461d      	mov	r5, r3
 8014908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801490c:	2a30      	cmp	r2, #48	; 0x30
 801490e:	d0fa      	beq.n	8014906 <_dtoa_r+0xb66>
 8014910:	e6f7      	b.n	8014702 <_dtoa_r+0x962>
 8014912:	9a00      	ldr	r2, [sp, #0]
 8014914:	429a      	cmp	r2, r3
 8014916:	d1a5      	bne.n	8014864 <_dtoa_r+0xac4>
 8014918:	f10a 0a01 	add.w	sl, sl, #1
 801491c:	2331      	movs	r3, #49	; 0x31
 801491e:	e779      	b.n	8014814 <_dtoa_r+0xa74>
 8014920:	4b13      	ldr	r3, [pc, #76]	; (8014970 <_dtoa_r+0xbd0>)
 8014922:	f7ff baaf 	b.w	8013e84 <_dtoa_r+0xe4>
 8014926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014928:	2b00      	cmp	r3, #0
 801492a:	f47f aa86 	bne.w	8013e3a <_dtoa_r+0x9a>
 801492e:	4b11      	ldr	r3, [pc, #68]	; (8014974 <_dtoa_r+0xbd4>)
 8014930:	f7ff baa8 	b.w	8013e84 <_dtoa_r+0xe4>
 8014934:	f1b9 0f00 	cmp.w	r9, #0
 8014938:	dc03      	bgt.n	8014942 <_dtoa_r+0xba2>
 801493a:	9b05      	ldr	r3, [sp, #20]
 801493c:	2b02      	cmp	r3, #2
 801493e:	f73f aec9 	bgt.w	80146d4 <_dtoa_r+0x934>
 8014942:	9d00      	ldr	r5, [sp, #0]
 8014944:	4631      	mov	r1, r6
 8014946:	4658      	mov	r0, fp
 8014948:	f7ff f99e 	bl	8013c88 <quorem>
 801494c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014950:	f805 3b01 	strb.w	r3, [r5], #1
 8014954:	9a00      	ldr	r2, [sp, #0]
 8014956:	1aaa      	subs	r2, r5, r2
 8014958:	4591      	cmp	r9, r2
 801495a:	ddba      	ble.n	80148d2 <_dtoa_r+0xb32>
 801495c:	4659      	mov	r1, fp
 801495e:	2300      	movs	r3, #0
 8014960:	220a      	movs	r2, #10
 8014962:	4620      	mov	r0, r4
 8014964:	f000 fc0a 	bl	801517c <__multadd>
 8014968:	4683      	mov	fp, r0
 801496a:	e7eb      	b.n	8014944 <_dtoa_r+0xba4>
 801496c:	08019209 	.word	0x08019209
 8014970:	08016dbb 	.word	0x08016dbb
 8014974:	0801919d 	.word	0x0801919d

08014978 <fiprintf>:
 8014978:	b40e      	push	{r1, r2, r3}
 801497a:	b503      	push	{r0, r1, lr}
 801497c:	4601      	mov	r1, r0
 801497e:	ab03      	add	r3, sp, #12
 8014980:	4805      	ldr	r0, [pc, #20]	; (8014998 <fiprintf+0x20>)
 8014982:	f853 2b04 	ldr.w	r2, [r3], #4
 8014986:	6800      	ldr	r0, [r0, #0]
 8014988:	9301      	str	r3, [sp, #4]
 801498a:	f001 fa8f 	bl	8015eac <_vfiprintf_r>
 801498e:	b002      	add	sp, #8
 8014990:	f85d eb04 	ldr.w	lr, [sp], #4
 8014994:	b003      	add	sp, #12
 8014996:	4770      	bx	lr
 8014998:	20000194 	.word	0x20000194

0801499c <rshift>:
 801499c:	6903      	ldr	r3, [r0, #16]
 801499e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80149a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80149aa:	f100 0414 	add.w	r4, r0, #20
 80149ae:	dd45      	ble.n	8014a3c <rshift+0xa0>
 80149b0:	f011 011f 	ands.w	r1, r1, #31
 80149b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80149b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80149bc:	d10c      	bne.n	80149d8 <rshift+0x3c>
 80149be:	f100 0710 	add.w	r7, r0, #16
 80149c2:	4629      	mov	r1, r5
 80149c4:	42b1      	cmp	r1, r6
 80149c6:	d334      	bcc.n	8014a32 <rshift+0x96>
 80149c8:	1a9b      	subs	r3, r3, r2
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	1eea      	subs	r2, r5, #3
 80149ce:	4296      	cmp	r6, r2
 80149d0:	bf38      	it	cc
 80149d2:	2300      	movcc	r3, #0
 80149d4:	4423      	add	r3, r4
 80149d6:	e015      	b.n	8014a04 <rshift+0x68>
 80149d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80149dc:	f1c1 0820 	rsb	r8, r1, #32
 80149e0:	40cf      	lsrs	r7, r1
 80149e2:	f105 0e04 	add.w	lr, r5, #4
 80149e6:	46a1      	mov	r9, r4
 80149e8:	4576      	cmp	r6, lr
 80149ea:	46f4      	mov	ip, lr
 80149ec:	d815      	bhi.n	8014a1a <rshift+0x7e>
 80149ee:	1a9b      	subs	r3, r3, r2
 80149f0:	009a      	lsls	r2, r3, #2
 80149f2:	3a04      	subs	r2, #4
 80149f4:	3501      	adds	r5, #1
 80149f6:	42ae      	cmp	r6, r5
 80149f8:	bf38      	it	cc
 80149fa:	2200      	movcc	r2, #0
 80149fc:	18a3      	adds	r3, r4, r2
 80149fe:	50a7      	str	r7, [r4, r2]
 8014a00:	b107      	cbz	r7, 8014a04 <rshift+0x68>
 8014a02:	3304      	adds	r3, #4
 8014a04:	1b1a      	subs	r2, r3, r4
 8014a06:	42a3      	cmp	r3, r4
 8014a08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014a0c:	bf08      	it	eq
 8014a0e:	2300      	moveq	r3, #0
 8014a10:	6102      	str	r2, [r0, #16]
 8014a12:	bf08      	it	eq
 8014a14:	6143      	streq	r3, [r0, #20]
 8014a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a1a:	f8dc c000 	ldr.w	ip, [ip]
 8014a1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014a22:	ea4c 0707 	orr.w	r7, ip, r7
 8014a26:	f849 7b04 	str.w	r7, [r9], #4
 8014a2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014a2e:	40cf      	lsrs	r7, r1
 8014a30:	e7da      	b.n	80149e8 <rshift+0x4c>
 8014a32:	f851 cb04 	ldr.w	ip, [r1], #4
 8014a36:	f847 cf04 	str.w	ip, [r7, #4]!
 8014a3a:	e7c3      	b.n	80149c4 <rshift+0x28>
 8014a3c:	4623      	mov	r3, r4
 8014a3e:	e7e1      	b.n	8014a04 <rshift+0x68>

08014a40 <__hexdig_fun>:
 8014a40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014a44:	2b09      	cmp	r3, #9
 8014a46:	d802      	bhi.n	8014a4e <__hexdig_fun+0xe>
 8014a48:	3820      	subs	r0, #32
 8014a4a:	b2c0      	uxtb	r0, r0
 8014a4c:	4770      	bx	lr
 8014a4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014a52:	2b05      	cmp	r3, #5
 8014a54:	d801      	bhi.n	8014a5a <__hexdig_fun+0x1a>
 8014a56:	3847      	subs	r0, #71	; 0x47
 8014a58:	e7f7      	b.n	8014a4a <__hexdig_fun+0xa>
 8014a5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014a5e:	2b05      	cmp	r3, #5
 8014a60:	d801      	bhi.n	8014a66 <__hexdig_fun+0x26>
 8014a62:	3827      	subs	r0, #39	; 0x27
 8014a64:	e7f1      	b.n	8014a4a <__hexdig_fun+0xa>
 8014a66:	2000      	movs	r0, #0
 8014a68:	4770      	bx	lr
	...

08014a6c <__gethex>:
 8014a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a70:	ed2d 8b02 	vpush	{d8}
 8014a74:	b089      	sub	sp, #36	; 0x24
 8014a76:	ee08 0a10 	vmov	s16, r0
 8014a7a:	9304      	str	r3, [sp, #16]
 8014a7c:	4bbc      	ldr	r3, [pc, #752]	; (8014d70 <__gethex+0x304>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	9301      	str	r3, [sp, #4]
 8014a82:	4618      	mov	r0, r3
 8014a84:	468b      	mov	fp, r1
 8014a86:	4690      	mov	r8, r2
 8014a88:	f7eb fba2 	bl	80001d0 <strlen>
 8014a8c:	9b01      	ldr	r3, [sp, #4]
 8014a8e:	f8db 2000 	ldr.w	r2, [fp]
 8014a92:	4403      	add	r3, r0
 8014a94:	4682      	mov	sl, r0
 8014a96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014a9a:	9305      	str	r3, [sp, #20]
 8014a9c:	1c93      	adds	r3, r2, #2
 8014a9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014aa2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014aa6:	32fe      	adds	r2, #254	; 0xfe
 8014aa8:	18d1      	adds	r1, r2, r3
 8014aaa:	461f      	mov	r7, r3
 8014aac:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014ab0:	9100      	str	r1, [sp, #0]
 8014ab2:	2830      	cmp	r0, #48	; 0x30
 8014ab4:	d0f8      	beq.n	8014aa8 <__gethex+0x3c>
 8014ab6:	f7ff ffc3 	bl	8014a40 <__hexdig_fun>
 8014aba:	4604      	mov	r4, r0
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d13a      	bne.n	8014b36 <__gethex+0xca>
 8014ac0:	9901      	ldr	r1, [sp, #4]
 8014ac2:	4652      	mov	r2, sl
 8014ac4:	4638      	mov	r0, r7
 8014ac6:	f001 fb41 	bl	801614c <strncmp>
 8014aca:	4605      	mov	r5, r0
 8014acc:	2800      	cmp	r0, #0
 8014ace:	d168      	bne.n	8014ba2 <__gethex+0x136>
 8014ad0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014ad4:	eb07 060a 	add.w	r6, r7, sl
 8014ad8:	f7ff ffb2 	bl	8014a40 <__hexdig_fun>
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d062      	beq.n	8014ba6 <__gethex+0x13a>
 8014ae0:	4633      	mov	r3, r6
 8014ae2:	7818      	ldrb	r0, [r3, #0]
 8014ae4:	2830      	cmp	r0, #48	; 0x30
 8014ae6:	461f      	mov	r7, r3
 8014ae8:	f103 0301 	add.w	r3, r3, #1
 8014aec:	d0f9      	beq.n	8014ae2 <__gethex+0x76>
 8014aee:	f7ff ffa7 	bl	8014a40 <__hexdig_fun>
 8014af2:	2301      	movs	r3, #1
 8014af4:	fab0 f480 	clz	r4, r0
 8014af8:	0964      	lsrs	r4, r4, #5
 8014afa:	4635      	mov	r5, r6
 8014afc:	9300      	str	r3, [sp, #0]
 8014afe:	463a      	mov	r2, r7
 8014b00:	4616      	mov	r6, r2
 8014b02:	3201      	adds	r2, #1
 8014b04:	7830      	ldrb	r0, [r6, #0]
 8014b06:	f7ff ff9b 	bl	8014a40 <__hexdig_fun>
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	d1f8      	bne.n	8014b00 <__gethex+0x94>
 8014b0e:	9901      	ldr	r1, [sp, #4]
 8014b10:	4652      	mov	r2, sl
 8014b12:	4630      	mov	r0, r6
 8014b14:	f001 fb1a 	bl	801614c <strncmp>
 8014b18:	b980      	cbnz	r0, 8014b3c <__gethex+0xd0>
 8014b1a:	b94d      	cbnz	r5, 8014b30 <__gethex+0xc4>
 8014b1c:	eb06 050a 	add.w	r5, r6, sl
 8014b20:	462a      	mov	r2, r5
 8014b22:	4616      	mov	r6, r2
 8014b24:	3201      	adds	r2, #1
 8014b26:	7830      	ldrb	r0, [r6, #0]
 8014b28:	f7ff ff8a 	bl	8014a40 <__hexdig_fun>
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	d1f8      	bne.n	8014b22 <__gethex+0xb6>
 8014b30:	1bad      	subs	r5, r5, r6
 8014b32:	00ad      	lsls	r5, r5, #2
 8014b34:	e004      	b.n	8014b40 <__gethex+0xd4>
 8014b36:	2400      	movs	r4, #0
 8014b38:	4625      	mov	r5, r4
 8014b3a:	e7e0      	b.n	8014afe <__gethex+0x92>
 8014b3c:	2d00      	cmp	r5, #0
 8014b3e:	d1f7      	bne.n	8014b30 <__gethex+0xc4>
 8014b40:	7833      	ldrb	r3, [r6, #0]
 8014b42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014b46:	2b50      	cmp	r3, #80	; 0x50
 8014b48:	d13b      	bne.n	8014bc2 <__gethex+0x156>
 8014b4a:	7873      	ldrb	r3, [r6, #1]
 8014b4c:	2b2b      	cmp	r3, #43	; 0x2b
 8014b4e:	d02c      	beq.n	8014baa <__gethex+0x13e>
 8014b50:	2b2d      	cmp	r3, #45	; 0x2d
 8014b52:	d02e      	beq.n	8014bb2 <__gethex+0x146>
 8014b54:	1c71      	adds	r1, r6, #1
 8014b56:	f04f 0900 	mov.w	r9, #0
 8014b5a:	7808      	ldrb	r0, [r1, #0]
 8014b5c:	f7ff ff70 	bl	8014a40 <__hexdig_fun>
 8014b60:	1e43      	subs	r3, r0, #1
 8014b62:	b2db      	uxtb	r3, r3
 8014b64:	2b18      	cmp	r3, #24
 8014b66:	d82c      	bhi.n	8014bc2 <__gethex+0x156>
 8014b68:	f1a0 0210 	sub.w	r2, r0, #16
 8014b6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014b70:	f7ff ff66 	bl	8014a40 <__hexdig_fun>
 8014b74:	1e43      	subs	r3, r0, #1
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	2b18      	cmp	r3, #24
 8014b7a:	d91d      	bls.n	8014bb8 <__gethex+0x14c>
 8014b7c:	f1b9 0f00 	cmp.w	r9, #0
 8014b80:	d000      	beq.n	8014b84 <__gethex+0x118>
 8014b82:	4252      	negs	r2, r2
 8014b84:	4415      	add	r5, r2
 8014b86:	f8cb 1000 	str.w	r1, [fp]
 8014b8a:	b1e4      	cbz	r4, 8014bc6 <__gethex+0x15a>
 8014b8c:	9b00      	ldr	r3, [sp, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	bf14      	ite	ne
 8014b92:	2700      	movne	r7, #0
 8014b94:	2706      	moveq	r7, #6
 8014b96:	4638      	mov	r0, r7
 8014b98:	b009      	add	sp, #36	; 0x24
 8014b9a:	ecbd 8b02 	vpop	{d8}
 8014b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba2:	463e      	mov	r6, r7
 8014ba4:	4625      	mov	r5, r4
 8014ba6:	2401      	movs	r4, #1
 8014ba8:	e7ca      	b.n	8014b40 <__gethex+0xd4>
 8014baa:	f04f 0900 	mov.w	r9, #0
 8014bae:	1cb1      	adds	r1, r6, #2
 8014bb0:	e7d3      	b.n	8014b5a <__gethex+0xee>
 8014bb2:	f04f 0901 	mov.w	r9, #1
 8014bb6:	e7fa      	b.n	8014bae <__gethex+0x142>
 8014bb8:	230a      	movs	r3, #10
 8014bba:	fb03 0202 	mla	r2, r3, r2, r0
 8014bbe:	3a10      	subs	r2, #16
 8014bc0:	e7d4      	b.n	8014b6c <__gethex+0x100>
 8014bc2:	4631      	mov	r1, r6
 8014bc4:	e7df      	b.n	8014b86 <__gethex+0x11a>
 8014bc6:	1bf3      	subs	r3, r6, r7
 8014bc8:	3b01      	subs	r3, #1
 8014bca:	4621      	mov	r1, r4
 8014bcc:	2b07      	cmp	r3, #7
 8014bce:	dc0b      	bgt.n	8014be8 <__gethex+0x17c>
 8014bd0:	ee18 0a10 	vmov	r0, s16
 8014bd4:	f000 fa70 	bl	80150b8 <_Balloc>
 8014bd8:	4604      	mov	r4, r0
 8014bda:	b940      	cbnz	r0, 8014bee <__gethex+0x182>
 8014bdc:	4b65      	ldr	r3, [pc, #404]	; (8014d74 <__gethex+0x308>)
 8014bde:	4602      	mov	r2, r0
 8014be0:	21de      	movs	r1, #222	; 0xde
 8014be2:	4865      	ldr	r0, [pc, #404]	; (8014d78 <__gethex+0x30c>)
 8014be4:	f7ff f832 	bl	8013c4c <__assert_func>
 8014be8:	3101      	adds	r1, #1
 8014bea:	105b      	asrs	r3, r3, #1
 8014bec:	e7ee      	b.n	8014bcc <__gethex+0x160>
 8014bee:	f100 0914 	add.w	r9, r0, #20
 8014bf2:	f04f 0b00 	mov.w	fp, #0
 8014bf6:	f1ca 0301 	rsb	r3, sl, #1
 8014bfa:	f8cd 9008 	str.w	r9, [sp, #8]
 8014bfe:	f8cd b000 	str.w	fp, [sp]
 8014c02:	9306      	str	r3, [sp, #24]
 8014c04:	42b7      	cmp	r7, r6
 8014c06:	d340      	bcc.n	8014c8a <__gethex+0x21e>
 8014c08:	9802      	ldr	r0, [sp, #8]
 8014c0a:	9b00      	ldr	r3, [sp, #0]
 8014c0c:	f840 3b04 	str.w	r3, [r0], #4
 8014c10:	eba0 0009 	sub.w	r0, r0, r9
 8014c14:	1080      	asrs	r0, r0, #2
 8014c16:	0146      	lsls	r6, r0, #5
 8014c18:	6120      	str	r0, [r4, #16]
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f000 fb42 	bl	80152a4 <__hi0bits>
 8014c20:	1a30      	subs	r0, r6, r0
 8014c22:	f8d8 6000 	ldr.w	r6, [r8]
 8014c26:	42b0      	cmp	r0, r6
 8014c28:	dd63      	ble.n	8014cf2 <__gethex+0x286>
 8014c2a:	1b87      	subs	r7, r0, r6
 8014c2c:	4639      	mov	r1, r7
 8014c2e:	4620      	mov	r0, r4
 8014c30:	f000 fedc 	bl	80159ec <__any_on>
 8014c34:	4682      	mov	sl, r0
 8014c36:	b1a8      	cbz	r0, 8014c64 <__gethex+0x1f8>
 8014c38:	1e7b      	subs	r3, r7, #1
 8014c3a:	1159      	asrs	r1, r3, #5
 8014c3c:	f003 021f 	and.w	r2, r3, #31
 8014c40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014c44:	f04f 0a01 	mov.w	sl, #1
 8014c48:	fa0a f202 	lsl.w	r2, sl, r2
 8014c4c:	420a      	tst	r2, r1
 8014c4e:	d009      	beq.n	8014c64 <__gethex+0x1f8>
 8014c50:	4553      	cmp	r3, sl
 8014c52:	dd05      	ble.n	8014c60 <__gethex+0x1f4>
 8014c54:	1eb9      	subs	r1, r7, #2
 8014c56:	4620      	mov	r0, r4
 8014c58:	f000 fec8 	bl	80159ec <__any_on>
 8014c5c:	2800      	cmp	r0, #0
 8014c5e:	d145      	bne.n	8014cec <__gethex+0x280>
 8014c60:	f04f 0a02 	mov.w	sl, #2
 8014c64:	4639      	mov	r1, r7
 8014c66:	4620      	mov	r0, r4
 8014c68:	f7ff fe98 	bl	801499c <rshift>
 8014c6c:	443d      	add	r5, r7
 8014c6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c72:	42ab      	cmp	r3, r5
 8014c74:	da4c      	bge.n	8014d10 <__gethex+0x2a4>
 8014c76:	ee18 0a10 	vmov	r0, s16
 8014c7a:	4621      	mov	r1, r4
 8014c7c:	f000 fa5c 	bl	8015138 <_Bfree>
 8014c80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c82:	2300      	movs	r3, #0
 8014c84:	6013      	str	r3, [r2, #0]
 8014c86:	27a3      	movs	r7, #163	; 0xa3
 8014c88:	e785      	b.n	8014b96 <__gethex+0x12a>
 8014c8a:	1e73      	subs	r3, r6, #1
 8014c8c:	9a05      	ldr	r2, [sp, #20]
 8014c8e:	9303      	str	r3, [sp, #12]
 8014c90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014c94:	4293      	cmp	r3, r2
 8014c96:	d019      	beq.n	8014ccc <__gethex+0x260>
 8014c98:	f1bb 0f20 	cmp.w	fp, #32
 8014c9c:	d107      	bne.n	8014cae <__gethex+0x242>
 8014c9e:	9b02      	ldr	r3, [sp, #8]
 8014ca0:	9a00      	ldr	r2, [sp, #0]
 8014ca2:	f843 2b04 	str.w	r2, [r3], #4
 8014ca6:	9302      	str	r3, [sp, #8]
 8014ca8:	2300      	movs	r3, #0
 8014caa:	9300      	str	r3, [sp, #0]
 8014cac:	469b      	mov	fp, r3
 8014cae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014cb2:	f7ff fec5 	bl	8014a40 <__hexdig_fun>
 8014cb6:	9b00      	ldr	r3, [sp, #0]
 8014cb8:	f000 000f 	and.w	r0, r0, #15
 8014cbc:	fa00 f00b 	lsl.w	r0, r0, fp
 8014cc0:	4303      	orrs	r3, r0
 8014cc2:	9300      	str	r3, [sp, #0]
 8014cc4:	f10b 0b04 	add.w	fp, fp, #4
 8014cc8:	9b03      	ldr	r3, [sp, #12]
 8014cca:	e00d      	b.n	8014ce8 <__gethex+0x27c>
 8014ccc:	9b03      	ldr	r3, [sp, #12]
 8014cce:	9a06      	ldr	r2, [sp, #24]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	42bb      	cmp	r3, r7
 8014cd4:	d3e0      	bcc.n	8014c98 <__gethex+0x22c>
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	9901      	ldr	r1, [sp, #4]
 8014cda:	9307      	str	r3, [sp, #28]
 8014cdc:	4652      	mov	r2, sl
 8014cde:	f001 fa35 	bl	801614c <strncmp>
 8014ce2:	9b07      	ldr	r3, [sp, #28]
 8014ce4:	2800      	cmp	r0, #0
 8014ce6:	d1d7      	bne.n	8014c98 <__gethex+0x22c>
 8014ce8:	461e      	mov	r6, r3
 8014cea:	e78b      	b.n	8014c04 <__gethex+0x198>
 8014cec:	f04f 0a03 	mov.w	sl, #3
 8014cf0:	e7b8      	b.n	8014c64 <__gethex+0x1f8>
 8014cf2:	da0a      	bge.n	8014d0a <__gethex+0x29e>
 8014cf4:	1a37      	subs	r7, r6, r0
 8014cf6:	4621      	mov	r1, r4
 8014cf8:	ee18 0a10 	vmov	r0, s16
 8014cfc:	463a      	mov	r2, r7
 8014cfe:	f000 fc37 	bl	8015570 <__lshift>
 8014d02:	1bed      	subs	r5, r5, r7
 8014d04:	4604      	mov	r4, r0
 8014d06:	f100 0914 	add.w	r9, r0, #20
 8014d0a:	f04f 0a00 	mov.w	sl, #0
 8014d0e:	e7ae      	b.n	8014c6e <__gethex+0x202>
 8014d10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014d14:	42a8      	cmp	r0, r5
 8014d16:	dd72      	ble.n	8014dfe <__gethex+0x392>
 8014d18:	1b45      	subs	r5, r0, r5
 8014d1a:	42ae      	cmp	r6, r5
 8014d1c:	dc36      	bgt.n	8014d8c <__gethex+0x320>
 8014d1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d22:	2b02      	cmp	r3, #2
 8014d24:	d02a      	beq.n	8014d7c <__gethex+0x310>
 8014d26:	2b03      	cmp	r3, #3
 8014d28:	d02c      	beq.n	8014d84 <__gethex+0x318>
 8014d2a:	2b01      	cmp	r3, #1
 8014d2c:	d115      	bne.n	8014d5a <__gethex+0x2ee>
 8014d2e:	42ae      	cmp	r6, r5
 8014d30:	d113      	bne.n	8014d5a <__gethex+0x2ee>
 8014d32:	2e01      	cmp	r6, #1
 8014d34:	d10b      	bne.n	8014d4e <__gethex+0x2e2>
 8014d36:	9a04      	ldr	r2, [sp, #16]
 8014d38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014d3c:	6013      	str	r3, [r2, #0]
 8014d3e:	2301      	movs	r3, #1
 8014d40:	6123      	str	r3, [r4, #16]
 8014d42:	f8c9 3000 	str.w	r3, [r9]
 8014d46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d48:	2762      	movs	r7, #98	; 0x62
 8014d4a:	601c      	str	r4, [r3, #0]
 8014d4c:	e723      	b.n	8014b96 <__gethex+0x12a>
 8014d4e:	1e71      	subs	r1, r6, #1
 8014d50:	4620      	mov	r0, r4
 8014d52:	f000 fe4b 	bl	80159ec <__any_on>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d1ed      	bne.n	8014d36 <__gethex+0x2ca>
 8014d5a:	ee18 0a10 	vmov	r0, s16
 8014d5e:	4621      	mov	r1, r4
 8014d60:	f000 f9ea 	bl	8015138 <_Bfree>
 8014d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014d66:	2300      	movs	r3, #0
 8014d68:	6013      	str	r3, [r2, #0]
 8014d6a:	2750      	movs	r7, #80	; 0x50
 8014d6c:	e713      	b.n	8014b96 <__gethex+0x12a>
 8014d6e:	bf00      	nop
 8014d70:	08019284 	.word	0x08019284
 8014d74:	08019209 	.word	0x08019209
 8014d78:	0801921a 	.word	0x0801921a
 8014d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d1eb      	bne.n	8014d5a <__gethex+0x2ee>
 8014d82:	e7d8      	b.n	8014d36 <__gethex+0x2ca>
 8014d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d1d5      	bne.n	8014d36 <__gethex+0x2ca>
 8014d8a:	e7e6      	b.n	8014d5a <__gethex+0x2ee>
 8014d8c:	1e6f      	subs	r7, r5, #1
 8014d8e:	f1ba 0f00 	cmp.w	sl, #0
 8014d92:	d131      	bne.n	8014df8 <__gethex+0x38c>
 8014d94:	b127      	cbz	r7, 8014da0 <__gethex+0x334>
 8014d96:	4639      	mov	r1, r7
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f000 fe27 	bl	80159ec <__any_on>
 8014d9e:	4682      	mov	sl, r0
 8014da0:	117b      	asrs	r3, r7, #5
 8014da2:	2101      	movs	r1, #1
 8014da4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014da8:	f007 071f 	and.w	r7, r7, #31
 8014dac:	fa01 f707 	lsl.w	r7, r1, r7
 8014db0:	421f      	tst	r7, r3
 8014db2:	4629      	mov	r1, r5
 8014db4:	4620      	mov	r0, r4
 8014db6:	bf18      	it	ne
 8014db8:	f04a 0a02 	orrne.w	sl, sl, #2
 8014dbc:	1b76      	subs	r6, r6, r5
 8014dbe:	f7ff fded 	bl	801499c <rshift>
 8014dc2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014dc6:	2702      	movs	r7, #2
 8014dc8:	f1ba 0f00 	cmp.w	sl, #0
 8014dcc:	d048      	beq.n	8014e60 <__gethex+0x3f4>
 8014dce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014dd2:	2b02      	cmp	r3, #2
 8014dd4:	d015      	beq.n	8014e02 <__gethex+0x396>
 8014dd6:	2b03      	cmp	r3, #3
 8014dd8:	d017      	beq.n	8014e0a <__gethex+0x39e>
 8014dda:	2b01      	cmp	r3, #1
 8014ddc:	d109      	bne.n	8014df2 <__gethex+0x386>
 8014dde:	f01a 0f02 	tst.w	sl, #2
 8014de2:	d006      	beq.n	8014df2 <__gethex+0x386>
 8014de4:	f8d9 0000 	ldr.w	r0, [r9]
 8014de8:	ea4a 0a00 	orr.w	sl, sl, r0
 8014dec:	f01a 0f01 	tst.w	sl, #1
 8014df0:	d10e      	bne.n	8014e10 <__gethex+0x3a4>
 8014df2:	f047 0710 	orr.w	r7, r7, #16
 8014df6:	e033      	b.n	8014e60 <__gethex+0x3f4>
 8014df8:	f04f 0a01 	mov.w	sl, #1
 8014dfc:	e7d0      	b.n	8014da0 <__gethex+0x334>
 8014dfe:	2701      	movs	r7, #1
 8014e00:	e7e2      	b.n	8014dc8 <__gethex+0x35c>
 8014e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e04:	f1c3 0301 	rsb	r3, r3, #1
 8014e08:	9315      	str	r3, [sp, #84]	; 0x54
 8014e0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d0f0      	beq.n	8014df2 <__gethex+0x386>
 8014e10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014e14:	f104 0314 	add.w	r3, r4, #20
 8014e18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014e1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014e20:	f04f 0c00 	mov.w	ip, #0
 8014e24:	4618      	mov	r0, r3
 8014e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014e2e:	d01c      	beq.n	8014e6a <__gethex+0x3fe>
 8014e30:	3201      	adds	r2, #1
 8014e32:	6002      	str	r2, [r0, #0]
 8014e34:	2f02      	cmp	r7, #2
 8014e36:	f104 0314 	add.w	r3, r4, #20
 8014e3a:	d13f      	bne.n	8014ebc <__gethex+0x450>
 8014e3c:	f8d8 2000 	ldr.w	r2, [r8]
 8014e40:	3a01      	subs	r2, #1
 8014e42:	42b2      	cmp	r2, r6
 8014e44:	d10a      	bne.n	8014e5c <__gethex+0x3f0>
 8014e46:	1171      	asrs	r1, r6, #5
 8014e48:	2201      	movs	r2, #1
 8014e4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014e4e:	f006 061f 	and.w	r6, r6, #31
 8014e52:	fa02 f606 	lsl.w	r6, r2, r6
 8014e56:	421e      	tst	r6, r3
 8014e58:	bf18      	it	ne
 8014e5a:	4617      	movne	r7, r2
 8014e5c:	f047 0720 	orr.w	r7, r7, #32
 8014e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e62:	601c      	str	r4, [r3, #0]
 8014e64:	9b04      	ldr	r3, [sp, #16]
 8014e66:	601d      	str	r5, [r3, #0]
 8014e68:	e695      	b.n	8014b96 <__gethex+0x12a>
 8014e6a:	4299      	cmp	r1, r3
 8014e6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8014e70:	d8d8      	bhi.n	8014e24 <__gethex+0x3b8>
 8014e72:	68a3      	ldr	r3, [r4, #8]
 8014e74:	459b      	cmp	fp, r3
 8014e76:	db19      	blt.n	8014eac <__gethex+0x440>
 8014e78:	6861      	ldr	r1, [r4, #4]
 8014e7a:	ee18 0a10 	vmov	r0, s16
 8014e7e:	3101      	adds	r1, #1
 8014e80:	f000 f91a 	bl	80150b8 <_Balloc>
 8014e84:	4681      	mov	r9, r0
 8014e86:	b918      	cbnz	r0, 8014e90 <__gethex+0x424>
 8014e88:	4b1a      	ldr	r3, [pc, #104]	; (8014ef4 <__gethex+0x488>)
 8014e8a:	4602      	mov	r2, r0
 8014e8c:	2184      	movs	r1, #132	; 0x84
 8014e8e:	e6a8      	b.n	8014be2 <__gethex+0x176>
 8014e90:	6922      	ldr	r2, [r4, #16]
 8014e92:	3202      	adds	r2, #2
 8014e94:	f104 010c 	add.w	r1, r4, #12
 8014e98:	0092      	lsls	r2, r2, #2
 8014e9a:	300c      	adds	r0, #12
 8014e9c:	f7fd fac2 	bl	8012424 <memcpy>
 8014ea0:	4621      	mov	r1, r4
 8014ea2:	ee18 0a10 	vmov	r0, s16
 8014ea6:	f000 f947 	bl	8015138 <_Bfree>
 8014eaa:	464c      	mov	r4, r9
 8014eac:	6923      	ldr	r3, [r4, #16]
 8014eae:	1c5a      	adds	r2, r3, #1
 8014eb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014eb4:	6122      	str	r2, [r4, #16]
 8014eb6:	2201      	movs	r2, #1
 8014eb8:	615a      	str	r2, [r3, #20]
 8014eba:	e7bb      	b.n	8014e34 <__gethex+0x3c8>
 8014ebc:	6922      	ldr	r2, [r4, #16]
 8014ebe:	455a      	cmp	r2, fp
 8014ec0:	dd0b      	ble.n	8014eda <__gethex+0x46e>
 8014ec2:	2101      	movs	r1, #1
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	f7ff fd69 	bl	801499c <rshift>
 8014eca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014ece:	3501      	adds	r5, #1
 8014ed0:	42ab      	cmp	r3, r5
 8014ed2:	f6ff aed0 	blt.w	8014c76 <__gethex+0x20a>
 8014ed6:	2701      	movs	r7, #1
 8014ed8:	e7c0      	b.n	8014e5c <__gethex+0x3f0>
 8014eda:	f016 061f 	ands.w	r6, r6, #31
 8014ede:	d0fa      	beq.n	8014ed6 <__gethex+0x46a>
 8014ee0:	449a      	add	sl, r3
 8014ee2:	f1c6 0620 	rsb	r6, r6, #32
 8014ee6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014eea:	f000 f9db 	bl	80152a4 <__hi0bits>
 8014eee:	42b0      	cmp	r0, r6
 8014ef0:	dbe7      	blt.n	8014ec2 <__gethex+0x456>
 8014ef2:	e7f0      	b.n	8014ed6 <__gethex+0x46a>
 8014ef4:	08019209 	.word	0x08019209

08014ef8 <L_shift>:
 8014ef8:	f1c2 0208 	rsb	r2, r2, #8
 8014efc:	0092      	lsls	r2, r2, #2
 8014efe:	b570      	push	{r4, r5, r6, lr}
 8014f00:	f1c2 0620 	rsb	r6, r2, #32
 8014f04:	6843      	ldr	r3, [r0, #4]
 8014f06:	6804      	ldr	r4, [r0, #0]
 8014f08:	fa03 f506 	lsl.w	r5, r3, r6
 8014f0c:	432c      	orrs	r4, r5
 8014f0e:	40d3      	lsrs	r3, r2
 8014f10:	6004      	str	r4, [r0, #0]
 8014f12:	f840 3f04 	str.w	r3, [r0, #4]!
 8014f16:	4288      	cmp	r0, r1
 8014f18:	d3f4      	bcc.n	8014f04 <L_shift+0xc>
 8014f1a:	bd70      	pop	{r4, r5, r6, pc}

08014f1c <__match>:
 8014f1c:	b530      	push	{r4, r5, lr}
 8014f1e:	6803      	ldr	r3, [r0, #0]
 8014f20:	3301      	adds	r3, #1
 8014f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f26:	b914      	cbnz	r4, 8014f2e <__match+0x12>
 8014f28:	6003      	str	r3, [r0, #0]
 8014f2a:	2001      	movs	r0, #1
 8014f2c:	bd30      	pop	{r4, r5, pc}
 8014f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014f36:	2d19      	cmp	r5, #25
 8014f38:	bf98      	it	ls
 8014f3a:	3220      	addls	r2, #32
 8014f3c:	42a2      	cmp	r2, r4
 8014f3e:	d0f0      	beq.n	8014f22 <__match+0x6>
 8014f40:	2000      	movs	r0, #0
 8014f42:	e7f3      	b.n	8014f2c <__match+0x10>

08014f44 <__hexnan>:
 8014f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f48:	680b      	ldr	r3, [r1, #0]
 8014f4a:	6801      	ldr	r1, [r0, #0]
 8014f4c:	115e      	asrs	r6, r3, #5
 8014f4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014f52:	f013 031f 	ands.w	r3, r3, #31
 8014f56:	b087      	sub	sp, #28
 8014f58:	bf18      	it	ne
 8014f5a:	3604      	addne	r6, #4
 8014f5c:	2500      	movs	r5, #0
 8014f5e:	1f37      	subs	r7, r6, #4
 8014f60:	4682      	mov	sl, r0
 8014f62:	4690      	mov	r8, r2
 8014f64:	9301      	str	r3, [sp, #4]
 8014f66:	f846 5c04 	str.w	r5, [r6, #-4]
 8014f6a:	46b9      	mov	r9, r7
 8014f6c:	463c      	mov	r4, r7
 8014f6e:	9502      	str	r5, [sp, #8]
 8014f70:	46ab      	mov	fp, r5
 8014f72:	784a      	ldrb	r2, [r1, #1]
 8014f74:	1c4b      	adds	r3, r1, #1
 8014f76:	9303      	str	r3, [sp, #12]
 8014f78:	b342      	cbz	r2, 8014fcc <__hexnan+0x88>
 8014f7a:	4610      	mov	r0, r2
 8014f7c:	9105      	str	r1, [sp, #20]
 8014f7e:	9204      	str	r2, [sp, #16]
 8014f80:	f7ff fd5e 	bl	8014a40 <__hexdig_fun>
 8014f84:	2800      	cmp	r0, #0
 8014f86:	d14f      	bne.n	8015028 <__hexnan+0xe4>
 8014f88:	9a04      	ldr	r2, [sp, #16]
 8014f8a:	9905      	ldr	r1, [sp, #20]
 8014f8c:	2a20      	cmp	r2, #32
 8014f8e:	d818      	bhi.n	8014fc2 <__hexnan+0x7e>
 8014f90:	9b02      	ldr	r3, [sp, #8]
 8014f92:	459b      	cmp	fp, r3
 8014f94:	dd13      	ble.n	8014fbe <__hexnan+0x7a>
 8014f96:	454c      	cmp	r4, r9
 8014f98:	d206      	bcs.n	8014fa8 <__hexnan+0x64>
 8014f9a:	2d07      	cmp	r5, #7
 8014f9c:	dc04      	bgt.n	8014fa8 <__hexnan+0x64>
 8014f9e:	462a      	mov	r2, r5
 8014fa0:	4649      	mov	r1, r9
 8014fa2:	4620      	mov	r0, r4
 8014fa4:	f7ff ffa8 	bl	8014ef8 <L_shift>
 8014fa8:	4544      	cmp	r4, r8
 8014faa:	d950      	bls.n	801504e <__hexnan+0x10a>
 8014fac:	2300      	movs	r3, #0
 8014fae:	f1a4 0904 	sub.w	r9, r4, #4
 8014fb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8014fb6:	f8cd b008 	str.w	fp, [sp, #8]
 8014fba:	464c      	mov	r4, r9
 8014fbc:	461d      	mov	r5, r3
 8014fbe:	9903      	ldr	r1, [sp, #12]
 8014fc0:	e7d7      	b.n	8014f72 <__hexnan+0x2e>
 8014fc2:	2a29      	cmp	r2, #41	; 0x29
 8014fc4:	d156      	bne.n	8015074 <__hexnan+0x130>
 8014fc6:	3102      	adds	r1, #2
 8014fc8:	f8ca 1000 	str.w	r1, [sl]
 8014fcc:	f1bb 0f00 	cmp.w	fp, #0
 8014fd0:	d050      	beq.n	8015074 <__hexnan+0x130>
 8014fd2:	454c      	cmp	r4, r9
 8014fd4:	d206      	bcs.n	8014fe4 <__hexnan+0xa0>
 8014fd6:	2d07      	cmp	r5, #7
 8014fd8:	dc04      	bgt.n	8014fe4 <__hexnan+0xa0>
 8014fda:	462a      	mov	r2, r5
 8014fdc:	4649      	mov	r1, r9
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f7ff ff8a 	bl	8014ef8 <L_shift>
 8014fe4:	4544      	cmp	r4, r8
 8014fe6:	d934      	bls.n	8015052 <__hexnan+0x10e>
 8014fe8:	f1a8 0204 	sub.w	r2, r8, #4
 8014fec:	4623      	mov	r3, r4
 8014fee:	f853 1b04 	ldr.w	r1, [r3], #4
 8014ff2:	f842 1f04 	str.w	r1, [r2, #4]!
 8014ff6:	429f      	cmp	r7, r3
 8014ff8:	d2f9      	bcs.n	8014fee <__hexnan+0xaa>
 8014ffa:	1b3b      	subs	r3, r7, r4
 8014ffc:	f023 0303 	bic.w	r3, r3, #3
 8015000:	3304      	adds	r3, #4
 8015002:	3401      	adds	r4, #1
 8015004:	3e03      	subs	r6, #3
 8015006:	42b4      	cmp	r4, r6
 8015008:	bf88      	it	hi
 801500a:	2304      	movhi	r3, #4
 801500c:	4443      	add	r3, r8
 801500e:	2200      	movs	r2, #0
 8015010:	f843 2b04 	str.w	r2, [r3], #4
 8015014:	429f      	cmp	r7, r3
 8015016:	d2fb      	bcs.n	8015010 <__hexnan+0xcc>
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	b91b      	cbnz	r3, 8015024 <__hexnan+0xe0>
 801501c:	4547      	cmp	r7, r8
 801501e:	d127      	bne.n	8015070 <__hexnan+0x12c>
 8015020:	2301      	movs	r3, #1
 8015022:	603b      	str	r3, [r7, #0]
 8015024:	2005      	movs	r0, #5
 8015026:	e026      	b.n	8015076 <__hexnan+0x132>
 8015028:	3501      	adds	r5, #1
 801502a:	2d08      	cmp	r5, #8
 801502c:	f10b 0b01 	add.w	fp, fp, #1
 8015030:	dd06      	ble.n	8015040 <__hexnan+0xfc>
 8015032:	4544      	cmp	r4, r8
 8015034:	d9c3      	bls.n	8014fbe <__hexnan+0x7a>
 8015036:	2300      	movs	r3, #0
 8015038:	f844 3c04 	str.w	r3, [r4, #-4]
 801503c:	2501      	movs	r5, #1
 801503e:	3c04      	subs	r4, #4
 8015040:	6822      	ldr	r2, [r4, #0]
 8015042:	f000 000f 	and.w	r0, r0, #15
 8015046:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801504a:	6022      	str	r2, [r4, #0]
 801504c:	e7b7      	b.n	8014fbe <__hexnan+0x7a>
 801504e:	2508      	movs	r5, #8
 8015050:	e7b5      	b.n	8014fbe <__hexnan+0x7a>
 8015052:	9b01      	ldr	r3, [sp, #4]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d0df      	beq.n	8015018 <__hexnan+0xd4>
 8015058:	f04f 32ff 	mov.w	r2, #4294967295
 801505c:	f1c3 0320 	rsb	r3, r3, #32
 8015060:	fa22 f303 	lsr.w	r3, r2, r3
 8015064:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015068:	401a      	ands	r2, r3
 801506a:	f846 2c04 	str.w	r2, [r6, #-4]
 801506e:	e7d3      	b.n	8015018 <__hexnan+0xd4>
 8015070:	3f04      	subs	r7, #4
 8015072:	e7d1      	b.n	8015018 <__hexnan+0xd4>
 8015074:	2004      	movs	r0, #4
 8015076:	b007      	add	sp, #28
 8015078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801507c <_localeconv_r>:
 801507c:	4800      	ldr	r0, [pc, #0]	; (8015080 <_localeconv_r+0x4>)
 801507e:	4770      	bx	lr
 8015080:	200002ec 	.word	0x200002ec

08015084 <malloc>:
 8015084:	4b02      	ldr	r3, [pc, #8]	; (8015090 <malloc+0xc>)
 8015086:	4601      	mov	r1, r0
 8015088:	6818      	ldr	r0, [r3, #0]
 801508a:	f000 bd2f 	b.w	8015aec <_malloc_r>
 801508e:	bf00      	nop
 8015090:	20000194 	.word	0x20000194

08015094 <__ascii_mbtowc>:
 8015094:	b082      	sub	sp, #8
 8015096:	b901      	cbnz	r1, 801509a <__ascii_mbtowc+0x6>
 8015098:	a901      	add	r1, sp, #4
 801509a:	b142      	cbz	r2, 80150ae <__ascii_mbtowc+0x1a>
 801509c:	b14b      	cbz	r3, 80150b2 <__ascii_mbtowc+0x1e>
 801509e:	7813      	ldrb	r3, [r2, #0]
 80150a0:	600b      	str	r3, [r1, #0]
 80150a2:	7812      	ldrb	r2, [r2, #0]
 80150a4:	1e10      	subs	r0, r2, #0
 80150a6:	bf18      	it	ne
 80150a8:	2001      	movne	r0, #1
 80150aa:	b002      	add	sp, #8
 80150ac:	4770      	bx	lr
 80150ae:	4610      	mov	r0, r2
 80150b0:	e7fb      	b.n	80150aa <__ascii_mbtowc+0x16>
 80150b2:	f06f 0001 	mvn.w	r0, #1
 80150b6:	e7f8      	b.n	80150aa <__ascii_mbtowc+0x16>

080150b8 <_Balloc>:
 80150b8:	b570      	push	{r4, r5, r6, lr}
 80150ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80150bc:	4604      	mov	r4, r0
 80150be:	460d      	mov	r5, r1
 80150c0:	b976      	cbnz	r6, 80150e0 <_Balloc+0x28>
 80150c2:	2010      	movs	r0, #16
 80150c4:	f7ff ffde 	bl	8015084 <malloc>
 80150c8:	4602      	mov	r2, r0
 80150ca:	6260      	str	r0, [r4, #36]	; 0x24
 80150cc:	b920      	cbnz	r0, 80150d8 <_Balloc+0x20>
 80150ce:	4b18      	ldr	r3, [pc, #96]	; (8015130 <_Balloc+0x78>)
 80150d0:	4818      	ldr	r0, [pc, #96]	; (8015134 <_Balloc+0x7c>)
 80150d2:	2166      	movs	r1, #102	; 0x66
 80150d4:	f7fe fdba 	bl	8013c4c <__assert_func>
 80150d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80150dc:	6006      	str	r6, [r0, #0]
 80150de:	60c6      	str	r6, [r0, #12]
 80150e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80150e2:	68f3      	ldr	r3, [r6, #12]
 80150e4:	b183      	cbz	r3, 8015108 <_Balloc+0x50>
 80150e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150e8:	68db      	ldr	r3, [r3, #12]
 80150ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80150ee:	b9b8      	cbnz	r0, 8015120 <_Balloc+0x68>
 80150f0:	2101      	movs	r1, #1
 80150f2:	fa01 f605 	lsl.w	r6, r1, r5
 80150f6:	1d72      	adds	r2, r6, #5
 80150f8:	0092      	lsls	r2, r2, #2
 80150fa:	4620      	mov	r0, r4
 80150fc:	f000 fc97 	bl	8015a2e <_calloc_r>
 8015100:	b160      	cbz	r0, 801511c <_Balloc+0x64>
 8015102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015106:	e00e      	b.n	8015126 <_Balloc+0x6e>
 8015108:	2221      	movs	r2, #33	; 0x21
 801510a:	2104      	movs	r1, #4
 801510c:	4620      	mov	r0, r4
 801510e:	f000 fc8e 	bl	8015a2e <_calloc_r>
 8015112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015114:	60f0      	str	r0, [r6, #12]
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d1e4      	bne.n	80150e6 <_Balloc+0x2e>
 801511c:	2000      	movs	r0, #0
 801511e:	bd70      	pop	{r4, r5, r6, pc}
 8015120:	6802      	ldr	r2, [r0, #0]
 8015122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015126:	2300      	movs	r3, #0
 8015128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801512c:	e7f7      	b.n	801511e <_Balloc+0x66>
 801512e:	bf00      	nop
 8015130:	08018fe8 	.word	0x08018fe8
 8015134:	08019296 	.word	0x08019296

08015138 <_Bfree>:
 8015138:	b570      	push	{r4, r5, r6, lr}
 801513a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801513c:	4605      	mov	r5, r0
 801513e:	460c      	mov	r4, r1
 8015140:	b976      	cbnz	r6, 8015160 <_Bfree+0x28>
 8015142:	2010      	movs	r0, #16
 8015144:	f7ff ff9e 	bl	8015084 <malloc>
 8015148:	4602      	mov	r2, r0
 801514a:	6268      	str	r0, [r5, #36]	; 0x24
 801514c:	b920      	cbnz	r0, 8015158 <_Bfree+0x20>
 801514e:	4b09      	ldr	r3, [pc, #36]	; (8015174 <_Bfree+0x3c>)
 8015150:	4809      	ldr	r0, [pc, #36]	; (8015178 <_Bfree+0x40>)
 8015152:	218a      	movs	r1, #138	; 0x8a
 8015154:	f7fe fd7a 	bl	8013c4c <__assert_func>
 8015158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801515c:	6006      	str	r6, [r0, #0]
 801515e:	60c6      	str	r6, [r0, #12]
 8015160:	b13c      	cbz	r4, 8015172 <_Bfree+0x3a>
 8015162:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015164:	6862      	ldr	r2, [r4, #4]
 8015166:	68db      	ldr	r3, [r3, #12]
 8015168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801516c:	6021      	str	r1, [r4, #0]
 801516e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015172:	bd70      	pop	{r4, r5, r6, pc}
 8015174:	08018fe8 	.word	0x08018fe8
 8015178:	08019296 	.word	0x08019296

0801517c <__multadd>:
 801517c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015180:	690e      	ldr	r6, [r1, #16]
 8015182:	4607      	mov	r7, r0
 8015184:	4698      	mov	r8, r3
 8015186:	460c      	mov	r4, r1
 8015188:	f101 0014 	add.w	r0, r1, #20
 801518c:	2300      	movs	r3, #0
 801518e:	6805      	ldr	r5, [r0, #0]
 8015190:	b2a9      	uxth	r1, r5
 8015192:	fb02 8101 	mla	r1, r2, r1, r8
 8015196:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801519a:	0c2d      	lsrs	r5, r5, #16
 801519c:	fb02 c505 	mla	r5, r2, r5, ip
 80151a0:	b289      	uxth	r1, r1
 80151a2:	3301      	adds	r3, #1
 80151a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80151a8:	429e      	cmp	r6, r3
 80151aa:	f840 1b04 	str.w	r1, [r0], #4
 80151ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80151b2:	dcec      	bgt.n	801518e <__multadd+0x12>
 80151b4:	f1b8 0f00 	cmp.w	r8, #0
 80151b8:	d022      	beq.n	8015200 <__multadd+0x84>
 80151ba:	68a3      	ldr	r3, [r4, #8]
 80151bc:	42b3      	cmp	r3, r6
 80151be:	dc19      	bgt.n	80151f4 <__multadd+0x78>
 80151c0:	6861      	ldr	r1, [r4, #4]
 80151c2:	4638      	mov	r0, r7
 80151c4:	3101      	adds	r1, #1
 80151c6:	f7ff ff77 	bl	80150b8 <_Balloc>
 80151ca:	4605      	mov	r5, r0
 80151cc:	b928      	cbnz	r0, 80151da <__multadd+0x5e>
 80151ce:	4602      	mov	r2, r0
 80151d0:	4b0d      	ldr	r3, [pc, #52]	; (8015208 <__multadd+0x8c>)
 80151d2:	480e      	ldr	r0, [pc, #56]	; (801520c <__multadd+0x90>)
 80151d4:	21b5      	movs	r1, #181	; 0xb5
 80151d6:	f7fe fd39 	bl	8013c4c <__assert_func>
 80151da:	6922      	ldr	r2, [r4, #16]
 80151dc:	3202      	adds	r2, #2
 80151de:	f104 010c 	add.w	r1, r4, #12
 80151e2:	0092      	lsls	r2, r2, #2
 80151e4:	300c      	adds	r0, #12
 80151e6:	f7fd f91d 	bl	8012424 <memcpy>
 80151ea:	4621      	mov	r1, r4
 80151ec:	4638      	mov	r0, r7
 80151ee:	f7ff ffa3 	bl	8015138 <_Bfree>
 80151f2:	462c      	mov	r4, r5
 80151f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80151f8:	3601      	adds	r6, #1
 80151fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80151fe:	6126      	str	r6, [r4, #16]
 8015200:	4620      	mov	r0, r4
 8015202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015206:	bf00      	nop
 8015208:	08019209 	.word	0x08019209
 801520c:	08019296 	.word	0x08019296

08015210 <__s2b>:
 8015210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015214:	460c      	mov	r4, r1
 8015216:	4615      	mov	r5, r2
 8015218:	461f      	mov	r7, r3
 801521a:	2209      	movs	r2, #9
 801521c:	3308      	adds	r3, #8
 801521e:	4606      	mov	r6, r0
 8015220:	fb93 f3f2 	sdiv	r3, r3, r2
 8015224:	2100      	movs	r1, #0
 8015226:	2201      	movs	r2, #1
 8015228:	429a      	cmp	r2, r3
 801522a:	db09      	blt.n	8015240 <__s2b+0x30>
 801522c:	4630      	mov	r0, r6
 801522e:	f7ff ff43 	bl	80150b8 <_Balloc>
 8015232:	b940      	cbnz	r0, 8015246 <__s2b+0x36>
 8015234:	4602      	mov	r2, r0
 8015236:	4b19      	ldr	r3, [pc, #100]	; (801529c <__s2b+0x8c>)
 8015238:	4819      	ldr	r0, [pc, #100]	; (80152a0 <__s2b+0x90>)
 801523a:	21ce      	movs	r1, #206	; 0xce
 801523c:	f7fe fd06 	bl	8013c4c <__assert_func>
 8015240:	0052      	lsls	r2, r2, #1
 8015242:	3101      	adds	r1, #1
 8015244:	e7f0      	b.n	8015228 <__s2b+0x18>
 8015246:	9b08      	ldr	r3, [sp, #32]
 8015248:	6143      	str	r3, [r0, #20]
 801524a:	2d09      	cmp	r5, #9
 801524c:	f04f 0301 	mov.w	r3, #1
 8015250:	6103      	str	r3, [r0, #16]
 8015252:	dd16      	ble.n	8015282 <__s2b+0x72>
 8015254:	f104 0909 	add.w	r9, r4, #9
 8015258:	46c8      	mov	r8, r9
 801525a:	442c      	add	r4, r5
 801525c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015260:	4601      	mov	r1, r0
 8015262:	3b30      	subs	r3, #48	; 0x30
 8015264:	220a      	movs	r2, #10
 8015266:	4630      	mov	r0, r6
 8015268:	f7ff ff88 	bl	801517c <__multadd>
 801526c:	45a0      	cmp	r8, r4
 801526e:	d1f5      	bne.n	801525c <__s2b+0x4c>
 8015270:	f1a5 0408 	sub.w	r4, r5, #8
 8015274:	444c      	add	r4, r9
 8015276:	1b2d      	subs	r5, r5, r4
 8015278:	1963      	adds	r3, r4, r5
 801527a:	42bb      	cmp	r3, r7
 801527c:	db04      	blt.n	8015288 <__s2b+0x78>
 801527e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015282:	340a      	adds	r4, #10
 8015284:	2509      	movs	r5, #9
 8015286:	e7f6      	b.n	8015276 <__s2b+0x66>
 8015288:	f814 3b01 	ldrb.w	r3, [r4], #1
 801528c:	4601      	mov	r1, r0
 801528e:	3b30      	subs	r3, #48	; 0x30
 8015290:	220a      	movs	r2, #10
 8015292:	4630      	mov	r0, r6
 8015294:	f7ff ff72 	bl	801517c <__multadd>
 8015298:	e7ee      	b.n	8015278 <__s2b+0x68>
 801529a:	bf00      	nop
 801529c:	08019209 	.word	0x08019209
 80152a0:	08019296 	.word	0x08019296

080152a4 <__hi0bits>:
 80152a4:	0c03      	lsrs	r3, r0, #16
 80152a6:	041b      	lsls	r3, r3, #16
 80152a8:	b9d3      	cbnz	r3, 80152e0 <__hi0bits+0x3c>
 80152aa:	0400      	lsls	r0, r0, #16
 80152ac:	2310      	movs	r3, #16
 80152ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80152b2:	bf04      	itt	eq
 80152b4:	0200      	lsleq	r0, r0, #8
 80152b6:	3308      	addeq	r3, #8
 80152b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80152bc:	bf04      	itt	eq
 80152be:	0100      	lsleq	r0, r0, #4
 80152c0:	3304      	addeq	r3, #4
 80152c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80152c6:	bf04      	itt	eq
 80152c8:	0080      	lsleq	r0, r0, #2
 80152ca:	3302      	addeq	r3, #2
 80152cc:	2800      	cmp	r0, #0
 80152ce:	db05      	blt.n	80152dc <__hi0bits+0x38>
 80152d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80152d4:	f103 0301 	add.w	r3, r3, #1
 80152d8:	bf08      	it	eq
 80152da:	2320      	moveq	r3, #32
 80152dc:	4618      	mov	r0, r3
 80152de:	4770      	bx	lr
 80152e0:	2300      	movs	r3, #0
 80152e2:	e7e4      	b.n	80152ae <__hi0bits+0xa>

080152e4 <__lo0bits>:
 80152e4:	6803      	ldr	r3, [r0, #0]
 80152e6:	f013 0207 	ands.w	r2, r3, #7
 80152ea:	4601      	mov	r1, r0
 80152ec:	d00b      	beq.n	8015306 <__lo0bits+0x22>
 80152ee:	07da      	lsls	r2, r3, #31
 80152f0:	d424      	bmi.n	801533c <__lo0bits+0x58>
 80152f2:	0798      	lsls	r0, r3, #30
 80152f4:	bf49      	itett	mi
 80152f6:	085b      	lsrmi	r3, r3, #1
 80152f8:	089b      	lsrpl	r3, r3, #2
 80152fa:	2001      	movmi	r0, #1
 80152fc:	600b      	strmi	r3, [r1, #0]
 80152fe:	bf5c      	itt	pl
 8015300:	600b      	strpl	r3, [r1, #0]
 8015302:	2002      	movpl	r0, #2
 8015304:	4770      	bx	lr
 8015306:	b298      	uxth	r0, r3
 8015308:	b9b0      	cbnz	r0, 8015338 <__lo0bits+0x54>
 801530a:	0c1b      	lsrs	r3, r3, #16
 801530c:	2010      	movs	r0, #16
 801530e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015312:	bf04      	itt	eq
 8015314:	0a1b      	lsreq	r3, r3, #8
 8015316:	3008      	addeq	r0, #8
 8015318:	071a      	lsls	r2, r3, #28
 801531a:	bf04      	itt	eq
 801531c:	091b      	lsreq	r3, r3, #4
 801531e:	3004      	addeq	r0, #4
 8015320:	079a      	lsls	r2, r3, #30
 8015322:	bf04      	itt	eq
 8015324:	089b      	lsreq	r3, r3, #2
 8015326:	3002      	addeq	r0, #2
 8015328:	07da      	lsls	r2, r3, #31
 801532a:	d403      	bmi.n	8015334 <__lo0bits+0x50>
 801532c:	085b      	lsrs	r3, r3, #1
 801532e:	f100 0001 	add.w	r0, r0, #1
 8015332:	d005      	beq.n	8015340 <__lo0bits+0x5c>
 8015334:	600b      	str	r3, [r1, #0]
 8015336:	4770      	bx	lr
 8015338:	4610      	mov	r0, r2
 801533a:	e7e8      	b.n	801530e <__lo0bits+0x2a>
 801533c:	2000      	movs	r0, #0
 801533e:	4770      	bx	lr
 8015340:	2020      	movs	r0, #32
 8015342:	4770      	bx	lr

08015344 <__i2b>:
 8015344:	b510      	push	{r4, lr}
 8015346:	460c      	mov	r4, r1
 8015348:	2101      	movs	r1, #1
 801534a:	f7ff feb5 	bl	80150b8 <_Balloc>
 801534e:	4602      	mov	r2, r0
 8015350:	b928      	cbnz	r0, 801535e <__i2b+0x1a>
 8015352:	4b05      	ldr	r3, [pc, #20]	; (8015368 <__i2b+0x24>)
 8015354:	4805      	ldr	r0, [pc, #20]	; (801536c <__i2b+0x28>)
 8015356:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801535a:	f7fe fc77 	bl	8013c4c <__assert_func>
 801535e:	2301      	movs	r3, #1
 8015360:	6144      	str	r4, [r0, #20]
 8015362:	6103      	str	r3, [r0, #16]
 8015364:	bd10      	pop	{r4, pc}
 8015366:	bf00      	nop
 8015368:	08019209 	.word	0x08019209
 801536c:	08019296 	.word	0x08019296

08015370 <__multiply>:
 8015370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015374:	4614      	mov	r4, r2
 8015376:	690a      	ldr	r2, [r1, #16]
 8015378:	6923      	ldr	r3, [r4, #16]
 801537a:	429a      	cmp	r2, r3
 801537c:	bfb8      	it	lt
 801537e:	460b      	movlt	r3, r1
 8015380:	460d      	mov	r5, r1
 8015382:	bfbc      	itt	lt
 8015384:	4625      	movlt	r5, r4
 8015386:	461c      	movlt	r4, r3
 8015388:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801538c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015390:	68ab      	ldr	r3, [r5, #8]
 8015392:	6869      	ldr	r1, [r5, #4]
 8015394:	eb0a 0709 	add.w	r7, sl, r9
 8015398:	42bb      	cmp	r3, r7
 801539a:	b085      	sub	sp, #20
 801539c:	bfb8      	it	lt
 801539e:	3101      	addlt	r1, #1
 80153a0:	f7ff fe8a 	bl	80150b8 <_Balloc>
 80153a4:	b930      	cbnz	r0, 80153b4 <__multiply+0x44>
 80153a6:	4602      	mov	r2, r0
 80153a8:	4b42      	ldr	r3, [pc, #264]	; (80154b4 <__multiply+0x144>)
 80153aa:	4843      	ldr	r0, [pc, #268]	; (80154b8 <__multiply+0x148>)
 80153ac:	f240 115d 	movw	r1, #349	; 0x15d
 80153b0:	f7fe fc4c 	bl	8013c4c <__assert_func>
 80153b4:	f100 0614 	add.w	r6, r0, #20
 80153b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80153bc:	4633      	mov	r3, r6
 80153be:	2200      	movs	r2, #0
 80153c0:	4543      	cmp	r3, r8
 80153c2:	d31e      	bcc.n	8015402 <__multiply+0x92>
 80153c4:	f105 0c14 	add.w	ip, r5, #20
 80153c8:	f104 0314 	add.w	r3, r4, #20
 80153cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80153d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80153d4:	9202      	str	r2, [sp, #8]
 80153d6:	ebac 0205 	sub.w	r2, ip, r5
 80153da:	3a15      	subs	r2, #21
 80153dc:	f022 0203 	bic.w	r2, r2, #3
 80153e0:	3204      	adds	r2, #4
 80153e2:	f105 0115 	add.w	r1, r5, #21
 80153e6:	458c      	cmp	ip, r1
 80153e8:	bf38      	it	cc
 80153ea:	2204      	movcc	r2, #4
 80153ec:	9201      	str	r2, [sp, #4]
 80153ee:	9a02      	ldr	r2, [sp, #8]
 80153f0:	9303      	str	r3, [sp, #12]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d808      	bhi.n	8015408 <__multiply+0x98>
 80153f6:	2f00      	cmp	r7, #0
 80153f8:	dc55      	bgt.n	80154a6 <__multiply+0x136>
 80153fa:	6107      	str	r7, [r0, #16]
 80153fc:	b005      	add	sp, #20
 80153fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015402:	f843 2b04 	str.w	r2, [r3], #4
 8015406:	e7db      	b.n	80153c0 <__multiply+0x50>
 8015408:	f8b3 a000 	ldrh.w	sl, [r3]
 801540c:	f1ba 0f00 	cmp.w	sl, #0
 8015410:	d020      	beq.n	8015454 <__multiply+0xe4>
 8015412:	f105 0e14 	add.w	lr, r5, #20
 8015416:	46b1      	mov	r9, r6
 8015418:	2200      	movs	r2, #0
 801541a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801541e:	f8d9 b000 	ldr.w	fp, [r9]
 8015422:	b2a1      	uxth	r1, r4
 8015424:	fa1f fb8b 	uxth.w	fp, fp
 8015428:	fb0a b101 	mla	r1, sl, r1, fp
 801542c:	4411      	add	r1, r2
 801542e:	f8d9 2000 	ldr.w	r2, [r9]
 8015432:	0c24      	lsrs	r4, r4, #16
 8015434:	0c12      	lsrs	r2, r2, #16
 8015436:	fb0a 2404 	mla	r4, sl, r4, r2
 801543a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801543e:	b289      	uxth	r1, r1
 8015440:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015444:	45f4      	cmp	ip, lr
 8015446:	f849 1b04 	str.w	r1, [r9], #4
 801544a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801544e:	d8e4      	bhi.n	801541a <__multiply+0xaa>
 8015450:	9901      	ldr	r1, [sp, #4]
 8015452:	5072      	str	r2, [r6, r1]
 8015454:	9a03      	ldr	r2, [sp, #12]
 8015456:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801545a:	3304      	adds	r3, #4
 801545c:	f1b9 0f00 	cmp.w	r9, #0
 8015460:	d01f      	beq.n	80154a2 <__multiply+0x132>
 8015462:	6834      	ldr	r4, [r6, #0]
 8015464:	f105 0114 	add.w	r1, r5, #20
 8015468:	46b6      	mov	lr, r6
 801546a:	f04f 0a00 	mov.w	sl, #0
 801546e:	880a      	ldrh	r2, [r1, #0]
 8015470:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015474:	fb09 b202 	mla	r2, r9, r2, fp
 8015478:	4492      	add	sl, r2
 801547a:	b2a4      	uxth	r4, r4
 801547c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015480:	f84e 4b04 	str.w	r4, [lr], #4
 8015484:	f851 4b04 	ldr.w	r4, [r1], #4
 8015488:	f8be 2000 	ldrh.w	r2, [lr]
 801548c:	0c24      	lsrs	r4, r4, #16
 801548e:	fb09 2404 	mla	r4, r9, r4, r2
 8015492:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015496:	458c      	cmp	ip, r1
 8015498:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801549c:	d8e7      	bhi.n	801546e <__multiply+0xfe>
 801549e:	9a01      	ldr	r2, [sp, #4]
 80154a0:	50b4      	str	r4, [r6, r2]
 80154a2:	3604      	adds	r6, #4
 80154a4:	e7a3      	b.n	80153ee <__multiply+0x7e>
 80154a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d1a5      	bne.n	80153fa <__multiply+0x8a>
 80154ae:	3f01      	subs	r7, #1
 80154b0:	e7a1      	b.n	80153f6 <__multiply+0x86>
 80154b2:	bf00      	nop
 80154b4:	08019209 	.word	0x08019209
 80154b8:	08019296 	.word	0x08019296

080154bc <__pow5mult>:
 80154bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154c0:	4615      	mov	r5, r2
 80154c2:	f012 0203 	ands.w	r2, r2, #3
 80154c6:	4606      	mov	r6, r0
 80154c8:	460f      	mov	r7, r1
 80154ca:	d007      	beq.n	80154dc <__pow5mult+0x20>
 80154cc:	4c25      	ldr	r4, [pc, #148]	; (8015564 <__pow5mult+0xa8>)
 80154ce:	3a01      	subs	r2, #1
 80154d0:	2300      	movs	r3, #0
 80154d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80154d6:	f7ff fe51 	bl	801517c <__multadd>
 80154da:	4607      	mov	r7, r0
 80154dc:	10ad      	asrs	r5, r5, #2
 80154de:	d03d      	beq.n	801555c <__pow5mult+0xa0>
 80154e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80154e2:	b97c      	cbnz	r4, 8015504 <__pow5mult+0x48>
 80154e4:	2010      	movs	r0, #16
 80154e6:	f7ff fdcd 	bl	8015084 <malloc>
 80154ea:	4602      	mov	r2, r0
 80154ec:	6270      	str	r0, [r6, #36]	; 0x24
 80154ee:	b928      	cbnz	r0, 80154fc <__pow5mult+0x40>
 80154f0:	4b1d      	ldr	r3, [pc, #116]	; (8015568 <__pow5mult+0xac>)
 80154f2:	481e      	ldr	r0, [pc, #120]	; (801556c <__pow5mult+0xb0>)
 80154f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80154f8:	f7fe fba8 	bl	8013c4c <__assert_func>
 80154fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015500:	6004      	str	r4, [r0, #0]
 8015502:	60c4      	str	r4, [r0, #12]
 8015504:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801550c:	b94c      	cbnz	r4, 8015522 <__pow5mult+0x66>
 801550e:	f240 2171 	movw	r1, #625	; 0x271
 8015512:	4630      	mov	r0, r6
 8015514:	f7ff ff16 	bl	8015344 <__i2b>
 8015518:	2300      	movs	r3, #0
 801551a:	f8c8 0008 	str.w	r0, [r8, #8]
 801551e:	4604      	mov	r4, r0
 8015520:	6003      	str	r3, [r0, #0]
 8015522:	f04f 0900 	mov.w	r9, #0
 8015526:	07eb      	lsls	r3, r5, #31
 8015528:	d50a      	bpl.n	8015540 <__pow5mult+0x84>
 801552a:	4639      	mov	r1, r7
 801552c:	4622      	mov	r2, r4
 801552e:	4630      	mov	r0, r6
 8015530:	f7ff ff1e 	bl	8015370 <__multiply>
 8015534:	4639      	mov	r1, r7
 8015536:	4680      	mov	r8, r0
 8015538:	4630      	mov	r0, r6
 801553a:	f7ff fdfd 	bl	8015138 <_Bfree>
 801553e:	4647      	mov	r7, r8
 8015540:	106d      	asrs	r5, r5, #1
 8015542:	d00b      	beq.n	801555c <__pow5mult+0xa0>
 8015544:	6820      	ldr	r0, [r4, #0]
 8015546:	b938      	cbnz	r0, 8015558 <__pow5mult+0x9c>
 8015548:	4622      	mov	r2, r4
 801554a:	4621      	mov	r1, r4
 801554c:	4630      	mov	r0, r6
 801554e:	f7ff ff0f 	bl	8015370 <__multiply>
 8015552:	6020      	str	r0, [r4, #0]
 8015554:	f8c0 9000 	str.w	r9, [r0]
 8015558:	4604      	mov	r4, r0
 801555a:	e7e4      	b.n	8015526 <__pow5mult+0x6a>
 801555c:	4638      	mov	r0, r7
 801555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015562:	bf00      	nop
 8015564:	080193e8 	.word	0x080193e8
 8015568:	08018fe8 	.word	0x08018fe8
 801556c:	08019296 	.word	0x08019296

08015570 <__lshift>:
 8015570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015574:	460c      	mov	r4, r1
 8015576:	6849      	ldr	r1, [r1, #4]
 8015578:	6923      	ldr	r3, [r4, #16]
 801557a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801557e:	68a3      	ldr	r3, [r4, #8]
 8015580:	4607      	mov	r7, r0
 8015582:	4691      	mov	r9, r2
 8015584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015588:	f108 0601 	add.w	r6, r8, #1
 801558c:	42b3      	cmp	r3, r6
 801558e:	db0b      	blt.n	80155a8 <__lshift+0x38>
 8015590:	4638      	mov	r0, r7
 8015592:	f7ff fd91 	bl	80150b8 <_Balloc>
 8015596:	4605      	mov	r5, r0
 8015598:	b948      	cbnz	r0, 80155ae <__lshift+0x3e>
 801559a:	4602      	mov	r2, r0
 801559c:	4b28      	ldr	r3, [pc, #160]	; (8015640 <__lshift+0xd0>)
 801559e:	4829      	ldr	r0, [pc, #164]	; (8015644 <__lshift+0xd4>)
 80155a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80155a4:	f7fe fb52 	bl	8013c4c <__assert_func>
 80155a8:	3101      	adds	r1, #1
 80155aa:	005b      	lsls	r3, r3, #1
 80155ac:	e7ee      	b.n	801558c <__lshift+0x1c>
 80155ae:	2300      	movs	r3, #0
 80155b0:	f100 0114 	add.w	r1, r0, #20
 80155b4:	f100 0210 	add.w	r2, r0, #16
 80155b8:	4618      	mov	r0, r3
 80155ba:	4553      	cmp	r3, sl
 80155bc:	db33      	blt.n	8015626 <__lshift+0xb6>
 80155be:	6920      	ldr	r0, [r4, #16]
 80155c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80155c4:	f104 0314 	add.w	r3, r4, #20
 80155c8:	f019 091f 	ands.w	r9, r9, #31
 80155cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80155d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80155d4:	d02b      	beq.n	801562e <__lshift+0xbe>
 80155d6:	f1c9 0e20 	rsb	lr, r9, #32
 80155da:	468a      	mov	sl, r1
 80155dc:	2200      	movs	r2, #0
 80155de:	6818      	ldr	r0, [r3, #0]
 80155e0:	fa00 f009 	lsl.w	r0, r0, r9
 80155e4:	4302      	orrs	r2, r0
 80155e6:	f84a 2b04 	str.w	r2, [sl], #4
 80155ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80155ee:	459c      	cmp	ip, r3
 80155f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80155f4:	d8f3      	bhi.n	80155de <__lshift+0x6e>
 80155f6:	ebac 0304 	sub.w	r3, ip, r4
 80155fa:	3b15      	subs	r3, #21
 80155fc:	f023 0303 	bic.w	r3, r3, #3
 8015600:	3304      	adds	r3, #4
 8015602:	f104 0015 	add.w	r0, r4, #21
 8015606:	4584      	cmp	ip, r0
 8015608:	bf38      	it	cc
 801560a:	2304      	movcc	r3, #4
 801560c:	50ca      	str	r2, [r1, r3]
 801560e:	b10a      	cbz	r2, 8015614 <__lshift+0xa4>
 8015610:	f108 0602 	add.w	r6, r8, #2
 8015614:	3e01      	subs	r6, #1
 8015616:	4638      	mov	r0, r7
 8015618:	612e      	str	r6, [r5, #16]
 801561a:	4621      	mov	r1, r4
 801561c:	f7ff fd8c 	bl	8015138 <_Bfree>
 8015620:	4628      	mov	r0, r5
 8015622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015626:	f842 0f04 	str.w	r0, [r2, #4]!
 801562a:	3301      	adds	r3, #1
 801562c:	e7c5      	b.n	80155ba <__lshift+0x4a>
 801562e:	3904      	subs	r1, #4
 8015630:	f853 2b04 	ldr.w	r2, [r3], #4
 8015634:	f841 2f04 	str.w	r2, [r1, #4]!
 8015638:	459c      	cmp	ip, r3
 801563a:	d8f9      	bhi.n	8015630 <__lshift+0xc0>
 801563c:	e7ea      	b.n	8015614 <__lshift+0xa4>
 801563e:	bf00      	nop
 8015640:	08019209 	.word	0x08019209
 8015644:	08019296 	.word	0x08019296

08015648 <__mcmp>:
 8015648:	b530      	push	{r4, r5, lr}
 801564a:	6902      	ldr	r2, [r0, #16]
 801564c:	690c      	ldr	r4, [r1, #16]
 801564e:	1b12      	subs	r2, r2, r4
 8015650:	d10e      	bne.n	8015670 <__mcmp+0x28>
 8015652:	f100 0314 	add.w	r3, r0, #20
 8015656:	3114      	adds	r1, #20
 8015658:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801565c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015660:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015664:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015668:	42a5      	cmp	r5, r4
 801566a:	d003      	beq.n	8015674 <__mcmp+0x2c>
 801566c:	d305      	bcc.n	801567a <__mcmp+0x32>
 801566e:	2201      	movs	r2, #1
 8015670:	4610      	mov	r0, r2
 8015672:	bd30      	pop	{r4, r5, pc}
 8015674:	4283      	cmp	r3, r0
 8015676:	d3f3      	bcc.n	8015660 <__mcmp+0x18>
 8015678:	e7fa      	b.n	8015670 <__mcmp+0x28>
 801567a:	f04f 32ff 	mov.w	r2, #4294967295
 801567e:	e7f7      	b.n	8015670 <__mcmp+0x28>

08015680 <__mdiff>:
 8015680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015684:	460c      	mov	r4, r1
 8015686:	4606      	mov	r6, r0
 8015688:	4611      	mov	r1, r2
 801568a:	4620      	mov	r0, r4
 801568c:	4617      	mov	r7, r2
 801568e:	f7ff ffdb 	bl	8015648 <__mcmp>
 8015692:	1e05      	subs	r5, r0, #0
 8015694:	d110      	bne.n	80156b8 <__mdiff+0x38>
 8015696:	4629      	mov	r1, r5
 8015698:	4630      	mov	r0, r6
 801569a:	f7ff fd0d 	bl	80150b8 <_Balloc>
 801569e:	b930      	cbnz	r0, 80156ae <__mdiff+0x2e>
 80156a0:	4b39      	ldr	r3, [pc, #228]	; (8015788 <__mdiff+0x108>)
 80156a2:	4602      	mov	r2, r0
 80156a4:	f240 2132 	movw	r1, #562	; 0x232
 80156a8:	4838      	ldr	r0, [pc, #224]	; (801578c <__mdiff+0x10c>)
 80156aa:	f7fe facf 	bl	8013c4c <__assert_func>
 80156ae:	2301      	movs	r3, #1
 80156b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80156b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b8:	bfa4      	itt	ge
 80156ba:	463b      	movge	r3, r7
 80156bc:	4627      	movge	r7, r4
 80156be:	4630      	mov	r0, r6
 80156c0:	6879      	ldr	r1, [r7, #4]
 80156c2:	bfa6      	itte	ge
 80156c4:	461c      	movge	r4, r3
 80156c6:	2500      	movge	r5, #0
 80156c8:	2501      	movlt	r5, #1
 80156ca:	f7ff fcf5 	bl	80150b8 <_Balloc>
 80156ce:	b920      	cbnz	r0, 80156da <__mdiff+0x5a>
 80156d0:	4b2d      	ldr	r3, [pc, #180]	; (8015788 <__mdiff+0x108>)
 80156d2:	4602      	mov	r2, r0
 80156d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80156d8:	e7e6      	b.n	80156a8 <__mdiff+0x28>
 80156da:	693e      	ldr	r6, [r7, #16]
 80156dc:	60c5      	str	r5, [r0, #12]
 80156de:	6925      	ldr	r5, [r4, #16]
 80156e0:	f107 0114 	add.w	r1, r7, #20
 80156e4:	f104 0914 	add.w	r9, r4, #20
 80156e8:	f100 0e14 	add.w	lr, r0, #20
 80156ec:	f107 0210 	add.w	r2, r7, #16
 80156f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80156f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80156f8:	46f2      	mov	sl, lr
 80156fa:	2700      	movs	r7, #0
 80156fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8015700:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015704:	fa1f f883 	uxth.w	r8, r3
 8015708:	fa17 f78b 	uxtah	r7, r7, fp
 801570c:	0c1b      	lsrs	r3, r3, #16
 801570e:	eba7 0808 	sub.w	r8, r7, r8
 8015712:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015716:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801571a:	fa1f f888 	uxth.w	r8, r8
 801571e:	141f      	asrs	r7, r3, #16
 8015720:	454d      	cmp	r5, r9
 8015722:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015726:	f84a 3b04 	str.w	r3, [sl], #4
 801572a:	d8e7      	bhi.n	80156fc <__mdiff+0x7c>
 801572c:	1b2b      	subs	r3, r5, r4
 801572e:	3b15      	subs	r3, #21
 8015730:	f023 0303 	bic.w	r3, r3, #3
 8015734:	3304      	adds	r3, #4
 8015736:	3415      	adds	r4, #21
 8015738:	42a5      	cmp	r5, r4
 801573a:	bf38      	it	cc
 801573c:	2304      	movcc	r3, #4
 801573e:	4419      	add	r1, r3
 8015740:	4473      	add	r3, lr
 8015742:	469e      	mov	lr, r3
 8015744:	460d      	mov	r5, r1
 8015746:	4565      	cmp	r5, ip
 8015748:	d30e      	bcc.n	8015768 <__mdiff+0xe8>
 801574a:	f10c 0203 	add.w	r2, ip, #3
 801574e:	1a52      	subs	r2, r2, r1
 8015750:	f022 0203 	bic.w	r2, r2, #3
 8015754:	3903      	subs	r1, #3
 8015756:	458c      	cmp	ip, r1
 8015758:	bf38      	it	cc
 801575a:	2200      	movcc	r2, #0
 801575c:	441a      	add	r2, r3
 801575e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015762:	b17b      	cbz	r3, 8015784 <__mdiff+0x104>
 8015764:	6106      	str	r6, [r0, #16]
 8015766:	e7a5      	b.n	80156b4 <__mdiff+0x34>
 8015768:	f855 8b04 	ldr.w	r8, [r5], #4
 801576c:	fa17 f488 	uxtah	r4, r7, r8
 8015770:	1422      	asrs	r2, r4, #16
 8015772:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015776:	b2a4      	uxth	r4, r4
 8015778:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801577c:	f84e 4b04 	str.w	r4, [lr], #4
 8015780:	1417      	asrs	r7, r2, #16
 8015782:	e7e0      	b.n	8015746 <__mdiff+0xc6>
 8015784:	3e01      	subs	r6, #1
 8015786:	e7ea      	b.n	801575e <__mdiff+0xde>
 8015788:	08019209 	.word	0x08019209
 801578c:	08019296 	.word	0x08019296

08015790 <__ulp>:
 8015790:	b082      	sub	sp, #8
 8015792:	ed8d 0b00 	vstr	d0, [sp]
 8015796:	9b01      	ldr	r3, [sp, #4]
 8015798:	4912      	ldr	r1, [pc, #72]	; (80157e4 <__ulp+0x54>)
 801579a:	4019      	ands	r1, r3
 801579c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80157a0:	2900      	cmp	r1, #0
 80157a2:	dd05      	ble.n	80157b0 <__ulp+0x20>
 80157a4:	2200      	movs	r2, #0
 80157a6:	460b      	mov	r3, r1
 80157a8:	ec43 2b10 	vmov	d0, r2, r3
 80157ac:	b002      	add	sp, #8
 80157ae:	4770      	bx	lr
 80157b0:	4249      	negs	r1, r1
 80157b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80157b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80157ba:	f04f 0200 	mov.w	r2, #0
 80157be:	f04f 0300 	mov.w	r3, #0
 80157c2:	da04      	bge.n	80157ce <__ulp+0x3e>
 80157c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80157c8:	fa41 f300 	asr.w	r3, r1, r0
 80157cc:	e7ec      	b.n	80157a8 <__ulp+0x18>
 80157ce:	f1a0 0114 	sub.w	r1, r0, #20
 80157d2:	291e      	cmp	r1, #30
 80157d4:	bfda      	itte	le
 80157d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80157da:	fa20 f101 	lsrle.w	r1, r0, r1
 80157de:	2101      	movgt	r1, #1
 80157e0:	460a      	mov	r2, r1
 80157e2:	e7e1      	b.n	80157a8 <__ulp+0x18>
 80157e4:	7ff00000 	.word	0x7ff00000

080157e8 <__b2d>:
 80157e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ea:	6905      	ldr	r5, [r0, #16]
 80157ec:	f100 0714 	add.w	r7, r0, #20
 80157f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80157f4:	1f2e      	subs	r6, r5, #4
 80157f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80157fa:	4620      	mov	r0, r4
 80157fc:	f7ff fd52 	bl	80152a4 <__hi0bits>
 8015800:	f1c0 0320 	rsb	r3, r0, #32
 8015804:	280a      	cmp	r0, #10
 8015806:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015884 <__b2d+0x9c>
 801580a:	600b      	str	r3, [r1, #0]
 801580c:	dc14      	bgt.n	8015838 <__b2d+0x50>
 801580e:	f1c0 0e0b 	rsb	lr, r0, #11
 8015812:	fa24 f10e 	lsr.w	r1, r4, lr
 8015816:	42b7      	cmp	r7, r6
 8015818:	ea41 030c 	orr.w	r3, r1, ip
 801581c:	bf34      	ite	cc
 801581e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015822:	2100      	movcs	r1, #0
 8015824:	3015      	adds	r0, #21
 8015826:	fa04 f000 	lsl.w	r0, r4, r0
 801582a:	fa21 f10e 	lsr.w	r1, r1, lr
 801582e:	ea40 0201 	orr.w	r2, r0, r1
 8015832:	ec43 2b10 	vmov	d0, r2, r3
 8015836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015838:	42b7      	cmp	r7, r6
 801583a:	bf3a      	itte	cc
 801583c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015840:	f1a5 0608 	subcc.w	r6, r5, #8
 8015844:	2100      	movcs	r1, #0
 8015846:	380b      	subs	r0, #11
 8015848:	d017      	beq.n	801587a <__b2d+0x92>
 801584a:	f1c0 0c20 	rsb	ip, r0, #32
 801584e:	fa04 f500 	lsl.w	r5, r4, r0
 8015852:	42be      	cmp	r6, r7
 8015854:	fa21 f40c 	lsr.w	r4, r1, ip
 8015858:	ea45 0504 	orr.w	r5, r5, r4
 801585c:	bf8c      	ite	hi
 801585e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015862:	2400      	movls	r4, #0
 8015864:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015868:	fa01 f000 	lsl.w	r0, r1, r0
 801586c:	fa24 f40c 	lsr.w	r4, r4, ip
 8015870:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015874:	ea40 0204 	orr.w	r2, r0, r4
 8015878:	e7db      	b.n	8015832 <__b2d+0x4a>
 801587a:	ea44 030c 	orr.w	r3, r4, ip
 801587e:	460a      	mov	r2, r1
 8015880:	e7d7      	b.n	8015832 <__b2d+0x4a>
 8015882:	bf00      	nop
 8015884:	3ff00000 	.word	0x3ff00000

08015888 <__d2b>:
 8015888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801588c:	4689      	mov	r9, r1
 801588e:	2101      	movs	r1, #1
 8015890:	ec57 6b10 	vmov	r6, r7, d0
 8015894:	4690      	mov	r8, r2
 8015896:	f7ff fc0f 	bl	80150b8 <_Balloc>
 801589a:	4604      	mov	r4, r0
 801589c:	b930      	cbnz	r0, 80158ac <__d2b+0x24>
 801589e:	4602      	mov	r2, r0
 80158a0:	4b25      	ldr	r3, [pc, #148]	; (8015938 <__d2b+0xb0>)
 80158a2:	4826      	ldr	r0, [pc, #152]	; (801593c <__d2b+0xb4>)
 80158a4:	f240 310a 	movw	r1, #778	; 0x30a
 80158a8:	f7fe f9d0 	bl	8013c4c <__assert_func>
 80158ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80158b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80158b4:	bb35      	cbnz	r5, 8015904 <__d2b+0x7c>
 80158b6:	2e00      	cmp	r6, #0
 80158b8:	9301      	str	r3, [sp, #4]
 80158ba:	d028      	beq.n	801590e <__d2b+0x86>
 80158bc:	4668      	mov	r0, sp
 80158be:	9600      	str	r6, [sp, #0]
 80158c0:	f7ff fd10 	bl	80152e4 <__lo0bits>
 80158c4:	9900      	ldr	r1, [sp, #0]
 80158c6:	b300      	cbz	r0, 801590a <__d2b+0x82>
 80158c8:	9a01      	ldr	r2, [sp, #4]
 80158ca:	f1c0 0320 	rsb	r3, r0, #32
 80158ce:	fa02 f303 	lsl.w	r3, r2, r3
 80158d2:	430b      	orrs	r3, r1
 80158d4:	40c2      	lsrs	r2, r0
 80158d6:	6163      	str	r3, [r4, #20]
 80158d8:	9201      	str	r2, [sp, #4]
 80158da:	9b01      	ldr	r3, [sp, #4]
 80158dc:	61a3      	str	r3, [r4, #24]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	bf14      	ite	ne
 80158e2:	2202      	movne	r2, #2
 80158e4:	2201      	moveq	r2, #1
 80158e6:	6122      	str	r2, [r4, #16]
 80158e8:	b1d5      	cbz	r5, 8015920 <__d2b+0x98>
 80158ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80158ee:	4405      	add	r5, r0
 80158f0:	f8c9 5000 	str.w	r5, [r9]
 80158f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80158f8:	f8c8 0000 	str.w	r0, [r8]
 80158fc:	4620      	mov	r0, r4
 80158fe:	b003      	add	sp, #12
 8015900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015908:	e7d5      	b.n	80158b6 <__d2b+0x2e>
 801590a:	6161      	str	r1, [r4, #20]
 801590c:	e7e5      	b.n	80158da <__d2b+0x52>
 801590e:	a801      	add	r0, sp, #4
 8015910:	f7ff fce8 	bl	80152e4 <__lo0bits>
 8015914:	9b01      	ldr	r3, [sp, #4]
 8015916:	6163      	str	r3, [r4, #20]
 8015918:	2201      	movs	r2, #1
 801591a:	6122      	str	r2, [r4, #16]
 801591c:	3020      	adds	r0, #32
 801591e:	e7e3      	b.n	80158e8 <__d2b+0x60>
 8015920:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015924:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015928:	f8c9 0000 	str.w	r0, [r9]
 801592c:	6918      	ldr	r0, [r3, #16]
 801592e:	f7ff fcb9 	bl	80152a4 <__hi0bits>
 8015932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015936:	e7df      	b.n	80158f8 <__d2b+0x70>
 8015938:	08019209 	.word	0x08019209
 801593c:	08019296 	.word	0x08019296

08015940 <__ratio>:
 8015940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015944:	4688      	mov	r8, r1
 8015946:	4669      	mov	r1, sp
 8015948:	4681      	mov	r9, r0
 801594a:	f7ff ff4d 	bl	80157e8 <__b2d>
 801594e:	a901      	add	r1, sp, #4
 8015950:	4640      	mov	r0, r8
 8015952:	ec55 4b10 	vmov	r4, r5, d0
 8015956:	f7ff ff47 	bl	80157e8 <__b2d>
 801595a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801595e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015962:	eba3 0c02 	sub.w	ip, r3, r2
 8015966:	e9dd 3200 	ldrd	r3, r2, [sp]
 801596a:	1a9b      	subs	r3, r3, r2
 801596c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015970:	ec51 0b10 	vmov	r0, r1, d0
 8015974:	2b00      	cmp	r3, #0
 8015976:	bfd6      	itet	le
 8015978:	460a      	movle	r2, r1
 801597a:	462a      	movgt	r2, r5
 801597c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015980:	468b      	mov	fp, r1
 8015982:	462f      	mov	r7, r5
 8015984:	bfd4      	ite	le
 8015986:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801598a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801598e:	4620      	mov	r0, r4
 8015990:	ee10 2a10 	vmov	r2, s0
 8015994:	465b      	mov	r3, fp
 8015996:	4639      	mov	r1, r7
 8015998:	f7ea ff58 	bl	800084c <__aeabi_ddiv>
 801599c:	ec41 0b10 	vmov	d0, r0, r1
 80159a0:	b003      	add	sp, #12
 80159a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080159a6 <__copybits>:
 80159a6:	3901      	subs	r1, #1
 80159a8:	b570      	push	{r4, r5, r6, lr}
 80159aa:	1149      	asrs	r1, r1, #5
 80159ac:	6914      	ldr	r4, [r2, #16]
 80159ae:	3101      	adds	r1, #1
 80159b0:	f102 0314 	add.w	r3, r2, #20
 80159b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80159b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80159bc:	1f05      	subs	r5, r0, #4
 80159be:	42a3      	cmp	r3, r4
 80159c0:	d30c      	bcc.n	80159dc <__copybits+0x36>
 80159c2:	1aa3      	subs	r3, r4, r2
 80159c4:	3b11      	subs	r3, #17
 80159c6:	f023 0303 	bic.w	r3, r3, #3
 80159ca:	3211      	adds	r2, #17
 80159cc:	42a2      	cmp	r2, r4
 80159ce:	bf88      	it	hi
 80159d0:	2300      	movhi	r3, #0
 80159d2:	4418      	add	r0, r3
 80159d4:	2300      	movs	r3, #0
 80159d6:	4288      	cmp	r0, r1
 80159d8:	d305      	bcc.n	80159e6 <__copybits+0x40>
 80159da:	bd70      	pop	{r4, r5, r6, pc}
 80159dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80159e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80159e4:	e7eb      	b.n	80159be <__copybits+0x18>
 80159e6:	f840 3b04 	str.w	r3, [r0], #4
 80159ea:	e7f4      	b.n	80159d6 <__copybits+0x30>

080159ec <__any_on>:
 80159ec:	f100 0214 	add.w	r2, r0, #20
 80159f0:	6900      	ldr	r0, [r0, #16]
 80159f2:	114b      	asrs	r3, r1, #5
 80159f4:	4298      	cmp	r0, r3
 80159f6:	b510      	push	{r4, lr}
 80159f8:	db11      	blt.n	8015a1e <__any_on+0x32>
 80159fa:	dd0a      	ble.n	8015a12 <__any_on+0x26>
 80159fc:	f011 011f 	ands.w	r1, r1, #31
 8015a00:	d007      	beq.n	8015a12 <__any_on+0x26>
 8015a02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015a06:	fa24 f001 	lsr.w	r0, r4, r1
 8015a0a:	fa00 f101 	lsl.w	r1, r0, r1
 8015a0e:	428c      	cmp	r4, r1
 8015a10:	d10b      	bne.n	8015a2a <__any_on+0x3e>
 8015a12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015a16:	4293      	cmp	r3, r2
 8015a18:	d803      	bhi.n	8015a22 <__any_on+0x36>
 8015a1a:	2000      	movs	r0, #0
 8015a1c:	bd10      	pop	{r4, pc}
 8015a1e:	4603      	mov	r3, r0
 8015a20:	e7f7      	b.n	8015a12 <__any_on+0x26>
 8015a22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015a26:	2900      	cmp	r1, #0
 8015a28:	d0f5      	beq.n	8015a16 <__any_on+0x2a>
 8015a2a:	2001      	movs	r0, #1
 8015a2c:	e7f6      	b.n	8015a1c <__any_on+0x30>

08015a2e <_calloc_r>:
 8015a2e:	b513      	push	{r0, r1, r4, lr}
 8015a30:	434a      	muls	r2, r1
 8015a32:	4611      	mov	r1, r2
 8015a34:	9201      	str	r2, [sp, #4]
 8015a36:	f000 f859 	bl	8015aec <_malloc_r>
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	b118      	cbz	r0, 8015a46 <_calloc_r+0x18>
 8015a3e:	9a01      	ldr	r2, [sp, #4]
 8015a40:	2100      	movs	r1, #0
 8015a42:	f7fc fcfd 	bl	8012440 <memset>
 8015a46:	4620      	mov	r0, r4
 8015a48:	b002      	add	sp, #8
 8015a4a:	bd10      	pop	{r4, pc}

08015a4c <_free_r>:
 8015a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a4e:	2900      	cmp	r1, #0
 8015a50:	d048      	beq.n	8015ae4 <_free_r+0x98>
 8015a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a56:	9001      	str	r0, [sp, #4]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8015a5e:	bfb8      	it	lt
 8015a60:	18e4      	addlt	r4, r4, r3
 8015a62:	f000 fe93 	bl	801678c <__malloc_lock>
 8015a66:	4a20      	ldr	r2, [pc, #128]	; (8015ae8 <_free_r+0x9c>)
 8015a68:	9801      	ldr	r0, [sp, #4]
 8015a6a:	6813      	ldr	r3, [r2, #0]
 8015a6c:	4615      	mov	r5, r2
 8015a6e:	b933      	cbnz	r3, 8015a7e <_free_r+0x32>
 8015a70:	6063      	str	r3, [r4, #4]
 8015a72:	6014      	str	r4, [r2, #0]
 8015a74:	b003      	add	sp, #12
 8015a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a7a:	f000 be8d 	b.w	8016798 <__malloc_unlock>
 8015a7e:	42a3      	cmp	r3, r4
 8015a80:	d90b      	bls.n	8015a9a <_free_r+0x4e>
 8015a82:	6821      	ldr	r1, [r4, #0]
 8015a84:	1862      	adds	r2, r4, r1
 8015a86:	4293      	cmp	r3, r2
 8015a88:	bf04      	itt	eq
 8015a8a:	681a      	ldreq	r2, [r3, #0]
 8015a8c:	685b      	ldreq	r3, [r3, #4]
 8015a8e:	6063      	str	r3, [r4, #4]
 8015a90:	bf04      	itt	eq
 8015a92:	1852      	addeq	r2, r2, r1
 8015a94:	6022      	streq	r2, [r4, #0]
 8015a96:	602c      	str	r4, [r5, #0]
 8015a98:	e7ec      	b.n	8015a74 <_free_r+0x28>
 8015a9a:	461a      	mov	r2, r3
 8015a9c:	685b      	ldr	r3, [r3, #4]
 8015a9e:	b10b      	cbz	r3, 8015aa4 <_free_r+0x58>
 8015aa0:	42a3      	cmp	r3, r4
 8015aa2:	d9fa      	bls.n	8015a9a <_free_r+0x4e>
 8015aa4:	6811      	ldr	r1, [r2, #0]
 8015aa6:	1855      	adds	r5, r2, r1
 8015aa8:	42a5      	cmp	r5, r4
 8015aaa:	d10b      	bne.n	8015ac4 <_free_r+0x78>
 8015aac:	6824      	ldr	r4, [r4, #0]
 8015aae:	4421      	add	r1, r4
 8015ab0:	1854      	adds	r4, r2, r1
 8015ab2:	42a3      	cmp	r3, r4
 8015ab4:	6011      	str	r1, [r2, #0]
 8015ab6:	d1dd      	bne.n	8015a74 <_free_r+0x28>
 8015ab8:	681c      	ldr	r4, [r3, #0]
 8015aba:	685b      	ldr	r3, [r3, #4]
 8015abc:	6053      	str	r3, [r2, #4]
 8015abe:	4421      	add	r1, r4
 8015ac0:	6011      	str	r1, [r2, #0]
 8015ac2:	e7d7      	b.n	8015a74 <_free_r+0x28>
 8015ac4:	d902      	bls.n	8015acc <_free_r+0x80>
 8015ac6:	230c      	movs	r3, #12
 8015ac8:	6003      	str	r3, [r0, #0]
 8015aca:	e7d3      	b.n	8015a74 <_free_r+0x28>
 8015acc:	6825      	ldr	r5, [r4, #0]
 8015ace:	1961      	adds	r1, r4, r5
 8015ad0:	428b      	cmp	r3, r1
 8015ad2:	bf04      	itt	eq
 8015ad4:	6819      	ldreq	r1, [r3, #0]
 8015ad6:	685b      	ldreq	r3, [r3, #4]
 8015ad8:	6063      	str	r3, [r4, #4]
 8015ada:	bf04      	itt	eq
 8015adc:	1949      	addeq	r1, r1, r5
 8015ade:	6021      	streq	r1, [r4, #0]
 8015ae0:	6054      	str	r4, [r2, #4]
 8015ae2:	e7c7      	b.n	8015a74 <_free_r+0x28>
 8015ae4:	b003      	add	sp, #12
 8015ae6:	bd30      	pop	{r4, r5, pc}
 8015ae8:	20002cdc 	.word	0x20002cdc

08015aec <_malloc_r>:
 8015aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aee:	1ccd      	adds	r5, r1, #3
 8015af0:	f025 0503 	bic.w	r5, r5, #3
 8015af4:	3508      	adds	r5, #8
 8015af6:	2d0c      	cmp	r5, #12
 8015af8:	bf38      	it	cc
 8015afa:	250c      	movcc	r5, #12
 8015afc:	2d00      	cmp	r5, #0
 8015afe:	4606      	mov	r6, r0
 8015b00:	db01      	blt.n	8015b06 <_malloc_r+0x1a>
 8015b02:	42a9      	cmp	r1, r5
 8015b04:	d903      	bls.n	8015b0e <_malloc_r+0x22>
 8015b06:	230c      	movs	r3, #12
 8015b08:	6033      	str	r3, [r6, #0]
 8015b0a:	2000      	movs	r0, #0
 8015b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b0e:	f000 fe3d 	bl	801678c <__malloc_lock>
 8015b12:	4921      	ldr	r1, [pc, #132]	; (8015b98 <_malloc_r+0xac>)
 8015b14:	680a      	ldr	r2, [r1, #0]
 8015b16:	4614      	mov	r4, r2
 8015b18:	b99c      	cbnz	r4, 8015b42 <_malloc_r+0x56>
 8015b1a:	4f20      	ldr	r7, [pc, #128]	; (8015b9c <_malloc_r+0xb0>)
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	b923      	cbnz	r3, 8015b2a <_malloc_r+0x3e>
 8015b20:	4621      	mov	r1, r4
 8015b22:	4630      	mov	r0, r6
 8015b24:	f000 fafc 	bl	8016120 <_sbrk_r>
 8015b28:	6038      	str	r0, [r7, #0]
 8015b2a:	4629      	mov	r1, r5
 8015b2c:	4630      	mov	r0, r6
 8015b2e:	f000 faf7 	bl	8016120 <_sbrk_r>
 8015b32:	1c43      	adds	r3, r0, #1
 8015b34:	d123      	bne.n	8015b7e <_malloc_r+0x92>
 8015b36:	230c      	movs	r3, #12
 8015b38:	6033      	str	r3, [r6, #0]
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	f000 fe2c 	bl	8016798 <__malloc_unlock>
 8015b40:	e7e3      	b.n	8015b0a <_malloc_r+0x1e>
 8015b42:	6823      	ldr	r3, [r4, #0]
 8015b44:	1b5b      	subs	r3, r3, r5
 8015b46:	d417      	bmi.n	8015b78 <_malloc_r+0x8c>
 8015b48:	2b0b      	cmp	r3, #11
 8015b4a:	d903      	bls.n	8015b54 <_malloc_r+0x68>
 8015b4c:	6023      	str	r3, [r4, #0]
 8015b4e:	441c      	add	r4, r3
 8015b50:	6025      	str	r5, [r4, #0]
 8015b52:	e004      	b.n	8015b5e <_malloc_r+0x72>
 8015b54:	6863      	ldr	r3, [r4, #4]
 8015b56:	42a2      	cmp	r2, r4
 8015b58:	bf0c      	ite	eq
 8015b5a:	600b      	streq	r3, [r1, #0]
 8015b5c:	6053      	strne	r3, [r2, #4]
 8015b5e:	4630      	mov	r0, r6
 8015b60:	f000 fe1a 	bl	8016798 <__malloc_unlock>
 8015b64:	f104 000b 	add.w	r0, r4, #11
 8015b68:	1d23      	adds	r3, r4, #4
 8015b6a:	f020 0007 	bic.w	r0, r0, #7
 8015b6e:	1ac2      	subs	r2, r0, r3
 8015b70:	d0cc      	beq.n	8015b0c <_malloc_r+0x20>
 8015b72:	1a1b      	subs	r3, r3, r0
 8015b74:	50a3      	str	r3, [r4, r2]
 8015b76:	e7c9      	b.n	8015b0c <_malloc_r+0x20>
 8015b78:	4622      	mov	r2, r4
 8015b7a:	6864      	ldr	r4, [r4, #4]
 8015b7c:	e7cc      	b.n	8015b18 <_malloc_r+0x2c>
 8015b7e:	1cc4      	adds	r4, r0, #3
 8015b80:	f024 0403 	bic.w	r4, r4, #3
 8015b84:	42a0      	cmp	r0, r4
 8015b86:	d0e3      	beq.n	8015b50 <_malloc_r+0x64>
 8015b88:	1a21      	subs	r1, r4, r0
 8015b8a:	4630      	mov	r0, r6
 8015b8c:	f000 fac8 	bl	8016120 <_sbrk_r>
 8015b90:	3001      	adds	r0, #1
 8015b92:	d1dd      	bne.n	8015b50 <_malloc_r+0x64>
 8015b94:	e7cf      	b.n	8015b36 <_malloc_r+0x4a>
 8015b96:	bf00      	nop
 8015b98:	20002cdc 	.word	0x20002cdc
 8015b9c:	20002ce0 	.word	0x20002ce0

08015ba0 <__ssputs_r>:
 8015ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ba4:	688e      	ldr	r6, [r1, #8]
 8015ba6:	429e      	cmp	r6, r3
 8015ba8:	4682      	mov	sl, r0
 8015baa:	460c      	mov	r4, r1
 8015bac:	4690      	mov	r8, r2
 8015bae:	461f      	mov	r7, r3
 8015bb0:	d838      	bhi.n	8015c24 <__ssputs_r+0x84>
 8015bb2:	898a      	ldrh	r2, [r1, #12]
 8015bb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015bb8:	d032      	beq.n	8015c20 <__ssputs_r+0x80>
 8015bba:	6825      	ldr	r5, [r4, #0]
 8015bbc:	6909      	ldr	r1, [r1, #16]
 8015bbe:	eba5 0901 	sub.w	r9, r5, r1
 8015bc2:	6965      	ldr	r5, [r4, #20]
 8015bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015bc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015bcc:	3301      	adds	r3, #1
 8015bce:	444b      	add	r3, r9
 8015bd0:	106d      	asrs	r5, r5, #1
 8015bd2:	429d      	cmp	r5, r3
 8015bd4:	bf38      	it	cc
 8015bd6:	461d      	movcc	r5, r3
 8015bd8:	0553      	lsls	r3, r2, #21
 8015bda:	d531      	bpl.n	8015c40 <__ssputs_r+0xa0>
 8015bdc:	4629      	mov	r1, r5
 8015bde:	f7ff ff85 	bl	8015aec <_malloc_r>
 8015be2:	4606      	mov	r6, r0
 8015be4:	b950      	cbnz	r0, 8015bfc <__ssputs_r+0x5c>
 8015be6:	230c      	movs	r3, #12
 8015be8:	f8ca 3000 	str.w	r3, [sl]
 8015bec:	89a3      	ldrh	r3, [r4, #12]
 8015bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bf2:	81a3      	strh	r3, [r4, #12]
 8015bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8015bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bfc:	6921      	ldr	r1, [r4, #16]
 8015bfe:	464a      	mov	r2, r9
 8015c00:	f7fc fc10 	bl	8012424 <memcpy>
 8015c04:	89a3      	ldrh	r3, [r4, #12]
 8015c06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c0e:	81a3      	strh	r3, [r4, #12]
 8015c10:	6126      	str	r6, [r4, #16]
 8015c12:	6165      	str	r5, [r4, #20]
 8015c14:	444e      	add	r6, r9
 8015c16:	eba5 0509 	sub.w	r5, r5, r9
 8015c1a:	6026      	str	r6, [r4, #0]
 8015c1c:	60a5      	str	r5, [r4, #8]
 8015c1e:	463e      	mov	r6, r7
 8015c20:	42be      	cmp	r6, r7
 8015c22:	d900      	bls.n	8015c26 <__ssputs_r+0x86>
 8015c24:	463e      	mov	r6, r7
 8015c26:	4632      	mov	r2, r6
 8015c28:	6820      	ldr	r0, [r4, #0]
 8015c2a:	4641      	mov	r1, r8
 8015c2c:	f000 fd94 	bl	8016758 <memmove>
 8015c30:	68a3      	ldr	r3, [r4, #8]
 8015c32:	6822      	ldr	r2, [r4, #0]
 8015c34:	1b9b      	subs	r3, r3, r6
 8015c36:	4432      	add	r2, r6
 8015c38:	60a3      	str	r3, [r4, #8]
 8015c3a:	6022      	str	r2, [r4, #0]
 8015c3c:	2000      	movs	r0, #0
 8015c3e:	e7db      	b.n	8015bf8 <__ssputs_r+0x58>
 8015c40:	462a      	mov	r2, r5
 8015c42:	f000 fdaf 	bl	80167a4 <_realloc_r>
 8015c46:	4606      	mov	r6, r0
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d1e1      	bne.n	8015c10 <__ssputs_r+0x70>
 8015c4c:	6921      	ldr	r1, [r4, #16]
 8015c4e:	4650      	mov	r0, sl
 8015c50:	f7ff fefc 	bl	8015a4c <_free_r>
 8015c54:	e7c7      	b.n	8015be6 <__ssputs_r+0x46>
	...

08015c58 <_svfiprintf_r>:
 8015c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c5c:	4698      	mov	r8, r3
 8015c5e:	898b      	ldrh	r3, [r1, #12]
 8015c60:	061b      	lsls	r3, r3, #24
 8015c62:	b09d      	sub	sp, #116	; 0x74
 8015c64:	4607      	mov	r7, r0
 8015c66:	460d      	mov	r5, r1
 8015c68:	4614      	mov	r4, r2
 8015c6a:	d50e      	bpl.n	8015c8a <_svfiprintf_r+0x32>
 8015c6c:	690b      	ldr	r3, [r1, #16]
 8015c6e:	b963      	cbnz	r3, 8015c8a <_svfiprintf_r+0x32>
 8015c70:	2140      	movs	r1, #64	; 0x40
 8015c72:	f7ff ff3b 	bl	8015aec <_malloc_r>
 8015c76:	6028      	str	r0, [r5, #0]
 8015c78:	6128      	str	r0, [r5, #16]
 8015c7a:	b920      	cbnz	r0, 8015c86 <_svfiprintf_r+0x2e>
 8015c7c:	230c      	movs	r3, #12
 8015c7e:	603b      	str	r3, [r7, #0]
 8015c80:	f04f 30ff 	mov.w	r0, #4294967295
 8015c84:	e0d1      	b.n	8015e2a <_svfiprintf_r+0x1d2>
 8015c86:	2340      	movs	r3, #64	; 0x40
 8015c88:	616b      	str	r3, [r5, #20]
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8015c8e:	2320      	movs	r3, #32
 8015c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c98:	2330      	movs	r3, #48	; 0x30
 8015c9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015e44 <_svfiprintf_r+0x1ec>
 8015c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ca2:	f04f 0901 	mov.w	r9, #1
 8015ca6:	4623      	mov	r3, r4
 8015ca8:	469a      	mov	sl, r3
 8015caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cae:	b10a      	cbz	r2, 8015cb4 <_svfiprintf_r+0x5c>
 8015cb0:	2a25      	cmp	r2, #37	; 0x25
 8015cb2:	d1f9      	bne.n	8015ca8 <_svfiprintf_r+0x50>
 8015cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8015cb8:	d00b      	beq.n	8015cd2 <_svfiprintf_r+0x7a>
 8015cba:	465b      	mov	r3, fp
 8015cbc:	4622      	mov	r2, r4
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	4638      	mov	r0, r7
 8015cc2:	f7ff ff6d 	bl	8015ba0 <__ssputs_r>
 8015cc6:	3001      	adds	r0, #1
 8015cc8:	f000 80aa 	beq.w	8015e20 <_svfiprintf_r+0x1c8>
 8015ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015cce:	445a      	add	r2, fp
 8015cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8015cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	f000 80a2 	beq.w	8015e20 <_svfiprintf_r+0x1c8>
 8015cdc:	2300      	movs	r3, #0
 8015cde:	f04f 32ff 	mov.w	r2, #4294967295
 8015ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ce6:	f10a 0a01 	add.w	sl, sl, #1
 8015cea:	9304      	str	r3, [sp, #16]
 8015cec:	9307      	str	r3, [sp, #28]
 8015cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8015cf4:	4654      	mov	r4, sl
 8015cf6:	2205      	movs	r2, #5
 8015cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cfc:	4851      	ldr	r0, [pc, #324]	; (8015e44 <_svfiprintf_r+0x1ec>)
 8015cfe:	f7ea fa6f 	bl	80001e0 <memchr>
 8015d02:	9a04      	ldr	r2, [sp, #16]
 8015d04:	b9d8      	cbnz	r0, 8015d3e <_svfiprintf_r+0xe6>
 8015d06:	06d0      	lsls	r0, r2, #27
 8015d08:	bf44      	itt	mi
 8015d0a:	2320      	movmi	r3, #32
 8015d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d10:	0711      	lsls	r1, r2, #28
 8015d12:	bf44      	itt	mi
 8015d14:	232b      	movmi	r3, #43	; 0x2b
 8015d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8015d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8015d20:	d015      	beq.n	8015d4e <_svfiprintf_r+0xf6>
 8015d22:	9a07      	ldr	r2, [sp, #28]
 8015d24:	4654      	mov	r4, sl
 8015d26:	2000      	movs	r0, #0
 8015d28:	f04f 0c0a 	mov.w	ip, #10
 8015d2c:	4621      	mov	r1, r4
 8015d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d32:	3b30      	subs	r3, #48	; 0x30
 8015d34:	2b09      	cmp	r3, #9
 8015d36:	d94e      	bls.n	8015dd6 <_svfiprintf_r+0x17e>
 8015d38:	b1b0      	cbz	r0, 8015d68 <_svfiprintf_r+0x110>
 8015d3a:	9207      	str	r2, [sp, #28]
 8015d3c:	e014      	b.n	8015d68 <_svfiprintf_r+0x110>
 8015d3e:	eba0 0308 	sub.w	r3, r0, r8
 8015d42:	fa09 f303 	lsl.w	r3, r9, r3
 8015d46:	4313      	orrs	r3, r2
 8015d48:	9304      	str	r3, [sp, #16]
 8015d4a:	46a2      	mov	sl, r4
 8015d4c:	e7d2      	b.n	8015cf4 <_svfiprintf_r+0x9c>
 8015d4e:	9b03      	ldr	r3, [sp, #12]
 8015d50:	1d19      	adds	r1, r3, #4
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	9103      	str	r1, [sp, #12]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	bfbb      	ittet	lt
 8015d5a:	425b      	neglt	r3, r3
 8015d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8015d60:	9307      	strge	r3, [sp, #28]
 8015d62:	9307      	strlt	r3, [sp, #28]
 8015d64:	bfb8      	it	lt
 8015d66:	9204      	strlt	r2, [sp, #16]
 8015d68:	7823      	ldrb	r3, [r4, #0]
 8015d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8015d6c:	d10c      	bne.n	8015d88 <_svfiprintf_r+0x130>
 8015d6e:	7863      	ldrb	r3, [r4, #1]
 8015d70:	2b2a      	cmp	r3, #42	; 0x2a
 8015d72:	d135      	bne.n	8015de0 <_svfiprintf_r+0x188>
 8015d74:	9b03      	ldr	r3, [sp, #12]
 8015d76:	1d1a      	adds	r2, r3, #4
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	9203      	str	r2, [sp, #12]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	bfb8      	it	lt
 8015d80:	f04f 33ff 	movlt.w	r3, #4294967295
 8015d84:	3402      	adds	r4, #2
 8015d86:	9305      	str	r3, [sp, #20]
 8015d88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015e54 <_svfiprintf_r+0x1fc>
 8015d8c:	7821      	ldrb	r1, [r4, #0]
 8015d8e:	2203      	movs	r2, #3
 8015d90:	4650      	mov	r0, sl
 8015d92:	f7ea fa25 	bl	80001e0 <memchr>
 8015d96:	b140      	cbz	r0, 8015daa <_svfiprintf_r+0x152>
 8015d98:	2340      	movs	r3, #64	; 0x40
 8015d9a:	eba0 000a 	sub.w	r0, r0, sl
 8015d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8015da2:	9b04      	ldr	r3, [sp, #16]
 8015da4:	4303      	orrs	r3, r0
 8015da6:	3401      	adds	r4, #1
 8015da8:	9304      	str	r3, [sp, #16]
 8015daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dae:	4826      	ldr	r0, [pc, #152]	; (8015e48 <_svfiprintf_r+0x1f0>)
 8015db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015db4:	2206      	movs	r2, #6
 8015db6:	f7ea fa13 	bl	80001e0 <memchr>
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	d038      	beq.n	8015e30 <_svfiprintf_r+0x1d8>
 8015dbe:	4b23      	ldr	r3, [pc, #140]	; (8015e4c <_svfiprintf_r+0x1f4>)
 8015dc0:	bb1b      	cbnz	r3, 8015e0a <_svfiprintf_r+0x1b2>
 8015dc2:	9b03      	ldr	r3, [sp, #12]
 8015dc4:	3307      	adds	r3, #7
 8015dc6:	f023 0307 	bic.w	r3, r3, #7
 8015dca:	3308      	adds	r3, #8
 8015dcc:	9303      	str	r3, [sp, #12]
 8015dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dd0:	4433      	add	r3, r6
 8015dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8015dd4:	e767      	b.n	8015ca6 <_svfiprintf_r+0x4e>
 8015dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8015dda:	460c      	mov	r4, r1
 8015ddc:	2001      	movs	r0, #1
 8015dde:	e7a5      	b.n	8015d2c <_svfiprintf_r+0xd4>
 8015de0:	2300      	movs	r3, #0
 8015de2:	3401      	adds	r4, #1
 8015de4:	9305      	str	r3, [sp, #20]
 8015de6:	4619      	mov	r1, r3
 8015de8:	f04f 0c0a 	mov.w	ip, #10
 8015dec:	4620      	mov	r0, r4
 8015dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015df2:	3a30      	subs	r2, #48	; 0x30
 8015df4:	2a09      	cmp	r2, #9
 8015df6:	d903      	bls.n	8015e00 <_svfiprintf_r+0x1a8>
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d0c5      	beq.n	8015d88 <_svfiprintf_r+0x130>
 8015dfc:	9105      	str	r1, [sp, #20]
 8015dfe:	e7c3      	b.n	8015d88 <_svfiprintf_r+0x130>
 8015e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e04:	4604      	mov	r4, r0
 8015e06:	2301      	movs	r3, #1
 8015e08:	e7f0      	b.n	8015dec <_svfiprintf_r+0x194>
 8015e0a:	ab03      	add	r3, sp, #12
 8015e0c:	9300      	str	r3, [sp, #0]
 8015e0e:	462a      	mov	r2, r5
 8015e10:	4b0f      	ldr	r3, [pc, #60]	; (8015e50 <_svfiprintf_r+0x1f8>)
 8015e12:	a904      	add	r1, sp, #16
 8015e14:	4638      	mov	r0, r7
 8015e16:	f7fc fbbb 	bl	8012590 <_printf_float>
 8015e1a:	1c42      	adds	r2, r0, #1
 8015e1c:	4606      	mov	r6, r0
 8015e1e:	d1d6      	bne.n	8015dce <_svfiprintf_r+0x176>
 8015e20:	89ab      	ldrh	r3, [r5, #12]
 8015e22:	065b      	lsls	r3, r3, #25
 8015e24:	f53f af2c 	bmi.w	8015c80 <_svfiprintf_r+0x28>
 8015e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e2a:	b01d      	add	sp, #116	; 0x74
 8015e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e30:	ab03      	add	r3, sp, #12
 8015e32:	9300      	str	r3, [sp, #0]
 8015e34:	462a      	mov	r2, r5
 8015e36:	4b06      	ldr	r3, [pc, #24]	; (8015e50 <_svfiprintf_r+0x1f8>)
 8015e38:	a904      	add	r1, sp, #16
 8015e3a:	4638      	mov	r0, r7
 8015e3c:	f7fc fe4c 	bl	8012ad8 <_printf_i>
 8015e40:	e7eb      	b.n	8015e1a <_svfiprintf_r+0x1c2>
 8015e42:	bf00      	nop
 8015e44:	080193f4 	.word	0x080193f4
 8015e48:	080193fe 	.word	0x080193fe
 8015e4c:	08012591 	.word	0x08012591
 8015e50:	08015ba1 	.word	0x08015ba1
 8015e54:	080193fa 	.word	0x080193fa

08015e58 <__sfputc_r>:
 8015e58:	6893      	ldr	r3, [r2, #8]
 8015e5a:	3b01      	subs	r3, #1
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	b410      	push	{r4}
 8015e60:	6093      	str	r3, [r2, #8]
 8015e62:	da08      	bge.n	8015e76 <__sfputc_r+0x1e>
 8015e64:	6994      	ldr	r4, [r2, #24]
 8015e66:	42a3      	cmp	r3, r4
 8015e68:	db01      	blt.n	8015e6e <__sfputc_r+0x16>
 8015e6a:	290a      	cmp	r1, #10
 8015e6c:	d103      	bne.n	8015e76 <__sfputc_r+0x1e>
 8015e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e72:	f000 b97d 	b.w	8016170 <__swbuf_r>
 8015e76:	6813      	ldr	r3, [r2, #0]
 8015e78:	1c58      	adds	r0, r3, #1
 8015e7a:	6010      	str	r0, [r2, #0]
 8015e7c:	7019      	strb	r1, [r3, #0]
 8015e7e:	4608      	mov	r0, r1
 8015e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e84:	4770      	bx	lr

08015e86 <__sfputs_r>:
 8015e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e88:	4606      	mov	r6, r0
 8015e8a:	460f      	mov	r7, r1
 8015e8c:	4614      	mov	r4, r2
 8015e8e:	18d5      	adds	r5, r2, r3
 8015e90:	42ac      	cmp	r4, r5
 8015e92:	d101      	bne.n	8015e98 <__sfputs_r+0x12>
 8015e94:	2000      	movs	r0, #0
 8015e96:	e007      	b.n	8015ea8 <__sfputs_r+0x22>
 8015e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e9c:	463a      	mov	r2, r7
 8015e9e:	4630      	mov	r0, r6
 8015ea0:	f7ff ffda 	bl	8015e58 <__sfputc_r>
 8015ea4:	1c43      	adds	r3, r0, #1
 8015ea6:	d1f3      	bne.n	8015e90 <__sfputs_r+0xa>
 8015ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015eac <_vfiprintf_r>:
 8015eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb0:	460d      	mov	r5, r1
 8015eb2:	b09d      	sub	sp, #116	; 0x74
 8015eb4:	4614      	mov	r4, r2
 8015eb6:	4698      	mov	r8, r3
 8015eb8:	4606      	mov	r6, r0
 8015eba:	b118      	cbz	r0, 8015ec4 <_vfiprintf_r+0x18>
 8015ebc:	6983      	ldr	r3, [r0, #24]
 8015ebe:	b90b      	cbnz	r3, 8015ec4 <_vfiprintf_r+0x18>
 8015ec0:	f000 fb46 	bl	8016550 <__sinit>
 8015ec4:	4b89      	ldr	r3, [pc, #548]	; (80160ec <_vfiprintf_r+0x240>)
 8015ec6:	429d      	cmp	r5, r3
 8015ec8:	d11b      	bne.n	8015f02 <_vfiprintf_r+0x56>
 8015eca:	6875      	ldr	r5, [r6, #4]
 8015ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ece:	07d9      	lsls	r1, r3, #31
 8015ed0:	d405      	bmi.n	8015ede <_vfiprintf_r+0x32>
 8015ed2:	89ab      	ldrh	r3, [r5, #12]
 8015ed4:	059a      	lsls	r2, r3, #22
 8015ed6:	d402      	bmi.n	8015ede <_vfiprintf_r+0x32>
 8015ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015eda:	f000 fbd7 	bl	801668c <__retarget_lock_acquire_recursive>
 8015ede:	89ab      	ldrh	r3, [r5, #12]
 8015ee0:	071b      	lsls	r3, r3, #28
 8015ee2:	d501      	bpl.n	8015ee8 <_vfiprintf_r+0x3c>
 8015ee4:	692b      	ldr	r3, [r5, #16]
 8015ee6:	b9eb      	cbnz	r3, 8015f24 <_vfiprintf_r+0x78>
 8015ee8:	4629      	mov	r1, r5
 8015eea:	4630      	mov	r0, r6
 8015eec:	f000 f9a0 	bl	8016230 <__swsetup_r>
 8015ef0:	b1c0      	cbz	r0, 8015f24 <_vfiprintf_r+0x78>
 8015ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ef4:	07dc      	lsls	r4, r3, #31
 8015ef6:	d50e      	bpl.n	8015f16 <_vfiprintf_r+0x6a>
 8015ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8015efc:	b01d      	add	sp, #116	; 0x74
 8015efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f02:	4b7b      	ldr	r3, [pc, #492]	; (80160f0 <_vfiprintf_r+0x244>)
 8015f04:	429d      	cmp	r5, r3
 8015f06:	d101      	bne.n	8015f0c <_vfiprintf_r+0x60>
 8015f08:	68b5      	ldr	r5, [r6, #8]
 8015f0a:	e7df      	b.n	8015ecc <_vfiprintf_r+0x20>
 8015f0c:	4b79      	ldr	r3, [pc, #484]	; (80160f4 <_vfiprintf_r+0x248>)
 8015f0e:	429d      	cmp	r5, r3
 8015f10:	bf08      	it	eq
 8015f12:	68f5      	ldreq	r5, [r6, #12]
 8015f14:	e7da      	b.n	8015ecc <_vfiprintf_r+0x20>
 8015f16:	89ab      	ldrh	r3, [r5, #12]
 8015f18:	0598      	lsls	r0, r3, #22
 8015f1a:	d4ed      	bmi.n	8015ef8 <_vfiprintf_r+0x4c>
 8015f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f1e:	f000 fbb6 	bl	801668e <__retarget_lock_release_recursive>
 8015f22:	e7e9      	b.n	8015ef8 <_vfiprintf_r+0x4c>
 8015f24:	2300      	movs	r3, #0
 8015f26:	9309      	str	r3, [sp, #36]	; 0x24
 8015f28:	2320      	movs	r3, #32
 8015f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f32:	2330      	movs	r3, #48	; 0x30
 8015f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80160f8 <_vfiprintf_r+0x24c>
 8015f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f3c:	f04f 0901 	mov.w	r9, #1
 8015f40:	4623      	mov	r3, r4
 8015f42:	469a      	mov	sl, r3
 8015f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f48:	b10a      	cbz	r2, 8015f4e <_vfiprintf_r+0xa2>
 8015f4a:	2a25      	cmp	r2, #37	; 0x25
 8015f4c:	d1f9      	bne.n	8015f42 <_vfiprintf_r+0x96>
 8015f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8015f52:	d00b      	beq.n	8015f6c <_vfiprintf_r+0xc0>
 8015f54:	465b      	mov	r3, fp
 8015f56:	4622      	mov	r2, r4
 8015f58:	4629      	mov	r1, r5
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	f7ff ff93 	bl	8015e86 <__sfputs_r>
 8015f60:	3001      	adds	r0, #1
 8015f62:	f000 80aa 	beq.w	80160ba <_vfiprintf_r+0x20e>
 8015f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f68:	445a      	add	r2, fp
 8015f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8015f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	f000 80a2 	beq.w	80160ba <_vfiprintf_r+0x20e>
 8015f76:	2300      	movs	r3, #0
 8015f78:	f04f 32ff 	mov.w	r2, #4294967295
 8015f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f80:	f10a 0a01 	add.w	sl, sl, #1
 8015f84:	9304      	str	r3, [sp, #16]
 8015f86:	9307      	str	r3, [sp, #28]
 8015f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8015f8e:	4654      	mov	r4, sl
 8015f90:	2205      	movs	r2, #5
 8015f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f96:	4858      	ldr	r0, [pc, #352]	; (80160f8 <_vfiprintf_r+0x24c>)
 8015f98:	f7ea f922 	bl	80001e0 <memchr>
 8015f9c:	9a04      	ldr	r2, [sp, #16]
 8015f9e:	b9d8      	cbnz	r0, 8015fd8 <_vfiprintf_r+0x12c>
 8015fa0:	06d1      	lsls	r1, r2, #27
 8015fa2:	bf44      	itt	mi
 8015fa4:	2320      	movmi	r3, #32
 8015fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015faa:	0713      	lsls	r3, r2, #28
 8015fac:	bf44      	itt	mi
 8015fae:	232b      	movmi	r3, #43	; 0x2b
 8015fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8015fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8015fba:	d015      	beq.n	8015fe8 <_vfiprintf_r+0x13c>
 8015fbc:	9a07      	ldr	r2, [sp, #28]
 8015fbe:	4654      	mov	r4, sl
 8015fc0:	2000      	movs	r0, #0
 8015fc2:	f04f 0c0a 	mov.w	ip, #10
 8015fc6:	4621      	mov	r1, r4
 8015fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fcc:	3b30      	subs	r3, #48	; 0x30
 8015fce:	2b09      	cmp	r3, #9
 8015fd0:	d94e      	bls.n	8016070 <_vfiprintf_r+0x1c4>
 8015fd2:	b1b0      	cbz	r0, 8016002 <_vfiprintf_r+0x156>
 8015fd4:	9207      	str	r2, [sp, #28]
 8015fd6:	e014      	b.n	8016002 <_vfiprintf_r+0x156>
 8015fd8:	eba0 0308 	sub.w	r3, r0, r8
 8015fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8015fe0:	4313      	orrs	r3, r2
 8015fe2:	9304      	str	r3, [sp, #16]
 8015fe4:	46a2      	mov	sl, r4
 8015fe6:	e7d2      	b.n	8015f8e <_vfiprintf_r+0xe2>
 8015fe8:	9b03      	ldr	r3, [sp, #12]
 8015fea:	1d19      	adds	r1, r3, #4
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	9103      	str	r1, [sp, #12]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	bfbb      	ittet	lt
 8015ff4:	425b      	neglt	r3, r3
 8015ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8015ffa:	9307      	strge	r3, [sp, #28]
 8015ffc:	9307      	strlt	r3, [sp, #28]
 8015ffe:	bfb8      	it	lt
 8016000:	9204      	strlt	r2, [sp, #16]
 8016002:	7823      	ldrb	r3, [r4, #0]
 8016004:	2b2e      	cmp	r3, #46	; 0x2e
 8016006:	d10c      	bne.n	8016022 <_vfiprintf_r+0x176>
 8016008:	7863      	ldrb	r3, [r4, #1]
 801600a:	2b2a      	cmp	r3, #42	; 0x2a
 801600c:	d135      	bne.n	801607a <_vfiprintf_r+0x1ce>
 801600e:	9b03      	ldr	r3, [sp, #12]
 8016010:	1d1a      	adds	r2, r3, #4
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	9203      	str	r2, [sp, #12]
 8016016:	2b00      	cmp	r3, #0
 8016018:	bfb8      	it	lt
 801601a:	f04f 33ff 	movlt.w	r3, #4294967295
 801601e:	3402      	adds	r4, #2
 8016020:	9305      	str	r3, [sp, #20]
 8016022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016108 <_vfiprintf_r+0x25c>
 8016026:	7821      	ldrb	r1, [r4, #0]
 8016028:	2203      	movs	r2, #3
 801602a:	4650      	mov	r0, sl
 801602c:	f7ea f8d8 	bl	80001e0 <memchr>
 8016030:	b140      	cbz	r0, 8016044 <_vfiprintf_r+0x198>
 8016032:	2340      	movs	r3, #64	; 0x40
 8016034:	eba0 000a 	sub.w	r0, r0, sl
 8016038:	fa03 f000 	lsl.w	r0, r3, r0
 801603c:	9b04      	ldr	r3, [sp, #16]
 801603e:	4303      	orrs	r3, r0
 8016040:	3401      	adds	r4, #1
 8016042:	9304      	str	r3, [sp, #16]
 8016044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016048:	482c      	ldr	r0, [pc, #176]	; (80160fc <_vfiprintf_r+0x250>)
 801604a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801604e:	2206      	movs	r2, #6
 8016050:	f7ea f8c6 	bl	80001e0 <memchr>
 8016054:	2800      	cmp	r0, #0
 8016056:	d03f      	beq.n	80160d8 <_vfiprintf_r+0x22c>
 8016058:	4b29      	ldr	r3, [pc, #164]	; (8016100 <_vfiprintf_r+0x254>)
 801605a:	bb1b      	cbnz	r3, 80160a4 <_vfiprintf_r+0x1f8>
 801605c:	9b03      	ldr	r3, [sp, #12]
 801605e:	3307      	adds	r3, #7
 8016060:	f023 0307 	bic.w	r3, r3, #7
 8016064:	3308      	adds	r3, #8
 8016066:	9303      	str	r3, [sp, #12]
 8016068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801606a:	443b      	add	r3, r7
 801606c:	9309      	str	r3, [sp, #36]	; 0x24
 801606e:	e767      	b.n	8015f40 <_vfiprintf_r+0x94>
 8016070:	fb0c 3202 	mla	r2, ip, r2, r3
 8016074:	460c      	mov	r4, r1
 8016076:	2001      	movs	r0, #1
 8016078:	e7a5      	b.n	8015fc6 <_vfiprintf_r+0x11a>
 801607a:	2300      	movs	r3, #0
 801607c:	3401      	adds	r4, #1
 801607e:	9305      	str	r3, [sp, #20]
 8016080:	4619      	mov	r1, r3
 8016082:	f04f 0c0a 	mov.w	ip, #10
 8016086:	4620      	mov	r0, r4
 8016088:	f810 2b01 	ldrb.w	r2, [r0], #1
 801608c:	3a30      	subs	r2, #48	; 0x30
 801608e:	2a09      	cmp	r2, #9
 8016090:	d903      	bls.n	801609a <_vfiprintf_r+0x1ee>
 8016092:	2b00      	cmp	r3, #0
 8016094:	d0c5      	beq.n	8016022 <_vfiprintf_r+0x176>
 8016096:	9105      	str	r1, [sp, #20]
 8016098:	e7c3      	b.n	8016022 <_vfiprintf_r+0x176>
 801609a:	fb0c 2101 	mla	r1, ip, r1, r2
 801609e:	4604      	mov	r4, r0
 80160a0:	2301      	movs	r3, #1
 80160a2:	e7f0      	b.n	8016086 <_vfiprintf_r+0x1da>
 80160a4:	ab03      	add	r3, sp, #12
 80160a6:	9300      	str	r3, [sp, #0]
 80160a8:	462a      	mov	r2, r5
 80160aa:	4b16      	ldr	r3, [pc, #88]	; (8016104 <_vfiprintf_r+0x258>)
 80160ac:	a904      	add	r1, sp, #16
 80160ae:	4630      	mov	r0, r6
 80160b0:	f7fc fa6e 	bl	8012590 <_printf_float>
 80160b4:	4607      	mov	r7, r0
 80160b6:	1c78      	adds	r0, r7, #1
 80160b8:	d1d6      	bne.n	8016068 <_vfiprintf_r+0x1bc>
 80160ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160bc:	07d9      	lsls	r1, r3, #31
 80160be:	d405      	bmi.n	80160cc <_vfiprintf_r+0x220>
 80160c0:	89ab      	ldrh	r3, [r5, #12]
 80160c2:	059a      	lsls	r2, r3, #22
 80160c4:	d402      	bmi.n	80160cc <_vfiprintf_r+0x220>
 80160c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160c8:	f000 fae1 	bl	801668e <__retarget_lock_release_recursive>
 80160cc:	89ab      	ldrh	r3, [r5, #12]
 80160ce:	065b      	lsls	r3, r3, #25
 80160d0:	f53f af12 	bmi.w	8015ef8 <_vfiprintf_r+0x4c>
 80160d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80160d6:	e711      	b.n	8015efc <_vfiprintf_r+0x50>
 80160d8:	ab03      	add	r3, sp, #12
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	462a      	mov	r2, r5
 80160de:	4b09      	ldr	r3, [pc, #36]	; (8016104 <_vfiprintf_r+0x258>)
 80160e0:	a904      	add	r1, sp, #16
 80160e2:	4630      	mov	r0, r6
 80160e4:	f7fc fcf8 	bl	8012ad8 <_printf_i>
 80160e8:	e7e4      	b.n	80160b4 <_vfiprintf_r+0x208>
 80160ea:	bf00      	nop
 80160ec:	08019428 	.word	0x08019428
 80160f0:	08019448 	.word	0x08019448
 80160f4:	08019408 	.word	0x08019408
 80160f8:	080193f4 	.word	0x080193f4
 80160fc:	080193fe 	.word	0x080193fe
 8016100:	08012591 	.word	0x08012591
 8016104:	08015e87 	.word	0x08015e87
 8016108:	080193fa 	.word	0x080193fa
 801610c:	00000000 	.word	0x00000000

08016110 <nan>:
 8016110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016118 <nan+0x8>
 8016114:	4770      	bx	lr
 8016116:	bf00      	nop
 8016118:	00000000 	.word	0x00000000
 801611c:	7ff80000 	.word	0x7ff80000

08016120 <_sbrk_r>:
 8016120:	b538      	push	{r3, r4, r5, lr}
 8016122:	4d06      	ldr	r5, [pc, #24]	; (801613c <_sbrk_r+0x1c>)
 8016124:	2300      	movs	r3, #0
 8016126:	4604      	mov	r4, r0
 8016128:	4608      	mov	r0, r1
 801612a:	602b      	str	r3, [r5, #0]
 801612c:	f7f4 fa9c 	bl	800a668 <_sbrk>
 8016130:	1c43      	adds	r3, r0, #1
 8016132:	d102      	bne.n	801613a <_sbrk_r+0x1a>
 8016134:	682b      	ldr	r3, [r5, #0]
 8016136:	b103      	cbz	r3, 801613a <_sbrk_r+0x1a>
 8016138:	6023      	str	r3, [r4, #0]
 801613a:	bd38      	pop	{r3, r4, r5, pc}
 801613c:	200047d8 	.word	0x200047d8

08016140 <nanf>:
 8016140:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016148 <nanf+0x8>
 8016144:	4770      	bx	lr
 8016146:	bf00      	nop
 8016148:	7fc00000 	.word	0x7fc00000

0801614c <strncmp>:
 801614c:	b510      	push	{r4, lr}
 801614e:	b16a      	cbz	r2, 801616c <strncmp+0x20>
 8016150:	3901      	subs	r1, #1
 8016152:	1884      	adds	r4, r0, r2
 8016154:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016158:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801615c:	4293      	cmp	r3, r2
 801615e:	d103      	bne.n	8016168 <strncmp+0x1c>
 8016160:	42a0      	cmp	r0, r4
 8016162:	d001      	beq.n	8016168 <strncmp+0x1c>
 8016164:	2b00      	cmp	r3, #0
 8016166:	d1f5      	bne.n	8016154 <strncmp+0x8>
 8016168:	1a98      	subs	r0, r3, r2
 801616a:	bd10      	pop	{r4, pc}
 801616c:	4610      	mov	r0, r2
 801616e:	e7fc      	b.n	801616a <strncmp+0x1e>

08016170 <__swbuf_r>:
 8016170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016172:	460e      	mov	r6, r1
 8016174:	4614      	mov	r4, r2
 8016176:	4605      	mov	r5, r0
 8016178:	b118      	cbz	r0, 8016182 <__swbuf_r+0x12>
 801617a:	6983      	ldr	r3, [r0, #24]
 801617c:	b90b      	cbnz	r3, 8016182 <__swbuf_r+0x12>
 801617e:	f000 f9e7 	bl	8016550 <__sinit>
 8016182:	4b21      	ldr	r3, [pc, #132]	; (8016208 <__swbuf_r+0x98>)
 8016184:	429c      	cmp	r4, r3
 8016186:	d12b      	bne.n	80161e0 <__swbuf_r+0x70>
 8016188:	686c      	ldr	r4, [r5, #4]
 801618a:	69a3      	ldr	r3, [r4, #24]
 801618c:	60a3      	str	r3, [r4, #8]
 801618e:	89a3      	ldrh	r3, [r4, #12]
 8016190:	071a      	lsls	r2, r3, #28
 8016192:	d52f      	bpl.n	80161f4 <__swbuf_r+0x84>
 8016194:	6923      	ldr	r3, [r4, #16]
 8016196:	b36b      	cbz	r3, 80161f4 <__swbuf_r+0x84>
 8016198:	6923      	ldr	r3, [r4, #16]
 801619a:	6820      	ldr	r0, [r4, #0]
 801619c:	1ac0      	subs	r0, r0, r3
 801619e:	6963      	ldr	r3, [r4, #20]
 80161a0:	b2f6      	uxtb	r6, r6
 80161a2:	4283      	cmp	r3, r0
 80161a4:	4637      	mov	r7, r6
 80161a6:	dc04      	bgt.n	80161b2 <__swbuf_r+0x42>
 80161a8:	4621      	mov	r1, r4
 80161aa:	4628      	mov	r0, r5
 80161ac:	f000 f93c 	bl	8016428 <_fflush_r>
 80161b0:	bb30      	cbnz	r0, 8016200 <__swbuf_r+0x90>
 80161b2:	68a3      	ldr	r3, [r4, #8]
 80161b4:	3b01      	subs	r3, #1
 80161b6:	60a3      	str	r3, [r4, #8]
 80161b8:	6823      	ldr	r3, [r4, #0]
 80161ba:	1c5a      	adds	r2, r3, #1
 80161bc:	6022      	str	r2, [r4, #0]
 80161be:	701e      	strb	r6, [r3, #0]
 80161c0:	6963      	ldr	r3, [r4, #20]
 80161c2:	3001      	adds	r0, #1
 80161c4:	4283      	cmp	r3, r0
 80161c6:	d004      	beq.n	80161d2 <__swbuf_r+0x62>
 80161c8:	89a3      	ldrh	r3, [r4, #12]
 80161ca:	07db      	lsls	r3, r3, #31
 80161cc:	d506      	bpl.n	80161dc <__swbuf_r+0x6c>
 80161ce:	2e0a      	cmp	r6, #10
 80161d0:	d104      	bne.n	80161dc <__swbuf_r+0x6c>
 80161d2:	4621      	mov	r1, r4
 80161d4:	4628      	mov	r0, r5
 80161d6:	f000 f927 	bl	8016428 <_fflush_r>
 80161da:	b988      	cbnz	r0, 8016200 <__swbuf_r+0x90>
 80161dc:	4638      	mov	r0, r7
 80161de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161e0:	4b0a      	ldr	r3, [pc, #40]	; (801620c <__swbuf_r+0x9c>)
 80161e2:	429c      	cmp	r4, r3
 80161e4:	d101      	bne.n	80161ea <__swbuf_r+0x7a>
 80161e6:	68ac      	ldr	r4, [r5, #8]
 80161e8:	e7cf      	b.n	801618a <__swbuf_r+0x1a>
 80161ea:	4b09      	ldr	r3, [pc, #36]	; (8016210 <__swbuf_r+0xa0>)
 80161ec:	429c      	cmp	r4, r3
 80161ee:	bf08      	it	eq
 80161f0:	68ec      	ldreq	r4, [r5, #12]
 80161f2:	e7ca      	b.n	801618a <__swbuf_r+0x1a>
 80161f4:	4621      	mov	r1, r4
 80161f6:	4628      	mov	r0, r5
 80161f8:	f000 f81a 	bl	8016230 <__swsetup_r>
 80161fc:	2800      	cmp	r0, #0
 80161fe:	d0cb      	beq.n	8016198 <__swbuf_r+0x28>
 8016200:	f04f 37ff 	mov.w	r7, #4294967295
 8016204:	e7ea      	b.n	80161dc <__swbuf_r+0x6c>
 8016206:	bf00      	nop
 8016208:	08019428 	.word	0x08019428
 801620c:	08019448 	.word	0x08019448
 8016210:	08019408 	.word	0x08019408

08016214 <__ascii_wctomb>:
 8016214:	b149      	cbz	r1, 801622a <__ascii_wctomb+0x16>
 8016216:	2aff      	cmp	r2, #255	; 0xff
 8016218:	bf85      	ittet	hi
 801621a:	238a      	movhi	r3, #138	; 0x8a
 801621c:	6003      	strhi	r3, [r0, #0]
 801621e:	700a      	strbls	r2, [r1, #0]
 8016220:	f04f 30ff 	movhi.w	r0, #4294967295
 8016224:	bf98      	it	ls
 8016226:	2001      	movls	r0, #1
 8016228:	4770      	bx	lr
 801622a:	4608      	mov	r0, r1
 801622c:	4770      	bx	lr
	...

08016230 <__swsetup_r>:
 8016230:	4b32      	ldr	r3, [pc, #200]	; (80162fc <__swsetup_r+0xcc>)
 8016232:	b570      	push	{r4, r5, r6, lr}
 8016234:	681d      	ldr	r5, [r3, #0]
 8016236:	4606      	mov	r6, r0
 8016238:	460c      	mov	r4, r1
 801623a:	b125      	cbz	r5, 8016246 <__swsetup_r+0x16>
 801623c:	69ab      	ldr	r3, [r5, #24]
 801623e:	b913      	cbnz	r3, 8016246 <__swsetup_r+0x16>
 8016240:	4628      	mov	r0, r5
 8016242:	f000 f985 	bl	8016550 <__sinit>
 8016246:	4b2e      	ldr	r3, [pc, #184]	; (8016300 <__swsetup_r+0xd0>)
 8016248:	429c      	cmp	r4, r3
 801624a:	d10f      	bne.n	801626c <__swsetup_r+0x3c>
 801624c:	686c      	ldr	r4, [r5, #4]
 801624e:	89a3      	ldrh	r3, [r4, #12]
 8016250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016254:	0719      	lsls	r1, r3, #28
 8016256:	d42c      	bmi.n	80162b2 <__swsetup_r+0x82>
 8016258:	06dd      	lsls	r5, r3, #27
 801625a:	d411      	bmi.n	8016280 <__swsetup_r+0x50>
 801625c:	2309      	movs	r3, #9
 801625e:	6033      	str	r3, [r6, #0]
 8016260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016264:	81a3      	strh	r3, [r4, #12]
 8016266:	f04f 30ff 	mov.w	r0, #4294967295
 801626a:	e03e      	b.n	80162ea <__swsetup_r+0xba>
 801626c:	4b25      	ldr	r3, [pc, #148]	; (8016304 <__swsetup_r+0xd4>)
 801626e:	429c      	cmp	r4, r3
 8016270:	d101      	bne.n	8016276 <__swsetup_r+0x46>
 8016272:	68ac      	ldr	r4, [r5, #8]
 8016274:	e7eb      	b.n	801624e <__swsetup_r+0x1e>
 8016276:	4b24      	ldr	r3, [pc, #144]	; (8016308 <__swsetup_r+0xd8>)
 8016278:	429c      	cmp	r4, r3
 801627a:	bf08      	it	eq
 801627c:	68ec      	ldreq	r4, [r5, #12]
 801627e:	e7e6      	b.n	801624e <__swsetup_r+0x1e>
 8016280:	0758      	lsls	r0, r3, #29
 8016282:	d512      	bpl.n	80162aa <__swsetup_r+0x7a>
 8016284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016286:	b141      	cbz	r1, 801629a <__swsetup_r+0x6a>
 8016288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801628c:	4299      	cmp	r1, r3
 801628e:	d002      	beq.n	8016296 <__swsetup_r+0x66>
 8016290:	4630      	mov	r0, r6
 8016292:	f7ff fbdb 	bl	8015a4c <_free_r>
 8016296:	2300      	movs	r3, #0
 8016298:	6363      	str	r3, [r4, #52]	; 0x34
 801629a:	89a3      	ldrh	r3, [r4, #12]
 801629c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80162a0:	81a3      	strh	r3, [r4, #12]
 80162a2:	2300      	movs	r3, #0
 80162a4:	6063      	str	r3, [r4, #4]
 80162a6:	6923      	ldr	r3, [r4, #16]
 80162a8:	6023      	str	r3, [r4, #0]
 80162aa:	89a3      	ldrh	r3, [r4, #12]
 80162ac:	f043 0308 	orr.w	r3, r3, #8
 80162b0:	81a3      	strh	r3, [r4, #12]
 80162b2:	6923      	ldr	r3, [r4, #16]
 80162b4:	b94b      	cbnz	r3, 80162ca <__swsetup_r+0x9a>
 80162b6:	89a3      	ldrh	r3, [r4, #12]
 80162b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80162bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80162c0:	d003      	beq.n	80162ca <__swsetup_r+0x9a>
 80162c2:	4621      	mov	r1, r4
 80162c4:	4630      	mov	r0, r6
 80162c6:	f000 fa07 	bl	80166d8 <__smakebuf_r>
 80162ca:	89a0      	ldrh	r0, [r4, #12]
 80162cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80162d0:	f010 0301 	ands.w	r3, r0, #1
 80162d4:	d00a      	beq.n	80162ec <__swsetup_r+0xbc>
 80162d6:	2300      	movs	r3, #0
 80162d8:	60a3      	str	r3, [r4, #8]
 80162da:	6963      	ldr	r3, [r4, #20]
 80162dc:	425b      	negs	r3, r3
 80162de:	61a3      	str	r3, [r4, #24]
 80162e0:	6923      	ldr	r3, [r4, #16]
 80162e2:	b943      	cbnz	r3, 80162f6 <__swsetup_r+0xc6>
 80162e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80162e8:	d1ba      	bne.n	8016260 <__swsetup_r+0x30>
 80162ea:	bd70      	pop	{r4, r5, r6, pc}
 80162ec:	0781      	lsls	r1, r0, #30
 80162ee:	bf58      	it	pl
 80162f0:	6963      	ldrpl	r3, [r4, #20]
 80162f2:	60a3      	str	r3, [r4, #8]
 80162f4:	e7f4      	b.n	80162e0 <__swsetup_r+0xb0>
 80162f6:	2000      	movs	r0, #0
 80162f8:	e7f7      	b.n	80162ea <__swsetup_r+0xba>
 80162fa:	bf00      	nop
 80162fc:	20000194 	.word	0x20000194
 8016300:	08019428 	.word	0x08019428
 8016304:	08019448 	.word	0x08019448
 8016308:	08019408 	.word	0x08019408

0801630c <abort>:
 801630c:	b508      	push	{r3, lr}
 801630e:	2006      	movs	r0, #6
 8016310:	f000 fa96 	bl	8016840 <raise>
 8016314:	2001      	movs	r0, #1
 8016316:	f7f4 f97b 	bl	800a610 <_exit>
	...

0801631c <__sflush_r>:
 801631c:	898a      	ldrh	r2, [r1, #12]
 801631e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016322:	4605      	mov	r5, r0
 8016324:	0710      	lsls	r0, r2, #28
 8016326:	460c      	mov	r4, r1
 8016328:	d458      	bmi.n	80163dc <__sflush_r+0xc0>
 801632a:	684b      	ldr	r3, [r1, #4]
 801632c:	2b00      	cmp	r3, #0
 801632e:	dc05      	bgt.n	801633c <__sflush_r+0x20>
 8016330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016332:	2b00      	cmp	r3, #0
 8016334:	dc02      	bgt.n	801633c <__sflush_r+0x20>
 8016336:	2000      	movs	r0, #0
 8016338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801633c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801633e:	2e00      	cmp	r6, #0
 8016340:	d0f9      	beq.n	8016336 <__sflush_r+0x1a>
 8016342:	2300      	movs	r3, #0
 8016344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016348:	682f      	ldr	r7, [r5, #0]
 801634a:	602b      	str	r3, [r5, #0]
 801634c:	d032      	beq.n	80163b4 <__sflush_r+0x98>
 801634e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016350:	89a3      	ldrh	r3, [r4, #12]
 8016352:	075a      	lsls	r2, r3, #29
 8016354:	d505      	bpl.n	8016362 <__sflush_r+0x46>
 8016356:	6863      	ldr	r3, [r4, #4]
 8016358:	1ac0      	subs	r0, r0, r3
 801635a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801635c:	b10b      	cbz	r3, 8016362 <__sflush_r+0x46>
 801635e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016360:	1ac0      	subs	r0, r0, r3
 8016362:	2300      	movs	r3, #0
 8016364:	4602      	mov	r2, r0
 8016366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016368:	6a21      	ldr	r1, [r4, #32]
 801636a:	4628      	mov	r0, r5
 801636c:	47b0      	blx	r6
 801636e:	1c43      	adds	r3, r0, #1
 8016370:	89a3      	ldrh	r3, [r4, #12]
 8016372:	d106      	bne.n	8016382 <__sflush_r+0x66>
 8016374:	6829      	ldr	r1, [r5, #0]
 8016376:	291d      	cmp	r1, #29
 8016378:	d82c      	bhi.n	80163d4 <__sflush_r+0xb8>
 801637a:	4a2a      	ldr	r2, [pc, #168]	; (8016424 <__sflush_r+0x108>)
 801637c:	40ca      	lsrs	r2, r1
 801637e:	07d6      	lsls	r6, r2, #31
 8016380:	d528      	bpl.n	80163d4 <__sflush_r+0xb8>
 8016382:	2200      	movs	r2, #0
 8016384:	6062      	str	r2, [r4, #4]
 8016386:	04d9      	lsls	r1, r3, #19
 8016388:	6922      	ldr	r2, [r4, #16]
 801638a:	6022      	str	r2, [r4, #0]
 801638c:	d504      	bpl.n	8016398 <__sflush_r+0x7c>
 801638e:	1c42      	adds	r2, r0, #1
 8016390:	d101      	bne.n	8016396 <__sflush_r+0x7a>
 8016392:	682b      	ldr	r3, [r5, #0]
 8016394:	b903      	cbnz	r3, 8016398 <__sflush_r+0x7c>
 8016396:	6560      	str	r0, [r4, #84]	; 0x54
 8016398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801639a:	602f      	str	r7, [r5, #0]
 801639c:	2900      	cmp	r1, #0
 801639e:	d0ca      	beq.n	8016336 <__sflush_r+0x1a>
 80163a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163a4:	4299      	cmp	r1, r3
 80163a6:	d002      	beq.n	80163ae <__sflush_r+0x92>
 80163a8:	4628      	mov	r0, r5
 80163aa:	f7ff fb4f 	bl	8015a4c <_free_r>
 80163ae:	2000      	movs	r0, #0
 80163b0:	6360      	str	r0, [r4, #52]	; 0x34
 80163b2:	e7c1      	b.n	8016338 <__sflush_r+0x1c>
 80163b4:	6a21      	ldr	r1, [r4, #32]
 80163b6:	2301      	movs	r3, #1
 80163b8:	4628      	mov	r0, r5
 80163ba:	47b0      	blx	r6
 80163bc:	1c41      	adds	r1, r0, #1
 80163be:	d1c7      	bne.n	8016350 <__sflush_r+0x34>
 80163c0:	682b      	ldr	r3, [r5, #0]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d0c4      	beq.n	8016350 <__sflush_r+0x34>
 80163c6:	2b1d      	cmp	r3, #29
 80163c8:	d001      	beq.n	80163ce <__sflush_r+0xb2>
 80163ca:	2b16      	cmp	r3, #22
 80163cc:	d101      	bne.n	80163d2 <__sflush_r+0xb6>
 80163ce:	602f      	str	r7, [r5, #0]
 80163d0:	e7b1      	b.n	8016336 <__sflush_r+0x1a>
 80163d2:	89a3      	ldrh	r3, [r4, #12]
 80163d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163d8:	81a3      	strh	r3, [r4, #12]
 80163da:	e7ad      	b.n	8016338 <__sflush_r+0x1c>
 80163dc:	690f      	ldr	r7, [r1, #16]
 80163de:	2f00      	cmp	r7, #0
 80163e0:	d0a9      	beq.n	8016336 <__sflush_r+0x1a>
 80163e2:	0793      	lsls	r3, r2, #30
 80163e4:	680e      	ldr	r6, [r1, #0]
 80163e6:	bf08      	it	eq
 80163e8:	694b      	ldreq	r3, [r1, #20]
 80163ea:	600f      	str	r7, [r1, #0]
 80163ec:	bf18      	it	ne
 80163ee:	2300      	movne	r3, #0
 80163f0:	eba6 0807 	sub.w	r8, r6, r7
 80163f4:	608b      	str	r3, [r1, #8]
 80163f6:	f1b8 0f00 	cmp.w	r8, #0
 80163fa:	dd9c      	ble.n	8016336 <__sflush_r+0x1a>
 80163fc:	6a21      	ldr	r1, [r4, #32]
 80163fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016400:	4643      	mov	r3, r8
 8016402:	463a      	mov	r2, r7
 8016404:	4628      	mov	r0, r5
 8016406:	47b0      	blx	r6
 8016408:	2800      	cmp	r0, #0
 801640a:	dc06      	bgt.n	801641a <__sflush_r+0xfe>
 801640c:	89a3      	ldrh	r3, [r4, #12]
 801640e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016412:	81a3      	strh	r3, [r4, #12]
 8016414:	f04f 30ff 	mov.w	r0, #4294967295
 8016418:	e78e      	b.n	8016338 <__sflush_r+0x1c>
 801641a:	4407      	add	r7, r0
 801641c:	eba8 0800 	sub.w	r8, r8, r0
 8016420:	e7e9      	b.n	80163f6 <__sflush_r+0xda>
 8016422:	bf00      	nop
 8016424:	20400001 	.word	0x20400001

08016428 <_fflush_r>:
 8016428:	b538      	push	{r3, r4, r5, lr}
 801642a:	690b      	ldr	r3, [r1, #16]
 801642c:	4605      	mov	r5, r0
 801642e:	460c      	mov	r4, r1
 8016430:	b913      	cbnz	r3, 8016438 <_fflush_r+0x10>
 8016432:	2500      	movs	r5, #0
 8016434:	4628      	mov	r0, r5
 8016436:	bd38      	pop	{r3, r4, r5, pc}
 8016438:	b118      	cbz	r0, 8016442 <_fflush_r+0x1a>
 801643a:	6983      	ldr	r3, [r0, #24]
 801643c:	b90b      	cbnz	r3, 8016442 <_fflush_r+0x1a>
 801643e:	f000 f887 	bl	8016550 <__sinit>
 8016442:	4b14      	ldr	r3, [pc, #80]	; (8016494 <_fflush_r+0x6c>)
 8016444:	429c      	cmp	r4, r3
 8016446:	d11b      	bne.n	8016480 <_fflush_r+0x58>
 8016448:	686c      	ldr	r4, [r5, #4]
 801644a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d0ef      	beq.n	8016432 <_fflush_r+0xa>
 8016452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016454:	07d0      	lsls	r0, r2, #31
 8016456:	d404      	bmi.n	8016462 <_fflush_r+0x3a>
 8016458:	0599      	lsls	r1, r3, #22
 801645a:	d402      	bmi.n	8016462 <_fflush_r+0x3a>
 801645c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801645e:	f000 f915 	bl	801668c <__retarget_lock_acquire_recursive>
 8016462:	4628      	mov	r0, r5
 8016464:	4621      	mov	r1, r4
 8016466:	f7ff ff59 	bl	801631c <__sflush_r>
 801646a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801646c:	07da      	lsls	r2, r3, #31
 801646e:	4605      	mov	r5, r0
 8016470:	d4e0      	bmi.n	8016434 <_fflush_r+0xc>
 8016472:	89a3      	ldrh	r3, [r4, #12]
 8016474:	059b      	lsls	r3, r3, #22
 8016476:	d4dd      	bmi.n	8016434 <_fflush_r+0xc>
 8016478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801647a:	f000 f908 	bl	801668e <__retarget_lock_release_recursive>
 801647e:	e7d9      	b.n	8016434 <_fflush_r+0xc>
 8016480:	4b05      	ldr	r3, [pc, #20]	; (8016498 <_fflush_r+0x70>)
 8016482:	429c      	cmp	r4, r3
 8016484:	d101      	bne.n	801648a <_fflush_r+0x62>
 8016486:	68ac      	ldr	r4, [r5, #8]
 8016488:	e7df      	b.n	801644a <_fflush_r+0x22>
 801648a:	4b04      	ldr	r3, [pc, #16]	; (801649c <_fflush_r+0x74>)
 801648c:	429c      	cmp	r4, r3
 801648e:	bf08      	it	eq
 8016490:	68ec      	ldreq	r4, [r5, #12]
 8016492:	e7da      	b.n	801644a <_fflush_r+0x22>
 8016494:	08019428 	.word	0x08019428
 8016498:	08019448 	.word	0x08019448
 801649c:	08019408 	.word	0x08019408

080164a0 <std>:
 80164a0:	2300      	movs	r3, #0
 80164a2:	b510      	push	{r4, lr}
 80164a4:	4604      	mov	r4, r0
 80164a6:	e9c0 3300 	strd	r3, r3, [r0]
 80164aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80164ae:	6083      	str	r3, [r0, #8]
 80164b0:	8181      	strh	r1, [r0, #12]
 80164b2:	6643      	str	r3, [r0, #100]	; 0x64
 80164b4:	81c2      	strh	r2, [r0, #14]
 80164b6:	6183      	str	r3, [r0, #24]
 80164b8:	4619      	mov	r1, r3
 80164ba:	2208      	movs	r2, #8
 80164bc:	305c      	adds	r0, #92	; 0x5c
 80164be:	f7fb ffbf 	bl	8012440 <memset>
 80164c2:	4b05      	ldr	r3, [pc, #20]	; (80164d8 <std+0x38>)
 80164c4:	6263      	str	r3, [r4, #36]	; 0x24
 80164c6:	4b05      	ldr	r3, [pc, #20]	; (80164dc <std+0x3c>)
 80164c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80164ca:	4b05      	ldr	r3, [pc, #20]	; (80164e0 <std+0x40>)
 80164cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80164ce:	4b05      	ldr	r3, [pc, #20]	; (80164e4 <std+0x44>)
 80164d0:	6224      	str	r4, [r4, #32]
 80164d2:	6323      	str	r3, [r4, #48]	; 0x30
 80164d4:	bd10      	pop	{r4, pc}
 80164d6:	bf00      	nop
 80164d8:	08016879 	.word	0x08016879
 80164dc:	0801689b 	.word	0x0801689b
 80164e0:	080168d3 	.word	0x080168d3
 80164e4:	080168f7 	.word	0x080168f7

080164e8 <_cleanup_r>:
 80164e8:	4901      	ldr	r1, [pc, #4]	; (80164f0 <_cleanup_r+0x8>)
 80164ea:	f000 b8af 	b.w	801664c <_fwalk_reent>
 80164ee:	bf00      	nop
 80164f0:	08016429 	.word	0x08016429

080164f4 <__sfmoreglue>:
 80164f4:	b570      	push	{r4, r5, r6, lr}
 80164f6:	1e4a      	subs	r2, r1, #1
 80164f8:	2568      	movs	r5, #104	; 0x68
 80164fa:	4355      	muls	r5, r2
 80164fc:	460e      	mov	r6, r1
 80164fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016502:	f7ff faf3 	bl	8015aec <_malloc_r>
 8016506:	4604      	mov	r4, r0
 8016508:	b140      	cbz	r0, 801651c <__sfmoreglue+0x28>
 801650a:	2100      	movs	r1, #0
 801650c:	e9c0 1600 	strd	r1, r6, [r0]
 8016510:	300c      	adds	r0, #12
 8016512:	60a0      	str	r0, [r4, #8]
 8016514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016518:	f7fb ff92 	bl	8012440 <memset>
 801651c:	4620      	mov	r0, r4
 801651e:	bd70      	pop	{r4, r5, r6, pc}

08016520 <__sfp_lock_acquire>:
 8016520:	4801      	ldr	r0, [pc, #4]	; (8016528 <__sfp_lock_acquire+0x8>)
 8016522:	f000 b8b3 	b.w	801668c <__retarget_lock_acquire_recursive>
 8016526:	bf00      	nop
 8016528:	200047d4 	.word	0x200047d4

0801652c <__sfp_lock_release>:
 801652c:	4801      	ldr	r0, [pc, #4]	; (8016534 <__sfp_lock_release+0x8>)
 801652e:	f000 b8ae 	b.w	801668e <__retarget_lock_release_recursive>
 8016532:	bf00      	nop
 8016534:	200047d4 	.word	0x200047d4

08016538 <__sinit_lock_acquire>:
 8016538:	4801      	ldr	r0, [pc, #4]	; (8016540 <__sinit_lock_acquire+0x8>)
 801653a:	f000 b8a7 	b.w	801668c <__retarget_lock_acquire_recursive>
 801653e:	bf00      	nop
 8016540:	200047cf 	.word	0x200047cf

08016544 <__sinit_lock_release>:
 8016544:	4801      	ldr	r0, [pc, #4]	; (801654c <__sinit_lock_release+0x8>)
 8016546:	f000 b8a2 	b.w	801668e <__retarget_lock_release_recursive>
 801654a:	bf00      	nop
 801654c:	200047cf 	.word	0x200047cf

08016550 <__sinit>:
 8016550:	b510      	push	{r4, lr}
 8016552:	4604      	mov	r4, r0
 8016554:	f7ff fff0 	bl	8016538 <__sinit_lock_acquire>
 8016558:	69a3      	ldr	r3, [r4, #24]
 801655a:	b11b      	cbz	r3, 8016564 <__sinit+0x14>
 801655c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016560:	f7ff bff0 	b.w	8016544 <__sinit_lock_release>
 8016564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016568:	6523      	str	r3, [r4, #80]	; 0x50
 801656a:	4b13      	ldr	r3, [pc, #76]	; (80165b8 <__sinit+0x68>)
 801656c:	4a13      	ldr	r2, [pc, #76]	; (80165bc <__sinit+0x6c>)
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	62a2      	str	r2, [r4, #40]	; 0x28
 8016572:	42a3      	cmp	r3, r4
 8016574:	bf04      	itt	eq
 8016576:	2301      	moveq	r3, #1
 8016578:	61a3      	streq	r3, [r4, #24]
 801657a:	4620      	mov	r0, r4
 801657c:	f000 f820 	bl	80165c0 <__sfp>
 8016580:	6060      	str	r0, [r4, #4]
 8016582:	4620      	mov	r0, r4
 8016584:	f000 f81c 	bl	80165c0 <__sfp>
 8016588:	60a0      	str	r0, [r4, #8]
 801658a:	4620      	mov	r0, r4
 801658c:	f000 f818 	bl	80165c0 <__sfp>
 8016590:	2200      	movs	r2, #0
 8016592:	60e0      	str	r0, [r4, #12]
 8016594:	2104      	movs	r1, #4
 8016596:	6860      	ldr	r0, [r4, #4]
 8016598:	f7ff ff82 	bl	80164a0 <std>
 801659c:	68a0      	ldr	r0, [r4, #8]
 801659e:	2201      	movs	r2, #1
 80165a0:	2109      	movs	r1, #9
 80165a2:	f7ff ff7d 	bl	80164a0 <std>
 80165a6:	68e0      	ldr	r0, [r4, #12]
 80165a8:	2202      	movs	r2, #2
 80165aa:	2112      	movs	r1, #18
 80165ac:	f7ff ff78 	bl	80164a0 <std>
 80165b0:	2301      	movs	r3, #1
 80165b2:	61a3      	str	r3, [r4, #24]
 80165b4:	e7d2      	b.n	801655c <__sinit+0xc>
 80165b6:	bf00      	nop
 80165b8:	08018f60 	.word	0x08018f60
 80165bc:	080164e9 	.word	0x080164e9

080165c0 <__sfp>:
 80165c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165c2:	4607      	mov	r7, r0
 80165c4:	f7ff ffac 	bl	8016520 <__sfp_lock_acquire>
 80165c8:	4b1e      	ldr	r3, [pc, #120]	; (8016644 <__sfp+0x84>)
 80165ca:	681e      	ldr	r6, [r3, #0]
 80165cc:	69b3      	ldr	r3, [r6, #24]
 80165ce:	b913      	cbnz	r3, 80165d6 <__sfp+0x16>
 80165d0:	4630      	mov	r0, r6
 80165d2:	f7ff ffbd 	bl	8016550 <__sinit>
 80165d6:	3648      	adds	r6, #72	; 0x48
 80165d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80165dc:	3b01      	subs	r3, #1
 80165de:	d503      	bpl.n	80165e8 <__sfp+0x28>
 80165e0:	6833      	ldr	r3, [r6, #0]
 80165e2:	b30b      	cbz	r3, 8016628 <__sfp+0x68>
 80165e4:	6836      	ldr	r6, [r6, #0]
 80165e6:	e7f7      	b.n	80165d8 <__sfp+0x18>
 80165e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80165ec:	b9d5      	cbnz	r5, 8016624 <__sfp+0x64>
 80165ee:	4b16      	ldr	r3, [pc, #88]	; (8016648 <__sfp+0x88>)
 80165f0:	60e3      	str	r3, [r4, #12]
 80165f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80165f6:	6665      	str	r5, [r4, #100]	; 0x64
 80165f8:	f000 f847 	bl	801668a <__retarget_lock_init_recursive>
 80165fc:	f7ff ff96 	bl	801652c <__sfp_lock_release>
 8016600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016608:	6025      	str	r5, [r4, #0]
 801660a:	61a5      	str	r5, [r4, #24]
 801660c:	2208      	movs	r2, #8
 801660e:	4629      	mov	r1, r5
 8016610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016614:	f7fb ff14 	bl	8012440 <memset>
 8016618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801661c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016620:	4620      	mov	r0, r4
 8016622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016624:	3468      	adds	r4, #104	; 0x68
 8016626:	e7d9      	b.n	80165dc <__sfp+0x1c>
 8016628:	2104      	movs	r1, #4
 801662a:	4638      	mov	r0, r7
 801662c:	f7ff ff62 	bl	80164f4 <__sfmoreglue>
 8016630:	4604      	mov	r4, r0
 8016632:	6030      	str	r0, [r6, #0]
 8016634:	2800      	cmp	r0, #0
 8016636:	d1d5      	bne.n	80165e4 <__sfp+0x24>
 8016638:	f7ff ff78 	bl	801652c <__sfp_lock_release>
 801663c:	230c      	movs	r3, #12
 801663e:	603b      	str	r3, [r7, #0]
 8016640:	e7ee      	b.n	8016620 <__sfp+0x60>
 8016642:	bf00      	nop
 8016644:	08018f60 	.word	0x08018f60
 8016648:	ffff0001 	.word	0xffff0001

0801664c <_fwalk_reent>:
 801664c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016650:	4606      	mov	r6, r0
 8016652:	4688      	mov	r8, r1
 8016654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016658:	2700      	movs	r7, #0
 801665a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801665e:	f1b9 0901 	subs.w	r9, r9, #1
 8016662:	d505      	bpl.n	8016670 <_fwalk_reent+0x24>
 8016664:	6824      	ldr	r4, [r4, #0]
 8016666:	2c00      	cmp	r4, #0
 8016668:	d1f7      	bne.n	801665a <_fwalk_reent+0xe>
 801666a:	4638      	mov	r0, r7
 801666c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016670:	89ab      	ldrh	r3, [r5, #12]
 8016672:	2b01      	cmp	r3, #1
 8016674:	d907      	bls.n	8016686 <_fwalk_reent+0x3a>
 8016676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801667a:	3301      	adds	r3, #1
 801667c:	d003      	beq.n	8016686 <_fwalk_reent+0x3a>
 801667e:	4629      	mov	r1, r5
 8016680:	4630      	mov	r0, r6
 8016682:	47c0      	blx	r8
 8016684:	4307      	orrs	r7, r0
 8016686:	3568      	adds	r5, #104	; 0x68
 8016688:	e7e9      	b.n	801665e <_fwalk_reent+0x12>

0801668a <__retarget_lock_init_recursive>:
 801668a:	4770      	bx	lr

0801668c <__retarget_lock_acquire_recursive>:
 801668c:	4770      	bx	lr

0801668e <__retarget_lock_release_recursive>:
 801668e:	4770      	bx	lr

08016690 <__swhatbuf_r>:
 8016690:	b570      	push	{r4, r5, r6, lr}
 8016692:	460e      	mov	r6, r1
 8016694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016698:	2900      	cmp	r1, #0
 801669a:	b096      	sub	sp, #88	; 0x58
 801669c:	4614      	mov	r4, r2
 801669e:	461d      	mov	r5, r3
 80166a0:	da07      	bge.n	80166b2 <__swhatbuf_r+0x22>
 80166a2:	2300      	movs	r3, #0
 80166a4:	602b      	str	r3, [r5, #0]
 80166a6:	89b3      	ldrh	r3, [r6, #12]
 80166a8:	061a      	lsls	r2, r3, #24
 80166aa:	d410      	bmi.n	80166ce <__swhatbuf_r+0x3e>
 80166ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80166b0:	e00e      	b.n	80166d0 <__swhatbuf_r+0x40>
 80166b2:	466a      	mov	r2, sp
 80166b4:	f000 f946 	bl	8016944 <_fstat_r>
 80166b8:	2800      	cmp	r0, #0
 80166ba:	dbf2      	blt.n	80166a2 <__swhatbuf_r+0x12>
 80166bc:	9a01      	ldr	r2, [sp, #4]
 80166be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80166c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80166c6:	425a      	negs	r2, r3
 80166c8:	415a      	adcs	r2, r3
 80166ca:	602a      	str	r2, [r5, #0]
 80166cc:	e7ee      	b.n	80166ac <__swhatbuf_r+0x1c>
 80166ce:	2340      	movs	r3, #64	; 0x40
 80166d0:	2000      	movs	r0, #0
 80166d2:	6023      	str	r3, [r4, #0]
 80166d4:	b016      	add	sp, #88	; 0x58
 80166d6:	bd70      	pop	{r4, r5, r6, pc}

080166d8 <__smakebuf_r>:
 80166d8:	898b      	ldrh	r3, [r1, #12]
 80166da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166dc:	079d      	lsls	r5, r3, #30
 80166de:	4606      	mov	r6, r0
 80166e0:	460c      	mov	r4, r1
 80166e2:	d507      	bpl.n	80166f4 <__smakebuf_r+0x1c>
 80166e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80166e8:	6023      	str	r3, [r4, #0]
 80166ea:	6123      	str	r3, [r4, #16]
 80166ec:	2301      	movs	r3, #1
 80166ee:	6163      	str	r3, [r4, #20]
 80166f0:	b002      	add	sp, #8
 80166f2:	bd70      	pop	{r4, r5, r6, pc}
 80166f4:	ab01      	add	r3, sp, #4
 80166f6:	466a      	mov	r2, sp
 80166f8:	f7ff ffca 	bl	8016690 <__swhatbuf_r>
 80166fc:	9900      	ldr	r1, [sp, #0]
 80166fe:	4605      	mov	r5, r0
 8016700:	4630      	mov	r0, r6
 8016702:	f7ff f9f3 	bl	8015aec <_malloc_r>
 8016706:	b948      	cbnz	r0, 801671c <__smakebuf_r+0x44>
 8016708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801670c:	059a      	lsls	r2, r3, #22
 801670e:	d4ef      	bmi.n	80166f0 <__smakebuf_r+0x18>
 8016710:	f023 0303 	bic.w	r3, r3, #3
 8016714:	f043 0302 	orr.w	r3, r3, #2
 8016718:	81a3      	strh	r3, [r4, #12]
 801671a:	e7e3      	b.n	80166e4 <__smakebuf_r+0xc>
 801671c:	4b0d      	ldr	r3, [pc, #52]	; (8016754 <__smakebuf_r+0x7c>)
 801671e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016720:	89a3      	ldrh	r3, [r4, #12]
 8016722:	6020      	str	r0, [r4, #0]
 8016724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016728:	81a3      	strh	r3, [r4, #12]
 801672a:	9b00      	ldr	r3, [sp, #0]
 801672c:	6163      	str	r3, [r4, #20]
 801672e:	9b01      	ldr	r3, [sp, #4]
 8016730:	6120      	str	r0, [r4, #16]
 8016732:	b15b      	cbz	r3, 801674c <__smakebuf_r+0x74>
 8016734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016738:	4630      	mov	r0, r6
 801673a:	f000 f915 	bl	8016968 <_isatty_r>
 801673e:	b128      	cbz	r0, 801674c <__smakebuf_r+0x74>
 8016740:	89a3      	ldrh	r3, [r4, #12]
 8016742:	f023 0303 	bic.w	r3, r3, #3
 8016746:	f043 0301 	orr.w	r3, r3, #1
 801674a:	81a3      	strh	r3, [r4, #12]
 801674c:	89a0      	ldrh	r0, [r4, #12]
 801674e:	4305      	orrs	r5, r0
 8016750:	81a5      	strh	r5, [r4, #12]
 8016752:	e7cd      	b.n	80166f0 <__smakebuf_r+0x18>
 8016754:	080164e9 	.word	0x080164e9

08016758 <memmove>:
 8016758:	4288      	cmp	r0, r1
 801675a:	b510      	push	{r4, lr}
 801675c:	eb01 0402 	add.w	r4, r1, r2
 8016760:	d902      	bls.n	8016768 <memmove+0x10>
 8016762:	4284      	cmp	r4, r0
 8016764:	4623      	mov	r3, r4
 8016766:	d807      	bhi.n	8016778 <memmove+0x20>
 8016768:	1e43      	subs	r3, r0, #1
 801676a:	42a1      	cmp	r1, r4
 801676c:	d008      	beq.n	8016780 <memmove+0x28>
 801676e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016776:	e7f8      	b.n	801676a <memmove+0x12>
 8016778:	4402      	add	r2, r0
 801677a:	4601      	mov	r1, r0
 801677c:	428a      	cmp	r2, r1
 801677e:	d100      	bne.n	8016782 <memmove+0x2a>
 8016780:	bd10      	pop	{r4, pc}
 8016782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801678a:	e7f7      	b.n	801677c <memmove+0x24>

0801678c <__malloc_lock>:
 801678c:	4801      	ldr	r0, [pc, #4]	; (8016794 <__malloc_lock+0x8>)
 801678e:	f7ff bf7d 	b.w	801668c <__retarget_lock_acquire_recursive>
 8016792:	bf00      	nop
 8016794:	200047d0 	.word	0x200047d0

08016798 <__malloc_unlock>:
 8016798:	4801      	ldr	r0, [pc, #4]	; (80167a0 <__malloc_unlock+0x8>)
 801679a:	f7ff bf78 	b.w	801668e <__retarget_lock_release_recursive>
 801679e:	bf00      	nop
 80167a0:	200047d0 	.word	0x200047d0

080167a4 <_realloc_r>:
 80167a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167a6:	4607      	mov	r7, r0
 80167a8:	4614      	mov	r4, r2
 80167aa:	460e      	mov	r6, r1
 80167ac:	b921      	cbnz	r1, 80167b8 <_realloc_r+0x14>
 80167ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80167b2:	4611      	mov	r1, r2
 80167b4:	f7ff b99a 	b.w	8015aec <_malloc_r>
 80167b8:	b922      	cbnz	r2, 80167c4 <_realloc_r+0x20>
 80167ba:	f7ff f947 	bl	8015a4c <_free_r>
 80167be:	4625      	mov	r5, r4
 80167c0:	4628      	mov	r0, r5
 80167c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167c4:	f000 f8f2 	bl	80169ac <_malloc_usable_size_r>
 80167c8:	42a0      	cmp	r0, r4
 80167ca:	d20f      	bcs.n	80167ec <_realloc_r+0x48>
 80167cc:	4621      	mov	r1, r4
 80167ce:	4638      	mov	r0, r7
 80167d0:	f7ff f98c 	bl	8015aec <_malloc_r>
 80167d4:	4605      	mov	r5, r0
 80167d6:	2800      	cmp	r0, #0
 80167d8:	d0f2      	beq.n	80167c0 <_realloc_r+0x1c>
 80167da:	4631      	mov	r1, r6
 80167dc:	4622      	mov	r2, r4
 80167de:	f7fb fe21 	bl	8012424 <memcpy>
 80167e2:	4631      	mov	r1, r6
 80167e4:	4638      	mov	r0, r7
 80167e6:	f7ff f931 	bl	8015a4c <_free_r>
 80167ea:	e7e9      	b.n	80167c0 <_realloc_r+0x1c>
 80167ec:	4635      	mov	r5, r6
 80167ee:	e7e7      	b.n	80167c0 <_realloc_r+0x1c>

080167f0 <_raise_r>:
 80167f0:	291f      	cmp	r1, #31
 80167f2:	b538      	push	{r3, r4, r5, lr}
 80167f4:	4604      	mov	r4, r0
 80167f6:	460d      	mov	r5, r1
 80167f8:	d904      	bls.n	8016804 <_raise_r+0x14>
 80167fa:	2316      	movs	r3, #22
 80167fc:	6003      	str	r3, [r0, #0]
 80167fe:	f04f 30ff 	mov.w	r0, #4294967295
 8016802:	bd38      	pop	{r3, r4, r5, pc}
 8016804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016806:	b112      	cbz	r2, 801680e <_raise_r+0x1e>
 8016808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801680c:	b94b      	cbnz	r3, 8016822 <_raise_r+0x32>
 801680e:	4620      	mov	r0, r4
 8016810:	f000 f830 	bl	8016874 <_getpid_r>
 8016814:	462a      	mov	r2, r5
 8016816:	4601      	mov	r1, r0
 8016818:	4620      	mov	r0, r4
 801681a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801681e:	f000 b817 	b.w	8016850 <_kill_r>
 8016822:	2b01      	cmp	r3, #1
 8016824:	d00a      	beq.n	801683c <_raise_r+0x4c>
 8016826:	1c59      	adds	r1, r3, #1
 8016828:	d103      	bne.n	8016832 <_raise_r+0x42>
 801682a:	2316      	movs	r3, #22
 801682c:	6003      	str	r3, [r0, #0]
 801682e:	2001      	movs	r0, #1
 8016830:	e7e7      	b.n	8016802 <_raise_r+0x12>
 8016832:	2400      	movs	r4, #0
 8016834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016838:	4628      	mov	r0, r5
 801683a:	4798      	blx	r3
 801683c:	2000      	movs	r0, #0
 801683e:	e7e0      	b.n	8016802 <_raise_r+0x12>

08016840 <raise>:
 8016840:	4b02      	ldr	r3, [pc, #8]	; (801684c <raise+0xc>)
 8016842:	4601      	mov	r1, r0
 8016844:	6818      	ldr	r0, [r3, #0]
 8016846:	f7ff bfd3 	b.w	80167f0 <_raise_r>
 801684a:	bf00      	nop
 801684c:	20000194 	.word	0x20000194

08016850 <_kill_r>:
 8016850:	b538      	push	{r3, r4, r5, lr}
 8016852:	4d07      	ldr	r5, [pc, #28]	; (8016870 <_kill_r+0x20>)
 8016854:	2300      	movs	r3, #0
 8016856:	4604      	mov	r4, r0
 8016858:	4608      	mov	r0, r1
 801685a:	4611      	mov	r1, r2
 801685c:	602b      	str	r3, [r5, #0]
 801685e:	f7f3 fecf 	bl	800a600 <_kill>
 8016862:	1c43      	adds	r3, r0, #1
 8016864:	d102      	bne.n	801686c <_kill_r+0x1c>
 8016866:	682b      	ldr	r3, [r5, #0]
 8016868:	b103      	cbz	r3, 801686c <_kill_r+0x1c>
 801686a:	6023      	str	r3, [r4, #0]
 801686c:	bd38      	pop	{r3, r4, r5, pc}
 801686e:	bf00      	nop
 8016870:	200047d8 	.word	0x200047d8

08016874 <_getpid_r>:
 8016874:	f7f3 bec2 	b.w	800a5fc <_getpid>

08016878 <__sread>:
 8016878:	b510      	push	{r4, lr}
 801687a:	460c      	mov	r4, r1
 801687c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016880:	f000 f89c 	bl	80169bc <_read_r>
 8016884:	2800      	cmp	r0, #0
 8016886:	bfab      	itete	ge
 8016888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801688a:	89a3      	ldrhlt	r3, [r4, #12]
 801688c:	181b      	addge	r3, r3, r0
 801688e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016892:	bfac      	ite	ge
 8016894:	6563      	strge	r3, [r4, #84]	; 0x54
 8016896:	81a3      	strhlt	r3, [r4, #12]
 8016898:	bd10      	pop	{r4, pc}

0801689a <__swrite>:
 801689a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801689e:	461f      	mov	r7, r3
 80168a0:	898b      	ldrh	r3, [r1, #12]
 80168a2:	05db      	lsls	r3, r3, #23
 80168a4:	4605      	mov	r5, r0
 80168a6:	460c      	mov	r4, r1
 80168a8:	4616      	mov	r6, r2
 80168aa:	d505      	bpl.n	80168b8 <__swrite+0x1e>
 80168ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168b0:	2302      	movs	r3, #2
 80168b2:	2200      	movs	r2, #0
 80168b4:	f000 f868 	bl	8016988 <_lseek_r>
 80168b8:	89a3      	ldrh	r3, [r4, #12]
 80168ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80168c2:	81a3      	strh	r3, [r4, #12]
 80168c4:	4632      	mov	r2, r6
 80168c6:	463b      	mov	r3, r7
 80168c8:	4628      	mov	r0, r5
 80168ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168ce:	f000 b817 	b.w	8016900 <_write_r>

080168d2 <__sseek>:
 80168d2:	b510      	push	{r4, lr}
 80168d4:	460c      	mov	r4, r1
 80168d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168da:	f000 f855 	bl	8016988 <_lseek_r>
 80168de:	1c43      	adds	r3, r0, #1
 80168e0:	89a3      	ldrh	r3, [r4, #12]
 80168e2:	bf15      	itete	ne
 80168e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80168e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80168ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80168ee:	81a3      	strheq	r3, [r4, #12]
 80168f0:	bf18      	it	ne
 80168f2:	81a3      	strhne	r3, [r4, #12]
 80168f4:	bd10      	pop	{r4, pc}

080168f6 <__sclose>:
 80168f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168fa:	f000 b813 	b.w	8016924 <_close_r>
	...

08016900 <_write_r>:
 8016900:	b538      	push	{r3, r4, r5, lr}
 8016902:	4d07      	ldr	r5, [pc, #28]	; (8016920 <_write_r+0x20>)
 8016904:	4604      	mov	r4, r0
 8016906:	4608      	mov	r0, r1
 8016908:	4611      	mov	r1, r2
 801690a:	2200      	movs	r2, #0
 801690c:	602a      	str	r2, [r5, #0]
 801690e:	461a      	mov	r2, r3
 8016910:	f7f3 fe91 	bl	800a636 <_write>
 8016914:	1c43      	adds	r3, r0, #1
 8016916:	d102      	bne.n	801691e <_write_r+0x1e>
 8016918:	682b      	ldr	r3, [r5, #0]
 801691a:	b103      	cbz	r3, 801691e <_write_r+0x1e>
 801691c:	6023      	str	r3, [r4, #0]
 801691e:	bd38      	pop	{r3, r4, r5, pc}
 8016920:	200047d8 	.word	0x200047d8

08016924 <_close_r>:
 8016924:	b538      	push	{r3, r4, r5, lr}
 8016926:	4d06      	ldr	r5, [pc, #24]	; (8016940 <_close_r+0x1c>)
 8016928:	2300      	movs	r3, #0
 801692a:	4604      	mov	r4, r0
 801692c:	4608      	mov	r0, r1
 801692e:	602b      	str	r3, [r5, #0]
 8016930:	f7f3 fe8e 	bl	800a650 <_close>
 8016934:	1c43      	adds	r3, r0, #1
 8016936:	d102      	bne.n	801693e <_close_r+0x1a>
 8016938:	682b      	ldr	r3, [r5, #0]
 801693a:	b103      	cbz	r3, 801693e <_close_r+0x1a>
 801693c:	6023      	str	r3, [r4, #0]
 801693e:	bd38      	pop	{r3, r4, r5, pc}
 8016940:	200047d8 	.word	0x200047d8

08016944 <_fstat_r>:
 8016944:	b538      	push	{r3, r4, r5, lr}
 8016946:	4d07      	ldr	r5, [pc, #28]	; (8016964 <_fstat_r+0x20>)
 8016948:	2300      	movs	r3, #0
 801694a:	4604      	mov	r4, r0
 801694c:	4608      	mov	r0, r1
 801694e:	4611      	mov	r1, r2
 8016950:	602b      	str	r3, [r5, #0]
 8016952:	f7f3 fe80 	bl	800a656 <_fstat>
 8016956:	1c43      	adds	r3, r0, #1
 8016958:	d102      	bne.n	8016960 <_fstat_r+0x1c>
 801695a:	682b      	ldr	r3, [r5, #0]
 801695c:	b103      	cbz	r3, 8016960 <_fstat_r+0x1c>
 801695e:	6023      	str	r3, [r4, #0]
 8016960:	bd38      	pop	{r3, r4, r5, pc}
 8016962:	bf00      	nop
 8016964:	200047d8 	.word	0x200047d8

08016968 <_isatty_r>:
 8016968:	b538      	push	{r3, r4, r5, lr}
 801696a:	4d06      	ldr	r5, [pc, #24]	; (8016984 <_isatty_r+0x1c>)
 801696c:	2300      	movs	r3, #0
 801696e:	4604      	mov	r4, r0
 8016970:	4608      	mov	r0, r1
 8016972:	602b      	str	r3, [r5, #0]
 8016974:	f7f3 fe74 	bl	800a660 <_isatty>
 8016978:	1c43      	adds	r3, r0, #1
 801697a:	d102      	bne.n	8016982 <_isatty_r+0x1a>
 801697c:	682b      	ldr	r3, [r5, #0]
 801697e:	b103      	cbz	r3, 8016982 <_isatty_r+0x1a>
 8016980:	6023      	str	r3, [r4, #0]
 8016982:	bd38      	pop	{r3, r4, r5, pc}
 8016984:	200047d8 	.word	0x200047d8

08016988 <_lseek_r>:
 8016988:	b538      	push	{r3, r4, r5, lr}
 801698a:	4d07      	ldr	r5, [pc, #28]	; (80169a8 <_lseek_r+0x20>)
 801698c:	4604      	mov	r4, r0
 801698e:	4608      	mov	r0, r1
 8016990:	4611      	mov	r1, r2
 8016992:	2200      	movs	r2, #0
 8016994:	602a      	str	r2, [r5, #0]
 8016996:	461a      	mov	r2, r3
 8016998:	f7f3 fe64 	bl	800a664 <_lseek>
 801699c:	1c43      	adds	r3, r0, #1
 801699e:	d102      	bne.n	80169a6 <_lseek_r+0x1e>
 80169a0:	682b      	ldr	r3, [r5, #0]
 80169a2:	b103      	cbz	r3, 80169a6 <_lseek_r+0x1e>
 80169a4:	6023      	str	r3, [r4, #0]
 80169a6:	bd38      	pop	{r3, r4, r5, pc}
 80169a8:	200047d8 	.word	0x200047d8

080169ac <_malloc_usable_size_r>:
 80169ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169b0:	1f18      	subs	r0, r3, #4
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	bfbc      	itt	lt
 80169b6:	580b      	ldrlt	r3, [r1, r0]
 80169b8:	18c0      	addlt	r0, r0, r3
 80169ba:	4770      	bx	lr

080169bc <_read_r>:
 80169bc:	b538      	push	{r3, r4, r5, lr}
 80169be:	4d07      	ldr	r5, [pc, #28]	; (80169dc <_read_r+0x20>)
 80169c0:	4604      	mov	r4, r0
 80169c2:	4608      	mov	r0, r1
 80169c4:	4611      	mov	r1, r2
 80169c6:	2200      	movs	r2, #0
 80169c8:	602a      	str	r2, [r5, #0]
 80169ca:	461a      	mov	r2, r3
 80169cc:	f7f3 fe26 	bl	800a61c <_read>
 80169d0:	1c43      	adds	r3, r0, #1
 80169d2:	d102      	bne.n	80169da <_read_r+0x1e>
 80169d4:	682b      	ldr	r3, [r5, #0]
 80169d6:	b103      	cbz	r3, 80169da <_read_r+0x1e>
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	bd38      	pop	{r3, r4, r5, pc}
 80169dc:	200047d8 	.word	0x200047d8

080169e0 <_init>:
 80169e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169e2:	bf00      	nop
 80169e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169e6:	bc08      	pop	{r3}
 80169e8:	469e      	mov	lr, r3
 80169ea:	4770      	bx	lr

080169ec <_fini>:
 80169ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ee:	bf00      	nop
 80169f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169f2:	bc08      	pop	{r3}
 80169f4:	469e      	mov	lr, r3
 80169f6:	4770      	bx	lr
