
PLC STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ad8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024ac  08012c68  08012c68  00022c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015114  08015114  00030358  2**0
                  CONTENTS
  4 .ARM          00000000  08015114  08015114  00030358  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015114  08015114  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015114  08015114  00025114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015118  08015118  00025118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0801511c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035fc  20000358  08015474  00030358  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003954  08015474  00033954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d3b6  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bf8a  00000000  00000000  0007d73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001c50d  00000000  00000000  000896c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002068  00000000  00000000  000a5bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000031f0  00000000  00000000  000a7c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032378  00000000  00000000  000aae30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005c7a9  00000000  00000000  000dd1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc673  00000000  00000000  00139951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f5fc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ef4  00000000  00000000  001f6014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012c50 	.word	0x08012c50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	08012c50 	.word	0x08012c50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <STM32_PLC_Analog_Input_Set_Gain>:
}

void STM32_PLC_Analog_Input_Set_Gain(uint8_t sdadc, uint8_t configuration_index, uint8_t gain, bool save_to_flash) {
	/* Select SDADC handler */
	SDADC_HandleTypeDef *hsdadc;
	switch(sdadc){
 8000cf4:	2802      	cmp	r0, #2
void STM32_PLC_Analog_Input_Set_Gain(uint8_t sdadc, uint8_t configuration_index, uint8_t gain, bool save_to_flash) {
 8000cf6:	b570      	push	{r4, r5, r6, lr}
 8000cf8:	460d      	mov	r5, r1
 8000cfa:	4611      	mov	r1, r2
	switch(sdadc){
 8000cfc:	d020      	beq.n	8000d40 <STM32_PLC_Analog_Input_Set_Gain+0x4c>
 8000cfe:	2803      	cmp	r0, #3
 8000d00:	d020      	beq.n	8000d44 <STM32_PLC_Analog_Input_Set_Gain+0x50>
 8000d02:	2801      	cmp	r0, #1
 8000d04:	d11b      	bne.n	8000d3e <STM32_PLC_Analog_Input_Set_Gain+0x4a>
	case 1:
		hsdadc = handler_sdadc1;
 8000d06:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <STM32_PLC_Analog_Input_Set_Gain+0x88>)
		break;
	case 2:
		hsdadc = handler_sdadc2;
		break;
	case 3:
		hsdadc = handler_sdadc3;
 8000d08:	6816      	ldr	r6, [r2, #0]
		return;
	}


	/* Stop SDADC */
	hsdadc->Instance->CR2 &= ~SDADC_CR2_ADON;
 8000d0a:	6834      	ldr	r4, [r6, #0]
 8000d0c:	6862      	ldr	r2, [r4, #4]

	/* Set gain */
	switch(configuration_index){
 8000d0e:	2d01      	cmp	r5, #1
	hsdadc->Instance->CR2 &= ~SDADC_CR2_ADON;
 8000d10:	f022 0201 	bic.w	r2, r2, #1
 8000d14:	6062      	str	r2, [r4, #4]
	switch(configuration_index){
 8000d16:	d017      	beq.n	8000d48 <STM32_PLC_Analog_Input_Set_Gain+0x54>
 8000d18:	2d02      	cmp	r5, #2
 8000d1a:	d022      	beq.n	8000d62 <STM32_PLC_Analog_Input_Set_Gain+0x6e>
 8000d1c:	b955      	cbnz	r5, 8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
	case SDADC_CONF_INDEX_0:
		hsdadc->Instance->CONF0R &=  ~(0b111 << 20); /* Clear */
 8000d1e:	6a22      	ldr	r2, [r4, #32]
 8000d20:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000d24:	6222      	str	r2, [r4, #32]
		hsdadc->Instance->CONF0R |= gain << 20; 	 /* Bits 22:20 GAIN0[2:0]: */
 8000d26:	6a22      	ldr	r2, [r4, #32]
 8000d28:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000d2c:	6222      	str	r2, [r4, #32]
		if(save_to_flash)
 8000d2e:	b10b      	cbz	r3, 8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
			STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0(sdadc, gain);
 8000d30:	f000 fb6c 	bl	800140c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0>
			STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(sdadc, gain);
		break;
	}

	/* Start SDADC */
	hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8000d34:	6832      	ldr	r2, [r6, #0]
 8000d36:	6853      	ldr	r3, [r2, #4]
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]

}
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
		hsdadc = handler_sdadc2;
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <STM32_PLC_Analog_Input_Set_Gain+0x8c>)
 8000d42:	e7e1      	b.n	8000d08 <STM32_PLC_Analog_Input_Set_Gain+0x14>
		hsdadc = handler_sdadc3;
 8000d44:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <STM32_PLC_Analog_Input_Set_Gain+0x90>)
 8000d46:	e7df      	b.n	8000d08 <STM32_PLC_Analog_Input_Set_Gain+0x14>
		hsdadc->Instance->CONF1R &=  ~(0b111 << 20);
 8000d48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d4a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000d4e:	6262      	str	r2, [r4, #36]	; 0x24
		hsdadc->Instance->CONF1R |= gain << 20;
 8000d50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d52:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000d56:	6262      	str	r2, [r4, #36]	; 0x24
		if(save_to_flash)
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0eb      	beq.n	8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
			STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1(sdadc, gain);
 8000d5c:	f000 fb66 	bl	800142c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1>
 8000d60:	e7e8      	b.n	8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
		hsdadc->Instance->CONF2R &=  ~(0b111 << 20);
 8000d62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d64:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000d68:	62a2      	str	r2, [r4, #40]	; 0x28
		hsdadc->Instance->CONF2R |= gain << 20;
 8000d6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d6c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000d70:	62a2      	str	r2, [r4, #40]	; 0x28
		if(save_to_flash)
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0de      	beq.n	8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
			STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(sdadc, gain);
 8000d76:	f000 fb69 	bl	800144c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2>
 8000d7a:	e7db      	b.n	8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
 8000d7c:	200003dc 	.word	0x200003dc
 8000d80:	200003e0 	.word	0x200003e0
 8000d84:	200003e4 	.word	0x200003e4

08000d88 <STM32_PLC_Analog_Input>:
void STM32_PLC_Analog_Input(TIM_HandleTypeDef* htim12, TIM_HandleTypeDef* htim13, SDADC_HandleTypeDef* hsdadc1, SDADC_HandleTypeDef* hsdadc2, SDADC_HandleTypeDef* hsdadc3) {
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	4607      	mov	r7, r0
 8000d8e:	4608      	mov	r0, r1
	if(HAL_TIM_OC_Start(htim13, TIM_CHANNEL_1) != HAL_OK) /* TIM13 Channel 1 is trigger source for SDADC1 */
 8000d90:	2100      	movs	r1, #0
void STM32_PLC_Analog_Input(TIM_HandleTypeDef* htim12, TIM_HandleTypeDef* htim13, SDADC_HandleTypeDef* hsdadc1, SDADC_HandleTypeDef* hsdadc2, SDADC_HandleTypeDef* hsdadc3) {
 8000d92:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8000d94:	4615      	mov	r5, r2
 8000d96:	461c      	mov	r4, r3
	if(HAL_TIM_OC_Start(htim13, TIM_CHANNEL_1) != HAL_OK) /* TIM13 Channel 1 is trigger source for SDADC1 */
 8000d98:	f00b feb8 	bl	800cb0c <HAL_TIM_OC_Start>
 8000d9c:	b108      	cbz	r0, 8000da2 <STM32_PLC_Analog_Input+0x1a>
		Error_Handler();
 8000d9e:	f006 fb05 	bl	80073ac <Error_Handler>
	if(HAL_TIM_OC_Start(htim12, TIM_CHANNEL_1) != HAL_OK) /* TIM12 Channel 1 is trigger source for SDADC2 */
 8000da2:	2100      	movs	r1, #0
 8000da4:	4638      	mov	r0, r7
 8000da6:	f00b feb1 	bl	800cb0c <HAL_TIM_OC_Start>
 8000daa:	b108      	cbz	r0, 8000db0 <STM32_PLC_Analog_Input+0x28>
		Error_Handler();
 8000dac:	f006 fafe 	bl	80073ac <Error_Handler>
	if(HAL_TIM_OC_Start(htim12, TIM_CHANNEL_2) != HAL_OK) /* TIM12 Channel 2 is trigger source for SDADC3 */
 8000db0:	2104      	movs	r1, #4
 8000db2:	4638      	mov	r0, r7
 8000db4:	f00b feaa 	bl	800cb0c <HAL_TIM_OC_Start>
 8000db8:	b108      	cbz	r0, 8000dbe <STM32_PLC_Analog_Input+0x36>
		Error_Handler();
 8000dba:	f006 faf7 	bl	80073ac <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc1, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	f00a fbf7 	bl	800b5b4 <HAL_SDADC_CalibrationStart>
 8000dc6:	b108      	cbz	r0, 8000dcc <STM32_PLC_Analog_Input+0x44>
		Error_Handler();
 8000dc8:	f006 faf0 	bl	80073ac <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc1, HAL_MAX_DELAY) != HAL_OK)
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f00a fc15 	bl	800b600 <HAL_SDADC_PollForCalibEvent>
 8000dd6:	b108      	cbz	r0, 8000ddc <STM32_PLC_Analog_Input+0x54>
		Error_Handler();
 8000dd8:	f006 fae8 	bl	80073ac <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc2, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000ddc:	2104      	movs	r1, #4
 8000dde:	4620      	mov	r0, r4
 8000de0:	f00a fbe8 	bl	800b5b4 <HAL_SDADC_CalibrationStart>
 8000de4:	b108      	cbz	r0, 8000dea <STM32_PLC_Analog_Input+0x62>
		Error_Handler();
 8000de6:	f006 fae1 	bl	80073ac <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc2, HAL_MAX_DELAY) != HAL_OK)
 8000dea:	f04f 31ff 	mov.w	r1, #4294967295
 8000dee:	4620      	mov	r0, r4
 8000df0:	f00a fc06 	bl	800b600 <HAL_SDADC_PollForCalibEvent>
 8000df4:	b108      	cbz	r0, 8000dfa <STM32_PLC_Analog_Input+0x72>
		Error_Handler();
 8000df6:	f006 fad9 	bl	80073ac <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc3, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f00a fbd9 	bl	800b5b4 <HAL_SDADC_CalibrationStart>
 8000e02:	b108      	cbz	r0, 8000e08 <STM32_PLC_Analog_Input+0x80>
		Error_Handler();
 8000e04:	f006 fad2 	bl	80073ac <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc3, HAL_MAX_DELAY) != HAL_OK)
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f00a fbf7 	bl	800b600 <HAL_SDADC_PollForCalibEvent>
 8000e12:	b108      	cbz	r0, 8000e18 <STM32_PLC_Analog_Input+0x90>
		Error_Handler();
 8000e14:	f006 faca 	bl	80073ac <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc1, (uint32_t*)SDADC1_Single, 9) != HAL_OK)
 8000e18:	4943      	ldr	r1, [pc, #268]	; (8000f28 <STM32_PLC_Analog_Input+0x1a0>)
 8000e1a:	2209      	movs	r2, #9
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f00a fc13 	bl	800b648 <HAL_SDADC_InjectedStart_DMA>
 8000e22:	b108      	cbz	r0, 8000e28 <STM32_PLC_Analog_Input+0xa0>
		Error_Handler();
 8000e24:	f006 fac2 	bl	80073ac <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc2, (uint32_t*)SDADC2_Single, 3) != HAL_OK)
 8000e28:	4940      	ldr	r1, [pc, #256]	; (8000f2c <STM32_PLC_Analog_Input+0x1a4>)
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f00a fc0b 	bl	800b648 <HAL_SDADC_InjectedStart_DMA>
 8000e32:	b108      	cbz	r0, 8000e38 <STM32_PLC_Analog_Input+0xb0>
		Error_Handler();
 8000e34:	f006 faba 	bl	80073ac <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc3, (uint32_t*)SDADC3_Differential, 5) != HAL_OK)
 8000e38:	493d      	ldr	r1, [pc, #244]	; (8000f30 <STM32_PLC_Analog_Input+0x1a8>)
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f00a fc03 	bl	800b648 <HAL_SDADC_InjectedStart_DMA>
 8000e42:	b108      	cbz	r0, 8000e48 <STM32_PLC_Analog_Input+0xc0>
		Error_Handler();
 8000e44:	f006 fab2 	bl	80073ac <Error_Handler>
	handler_sdadc1 = hsdadc1;
 8000e48:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <STM32_PLC_Analog_Input+0x1ac>)
 8000e4a:	601d      	str	r5, [r3, #0]
	handler_sdadc2 = hsdadc2;
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <STM32_PLC_Analog_Input+0x1b0>)
 8000e4e:	4d3b      	ldr	r5, [pc, #236]	; (8000f3c <STM32_PLC_Analog_Input+0x1b4>)
 8000e50:	601c      	str	r4, [r3, #0]
	handler_sdadc3 = hsdadc3;
 8000e52:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <STM32_PLC_Analog_Input+0x1b8>)
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8000e54:	f10d 0207 	add.w	r2, sp, #7
 8000e58:	f10d 0106 	add.w	r1, sp, #6
 8000e5c:	f10d 0005 	add.w	r0, sp, #5
	handler_sdadc3 = hsdadc3;
 8000e60:	601e      	str	r6, [r3, #0]
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8000e62:	f000 fb9c 	bl	800159e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>
	STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_0, gain_for_configuration_index_0, false);
 8000e66:	2300      	movs	r3, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000e6e:	4e35      	ldr	r6, [pc, #212]	; (8000f44 <STM32_PLC_Analog_Input+0x1bc>)
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff ff3f 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_1, gain_for_configuration_index_1, false);
 8000e76:	2101      	movs	r1, #1
 8000e78:	4608      	mov	r0, r1
 8000e7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f7ff ff38 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_2, gain_for_configuration_index_2, false);
 8000e84:	2300      	movs	r3, #0
 8000e86:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff ff31 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8000e92:	f10d 0207 	add.w	r2, sp, #7
 8000e96:	f10d 0106 	add.w	r1, sp, #6
 8000e9a:	f10d 0005 	add.w	r0, sp, #5
 8000e9e:	f000 fb9a 	bl	80015d6 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>
	STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_0, gain_for_configuration_index_0, false);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f7ff ff22 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_1, gain_for_configuration_index_1, false);
 8000eb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f7ff ff1b 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_2, gain_for_configuration_index_2, false);
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000ec8:	f7ff ff14 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8000ecc:	f10d 0207 	add.w	r2, sp, #7
 8000ed0:	f10d 0106 	add.w	r1, sp, #6
 8000ed4:	f10d 0005 	add.w	r0, sp, #5
 8000ed8:	f000 fb99 	bl	800160e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>
	STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_0, gain_for_configuration_index_0, false);
 8000edc:	2300      	movs	r3, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f7ff ff05 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_1, gain_for_configuration_index_1, false);
 8000eea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f7ff fefe 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain_for_configuration_index_2, false);
 8000ef8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000efc:	2300      	movs	r3, #0
 8000efe:	2102      	movs	r1, #2
 8000f00:	2003      	movs	r0, #3
 8000f02:	f7ff fef7 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
 8000f06:	2400      	movs	r4, #0
		STM32_PLC_Flash_Get_Analog_Input_Calibration(i, &scalar, &bias);
 8000f08:	b2e0      	uxtb	r0, r4
 8000f0a:	aa03      	add	r2, sp, #12
 8000f0c:	a902      	add	r1, sp, #8
 8000f0e:	f000 fc07 	bl	8001720 <STM32_PLC_Flash_Get_Analog_Input_Calibration>
	for(uint8_t i = 0; i < 17; i++){
 8000f12:	3401      	adds	r4, #1
float STM32_PLC_Analog_Input_DADC_Get_Calibrated(uint8_t i) {
	return scalar_list[12+i]*((float)STM32_PLC_Analog_Input_DADC_Get_Raw(i)) + bias_list[12+i];
}

void STM32_PLC_Analog_Input_Set_Calibration(uint8_t input_index, float scalar, float bias, bool save_to_flash){
	scalar_list[input_index] = scalar;
 8000f14:	9b02      	ldr	r3, [sp, #8]
 8000f16:	f846 3b04 	str.w	r3, [r6], #4
	for(uint8_t i = 0; i < 17; i++){
 8000f1a:	2c11      	cmp	r4, #17
	bias_list[input_index] = bias;
 8000f1c:	9b03      	ldr	r3, [sp, #12]
 8000f1e:	f845 3b04 	str.w	r3, [r5], #4
	for(uint8_t i = 0; i < 17; i++){
 8000f22:	d1f1      	bne.n	8000f08 <STM32_PLC_Analog_Input+0x180>
}
 8000f24:	b005      	add	sp, #20
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	20000374 	.word	0x20000374
 8000f2c:	20000386 	.word	0x20000386
 8000f30:	2000038c 	.word	0x2000038c
 8000f34:	200003dc 	.word	0x200003dc
 8000f38:	200003e0 	.word	0x200003e0
 8000f3c:	20000398 	.word	0x20000398
 8000f40:	200003e4 	.word	0x200003e4
 8000f44:	200003e8 	.word	0x200003e8

08000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>:
	switch (i) {
 8000f48:	280b      	cmp	r0, #11
 8000f4a:	d834      	bhi.n	8000fb6 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x6e>
 8000f4c:	e8df f000 	tbb	[pc, r0]
 8000f50:	15110d06 	.word	0x15110d06
 8000f54:	25211d19 	.word	0x25211d19
 8000f58:	312f2d29 	.word	0x312f2d29
		value = SDADC1_Single[6];
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f5e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
	return value + 0x8000;
 8000f62:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
}
 8000f66:	b280      	uxth	r0, r0
 8000f68:	4770      	bx	lr
		value = SDADC1_Single[5];
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f6c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
		break;
 8000f70:	e7f7      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[4];
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f74:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
		break;
 8000f78:	e7f3      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[3];
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f7c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
		break;
 8000f80:	e7ef      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[8];
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f84:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
		break;
 8000f88:	e7eb      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[7];
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f8c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
		break;
 8000f90:	e7e7      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[2];
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
		value = SDADC2_Single[2];
 8000f94:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
		break;
 8000f98:	e7e3      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[1];
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
		value = SDADC2_Single[1];
 8000f9c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
		break;
 8000fa0:	e7df      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[0];
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
		value = SDADC2_Single[0];
 8000fa4:	f9b3 0000 	ldrsh.w	r0, [r3]
		break;
 8000fa8:	e7db      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC2_Single[2];
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x78>)
 8000fac:	e7f2      	b.n	8000f94 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x4c>
		value = SDADC2_Single[1];
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x78>)
 8000fb0:	e7f4      	b.n	8000f9c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x54>
		value = SDADC2_Single[0];
 8000fb2:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x78>)
 8000fb4:	e7f6      	b.n	8000fa4 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x5c>
	switch (i) {
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	e7d3      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
 8000fba:	bf00      	nop
 8000fbc:	20000374 	.word	0x20000374
 8000fc0:	20000386 	.word	0x20000386

08000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>:
float STM32_PLC_Analog_Input_ADC_Get_Calibrated(uint8_t i) {
 8000fc4:	b508      	push	{r3, lr}
 8000fc6:	4602      	mov	r2, r0
	return scalar_list[i]*((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) + bias_list[i];
 8000fc8:	f7ff ffbe 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <STM32_PLC_Analog_Input_ADC_Get_Calibrated+0x2c>)
 8000fce:	ee07 0a90 	vmov	s15, r0
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated+0x30>)
 8000fd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000fd8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe0:	ed93 7a00 	vldr	s14, [r3]
 8000fe4:	ed92 0a00 	vldr	s0, [r2]
}
 8000fe8:	eea7 0a27 	vfma.f32	s0, s14, s15
 8000fec:	bd08      	pop	{r3, pc}
 8000fee:	bf00      	nop
 8000ff0:	200003e8 	.word	0x200003e8
 8000ff4:	20000398 	.word	0x20000398

08000ff8 <STM32_PLC_Analog_Input_DADC_Get_Raw>:
	switch(i){
 8000ff8:	2804      	cmp	r0, #4
 8000ffa:	d818      	bhi.n	800102e <STM32_PLC_Analog_Input_DADC_Get_Raw+0x36>
 8000ffc:	e8df f000 	tbb	[pc, r0]
 8001000:	0f0b0703 	.word	0x0f0b0703
 8001004:	13          	.byte	0x13
 8001005:	00          	.byte	0x00
		value = SDADC3_Differential[4];
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001008:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
		break;
 800100c:	4770      	bx	lr
		value = SDADC3_Differential[3];
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001010:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
		break;
 8001014:	4770      	bx	lr
		value = SDADC3_Differential[2];
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001018:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
		break;
 800101c:	4770      	bx	lr
		value = SDADC3_Differential[1];
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001020:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
		break;
 8001024:	4770      	bx	lr
		value = SDADC3_Differential[0];
 8001026:	4b03      	ldr	r3, [pc, #12]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001028:	f9b3 0000 	ldrsh.w	r0, [r3]
		break;
 800102c:	4770      	bx	lr
	switch(i){
 800102e:	2000      	movs	r0, #0
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	2000038c 	.word	0x2000038c

08001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>:
float STM32_PLC_Analog_Input_DADC_Get_Calibrated(uint8_t i) {
 8001038:	b508      	push	{r3, lr}
	return scalar_list[12+i]*((float)STM32_PLC_Analog_Input_DADC_Get_Raw(i)) + bias_list[12+i];
 800103a:	f100 020c 	add.w	r2, r0, #12
 800103e:	f7ff ffdb 	bl	8000ff8 <STM32_PLC_Analog_Input_DADC_Get_Raw>
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <STM32_PLC_Analog_Input_DADC_Get_Calibrated+0x2c>)
 8001044:	ee07 0a90 	vmov	s15, r0
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <STM32_PLC_Analog_Input_DADC_Get_Calibrated+0x30>)
 800104a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800104e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001056:	ed93 7a00 	vldr	s14, [r3]
 800105a:	ed92 0a00 	vldr	s0, [r2]
}
 800105e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001062:	bd08      	pop	{r3, pc}
 8001064:	200003e8 	.word	0x200003e8
 8001068:	20000398 	.word	0x20000398

0800106c <STM32_PLC_Analog_Input_Set_Calibration>:
	scalar_list[input_index] = scalar;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <STM32_PLC_Analog_Input_Set_Calibration+0x1c>)
	bias_list[input_index] = bias;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <STM32_PLC_Analog_Input_Set_Calibration+0x20>)
	scalar_list[input_index] = scalar;
 8001070:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	bias_list[input_index] = bias;
 8001074:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	scalar_list[input_index] = scalar;
 8001078:	ed82 0a00 	vstr	s0, [r2]
	bias_list[input_index] = bias;
 800107c:	edc3 0a00 	vstr	s1, [r3]
	if(save_to_flash)
 8001080:	b109      	cbz	r1, 8001086 <STM32_PLC_Analog_Input_Set_Calibration+0x1a>
		STM32_PLC_Flash_Set_Analog_Input_Calibration(input_index, scalar, bias);
 8001082:	f000 ba4f 	b.w	8001524 <STM32_PLC_Flash_Set_Analog_Input_Calibration>
}
 8001086:	4770      	bx	lr
 8001088:	200003e8 	.word	0x200003e8
 800108c:	20000398 	.word	0x20000398

08001090 <STM32_PLC_Analog_Output_Set>:
	STM32_PLC_Analog_Output_Reset();
}

void STM32_PLC_Analog_Output_Set(uint8_t i, uint16_t output) {
	/* Safety */
	if(output > 4095)
 8001090:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001094:	428b      	cmp	r3, r1
 8001096:	bf28      	it	cs
 8001098:	460b      	movcs	r3, r1
		output = 4095;
	switch(i){
 800109a:	2801      	cmp	r0, #1
void STM32_PLC_Analog_Output_Set(uint8_t i, uint16_t output) {
 800109c:	4602      	mov	r2, r0
	switch(i){
 800109e:	d007      	beq.n	80010b0 <STM32_PLC_Analog_Output_Set+0x20>
 80010a0:	2802      	cmp	r0, #2
 80010a2:	d008      	beq.n	80010b6 <STM32_PLC_Analog_Output_Set+0x26>
 80010a4:	b958      	cbnz	r0, 80010be <STM32_PLC_Analog_Output_Set+0x2e>
	case 0:
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, output);
 80010a6:	4601      	mov	r1, r0
		break;
	case 1:
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, output);
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <STM32_PLC_Analog_Output_Set+0x30>)
		break;
	case 2:
		HAL_DAC_SetValue(hanalog2, DAC2_CHANNEL_1, DAC_ALIGN_12B_R, output);
 80010aa:	6800      	ldr	r0, [r0, #0]
 80010ac:	f008 b883 	b.w	80091b6 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, output);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2110      	movs	r1, #16
 80010b4:	e7f8      	b.n	80010a8 <STM32_PLC_Analog_Output_Set+0x18>
		HAL_DAC_SetValue(hanalog2, DAC2_CHANNEL_1, DAC_ALIGN_12B_R, output);
 80010b6:	2200      	movs	r2, #0
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <STM32_PLC_Analog_Output_Set+0x34>)
 80010ba:	4611      	mov	r1, r2
 80010bc:	e7f5      	b.n	80010aa <STM32_PLC_Analog_Output_Set+0x1a>
		break;
	}
}
 80010be:	4770      	bx	lr
 80010c0:	2000042c 	.word	0x2000042c
 80010c4:	20000430 	.word	0x20000430

080010c8 <STM32_PLC_Analog_Output_Reset>:

void STM32_PLC_Analog_Output_Reset() {
 80010c8:	b508      	push	{r3, lr}
	for(uint8_t i = 0; i < 3; i++)
		STM32_PLC_Analog_Output_Set(i, 0);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4608      	mov	r0, r1
 80010ce:	f7ff ffdf 	bl	8001090 <STM32_PLC_Analog_Output_Set>
 80010d2:	2100      	movs	r1, #0
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff ffdb 	bl	8001090 <STM32_PLC_Analog_Output_Set>
}
 80010da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		STM32_PLC_Analog_Output_Set(i, 0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff bfd5 	b.w	8001090 <STM32_PLC_Analog_Output_Set>
	...

080010e8 <STM32_PLC_Analog_Output>:
void STM32_PLC_Analog_Output(DAC_HandleTypeDef* hdac1, DAC_HandleTypeDef* hdac2, TIM_HandleTypeDef* htim6) {
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4604      	mov	r4, r0
	HAL_TIM_Base_Start(htim6);
 80010ec:	4610      	mov	r0, r2
void STM32_PLC_Analog_Output(DAC_HandleTypeDef* hdac1, DAC_HandleTypeDef* hdac2, TIM_HandleTypeDef* htim6) {
 80010ee:	460d      	mov	r5, r1
	HAL_TIM_Base_Start(htim6);
 80010f0:	f00a ff68 	bl	800bfc4 <HAL_TIM_Base_Start>
	if(HAL_DAC_Start(hdac1, DAC1_CHANNEL_1) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4620      	mov	r0, r4
 80010f8:	f008 f86f 	bl	80091da <HAL_DAC_Start>
 80010fc:	b108      	cbz	r0, 8001102 <STM32_PLC_Analog_Output+0x1a>
		Error_Handler();
 80010fe:	f006 f955 	bl	80073ac <Error_Handler>
	if(HAL_DAC_Start(hdac1, DAC1_CHANNEL_2) != HAL_OK)
 8001102:	2110      	movs	r1, #16
 8001104:	4620      	mov	r0, r4
 8001106:	f008 f868 	bl	80091da <HAL_DAC_Start>
 800110a:	b108      	cbz	r0, 8001110 <STM32_PLC_Analog_Output+0x28>
		Error_Handler();
 800110c:	f006 f94e 	bl	80073ac <Error_Handler>
	if(HAL_DAC_Start(hdac2, DAC2_CHANNEL_1) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4628      	mov	r0, r5
 8001114:	f008 f861 	bl	80091da <HAL_DAC_Start>
 8001118:	b108      	cbz	r0, 800111e <STM32_PLC_Analog_Output+0x36>
		Error_Handler();
 800111a:	f006 f947 	bl	80073ac <Error_Handler>
	hanalog1 = hdac1;
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <STM32_PLC_Analog_Output+0x48>)
 8001120:	601c      	str	r4, [r3, #0]
	hanalog2 = hdac2;
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <STM32_PLC_Analog_Output+0x4c>)
 8001124:	601d      	str	r5, [r3, #0]
}
 8001126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	STM32_PLC_Analog_Output_Reset();
 800112a:	f7ff bfcd 	b.w	80010c8 <STM32_PLC_Analog_Output_Reset>
 800112e:	bf00      	nop
 8001130:	2000042c 	.word	0x2000042c
 8001134:	20000430 	.word	0x20000430

08001138 <STM32_PLC_CAN>:
static void Create_CAN_Interrupt(CAN_HandleTypeDef *hcan);
static uint8_t rxData[8] = {0};
static uint32_t ID = 0;
static bool is_new_message;

void STM32_PLC_CAN(CAN_HandleTypeDef *hcan) {
 8001138:	b510      	push	{r4, lr}
	can_handler = hcan;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <STM32_PLC_CAN+0x54>)
void STM32_PLC_CAN(CAN_HandleTypeDef *hcan) {
 800113c:	b08a      	sub	sp, #40	; 0x28
	can_handler = hcan;
 800113e:	6018      	str	r0, [r3, #0]
			Error_Handler();
}

static void Create_CAN_Filter(CAN_HandleTypeDef *hcan) {
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001140:	2300      	movs	r3, #0
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001142:	2201      	movs	r2, #1
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001144:	e9cd 3305 	strd	r3, r3, [sp, #20]
	sFilterConfig.FilterIdHigh = 0x0000;
	sFilterConfig.FilterIdLow = 0x0000;
 8001148:	e9cd 3300 	strd	r3, r3, [sp]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800114c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001150:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8001152:	4669      	mov	r1, sp
	sFilterConfig.SlaveStartFilterBank = 14;
 8001154:	230e      	movs	r3, #14
void STM32_PLC_CAN(CAN_HandleTypeDef *hcan) {
 8001156:	4604      	mov	r4, r0
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001158:	9207      	str	r2, [sp, #28]
	sFilterConfig.FilterActivation = ENABLE;
 800115a:	9208      	str	r2, [sp, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800115c:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 800115e:	f007 fd32 	bl	8008bc6 <HAL_CAN_ConfigFilter>
 8001162:	b108      	cbz	r0, 8001168 <STM32_PLC_CAN+0x30>
		Error_Handler();
 8001164:	f006 f922 	bl	80073ac <Error_Handler>
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8001168:	4620      	mov	r0, r4
 800116a:	f007 fd9b 	bl	8008ca4 <HAL_CAN_Start>
 800116e:	b108      	cbz	r0, 8001174 <STM32_PLC_CAN+0x3c>
		Error_Handler();
 8001170:	f006 f91c 	bl	80073ac <Error_Handler>
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001174:	2102      	movs	r1, #2
 8001176:	4620      	mov	r0, r4
 8001178:	f007 fe89 	bl	8008e8e <HAL_CAN_ActivateNotification>
 800117c:	b120      	cbz	r0, 8001188 <STM32_PLC_CAN+0x50>
}
 800117e:	b00a      	add	sp, #40	; 0x28
 8001180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			Error_Handler();
 8001184:	f006 b912 	b.w	80073ac <Error_Handler>
}
 8001188:	b00a      	add	sp, #40	; 0x28
 800118a:	bd10      	pop	{r4, pc}
 800118c:	20000438 	.word	0x20000438

08001190 <STM32_PLC_CAN_Transmit>:
HAL_StatusTypeDef STM32_PLC_CAN_Transmit(uint8_t TxData[], CAN_TxHeaderTypeDef *TxHeader) {
 8001190:	b507      	push	{r0, r1, r2, lr}
 8001192:	4602      	mov	r2, r0
	return HAL_CAN_AddTxMessage(can_handler, TxHeader, TxData, &TxMailbox);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <STM32_PLC_CAN_Transmit+0x14>)
 8001196:	ab01      	add	r3, sp, #4
 8001198:	6800      	ldr	r0, [r0, #0]
 800119a:	f007 fdb1 	bl	8008d00 <HAL_CAN_AddTxMessage>
}
 800119e:	b003      	add	sp, #12
 80011a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a4:	20000438 	.word	0x20000438

080011a8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011a8:	b500      	push	{lr}
 80011aa:	b08d      	sub	sp, #52	; 0x34
	CAN_RxHeaderTypeDef rxHeader = {0};
 80011ac:	221c      	movs	r2, #28
 80011ae:	2100      	movs	r1, #0
 80011b0:	a805      	add	r0, sp, #20
 80011b2:	f00d fb33 	bl	800e81c <memset>
	if (HAL_CAN_GetRxMessage(can_handler, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80011ba:	6800      	ldr	r0, [r0, #0]
 80011bc:	aa05      	add	r2, sp, #20
 80011be:	2100      	movs	r1, #0
 80011c0:	f007 fdee 	bl	8008da0 <HAL_CAN_GetRxMessage>
 80011c4:	b108      	cbz	r0, 80011ca <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Error_Handler();
 80011c6:	f006 f8f1 	bl	80073ac <Error_Handler>
	uint8_t send_data_array[20] = {0};
 80011ca:	2100      	movs	r1, #0
 80011cc:	2210      	movs	r2, #16
 80011ce:	a801      	add	r0, sp, #4
 80011d0:	9100      	str	r1, [sp, #0]
 80011d2:	f00d fb23 	bl	800e81c <memset>
	ID = rxHeader.IDE == CAN_ID_STD ? rxHeader.StdId : rxHeader.ExtId;
 80011d6:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
	send_data_array[index++] = rxHeader.IDE;
 80011da:	9a07      	ldr	r2, [sp, #28]
 80011dc:	f88d 2001 	strb.w	r2, [sp, #1]
	ID = rxHeader.IDE == CAN_ID_STD ? rxHeader.StdId : rxHeader.ExtId;
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	bf18      	it	ne
 80011e4:	460b      	movne	r3, r1
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
	send_data_array[index++] = ID;
 80011e8:	f88d 3005 	strb.w	r3, [sp, #5]
	ID = rxHeader.IDE == CAN_ID_STD ? rxHeader.StdId : rxHeader.ExtId;
 80011ec:	6013      	str	r3, [r2, #0]
	send_data_array[index++] = ID >> 24;
 80011ee:	0e1a      	lsrs	r2, r3, #24
 80011f0:	f88d 2002 	strb.w	r2, [sp, #2]
	send_data_array[index++] = ID >> 16;
 80011f4:	0c1a      	lsrs	r2, r3, #16
 80011f6:	f88d 2003 	strb.w	r2, [sp, #3]
	send_data_array[index++] = ID >> 8;
 80011fa:	0a1a      	lsrs	r2, r3, #8
 80011fc:	f88d 2004 	strb.w	r2, [sp, #4]
		send_data_array[index++] = rxData[i];
 8001200:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
	send_data_array[index++] = rxHeader.DLC;
 8001202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001204:	f88d 3006 	strb.w	r3, [sp, #6]
		send_data_array[index++] = rxData[i];
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	f8cd 3007 	str.w	r3, [sp, #7]
	CDC_Transmit_FS(send_data_array, index);
 800120e:	210f      	movs	r1, #15
		send_data_array[index++] = rxData[i];
 8001210:	6853      	ldr	r3, [r2, #4]
 8001212:	f8cd 300b 	str.w	r3, [sp, #11]
	CDC_Transmit_FS(send_data_array, index);
 8001216:	4668      	mov	r0, sp
 8001218:	f00d f8d8 	bl	800e3cc <CDC_Transmit_FS>
	HAL_GPIO_TogglePin(LED_CAN_GPIO_Port, LED_CAN_Pin);
 800121c:	4807      	ldr	r0, [pc, #28]	; (800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800121e:	2110      	movs	r1, #16
 8001220:	f008 fadb 	bl	80097da <HAL_GPIO_TogglePin>
	is_new_message = true;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
}
 800122a:	b00d      	add	sp, #52	; 0x34
 800122c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001230:	20000438 	.word	0x20000438
 8001234:	2000043d 	.word	0x2000043d
 8001238:	20000434 	.word	0x20000434
 800123c:	48000800 	.word	0x48000800
 8001240:	2000043c 	.word	0x2000043c

08001244 <STM32_PLC_Digital_Input_Get>:
 *      Author: Daniel Mårtensson
 */

#include "Functions.h"

bool STM32_PLC_Digital_Input_Get(uint8_t i) {
 8001244:	b508      	push	{r3, lr}
	switch (i) {
 8001246:	2809      	cmp	r0, #9
 8001248:	d826      	bhi.n	8001298 <STM32_PLC_Digital_Input_Get+0x54>
 800124a:	e8df f000 	tbb	[pc, r0]
 800124e:	0d05      	.short	0x0d05
 8001250:	1513110f 	.word	0x1513110f
 8001254:	221e1c19 	.word	0x221e1c19
	case 0:
		return HAL_GPIO_ReadPin(DI0_GPIO_Port, DI0_Pin);
 8001258:	2104      	movs	r1, #4
	case 1:
		return HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <STM32_PLC_Digital_Input_Get+0x58>)
	case 7:
		return HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
	case 8:
		return HAL_GPIO_ReadPin(DI8_GPIO_Port, DI8_Pin);
	case 9:
		return HAL_GPIO_ReadPin(DI9_GPIO_Port, DI9_Pin);
 800125c:	f008 fab2 	bl	80097c4 <HAL_GPIO_ReadPin>
 8001260:	3800      	subs	r0, #0
 8001262:	bf18      	it	ne
 8001264:	2001      	movne	r0, #1
	default:
		return 0;
	}
}
 8001266:	bd08      	pop	{r3, pc}
		return HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8001268:	2108      	movs	r1, #8
 800126a:	e7f6      	b.n	800125a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 800126c:	2110      	movs	r1, #16
 800126e:	e7f4      	b.n	800125a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 8001270:	2120      	movs	r1, #32
 8001272:	e7f2      	b.n	800125a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI4_GPIO_Port, DI4_Pin);
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	e7f0      	b.n	800125a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI5_GPIO_Port, DI5_Pin);
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <STM32_PLC_Digital_Input_Get+0x5c>)
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	e7ed      	b.n	800125c <STM32_PLC_Digital_Input_Get+0x18>
		return HAL_GPIO_ReadPin(DI6_GPIO_Port, DI6_Pin);
 8001280:	2120      	movs	r1, #32
		return HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <STM32_PLC_Digital_Input_Get+0x60>)
 8001284:	e7ea      	b.n	800125c <STM32_PLC_Digital_Input_Get+0x18>
 8001286:	2110      	movs	r1, #16
 8001288:	e7fb      	b.n	8001282 <STM32_PLC_Digital_Input_Get+0x3e>
		return HAL_GPIO_ReadPin(DI8_GPIO_Port, DI8_Pin);
 800128a:	f44f 7100 	mov.w	r1, #512	; 0x200
		return HAL_GPIO_ReadPin(DI9_GPIO_Port, DI9_Pin);
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <STM32_PLC_Digital_Input_Get+0x64>)
 8001290:	e7e4      	b.n	800125c <STM32_PLC_Digital_Input_Get+0x18>
 8001292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001296:	e7fa      	b.n	800128e <STM32_PLC_Digital_Input_Get+0x4a>
	switch (i) {
 8001298:	2000      	movs	r0, #0
 800129a:	e7e4      	b.n	8001266 <STM32_PLC_Digital_Input_Get+0x22>
 800129c:	48001000 	.word	0x48001000
 80012a0:	48000800 	.word	0x48000800
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48001400 	.word	0x48001400

080012ac <STM32_PLC_Encoder>:
static TIM_HandleTypeDef* tim4_handle;
static TIM_HandleTypeDef* tim19_handle;
static TIM_HandleTypeDef* tim3_handle;
static uint16_t pulses_list[3] = {1};

void STM32_PLC_Encoder(TIM_HandleTypeDef* htim4, TIM_HandleTypeDef* htim19, TIM_HandleTypeDef* htim3) {
 80012ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012ae:	460d      	mov	r5, r1
	/* Encoder - Prescaler does not effect encoder */
	if(HAL_TIM_Encoder_Start(htim4, TIM_CHANNEL_ALL) != HAL_OK)
 80012b0:	213c      	movs	r1, #60	; 0x3c
void STM32_PLC_Encoder(TIM_HandleTypeDef* htim4, TIM_HandleTypeDef* htim19, TIM_HandleTypeDef* htim3) {
 80012b2:	4606      	mov	r6, r0
 80012b4:	4614      	mov	r4, r2
	if(HAL_TIM_Encoder_Start(htim4, TIM_CHANNEL_ALL) != HAL_OK)
 80012b6:	f00a feba 	bl	800c02e <HAL_TIM_Encoder_Start>
 80012ba:	b108      	cbz	r0, 80012c0 <STM32_PLC_Encoder+0x14>
		Error_Handler();
 80012bc:	f006 f876 	bl	80073ac <Error_Handler>
	if(HAL_TIM_Encoder_Start(htim19, TIM_CHANNEL_ALL) != HAL_OK)
 80012c0:	213c      	movs	r1, #60	; 0x3c
 80012c2:	4628      	mov	r0, r5
 80012c4:	f00a feb3 	bl	800c02e <HAL_TIM_Encoder_Start>
 80012c8:	b108      	cbz	r0, 80012ce <STM32_PLC_Encoder+0x22>
		Error_Handler();
 80012ca:	f006 f86f 	bl	80073ac <Error_Handler>
	if(HAL_TIM_Encoder_Start(htim3, TIM_CHANNEL_ALL) != HAL_OK)
 80012ce:	213c      	movs	r1, #60	; 0x3c
 80012d0:	4620      	mov	r0, r4
 80012d2:	f00a feac 	bl	800c02e <HAL_TIM_Encoder_Start>
 80012d6:	b108      	cbz	r0, 80012dc <STM32_PLC_Encoder+0x30>
			Error_Handler();
 80012d8:	f006 f868 	bl	80073ac <Error_Handler>

	/* Save */
	tim4_handle = htim4;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <STM32_PLC_Encoder+0x5c>)
 80012de:	601e      	str	r6, [r3, #0]
	tim19_handle = htim19;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <STM32_PLC_Encoder+0x60>)
 80012e2:	601d      	str	r5, [r3, #0]
	tim3_handle = htim3;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <STM32_PLC_Encoder+0x64>)
 80012e6:	4d0b      	ldr	r5, [pc, #44]	; (8001314 <STM32_PLC_Encoder+0x68>)
 80012e8:	601c      	str	r4, [r3, #0]
 80012ea:	2400      	movs	r4, #0

	/* Get calibration */
	uint16_t pulses;
	for(uint8_t i = 0; i < 3; i++){
		STM32_PLC_Flash_Get_Encoder_Pulses(i, &pulses);
 80012ec:	b2e0      	uxtb	r0, r4
 80012ee:	f10d 0106 	add.w	r1, sp, #6
	for(uint8_t i = 0; i < 3; i++){
 80012f2:	3401      	adds	r4, #1
		STM32_PLC_Flash_Get_Encoder_Pulses(i, &pulses);
 80012f4:	f000 fa42 	bl	800177c <STM32_PLC_Flash_Get_Encoder_Pulses>
float STM32_PLC_Encoder_Get_Calibrated(uint8_t i){
	return (float)(STM32_PLC_Encoder_Get_Raw(i))/((float)pulses_list[i]);
}

void STM32_PLC_Encoder_Set_Calibration(uint8_t pulses_index, uint16_t pulses, bool save_to_flash){
	pulses_list[pulses_index] = pulses;
 80012f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80012fc:	f825 3b02 	strh.w	r3, [r5], #2
	for(uint8_t i = 0; i < 3; i++){
 8001300:	2c03      	cmp	r4, #3
 8001302:	d1f3      	bne.n	80012ec <STM32_PLC_Encoder+0x40>
}
 8001304:	b002      	add	sp, #8
 8001306:	bd70      	pop	{r4, r5, r6, pc}
 8001308:	20000450 	.word	0x20000450
 800130c:	20000448 	.word	0x20000448
 8001310:	2000044c 	.word	0x2000044c
 8001314:	20000000 	.word	0x20000000

08001318 <STM32_PLC_Encoder_Get_Raw>:
	switch(i){
 8001318:	2801      	cmp	r0, #1
 800131a:	d008      	beq.n	800132e <STM32_PLC_Encoder_Get_Raw+0x16>
 800131c:	2802      	cmp	r0, #2
 800131e:	d008      	beq.n	8001332 <STM32_PLC_Encoder_Get_Raw+0x1a>
 8001320:	b948      	cbnz	r0, 8001336 <STM32_PLC_Encoder_Get_Raw+0x1e>
		return __HAL_TIM_GET_COUNTER(tim4_handle);
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <STM32_PLC_Encoder_Get_Raw+0x24>)
		return __HAL_TIM_GET_COUNTER(tim19_handle);
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800132a:	b200      	sxth	r0, r0
 800132c:	4770      	bx	lr
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <STM32_PLC_Encoder_Get_Raw+0x28>)
 8001330:	e7f8      	b.n	8001324 <STM32_PLC_Encoder_Get_Raw+0xc>
		return __HAL_TIM_GET_COUNTER(tim3_handle);
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <STM32_PLC_Encoder_Get_Raw+0x2c>)
 8001334:	e7f6      	b.n	8001324 <STM32_PLC_Encoder_Get_Raw+0xc>
	switch(i){
 8001336:	2000      	movs	r0, #0
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000450 	.word	0x20000450
 8001340:	20000448 	.word	0x20000448
 8001344:	2000044c 	.word	0x2000044c

08001348 <STM32_PLC_Encoder_Get_Calibrated>:
float STM32_PLC_Encoder_Get_Calibrated(uint8_t i){
 8001348:	b508      	push	{r3, lr}
 800134a:	4602      	mov	r2, r0
	return (float)(STM32_PLC_Encoder_Get_Raw(i))/((float)pulses_list[i]);
 800134c:	f7ff ffe4 	bl	8001318 <STM32_PLC_Encoder_Get_Raw>
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <STM32_PLC_Encoder_Get_Calibrated+0x24>)
 8001352:	ee07 0a90 	vmov	s15, r0
 8001356:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800135a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001366:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800136a:	bd08      	pop	{r3, pc}
 800136c:	20000000 	.word	0x20000000

08001370 <STM32_PLC_Encoder_Set_Calibration>:
	pulses_list[pulses_index] = pulses;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <STM32_PLC_Encoder_Set_Calibration+0x10>)
 8001372:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
	if(save_to_flash)
 8001376:	b10a      	cbz	r2, 800137c <STM32_PLC_Encoder_Set_Calibration+0xc>
		STM32_PLC_Flash_Set_Encoder_Pulses(pulses_index, pulses);
 8001378:	f000 b90a 	b.w	8001590 <STM32_PLC_Flash_Set_Encoder_Pulses>
}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000

08001384 <STM32_PLC_Encoder_Get_Calibration>:

void STM32_PLC_Encoder_Get_Calibration(uint8_t pulses_index, uint16_t *pulses){
	STM32_PLC_Flash_Get_Encoder_Pulses(pulses_index, pulses);
 8001384:	f000 b9fa 	b.w	800177c <STM32_PLC_Flash_Get_Encoder_Pulses>

08001388 <read_flash.constprop.0>:
	*pulses = data[89 + pulses_index];
}


static void read_flash(uint16_t data[], uint8_t length){
	uint32_t address = ADDR_FLASH_PAGE_127;
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <read_flash.constprop.0+0x14>)
	for(uint8_t i = 0; i < length; i++){
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <read_flash.constprop.0+0x18>)
 800138c:	3802      	subs	r0, #2
		data[i] = *(__IO uint16_t*)address;
 800138e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001392:	f820 1f02 	strh.w	r1, [r0, #2]!
	for(uint8_t i = 0; i < length; i++){
 8001396:	4293      	cmp	r3, r2
 8001398:	d1f9      	bne.n	800138e <read_flash.constprop.0+0x6>
		address += 2;
	}
}
 800139a:	4770      	bx	lr
 800139c:	0803f800 	.word	0x0803f800
 80013a0:	0803f8b8 	.word	0x0803f8b8

080013a4 <write_flash>:

static void write_flash(uint16_t value, uint8_t overwrite_index){
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	b0b2      	sub	sp, #200	; 0xc8
 80013a8:	4605      	mov	r5, r0

	/* Create the data */
	uint16_t data[FLASH_LENGTH_DATA];
	read_flash(data, FLASH_LENGTH_DATA);
 80013aa:	a804      	add	r0, sp, #16
static void write_flash(uint16_t value, uint8_t overwrite_index){
 80013ac:	460c      	mov	r4, r1
	read_flash(data, FLASH_LENGTH_DATA);
 80013ae:	f7ff ffeb 	bl	8001388 <read_flash.constprop.0>

	/* Overwrite */
	data[overwrite_index] = value;
 80013b2:	ab32      	add	r3, sp, #200	; 0xc8
 80013b4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80013b8:	f824 5cb8 	strh.w	r5, [r4, #-184]

	/* Unlock */
	HAL_FLASH_Unlock();
 80013bc:	f008 f83a 	bl	8009434 <HAL_FLASH_Unlock>

	/* Erase */
	FLASH_EraseInitTypeDef eraseInitStruct;
	eraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
	eraseInitStruct.PageAddress = ADDR_FLASH_PAGE_127;
 80013c0:	4a10      	ldr	r2, [pc, #64]	; (8001404 <write_flash+0x60>)
 80013c2:	2300      	movs	r3, #0
 80013c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
	eraseInitStruct.NbPages     = 1;
	uint32_t PageError = 0;
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK)
 80013c8:	4669      	mov	r1, sp
	eraseInitStruct.NbPages     = 1;
 80013ca:	2201      	movs	r2, #1
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK)
 80013cc:	a801      	add	r0, sp, #4
	eraseInitStruct.NbPages     = 1;
 80013ce:	9203      	str	r2, [sp, #12]
	uint32_t PageError = 0;
 80013d0:	9300      	str	r3, [sp, #0]
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK)
 80013d2:	f008 f8e5 	bl	80095a0 <HAL_FLASHEx_Erase>
 80013d6:	b108      	cbz	r0, 80013dc <write_flash+0x38>
		Error_Handler();
 80013d8:	f005 ffe8 	bl	80073ac <Error_Handler>
static void write_flash(uint16_t value, uint8_t overwrite_index){
 80013dc:	4d09      	ldr	r5, [pc, #36]	; (8001404 <write_flash+0x60>)

	/* Write data */
	uint32_t index = 0;
	for(uint8_t i = 0; i < FLASH_LENGTH_DATA; i++){
 80013de:	4e0a      	ldr	r6, [pc, #40]	; (8001408 <write_flash+0x64>)
 80013e0:	ac04      	add	r4, sp, #16
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ADDR_FLASH_PAGE_127 + index, data[i]) != HAL_OK)
 80013e2:	f834 2b02 	ldrh.w	r2, [r4], #2
 80013e6:	2300      	movs	r3, #0
 80013e8:	4629      	mov	r1, r5
 80013ea:	2001      	movs	r0, #1
 80013ec:	f008 f864 	bl	80094b8 <HAL_FLASH_Program>
 80013f0:	b108      	cbz	r0, 80013f6 <write_flash+0x52>
			Error_Handler();
 80013f2:	f005 ffdb 	bl	80073ac <Error_Handler>
	for(uint8_t i = 0; i < FLASH_LENGTH_DATA; i++){
 80013f6:	3502      	adds	r5, #2
 80013f8:	42b5      	cmp	r5, r6
 80013fa:	d1f2      	bne.n	80013e2 <write_flash+0x3e>
		index += 2;
	}

	/* Lock */
	HAL_FLASH_Lock();
 80013fc:	f008 f82c 	bl	8009458 <HAL_FLASH_Lock>
}
 8001400:	b032      	add	sp, #200	; 0xc8
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	0803f800 	.word	0x0803f800
 8001408:	0803f8b8 	.word	0x0803f8b8

0800140c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0>:
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0(uint8_t sdadc, uint8_t gain){
 800140c:	4603      	mov	r3, r0
	switch(sdadc){
 800140e:	2b02      	cmp	r3, #2
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0(uint8_t sdadc, uint8_t gain){
 8001410:	4608      	mov	r0, r1
	switch(sdadc){
 8001412:	d006      	beq.n	8001422 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x16>
 8001414:	2b03      	cmp	r3, #3
 8001416:	d006      	beq.n	8001426 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x1a>
 8001418:	2b01      	cmp	r3, #1
 800141a:	d106      	bne.n	800142a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x1e>
		write_flash(gain, 0);
 800141c:	2100      	movs	r1, #0
		write_flash(gain, 6);
 800141e:	f7ff bfc1 	b.w	80013a4 <write_flash>
		write_flash(gain, 3);
 8001422:	2103      	movs	r1, #3
 8001424:	e7fb      	b.n	800141e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x12>
		write_flash(gain, 6);
 8001426:	2106      	movs	r1, #6
 8001428:	e7f9      	b.n	800141e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x12>
}
 800142a:	4770      	bx	lr

0800142c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1>:
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1(uint8_t sdadc, uint8_t gain){
 800142c:	4603      	mov	r3, r0
	switch(sdadc){
 800142e:	2b02      	cmp	r3, #2
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1(uint8_t sdadc, uint8_t gain){
 8001430:	4608      	mov	r0, r1
	switch(sdadc){
 8001432:	d006      	beq.n	8001442 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x16>
 8001434:	2b03      	cmp	r3, #3
 8001436:	d006      	beq.n	8001446 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x1a>
 8001438:	2b01      	cmp	r3, #1
 800143a:	d106      	bne.n	800144a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x1e>
		write_flash(gain, 1);
 800143c:	4619      	mov	r1, r3
		write_flash(gain, 7);
 800143e:	f7ff bfb1 	b.w	80013a4 <write_flash>
		write_flash(gain, 4);
 8001442:	2104      	movs	r1, #4
 8001444:	e7fb      	b.n	800143e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x12>
		write_flash(gain, 7);
 8001446:	2107      	movs	r1, #7
 8001448:	e7f9      	b.n	800143e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x12>
}
 800144a:	4770      	bx	lr

0800144c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2>:
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(uint8_t sdadc, uint8_t gain){
 800144c:	4603      	mov	r3, r0
	switch(sdadc){
 800144e:	2b02      	cmp	r3, #2
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(uint8_t sdadc, uint8_t gain){
 8001450:	4608      	mov	r0, r1
	switch(sdadc){
 8001452:	d006      	beq.n	8001462 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x16>
 8001454:	2b03      	cmp	r3, #3
 8001456:	d006      	beq.n	8001466 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x1a>
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x1e>
		write_flash(gain, 2);
 800145c:	2102      	movs	r1, #2
		write_flash(gain, 8);
 800145e:	f7ff bfa1 	b.w	80013a4 <write_flash>
		write_flash(gain, 5);
 8001462:	2105      	movs	r1, #5
 8001464:	e7fb      	b.n	800145e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x12>
		write_flash(gain, 8);
 8001466:	2108      	movs	r1, #8
 8001468:	e7f9      	b.n	800145e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x12>
}
 800146a:	4770      	bx	lr

0800146c <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_0_3>:
	write_flash(prescaler, 9);
 800146c:	2109      	movs	r1, #9
 800146e:	f7ff bf99 	b.w	80013a4 <write_flash>

08001472 <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_4_7>:
	write_flash(prescaler, 10);
 8001472:	210a      	movs	r1, #10
 8001474:	f7ff bf96 	b.w	80013a4 <write_flash>

08001478 <STM32_PLC_Flash_Set_Alarm_Enable>:
void STM32_PLC_Flash_Set_Alarm_Enable(bool alarm_A_enabled, bool alarm_B_enabled){
 8001478:	460b      	mov	r3, r1
	write_flash(enables, 11);
 800147a:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
 800147e:	210b      	movs	r1, #11
 8001480:	f7ff bf90 	b.w	80013a4 <write_flash>

08001484 <STM32_PLC_Flash_Set_LCD_Calibration>:
void STM32_PLC_Flash_Set_LCD_Calibration(float Scale_X, float Scale_Y, float Bias_X, float Bias_Y){
 8001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001486:	ee10 3a10 	vmov	r3, s0
	float_converter.float_number = Scale_X;
 800148a:	4f23      	ldr	r7, [pc, #140]	; (8001518 <STM32_PLC_Flash_Set_LCD_Calibration+0x94>)
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 12);
 800148c:	b2d8      	uxtb	r0, r3
 800148e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001492:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001496:	210c      	movs	r1, #12
void STM32_PLC_Flash_Set_LCD_Calibration(float Scale_X, float Scale_Y, float Bias_X, float Bias_Y){
 8001498:	ee10 6a90 	vmov	r6, s1
 800149c:	ee11 5a10 	vmov	r5, s2
 80014a0:	ee11 4a90 	vmov	r4, s3
	float_converter.float_number = Scale_X;
 80014a4:	ed87 0a00 	vstr	s0, [r7]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 12);
 80014a8:	f7ff ff7c 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 13);
 80014ac:	8878      	ldrh	r0, [r7, #2]
 80014ae:	ba40      	rev16	r0, r0
 80014b0:	210d      	movs	r1, #13
 80014b2:	b280      	uxth	r0, r0
 80014b4:	f7ff ff76 	bl	80013a4 <write_flash>
	float_converter.float_number = Scale_Y;
 80014b8:	603e      	str	r6, [r7, #0]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 14);
 80014ba:	b2f0      	uxtb	r0, r6
 80014bc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80014c0:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
 80014c4:	210e      	movs	r1, #14
 80014c6:	f7ff ff6d 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 15);
 80014ca:	8878      	ldrh	r0, [r7, #2]
 80014cc:	ba40      	rev16	r0, r0
 80014ce:	210f      	movs	r1, #15
 80014d0:	b280      	uxth	r0, r0
 80014d2:	f7ff ff67 	bl	80013a4 <write_flash>
	float_converter.float_number = Bias_X;
 80014d6:	603d      	str	r5, [r7, #0]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 16);
 80014d8:	b2e8      	uxtb	r0, r5
 80014da:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80014de:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80014e2:	2110      	movs	r1, #16
 80014e4:	f7ff ff5e 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 17);
 80014e8:	8878      	ldrh	r0, [r7, #2]
 80014ea:	ba40      	rev16	r0, r0
 80014ec:	2111      	movs	r1, #17
 80014ee:	b280      	uxth	r0, r0
 80014f0:	f7ff ff58 	bl	80013a4 <write_flash>
	float_converter.float_number = Bias_Y;
 80014f4:	603c      	str	r4, [r7, #0]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 18);
 80014f6:	b2e0      	uxtb	r0, r4
 80014f8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80014fc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
 8001500:	2112      	movs	r1, #18
 8001502:	f7ff ff4f 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 19);
 8001506:	8878      	ldrh	r0, [r7, #2]
 8001508:	ba40      	rev16	r0, r0
}
 800150a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 19);
 800150e:	2113      	movs	r1, #19
 8001510:	b280      	uxth	r0, r0
 8001512:	f7ff bf47 	b.w	80013a4 <write_flash>
 8001516:	bf00      	nop
 8001518:	20000454 	.word	0x20000454

0800151c <STM32_PLC_Flash_Set_J1939_This_ECU_Address>:
	write_flash(this_ECU_address, 20);
 800151c:	2114      	movs	r1, #20
 800151e:	f7ff bf41 	b.w	80013a4 <write_flash>
	...

08001524 <STM32_PLC_Flash_Set_Analog_Input_Calibration>:
void STM32_PLC_Flash_Set_Analog_Input_Calibration(uint8_t input_index, float scalar, float bias){
 8001524:	ee10 3a10 	vmov	r3, s0
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 21 + 2*input_index);
 8001528:	0040      	lsls	r0, r0, #1
void STM32_PLC_Flash_Set_Analog_Input_Calibration(uint8_t input_index, float scalar, float bias){
 800152a:	b570      	push	{r4, r5, r6, lr}
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 21 + 2*input_index);
 800152c:	b2c4      	uxtb	r4, r0
	float_converter.float_number = scalar;
 800152e:	4e17      	ldr	r6, [pc, #92]	; (800158c <STM32_PLC_Flash_Set_Analog_Input_Calibration+0x68>)
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 21 + 2*input_index);
 8001530:	f104 0115 	add.w	r1, r4, #21
 8001534:	b2d8      	uxtb	r0, r3
 8001536:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800153a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800153e:	b2c9      	uxtb	r1, r1
void STM32_PLC_Flash_Set_Analog_Input_Calibration(uint8_t input_index, float scalar, float bias){
 8001540:	ee10 5a90 	vmov	r5, s1
	float_converter.float_number = scalar;
 8001544:	ed86 0a00 	vstr	s0, [r6]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 21 + 2*input_index);
 8001548:	f7ff ff2c 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 22 + 2*input_index);
 800154c:	8870      	ldrh	r0, [r6, #2]
 800154e:	f104 0116 	add.w	r1, r4, #22
 8001552:	ba40      	rev16	r0, r0
 8001554:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001558:	b280      	uxth	r0, r0
 800155a:	f7ff ff23 	bl	80013a4 <write_flash>
	float_converter.float_number = bias;
 800155e:	6035      	str	r5, [r6, #0]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 55 + 2*input_index);
 8001560:	f104 0137 	add.w	r1, r4, #55	; 0x37
 8001564:	b2e8      	uxtb	r0, r5
 8001566:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800156a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 800156e:	b2c9      	uxtb	r1, r1
 8001570:	f7ff ff18 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 56 + 2*input_index);
 8001574:	8870      	ldrh	r0, [r6, #2]
 8001576:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800157a:	ba40      	rev16	r0, r0
}
 800157c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 56 + 2*input_index);
 8001580:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001584:	b280      	uxth	r0, r0
 8001586:	f7ff bf0d 	b.w	80013a4 <write_flash>
 800158a:	bf00      	nop
 800158c:	20000454 	.word	0x20000454

08001590 <STM32_PLC_Flash_Set_Encoder_Pulses>:
void STM32_PLC_Flash_Set_Encoder_Pulses(uint8_t pulses_index, uint16_t pulses){
 8001590:	460b      	mov	r3, r1
	write_flash(pulses, 89 + pulses_index);
 8001592:	f100 0159 	add.w	r1, r0, #89	; 0x59
 8001596:	b2c9      	uxtb	r1, r1
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff bf03 	b.w	80013a4 <write_flash>

0800159e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>:
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 800159e:	b570      	push	{r4, r5, r6, lr}
 80015a0:	b0ae      	sub	sp, #184	; 0xb8
 80015a2:	4606      	mov	r6, r0
	read_flash(data, FLASH_LENGTH_DATA);
 80015a4:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80015a6:	460d      	mov	r5, r1
 80015a8:	4614      	mov	r4, r2
	read_flash(data, FLASH_LENGTH_DATA);
 80015aa:	f7ff feed 	bl	8001388 <read_flash.constprop.0>
	*gain_for_configuration_index_0 = data[0] <= 0x7 ? data[0] : 1;
 80015ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	bf28      	it	cs
 80015b6:	2301      	movcs	r3, #1
 80015b8:	7033      	strb	r3, [r6, #0]
	*gain_for_configuration_index_1 = data[1] <= 0x7 ? data[1] : 1;
 80015ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	bf28      	it	cs
 80015c2:	2301      	movcs	r3, #1
 80015c4:	702b      	strb	r3, [r5, #0]
	*gain_for_configuration_index_2 = data[2] <= 0x7 ? data[2] : 1;
 80015c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	bf28      	it	cs
 80015ce:	2301      	movcs	r3, #1
 80015d0:	7023      	strb	r3, [r4, #0]
}
 80015d2:	b02e      	add	sp, #184	; 0xb8
 80015d4:	bd70      	pop	{r4, r5, r6, pc}

080015d6 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>:
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80015d6:	b570      	push	{r4, r5, r6, lr}
 80015d8:	b0ae      	sub	sp, #184	; 0xb8
 80015da:	4606      	mov	r6, r0
	read_flash(data, FLASH_LENGTH_DATA);
 80015dc:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80015de:	460d      	mov	r5, r1
 80015e0:	4614      	mov	r4, r2
	read_flash(data, FLASH_LENGTH_DATA);
 80015e2:	f7ff fed1 	bl	8001388 <read_flash.constprop.0>
	*gain_for_configuration_index_0 = data[3] <= 0x7 ? data[3] : 1;
 80015e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	bf28      	it	cs
 80015ee:	2301      	movcs	r3, #1
 80015f0:	7033      	strb	r3, [r6, #0]
	*gain_for_configuration_index_1 = data[4] <= 0x7 ? data[4] : 1;
 80015f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	bf28      	it	cs
 80015fa:	2301      	movcs	r3, #1
 80015fc:	702b      	strb	r3, [r5, #0]
	*gain_for_configuration_index_2 = data[5] <= 0x7 ? data[5] : 1;
 80015fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001602:	2b08      	cmp	r3, #8
 8001604:	bf28      	it	cs
 8001606:	2301      	movcs	r3, #1
 8001608:	7023      	strb	r3, [r4, #0]
}
 800160a:	b02e      	add	sp, #184	; 0xb8
 800160c:	bd70      	pop	{r4, r5, r6, pc}

0800160e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>:
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 800160e:	b570      	push	{r4, r5, r6, lr}
 8001610:	b0ae      	sub	sp, #184	; 0xb8
 8001612:	4606      	mov	r6, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001614:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 8001616:	460d      	mov	r5, r1
 8001618:	4614      	mov	r4, r2
	read_flash(data, FLASH_LENGTH_DATA);
 800161a:	f7ff feb5 	bl	8001388 <read_flash.constprop.0>
	*gain_for_configuration_index_0 = data[6] <= 0x7 ? data[6] : 1;
 800161e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001622:	2b08      	cmp	r3, #8
 8001624:	bf28      	it	cs
 8001626:	2301      	movcs	r3, #1
 8001628:	7033      	strb	r3, [r6, #0]
	*gain_for_configuration_index_1 = data[7] <= 0x7 ? data[7] : 1;
 800162a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800162e:	2b08      	cmp	r3, #8
 8001630:	bf28      	it	cs
 8001632:	2301      	movcs	r3, #1
 8001634:	702b      	strb	r3, [r5, #0]
	*gain_for_configuration_index_2 = data[8] <= 0x7 ? data[8] : 1;
 8001636:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800163a:	2b08      	cmp	r3, #8
 800163c:	bf28      	it	cs
 800163e:	2301      	movcs	r3, #1
 8001640:	7023      	strb	r3, [r4, #0]
}
 8001642:	b02e      	add	sp, #184	; 0xb8
 8001644:	bd70      	pop	{r4, r5, r6, pc}

08001646 <STM32_PLC_Flash_Get_PWM_Prescalers>:
void STM32_PLC_Flash_Get_PWM_Prescalers(uint16_t *prescaler_for_PWM_0_3, uint16_t *prescaler_for_PWM_4_7){
 8001646:	b530      	push	{r4, r5, lr}
 8001648:	b0af      	sub	sp, #188	; 0xbc
 800164a:	4605      	mov	r5, r0
	read_flash(data, FLASH_LENGTH_DATA);
 800164c:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_PWM_Prescalers(uint16_t *prescaler_for_PWM_0_3, uint16_t *prescaler_for_PWM_4_7){
 800164e:	460c      	mov	r4, r1
	read_flash(data, FLASH_LENGTH_DATA);
 8001650:	f7ff fe9a 	bl	8001388 <read_flash.constprop.0>
	*prescaler_for_PWM_0_3 = data[9] <= 0xFFFF ? data[9] : 0xFFFF;
 8001654:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8001658:	802b      	strh	r3, [r5, #0]
	*prescaler_for_PWM_4_7 = data[10] <= 0xFFFF ? data[10] : 0xFFFF;
 800165a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800165e:	8023      	strh	r3, [r4, #0]
}
 8001660:	b02f      	add	sp, #188	; 0xbc
 8001662:	bd30      	pop	{r4, r5, pc}

08001664 <STM32_PLC_Flash_Get_Alarm_Enables>:
void STM32_PLC_Flash_Get_Alarm_Enables(bool *alarm_A_enabled, bool *alarm_B_enabled){
 8001664:	b530      	push	{r4, r5, lr}
 8001666:	b0af      	sub	sp, #188	; 0xbc
 8001668:	4605      	mov	r5, r0
	read_flash(data, FLASH_LENGTH_DATA);
 800166a:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_Alarm_Enables(bool *alarm_A_enabled, bool *alarm_B_enabled){
 800166c:	460c      	mov	r4, r1
	read_flash(data, FLASH_LENGTH_DATA);
 800166e:	f7ff fe8b 	bl	8001388 <read_flash.constprop.0>
	uint8_t enables = data[11] <= 0x3 ? data[11] : 0x0;
 8001672:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2300      	movcs	r3, #0
	*alarm_A_enabled = enables >> 1;
 800167c:	f3c3 0240 	ubfx	r2, r3, #1, #1
	*alarm_B_enabled = enables & 0b1;
 8001680:	f003 0301 	and.w	r3, r3, #1
	*alarm_A_enabled = enables >> 1;
 8001684:	702a      	strb	r2, [r5, #0]
	*alarm_B_enabled = enables & 0b1;
 8001686:	7023      	strb	r3, [r4, #0]
}
 8001688:	b02f      	add	sp, #188	; 0xbc
 800168a:	bd30      	pop	{r4, r5, pc}

0800168c <STM32_PLC_Flash_Get_LCD_Calibration>:
void STM32_PLC_Flash_Get_LCD_Calibration(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y){
 800168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001690:	b0ae      	sub	sp, #184	; 0xb8
 8001692:	4680      	mov	r8, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001694:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_LCD_Calibration(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y){
 8001696:	461d      	mov	r5, r3
 8001698:	460f      	mov	r7, r1
 800169a:	4616      	mov	r6, r2
	read_flash(data, FLASH_LENGTH_DATA);
 800169c:	f7ff fe74 	bl	8001388 <read_flash.constprop.0>
	float_converter.bytes[0] = data[12] >> 8;
 80016a0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80016a4:	4c15      	ldr	r4, [pc, #84]	; (80016fc <STM32_PLC_Flash_Get_LCD_Calibration+0x70>)
 80016a6:	ba5b      	rev16	r3, r3
 80016a8:	8023      	strh	r3, [r4, #0]
	float_converter.bytes[2] = data[13] >> 8;
 80016aa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80016ae:	ba5b      	rev16	r3, r3
 80016b0:	8063      	strh	r3, [r4, #2]
	*Scale_X = float_converter.float_number;
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f8c8 3000 	str.w	r3, [r8]
	float_converter.bytes[0] = data[14] >> 8;
 80016b8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80016bc:	ba5b      	rev16	r3, r3
 80016be:	8023      	strh	r3, [r4, #0]
	float_converter.bytes[2] = data[15] >> 8;
 80016c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80016c4:	ba5b      	rev16	r3, r3
 80016c6:	8063      	strh	r3, [r4, #2]
	*Scale_Y = float_converter.float_number;
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	603b      	str	r3, [r7, #0]
	float_converter.bytes[0] = data[16] >> 8;
 80016cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80016d0:	ba5b      	rev16	r3, r3
 80016d2:	8023      	strh	r3, [r4, #0]
	float_converter.bytes[2] = data[17] >> 8;
 80016d4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80016d8:	ba5b      	rev16	r3, r3
 80016da:	8063      	strh	r3, [r4, #2]
	*Bias_X = float_converter.float_number;
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	6033      	str	r3, [r6, #0]
	float_converter.bytes[0] = data[18] >> 8;
 80016e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80016e4:	ba5b      	rev16	r3, r3
 80016e6:	8023      	strh	r3, [r4, #0]
	float_converter.bytes[2] = data[19] >> 8;
 80016e8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80016ec:	ba5b      	rev16	r3, r3
 80016ee:	8063      	strh	r3, [r4, #2]
	*Bias_Y = float_converter.float_number;
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	602b      	str	r3, [r5, #0]
}
 80016f4:	b02e      	add	sp, #184	; 0xb8
 80016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016fa:	bf00      	nop
 80016fc:	20000454 	.word	0x20000454

08001700 <STM32_PLC_Flash_Get_J1939_This_ECU_Address>:
void STM32_PLC_Flash_Get_J1939_This_ECU_Address(uint8_t *this_ECU_address){
 8001700:	b510      	push	{r4, lr}
 8001702:	b0ae      	sub	sp, #184	; 0xb8
 8001704:	4604      	mov	r4, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001706:	4668      	mov	r0, sp
 8001708:	f7ff fe3e 	bl	8001388 <read_flash.constprop.0>
	*this_ECU_address = data[20] <= 0xFF ? data[20] : 0x0;
 800170c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	bf28      	it	cs
 8001716:	2300      	movcs	r3, #0
 8001718:	7023      	strb	r3, [r4, #0]
}
 800171a:	b02e      	add	sp, #184	; 0xb8
 800171c:	bd10      	pop	{r4, pc}
	...

08001720 <STM32_PLC_Flash_Get_Analog_Input_Calibration>:
void STM32_PLC_Flash_Get_Analog_Input_Calibration(uint8_t input_index, float *scalar, float *bias){
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	b0ae      	sub	sp, #184	; 0xb8
 8001724:	4604      	mov	r4, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001726:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_Analog_Input_Calibration(uint8_t input_index, float *scalar, float *bias){
 8001728:	4615      	mov	r5, r2
 800172a:	460e      	mov	r6, r1
	read_flash(data, FLASH_LENGTH_DATA);
 800172c:	f7ff fe2c 	bl	8001388 <read_flash.constprop.0>
	float_converter.bytes[0] = data[21+2*input_index] >> 8;
 8001730:	aa2e      	add	r2, sp, #184	; 0xb8
 8001732:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <STM32_PLC_Flash_Get_Analog_Input_Calibration+0x58>)
 8001738:	f832 2c8e 	ldrh.w	r2, [r2, #-142]
 800173c:	ba52      	rev16	r2, r2
 800173e:	801a      	strh	r2, [r3, #0]
	float_converter.bytes[2] = data[22+2*input_index] >> 8;
 8001740:	aa2e      	add	r2, sp, #184	; 0xb8
 8001742:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001746:	f832 2c8c 	ldrh.w	r2, [r2, #-140]
 800174a:	ba52      	rev16	r2, r2
 800174c:	805a      	strh	r2, [r3, #2]
	*scalar = float_converter.float_number;
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	6032      	str	r2, [r6, #0]
	float_converter.bytes[0] = data[55+2*input_index] >> 8;
 8001752:	aa2e      	add	r2, sp, #184	; 0xb8
 8001754:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001758:	f832 2c4a 	ldrh.w	r2, [r2, #-74]
 800175c:	ba52      	rev16	r2, r2
 800175e:	801a      	strh	r2, [r3, #0]
	float_converter.bytes[2] = data[56+2*input_index] >> 8;
 8001760:	aa2e      	add	r2, sp, #184	; 0xb8
 8001762:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8001766:	f834 2c48 	ldrh.w	r2, [r4, #-72]
 800176a:	ba52      	rev16	r2, r2
 800176c:	805a      	strh	r2, [r3, #2]
	*bias = float_converter.float_number;
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	602b      	str	r3, [r5, #0]
}
 8001772:	b02e      	add	sp, #184	; 0xb8
 8001774:	bd70      	pop	{r4, r5, r6, pc}
 8001776:	bf00      	nop
 8001778:	20000454 	.word	0x20000454

0800177c <STM32_PLC_Flash_Get_Encoder_Pulses>:
void STM32_PLC_Flash_Get_Encoder_Pulses(uint8_t pulses_index, uint16_t *pulses){
 800177c:	b530      	push	{r4, r5, lr}
 800177e:	b0af      	sub	sp, #188	; 0xbc
 8001780:	4604      	mov	r4, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001782:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_Encoder_Pulses(uint8_t pulses_index, uint16_t *pulses){
 8001784:	460d      	mov	r5, r1
	read_flash(data, FLASH_LENGTH_DATA);
 8001786:	f7ff fdff 	bl	8001388 <read_flash.constprop.0>
	*pulses = data[89 + pulses_index];
 800178a:	ab2e      	add	r3, sp, #184	; 0xb8
 800178c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8001790:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8001794:	802b      	strh	r3, [r5, #0]
}
 8001796:	b02f      	add	sp, #188	; 0xbc
 8001798:	bd30      	pop	{r4, r5, pc}

0800179a <compute_period>:
	handler_tim15 = htim15;
}

static uint16_t compute_period(uint16_t input_capture[], uint8_t left) {
	/* Find the index - i0 and i1 can never be larger than LENGTH_ARRAY and lower than 0 */
	uint8_t a = 2*LENGTH_ARRAY - left;
 800179a:	f1c1 01c8 	rsb	r1, r1, #200	; 0xc8
	uint8_t i0 = (a - 2) % LENGTH_ARRAY;
 800179e:	b2c9      	uxtb	r1, r1
	uint8_t i1 = (a - 1) % LENGTH_ARRAY;
 80017a0:	2264      	movs	r2, #100	; 0x64
 80017a2:	1e4b      	subs	r3, r1, #1
	uint8_t i0 = (a - 2) % LENGTH_ARRAY;
 80017a4:	3902      	subs	r1, #2
static uint16_t compute_period(uint16_t input_capture[], uint8_t left) {
 80017a6:	b510      	push	{r4, lr}
	uint8_t i1 = (a - 1) % LENGTH_ARRAY;
 80017a8:	fb93 f4f2 	sdiv	r4, r3, r2
 80017ac:	fb02 3314 	mls	r3, r2, r4, r3
	uint8_t i0 = (a - 2) % LENGTH_ARRAY;
 80017b0:	fb91 f4f2 	sdiv	r4, r1, r2
 80017b4:	fb02 1114 	mls	r1, r2, r4, r1

	/* Check absolute value */
	if(input_capture[i1] > input_capture[i0])
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	b2c9      	uxtb	r1, r1
 80017bc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80017c0:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d902      	bls.n	80017ce <compute_period+0x34>
		return input_capture[i1] - input_capture[i0];
 80017c8:	1a98      	subs	r0, r3, r2
	else if(input_capture[i1] < input_capture[i0])
		return input_capture[i1] + 0xFFFF - input_capture[i0];
 80017ca:	b280      	uxth	r0, r0
	else
		return 1;
}
 80017cc:	bd10      	pop	{r4, pc}
	else if(input_capture[i1] < input_capture[i0])
 80017ce:	d202      	bcs.n	80017d6 <compute_period+0x3c>
		return input_capture[i1] + 0xFFFF - input_capture[i0];
 80017d0:	1e58      	subs	r0, r3, #1
 80017d2:	1a80      	subs	r0, r0, r2
 80017d4:	e7f9      	b.n	80017ca <compute_period+0x30>
		return 1;
 80017d6:	2001      	movs	r0, #1
 80017d8:	e7f8      	b.n	80017cc <compute_period+0x32>
	...

080017dc <STM32_PLC_Input_Capture>:
void STM32_PLC_Input_Capture(TIM_HandleTypeDef* htim17, TIM_HandleTypeDef* htim16, TIM_HandleTypeDef* htim15) {
 80017dc:	b570      	push	{r4, r5, r6, lr}
 80017de:	4606      	mov	r6, r0
 80017e0:	460d      	mov	r5, r1
	if(HAL_TIM_IC_Start_IT(htim15, TIM_CHANNEL_2) != HAL_OK)
 80017e2:	4610      	mov	r0, r2
 80017e4:	2104      	movs	r1, #4
void STM32_PLC_Input_Capture(TIM_HandleTypeDef* htim17, TIM_HandleTypeDef* htim16, TIM_HandleTypeDef* htim15) {
 80017e6:	4614      	mov	r4, r2
	if(HAL_TIM_IC_Start_IT(htim15, TIM_CHANNEL_2) != HAL_OK)
 80017e8:	f00b f9f8 	bl	800cbdc <HAL_TIM_IC_Start_IT>
 80017ec:	b108      	cbz	r0, 80017f2 <STM32_PLC_Input_Capture+0x16>
		Error_Handler();
 80017ee:	f005 fddd 	bl	80073ac <Error_Handler>
	if(HAL_TIM_IC_Start_DMA(htim15, TIM_CHANNEL_1, (uint32_t*)input_capture2, LENGTH_ARRAY) != HAL_OK)
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <STM32_PLC_Input_Capture+0x5c>)
 80017f4:	2364      	movs	r3, #100	; 0x64
 80017f6:	2100      	movs	r1, #0
 80017f8:	4620      	mov	r0, r4
 80017fa:	f00b fa6f 	bl	800ccdc <HAL_TIM_IC_Start_DMA>
 80017fe:	b108      	cbz	r0, 8001804 <STM32_PLC_Input_Capture+0x28>
		Error_Handler();
 8001800:	f005 fdd4 	bl	80073ac <Error_Handler>
	if(HAL_TIM_IC_Start_DMA(htim16, TIM_CHANNEL_1, (uint32_t*)input_capture1, LENGTH_ARRAY) != HAL_OK)
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <STM32_PLC_Input_Capture+0x60>)
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	2100      	movs	r1, #0
 800180a:	4628      	mov	r0, r5
 800180c:	f00b fa66 	bl	800ccdc <HAL_TIM_IC_Start_DMA>
 8001810:	b108      	cbz	r0, 8001816 <STM32_PLC_Input_Capture+0x3a>
		Error_Handler();
 8001812:	f005 fdcb 	bl	80073ac <Error_Handler>
	if(HAL_TIM_IC_Start_DMA(htim17, TIM_CHANNEL_1, (uint32_t*)input_capture0, LENGTH_ARRAY) != HAL_OK)
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <STM32_PLC_Input_Capture+0x64>)
 8001818:	2364      	movs	r3, #100	; 0x64
 800181a:	2100      	movs	r1, #0
 800181c:	4630      	mov	r0, r6
 800181e:	f00b fa5d 	bl	800ccdc <HAL_TIM_IC_Start_DMA>
 8001822:	b108      	cbz	r0, 8001828 <STM32_PLC_Input_Capture+0x4c>
		Error_Handler();
 8001824:	f005 fdc2 	bl	80073ac <Error_Handler>
	handler_tim17 = htim17;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <STM32_PLC_Input_Capture+0x68>)
 800182a:	601e      	str	r6, [r3, #0]
	handler_tim16 = htim16;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <STM32_PLC_Input_Capture+0x6c>)
 800182e:	601d      	str	r5, [r3, #0]
	handler_tim15 = htim15;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <STM32_PLC_Input_Capture+0x70>)
 8001832:	601c      	str	r4, [r3, #0]
}
 8001834:	bd70      	pop	{r4, r5, r6, pc}
 8001836:	bf00      	nop
 8001838:	200005f8 	.word	0x200005f8
 800183c:	20000530 	.word	0x20000530
 8001840:	20000468 	.word	0x20000468
 8001844:	20000464 	.word	0x20000464
 8001848:	20000460 	.word	0x20000460
 800184c:	2000045c 	.word	0x2000045c

08001850 <STM32_PLC_Input_Capture_Get_Raw>:


uint16_t STM32_PLC_Input_Capture_Get_Raw(uint8_t i){
	switch(i){
 8001850:	2803      	cmp	r0, #3
 8001852:	d823      	bhi.n	800189c <STM32_PLC_Input_Capture_Get_Raw+0x4c>
 8001854:	e8df f000 	tbb	[pc, r0]
 8001858:	1b130b02 	.word	0x1b130b02
	case 0:
		return compute_period(input_capture0, handler_tim17->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <STM32_PLC_Input_Capture_Get_Raw+0x50>)
 800185e:	4811      	ldr	r0, [pc, #68]	; (80018a4 <STM32_PLC_Input_Capture_Get_Raw+0x54>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	b2c9      	uxtb	r1, r1
	case 1:
		return compute_period(input_capture1, handler_tim16->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
	case 2:
		return compute_period(input_capture2, handler_tim15->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
	case 3:
		return compute_period(input_capture3, LENGTH_ARRAY - data_index_for_tim15_channel_2);
 800186a:	f7ff bf96 	b.w	800179a <compute_period>
		return compute_period(input_capture1, handler_tim16->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <STM32_PLC_Input_Capture_Get_Raw+0x58>)
 8001870:	480e      	ldr	r0, [pc, #56]	; (80018ac <STM32_PLC_Input_Capture_Get_Raw+0x5c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	b2c9      	uxtb	r1, r1
 800187c:	e7f5      	b.n	800186a <STM32_PLC_Input_Capture_Get_Raw+0x1a>
		return compute_period(input_capture2, handler_tim15->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <STM32_PLC_Input_Capture_Get_Raw+0x60>)
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <STM32_PLC_Input_Capture_Get_Raw+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	b2c9      	uxtb	r1, r1
 800188c:	e7ed      	b.n	800186a <STM32_PLC_Input_Capture_Get_Raw+0x1a>
		return compute_period(input_capture3, LENGTH_ARRAY - data_index_for_tim15_channel_2);
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <STM32_PLC_Input_Capture_Get_Raw+0x68>)
 8001890:	480a      	ldr	r0, [pc, #40]	; (80018bc <STM32_PLC_Input_Capture_Get_Raw+0x6c>)
 8001892:	7819      	ldrb	r1, [r3, #0]
 8001894:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 8001898:	b2c9      	uxtb	r1, r1
 800189a:	e7e6      	b.n	800186a <STM32_PLC_Input_Capture_Get_Raw+0x1a>
	default:
		return 0;
	}
}
 800189c:	2000      	movs	r0, #0
 800189e:	4770      	bx	lr
 80018a0:	20000464 	.word	0x20000464
 80018a4:	20000468 	.word	0x20000468
 80018a8:	20000460 	.word	0x20000460
 80018ac:	20000530 	.word	0x20000530
 80018b0:	2000045c 	.word	0x2000045c
 80018b4:	200005f8 	.word	0x200005f8
 80018b8:	20000458 	.word	0x20000458
 80018bc:	200006c0 	.word	0x200006c0

080018c0 <STM32_PLC_Input_Capture_Get_Calibrated>:

float STM32_PLC_Input_Capture_Get_Calibrated(uint8_t i){
 80018c0:	b508      	push	{r3, lr}
	return 1.0f/((float)STM32_PLC_Input_Capture_Get_Raw(i)*0.0001f); /* Converting to Hz */
 80018c2:	f7ff ffc5 	bl	8001850 <STM32_PLC_Input_Capture_Get_Raw>
 80018c6:	ee07 0a90 	vmov	s15, r0
 80018ca:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80018e0 <STM32_PLC_Input_Capture_Get_Calibrated+0x20>
 80018ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d2:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 80018d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018da:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80018de:	bd08      	pop	{r3, pc}
 80018e0:	38d1b717 	.word	0x38d1b717

080018e4 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	/* This is here because channel 2 does not have DMA */
	if(htim->Instance == TIM15){
 80018e4:	6802      	ldr	r2, [r0, #0]
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d110      	bne.n	800190e <HAL_TIM_IC_CaptureCallback+0x2a>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80018ec:	7f03      	ldrb	r3, [r0, #28]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d10d      	bne.n	800190e <HAL_TIM_IC_CaptureCallback+0x2a>
			if(data_index_for_tim15_channel_2 >= LENGTH_ARRAY)
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_TIM_IC_CaptureCallback+0x30>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	2a63      	cmp	r2, #99	; 0x63
				data_index_for_tim15_channel_2 = 0;
 80018f8:	bf84      	itt	hi
 80018fa:	2200      	movhi	r2, #0
 80018fc:	701a      	strbhi	r2, [r3, #0]
			input_capture3[data_index_for_tim15_channel_2++] = htim->Instance->CNT;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001900:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	1c50      	adds	r0, r2, #1
 8001906:	7018      	strb	r0, [r3, #0]
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_TIM_IC_CaptureCallback+0x34>)
 800190a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		}
	}
}
 800190e:	4770      	bx	lr
 8001910:	40014000 	.word	0x40014000
 8001914:	20000458 	.word	0x20000458
 8001918:	200006c0 	.word	0x200006c0

0800191c <STM32_PLC_LCD_Calibrate_Touch>:
	STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame();
	HAL_Delay(2000);
	STM32_PLC_LCD_Calibrate_Touch();
}

void STM32_PLC_LCD_Calibrate_Touch() {
 800191c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		STM32_PLC_Flash_Set_LCD_Calibration(Scale_X, Scale_Y, Bias_X, Bias_Y);
	}
}

bool STM32_PLC_LCD_Is_Pressed(){
	return TSC2046_isPressed();
 800191e:	f004 fffb 	bl	8006918 <TSC2046_isPressed>
	if(STM32_PLC_LCD_Is_Pressed()){
 8001922:	b188      	cbz	r0, 8001948 <STM32_PLC_LCD_Calibrate_Touch+0x2c>
		TSC2046_Calibrate();
 8001924:	f005 f824 	bl	8006970 <TSC2046_Calibrate>
}

void STM32_PLC_LCD_Get_Touch_Calibration_Parameters(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y){
	TSC2046_GetTouchCalibrationParameters(Scale_X, Scale_Y, Bias_X, Bias_Y);
 8001928:	ab03      	add	r3, sp, #12
 800192a:	aa02      	add	r2, sp, #8
 800192c:	a901      	add	r1, sp, #4
 800192e:	4668      	mov	r0, sp
 8001930:	f004 ff6e 	bl	8006810 <TSC2046_GetTouchCalibrationParameters>
		STM32_PLC_Flash_Set_LCD_Calibration(Scale_X, Scale_Y, Bias_X, Bias_Y);
 8001934:	eddd 1a03 	vldr	s3, [sp, #12]
 8001938:	ed9d 1a02 	vldr	s2, [sp, #8]
 800193c:	eddd 0a01 	vldr	s1, [sp, #4]
 8001940:	ed9d 0a00 	vldr	s0, [sp]
 8001944:	f7ff fd9e 	bl	8001484 <STM32_PLC_Flash_Set_LCD_Calibration>
}
 8001948:	b005      	add	sp, #20
 800194a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001950 <STM32_PLC_LCD>:
void STM32_PLC_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b085      	sub	sp, #20
	lcd.lcdSpi = lcdSpi;
 8001954:	4c5e      	ldr	r4, [pc, #376]	; (8001ad0 <STM32_PLC_LCD+0x180>)
void STM32_PLC_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001956:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	lcd.LCD_DC_PORT = LCD_DC_PORT;
 8001958:	6126      	str	r6, [r4, #16]
	lcd.LCD_CS_PORT = LCD_CS_PORT;
 800195a:	e9c4 0201 	strd	r0, r2, [r4, #4]
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 800195e:	4630      	mov	r0, r6
	lcd.rotationNum = 1;
 8001960:	4626      	mov	r6, r4
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
	lcd.rotationNum = 1;
 8001964:	2701      	movs	r7, #1
void STM32_PLC_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001966:	460d      	mov	r5, r1
 8001968:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
	lcd.LCD_CS_PIN = LCD_CS_PIN;
 800196c:	81a3      	strh	r3, [r4, #12]
	lcd.LCD_DC_PIN = LCD_DC_PIN;
 800196e:	82a1      	strh	r1, [r4, #20]
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 8001970:	f007 ff2e 	bl	80097d0 <HAL_GPIO_WritePin>
	lcd.rotationNum = 1;
 8001974:	f826 7b34 	strh.w	r7, [r6], #52
	ILI9341_send_command(ILI9341_RESET);                                     /* software reset command */
 8001978:	4638      	mov	r0, r7
 800197a:	f004 fc0f 	bl	800619c <ILI9341_send_command>
	HAL_Delay(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f007 f892 	bl	8008aa8 <HAL_Delay>
	ILI9341_send_command(ILI9341_DISPLAY_OFF);                               /* display off */
 8001984:	2028      	movs	r0, #40	; 0x28
 8001986:	f004 fc09 	bl	800619c <ILI9341_send_command>
	ILI9341_send_command(ILI9341_POWER1);                                    /* power control */
 800198a:	20c0      	movs	r0, #192	; 0xc0
 800198c:	f004 fc06 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0x26);                                                 /* GVDD = 4.75v */
 8001990:	2026      	movs	r0, #38	; 0x26
 8001992:	f004 fbd1 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_POWER2);                                    /* power control */
 8001996:	20c1      	movs	r0, #193	; 0xc1
 8001998:	f004 fc00 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0x11);                                                 /* AVDD = VCIx2, VGH = VCIx7, VGL =-VCIx3 */
 800199c:	2011      	movs	r0, #17
 800199e:	f004 fbcb 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_VCOM1);                                     /* VCOM control */
 80019a2:	20c5      	movs	r0, #197	; 0xc5
 80019a4:	f004 fbfa 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0x35);                                                 /* Set the VCOMH voltage (0x35 = 4.025v) */
 80019a8:	2035      	movs	r0, #53	; 0x35
 80019aa:	f004 fbc5 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x3e);                                                 /* Set the VCOML voltage (0x3E = -0.950v) */
 80019ae:	203e      	movs	r0, #62	; 0x3e
 80019b0:	f004 fbc2 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_VCOM2);                                     /* VCOM control */
 80019b4:	20c7      	movs	r0, #199	; 0xc7
 80019b6:	f004 fbf1 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0xbe);
 80019ba:	20be      	movs	r0, #190	; 0xbe
 80019bc:	f004 fbbc 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_MAC);
 80019c0:	2036      	movs	r0, #54	; 0x36
 80019c2:	f004 fbeb 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0x48);
 80019c6:	2048      	movs	r0, #72	; 0x48
 80019c8:	f004 fbb6 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_PIXEL_FORMAT);
 80019cc:	203a      	movs	r0, #58	; 0x3a
 80019ce:	f004 fbe5 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0x55);
 80019d2:	2055      	movs	r0, #85	; 0x55
 80019d4:	f004 fbb0 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_FRC);
 80019d8:	20b1      	movs	r0, #177	; 0xb1
 80019da:	f004 fbdf 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0);
 80019de:	2000      	movs	r0, #0
 80019e0:	f004 fbaa 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x1F);
 80019e4:	201f      	movs	r0, #31
 80019e6:	f004 fba7 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_COLUMN_ADDR);                               /* column set */
 80019ea:	202a      	movs	r0, #42	; 0x2a
 80019ec:	f004 fbd6 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0x00);                                                 /* x0_HIGH---0 */
 80019f0:	2000      	movs	r0, #0
 80019f2:	f004 fba1 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* x0_LOW----0 */
 80019f6:	2000      	movs	r0, #0
 80019f8:	f004 fb9e 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* x1_HIGH---240 */
 80019fc:	2000      	movs	r0, #0
 80019fe:	f004 fb9b 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0xEF);                                                 /* x1_LOW----240 */
 8001a02:	20ef      	movs	r0, #239	; 0xef
 8001a04:	f004 fb98 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_PAGE_ADDR);                                 /* page address set */
 8001a08:	202b      	movs	r0, #43	; 0x2b
 8001a0a:	f004 fbc7 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0x00);                                                 /* y0_HIGH---0 */
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f004 fb92 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* y0_LOW----0 */
 8001a14:	2000      	movs	r0, #0
 8001a16:	f004 fb8f 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x01);                                                 /* y1_HIGH---320 */
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	f004 fb8c 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x3F);                                                 /* y1_LOW----320 */
 8001a20:	203f      	movs	r0, #63	; 0x3f
 8001a22:	f004 fb89 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_TEARING_OFF);                               /* tearing effect off */
 8001a26:	2034      	movs	r0, #52	; 0x34
 8001a28:	f004 fbb8 	bl	800619c <ILI9341_send_command>
	ILI9341_send_command(ILI9341_Entry_Mode_Set);                            /* entry mode set */
 8001a2c:	20b7      	movs	r0, #183	; 0xb7
 8001a2e:	f004 fbb5 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0x07);
 8001a32:	2007      	movs	r0, #7
 8001a34:	f004 fb80 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_DFC);                                       /* display function control */
 8001a38:	20b6      	movs	r0, #182	; 0xb6
 8001a3a:	f004 fbaf 	bl	800619c <ILI9341_send_command>
	ILI9341_send_data(0x0a);
 8001a3e:	200a      	movs	r0, #10
 8001a40:	f004 fb7a 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x82);
 8001a44:	2082      	movs	r0, #130	; 0x82
 8001a46:	f004 fb77 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x27);
 8001a4a:	2027      	movs	r0, #39	; 0x27
 8001a4c:	f004 fb74 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* clock divisor */
 8001a50:	2000      	movs	r0, #0
 8001a52:	f004 fb71 	bl	8006138 <ILI9341_send_data>
	ILI9341_send_command(ILI9341_SLEEP_OUT);                                 /* sleep out */
 8001a56:	2011      	movs	r0, #17
 8001a58:	f004 fba0 	bl	800619c <ILI9341_send_command>
	HAL_Delay(100);
 8001a5c:	2064      	movs	r0, #100	; 0x64
 8001a5e:	f007 f823 	bl	8008aa8 <HAL_Delay>
	ILI9341_send_command(ILI9341_DISPLAY_ON);                                /* display on */
 8001a62:	2029      	movs	r0, #41	; 0x29
 8001a64:	f004 fb9a 	bl	800619c <ILI9341_send_command>
	HAL_Delay(100);
 8001a68:	2064      	movs	r0, #100	; 0x64
 8001a6a:	f007 f81d 	bl	8008aa8 <HAL_Delay>
	ILI9341_send_command(ILI9341_GRAM);                                      /* memory write */
 8001a6e:	202c      	movs	r0, #44	; 0x2c
 8001a70:	f004 fb94 	bl	800619c <ILI9341_send_command>
	HAL_Delay(5);
 8001a74:	2005      	movs	r0, #5
 8001a76:	f007 f817 	bl	8008aa8 <HAL_Delay>
	lcd.myTS_Calibrate = myTS_Calibrate;
 8001a7a:	221c      	movs	r2, #28
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f00c fecc 	bl	800e81c <memset>
	lcd.localRawTouch = localRawTouch;
 8001a84:	2300      	movs	r3, #0
	lcd.myRawTouchDef = myRawTouchDef;
 8001a86:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
	lcd.TOUCH_CS_PORT = TOUCH_CS_PORT;
 8001a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a8c:	61e3      	str	r3, [r4, #28]
	lcd.TOUCH_CS_PIN = TOUCH_CS_PIN;
 8001a8e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8001a92:	8423      	strh	r3, [r4, #32]
	lcd.CMD_Default = 0x84;
 8001a94:	2384      	movs	r3, #132	; 0x84
	STM32_PLC_Flash_Get_LCD_Calibration(&Scale_X, &Scale_Y, &Bias_X, &Bias_Y);
 8001a96:	aa02      	add	r2, sp, #8
 8001a98:	a901      	add	r1, sp, #4
 8001a9a:	4668      	mov	r0, sp
	lcd.CMD_Default = 0x84;
 8001a9c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	STM32_PLC_Flash_Get_LCD_Calibration(&Scale_X, &Scale_Y, &Bias_X, &Bias_Y);
 8001aa0:	ab03      	add	r3, sp, #12
	lcd.touchSpi = touchSpi;
 8001aa2:	61a5      	str	r5, [r4, #24]
	STM32_PLC_Flash_Get_LCD_Calibration(&Scale_X, &Scale_Y, &Bias_X, &Bias_Y);
 8001aa4:	f7ff fdf2 	bl	800168c <STM32_PLC_Flash_Get_LCD_Calibration>
	TSC2046_SetTouchCalibrationParameters(Scale_X, Scale_Y, Bias_X, Bias_Y);
 8001aa8:	eddd 1a03 	vldr	s3, [sp, #12]
 8001aac:	ed9d 1a02 	vldr	s2, [sp, #8]
 8001ab0:	eddd 0a01 	vldr	s1, [sp, #4]
 8001ab4:	ed9d 0a00 	vldr	s0, [sp]
 8001ab8:	f004 feb8 	bl	800682c <TSC2046_SetTouchCalibrationParameters>
	STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame();
 8001abc:	f004 fb24 	bl	8006108 <STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame>
	HAL_Delay(2000);
 8001ac0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ac4:	f006 fff0 	bl	8008aa8 <HAL_Delay>
	STM32_PLC_LCD_Calibrate_Touch();
 8001ac8:	f7ff ff28 	bl	800191c <STM32_PLC_LCD_Calibrate_Touch>
}
 8001acc:	b005      	add	sp, #20
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	20002728 	.word	0x20002728

08001ad4 <STM32_PLC_LED_Set>:
	}
	STM32_PLC_LED_Set(0);
}

/* Select a program number between 0 and 31 e.g 5-bit. 0 is no program activated */
void STM32_PLC_LED_Set(uint8_t binary_value){
 8001ad4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, binary_value & 0b100);
 8001ad6:	f000 0204 	and.w	r2, r0, #4
void STM32_PLC_LED_Set(uint8_t binary_value){
 8001ada:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, binary_value & 0b100);
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f007 fe75 	bl	80097d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, binary_value & 0b010);
 8001ae6:	f004 0202 	and.w	r2, r4, #2
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <STM32_PLC_LED_Set+0x30>)
 8001aec:	2110      	movs	r1, #16
 8001aee:	f007 fe6f 	bl	80097d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, binary_value & 0b001);
 8001af2:	f004 0201 	and.w	r2, r4, #1
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <STM32_PLC_LED_Set+0x30>)
}
 8001af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, binary_value & 0b001);
 8001afc:	2120      	movs	r1, #32
 8001afe:	f007 be67 	b.w	80097d0 <HAL_GPIO_WritePin>
 8001b02:	bf00      	nop
 8001b04:	48000800 	.word	0x48000800

08001b08 <STM32_PLC_LED>:
void STM32_PLC_LED(){
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	2400      	movs	r4, #0
		STM32_PLC_LED_Set(i);
 8001b0c:	b2e0      	uxtb	r0, r4
 8001b0e:	f7ff ffe1 	bl	8001ad4 <STM32_PLC_LED_Set>
	for(uint8_t i = 0; i < 0x7; i++){
 8001b12:	3401      	adds	r4, #1
		HAL_Delay(100);
 8001b14:	2064      	movs	r0, #100	; 0x64
 8001b16:	f006 ffc7 	bl	8008aa8 <HAL_Delay>
	for(uint8_t i = 0; i < 0x7; i++){
 8001b1a:	2c07      	cmp	r4, #7
 8001b1c:	d1f6      	bne.n	8001b0c <STM32_PLC_LED+0x4>
}
 8001b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	STM32_PLC_LED_Set(0);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff bfd6 	b.w	8001ad4 <STM32_PLC_LED_Set>

08001b28 <STM32_PLC_PWM_Set>:
	/* Reset */
	STM32_PLC_PWM_Reset();
}

void STM32_PLC_PWM_Set(uint8_t i, uint16_t ON_Period) {
	switch (i) {
 8001b28:	2807      	cmp	r0, #7
 8001b2a:	d83c      	bhi.n	8001ba6 <STM32_PLC_PWM_Set+0x7e>
 8001b2c:	e8df f000 	tbb	[pc, r0]
 8001b30:	19120b04 	.word	0x19120b04
 8001b34:	352e2720 	.word	0x352e2720
	case 0:
		PWM_TIM_0_3->Instance->CCR1 = ON_Period;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <STM32_PLC_PWM_Set+0x80>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6359      	str	r1, [r3, #52]	; 0x34
		PWM[0] = ON_Period;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b42:	8019      	strh	r1, [r3, #0]
		break;
 8001b44:	4770      	bx	lr
	case 1:
		PWM_TIM_0_3->Instance->CCR2 = ON_Period;
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <STM32_PLC_PWM_Set+0x80>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6399      	str	r1, [r3, #56]	; 0x38
		PWM[1] = ON_Period;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b50:	8059      	strh	r1, [r3, #2]
		break;
 8001b52:	4770      	bx	lr
	case 2:
		PWM_TIM_0_3->Instance->CCR3 = ON_Period;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <STM32_PLC_PWM_Set+0x80>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	63d9      	str	r1, [r3, #60]	; 0x3c
		PWM[2] = ON_Period;
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b5e:	8099      	strh	r1, [r3, #4]
		break;
 8001b60:	4770      	bx	lr
	case 3:
		PWM_TIM_0_3->Instance->CCR4 = ON_Period;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <STM32_PLC_PWM_Set+0x80>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6419      	str	r1, [r3, #64]	; 0x40
		PWM[3] = ON_Period;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b6c:	80d9      	strh	r1, [r3, #6]
		break;
 8001b6e:	4770      	bx	lr
	case 4:
		PWM_TIM_4_7->Instance->CCR1 = ON_Period;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <STM32_PLC_PWM_Set+0x88>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6359      	str	r1, [r3, #52]	; 0x34
		PWM[4] = ON_Period;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b7a:	8119      	strh	r1, [r3, #8]
		break;
 8001b7c:	4770      	bx	lr
	case 5:
		PWM_TIM_4_7->Instance->CCR2 = ON_Period;
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <STM32_PLC_PWM_Set+0x88>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6399      	str	r1, [r3, #56]	; 0x38
		PWM[5] = ON_Period;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b88:	8159      	strh	r1, [r3, #10]
		break;
 8001b8a:	4770      	bx	lr
	case 6:
		PWM_TIM_4_7->Instance->CCR3 = ON_Period;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <STM32_PLC_PWM_Set+0x88>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	63d9      	str	r1, [r3, #60]	; 0x3c
		PWM[6] = ON_Period;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b96:	8199      	strh	r1, [r3, #12]
		break;
 8001b98:	4770      	bx	lr
	case 7:
		PWM_TIM_4_7->Instance->CCR4 = ON_Period;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <STM32_PLC_PWM_Set+0x88>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6419      	str	r1, [r3, #64]	; 0x40
		PWM[7] = ON_Period;
 8001ba2:	4b02      	ldr	r3, [pc, #8]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001ba4:	81d9      	strh	r1, [r3, #14]
		break;
	}
}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000798 	.word	0x20000798
 8001bac:	20000788 	.word	0x20000788
 8001bb0:	2000079c 	.word	0x2000079c

08001bb4 <STM32_PLC_PWM_Reset>:

uint16_t STM32_PLC_PWM_Get(uint8_t i) {
	return PWM[i];
}

void STM32_PLC_PWM_Reset() {
 8001bb4:	b508      	push	{r3, lr}
 8001bb6:	2200      	movs	r2, #0
	for(uint8_t i = 0; i < 8; i++)
		STM32_PLC_PWM_Set(i, 0);
 8001bb8:	b2d0      	uxtb	r0, r2
 8001bba:	2100      	movs	r1, #0
	for(uint8_t i = 0; i < 8; i++)
 8001bbc:	3201      	adds	r2, #1
		STM32_PLC_PWM_Set(i, 0);
 8001bbe:	f7ff ffb3 	bl	8001b28 <STM32_PLC_PWM_Set>
	for(uint8_t i = 0; i < 8; i++)
 8001bc2:	2a08      	cmp	r2, #8
 8001bc4:	d1f8      	bne.n	8001bb8 <STM32_PLC_PWM_Reset+0x4>
}
 8001bc6:	bd08      	pop	{r3, pc}

08001bc8 <STM32_PLC_PWM>:
void STM32_PLC_PWM(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim5) {
 8001bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bca:	460c      	mov	r4, r1
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1)  != HAL_OK)
 8001bcc:	2100      	movs	r1, #0
void STM32_PLC_PWM(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim5) {
 8001bce:	4605      	mov	r5, r0
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1)  != HAL_OK)
 8001bd0:	f00b f802 	bl	800cbd8 <HAL_TIM_PWM_Start>
 8001bd4:	b108      	cbz	r0, 8001bda <STM32_PLC_PWM+0x12>
		Error_Handler();
 8001bd6:	f005 fbe9 	bl	80073ac <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2)  != HAL_OK)
 8001bda:	2104      	movs	r1, #4
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f00a fffb 	bl	800cbd8 <HAL_TIM_PWM_Start>
 8001be2:	b108      	cbz	r0, 8001be8 <STM32_PLC_PWM+0x20>
			Error_Handler();
 8001be4:	f005 fbe2 	bl	80073ac <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3)  != HAL_OK)
 8001be8:	2108      	movs	r1, #8
 8001bea:	4628      	mov	r0, r5
 8001bec:	f00a fff4 	bl	800cbd8 <HAL_TIM_PWM_Start>
 8001bf0:	b108      	cbz	r0, 8001bf6 <STM32_PLC_PWM+0x2e>
			Error_Handler();
 8001bf2:	f005 fbdb 	bl	80073ac <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4)  != HAL_OK)
 8001bf6:	210c      	movs	r1, #12
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f00a ffed 	bl	800cbd8 <HAL_TIM_PWM_Start>
 8001bfe:	b108      	cbz	r0, 8001c04 <STM32_PLC_PWM+0x3c>
			Error_Handler();
 8001c00:	f005 fbd4 	bl	80073ac <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_1)  != HAL_OK)
 8001c04:	2100      	movs	r1, #0
 8001c06:	4620      	mov	r0, r4
 8001c08:	f00a ffe6 	bl	800cbd8 <HAL_TIM_PWM_Start>
 8001c0c:	b108      	cbz	r0, 8001c12 <STM32_PLC_PWM+0x4a>
		Error_Handler();
 8001c0e:	f005 fbcd 	bl	80073ac <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_2)  != HAL_OK)
 8001c12:	2104      	movs	r1, #4
 8001c14:	4620      	mov	r0, r4
 8001c16:	f00a ffdf 	bl	800cbd8 <HAL_TIM_PWM_Start>
 8001c1a:	b108      	cbz	r0, 8001c20 <STM32_PLC_PWM+0x58>
			Error_Handler();
 8001c1c:	f005 fbc6 	bl	80073ac <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_3)  != HAL_OK)
 8001c20:	2108      	movs	r1, #8
 8001c22:	4620      	mov	r0, r4
 8001c24:	f00a ffd8 	bl	800cbd8 <HAL_TIM_PWM_Start>
 8001c28:	b108      	cbz	r0, 8001c2e <STM32_PLC_PWM+0x66>
			Error_Handler();
 8001c2a:	f005 fbbf 	bl	80073ac <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_4)  != HAL_OK)
 8001c2e:	210c      	movs	r1, #12
 8001c30:	4620      	mov	r0, r4
 8001c32:	f00a ffd1 	bl	800cbd8 <HAL_TIM_PWM_Start>
 8001c36:	b108      	cbz	r0, 8001c3c <STM32_PLC_PWM+0x74>
			Error_Handler();
 8001c38:	f005 fbb8 	bl	80073ac <Error_Handler>
	PWM_TIM_4_7 = htim2;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <STM32_PLC_PWM+0xa0>)
 8001c3e:	601d      	str	r5, [r3, #0]
	PWM_TIM_0_3 = htim5;
 8001c40:	4d0a      	ldr	r5, [pc, #40]	; (8001c6c <STM32_PLC_PWM+0xa4>)
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 8001c42:	f10d 0106 	add.w	r1, sp, #6
 8001c46:	a801      	add	r0, sp, #4
	PWM_TIM_0_3 = htim5;
 8001c48:	602c      	str	r4, [r5, #0]
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 8001c4a:	f7ff fcfc 	bl	8001646 <STM32_PLC_Flash_Get_PWM_Prescalers>

void STM32_PLC_PWM0_To_PWM3_Set_Prescaler(uint16_t prescaler, bool save_to_flash) {
	PWM_TIM_0_3->Instance->PSC = prescaler;
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
 8001c58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
	STM32_PLC_PWM_Reset();
 8001c5e:	f7ff ffa9 	bl	8001bb4 <STM32_PLC_PWM_Reset>
}
 8001c62:	b003      	add	sp, #12
 8001c64:	bd30      	pop	{r4, r5, pc}
 8001c66:	bf00      	nop
 8001c68:	2000079c 	.word	0x2000079c
 8001c6c:	20000798 	.word	0x20000798

08001c70 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>:
	PWM_TIM_0_3->Instance->PSC = prescaler;
 8001c70:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler+0x10>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	6290      	str	r0, [r2, #40]	; 0x28
	if(save_to_flash)
 8001c78:	b109      	cbz	r1, 8001c7e <STM32_PLC_PWM0_To_PWM3_Set_Prescaler+0xe>
		STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_0_3(prescaler);
 8001c7a:	f7ff bbf7 	b.w	800146c <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_0_3>
}
 8001c7e:	4770      	bx	lr
 8001c80:	20000798 	.word	0x20000798

08001c84 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>:

void STM32_PLC_PWM4_To_PWM7_Set_Prescaler(uint16_t prescaler, bool save_to_flash) {
	PWM_TIM_4_7->Instance->PSC = prescaler;
 8001c84:	4a03      	ldr	r2, [pc, #12]	; (8001c94 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler+0x10>)
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	6290      	str	r0, [r2, #40]	; 0x28
	if(save_to_flash)
 8001c8c:	b109      	cbz	r1, 8001c92 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler+0xe>
		STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_4_7(prescaler);
 8001c8e:	f7ff bbf0 	b.w	8001472 <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_4_7>
}
 8001c92:	4770      	bx	lr
 8001c94:	2000079c 	.word	0x2000079c

08001c98 <STM32_PLC_RTC>:
static bool alarm_B_enabled;
static bool alarm_A_is_active;
static bool alarm_B_is_active;

void STM32_PLC_RTC(RTC_HandleTypeDef *hrtc) {
	real_time_clock = hrtc;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <STM32_PLC_RTC+0xc>)

	/* Get alarm enables */
	STM32_PLC_Flash_Get_Alarm_Enables(&alarm_A_enabled, &alarm_B_enabled);
 8001c9a:	4903      	ldr	r1, [pc, #12]	; (8001ca8 <STM32_PLC_RTC+0x10>)
	real_time_clock = hrtc;
 8001c9c:	6018      	str	r0, [r3, #0]
	STM32_PLC_Flash_Get_Alarm_Enables(&alarm_A_enabled, &alarm_B_enabled);
 8001c9e:	4803      	ldr	r0, [pc, #12]	; (8001cac <STM32_PLC_RTC+0x14>)
 8001ca0:	f7ff bce0 	b.w	8001664 <STM32_PLC_Flash_Get_Alarm_Enables>
 8001ca4:	200007a4 	.word	0x200007a4
 8001ca8:	200007a2 	.word	0x200007a2
 8001cac:	200007a0 	.word	0x200007a0

08001cb0 <STM32_PLC_RTC_Get_Date>:
}

void STM32_PLC_RTC_Get_Date(uint8_t *week_day, uint8_t *date, uint8_t *month, uint8_t *year) {
 8001cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cb2:	461d      	mov	r5, r3
	RTC_DateTypeDef sDate = {0};
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <STM32_PLC_RTC_Get_Date+0x34>)
void STM32_PLC_RTC_Get_Date(uint8_t *week_day, uint8_t *date, uint8_t *month, uint8_t *year) {
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	460f      	mov	r7, r1
 8001cba:	4616      	mov	r6, r2
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cbc:	6818      	ldr	r0, [r3, #0]
	RTC_DateTypeDef sDate = {0};
 8001cbe:	2200      	movs	r2, #0
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cc0:	a901      	add	r1, sp, #4
	RTC_DateTypeDef sDate = {0};
 8001cc2:	9201      	str	r2, [sp, #4]
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cc4:	f009 fac8 	bl	800b258 <HAL_RTC_GetDate>
	*date = sDate.Date;
 8001cc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ccc:	703b      	strb	r3, [r7, #0]
	*month = sDate.Month;
 8001cce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001cd2:	7033      	strb	r3, [r6, #0]
	*year = sDate.Year;
 8001cd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cd8:	702b      	strb	r3, [r5, #0]
	*week_day = sDate.WeekDay;
 8001cda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001cde:	7023      	strb	r3, [r4, #0]
}
 8001ce0:	b003      	add	sp, #12
 8001ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce4:	200007a4 	.word	0x200007a4

08001ce8 <STM32_PLC_RTC_Set_Date>:

void STM32_PLC_RTC_Set_Date(uint8_t date, uint8_t week_day, uint8_t month, uint8_t year) {
 8001ce8:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
	sDate.Date = date;
	sDate.Month = month;
	sDate.Year = year;
 8001cea:	f88d 3007 	strb.w	r3, [sp, #7]
	sDate.WeekDay = week_day;
	HAL_RTC_SetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <STM32_PLC_RTC_Set_Date+0x24>)
	sDate.Date = date;
 8001cf0:	f88d 0006 	strb.w	r0, [sp, #6]
	sDate.Month = month;
 8001cf4:	f88d 2005 	strb.w	r2, [sp, #5]
	sDate.WeekDay = week_day;
 8001cf8:	f88d 1004 	strb.w	r1, [sp, #4]
	HAL_RTC_SetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	a901      	add	r1, sp, #4
 8001d02:	f009 f967 	bl	800afd4 <HAL_RTC_SetDate>
}
 8001d06:	b003      	add	sp, #12
 8001d08:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d0c:	200007a4 	.word	0x200007a4

08001d10 <STM32_PLC_RTC_Get_Time>:

void STM32_PLC_RTC_Get_Time(uint8_t *seconds, uint8_t *minutes, uint8_t *hours) {
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	4606      	mov	r6, r0
 8001d16:	460d      	mov	r5, r1
 8001d18:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2214      	movs	r2, #20
 8001d1e:	a801      	add	r0, sp, #4
 8001d20:	f00c fd7c 	bl	800e81c <memset>
	HAL_RTC_GetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <STM32_PLC_RTC_Get_Time+0x38>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	a901      	add	r1, sp, #4
 8001d2c:	f009 fa6f 	bl	800b20e <HAL_RTC_GetTime>
	*seconds = sTime.Seconds;
 8001d30:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d34:	7033      	strb	r3, [r6, #0]
	*minutes = sTime.Minutes;
 8001d36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001d3a:	702b      	strb	r3, [r5, #0]
	*hours = sTime.Hours;
 8001d3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d40:	7023      	strb	r3, [r4, #0]
}
 8001d42:	b006      	add	sp, #24
 8001d44:	bd70      	pop	{r4, r5, r6, pc}
 8001d46:	bf00      	nop
 8001d48:	200007a4 	.word	0x200007a4

08001d4c <STM32_PLC_RTC_Set_Time>:

void STM32_PLC_RTC_Set_Time(uint8_t seconds, uint8_t minutes, uint8_t hours) {
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	4606      	mov	r6, r0
 8001d52:	460d      	mov	r5, r1
 8001d54:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8001d56:	2100      	movs	r1, #0
 8001d58:	2214      	movs	r2, #20
 8001d5a:	a801      	add	r0, sp, #4
 8001d5c:	f00c fd5e 	bl	800e81c <memset>
	sTime.Seconds = seconds;
	sTime.Minutes = minutes;
	sTime.Hours = hours;
	sTime.TimeFormat = RTC_FORMAT_BIN;
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <STM32_PLC_RTC_Set_Time+0x30>)
	sTime.Seconds = seconds;
 8001d62:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d66:	6818      	ldr	r0, [r3, #0]
	sTime.Minutes = minutes;
 8001d68:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	a901      	add	r1, sp, #4
	sTime.Hours = hours;
 8001d70:	f88d 4004 	strb.w	r4, [sp, #4]
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d74:	f009 f8bd 	bl	800aef2 <HAL_RTC_SetTime>
}
 8001d78:	b006      	add	sp, #24
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}
 8001d7c:	200007a4 	.word	0x200007a4

08001d80 <STM32_PLC_RTC_Get_Alarm_A>:

void STM32_PLC_RTC_Get_Alarm_A(uint8_t *date, uint8_t *hours, uint8_t *minutes) {
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	4606      	mov	r6, r0
 8001d86:	460d      	mov	r5, r1
 8001d88:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2228      	movs	r2, #40	; 0x28
 8001d8e:	4668      	mov	r0, sp
 8001d90:	f00c fd44 	bl	800e81c <memset>
	HAL_RTC_GetAlarm(real_time_clock, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <STM32_PLC_RTC_Get_Alarm_A+0x3c>)
 8001d96:	2300      	movs	r3, #0
 8001d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9c:	4669      	mov	r1, sp
 8001d9e:	6800      	ldr	r0, [r0, #0]
 8001da0:	f009 fa77 	bl	800b292 <HAL_RTC_GetAlarm>
	*date = sAlarm.AlarmDateWeekDay;
 8001da4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001da8:	7033      	strb	r3, [r6, #0]
	*hours = sAlarm.AlarmTime.Hours;
 8001daa:	f89d 3000 	ldrb.w	r3, [sp]
 8001dae:	702b      	strb	r3, [r5, #0]
	*minutes = sAlarm.AlarmTime.Minutes;
 8001db0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001db4:	7023      	strb	r3, [r4, #0]
}
 8001db6:	b00a      	add	sp, #40	; 0x28
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
 8001dba:	bf00      	nop
 8001dbc:	200007a4 	.word	0x200007a4

08001dc0 <STM32_PLC_RTC_Get_Alarm_B>:

void STM32_PLC_RTC_Get_Alarm_B(uint8_t *week_day, uint8_t *hours, uint8_t *minutes) {
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	4606      	mov	r6, r0
 8001dc6:	460d      	mov	r5, r1
 8001dc8:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2228      	movs	r2, #40	; 0x28
 8001dce:	4668      	mov	r0, sp
 8001dd0:	f00c fd24 	bl	800e81c <memset>
	HAL_RTC_GetAlarm(real_time_clock, &sAlarm, RTC_ALARM_B, RTC_FORMAT_BIN);
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <STM32_PLC_RTC_Get_Alarm_B+0x3c>)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ddc:	4669      	mov	r1, sp
 8001dde:	6800      	ldr	r0, [r0, #0]
 8001de0:	f009 fa57 	bl	800b292 <HAL_RTC_GetAlarm>
	*week_day = sAlarm.AlarmDateWeekDay;
 8001de4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001de8:	7033      	strb	r3, [r6, #0]
	*hours = sAlarm.AlarmTime.Hours;
 8001dea:	f89d 3000 	ldrb.w	r3, [sp]
 8001dee:	702b      	strb	r3, [r5, #0]
	*minutes = sAlarm.AlarmTime.Minutes;
 8001df0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001df4:	7023      	strb	r3, [r4, #0]
}
 8001df6:	b00a      	add	sp, #40	; 0x28
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200007a4 	.word	0x200007a4

08001e00 <STM32_PLC_RTC_Set_Alarm_A>:

void STM32_PLC_RTC_Set_Alarm_A(uint8_t minutes, uint8_t hours, uint8_t date) {
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	4605      	mov	r5, r0
 8001e06:	460e      	mov	r6, r1
 8001e08:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2224      	movs	r2, #36	; 0x24
 8001e0e:	4668      	mov	r0, sp
 8001e10:	f00c fd04 	bl	800e81c <memset>
	sAlarm.AlarmTime.TimeFormat = RTC_FORMAT_BIN;
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
	sAlarm.AlarmDateWeekDay = date;
	sAlarm.Alarm = RTC_ALARM_A;
 8001e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e18:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <STM32_PLC_RTC_Set_Alarm_A+0x38>)
	sAlarm.AlarmTime.Hours = hours;
 8001e1c:	f88d 6000 	strb.w	r6, [sp]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e20:	6818      	ldr	r0, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8001e22:	f88d 5001 	strb.w	r5, [sp, #1]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e26:	2200      	movs	r2, #0
 8001e28:	4669      	mov	r1, sp
	sAlarm.AlarmDateWeekDay = date;
 8001e2a:	f88d 4020 	strb.w	r4, [sp, #32]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e2e:	f009 f931 	bl	800b094 <HAL_RTC_SetAlarm_IT>
}
 8001e32:	b00a      	add	sp, #40	; 0x28
 8001e34:	bd70      	pop	{r4, r5, r6, pc}
 8001e36:	bf00      	nop
 8001e38:	200007a4 	.word	0x200007a4

08001e3c <STM32_PLC_RTC_Set_Alarm_B>:

void STM32_PLC_RTC_Set_Alarm_B(uint8_t minutes, uint8_t hours, uint8_t week_day) {
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	4605      	mov	r5, r0
 8001e42:	460e      	mov	r6, r1
 8001e44:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001e46:	2100      	movs	r1, #0
 8001e48:	2224      	movs	r2, #36	; 0x24
 8001e4a:	4668      	mov	r0, sp
 8001e4c:	f00c fce6 	bl	800e81c <memset>
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	sAlarm.AlarmTime.TimeFormat = RTC_FORMAT_BIN;
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e54:	9307      	str	r3, [sp, #28]
	sAlarm.AlarmDateWeekDay = week_day;
	sAlarm.Alarm = RTC_ALARM_B;
 8001e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <STM32_PLC_RTC_Set_Alarm_B+0x3c>)
	sAlarm.AlarmTime.Hours = hours;
 8001e5e:	f88d 6000 	strb.w	r6, [sp]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e62:	6818      	ldr	r0, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8001e64:	f88d 5001 	strb.w	r5, [sp, #1]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4669      	mov	r1, sp
	sAlarm.AlarmDateWeekDay = week_day;
 8001e6c:	f88d 4020 	strb.w	r4, [sp, #32]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e70:	f009 f910 	bl	800b094 <HAL_RTC_SetAlarm_IT>
}
 8001e74:	b00a      	add	sp, #40	; 0x28
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
 8001e78:	200007a4 	.word	0x200007a4

08001e7c <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
	if(alarm_B_enabled){
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_RTCEx_AlarmBEventCallback+0x40>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
 8001e80:	b510      	push	{r4, lr}
	if(alarm_B_enabled){
 8001e82:	b1cb      	cbz	r3, 8001eb8 <HAL_RTCEx_AlarmBEventCallback+0x3c>
		if(!alarm_B_is_active){
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_RTCEx_AlarmBEventCallback+0x44>)
 8001e86:	7818      	ldrb	r0, [r3, #0]
 8001e88:	b9b0      	cbnz	r0, 8001eb8 <HAL_RTCEx_AlarmBEventCallback+0x3c>
			alarm_B_is_active = true;
 8001e8a:	2401      	movs	r4, #1
			STM32_PLC_PWM_Set(0, 0xFFFF);
 8001e8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
			alarm_B_is_active = true;
 8001e90:	701c      	strb	r4, [r3, #0]
			STM32_PLC_PWM_Set(0, 0xFFFF);
 8001e92:	f7ff fe49 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(1, 0xFFFF);
 8001e96:	4620      	mov	r0, r4
 8001e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e9c:	f7ff fe44 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(2, 0xFFFF);
 8001ea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f7ff fe3f 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(3, 0xFFFF);
		}
	}
}
 8001eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			STM32_PLC_PWM_Set(3, 0xFFFF);
 8001eae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f7ff be38 	b.w	8001b28 <STM32_PLC_PWM_Set>
}
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	bf00      	nop
 8001ebc:	200007a2 	.word	0x200007a2
 8001ec0:	200007a3 	.word	0x200007a3

08001ec4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8001ec4:	b508      	push	{r3, lr}
	if(alarm_A_enabled){
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_RTC_AlarmAEventCallback+0x40>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b1d3      	cbz	r3, 8001f02 <HAL_RTC_AlarmAEventCallback+0x3e>
		if(!alarm_A_is_active){
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_RTC_AlarmAEventCallback+0x44>)
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	b9ba      	cbnz	r2, 8001f02 <HAL_RTC_AlarmAEventCallback+0x3e>
			alarm_A_is_active = true;
 8001ed2:	2201      	movs	r2, #1
			STM32_PLC_PWM_Set(4, 0xFFFF);
 8001ed4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ed8:	2004      	movs	r0, #4
			alarm_A_is_active = true;
 8001eda:	701a      	strb	r2, [r3, #0]
			STM32_PLC_PWM_Set(4, 0xFFFF);
 8001edc:	f7ff fe24 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(5, 0xFFFF);
 8001ee0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ee4:	2005      	movs	r0, #5
 8001ee6:	f7ff fe1f 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(6, 0xFFFF);
 8001eea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eee:	2006      	movs	r0, #6
 8001ef0:	f7ff fe1a 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(7, 0xFFFF);
		}
	}
}
 8001ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			STM32_PLC_PWM_Set(7, 0xFFFF);
 8001ef8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001efc:	2007      	movs	r0, #7
 8001efe:	f7ff be13 	b.w	8001b28 <STM32_PLC_PWM_Set>
}
 8001f02:	bd08      	pop	{r3, pc}
 8001f04:	200007a0 	.word	0x200007a0
 8001f08:	200007a1 	.word	0x200007a1

08001f0c <STM32_PLC_RTC_Deactivate_Alarm_A>:

void STM32_PLC_RTC_Deactivate_Alarm_A(){
 8001f0c:	b510      	push	{r4, lr}
	alarm_A_is_active = false;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <STM32_PLC_RTC_Deactivate_Alarm_A+0x2c>)
 8001f10:	2400      	movs	r4, #0
	STM32_PLC_PWM_Set(4, 0x0);
 8001f12:	4621      	mov	r1, r4
 8001f14:	2004      	movs	r0, #4
	alarm_A_is_active = false;
 8001f16:	701c      	strb	r4, [r3, #0]
	STM32_PLC_PWM_Set(4, 0x0);
 8001f18:	f7ff fe06 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(5, 0x0);
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	2005      	movs	r0, #5
 8001f20:	f7ff fe02 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(6, 0x0);
 8001f24:	4621      	mov	r1, r4
 8001f26:	2006      	movs	r0, #6
 8001f28:	f7ff fdfe 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(7, 0x0);
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	2007      	movs	r0, #7
}
 8001f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	STM32_PLC_PWM_Set(7, 0x0);
 8001f34:	f7ff bdf8 	b.w	8001b28 <STM32_PLC_PWM_Set>
 8001f38:	200007a1 	.word	0x200007a1

08001f3c <STM32_PLC_RTC_Enable_Alarm_A>:

void STM32_PLC_RTC_Enable_Alarm_A(bool enable){
	alarm_A_enabled = enable;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <STM32_PLC_RTC_Enable_Alarm_A+0x1c>)
void STM32_PLC_RTC_Enable_Alarm_A(bool enable){
 8001f3e:	b510      	push	{r4, lr}
	alarm_A_enabled = enable;
 8001f40:	7018      	strb	r0, [r3, #0]
	STM32_PLC_Flash_Set_Alarm_Enable(alarm_A_enabled, alarm_B_enabled);
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <STM32_PLC_RTC_Enable_Alarm_A+0x20>)
void STM32_PLC_RTC_Enable_Alarm_A(bool enable){
 8001f44:	4604      	mov	r4, r0
	STM32_PLC_Flash_Set_Alarm_Enable(alarm_A_enabled, alarm_B_enabled);
 8001f46:	7819      	ldrb	r1, [r3, #0]
 8001f48:	f7ff fa96 	bl	8001478 <STM32_PLC_Flash_Set_Alarm_Enable>
	if(!enable)
 8001f4c:	b91c      	cbnz	r4, 8001f56 <STM32_PLC_RTC_Enable_Alarm_A+0x1a>
		STM32_PLC_RTC_Deactivate_Alarm_A();
}
 8001f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		STM32_PLC_RTC_Deactivate_Alarm_A();
 8001f52:	f7ff bfdb 	b.w	8001f0c <STM32_PLC_RTC_Deactivate_Alarm_A>
}
 8001f56:	bd10      	pop	{r4, pc}
 8001f58:	200007a0 	.word	0x200007a0
 8001f5c:	200007a2 	.word	0x200007a2

08001f60 <STM32_PLC_RTC_Alarm_A_Is_Enabled>:

bool STM32_PLC_RTC_Alarm_A_Is_Enabled(){
	return alarm_A_enabled;
}
 8001f60:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <STM32_PLC_RTC_Alarm_A_Is_Enabled+0x8>)
 8001f62:	7818      	ldrb	r0, [r3, #0]
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200007a0 	.word	0x200007a0

08001f6c <STM32_PLC_RTC_Alarm_A_Is_Activated>:

bool STM32_PLC_RTC_Alarm_A_Is_Activated(){
	return alarm_A_is_active;
}
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <STM32_PLC_RTC_Alarm_A_Is_Activated+0x8>)
 8001f6e:	7818      	ldrb	r0, [r3, #0]
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200007a1 	.word	0x200007a1

08001f78 <STM32_PLC_RTC_Deactivate_Alarm_B>:

void STM32_PLC_RTC_Deactivate_Alarm_B(){
 8001f78:	b510      	push	{r4, lr}
	alarm_B_is_active = false;
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <STM32_PLC_RTC_Deactivate_Alarm_B+0x2c>)
 8001f7c:	2400      	movs	r4, #0
	STM32_PLC_PWM_Set(0, 0x0);
 8001f7e:	4621      	mov	r1, r4
 8001f80:	4620      	mov	r0, r4
	alarm_B_is_active = false;
 8001f82:	701c      	strb	r4, [r3, #0]
	STM32_PLC_PWM_Set(0, 0x0);
 8001f84:	f7ff fdd0 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(1, 0x0);
 8001f88:	4621      	mov	r1, r4
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff fdcc 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(2, 0x0);
 8001f90:	4621      	mov	r1, r4
 8001f92:	2002      	movs	r0, #2
 8001f94:	f7ff fdc8 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(3, 0x0);
 8001f98:	4621      	mov	r1, r4
 8001f9a:	2003      	movs	r0, #3
}
 8001f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	STM32_PLC_PWM_Set(3, 0x0);
 8001fa0:	f7ff bdc2 	b.w	8001b28 <STM32_PLC_PWM_Set>
 8001fa4:	200007a3 	.word	0x200007a3

08001fa8 <STM32_PLC_RTC_Enable_Alarm_B>:

void STM32_PLC_RTC_Enable_Alarm_B(bool enable){
	alarm_B_enabled = enable;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <STM32_PLC_RTC_Enable_Alarm_B+0x20>)
void STM32_PLC_RTC_Enable_Alarm_B(bool enable){
 8001faa:	b510      	push	{r4, lr}
	alarm_B_enabled = enable;
 8001fac:	7018      	strb	r0, [r3, #0]
	STM32_PLC_Flash_Set_Alarm_Enable(alarm_A_enabled, alarm_B_enabled);
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <STM32_PLC_RTC_Enable_Alarm_B+0x24>)
void STM32_PLC_RTC_Enable_Alarm_B(bool enable){
 8001fb0:	4604      	mov	r4, r0
	STM32_PLC_Flash_Set_Alarm_Enable(alarm_A_enabled, alarm_B_enabled);
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	7818      	ldrb	r0, [r3, #0]
 8001fb6:	f7ff fa5f 	bl	8001478 <STM32_PLC_Flash_Set_Alarm_Enable>
	if(!enable)
 8001fba:	b91c      	cbnz	r4, 8001fc4 <STM32_PLC_RTC_Enable_Alarm_B+0x1c>
		STM32_PLC_RTC_Deactivate_Alarm_B();
}
 8001fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		STM32_PLC_RTC_Deactivate_Alarm_B();
 8001fc0:	f7ff bfda 	b.w	8001f78 <STM32_PLC_RTC_Deactivate_Alarm_B>
}
 8001fc4:	bd10      	pop	{r4, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200007a2 	.word	0x200007a2
 8001fcc:	200007a0 	.word	0x200007a0

08001fd0 <STM32_PLC_RTC_Alarm_B_Is_Enabled>:

bool STM32_PLC_RTC_Alarm_B_Is_Enabled(){
	return alarm_B_enabled;
}
 8001fd0:	4b01      	ldr	r3, [pc, #4]	; (8001fd8 <STM32_PLC_RTC_Alarm_B_Is_Enabled+0x8>)
 8001fd2:	7818      	ldrb	r0, [r3, #0]
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200007a2 	.word	0x200007a2

08001fdc <STM32_PLC_RTC_Alarm_B_Is_Activated>:

bool STM32_PLC_RTC_Alarm_B_Is_Activated(){
	return alarm_B_is_active;
}
 8001fdc:	4b01      	ldr	r3, [pc, #4]	; (8001fe4 <STM32_PLC_RTC_Alarm_B_Is_Activated+0x8>)
 8001fde:	7818      	ldrb	r0, [r3, #0]
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200007a3 	.word	0x200007a3

08001fe8 <CDC_ReceiveCallback>:
 *
 * }
 * is there below
 */

void CDC_ReceiveCallback(uint8_t* receive_buf, uint32_t receive_len){
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	b095      	sub	sp, #84	; 0x54
 8001fee:	4606      	mov	r6, r0
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4689      	mov	r9, r1
	/* Toggle the USB LED */
	HAL_GPIO_TogglePin(LED_USB_GPIO_Port, LED_USB_Pin);
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	f007 fbee 	bl	80097da <HAL_GPIO_TogglePin>

	/* Read all bytes as they where packages */
	uint32_t byte_index = 0;
 8001ffe:	2500      	movs	r5, #0
	return byte_index;
}

static uint32_t send_back_adc_gains(uint32_t byte_index, uint8_t *receive_buf){
	/* Create array of gains */
	uint8_t send_data_array[4] = {0};
 8002000:	46a8      	mov	r8, r5
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
		break;
	}

	/* Fill the array */
	send_data_array[index++] = SEND_BACK_ANALOG_GAINS_MESSAGE_TYPE;
 8002002:	f04f 0a07 	mov.w	sl, #7
	while(byte_index < receive_len){
 8002006:	454d      	cmp	r5, r9
 8002008:	d303      	bcc.n	8002012 <CDC_ReceiveCallback+0x2a>
}
 800200a:	3754      	adds	r7, #84	; 0x54
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch(message_type){
 8002012:	5d73      	ldrb	r3, [r6, r5]
 8002014:	3b01      	subs	r3, #1
		uint8_t message_type = receive_buf[byte_index++];
 8002016:	1c6c      	adds	r4, r5, #1
		switch(message_type){
 8002018:	2b06      	cmp	r3, #6
 800201a:	f200 813c 	bhi.w	8002296 <CDC_ReceiveCallback+0x2ae>
 800201e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002022:	0007      	.short	0x0007
 8002024:	0031013a 	.word	0x0031013a
 8002028:	00d300e5 	.word	0x00d300e5
 800202c:	010600ee 	.word	0x010600ee
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 8002030:	1972      	adds	r2, r6, r5
	TxHeader.IDE = receive_buf[byte_index++]; /* CAN_ID_STD or CAN_ID_EXT */
 8002032:	5d33      	ldrb	r3, [r6, r4]
 8002034:	61fb      	str	r3, [r7, #28]
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 8002036:	78d3      	ldrb	r3, [r2, #3]
 8002038:	7891      	ldrb	r1, [r2, #2]
	TxHeader.DLC = receive_buf[byte_index++];
 800203a:	7994      	ldrb	r4, [r2, #6]
 800203c:	627c      	str	r4, [r7, #36]	; 0x24
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002044:	7951      	ldrb	r1, [r2, #5]
	CAN_TxHeaderTypeDef TxHeader = {0};
 8002046:	f8c7 8020 	str.w	r8, [r7, #32]
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 800204a:	430b      	orrs	r3, r1
 800204c:	7911      	ldrb	r1, [r2, #4]
	CAN_TxHeaderTypeDef TxHeader = {0};
 800204e:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 8002052:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	TxHeader.ExtId = ID;
 8002056:	e9c7 3305 	strd	r3, r3, [r7, #20]
	uint8_t data[TxHeader.DLC];
 800205a:	1de3      	adds	r3, r4, #7
 800205c:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
static uint32_t read_can_bus_message_from_open_source_logger(uint32_t byte_index, uint8_t *receive_buf){
 8002060:	46eb      	mov	fp, sp
	TxHeader.DLC = receive_buf[byte_index++];
 8002062:	3507      	adds	r5, #7
	uint8_t data[TxHeader.DLC];
 8002064:	ebad 0d03 	sub.w	sp, sp, r3
		data[i] = receive_buf[byte_index++];
 8002068:	4622      	mov	r2, r4
 800206a:	1971      	adds	r1, r6, r5
 800206c:	4668      	mov	r0, sp
 800206e:	f00c fbad 	bl	800e7cc <memcpy>
	STM32_PLC_CAN_Transmit(data, &TxHeader);
 8002072:	4668      	mov	r0, sp
 8002074:	f107 0114 	add.w	r1, r7, #20
 8002078:	f7ff f88a 	bl	8001190 <STM32_PLC_CAN_Transmit>
 800207c:	442c      	add	r4, r5
	return byte_index;
 800207e:	46dd      	mov	sp, fp
			byte_index = send_back_adc_gains(byte_index, receive_buf);
 8002080:	4625      	mov	r5, r4
 8002082:	e7c0      	b.n	8002006 <CDC_ReceiveCallback+0x1e>
 8002084:	4434      	add	r4, r6
		switch(message_type){
 8002086:	4623      	mov	r3, r4
 8002088:	f04f 0b00 	mov.w	fp, #0
		STM32_PLC_PWM_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 800208c:	7819      	ldrb	r1, [r3, #0]
 800208e:	785a      	ldrb	r2, [r3, #1]
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	fa5f f08b 	uxtb.w	r0, fp
 8002096:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 800209a:	f7ff fd45 	bl	8001b28 <STM32_PLC_PWM_Set>
	for(uint8_t i = 0; i < 8; i++){
 800209e:	f10b 0b01 	add.w	fp, fp, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f1bb 0f08 	cmp.w	fp, #8
 80020a8:	f103 0302 	add.w	r3, r3, #2
 80020ac:	d1ee      	bne.n	800208c <CDC_ReceiveCallback+0xa4>
 80020ae:	f04f 0b00 	mov.w	fp, #0
		STM32_PLC_Analog_Output_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 80020b2:	7c21      	ldrb	r1, [r4, #16]
 80020b4:	7c63      	ldrb	r3, [r4, #17]
 80020b6:	fa5f f08b 	uxtb.w	r0, fp
 80020ba:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	for(uint8_t i = 0; i < 3; i++){
 80020be:	f10b 0b01 	add.w	fp, fp, #1
		STM32_PLC_Analog_Output_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 80020c2:	f7fe ffe5 	bl	8001090 <STM32_PLC_Analog_Output_Set>
	for(uint8_t i = 0; i < 3; i++){
 80020c6:	f1bb 0f03 	cmp.w	fp, #3
 80020ca:	f104 0402 	add.w	r4, r4, #2
 80020ce:	d1f0      	bne.n	80020b2 <CDC_ReceiveCallback+0xca>
	uint8_t send_data_array[60] = {0};
 80020d0:	2238      	movs	r2, #56	; 0x38
 80020d2:	2100      	movs	r1, #0
 80020d4:	f107 0018 	add.w	r0, r7, #24
		byte_index += 2;
 80020d8:	f105 0417 	add.w	r4, r5, #23
	uint8_t send_data_array[60] = {0};
 80020dc:	f8c7 8014 	str.w	r8, [r7, #20]
 80020e0:	f107 0514 	add.w	r5, r7, #20
 80020e4:	f00c fb9a 	bl	800e81c <memset>
	send_data_array[index++] = SEND_MEASUREMENTS_MESSAGE_TYPE;
 80020e8:	2302      	movs	r3, #2
 80020ea:	753b      	strb	r3, [r7, #20]
 80020ec:	462a      	mov	r2, r5
 80020ee:	2300      	movs	r3, #0
 80020f0:	46ab      	mov	fp, r5
		send_data_array[index++] = STM32_PLC_Digital_Input_Get(i);
 80020f2:	b2d8      	uxtb	r0, r3
 80020f4:	603a      	str	r2, [r7, #0]
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	f7ff f8a4 	bl	8001244 <STM32_PLC_Digital_Input_Get>
	for (uint8_t i = 0; i < 10; i++)
 80020fc:	687b      	ldr	r3, [r7, #4]
		send_data_array[index++] = STM32_PLC_Digital_Input_Get(i);
 80020fe:	683a      	ldr	r2, [r7, #0]
	for (uint8_t i = 0; i < 10; i++)
 8002100:	3301      	adds	r3, #1
 8002102:	2b0a      	cmp	r3, #10
		send_data_array[index++] = STM32_PLC_Digital_Input_Get(i);
 8002104:	f802 0f01 	strb.w	r0, [r2, #1]!
	for (uint8_t i = 0; i < 10; i++)
 8002108:	d1f3      	bne.n	80020f2 <CDC_ReceiveCallback+0x10a>
 800210a:	462a      	mov	r2, r5
 800210c:	2300      	movs	r3, #0
		uint16_t adc_value = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	603a      	str	r2, [r7, #0]
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	f7fe ff18 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
	for (uint8_t i = 0; i < 12; i++) {
 8002118:	687b      	ldr	r3, [r7, #4]
		send_data_array[index++] =  adc_value>> 8;
 800211a:	683a      	ldr	r2, [r7, #0]
	for (uint8_t i = 0; i < 12; i++) {
 800211c:	3301      	adds	r3, #1
		send_data_array[index++] =  adc_value>> 8;
 800211e:	0a01      	lsrs	r1, r0, #8
	for (uint8_t i = 0; i < 12; i++) {
 8002120:	2b0c      	cmp	r3, #12
		send_data_array[index++] =  adc_value>> 8;
 8002122:	72d1      	strb	r1, [r2, #11]
		send_data_array[index++] = adc_value;
 8002124:	7310      	strb	r0, [r2, #12]
	for (uint8_t i = 0; i < 12; i++) {
 8002126:	f102 0202 	add.w	r2, r2, #2
 800212a:	d1f0      	bne.n	800210e <CDC_ReceiveCallback+0x126>
 800212c:	2300      	movs	r3, #0
		uint16_t adc_value = STM32_PLC_Analog_Input_DADC_Get_Raw(i);
 800212e:	b2d8      	uxtb	r0, r3
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	f7fe ff61 	bl	8000ff8 <STM32_PLC_Analog_Input_DADC_Get_Raw>
	for (uint8_t i = 0; i < 5; i++) {
 8002136:	687b      	ldr	r3, [r7, #4]
		send_data_array[index++] = adc_value;
 8002138:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	for (uint8_t i = 0; i < 5; i++) {
 800213c:	3301      	adds	r3, #1
		send_data_array[index++] = adc_value >> 8;
 800213e:	f3c0 2207 	ubfx	r2, r0, #8, #8
	for (uint8_t i = 0; i < 5; i++) {
 8002142:	2b05      	cmp	r3, #5
		send_data_array[index++] = adc_value >> 8;
 8002144:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
	for (uint8_t i = 0; i < 5; i++) {
 8002148:	f105 0502 	add.w	r5, r5, #2
 800214c:	d1ef      	bne.n	800212e <CDC_ReceiveCallback+0x146>
 800214e:	2300      	movs	r3, #0
		send_data_array[index++] = adc_value;
 8002150:	252d      	movs	r5, #45	; 0x2d
		uint16_t input_capture_value = STM32_PLC_Input_Capture_Get_Raw(i);
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	f7ff fb7b 	bl	8001850 <STM32_PLC_Input_Capture_Get_Raw>
		send_data_array[index++] = input_capture_value >> 8;
 800215a:	f105 0348 	add.w	r3, r5, #72	; 0x48
 800215e:	f107 0108 	add.w	r1, r7, #8
 8002162:	1c6a      	adds	r2, r5, #1
 8002164:	1859      	adds	r1, r3, r1
		send_data_array[index++] = input_capture_value;
 8002166:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800216a:	fa53 f282 	uxtab	r2, r3, r2
	for (uint8_t i = 0; i < 4; i++) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3301      	adds	r3, #1
		send_data_array[index++] = input_capture_value >> 8;
 8002172:	ea4f 2c10 	mov.w	ip, r0, lsr #8
		send_data_array[index++] = input_capture_value;
 8002176:	3502      	adds	r5, #2
	for (uint8_t i = 0; i < 4; i++) {
 8002178:	2b04      	cmp	r3, #4
		send_data_array[index++] = input_capture_value >> 8;
 800217a:	f801 cc3c 	strb.w	ip, [r1, #-60]
		send_data_array[index++] = input_capture_value;
 800217e:	b2ed      	uxtb	r5, r5
 8002180:	f802 0c3c 	strb.w	r0, [r2, #-60]
	for (uint8_t i = 0; i < 4; i++) {
 8002184:	d1e5      	bne.n	8002152 <CDC_ReceiveCallback+0x16a>
 8002186:	2300      	movs	r3, #0
		send_data_array[index++] = input_capture_value;
 8002188:	2535      	movs	r5, #53	; 0x35
		uint16_t encoder_value = STM32_PLC_Encoder_Get_Raw(i);
 800218a:	b2d8      	uxtb	r0, r3
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	f7ff f8c3 	bl	8001318 <STM32_PLC_Encoder_Get_Raw>
		send_data_array[index++] = encoder_value >> 8;
 8002192:	f105 0348 	add.w	r3, r5, #72	; 0x48
 8002196:	f107 0108 	add.w	r1, r7, #8
 800219a:	1c6a      	adds	r2, r5, #1
 800219c:	1859      	adds	r1, r3, r1
		send_data_array[index++] = encoder_value;
 800219e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021a2:	fa53 f282 	uxtab	r2, r3, r2
	for (uint8_t i = 0; i < 3; i++) {
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3301      	adds	r3, #1
		send_data_array[index++] = encoder_value >> 8;
 80021aa:	f3c0 2c07 	ubfx	ip, r0, #8, #8
		send_data_array[index++] = encoder_value;
 80021ae:	3502      	adds	r5, #2
	for (uint8_t i = 0; i < 3; i++) {
 80021b0:	2b03      	cmp	r3, #3
		send_data_array[index++] = encoder_value >> 8;
 80021b2:	f801 cc3c 	strb.w	ip, [r1, #-60]
		send_data_array[index++] = encoder_value;
 80021b6:	b2ed      	uxtb	r5, r5
 80021b8:	f802 0c3c 	strb.w	r0, [r2, #-60]
	for (uint8_t i = 0; i < 3; i++) {
 80021bc:	d1e5      	bne.n	800218a <CDC_ReceiveCallback+0x1a2>
	CDC_Transmit_FS(send_data_array, index);
 80021be:	213b      	movs	r1, #59	; 0x3b
 80021c0:	4658      	mov	r0, fp
	send_data_array[index++] = prescaler_for_PWM_0_3;
	send_data_array[index++] = prescaler_for_PWM_4_7 >> 8;
	send_data_array[index++] = prescaler_for_PWM_4_7;

	/* Send the data via USB */
	CDC_Transmit_FS(send_data_array, index);
 80021c2:	f00c f903 	bl	800e3cc <CDC_Transmit_FS>
}
 80021c6:	e75b      	b.n	8002080 <CDC_ReceiveCallback+0x98>
	uint16_t prescaler = receive_buf[byte_index] << 8 | receive_buf[byte_index + 1];
 80021c8:	1973      	adds	r3, r6, r5
	uint8_t pwm_peripheral = receive_buf[byte_index++];
 80021ca:	5d31      	ldrb	r1, [r6, r4]
	uint16_t prescaler = receive_buf[byte_index] << 8 | receive_buf[byte_index + 1];
 80021cc:	789a      	ldrb	r2, [r3, #2]
 80021ce:	78d8      	ldrb	r0, [r3, #3]
	byte_index += 2;
 80021d0:	1d2c      	adds	r4, r5, #4
	uint16_t prescaler = receive_buf[byte_index] << 8 | receive_buf[byte_index + 1];
 80021d2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	switch(pwm_peripheral){
 80021d6:	b129      	cbz	r1, 80021e4 <CDC_ReceiveCallback+0x1fc>
 80021d8:	2901      	cmp	r1, #1
 80021da:	f47f af51 	bne.w	8002080 <CDC_ReceiveCallback+0x98>
		STM32_PLC_PWM4_To_PWM7_Set_Prescaler(prescaler, true);
 80021de:	f7ff fd51 	bl	8001c84 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>
		break;
 80021e2:	e74d      	b.n	8002080 <CDC_ReceiveCallback+0x98>
		STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler, true);
 80021e4:	2101      	movs	r1, #1
 80021e6:	f7ff fd43 	bl	8001c70 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>
		break;
 80021ea:	e749      	b.n	8002080 <CDC_ReceiveCallback+0x98>
	uint8_t sdadc = receive_buf[byte_index++];
 80021ec:	5d30      	ldrb	r0, [r6, r4]
	uint8_t gain = receive_buf[byte_index++];
 80021ee:	1d2c      	adds	r4, r5, #4
 80021f0:	4435      	add	r5, r6
	STM32_PLC_Analog_Input_Set_Gain(sdadc, configuration_index, gain, true);
 80021f2:	2301      	movs	r3, #1
 80021f4:	78ea      	ldrb	r2, [r5, #3]
 80021f6:	78a9      	ldrb	r1, [r5, #2]
 80021f8:	f7fe fd7c 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
			break;
 80021fc:	e740      	b.n	8002080 <CDC_ReceiveCallback+0x98>
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 80021fe:	f107 0112 	add.w	r1, r7, #18
 8002202:	f107 0010 	add.w	r0, r7, #16
	uint8_t send_data_array[5] = {0};
 8002206:	f8c7 8014 	str.w	r8, [r7, #20]
 800220a:	f887 8018 	strb.w	r8, [r7, #24]
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 800220e:	f7ff fa1a 	bl	8001646 <STM32_PLC_Flash_Get_PWM_Prescalers>
	send_data_array[index++] = SEND_BACK_PWM_PRESCALERS_MESSAGE_TYPE;
 8002212:	2306      	movs	r3, #6
 8002214:	753b      	strb	r3, [r7, #20]
	send_data_array[index++] = prescaler_for_PWM_0_3 >> 8;
 8002216:	8a3b      	ldrh	r3, [r7, #16]
	send_data_array[index++] = prescaler_for_PWM_0_3;
 8002218:	75bb      	strb	r3, [r7, #22]
	send_data_array[index++] = prescaler_for_PWM_0_3 >> 8;
 800221a:	0a1a      	lsrs	r2, r3, #8
	send_data_array[index++] = prescaler_for_PWM_4_7 >> 8;
 800221c:	8a7b      	ldrh	r3, [r7, #18]
	send_data_array[index++] = prescaler_for_PWM_0_3 >> 8;
 800221e:	757a      	strb	r2, [r7, #21]
	send_data_array[index++] = prescaler_for_PWM_4_7 >> 8;
 8002220:	0a1a      	lsrs	r2, r3, #8
 8002222:	75fa      	strb	r2, [r7, #23]
	send_data_array[index++] = prescaler_for_PWM_4_7;
 8002224:	763b      	strb	r3, [r7, #24]
	CDC_Transmit_FS(send_data_array, index);
 8002226:	2105      	movs	r1, #5
 8002228:	f107 0014 	add.w	r0, r7, #20
 800222c:	e7c9      	b.n	80021c2 <CDC_ReceiveCallback+0x1da>
	uint8_t sdadc = receive_buf[byte_index++];
 800222e:	5d33      	ldrb	r3, [r6, r4]
	uint8_t send_data_array[4] = {0};
 8002230:	f8c7 8014 	str.w	r8, [r7, #20]
	switch(sdadc){
 8002234:	2b02      	cmp	r3, #2
	uint8_t sdadc = receive_buf[byte_index++];
 8002236:	f105 0502 	add.w	r5, r5, #2
	switch(sdadc){
 800223a:	d01a      	beq.n	8002272 <CDC_ReceiveCallback+0x28a>
 800223c:	2b03      	cmp	r3, #3
 800223e:	d021      	beq.n	8002284 <CDC_ReceiveCallback+0x29c>
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <CDC_ReceiveCallback+0x26c>
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8002244:	f107 0212 	add.w	r2, r7, #18
 8002248:	f107 0110 	add.w	r1, r7, #16
 800224c:	f107 000f 	add.w	r0, r7, #15
 8002250:	f7ff f9a5 	bl	800159e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>
	send_data_array[index++] = gain_for_configuration_index_0;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	757b      	strb	r3, [r7, #21]
	send_data_array[index++] = gain_for_configuration_index_1;
 8002258:	7c3b      	ldrb	r3, [r7, #16]
 800225a:	75bb      	strb	r3, [r7, #22]
	CDC_Transmit_FS(send_data_array, index);
 800225c:	2104      	movs	r1, #4
	send_data_array[index++] = gain_for_configuration_index_2;
 800225e:	7cbb      	ldrb	r3, [r7, #18]
	send_data_array[index++] = SEND_BACK_ANALOG_GAINS_MESSAGE_TYPE;
 8002260:	f887 a014 	strb.w	sl, [r7, #20]
	CDC_Transmit_FS(send_data_array, index);
 8002264:	f107 0014 	add.w	r0, r7, #20
	send_data_array[index++] = gain_for_configuration_index_2;
 8002268:	75fb      	strb	r3, [r7, #23]
			byte_index = send_back_adc_gains(byte_index, receive_buf);
 800226a:	462c      	mov	r4, r5
	CDC_Transmit_FS(send_data_array, index);
 800226c:	f00c f8ae 	bl	800e3cc <CDC_Transmit_FS>
			break;
 8002270:	e706      	b.n	8002080 <CDC_ReceiveCallback+0x98>
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8002272:	f107 0212 	add.w	r2, r7, #18
 8002276:	f107 0110 	add.w	r1, r7, #16
 800227a:	f107 000f 	add.w	r0, r7, #15
 800227e:	f7ff f9aa 	bl	80015d6 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>
		break;
 8002282:	e7e7      	b.n	8002254 <CDC_ReceiveCallback+0x26c>
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8002284:	f107 0212 	add.w	r2, r7, #18
 8002288:	f107 0110 	add.w	r1, r7, #16
 800228c:	f107 000f 	add.w	r0, r7, #15
 8002290:	f7ff f9bd 	bl	800160e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>
		break;
 8002294:	e7de      	b.n	8002254 <CDC_ReceiveCallback+0x26c>
		switch(message_type){
 8002296:	464d      	mov	r5, r9
 8002298:	e6b5      	b.n	8002006 <CDC_ReceiveCallback+0x1e>

0800229a <CAN_Send_Message>:
	internal_DLC[buffer_index_receive] = 0;
	buffer_index_receive++;										/* When this is 256, then it will be come 0 again */
}
#endif

ENUM_J1939_STATUS_CODES CAN_Send_Message(uint32_t ID, uint8_t data[]) {
 800229a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ENUM_J1939_STATUS_CODES status;
	#if PROCESSOR_CHOICE == STM32
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;											/* Here we are sending 8 bytes */
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 800229c:	2300      	movs	r3, #0
ENUM_J1939_STATUS_CODES CAN_Send_Message(uint32_t ID, uint8_t data[]) {
 800229e:	460a      	mov	r2, r1
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 80022a0:	2108      	movs	r1, #8
 80022a2:	e9cd 3103 	strd	r3, r1, [sp, #12]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 80022a6:	2104      	movs	r1, #4
	TxHeader.TransmitGlobalTime = DISABLE;
	TxHeader.ExtId = ID;
	TxHeader.StdId = 0x00; 										/* Not used */
 80022a8:	e9cd 3000 	strd	r3, r0, [sp]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 80022ac:	9102      	str	r1, [sp, #8]
	status = STM32_PLC_CAN_Transmit(data, &TxHeader);
 80022ae:	4610      	mov	r0, r2
 80022b0:	4669      	mov	r1, sp
	TxHeader.TransmitGlobalTime = DISABLE;
 80022b2:	f88d 3014 	strb.w	r3, [sp, #20]
	status = STM32_PLC_CAN_Transmit(data, &TxHeader);
 80022b6:	f7fe ff6b 	bl	8001190 <STM32_PLC_CAN_Transmit>
	#else
	/* If no processor are used, use internal feedback for debugging */
	status = Internal_Transmit(ID, data, 8);
	#endif
	return status;
}
 80022ba:	b007      	add	sp, #28
 80022bc:	f85d fb04 	ldr.w	pc, [sp], #4

080022c0 <CAN_Send_Request>:

/* Send a PGN request
 * PGN: 0x00EA00 (59904)
 */
ENUM_J1939_STATUS_CODES CAN_Send_Request(uint32_t ID, uint8_t PGN[]) {
 80022c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ENUM_J1939_STATUS_CODES status;
	#if PROCESSOR_CHOICE == STM32
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 3;											/* Here we are only sending 3 bytes */
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 80022c2:	2300      	movs	r3, #0
ENUM_J1939_STATUS_CODES CAN_Send_Request(uint32_t ID, uint8_t PGN[]) {
 80022c4:	460a      	mov	r2, r1
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 80022c6:	2103      	movs	r1, #3
 80022c8:	e9cd 3103 	strd	r3, r1, [sp, #12]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 80022cc:	2104      	movs	r1, #4
	TxHeader.TransmitGlobalTime = DISABLE;
	TxHeader.ExtId = ID;
	TxHeader.StdId = 0x00; 										/* Not used */
 80022ce:	e9cd 3000 	strd	r3, r0, [sp]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 80022d2:	9102      	str	r1, [sp, #8]
	status = STM32_PLC_CAN_Transmit(PGN, &TxHeader);
 80022d4:	4610      	mov	r0, r2
 80022d6:	4669      	mov	r1, sp
	TxHeader.TransmitGlobalTime = DISABLE;
 80022d8:	f88d 3014 	strb.w	r3, [sp, #20]
	status = STM32_PLC_CAN_Transmit(PGN, &TxHeader);
 80022dc:	f7fe ff58 	bl	8001190 <STM32_PLC_CAN_Transmit>
	#else
	/* If no processor are used, use internal feedback for debugging */
	status = Internal_Transmit(ID, PGN, 3);
	#endif
	return status;
}
 80022e0:	b007      	add	sp, #28
 80022e2:	f85d fb04 	ldr.w	pc, [sp], #4

080022e6 <Load_Struct>:
 80022e6:	2001      	movs	r0, #1
 80022e8:	4770      	bx	lr

080022ea <ISO_11783_Send_Auxiliary_Valve_Command>:

/*
 * Send an auxiliary valve command to all ECU
 * PGN: 0x00FE30 (65072) to 0x00FE3F (65087)
 */
ENUM_J1939_STATUS_CODES ISO_11783_Send_Auxiliary_Valve_Command(J1939 *j1939, uint8_t valve_number, uint8_t standard_flow, uint8_t fail_safe_mode, uint8_t valve_state) {
 80022ea:	b513      	push	{r0, r1, r4, lr}
	uint32_t ID = (0x0CFE << 16) | ((0x30 + valve_number) << 8) | j1939->information_this_ECU.this_ECU_address;
 80022ec:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80022f0:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80022f4:	f890 02d4 	ldrb.w	r0, [r0, #724]	; 0x2d4
	uint8_t data[8];
	data[0] = standard_flow;
	data[1] = 0xFF; 												/* Reserved */
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 80022f8:	f89d 1010 	ldrb.w	r1, [sp, #16]
	data[0] = standard_flow;
 80022fc:	f88d 2000 	strb.w	r2, [sp]
	uint32_t ID = (0x0CFE << 16) | ((0x30 + valve_number) << 8) | j1939->information_this_ECU.this_ECU_address;
 8002300:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 8002304:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
	data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;			/* All reserved */
	return CAN_Send_Message(ID, data);
 8002308:	f040 604f 	orr.w	r0, r0, #217055232	; 0xcf00000
	data[1] = 0xFF; 												/* Reserved */
 800230c:	22ff      	movs	r2, #255	; 0xff
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 800230e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	return CAN_Send_Message(ID, data);
 8002312:	4669      	mov	r1, sp
 8002314:	f440 2060 	orr.w	r0, r0, #917504	; 0xe0000
	data[1] = 0xFF; 												/* Reserved */
 8002318:	f88d 2001 	strb.w	r2, [sp, #1]
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 800231c:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;			/* All reserved */
 8002320:	f88d 2007 	strb.w	r2, [sp, #7]
 8002324:	f88d 2006 	strb.w	r2, [sp, #6]
 8002328:	f88d 2005 	strb.w	r2, [sp, #5]
 800232c:	f88d 2004 	strb.w	r2, [sp, #4]
 8002330:	f88d 2003 	strb.w	r2, [sp, #3]
	return CAN_Send_Message(ID, data);
 8002334:	f7ff ffb1 	bl	800229a <CAN_Send_Message>
}
 8002338:	b002      	add	sp, #8
 800233a:	bd10      	pop	{r4, pc}

0800233c <Open_SAE_J1939_Startup_ECU>:

#include "../../Open SAE J1939/Hardware/Hardware.h"
#include "../../Open SAE J1939/Open_SAE_J1939/Open_SAE_J1939.h"

/* Load our ECU parameters into J1939 structure. Very useful if you want your ECU remember its NAME + address + identifications at startup. */
bool Open_SAE_J1939_Startup_ECU(J1939* j1939) {
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	af00      	add	r7, sp, #0
	uint32_t ECU_information_length = sizeof(Information_this_ECU);
	uint8_t ECU_information_data[ECU_information_length];
 8002340:	b0ca      	sub	sp, #296	; 0x128
	memset(ECU_information_data, 0, ECU_information_length);
 8002342:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002346:	2100      	movs	r1, #0
bool Open_SAE_J1939_Startup_ECU(J1939* j1939) {
 8002348:	4604      	mov	r4, r0
	memset(ECU_information_data, 0, ECU_information_length);
 800234a:	4668      	mov	r0, sp
 800234c:	f00c fa66 	bl	800e81c <memset>
	if(!Load_Struct(ECU_information_data, ECU_information_length, INFORMATION_THIS_ECU))
 8002350:	4a16      	ldr	r2, [pc, #88]	; (80023ac <Open_SAE_J1939_Startup_ECU+0x70>)
 8002352:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002356:	4668      	mov	r0, sp
 8002358:	f7ff ffc5 	bl	80022e6 <Load_Struct>
 800235c:	4605      	mov	r5, r0
 800235e:	b310      	cbz	r0, 80023a6 <Open_SAE_J1939_Startup_ECU+0x6a>
		return false; /* Problems occurs */
	memcpy(&j1939->information_this_ECU, (Information_this_ECU*)ECU_information_data, ECU_information_length);
 8002360:	f504 5096 	add.w	r0, r4, #4800	; 0x12c0
 8002364:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002368:	4669      	mov	r1, sp
 800236a:	3004      	adds	r0, #4
 800236c:	f00c fa2e 	bl	800e7cc <memcpy>

	/* If we are going to send and receive the ECU identification and component identification, we need to specify the size of them */
	j1939->information_this_ECU.this_identifications.ecu_identification.length_of_each_field = 30;
 8002370:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8002374:	231e      	movs	r3, #30
 8002376:	f882 32f5 	strb.w	r3, [r2, #757]	; 0x2f5
	j1939->information_this_ECU.this_identifications.component_identification.length_of_each_field = 30;
 800237a:	f882 336f 	strb.w	r3, [r2, #879]	; 0x36f
	j1939->from_other_ecu_identifications.ecu_identification.length_of_each_field = 30;
	j1939->from_other_ecu_identifications.component_identification.length_of_each_field = 30;

	/* Clear other ECU addresses by setting the broadcast address to them */
	memset(j1939->other_ECU_address, 0xFF, 0xFF);
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	4611      	mov	r1, r2
	j1939->from_other_ecu_identifications.ecu_identification.length_of_each_field = 30;
 8002382:	f884 3990 	strb.w	r3, [r4, #2448]	; 0x990
	j1939->from_other_ecu_identifications.component_identification.length_of_each_field = 30;
 8002386:	f884 3a0a 	strb.w	r3, [r4, #2570]	; 0xa0a
	memset(j1939->other_ECU_address, 0xFF, 0xFF);
 800238a:	f104 000f 	add.w	r0, r4, #15
 800238e:	f00c fa45 	bl	800e81c <memset>
	j1939->number_of_cannot_claim_address = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	73a3      	strb	r3, [r4, #14]
	j1939->number_of_other_ECU = 0;
 8002396:	7363      	strb	r3, [r4, #13]

	/* This broadcast out this ECU NAME + address to all other ECU:s */
	SAE_J1939_Response_Request_Address_Claimed(j1939);
 8002398:	4620      	mov	r0, r4
 800239a:	f000 f89f 	bl	80024dc <SAE_J1939_Response_Request_Address_Claimed>

	/* This asking all ECU about their NAME + address */
	SAE_J1939_Send_Request_Address_Claimed(j1939, 0xFF);
 800239e:	21ff      	movs	r1, #255	; 0xff
 80023a0:	4620      	mov	r0, r4
 80023a2:	f000 f887 	bl	80024b4 <SAE_J1939_Send_Request_Address_Claimed>

	/* OK */
	return true;
}
 80023a6:	4628      	mov	r0, r5
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdb0      	pop	{r4, r5, r7, pc}
 80023ac:	08012c6b 	.word	0x08012c6b

080023b0 <SAE_J1939_Send_Request>:

/*
 * Request PGN information at other ECU
 * PGN: 0x00EA00 (59904)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Request(J1939 *j1939, uint8_t DA, uint32_t PGN_code) {
 80023b0:	b507      	push	{r0, r1, r2, lr}
	uint8_t PGN[3];
	PGN[0] = PGN_code;														/* PGN least significant bit */
	PGN[1] = PGN_code >> 8;													/* PGN mid bit */
 80023b2:	0a13      	lsrs	r3, r2, #8
 80023b4:	f88d 3005 	strb.w	r3, [sp, #5]
	PGN[2] = PGN_code >> 16;												/* PGN most significant bit */
	uint32_t ID = (0x18EA << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 80023b8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
	PGN[0] = PGN_code;														/* PGN least significant bit */
 80023bc:	f88d 2004 	strb.w	r2, [sp, #4]
	uint32_t ID = (0x18EA << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 80023c0:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
 80023c4:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
	return CAN_Send_Request(ID, PGN);
 80023c8:	f040 50c7 	orr.w	r0, r0, #417333248	; 0x18e00000
	PGN[2] = PGN_code >> 16;												/* PGN most significant bit */
 80023cc:	0c12      	lsrs	r2, r2, #16
	return CAN_Send_Request(ID, PGN);
 80023ce:	a901      	add	r1, sp, #4
 80023d0:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
	PGN[2] = PGN_code >> 16;												/* PGN most significant bit */
 80023d4:	f88d 2006 	strb.w	r2, [sp, #6]
	return CAN_Send_Request(ID, PGN);
 80023d8:	f7ff ff72 	bl	80022c0 <CAN_Send_Request>
}
 80023dc:	b003      	add	sp, #12
 80023de:	f85d fb04 	ldr.w	pc, [sp], #4

080023e2 <SAE_J1939_Send_Transport_Protocol_Connection_Management>:

/*
 * Send information to other ECU about how much sequence data packages this ECU is going to send to other ECU
 * PGN: 0x00EC00 (60416)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Connection_Management(J1939 *j1939, uint8_t DA) {
 80023e2:	b507      	push	{r0, r1, r2, lr}
	uint32_t ID = (0x1CEC << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 80023e4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80023e8:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
 80023ec:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
	uint8_t data[8];
	data[0] = j1939->this_ecu_tp_cm.control_byte;
 80023f0:	f890 3a84 	ldrb.w	r3, [r0, #2692]	; 0xa84
 80023f4:	f88d 3000 	strb.w	r3, [sp]
	data[1] = j1939->this_ecu_tp_cm.total_message_size;
 80023f8:	f8b0 3a86 	ldrh.w	r3, [r0, #2694]	; 0xa86
 80023fc:	f88d 3001 	strb.w	r3, [sp, #1]
	data[2] = j1939->this_ecu_tp_cm.total_message_size >> 8;
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = j1939->this_ecu_tp_cm.number_of_packages;
 8002406:	f890 3a88 	ldrb.w	r3, [r0, #2696]	; 0xa88
 800240a:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = 0xFF; 															/* Reserved */
 800240e:	23ff      	movs	r3, #255	; 0xff
 8002410:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message;
 8002414:	f8d0 3a8c 	ldr.w	r3, [r0, #2700]	; 0xa8c
 8002418:	f88d 3005 	strb.w	r3, [sp, #5]
	data[6] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 8;
 800241c:	0a19      	lsrs	r1, r3, #8
	data[7] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 16;
	return CAN_Send_Message(ID, data);
 800241e:	f042 50e7 	orr.w	r0, r2, #484442112	; 0x1ce00000
	data[6] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 8;
 8002422:	f88d 1006 	strb.w	r1, [sp, #6]
	data[7] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 16;
 8002426:	0c1b      	lsrs	r3, r3, #16
	return CAN_Send_Message(ID, data);
 8002428:	4669      	mov	r1, sp
 800242a:	f440 2040 	orr.w	r0, r0, #786432	; 0xc0000
	data[7] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 16;
 800242e:	f88d 3007 	strb.w	r3, [sp, #7]
	return CAN_Send_Message(ID, data);
 8002432:	f7ff ff32 	bl	800229a <CAN_Send_Message>
}
 8002436:	b003      	add	sp, #12
 8002438:	f85d fb04 	ldr.w	pc, [sp], #4

0800243c <SAE_J1939_Send_Transport_Protocol_Data_Transfer>:

/*
 * Send sequence data packages to other ECU that we have loaded
 * PGN: 0x00EB00 (60160)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Data_Transfer(J1939 *j1939, uint8_t DA){
 800243c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t ID = (0x1CEB << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 8002440:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Data_Transfer(J1939 *j1939, uint8_t DA){
 8002444:	4607      	mov	r7, r0
	uint32_t ID = (0x1CEB << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 8002446:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
 800244a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800244e:	f041 54e7 	orr.w	r4, r1, #484442112	; 0x1ce00000
 8002452:	f444 2430 	orr.w	r4, r4, #720896	; 0xb0000
	uint8_t package[8];
	uint16_t bytes_sent = 0;
	ENUM_J1939_STATUS_CODES status = STATUS_SEND_OK;
	for(uint8_t i = 1; i <= j1939->this_ecu_tp_cm.number_of_packages; i++) {
 8002456:	2501      	movs	r5, #1
	uint16_t bytes_sent = 0;
 8002458:	2600      	movs	r6, #0
		package[0] = i; 																	/* Number of package */
		for(uint8_t j = 0; j < 7; j++)
			if(bytes_sent < j1939->this_ecu_tp_cm.total_message_size)
				package[j+1] = j1939->this_ecu_tp_dt.data[bytes_sent++];					/* Data that we have collected */
			 else
				package[j+1] = 0xFF; 														/* Reserved */
 800245a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	for(uint8_t i = 1; i <= j1939->this_ecu_tp_cm.number_of_packages; i++) {
 800245e:	f897 3a88 	ldrb.w	r3, [r7, #2696]	; 0xa88
 8002462:	42ab      	cmp	r3, r5
 8002464:	d203      	bcs.n	800246e <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x32>

		status = CAN_Send_Message(ID, package);
		if(status != STATUS_SEND_OK)
			return status;
	}
	return status;
 8002466:	2000      	movs	r0, #0
}
 8002468:	b002      	add	sp, #8
 800246a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		package[0] = i; 																	/* Number of package */
 800246e:	466a      	mov	r2, sp
			if(bytes_sent < j1939->this_ecu_tp_cm.total_message_size)
 8002470:	f8b7 0a86 	ldrh.w	r0, [r7, #2694]	; 0xa86
		package[0] = i; 																	/* Number of package */
 8002474:	f88d 5000 	strb.w	r5, [sp]
			if(bytes_sent < j1939->this_ecu_tp_cm.total_message_size)
 8002478:	2307      	movs	r3, #7
 800247a:	4611      	mov	r1, r2
 800247c:	42b0      	cmp	r0, r6
				package[j+1] = j1939->this_ecu_tp_dt.data[bytes_sent++];					/* Data that we have collected */
 800247e:	bf84      	itt	hi
 8002480:	f106 0c01 	addhi.w	ip, r6, #1
 8002484:	19f6      	addhi	r6, r6, r7
		for(uint8_t j = 0; j < 7; j++)
 8002486:	f103 33ff 	add.w	r3, r3, #4294967295
				package[j+1] = j1939->this_ecu_tp_dt.data[bytes_sent++];					/* Data that we have collected */
 800248a:	bf85      	ittet	hi
 800248c:	f896 6a95 	ldrbhi.w	r6, [r6, #2709]	; 0xa95
 8002490:	7056      	strbhi	r6, [r2, #1]
				package[j+1] = 0xFF; 														/* Reserved */
 8002492:	f882 8001 	strbls.w	r8, [r2, #1]
				package[j+1] = j1939->this_ecu_tp_dt.data[bytes_sent++];					/* Data that we have collected */
 8002496:	fa1f f68c 	uxthhi.w	r6, ip
		for(uint8_t j = 0; j < 7; j++)
 800249a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800249e:	f102 0201 	add.w	r2, r2, #1
 80024a2:	d1eb      	bne.n	800247c <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x40>
		status = CAN_Send_Message(ID, package);
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff fef8 	bl	800229a <CAN_Send_Message>
		if(status != STATUS_SEND_OK)
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d1dc      	bne.n	8002468 <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x2c>
	for(uint8_t i = 1; i <= j1939->this_ecu_tp_cm.number_of_packages; i++) {
 80024ae:	3501      	adds	r5, #1
 80024b0:	b2ed      	uxtb	r5, r5
 80024b2:	e7d4      	b.n	800245e <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x22>

080024b4 <SAE_J1939_Send_Request_Address_Claimed>:

/*
 * Send request address claimed to other ECU. Every time we asking addresses from other ECU, then we clear our storage of other ECU
 * PGN: 0x00EE00 (60928)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Request_Address_Claimed(J1939 *j1939, uint8_t DA) {
 80024b4:	b538      	push	{r3, r4, r5, lr}
	/* Delete all addresses by setting them to broadcast address and set the counters to 0 */
	memset(j1939->other_ECU_address, 0xFF, 0xFF);
 80024b6:	22ff      	movs	r2, #255	; 0xff
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Request_Address_Claimed(J1939 *j1939, uint8_t DA) {
 80024b8:	4604      	mov	r4, r0
 80024ba:	460d      	mov	r5, r1
	memset(j1939->other_ECU_address, 0xFF, 0xFF);
 80024bc:	300f      	adds	r0, #15
 80024be:	4611      	mov	r1, r2
 80024c0:	f00c f9ac 	bl	800e81c <memset>
	j1939->number_of_cannot_claim_address = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73a3      	strb	r3, [r4, #14]
	j1939->number_of_other_ECU = 0;
 80024c8:	7363      	strb	r3, [r4, #13]
	return SAE_J1939_Send_Request(j1939, DA, PGN_ADDRESS_CLAIMED);
 80024ca:	4629      	mov	r1, r5
 80024cc:	4620      	mov	r0, r4
 80024ce:	f44f 426e 	mov.w	r2, #60928	; 0xee00
}
 80024d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return SAE_J1939_Send_Request(j1939, DA, PGN_ADDRESS_CLAIMED);
 80024d6:	f7ff bf6b 	b.w	80023b0 <SAE_J1939_Send_Request>
	...

080024dc <SAE_J1939_Response_Request_Address_Claimed>:

/*
 * Response the request address claimed about this ECU to all ECU - Broadcast. This function must be called at the ECU start up according to J1939 standard
 * PGN: 0x00EE00 (60928)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_Address_Claimed(J1939 *j1939) {
 80024dc:	b513      	push	{r0, r1, r4, lr}
	uint32_t ID = (0x18EEFF << 8) | j1939->information_this_ECU.this_ECU_address;
 80024de:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
	uint8_t data[8];
	data[0] = j1939->information_this_ECU.this_name.identity_number;
 80024e2:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
	uint32_t ID = (0x18EEFF << 8) | j1939->information_this_ECU.this_ECU_address;
 80024e6:	f890 22d4 	ldrb.w	r2, [r0, #724]	; 0x2d4
	data[0] = j1939->information_this_ECU.this_name.identity_number;
 80024ea:	f88d 4000 	strb.w	r4, [sp]
	data[1] = j1939->information_this_ECU.this_name.identity_number >> 8;
 80024ee:	0a23      	lsrs	r3, r4, #8
 80024f0:	f88d 3001 	strb.w	r3, [sp, #1]
	data[2] = (j1939->information_this_ECU.this_name.identity_number >> 16) |  (j1939->information_this_ECU.this_name.manufacturer_code << 5);
 80024f4:	f8b0 32c8 	ldrh.w	r3, [r0, #712]	; 0x2c8
 80024f8:	0159      	lsls	r1, r3, #5
 80024fa:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
	data[3] = j1939->information_this_ECU.this_name.manufacturer_code >> 3;
 80024fe:	08db      	lsrs	r3, r3, #3
	data[2] = (j1939->information_this_ECU.this_name.identity_number >> 16) |  (j1939->information_this_ECU.this_name.manufacturer_code << 5);
 8002500:	f88d 1002 	strb.w	r1, [sp, #2]
	data[3] = j1939->information_this_ECU.this_name.manufacturer_code >> 3;
 8002504:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = (j1939->information_this_ECU.this_name.function_instance << 3) | j1939->information_this_ECU.this_name.ECU_instance;
 8002508:	f890 12ca 	ldrb.w	r1, [r0, #714]	; 0x2ca
 800250c:	f890 32cb 	ldrb.w	r3, [r0, #715]	; 0x2cb
 8002510:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002514:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = j1939->information_this_ECU.this_name.function;
 8002518:	f890 32cc 	ldrb.w	r3, [r0, #716]	; 0x2cc
 800251c:	f88d 3005 	strb.w	r3, [sp, #5]
	data[6] = j1939->information_this_ECU.this_name.vehicle_system << 1;
 8002520:	f890 32cd 	ldrb.w	r3, [r0, #717]	; 0x2cd
	data[7] = (j1939->information_this_ECU.this_name.arbitrary_address_capable << 7) | (j1939->information_this_ECU.this_name.industry_group << 4) | j1939->information_this_ECU.this_name.vehicle_system_instance;
 8002524:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
	data[6] = j1939->information_this_ECU.this_name.vehicle_system << 1;
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	f88d 3006 	strb.w	r3, [sp, #6]
	data[7] = (j1939->information_this_ECU.this_name.arbitrary_address_capable << 7) | (j1939->information_this_ECU.this_name.industry_group << 4) | j1939->information_this_ECU.this_name.vehicle_system_instance;
 800252e:	f890 32cf 	ldrb.w	r3, [r0, #719]	; 0x2cf
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8002538:	f890 12d0 	ldrb.w	r1, [r0, #720]	; 0x2d0
	return CAN_Send_Message(ID, data);
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <SAE_J1939_Response_Request_Address_Claimed+0x74>)
	data[7] = (j1939->information_this_ECU.this_name.arbitrary_address_capable << 7) | (j1939->information_this_ECU.this_name.industry_group << 4) | j1939->information_this_ECU.this_name.vehicle_system_instance;
 800253e:	430b      	orrs	r3, r1
	return CAN_Send_Message(ID, data);
 8002540:	4310      	orrs	r0, r2
 8002542:	4669      	mov	r1, sp
	data[7] = (j1939->information_this_ECU.this_name.arbitrary_address_capable << 7) | (j1939->information_this_ECU.this_name.industry_group << 4) | j1939->information_this_ECU.this_name.vehicle_system_instance;
 8002544:	f88d 3007 	strb.w	r3, [sp, #7]
	return CAN_Send_Message(ID, data);
 8002548:	f7ff fea7 	bl	800229a <CAN_Send_Message>
}
 800254c:	b002      	add	sp, #8
 800254e:	bd10      	pop	{r4, pc}
 8002550:	18eeff00 	.word	0x18eeff00

08002554 <SAE_J1939_Send_Address_Delete>:

/*
 * This is not a SAE J1939 standard. It's only for deleting the j1939->ECU_address
 * PGN: 0x000002 (2)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Address_Delete(J1939 *j1939, uint8_t DA, uint8_t old_ECU_address) {
 8002554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Delete other ECU address in this ECU */
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 8002556:	2500      	movs	r5, #0
		if(old_ECU_address == j1939->other_ECU_address[i]){
			j1939->other_ECU_address[i] = 0xFF;
 8002558:	26ff      	movs	r6, #255	; 0xff
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 800255a:	7b44      	ldrb	r4, [r0, #13]
 800255c:	b2eb      	uxtb	r3, r5
 800255e:	429c      	cmp	r4, r3
 8002560:	d81d      	bhi.n	800259e <SAE_J1939_Send_Address_Delete+0x4a>
			j1939->number_of_other_ECU--;
		}
	}

	/* Send delete command to other ECU - Spread the news that the old_ECU_address is not used any more */
	uint32_t ID = (0x0002 << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 8002562:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
	uint8_t data[8];
	data[0] = old_ECU_address;
 8002566:	f88d 2000 	strb.w	r2, [sp]
	uint32_t ID = (0x0002 << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 800256a:	f890 32d4 	ldrb.w	r3, [r0, #724]	; 0x2d4
 800256e:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
	data[1] = data[2] = data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;  /*Reserved */
	return CAN_Send_Message(ID, data);
 8002572:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
	data[1] = data[2] = data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;  /*Reserved */
 8002576:	23ff      	movs	r3, #255	; 0xff
	return CAN_Send_Message(ID, data);
 8002578:	4669      	mov	r1, sp
	data[1] = data[2] = data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;  /*Reserved */
 800257a:	f88d 3007 	strb.w	r3, [sp, #7]
 800257e:	f88d 3006 	strb.w	r3, [sp, #6]
 8002582:	f88d 3005 	strb.w	r3, [sp, #5]
 8002586:	f88d 3004 	strb.w	r3, [sp, #4]
 800258a:	f88d 3003 	strb.w	r3, [sp, #3]
 800258e:	f88d 3002 	strb.w	r3, [sp, #2]
 8002592:	f88d 3001 	strb.w	r3, [sp, #1]
	return CAN_Send_Message(ID, data);
 8002596:	f7ff fe80 	bl	800229a <CAN_Send_Message>
}
 800259a:	b003      	add	sp, #12
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(old_ECU_address == j1939->other_ECU_address[i]){
 800259e:	4403      	add	r3, r0
 80025a0:	3501      	adds	r5, #1
 80025a2:	7bdf      	ldrb	r7, [r3, #15]
 80025a4:	4297      	cmp	r7, r2
			j1939->number_of_other_ECU--;
 80025a6:	bf02      	ittt	eq
 80025a8:	f104 34ff 	addeq.w	r4, r4, #4294967295
			j1939->other_ECU_address[i] = 0xFF;
 80025ac:	73de      	strbeq	r6, [r3, #15]
			j1939->number_of_other_ECU--;
 80025ae:	7344      	strbeq	r4, [r0, #13]
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 80025b0:	e7d3      	b.n	800255a <SAE_J1939_Send_Address_Delete+0x6>

080025b2 <SAE_J1939_Send_Commanded_Address>:

/*
 * Send commanded address to another ECU
 * PGN: 0x00FED8 (65240)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 80025b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Multiple messages - Load data */
	j1939->this_ecu_tp_cm.number_of_packages = 2;
 80025b6:	f04f 0802 	mov.w	r8, #2
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 80025ba:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	j1939->this_ecu_tp_cm.number_of_packages = 2;
 80025be:	f880 8a88 	strb.w	r8, [r0, #2696]	; 0xa88
	j1939->this_ecu_tp_cm.total_message_size = 9;
 80025c2:	f04f 0809 	mov.w	r8, #9
 80025c6:	f8a0 8a86 	strh.w	r8, [r0, #2694]	; 0xa86
	j1939->this_ecu_tp_dt.data[0] = identity_number;
	j1939->this_ecu_tp_dt.data[1] = identity_number >> 8;
 80025ca:	ea4f 2813 	mov.w	r8, r3, lsr #8
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 80025ce:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
	j1939->this_ecu_tp_dt.data[1] = identity_number >> 8;
 80025d2:	f880 8a96 	strb.w	r8, [r0, #2710]	; 0xa96
	j1939->this_ecu_tp_dt.data[2] = (identity_number >> 16) |  (manufacturer_code << 5);
 80025d6:	ea4f 1847 	mov.w	r8, r7, lsl #5
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 80025da:	9501      	str	r5, [sp, #4]
 80025dc:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 80025e0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	j1939->this_ecu_tp_dt.data[0] = identity_number;
 80025e4:	f880 3a95 	strb.w	r3, [r0, #2709]	; 0xa95
	j1939->this_ecu_tp_dt.data[2] = (identity_number >> 16) |  (manufacturer_code << 5);
 80025e8:	ea48 4313 	orr.w	r3, r8, r3, lsr #16
 80025ec:	f880 3a97 	strb.w	r3, [r0, #2711]	; 0xa97
	j1939->this_ecu_tp_dt.data[3] = manufacturer_code >> 3;
	j1939->this_ecu_tp_dt.data[4] = (function_instance << 3) | ECU_instance;
	j1939->this_ecu_tp_dt.data[5] = function;
	j1939->this_ecu_tp_dt.data[6] = vehicle_system << 1;
	j1939->this_ecu_tp_dt.data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 80025f0:	9b01      	ldr	r3, [sp, #4]
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 80025f2:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 80025f6:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 80025fa:	f89d c040 	ldrb.w	ip, [sp, #64]	; 0x40
 80025fe:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
	j1939->this_ecu_tp_dt.data[5] = function;
 8002602:	f880 aa9a 	strb.w	sl, [r0, #2714]	; 0xa9a
	j1939->this_ecu_tp_dt.data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 8002606:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
	j1939->this_ecu_tp_dt.data[8] = new_ECU_address;							/* New address of the ECU we are sending to*/

	/* Send TP CM */
	j1939->this_ecu_tp_cm.PGN_of_the_packeted_message = PGN_COMMANDED_ADDRESS;
	j1939->this_ecu_tp_cm.control_byte = DA == 0xFF ? CONTROL_BYTE_TP_CM_BAM : CONTROL_BYTE_TP_CM_RTS; /* If broadcast, then use BAM control byte */
 800260a:	29ff      	cmp	r1, #255	; 0xff
	j1939->this_ecu_tp_dt.data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 800260c:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
	j1939->this_ecu_tp_cm.PGN_of_the_packeted_message = PGN_COMMANDED_ADDRESS;
 8002610:	f64f 63d8 	movw	r3, #65240	; 0xfed8
 8002614:	f8c0 3a8c 	str.w	r3, [r0, #2700]	; 0xa8c
	j1939->this_ecu_tp_dt.data[3] = manufacturer_code >> 3;
 8002618:	ea4f 07d7 	mov.w	r7, r7, lsr #3
	j1939->this_ecu_tp_cm.control_byte = DA == 0xFF ? CONTROL_BYTE_TP_CM_BAM : CONTROL_BYTE_TP_CM_RTS; /* If broadcast, then use BAM control byte */
 800261c:	bf0c      	ite	eq
 800261e:	2320      	moveq	r3, #32
 8002620:	2310      	movne	r3, #16
	j1939->this_ecu_tp_dt.data[4] = (function_instance << 3) | ECU_instance;
 8002622:	ea4e 0ecb 	orr.w	lr, lr, fp, lsl #3
	j1939->this_ecu_tp_dt.data[6] = vehicle_system << 1;
 8002626:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	j1939->this_ecu_tp_dt.data[3] = manufacturer_code >> 3;
 800262a:	f880 7a98 	strb.w	r7, [r0, #2712]	; 0xa98
	j1939->this_ecu_tp_dt.data[4] = (function_instance << 3) | ECU_instance;
 800262e:	f880 ea99 	strb.w	lr, [r0, #2713]	; 0xa99
	j1939->this_ecu_tp_dt.data[6] = vehicle_system << 1;
 8002632:	f880 ca9b 	strb.w	ip, [r0, #2715]	; 0xa9b
	j1939->this_ecu_tp_dt.data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 8002636:	f880 5a9c 	strb.w	r5, [r0, #2716]	; 0xa9c
	j1939->this_ecu_tp_dt.data[8] = new_ECU_address;							/* New address of the ECU we are sending to*/
 800263a:	f880 2a9d 	strb.w	r2, [r0, #2717]	; 0xa9d
	j1939->this_ecu_tp_cm.control_byte = DA == 0xFF ? CONTROL_BYTE_TP_CM_BAM : CONTROL_BYTE_TP_CM_RTS; /* If broadcast, then use BAM control byte */
 800263e:	f880 3a84 	strb.w	r3, [r0, #2692]	; 0xa84
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 8002642:	4604      	mov	r4, r0
 8002644:	460e      	mov	r6, r1
	ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA);
 8002646:	f7ff fecc 	bl	80023e2 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
	if(status != STATUS_SEND_OK)
 800264a:	b950      	cbnz	r0, 8002662 <SAE_J1939_Send_Commanded_Address+0xb0>
		return status;

	/* Check if we are going to send it directly (BAM) - Else, the TP CM will send a RTS control byte to the other ECU and the ECU will answer with control byte CTS */
	if(j1939->this_ecu_tp_cm.control_byte == CONTROL_BYTE_TP_CM_BAM)
 800264c:	f894 3a84 	ldrb.w	r3, [r4, #2692]	; 0xa84
 8002650:	2b20      	cmp	r3, #32
 8002652:	d106      	bne.n	8002662 <SAE_J1939_Send_Commanded_Address+0xb0>
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA);
 8002654:	4631      	mov	r1, r6
 8002656:	4620      	mov	r0, r4
	return status;

}
 8002658:	b003      	add	sp, #12
 800265a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA);
 800265e:	f7ff beed 	b.w	800243c <SAE_J1939_Send_Transport_Protocol_Data_Transfer>
}
 8002662:	b003      	add	sp, #12
 8002664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Question_Yes_No_Dialog(char question[]) {
 8002668:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	ILI9341_set_rotation(2);

	/* Big blue frame */
	ILI9341_fill_rect(40, 80, 290, 160, COLOR_BLUE);
 800266c:	271f      	movs	r7, #31
uint8_t STM32_PLC_LCD_Show_Question_Yes_No_Dialog(char question[]) {
 800266e:	4605      	mov	r5, r0
	ILI9341_set_rotation(2);
 8002670:	2002      	movs	r0, #2
	ILI9341_hollow_rect(40, 80, 290, 160, COLOR_BLACK);
 8002672:	2400      	movs	r4, #0
	ILI9341_set_rotation(2);
 8002674:	f004 f818 	bl	80066a8 <ILI9341_set_rotation>
	ILI9341_fill_rect(40, 80, 290, 160, COLOR_BLUE);
 8002678:	9700      	str	r7, [sp, #0]
 800267a:	23a0      	movs	r3, #160	; 0xa0
 800267c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002680:	2150      	movs	r1, #80	; 0x50
 8002682:	2028      	movs	r0, #40	; 0x28
 8002684:	f003 fe12 	bl	80062ac <ILI9341_fill_rect>

	/* White big frame */
	ILI9341_fill_rect(42, 82, 288, 158, COLOR_WHITE);
 8002688:	f64f 78ff 	movw	r8, #65535	; 0xffff
	ILI9341_hollow_rect(40, 80, 290, 160, COLOR_BLACK);
 800268c:	9400      	str	r4, [sp, #0]
 800268e:	23a0      	movs	r3, #160	; 0xa0
 8002690:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002694:	2150      	movs	r1, #80	; 0x50
 8002696:	2028      	movs	r0, #40	; 0x28
 8002698:	f003 fe9c 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_fill_rect(42, 82, 288, 158, COLOR_WHITE);
 800269c:	f8cd 8000 	str.w	r8, [sp]
 80026a0:	239e      	movs	r3, #158	; 0x9e
 80026a2:	f44f 7290 	mov.w	r2, #288	; 0x120
 80026a6:	2152      	movs	r1, #82	; 0x52
 80026a8:	202a      	movs	r0, #42	; 0x2a
 80026aa:	f003 fdff 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(42, 82, 288, 158, COLOR_BLACK);
 80026ae:	9400      	str	r4, [sp, #0]
 80026b0:	239e      	movs	r3, #158	; 0x9e
 80026b2:	f44f 7290 	mov.w	r2, #288	; 0x120
 80026b6:	2152      	movs	r1, #82	; 0x52
 80026b8:	202a      	movs	r0, #42	; 0x2a
 80026ba:	f003 fe8b 	bl	80063d4 <ILI9341_hollow_rect>

	/* Small question background frame */
	ILI9341_fill_rect(45, 85, 285, 106, COLOR_BLUE);
 80026be:	9700      	str	r7, [sp, #0]
 80026c0:	236a      	movs	r3, #106	; 0x6a
 80026c2:	f240 121d 	movw	r2, #285	; 0x11d
 80026c6:	2155      	movs	r1, #85	; 0x55
 80026c8:	202d      	movs	r0, #45	; 0x2d
 80026ca:	f003 fdef 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(45, 85, 285, 106, COLOR_BLACK);

	/* Text */
	ILI9341_print_text("Question", 115, 88, COLOR_BLACK, COLOR_BLUE, 2);
 80026ce:	2602      	movs	r6, #2
	ILI9341_hollow_rect(45, 85, 285, 106, COLOR_BLACK);
 80026d0:	9400      	str	r4, [sp, #0]
 80026d2:	236a      	movs	r3, #106	; 0x6a
 80026d4:	f240 121d 	movw	r2, #285	; 0x11d
 80026d8:	2155      	movs	r1, #85	; 0x55
 80026da:	202d      	movs	r0, #45	; 0x2d
 80026dc:	f003 fe7a 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Question", 115, 88, COLOR_BLACK, COLOR_BLUE, 2);
 80026e0:	4623      	mov	r3, r4
 80026e2:	e9cd 7600 	strd	r7, r6, [sp]
 80026e6:	4825      	ldr	r0, [pc, #148]	; (800277c <STM32_PLC_LCD_Show_Question_Yes_No_Dialog+0x114>)
 80026e8:	2258      	movs	r2, #88	; 0x58
 80026ea:	2173      	movs	r1, #115	; 0x73
 80026ec:	f003 ff0c 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text(question, 50, 110, COLOR_BLACK, COLOR_WHITE, 1);
 80026f0:	2301      	movs	r3, #1
 80026f2:	e9cd 8300 	strd	r8, r3, [sp]
 80026f6:	4628      	mov	r0, r5
 80026f8:	4623      	mov	r3, r4

	/* Yes button */
	ILI9341_fill_rect(120, 129, 160, 150, COLOR_LGRAY);
 80026fa:	f24c 6518 	movw	r5, #50712	; 0xc618
	ILI9341_print_text(question, 50, 110, COLOR_BLACK, COLOR_WHITE, 1);
 80026fe:	226e      	movs	r2, #110	; 0x6e
 8002700:	2132      	movs	r1, #50	; 0x32
 8002702:	f003 ff01 	bl	8006508 <ILI9341_print_text>
	ILI9341_fill_rect(120, 129, 160, 150, COLOR_LGRAY);
 8002706:	9500      	str	r5, [sp, #0]
 8002708:	2396      	movs	r3, #150	; 0x96
 800270a:	22a0      	movs	r2, #160	; 0xa0
 800270c:	2181      	movs	r1, #129	; 0x81
 800270e:	2078      	movs	r0, #120	; 0x78
 8002710:	f003 fdcc 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(120, 129, 160, 150, COLOR_BLACK);
 8002714:	9400      	str	r4, [sp, #0]
 8002716:	2396      	movs	r3, #150	; 0x96
 8002718:	22a0      	movs	r2, #160	; 0xa0
 800271a:	2181      	movs	r1, #129	; 0x81
 800271c:	2078      	movs	r0, #120	; 0x78
 800271e:	f003 fe59 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Yes", 122, 132, COLOR_BLACK, COLOR_LGRAY, 2);
 8002722:	4623      	mov	r3, r4
 8002724:	e9cd 5600 	strd	r5, r6, [sp]
 8002728:	4815      	ldr	r0, [pc, #84]	; (8002780 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog+0x118>)
 800272a:	2284      	movs	r2, #132	; 0x84
 800272c:	217a      	movs	r1, #122	; 0x7a
 800272e:	f003 feeb 	bl	8006508 <ILI9341_print_text>

	/* No button */
	ILI9341_fill_rect(168, 129, 208, 150, COLOR_LGRAY);
 8002732:	9500      	str	r5, [sp, #0]
 8002734:	2396      	movs	r3, #150	; 0x96
 8002736:	22d0      	movs	r2, #208	; 0xd0
 8002738:	2181      	movs	r1, #129	; 0x81
 800273a:	20a8      	movs	r0, #168	; 0xa8
 800273c:	f003 fdb6 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(168, 129, 208, 150, COLOR_BLACK);
 8002740:	9400      	str	r4, [sp, #0]
 8002742:	2396      	movs	r3, #150	; 0x96
 8002744:	22d0      	movs	r2, #208	; 0xd0
 8002746:	2181      	movs	r1, #129	; 0x81
 8002748:	20a8      	movs	r0, #168	; 0xa8
 800274a:	f003 fe43 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("No", 176, 132, COLOR_BLACK, COLOR_LGRAY, 2);
 800274e:	4623      	mov	r3, r4
 8002750:	e9cd 5600 	strd	r5, r6, [sp]
 8002754:	480b      	ldr	r0, [pc, #44]	; (8002784 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog+0x11c>)
 8002756:	2284      	movs	r2, #132	; 0x84
 8002758:	21b0      	movs	r1, #176	; 0xb0
 800275a:	f003 fed5 	bl	8006508 <ILI9341_print_text>
	uint8_t b1_y2 = 150;
	uint8_t b2_x1 = 168;
	uint8_t b2_y1 = 129;
	uint8_t b2_x2 = 208;
	uint8_t b2_y2 = 150;
	return STM32_PLC_LCD_Call_Two_Button_Logic(b1_x1, b1_y1, b1_x2, b1_y2, b2_x1, b2_y1, b2_x2, b2_y2);
 800275e:	2396      	movs	r3, #150	; 0x96
 8002760:	22d0      	movs	r2, #208	; 0xd0
 8002762:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002766:	2181      	movs	r1, #129	; 0x81
 8002768:	22a8      	movs	r2, #168	; 0xa8
 800276a:	e9cd 2100 	strd	r2, r1, [sp]
 800276e:	2078      	movs	r0, #120	; 0x78
 8002770:	22a0      	movs	r2, #160	; 0xa0
 8002772:	f004 fdd5 	bl	8007320 <STM32_PLC_LCD_Call_Two_Button_Logic>
}
 8002776:	b004      	add	sp, #16
 8002778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800277c:	08012c77 	.word	0x08012c77
 8002780:	08013ffa 	.word	0x08013ffa
 8002784:	08014018 	.word	0x08014018

08002788 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_About_STM32_PLC_Frame(uint8_t *frame_id){
 8002788:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800278a:	240f      	movs	r4, #15
void STM32_PLC_LCD_Show_About_STM32_PLC_Frame(uint8_t *frame_id){
 800278c:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800278e:	9400      	str	r4, [sp, #0]
 8002790:	23ea      	movs	r3, #234	; 0xea
 8002792:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8002796:	2106      	movs	r1, #6
 8002798:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("About STM32 PLC", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800279a:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800279c:	f003 fd86 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80027a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80027a4:	f240 1209 	movw	r2, #265	; 0x109
 80027a8:	211e      	movs	r1, #30
 80027aa:	2032      	movs	r0, #50	; 0x32
 80027ac:	f003 fdc0 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("About STM32 PLC", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80027b0:	e9cd 4500 	strd	r4, r5, [sp]
 80027b4:	485b      	ldr	r0, [pc, #364]	; (8002924 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x19c>)
 80027b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80027ba:	220a      	movs	r2, #10
 80027bc:	2137      	movs	r1, #55	; 0x37
 80027be:	f003 fea3 	bl	8006508 <ILI9341_print_text>

	/* Variables for the text */
	uint16_t y = 25;

	/* Show analog inputs */
	ILI9341_print_text("This PCB board have ADC 16-bit, DAC 12-bit", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80027c2:	e9cd 4500 	strd	r4, r5, [sp]
 80027c6:	4858      	ldr	r0, [pc, #352]	; (8002928 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1a0>)
 80027c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80027cc:	2223      	movs	r2, #35	; 0x23
 80027ce:	2137      	movs	r1, #55	; 0x37
 80027d0:	f003 fe9a 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("PWM 16-bit, CAN-bus with SAE J1939 protocol", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80027d4:	e9cd 4500 	strd	r4, r5, [sp]
 80027d8:	4854      	ldr	r0, [pc, #336]	; (800292c <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1a4>)
 80027da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80027de:	222d      	movs	r2, #45	; 0x2d
 80027e0:	2137      	movs	r1, #55	; 0x37
 80027e2:	f003 fe91 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Digital inputs, Differential ADC 16-bit", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80027e6:	2237      	movs	r2, #55	; 0x37
 80027e8:	e9cd 4500 	strd	r4, r5, [sp]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4850      	ldr	r0, [pc, #320]	; (8002930 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1a8>)
 80027f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80027f4:	f003 fe88 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Input capture and Encoder. See the document", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80027f8:	e9cd 4500 	strd	r4, r5, [sp]
 80027fc:	484d      	ldr	r0, [pc, #308]	; (8002934 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1ac>)
 80027fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002802:	2241      	movs	r2, #65	; 0x41
 8002804:	2137      	movs	r1, #55	; 0x37
 8002806:	f003 fe7f 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("of this PCB board in the C++ software:", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800280a:	e9cd 4500 	strd	r4, r5, [sp]
 800280e:	484a      	ldr	r0, [pc, #296]	; (8002938 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1b0>)
 8002810:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002814:	224b      	movs	r2, #75	; 0x4b
 8002816:	2137      	movs	r1, #55	; 0x37
 8002818:	f003 fe76 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("OpenSourceLogger", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800281c:	e9cd 4500 	strd	r4, r5, [sp]
 8002820:	4846      	ldr	r0, [pc, #280]	; (800293c <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1b4>)
 8002822:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002826:	2255      	movs	r2, #85	; 0x55
 8002828:	2137      	movs	r1, #55	; 0x37
 800282a:	f003 fe6d 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Whit that software, you can store data", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800282e:	e9cd 4500 	strd	r4, r5, [sp]
 8002832:	4843      	ldr	r0, [pc, #268]	; (8002940 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1b8>)
 8002834:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002838:	225f      	movs	r2, #95	; 0x5f
 800283a:	2137      	movs	r1, #55	; 0x37
 800283c:	f003 fe64 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("directly to a SQL database. Also control", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002840:	e9cd 4500 	strd	r4, r5, [sp]
 8002844:	483f      	ldr	r0, [pc, #252]	; (8002944 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1bc>)
 8002846:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800284a:	2269      	movs	r2, #105	; 0x69
 800284c:	2137      	movs	r1, #55	; 0x37
 800284e:	f003 fe5b 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("the outputs of this PCB board. This STM32", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002852:	e9cd 4500 	strd	r4, r5, [sp]
 8002856:	483c      	ldr	r0, [pc, #240]	; (8002948 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1c0>)
 8002858:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800285c:	2273      	movs	r2, #115	; 0x73
 800285e:	2137      	movs	r1, #55	; 0x37
 8002860:	f003 fe52 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("processor STM32F373VBT is written with C", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002864:	e9cd 4500 	strd	r4, r5, [sp]
 8002868:	4838      	ldr	r0, [pc, #224]	; (800294c <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1c4>)
 800286a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800286e:	227d      	movs	r2, #125	; 0x7d
 8002870:	2137      	movs	r1, #55	; 0x37
 8002872:	f003 fe49 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("programming language. Visit:", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002876:	e9cd 4500 	strd	r4, r5, [sp]
 800287a:	4835      	ldr	r0, [pc, #212]	; (8002950 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1c8>)
 800287c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002880:	2287      	movs	r2, #135	; 0x87
 8002882:	2137      	movs	r1, #55	; 0x37
 8002884:	f003 fe40 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("https://github.com/danielmartensson/", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002888:	e9cd 4500 	strd	r4, r5, [sp]
 800288c:	4831      	ldr	r0, [pc, #196]	; (8002954 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1cc>)
 800288e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002892:	2291      	movs	r2, #145	; 0x91
 8002894:	2137      	movs	r1, #55	; 0x37
 8002896:	f003 fe37 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("and look for the OpenSourceLogger", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800289a:	e9cd 4500 	strd	r4, r5, [sp]
 800289e:	482e      	ldr	r0, [pc, #184]	; (8002958 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1d0>)
 80028a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028a4:	229b      	movs	r2, #155	; 0x9b
 80028a6:	2137      	movs	r1, #55	; 0x37
 80028a8:	f003 fe2e 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("repository there. Run the software.", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80028ac:	e9cd 4500 	strd	r4, r5, [sp]
 80028b0:	482a      	ldr	r0, [pc, #168]	; (800295c <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1d4>)
 80028b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028b6:	22a5      	movs	r2, #165	; 0xa5
 80028b8:	2137      	movs	r1, #55	; 0x37
 80028ba:	f003 fe25 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Created: 2022-05-25", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80028be:	e9cd 4500 	strd	r4, r5, [sp]
 80028c2:	4827      	ldr	r0, [pc, #156]	; (8002960 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1d8>)


	/* Button */
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 80028c4:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("Created: 2022-05-25", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80028c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028cc:	22af      	movs	r2, #175	; 0xaf
 80028ce:	2137      	movs	r1, #55	; 0x37
 80028d0:	f003 fe1a 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 80028d4:	2400      	movs	r4, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 80028d6:	9500      	str	r5, [sp, #0]
 80028d8:	23dc      	movs	r3, #220	; 0xdc
 80028da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028de:	21c3      	movs	r1, #195	; 0xc3
 80028e0:	2041      	movs	r0, #65	; 0x41
 80028e2:	f003 fce3 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 80028e6:	9400      	str	r4, [sp, #0]
 80028e8:	23dc      	movs	r3, #220	; 0xdc
 80028ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ee:	21c3      	movs	r1, #195	; 0xc3
 80028f0:	2041      	movs	r0, #65	; 0x41
 80028f2:	f003 fd6f 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Leave the frame now", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80028f6:	2302      	movs	r3, #2
 80028f8:	e9cd 5300 	strd	r5, r3, [sp]
 80028fc:	4819      	ldr	r0, [pc, #100]	; (8002964 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1dc>)
 80028fe:	4623      	mov	r3, r4
 8002900:	22c8      	movs	r2, #200	; 0xc8
 8002902:	2146      	movs	r1, #70	; 0x46
 8002904:	f003 fe00 	bl	8006508 <ILI9341_print_text>

	/* Logic for button */
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 8002908:	23dc      	movs	r3, #220	; 0xdc
 800290a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800290e:	21c3      	movs	r1, #195	; 0xc3
 8002910:	2041      	movs	r0, #65	; 0x41
 8002912:	f004 fcdb 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8002916:	4621      	mov	r1, r4
 8002918:	4630      	mov	r0, r6

}
 800291a:	b002      	add	sp, #8
 800291c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8002920:	f001 b982 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
 8002924:	08013b27 	.word	0x08013b27
 8002928:	08012c80 	.word	0x08012c80
 800292c:	08012cab 	.word	0x08012cab
 8002930:	08012cd7 	.word	0x08012cd7
 8002934:	08012cff 	.word	0x08012cff
 8002938:	08012d2b 	.word	0x08012d2b
 800293c:	08012e48 	.word	0x08012e48
 8002940:	08012d52 	.word	0x08012d52
 8002944:	08012d79 	.word	0x08012d79
 8002948:	08012da2 	.word	0x08012da2
 800294c:	08012dcc 	.word	0x08012dcc
 8002950:	08012df5 	.word	0x08012df5
 8002954:	08012e12 	.word	0x08012e12
 8002958:	08012e37 	.word	0x08012e37
 800295c:	08012e59 	.word	0x08012e59
 8002960:	08012e7d 	.word	0x08012e7d
 8002964:	08012e91 	.word	0x08012e91

08002968 <STM32_PLC_LCD_Show_Analog_Gain_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Analog_Gain_Frame(uint8_t *frame_id){
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	b094      	sub	sp, #80	; 0x50
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800296c:	240f      	movs	r4, #15
 800296e:	9400      	str	r4, [sp, #0]
 8002970:	23ea      	movs	r3, #234	; 0xea
 8002972:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8002976:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Analog_Gain_Frame(uint8_t *frame_id){
 8002978:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800297a:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set analog gain", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800297c:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800297e:	f003 fc95 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8002982:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002986:	f240 1209 	movw	r2, #265	; 0x109
 800298a:	211e      	movs	r1, #30
 800298c:	2032      	movs	r0, #50	; 0x32
 800298e:	f003 fccf 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set analog gain", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002992:	e9cd 4500 	strd	r4, r5, [sp]
 8002996:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800299a:	48c4      	ldr	r0, [pc, #784]	; (8002cac <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x344>)
 800299c:	220a      	movs	r2, #10
 800299e:	2137      	movs	r1, #55	; 0x37
 80029a0:	f003 fdb2 	bl	8006508 <ILI9341_print_text>
	char text[50];
	uint16_t y = 25;

	/* Get analog gains for SDADC 1 */
	uint8_t gain_for_configuration_index_0, gain_for_configuration_index_1, gain_for_configuration_index_2;
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 80029a4:	f10d 0217 	add.w	r2, sp, #23
 80029a8:	f10d 0116 	add.w	r1, sp, #22
 80029ac:	f10d 0015 	add.w	r0, sp, #21
 80029b0:	f7fe fdf5 	bl	800159e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>
	sprintf(text, "0=ADC0:%i,ADC1:%i,ADC2:%i", gain_for_configuration_index_0, gain_for_configuration_index_0, gain_for_configuration_index_0);
 80029b4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80029b8:	49bd      	ldr	r1, [pc, #756]	; (8002cb0 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x348>)
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	a807      	add	r0, sp, #28
 80029c0:	f00c fb9e 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80029c4:	e9cd 4500 	strd	r4, r5, [sp]
 80029c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80029cc:	2223      	movs	r2, #35	; 0x23
 80029ce:	2137      	movs	r1, #55	; 0x37
 80029d0:	a807      	add	r0, sp, #28
 80029d2:	f003 fd99 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "1=ADC3:%i,ADC4:%i,ADC5:%i", gain_for_configuration_index_1, gain_for_configuration_index_1, gain_for_configuration_index_1);
 80029d6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80029da:	49b6      	ldr	r1, [pc, #728]	; (8002cb4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x34c>)
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	a807      	add	r0, sp, #28
 80029e2:	f00c fb8d 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80029e6:	e9cd 4500 	strd	r4, r5, [sp]
 80029ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80029ee:	222d      	movs	r2, #45	; 0x2d
 80029f0:	2137      	movs	r1, #55	; 0x37
 80029f2:	a807      	add	r0, sp, #28
 80029f4:	f003 fd88 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "2=ADC6:%i,ADC7:%i,ADC8:%i", gain_for_configuration_index_2, gain_for_configuration_index_2, gain_for_configuration_index_2);
 80029f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80029fc:	49ae      	ldr	r1, [pc, #696]	; (8002cb8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x350>)
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	a807      	add	r0, sp, #28
 8002a04:	f00c fb7c 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002a08:	2237      	movs	r2, #55	; 0x37
 8002a0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a0e:	e9cd 4500 	strd	r4, r5, [sp]
 8002a12:	4611      	mov	r1, r2
 8002a14:	a807      	add	r0, sp, #28
 8002a16:	f003 fd77 	bl	8006508 <ILI9341_print_text>

	/* Get analog gains for SDADC 2 */
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8002a1a:	f10d 0217 	add.w	r2, sp, #23
 8002a1e:	f10d 0116 	add.w	r1, sp, #22
 8002a22:	f10d 0015 	add.w	r0, sp, #21
 8002a26:	f7fe fdd6 	bl	80015d6 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>
	sprintf(text, "3=ADC9:%i", gain_for_configuration_index_0);
 8002a2a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8002a2e:	49a3      	ldr	r1, [pc, #652]	; (8002cbc <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x354>)
 8002a30:	a807      	add	r0, sp, #28
 8002a32:	f00c fb65 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002a36:	e9cd 4500 	strd	r4, r5, [sp]
 8002a3a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a3e:	2241      	movs	r2, #65	; 0x41
 8002a40:	2137      	movs	r1, #55	; 0x37
 8002a42:	a807      	add	r0, sp, #28
 8002a44:	f003 fd60 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "4=ADC10:%i", gain_for_configuration_index_1);
 8002a48:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8002a4c:	499c      	ldr	r1, [pc, #624]	; (8002cc0 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x358>)
 8002a4e:	a807      	add	r0, sp, #28
 8002a50:	f00c fb56 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002a54:	e9cd 4500 	strd	r4, r5, [sp]
 8002a58:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a5c:	224b      	movs	r2, #75	; 0x4b
 8002a5e:	2137      	movs	r1, #55	; 0x37
 8002a60:	a807      	add	r0, sp, #28
 8002a62:	f003 fd51 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "5=ADC11:%i", gain_for_configuration_index_2);
 8002a66:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8002a6a:	4996      	ldr	r1, [pc, #600]	; (8002cc4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x35c>)
 8002a6c:	a807      	add	r0, sp, #28
 8002a6e:	f00c fb47 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002a72:	e9cd 4500 	strd	r4, r5, [sp]
 8002a76:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a7a:	2255      	movs	r2, #85	; 0x55
 8002a7c:	2137      	movs	r1, #55	; 0x37
 8002a7e:	a807      	add	r0, sp, #28
 8002a80:	f003 fd42 	bl	8006508 <ILI9341_print_text>

	/* Get analog gains for SDADC 3 */
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8002a84:	f10d 0217 	add.w	r2, sp, #23
 8002a88:	f10d 0116 	add.w	r1, sp, #22
 8002a8c:	f10d 0015 	add.w	r0, sp, #21
 8002a90:	f7fe fdbd 	bl	800160e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>
	sprintf(text, "6=DADC0:%i,DADC1:%i", gain_for_configuration_index_0, gain_for_configuration_index_0);
 8002a94:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002a98:	498b      	ldr	r1, [pc, #556]	; (8002cc8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x360>)
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	a807      	add	r0, sp, #28
 8002a9e:	f00c fb2f 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002aa2:	e9cd 4500 	strd	r4, r5, [sp]
 8002aa6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002aaa:	225f      	movs	r2, #95	; 0x5f
 8002aac:	2137      	movs	r1, #55	; 0x37
 8002aae:	a807      	add	r0, sp, #28
 8002ab0:	f003 fd2a 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "7=DADC2:%i,DADC3:%i", gain_for_configuration_index_1, gain_for_configuration_index_1);
 8002ab4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002ab8:	4984      	ldr	r1, [pc, #528]	; (8002ccc <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x364>)
 8002aba:	461a      	mov	r2, r3
 8002abc:	a807      	add	r0, sp, #28
 8002abe:	f00c fb1f 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002ac2:	e9cd 4500 	strd	r4, r5, [sp]
 8002ac6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002aca:	2269      	movs	r2, #105	; 0x69
 8002acc:	2137      	movs	r1, #55	; 0x37
 8002ace:	a807      	add	r0, sp, #28
 8002ad0:	f003 fd1a 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "8=DADC4:%i", gain_for_configuration_index_2);
 8002ad4:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8002ad8:	497d      	ldr	r1, [pc, #500]	; (8002cd0 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x368>)
 8002ada:	a807      	add	r0, sp, #28
 8002adc:	f00c fb10 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002ae0:	e9cd 4500 	strd	r4, r5, [sp]
 8002ae4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ae8:	2273      	movs	r2, #115	; 0x73
 8002aea:	2137      	movs	r1, #55	; 0x37
 8002aec:	a807      	add	r0, sp, #28
 8002aee:	f003 fd0b 	bl	8006508 <ILI9341_print_text>

	/* Print gain values */
	ILI9341_print_text("Gain values from 1/2x to 32x:", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002af2:	e9cd 4500 	strd	r4, r5, [sp]
 8002af6:	4877      	ldr	r0, [pc, #476]	; (8002cd4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x36c>)
 8002af8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002afc:	227d      	movs	r2, #125	; 0x7d
 8002afe:	2137      	movs	r1, #55	; 0x37
 8002b00:	f003 fd02 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("0=1x,1=2x,2=4x,3=8x,4=16x,5=32x,7=0.5x", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002b04:	e9cd 4500 	strd	r4, r5, [sp]
 8002b08:	4873      	ldr	r0, [pc, #460]	; (8002cd8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x370>)
 8002b0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b0e:	2287      	movs	r2, #135	; 0x87
 8002b10:	2137      	movs	r1, #55	; 0x37

	/* Button */
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8002b12:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("0=1x,1=2x,2=4x,3=8x,4=16x,5=32x,7=0.5x", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002b16:	f003 fcf7 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8002b1a:	2400      	movs	r4, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8002b1c:	23dc      	movs	r3, #220	; 0xdc
 8002b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b22:	21c3      	movs	r1, #195	; 0xc3
 8002b24:	2041      	movs	r0, #65	; 0x41
 8002b26:	9500      	str	r5, [sp, #0]
 8002b28:	f003 fbc0 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8002b2c:	23dc      	movs	r3, #220	; 0xdc
 8002b2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b32:	21c3      	movs	r1, #195	; 0xc3
 8002b34:	2041      	movs	r0, #65	; 0x41
 8002b36:	9400      	str	r4, [sp, #0]
 8002b38:	f003 fc4c 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Set analog gain now", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e9cd 5300 	strd	r5, r3, [sp]
 8002b42:	4866      	ldr	r0, [pc, #408]	; (8002cdc <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x374>)
 8002b44:	4623      	mov	r3, r4
 8002b46:	22c8      	movs	r2, #200	; 0xc8
 8002b48:	2146      	movs	r1, #70	; 0x46
 8002b4a:	f003 fcdd 	bl	8006508 <ILI9341_print_text>

	/* Logic for button */
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 8002b4e:	23dc      	movs	r3, #220	; 0xdc
 8002b50:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b54:	21c3      	movs	r1, #195	; 0xc3
 8002b56:	2041      	movs	r0, #65	; 0x41
 8002b58:	f004 fbb8 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want set analog gain?") == 0) {
 8002b5c:	4860      	ldr	r0, [pc, #384]	; (8002ce0 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x378>)
 8002b5e:	f7ff fd83 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8002b62:	b928      	cbnz	r0, 8002b70 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x208>
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain, true);
		break;
	}

	/* Show main frame again */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8002b64:	2100      	movs	r1, #0
 8002b66:	4630      	mov	r0, r6
 8002b68:	f001 f85e 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>

}
 8002b6c:	b014      	add	sp, #80	; 0x50
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
	float number_value = 0;
 8002b70:	2500      	movs	r5, #0
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 0 and 8") == 0) {
 8002b72:	4b5c      	ldr	r3, [pc, #368]	; (8002ce4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x37c>)
	float number_value = 0;
 8002b74:	9506      	str	r5, [sp, #24]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 0 and 8") == 0) {
 8002b76:	aa06      	add	r2, sp, #24
 8002b78:	4621      	mov	r1, r4
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f002 ff5c 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d0ef      	beq.n	8002b64 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x1fc>
	if(number_value < 0)
 8002b84:	eddd 7a06 	vldr	s15, [sp, #24]
 8002b88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	d52a      	bpl.n	8002be8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x280>
	number_value = 0;
 8002b92:	9506      	str	r5, [sp, #24]
		sprintf(text, "Enter gain value for ADC0,ADC1,ADC2");
 8002b94:	4954      	ldr	r1, [pc, #336]	; (8002ce8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x380>)
 8002b96:	a807      	add	r0, sp, #28
 8002b98:	f00c fad2 	bl	800f140 <strcpy>
		break;
 8002b9c:	2400      	movs	r4, #0
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, text) == 0) {
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	ab07      	add	r3, sp, #28
 8002ba2:	aa06      	add	r2, sp, #24
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	f002 ff47 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d0da      	beq.n	8002b64 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x1fc>
	if(number_value < 0)
 8002bae:	eddd 7a06 	vldr	s15, [sp, #24]
 8002bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bba:	d452      	bmi.n	8002c62 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2fa>
	else if(number_value > 7)
 8002bbc:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	dc4d      	bgt.n	8002c66 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2fe>
		gain = (uint8_t) number_value;
 8002bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bce:	edcd 7a03 	vstr	s15, [sp, #12]
 8002bd2:	f89d 200c 	ldrb.w	r2, [sp, #12]
	switch(analog_input_index){
 8002bd6:	2c08      	cmp	r4, #8
 8002bd8:	d8c4      	bhi.n	8002b64 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x1fc>
 8002bda:	e8df f004 	tbb	[pc, r4]
 8002bde:	4c46      	.short	0x4c46
 8002be0:	5956524f 	.word	0x5956524f
 8002be4:	605c      	.short	0x605c
 8002be6:	63          	.byte	0x63
 8002be7:	00          	.byte	0x00
	else if(number_value > 8)
 8002be8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	dd06      	ble.n	8002c04 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x29c>
	number_value = 0;
 8002bf6:	9506      	str	r5, [sp, #24]
		sprintf(text, "Enter gain value for DADC4");
 8002bf8:	493c      	ldr	r1, [pc, #240]	; (8002cec <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x384>)
 8002bfa:	a807      	add	r0, sp, #28
 8002bfc:	f00c faa0 	bl	800f140 <strcpy>
		break;
 8002c00:	2408      	movs	r4, #8
 8002c02:	e7cc      	b.n	8002b9e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x236>
		analog_input_index = (uint8_t) number_value;
 8002c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	number_value = 0;
 8002c08:	9506      	str	r5, [sp, #24]
		analog_input_index = (uint8_t) number_value;
 8002c0a:	edcd 7a03 	vstr	s15, [sp, #12]
 8002c0e:	f89d 400c 	ldrb.w	r4, [sp, #12]
	switch(analog_input_index){
 8002c12:	2c08      	cmp	r4, #8
 8002c14:	d8c3      	bhi.n	8002b9e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x236>
 8002c16:	a301      	add	r3, pc, #4	; (adr r3, 8002c1c <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2b4>)
 8002c18:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8002c1c:	08002b95 	.word	0x08002b95
 8002c20:	08002c41 	.word	0x08002c41
 8002c24:	08002c4b 	.word	0x08002c4b
 8002c28:	08002c4f 	.word	0x08002c4f
 8002c2c:	08002c53 	.word	0x08002c53
 8002c30:	08002c57 	.word	0x08002c57
 8002c34:	08002c5b 	.word	0x08002c5b
 8002c38:	08002c5f 	.word	0x08002c5f
 8002c3c:	08002bf9 	.word	0x08002bf9
		sprintf(text, "Enter gain value for ADC3,ADC4,ADC5");
 8002c40:	492b      	ldr	r1, [pc, #172]	; (8002cf0 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x388>)
		sprintf(text, "Enter gain value for ADC6,ADC7,ADC8");
 8002c42:	a807      	add	r0, sp, #28
 8002c44:	f00c fa7c 	bl	800f140 <strcpy>
		break;
 8002c48:	e7a9      	b.n	8002b9e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x236>
		sprintf(text, "Enter gain value for ADC6,ADC7,ADC8");
 8002c4a:	492a      	ldr	r1, [pc, #168]	; (8002cf4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x38c>)
 8002c4c:	e7f9      	b.n	8002c42 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for ADC9");
 8002c4e:	492a      	ldr	r1, [pc, #168]	; (8002cf8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x390>)
 8002c50:	e7f7      	b.n	8002c42 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for ADC10");
 8002c52:	492a      	ldr	r1, [pc, #168]	; (8002cfc <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x394>)
 8002c54:	e7f5      	b.n	8002c42 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for ADC11");
 8002c56:	492a      	ldr	r1, [pc, #168]	; (8002d00 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x398>)
 8002c58:	e7f3      	b.n	8002c42 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for DADC0,DADC1");
 8002c5a:	492a      	ldr	r1, [pc, #168]	; (8002d04 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x39c>)
 8002c5c:	e7f1      	b.n	8002c42 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for DADC2,DADC3");
 8002c5e:	492a      	ldr	r1, [pc, #168]	; (8002d08 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x3a0>)
 8002c60:	e7ef      	b.n	8002c42 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		gain = 0;
 8002c62:	2200      	movs	r2, #0
 8002c64:	e7b7      	b.n	8002bd6 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x26e>
		gain = 7;
 8002c66:	2207      	movs	r2, #7
 8002c68:	e7b5      	b.n	8002bd6 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x26e>
		STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_0, gain, true);
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	2100      	movs	r1, #0
		STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_2, gain, true);
 8002c6e:	4618      	mov	r0, r3
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain, true);
 8002c70:	f7fe f840 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
		break;
 8002c74:	e776      	b.n	8002b64 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x1fc>
		STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_1, gain, true);
 8002c76:	2301      	movs	r3, #1
 8002c78:	4619      	mov	r1, r3
 8002c7a:	e7f8      	b.n	8002c6e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x306>
		STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_2, gain, true);
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	2102      	movs	r1, #2
 8002c80:	e7f5      	b.n	8002c6e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x306>
		STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_0, gain, true);
 8002c82:	2301      	movs	r3, #1
 8002c84:	2100      	movs	r1, #0
		STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_1, gain, true);
 8002c86:	2002      	movs	r0, #2
 8002c88:	e7f2      	b.n	8002c70 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x308>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	e7fa      	b.n	8002c86 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x31e>
		STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_2, gain, true);
 8002c90:	2301      	movs	r3, #1
 8002c92:	2102      	movs	r1, #2
 8002c94:	e7f7      	b.n	8002c86 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x31e>
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_0, gain, true);
 8002c96:	2301      	movs	r3, #1
 8002c98:	2100      	movs	r1, #0
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain, true);
 8002c9a:	2003      	movs	r0, #3
 8002c9c:	e7e8      	b.n	8002c70 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x308>
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_1, gain, true);
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	e7fa      	b.n	8002c9a <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x332>
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain, true);
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	e7f7      	b.n	8002c9a <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x332>
 8002caa:	bf00      	nop
 8002cac:	0801393b 	.word	0x0801393b
 8002cb0:	08012ea5 	.word	0x08012ea5
 8002cb4:	08012ebf 	.word	0x08012ebf
 8002cb8:	08012ed9 	.word	0x08012ed9
 8002cbc:	08012ef3 	.word	0x08012ef3
 8002cc0:	08012efd 	.word	0x08012efd
 8002cc4:	08012f08 	.word	0x08012f08
 8002cc8:	08012f13 	.word	0x08012f13
 8002ccc:	08012f27 	.word	0x08012f27
 8002cd0:	08012f3b 	.word	0x08012f3b
 8002cd4:	08012f46 	.word	0x08012f46
 8002cd8:	08012f64 	.word	0x08012f64
 8002cdc:	08012f8b 	.word	0x08012f8b
 8002ce0:	08012f9f 	.word	0x08012f9f
 8002ce4:	08012fbc 	.word	0x08012fbc
 8002ce8:	08012fdf 	.word	0x08012fdf
 8002cec:	080130dd 	.word	0x080130dd
 8002cf0:	08013003 	.word	0x08013003
 8002cf4:	08013027 	.word	0x08013027
 8002cf8:	0801304b 	.word	0x0801304b
 8002cfc:	08013065 	.word	0x08013065
 8002d00:	08013080 	.word	0x08013080
 8002d04:	0801309b 	.word	0x0801309b
 8002d08:	080130bc 	.word	0x080130bc

08002d0c <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame(uint8_t *frame_id){
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	b088      	sub	sp, #32
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002d10:	240f      	movs	r4, #15
 8002d12:	9400      	str	r4, [sp, #0]
 8002d14:	23ea      	movs	r3, #234	; 0xea
 8002d16:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8002d1a:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame(uint8_t *frame_id){
 8002d1c:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002d1e:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set analog input calibration", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002d20:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002d22:	f003 fac3 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8002d26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d2a:	f240 1209 	movw	r2, #265	; 0x109
 8002d2e:	211e      	movs	r1, #30
 8002d30:	2032      	movs	r0, #50	; 0x32
 8002d32:	f003 fafd 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set analog input calibration", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002d36:	e9cd 4500 	strd	r4, r5, [sp]
 8002d3a:	486f      	ldr	r0, [pc, #444]	; (8002ef8 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1ec>)
 8002d3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d40:	220a      	movs	r2, #10
 8002d42:	2137      	movs	r1, #55	; 0x37
 8002d44:	f003 fbe0 	bl	8006508 <ILI9341_print_text>

	/* Variables for the text */
	uint16_t y = 25;

	/* Show analog inputs */
	ILI9341_print_text("0=ADC0 1=ADC1", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002d48:	e9cd 4500 	strd	r4, r5, [sp]
 8002d4c:	486b      	ldr	r0, [pc, #428]	; (8002efc <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1f0>)
 8002d4e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d52:	2223      	movs	r2, #35	; 0x23
 8002d54:	2137      	movs	r1, #55	; 0x37
 8002d56:	f003 fbd7 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("2=ADC2 3=ADC3", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002d5a:	e9cd 4500 	strd	r4, r5, [sp]
 8002d5e:	4868      	ldr	r0, [pc, #416]	; (8002f00 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1f4>)
 8002d60:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d64:	222d      	movs	r2, #45	; 0x2d
 8002d66:	2137      	movs	r1, #55	; 0x37
 8002d68:	f003 fbce 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("4=ADC4 5=ADC5", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002d6c:	2237      	movs	r2, #55	; 0x37
 8002d6e:	e9cd 4500 	strd	r4, r5, [sp]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4863      	ldr	r0, [pc, #396]	; (8002f04 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1f8>)
 8002d76:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d7a:	f003 fbc5 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("6=ADC6 7=ADC7", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002d7e:	e9cd 4500 	strd	r4, r5, [sp]
 8002d82:	4861      	ldr	r0, [pc, #388]	; (8002f08 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1fc>)
 8002d84:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d88:	2241      	movs	r2, #65	; 0x41
 8002d8a:	2137      	movs	r1, #55	; 0x37
 8002d8c:	f003 fbbc 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("8=ADC8 9=ADC9", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002d90:	e9cd 4500 	strd	r4, r5, [sp]
 8002d94:	485d      	ldr	r0, [pc, #372]	; (8002f0c <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x200>)
 8002d96:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d9a:	224b      	movs	r2, #75	; 0x4b
 8002d9c:	2137      	movs	r1, #55	; 0x37
 8002d9e:	f003 fbb3 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("10=ADC10 11=ADC11", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002da2:	e9cd 4500 	strd	r4, r5, [sp]
 8002da6:	485a      	ldr	r0, [pc, #360]	; (8002f10 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x204>)
 8002da8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dac:	2255      	movs	r2, #85	; 0x55
 8002dae:	2137      	movs	r1, #55	; 0x37
 8002db0:	f003 fbaa 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("12=DADC0 13=DADC1", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002db4:	e9cd 4500 	strd	r4, r5, [sp]
 8002db8:	4856      	ldr	r0, [pc, #344]	; (8002f14 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x208>)
 8002dba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dbe:	225f      	movs	r2, #95	; 0x5f
 8002dc0:	2137      	movs	r1, #55	; 0x37
 8002dc2:	f003 fba1 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("14=DADC2 15=DADC3", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002dc6:	e9cd 4500 	strd	r4, r5, [sp]
 8002dca:	4853      	ldr	r0, [pc, #332]	; (8002f18 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x20c>)
 8002dcc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dd0:	2269      	movs	r2, #105	; 0x69
 8002dd2:	2137      	movs	r1, #55	; 0x37
 8002dd4:	f003 fb98 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("15=DADC4 16=DADC5", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002dd8:	e9cd 4500 	strd	r4, r5, [sp]
 8002ddc:	484f      	ldr	r0, [pc, #316]	; (8002f1c <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x210>)
 8002dde:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002de2:	2273      	movs	r2, #115	; 0x73
 8002de4:	2137      	movs	r1, #55	; 0x37
 8002de6:	f003 fb8f 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("At 0mA=0 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002dea:	e9cd 4500 	strd	r4, r5, [sp]
 8002dee:	484c      	ldr	r0, [pc, #304]	; (8002f20 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x214>)
 8002df0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002df4:	227d      	movs	r2, #125	; 0x7d
 8002df6:	2137      	movs	r1, #55	; 0x37
 8002df8:	f003 fb86 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("At 4mA=12710 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002dfc:	e9cd 4500 	strd	r4, r5, [sp]
 8002e00:	4848      	ldr	r0, [pc, #288]	; (8002f24 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x218>)
 8002e02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e06:	2287      	movs	r2, #135	; 0x87
 8002e08:	2137      	movs	r1, #55	; 0x37
 8002e0a:	f003 fb7d 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("At 20mA=63549 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e0e:	e9cd 4500 	strd	r4, r5, [sp]
 8002e12:	4845      	ldr	r0, [pc, #276]	; (8002f28 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x21c>)
 8002e14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e18:	2291      	movs	r2, #145	; 0x91
 8002e1a:	2137      	movs	r1, #55	; 0x37
 8002e1c:	f003 fb74 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("At 20.625mA=65535 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e20:	e9cd 4500 	strd	r4, r5, [sp]
 8002e24:	4841      	ldr	r0, [pc, #260]	; (8002f2c <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x220>)
 8002e26:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e2a:	229b      	movs	r2, #155	; 0x9b
 8002e2c:	2137      	movs	r1, #55	; 0x37

	/* Button */
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8002e2e:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("At 20.625mA=65535 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e32:	f003 fb69 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8002e36:	2400      	movs	r4, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8002e38:	23dc      	movs	r3, #220	; 0xdc
 8002e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e3e:	21c3      	movs	r1, #195	; 0xc3
 8002e40:	2041      	movs	r0, #65	; 0x41
 8002e42:	9500      	str	r5, [sp, #0]
 8002e44:	f003 fa32 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8002e48:	23dc      	movs	r3, #220	; 0xdc
 8002e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e4e:	21c3      	movs	r1, #195	; 0xc3
 8002e50:	2041      	movs	r0, #65	; 0x41
 8002e52:	9400      	str	r4, [sp, #0]
 8002e54:	f003 fabe 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Set calibration now", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e9cd 5300 	strd	r5, r3, [sp]
 8002e5e:	4834      	ldr	r0, [pc, #208]	; (8002f30 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x224>)
 8002e60:	4623      	mov	r3, r4
 8002e62:	22c8      	movs	r2, #200	; 0xc8
 8002e64:	2146      	movs	r1, #70	; 0x46
 8002e66:	f003 fb4f 	bl	8006508 <ILI9341_print_text>

	/* Logic for button */
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 8002e6a:	23dc      	movs	r3, #220	; 0xdc
 8002e6c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e70:	21c3      	movs	r1, #195	; 0xc3
 8002e72:	2041      	movs	r0, #65	; 0x41
 8002e74:	f004 fa2a 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want set analog gain?") == 0) {
 8002e78:	482e      	ldr	r0, [pc, #184]	; (8002f34 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x228>)
 8002e7a:	f7ff fbf5 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8002e7e:	b928      	cbnz	r0, 8002e8c <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x180>

	/* Apply calibration */
	STM32_PLC_Analog_Input_Set_Calibration(input_index, scalar, bias, true);

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8002e80:	2100      	movs	r1, #0
 8002e82:	4630      	mov	r0, r6
 8002e84:	f000 fed0 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>

}
 8002e88:	b008      	add	sp, #32
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter analog input 0 to 16") == 0) {
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x22c>)
 8002e8e:	aa05      	add	r2, sp, #20
 8002e90:	4621      	mov	r1, r4
 8002e92:	4620      	mov	r0, r4
 8002e94:	f002 fdd0 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d0f1      	beq.n	8002e80 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x174>
	if(number_value < 0)
 8002e9c:	eddd 7a05 	vldr	s15, [sp, #20]
 8002ea0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	d40d      	bmi.n	8002ec6 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1ba>
	else if(number_value > 16)
 8002eaa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		input_index = (uint8_t) number_value;
 8002eb6:	bfd7      	itett	le
 8002eb8:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		input_index = 16;
 8002ebc:	2410      	movgt	r4, #16
		input_index = (uint8_t) number_value;
 8002ebe:	edcd 7a03 	vstrle	s15, [sp, #12]
 8002ec2:	f89d 400c 	ldrble.w	r4, [sp, #12]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &scalar, "Enter scalar value") == 0) {
 8002ec6:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x230>)
 8002ec8:	2101      	movs	r1, #1
 8002eca:	aa06      	add	r2, sp, #24
 8002ecc:	4608      	mov	r0, r1
 8002ece:	f002 fdb3 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d0d4      	beq.n	8002e80 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x174>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &bias, "Enter bias value") == 0) {
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x234>)
 8002eda:	aa07      	add	r2, sp, #28
 8002edc:	4608      	mov	r0, r1
 8002ede:	f002 fdab 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d0cc      	beq.n	8002e80 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x174>
	STM32_PLC_Analog_Input_Set_Calibration(input_index, scalar, bias, true);
 8002ee6:	eddd 0a07 	vldr	s1, [sp, #28]
 8002eea:	ed9d 0a06 	vldr	s0, [sp, #24]
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7fe f8bb 	bl	800106c <STM32_PLC_Analog_Input_Set_Calibration>
 8002ef6:	e7c3      	b.n	8002e80 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x174>
 8002ef8:	08013963 	.word	0x08013963
 8002efc:	080130f8 	.word	0x080130f8
 8002f00:	08013106 	.word	0x08013106
 8002f04:	08013114 	.word	0x08013114
 8002f08:	08013122 	.word	0x08013122
 8002f0c:	08013130 	.word	0x08013130
 8002f10:	0801313e 	.word	0x0801313e
 8002f14:	08013150 	.word	0x08013150
 8002f18:	08013162 	.word	0x08013162
 8002f1c:	08013174 	.word	0x08013174
 8002f20:	08013186 	.word	0x08013186
 8002f24:	08013199 	.word	0x08013199
 8002f28:	080131b0 	.word	0x080131b0
 8002f2c:	080131c8 	.word	0x080131c8
 8002f30:	080131e4 	.word	0x080131e4
 8002f34:	08012f9f 	.word	0x08012f9f
 8002f38:	080131f8 	.word	0x080131f8
 8002f3c:	08013213 	.word	0x08013213
 8002f40:	08013226 	.word	0x08013226

08002f44 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame>:
#include "../../Functions.h"
#include <math.h>

static void add_spaces(uint8_t length, char text[]);

void STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(uint8_t *frame_id) {
 8002f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f48:	ed2d 8b02 	vpush	{d8}
 8002f4c:	b095      	sub	sp, #84	; 0x54
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002f4e:	240f      	movs	r4, #15
 8002f50:	9400      	str	r4, [sp, #0]
 8002f52:	23ea      	movs	r3, #234	; 0xea
 8002f54:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8002f58:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(uint8_t *frame_id) {
 8002f5a:	4605      	mov	r5, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002f5c:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("ADC0 to ADC2 to DAC0 to DAC2", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002f5e:	2601      	movs	r6, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002f60:	f003 f9a4 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8002f64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f68:	f240 1209 	movw	r2, #265	; 0x109
 8002f6c:	211e      	movs	r1, #30
 8002f6e:	2032      	movs	r0, #50	; 0x32
 8002f70:	f003 f9de 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("ADC0 to ADC2 to DAC0 to DAC2", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002f74:	e9cd 4600 	strd	r4, r6, [sp]
 8002f78:	485b      	ldr	r0, [pc, #364]	; (80030e8 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1a4>)

	while(1) {
		int16_t adc[3];
		/* Control the DAC */
		for(uint8_t i = 0; i < 3; i++){
			float dac = 4095.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i));
 8002f7a:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 80030ec <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1a8>
			STM32_PLC_Analog_Output_Set(i, dac);
		}

		/* ADC 0 to ADC 2 */
		char text[60];
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", adc[0], adc[1], adc[2]);
 8002f7e:	4f5c      	ldr	r7, [pc, #368]	; (80030f0 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1ac>)
	ILI9341_print_text("ADC0 to ADC2 to DAC0 to DAC2", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002f80:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f84:	220a      	movs	r2, #10
 8002f86:	2137      	movs	r1, #55	; 0x37
 8002f88:	f003 fabe 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Give ADC0 to ADC2 current", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8002f8c:	e9cd 4600 	strd	r4, r6, [sp]
 8002f90:	4858      	ldr	r0, [pc, #352]	; (80030f4 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1b0>)
 8002f92:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f96:	2223      	movs	r2, #35	; 0x23
 8002f98:	2137      	movs	r1, #55	; 0x37
 8002f9a:	f003 fab5 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("and DAC0 to DAC2 will give", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8002f9e:	e9cd 4600 	strd	r4, r6, [sp]
 8002fa2:	4855      	ldr	r0, [pc, #340]	; (80030f8 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1b4>)
 8002fa4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fa8:	222d      	movs	r2, #45	; 0x2d
 8002faa:	2137      	movs	r1, #55	; 0x37
 8002fac:	f003 faac 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("out 0-20.625mA current. 4095 = 20.625mA", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8002fb0:	2237      	movs	r2, #55	; 0x37
 8002fb2:	e9cd 4600 	strd	r4, r6, [sp]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4850      	ldr	r0, [pc, #320]	; (80030fc <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1b8>)
 8002fba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fbe:	f003 faa3 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Give power supply 24V. Don't forget GND!", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8002fc2:	e9cd 4600 	strd	r4, r6, [sp]
 8002fc6:	484e      	ldr	r0, [pc, #312]	; (8003100 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1bc>)
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8002fc8:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text("Give power supply 24V. Don't forget GND!", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8002fcc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fd0:	2241      	movs	r2, #65	; 0x41
 8002fd2:	2137      	movs	r1, #55	; 0x37
 8002fd4:	f003 fa98 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8002fd8:	2400      	movs	r4, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8002fda:	9600      	str	r6, [sp, #0]
 8002fdc:	23e6      	movs	r3, #230	; 0xe6
 8002fde:	f240 1211 	movw	r2, #273	; 0x111
 8002fe2:	21cd      	movs	r1, #205	; 0xcd
 8002fe4:	2055      	movs	r0, #85	; 0x55
 8002fe6:	f003 f961 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8002fea:	23e6      	movs	r3, #230	; 0xe6
 8002fec:	f240 1211 	movw	r2, #273	; 0x111
 8002ff0:	21cd      	movs	r1, #205	; 0xcd
 8002ff2:	2055      	movs	r0, #85	; 0x55
 8002ff4:	9400      	str	r4, [sp, #0]
 8002ff6:	f003 f9ed 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e9cd 6300 	strd	r6, r3, [sp]
 8003000:	4840      	ldr	r0, [pc, #256]	; (8003104 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1c0>)
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);

		/* Logic for button */
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 8003002:	4e41      	ldr	r6, [pc, #260]	; (8003108 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1c4>)
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8003004:	4623      	mov	r3, r4
 8003006:	22d2      	movs	r2, #210	; 0xd2
 8003008:	215f      	movs	r1, #95	; 0x5f
 800300a:	f003 fa7d 	bl	8006508 <ILI9341_print_text>
		for(uint8_t i = 0; i < 3; i++){
 800300e:	f10d 090c 	add.w	r9, sp, #12
void STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(uint8_t *frame_id) {
 8003012:	2400      	movs	r4, #0
 8003014:	fa5f f884 	uxtb.w	r8, r4
			float dac = 4095.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i));
 8003018:	4640      	mov	r0, r8
 800301a:	f7fd ff95 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 800301e:	ee07 0a90 	vmov	s15, r0
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
			STM32_PLC_Analog_Output_Set(i, dac);
 8003026:	4640      	mov	r0, r8
			float dac = 4095.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i));
 8003028:	ee67 7a88 	vmul.f32	s15, s15, s16
		for(uint8_t i = 0; i < 3; i++){
 800302c:	3401      	adds	r4, #1
			adc[i] = dac;
 800302e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
			STM32_PLC_Analog_Output_Set(i, dac);
 8003032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			adc[i] = dac;
 8003036:	ee17 3a10 	vmov	r3, s14
 800303a:	f829 3b02 	strh.w	r3, [r9], #2
			STM32_PLC_Analog_Output_Set(i, dac);
 800303e:	ee17 3a90 	vmov	r3, s15
 8003042:	b299      	uxth	r1, r3
 8003044:	f7fe f824 	bl	8001090 <STM32_PLC_Analog_Output_Set>
		for(uint8_t i = 0; i < 3; i++){
 8003048:	2c03      	cmp	r4, #3
 800304a:	d1e3      	bne.n	8003014 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0xd0>
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", adc[0], adc[1], adc[2]);
 800304c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8003050:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	4639      	mov	r1, r7
 8003058:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800305c:	a805      	add	r0, sp, #20
 800305e:	f00c f84f 	bl	800f100 <siprintf>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static void add_spaces(uint8_t length, char text[]){
	/* This is for removing old values from LCD */
	for(uint8_t i = strlen(text); i < length; i++)
 8003062:	a805      	add	r0, sp, #20
 8003064:	f7fd f8b4 	bl	80001d0 <strlen>
 8003068:	b2c3      	uxtb	r3, r0
		text[i] = ' ';
 800306a:	2b2b      	cmp	r3, #43	; 0x2b
 800306c:	f1c3 022b 	rsb	r2, r3, #43	; 0x2b
 8003070:	ab05      	add	r3, sp, #20
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f04f 0120 	mov.w	r1, #32
 8003078:	bf88      	it	hi
 800307a:	2200      	movhi	r2, #0
 800307c:	4418      	add	r0, r3
 800307e:	f00b fbcd 	bl	800e81c <memset>
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8003082:	230f      	movs	r3, #15
 8003084:	2201      	movs	r2, #1
 8003086:	e9cd 3200 	strd	r3, r2, [sp]
	text[length] = '\0'; /* C-String termination */
 800308a:	2400      	movs	r4, #0
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800308c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003090:	224b      	movs	r2, #75	; 0x4b
 8003092:	2137      	movs	r1, #55	; 0x37
 8003094:	a805      	add	r0, sp, #20
	text[length] = '\0'; /* C-String termination */
 8003096:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800309a:	f003 fa35 	bl	8006508 <ILI9341_print_text>
		if (TSC2046_isPressed()) {
 800309e:	f003 fc3b 	bl	8006918 <TSC2046_isPressed>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d0b3      	beq.n	800300e <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0xca>
			TSC2046_GetTouchData();
 80030a6:	f003 fbcf 	bl	8006848 <TSC2046_GetTouchData>
			if (X >= 85 && X <= 273 && Y >= 205 && Y <= 230) {
 80030aa:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 80030ac:	3b55      	subs	r3, #85	; 0x55
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2bbc      	cmp	r3, #188	; 0xbc
 80030b2:	d8ac      	bhi.n	800300e <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0xca>
 80030b4:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80030b6:	3bcd      	subs	r3, #205	; 0xcd
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b19      	cmp	r3, #25
 80030bc:	d8a7      	bhi.n	800300e <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0xca>
				ILI9341_hollow_rect(85, 205, 273, 230, COLOR_MAGENTA);
 80030be:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	f240 1211 	movw	r2, #273	; 0x111
 80030c8:	23e6      	movs	r3, #230	; 0xe6
 80030ca:	21cd      	movs	r1, #205	; 0xcd
 80030cc:	2055      	movs	r0, #85	; 0x55
 80030ce:	f003 f981 	bl	80063d4 <ILI9341_hollow_rect>
	STM32_PLC_Analog_Output_Reset();
 80030d2:	f7fd fff9 	bl	80010c8 <STM32_PLC_Analog_Output_Reset>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80030d6:	4621      	mov	r1, r4
 80030d8:	4628      	mov	r0, r5
}
 80030da:	b015      	add	sp, #84	; 0x54
 80030dc:	ecbd 8b02 	vpop	{d8}
 80030e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80030e4:	f000 bda0 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
 80030e8:	08013237 	.word	0x08013237
 80030ec:	3d7ff100 	.word	0x3d7ff100
 80030f0:	080132e9 	.word	0x080132e9
 80030f4:	08013254 	.word	0x08013254
 80030f8:	0801326e 	.word	0x0801326e
 80030fc:	08013289 	.word	0x08013289
 8003100:	080132b1 	.word	0x080132b1
 8003104:	080132da 	.word	0x080132da
 8003108:	20002728 	.word	0x20002728

0800310c <add_spaces.constprop.0>:

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static void add_spaces(uint8_t length, char text[]){
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
	/* This is for removing old values from LCD */
	for(uint8_t i = strlen(text); i < length; i++)
 8003110:	f7fd f85e 	bl	80001d0 <strlen>
 8003114:	b2c0      	uxtb	r0, r0
		text[i] = ' ';
 8003116:	282b      	cmp	r0, #43	; 0x2b
 8003118:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	f04f 0120 	mov.w	r1, #32
 8003122:	bf88      	it	hi
 8003124:	2200      	movhi	r2, #0
 8003126:	4420      	add	r0, r4
 8003128:	f00b fb78 	bl	800e81c <memset>
	text[length] = '\0'; /* C-String termination */
 800312c:	2300      	movs	r3, #0
 800312e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 8003132:	bd10      	pop	{r4, pc}

08003134 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame>:
void STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(J1939 *j1939, uint8_t *frame_id) {
 8003134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003136:	ed2d 8b04 	vpush	{d8-d9}
 800313a:	b09b      	sub	sp, #108	; 0x6c
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800313c:	240f      	movs	r4, #15
 800313e:	9400      	str	r4, [sp, #0]
 8003140:	23ea      	movs	r3, #234	; 0xea
 8003142:	f44f 729d 	mov.w	r2, #314	; 0x13a
void STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(J1939 *j1939, uint8_t *frame_id) {
 8003146:	4607      	mov	r7, r0
 8003148:	460e      	mov	r6, r1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800314a:	2033      	movs	r0, #51	; 0x33
 800314c:	2106      	movs	r1, #6
	ILI9341_print_text("ADC0 to ADC11 to Auxiliary Valve 0 to 11", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800314e:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003150:	f003 f8ac 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003154:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003158:	f240 1209 	movw	r2, #265	; 0x109
 800315c:	211e      	movs	r1, #30
 800315e:	2032      	movs	r0, #50	; 0x32
 8003160:	f003 f8e6 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("ADC0 to ADC11 to Auxiliary Valve 0 to 11", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003164:	e9cd 4500 	strd	r4, r5, [sp]
 8003168:	488d      	ldr	r0, [pc, #564]	; (80033a0 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x26c>)
			float flow = 500.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) - 250.0f;
 800316a:	ed9f 8a8e 	vldr	s16, [pc, #568]	; 80033a4 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x270>
	ILI9341_print_text("ADC0 to ADC11 to Auxiliary Valve 0 to 11", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800316e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003172:	220a      	movs	r2, #10
 8003174:	2137      	movs	r1, #55	; 0x37
 8003176:	f003 f9c7 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Give ADC0 to ADC11 current", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800317a:	e9cd 4500 	strd	r4, r5, [sp]
 800317e:	488a      	ldr	r0, [pc, #552]	; (80033a8 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x274>)
 8003180:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003184:	2223      	movs	r2, #35	; 0x23
 8003186:	2137      	movs	r1, #55	; 0x37
 8003188:	f003 f9be 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("and CAN will send out SAE J1939", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 800318c:	e9cd 4500 	strd	r4, r5, [sp]
 8003190:	4886      	ldr	r0, [pc, #536]	; (80033ac <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x278>)
 8003192:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003196:	222d      	movs	r2, #45	; 0x2d
 8003198:	2137      	movs	r1, #55	; 0x37
 800319a:	f003 f9b5 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("auxiliary valve command 0 to 11", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 800319e:	2237      	movs	r2, #55	; 0x37
 80031a0:	e9cd 4500 	strd	r4, r5, [sp]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4882      	ldr	r0, [pc, #520]	; (80033b0 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x27c>)
 80031a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031ac:	f003 f9ac 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("-250 to -1 = Retract valve state", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80031b0:	e9cd 4500 	strd	r4, r5, [sp]
 80031b4:	487f      	ldr	r0, [pc, #508]	; (80033b4 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x280>)
 80031b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031ba:	2241      	movs	r2, #65	; 0x41
 80031bc:	2137      	movs	r1, #55	; 0x37
 80031be:	f003 f9a3 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("0 = Neutral/initial valve state", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 80031c2:	e9cd 4500 	strd	r4, r5, [sp]
 80031c6:	487c      	ldr	r0, [pc, #496]	; (80033b8 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x284>)
 80031c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031cc:	224b      	movs	r2, #75	; 0x4b
 80031ce:	2137      	movs	r1, #55	; 0x37
 80031d0:	f003 f99a 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("1 to 250 = Extend valve state", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80031d4:	e9cd 4500 	strd	r4, r5, [sp]
 80031d8:	4878      	ldr	r0, [pc, #480]	; (80033bc <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x288>)
 80031da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031de:	2255      	movs	r2, #85	; 0x55
 80031e0:	2137      	movs	r1, #55	; 0x37
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80031e2:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("1 to 250 = Extend valve state", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80031e6:	f003 f98f 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80031ea:	2400      	movs	r4, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80031ec:	23e6      	movs	r3, #230	; 0xe6
 80031ee:	f240 1211 	movw	r2, #273	; 0x111
 80031f2:	21cd      	movs	r1, #205	; 0xcd
 80031f4:	2055      	movs	r0, #85	; 0x55
 80031f6:	9500      	str	r5, [sp, #0]
 80031f8:	f003 f858 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80031fc:	23e6      	movs	r3, #230	; 0xe6
 80031fe:	f240 1211 	movw	r2, #273	; 0x111
 8003202:	21cd      	movs	r1, #205	; 0xcd
 8003204:	2055      	movs	r0, #85	; 0x55
 8003206:	9400      	str	r4, [sp, #0]
 8003208:	f003 f8e4 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 800320c:	2302      	movs	r3, #2
 800320e:	e9cd 5300 	strd	r5, r3, [sp]
 8003212:	486b      	ldr	r0, [pc, #428]	; (80033c0 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x28c>)
 8003214:	4623      	mov	r3, r4
 8003216:	22d2      	movs	r2, #210	; 0xd2
 8003218:	215f      	movs	r1, #95	; 0x5f
 800321a:	f003 f975 	bl	8006508 <ILI9341_print_text>
			float flow = 500.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) - 250.0f;
 800321e:	eddf 8a69 	vldr	s17, [pc, #420]	; 80033c4 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x290>
 8003222:	ad05      	add	r5, sp, #20
void STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(J1939 *j1939, uint8_t *frame_id) {
 8003224:	2400      	movs	r4, #0
			if(flow > 1)
 8003226:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800322a:	b2e1      	uxtb	r1, r4
			float flow = 500.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) - 250.0f;
 800322c:	4608      	mov	r0, r1
 800322e:	9103      	str	r1, [sp, #12]
 8003230:	f7fd fe8a 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 8003234:	ee07 0a90 	vmov	s15, r0
 8003238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800323c:	eef0 7a68 	vmov.f32	s15, s17
 8003240:	eee7 7a08 	vfma.f32	s15, s14, s16
			if(flow > 1)
 8003244:	9903      	ldr	r1, [sp, #12]
			adc[i] = flow;
 8003246:	eebd 7ae7 	vcvt.s32.f32	s14, s15
			if(flow > 1)
 800324a:	eef4 7ac9 	vcmpe.f32	s15, s18
			adc[i] = flow;
 800324e:	ee17 3a10 	vmov	r3, s14
			if(flow > 1)
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			adc[i] = flow;
 8003256:	f825 3b02 	strh.w	r3, [r5], #2
			if(flow > 1)
 800325a:	f300 809e 	bgt.w	800339a <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x266>
			else if(flow < -1)
 800325e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
				valve_state = 0;
 8003262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	bf4c      	ite	mi
 800326c:	2302      	movmi	r3, #2
 800326e:	2300      	movpl	r3, #0
			uint8_t standard_flow = fabsf(flow);
 8003270:	eef0 7ae7 	vabs.f32	s15, s15
 8003274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			ISO_11783_Send_Auxiliary_Valve_Command(j1939, i, standard_flow, FAIL_SAFE_MODE_BLOCKED, valve_state);
 8003278:	9300      	str	r3, [sp, #0]
			uint8_t standard_flow = fabsf(flow);
 800327a:	edcd 7a03 	vstr	s15, [sp, #12]
			ISO_11783_Send_Auxiliary_Valve_Command(j1939, i, standard_flow, FAIL_SAFE_MODE_BLOCKED, valve_state);
 800327e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003282:	2300      	movs	r3, #0
 8003284:	4638      	mov	r0, r7
		for(uint8_t i = 0; i < 12; i++){
 8003286:	3401      	adds	r4, #1
			ISO_11783_Send_Auxiliary_Valve_Command(j1939, i, standard_flow, FAIL_SAFE_MODE_BLOCKED, valve_state);
 8003288:	f7ff f82f 	bl	80022ea <ISO_11783_Send_Auxiliary_Valve_Command>
		for(uint8_t i = 0; i < 12; i++){
 800328c:	2c0c      	cmp	r4, #12
 800328e:	d1cc      	bne.n	800322a <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0xf6>
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", adc[0], adc[1], adc[2]);
 8003290:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8003294:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8003298:	494b      	ldr	r1, [pc, #300]	; (80033c8 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x294>)
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	a80b      	add	r0, sp, #44	; 0x2c
 800329e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80032a2:	f00b ff2d 	bl	800f100 <siprintf>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80032a6:	240f      	movs	r4, #15
 80032a8:	2501      	movs	r5, #1
		add_spaces(43, text);
 80032aa:	a80b      	add	r0, sp, #44	; 0x2c
 80032ac:	f7ff ff2e 	bl	800310c <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80032b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032b4:	225f      	movs	r2, #95	; 0x5f
 80032b6:	2137      	movs	r1, #55	; 0x37
 80032b8:	a80b      	add	r0, sp, #44	; 0x2c
 80032ba:	e9cd 4500 	strd	r4, r5, [sp]
 80032be:	f003 f923 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "ADC3:%i ADC4:%i ADC5:%i", adc[3], adc[4], adc[5]);
 80032c2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80032c6:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 80032ca:	4940      	ldr	r1, [pc, #256]	; (80033cc <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x298>)
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	a80b      	add	r0, sp, #44	; 0x2c
 80032d0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80032d4:	f00b ff14 	bl	800f100 <siprintf>
		add_spaces(43, text);
 80032d8:	a80b      	add	r0, sp, #44	; 0x2c
 80032da:	f7ff ff17 	bl	800310c <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80032de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032e2:	2269      	movs	r2, #105	; 0x69
 80032e4:	2137      	movs	r1, #55	; 0x37
 80032e6:	a80b      	add	r0, sp, #44	; 0x2c
 80032e8:	e9cd 4500 	strd	r4, r5, [sp]
 80032ec:	f003 f90c 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "ADC6:%i ADC7:%i ADC8:%i", adc[6], adc[7], adc[8]);
 80032f0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80032f4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80032f8:	4935      	ldr	r1, [pc, #212]	; (80033d0 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x29c>)
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	a80b      	add	r0, sp, #44	; 0x2c
 80032fe:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8003302:	f00b fefd 	bl	800f100 <siprintf>
		add_spaces(43, text);
 8003306:	a80b      	add	r0, sp, #44	; 0x2c
 8003308:	f7ff ff00 	bl	800310c <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 800330c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003310:	2273      	movs	r2, #115	; 0x73
 8003312:	2137      	movs	r1, #55	; 0x37
 8003314:	a80b      	add	r0, sp, #44	; 0x2c
 8003316:	e9cd 4500 	strd	r4, r5, [sp]
 800331a:	f003 f8f5 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "ADC9:%i ADC10:%i ADC11:%i", adc[9], adc[10], adc[11]);
 800331e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8003322:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8003326:	492b      	ldr	r1, [pc, #172]	; (80033d4 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x2a0>)
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	a80b      	add	r0, sp, #44	; 0x2c
 800332c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8003330:	f00b fee6 	bl	800f100 <siprintf>
		add_spaces(43, text);
 8003334:	a80b      	add	r0, sp, #44	; 0x2c
 8003336:	f7ff fee9 	bl	800310c <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 800333a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800333e:	227d      	movs	r2, #125	; 0x7d
 8003340:	2137      	movs	r1, #55	; 0x37
 8003342:	a80b      	add	r0, sp, #44	; 0x2c
 8003344:	e9cd 4500 	strd	r4, r5, [sp]
 8003348:	f003 f8de 	bl	8006508 <ILI9341_print_text>
		if (TSC2046_isPressed()) {
 800334c:	f003 fae4 	bl	8006918 <TSC2046_isPressed>
 8003350:	2800      	cmp	r0, #0
 8003352:	f43f af64 	beq.w	800321e <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0xea>
			TSC2046_GetTouchData();
 8003356:	f003 fa77 	bl	8006848 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x2a4>)
			if (X >= 85 && X <= 273 && Y >= 205 && Y <= 230) {
 800335c:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800335e:	3b55      	subs	r3, #85	; 0x55
 8003360:	b29b      	uxth	r3, r3
 8003362:	2bbc      	cmp	r3, #188	; 0xbc
 8003364:	f63f af5b 	bhi.w	800321e <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0xea>
 8003368:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 800336a:	3bcd      	subs	r3, #205	; 0xcd
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b19      	cmp	r3, #25
 8003370:	f63f af55 	bhi.w	800321e <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0xea>
				ILI9341_hollow_rect(85, 205, 273, 230, COLOR_MAGENTA);
 8003374:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	f240 1211 	movw	r2, #273	; 0x111
 800337e:	23e6      	movs	r3, #230	; 0xe6
 8003380:	21cd      	movs	r1, #205	; 0xcd
 8003382:	2055      	movs	r0, #85	; 0x55
 8003384:	f003 f826 	bl	80063d4 <ILI9341_hollow_rect>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8003388:	2100      	movs	r1, #0
 800338a:	4630      	mov	r0, r6
}
 800338c:	b01b      	add	sp, #108	; 0x6c
 800338e:	ecbd 8b04 	vpop	{d8-d9}
 8003392:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8003396:	f000 bc47 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
				valve_state = VALVE_STATE_EXTEND;
 800339a:	2301      	movs	r3, #1
 800339c:	e768      	b.n	8003270 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x13c>
 800339e:	bf00      	nop
 80033a0:	08013301 	.word	0x08013301
 80033a4:	3bfa00fa 	.word	0x3bfa00fa
 80033a8:	0801332a 	.word	0x0801332a
 80033ac:	08013345 	.word	0x08013345
 80033b0:	08013365 	.word	0x08013365
 80033b4:	08013385 	.word	0x08013385
 80033b8:	080133a6 	.word	0x080133a6
 80033bc:	080133c6 	.word	0x080133c6
 80033c0:	080132da 	.word	0x080132da
 80033c4:	c37a0000 	.word	0xc37a0000
 80033c8:	080132e9 	.word	0x080132e9
 80033cc:	080133e4 	.word	0x080133e4
 80033d0:	080133fc 	.word	0x080133fc
 80033d4:	08013414 	.word	0x08013414
 80033d8:	20002728 	.word	0x20002728

080033dc <add_spaces.constprop.0>:

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static void add_spaces(uint8_t length, char text[]){
 80033dc:	b510      	push	{r4, lr}
 80033de:	4604      	mov	r4, r0
	/* This is for removing old values from LCD */
	for(uint8_t i = strlen(text); i < length; i++)
 80033e0:	f7fc fef6 	bl	80001d0 <strlen>
 80033e4:	b2c0      	uxtb	r0, r0
		text[i] = ' ';
 80033e6:	282b      	cmp	r0, #43	; 0x2b
 80033e8:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	f04f 0120 	mov.w	r1, #32
 80033f2:	bf88      	it	hi
 80033f4:	2200      	movhi	r2, #0
 80033f6:	4420      	add	r0, r4
 80033f8:	f00b fa10 	bl	800e81c <memset>
	text[length] = '\0'; /* C-String termination */
 80033fc:	2300      	movs	r3, #0
 80033fe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 8003402:	bd10      	pop	{r4, pc}

08003404 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame>:
void STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(uint8_t *frame_id) {
 8003404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003408:	b096      	sub	sp, #88	; 0x58
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800340a:	240f      	movs	r4, #15
 800340c:	9400      	str	r4, [sp, #0]
 800340e:	23ea      	movs	r3, #234	; 0xea
 8003410:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8003414:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(uint8_t *frame_id) {
 8003416:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003418:	2033      	movs	r0, #51	; 0x33
	ILI9341_print_text("ADC0 to ADC7 to PWM0 to PWM7", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800341a:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800341c:	f002 ff46 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003420:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003424:	f240 1209 	movw	r2, #265	; 0x109
 8003428:	211e      	movs	r1, #30
 800342a:	2032      	movs	r0, #50	; 0x32
 800342c:	f002 ff80 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("ADC0 to ADC7 to PWM0 to PWM7", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003430:	e9cd 4500 	strd	r4, r5, [sp]
 8003434:	486b      	ldr	r0, [pc, #428]	; (80035e4 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1e0>)
 8003436:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800343a:	220a      	movs	r2, #10
 800343c:	2137      	movs	r1, #55	; 0x37
 800343e:	f003 f863 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Give ADC0 to ADC7 current", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8003442:	e9cd 4500 	strd	r4, r5, [sp]
 8003446:	4868      	ldr	r0, [pc, #416]	; (80035e8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1e4>)
 8003448:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800344c:	2223      	movs	r2, #35	; 0x23
 800344e:	2137      	movs	r1, #55	; 0x37
 8003450:	f003 f85a 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("and PWM0 to PWM8 will open drain", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8003454:	e9cd 4500 	strd	r4, r5, [sp]
 8003458:	4864      	ldr	r0, [pc, #400]	; (80035ec <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1e8>)
 800345a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800345e:	222d      	movs	r2, #45	; 0x2d
 8003460:	2137      	movs	r1, #55	; 0x37
 8003462:	f003 f851 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("the PWM inputs for 0 to 2.2A", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8003466:	2237      	movs	r2, #55	; 0x37
 8003468:	e9cd 4500 	strd	r4, r5, [sp]
 800346c:	4611      	mov	r1, r2
 800346e:	4860      	ldr	r0, [pc, #384]	; (80035f0 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1ec>)
 8003470:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003474:	f003 f848 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("65535 = 100% PWM", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8003478:	e9cd 4500 	strd	r4, r5, [sp]
 800347c:	485d      	ldr	r0, [pc, #372]	; (80035f4 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1f0>)
 800347e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003482:	2241      	movs	r2, #65	; 0x41
 8003484:	2137      	movs	r1, #55	; 0x37
 8003486:	f003 f83f 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("0 = 0% PWM", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800348a:	e9cd 4500 	strd	r4, r5, [sp]
 800348e:	485a      	ldr	r0, [pc, #360]	; (80035f8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1f4>)
 8003490:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003494:	224b      	movs	r2, #75	; 0x4b
 8003496:	2137      	movs	r1, #55	; 0x37
 8003498:	f003 f836 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Set PWM prescaler for other PWM Hz", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 800349c:	e9cd 4500 	strd	r4, r5, [sp]
 80034a0:	4856      	ldr	r0, [pc, #344]	; (80035fc <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1f8>)
 80034a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034a6:	2255      	movs	r2, #85	; 0x55
 80034a8:	2137      	movs	r1, #55	; 0x37
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80034aa:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("Set PWM prescaler for other PWM Hz", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80034ae:	f003 f82b 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80034b2:	2400      	movs	r4, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80034b4:	23e6      	movs	r3, #230	; 0xe6
 80034b6:	f240 1211 	movw	r2, #273	; 0x111
 80034ba:	21cd      	movs	r1, #205	; 0xcd
 80034bc:	2055      	movs	r0, #85	; 0x55
 80034be:	9500      	str	r5, [sp, #0]
 80034c0:	f002 fef4 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80034c4:	9400      	str	r4, [sp, #0]
 80034c6:	23e6      	movs	r3, #230	; 0xe6
 80034c8:	f240 1211 	movw	r2, #273	; 0x111
 80034cc:	21cd      	movs	r1, #205	; 0xcd
 80034ce:	2055      	movs	r0, #85	; 0x55
 80034d0:	f002 ff80 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 80034d4:	2302      	movs	r3, #2
 80034d6:	e9cd 5300 	strd	r5, r3, [sp]
 80034da:	4849      	ldr	r0, [pc, #292]	; (8003600 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1fc>)
 80034dc:	4623      	mov	r3, r4
 80034de:	22d2      	movs	r2, #210	; 0xd2
 80034e0:	215f      	movs	r1, #95	; 0x5f
 80034e2:	f003 f811 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", pwm[0], pwm[1], pwm[2]);
 80034e6:	4c47      	ldr	r4, [pc, #284]	; (8003604 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x200>)
		for(uint8_t i = 0; i < 8; i++)
 80034e8:	af03      	add	r7, sp, #12
void STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(uint8_t *frame_id) {
 80034ea:	46b8      	mov	r8, r7
 80034ec:	2500      	movs	r5, #0
			pwm[i] = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 80034ee:	b2e8      	uxtb	r0, r5
 80034f0:	f7fd fd2a 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
		for(uint8_t i = 0; i < 8; i++)
 80034f4:	3501      	adds	r5, #1
 80034f6:	2d08      	cmp	r5, #8
			pwm[i] = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 80034f8:	f828 0b02 	strh.w	r0, [r8], #2
		for(uint8_t i = 0; i < 8; i++)
 80034fc:	d1f7      	bne.n	80034ee <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0xea>
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", pwm[0], pwm[1], pwm[2]);
 80034fe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8003502:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4621      	mov	r1, r4
 800350a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800350e:	a807      	add	r0, sp, #28
 8003510:	f00b fdf6 	bl	800f100 <siprintf>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8003514:	250f      	movs	r5, #15
 8003516:	f04f 0801 	mov.w	r8, #1
		add_spaces(43, text);
 800351a:	a807      	add	r0, sp, #28
 800351c:	f7ff ff5e 	bl	80033dc <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8003520:	e9cd 5800 	strd	r5, r8, [sp]
 8003524:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003528:	225f      	movs	r2, #95	; 0x5f
 800352a:	2137      	movs	r1, #55	; 0x37
 800352c:	a807      	add	r0, sp, #28
 800352e:	f002 ffeb 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "ADC3:%i ADC4:%i ADC5:%i", pwm[3], pwm[4], pwm[5]);
 8003532:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8003536:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800353a:	4933      	ldr	r1, [pc, #204]	; (8003608 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x204>)
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	a807      	add	r0, sp, #28
 8003540:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003544:	f00b fddc 	bl	800f100 <siprintf>
		add_spaces(43, text);
 8003548:	a807      	add	r0, sp, #28
 800354a:	f7ff ff47 	bl	80033dc <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 800354e:	e9cd 5800 	strd	r5, r8, [sp]
 8003552:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003556:	2269      	movs	r2, #105	; 0x69
 8003558:	2137      	movs	r1, #55	; 0x37
 800355a:	a807      	add	r0, sp, #28
 800355c:	f002 ffd4 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "ADC6:%i ADC7:%i", pwm[6], pwm[7]);
 8003560:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8003564:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8003568:	4928      	ldr	r1, [pc, #160]	; (800360c <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x208>)
 800356a:	a807      	add	r0, sp, #28
 800356c:	f00b fdc8 	bl	800f100 <siprintf>
		add_spaces(43, text);
 8003570:	a807      	add	r0, sp, #28
 8003572:	f7ff ff33 	bl	80033dc <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8003576:	e9cd 5800 	strd	r5, r8, [sp]
 800357a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800357e:	2273      	movs	r2, #115	; 0x73
 8003580:	2137      	movs	r1, #55	; 0x37
 8003582:	a807      	add	r0, sp, #28
 8003584:	f002 ffc0 	bl	8006508 <ILI9341_print_text>
 8003588:	2500      	movs	r5, #0
			STM32_PLC_PWM_Set(i, pwm[i]);
 800358a:	b2e8      	uxtb	r0, r5
 800358c:	f837 1b02 	ldrh.w	r1, [r7], #2
		for(uint8_t i = 0; i < 8; i++)
 8003590:	3501      	adds	r5, #1
			STM32_PLC_PWM_Set(i, pwm[i]);
 8003592:	f7fe fac9 	bl	8001b28 <STM32_PLC_PWM_Set>
		for(uint8_t i = 0; i < 8; i++)
 8003596:	2d08      	cmp	r5, #8
 8003598:	d1f7      	bne.n	800358a <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x186>
		if (TSC2046_isPressed()) {
 800359a:	f003 f9bd 	bl	8006918 <TSC2046_isPressed>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d0a2      	beq.n	80034e8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0xe4>
			TSC2046_GetTouchData();
 80035a2:	f003 f951 	bl	8006848 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 80035a6:	4a1a      	ldr	r2, [pc, #104]	; (8003610 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x20c>)
			if (X >= 85 && X <= 273 && Y >= 205 && Y <= 230) {
 80035a8:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 80035aa:	3b55      	subs	r3, #85	; 0x55
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2bbc      	cmp	r3, #188	; 0xbc
 80035b0:	d89a      	bhi.n	80034e8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0xe4>
 80035b2:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 80035b4:	3bcd      	subs	r3, #205	; 0xcd
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b19      	cmp	r3, #25
 80035ba:	d895      	bhi.n	80034e8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0xe4>
				ILI9341_hollow_rect(85, 205, 273, 230, COLOR_MAGENTA);
 80035bc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	f240 1211 	movw	r2, #273	; 0x111
 80035c6:	23e6      	movs	r3, #230	; 0xe6
 80035c8:	21cd      	movs	r1, #205	; 0xcd
 80035ca:	2055      	movs	r0, #85	; 0x55
 80035cc:	f002 ff02 	bl	80063d4 <ILI9341_hollow_rect>
	STM32_PLC_PWM_Reset();
 80035d0:	f7fe faf0 	bl	8001bb4 <STM32_PLC_PWM_Reset>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80035d4:	2100      	movs	r1, #0
 80035d6:	4630      	mov	r0, r6
}
 80035d8:	b016      	add	sp, #88	; 0x58
 80035da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80035de:	f000 bb23 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
 80035e2:	bf00      	nop
 80035e4:	0801342e 	.word	0x0801342e
 80035e8:	0801344b 	.word	0x0801344b
 80035ec:	08013465 	.word	0x08013465
 80035f0:	08013486 	.word	0x08013486
 80035f4:	080134a3 	.word	0x080134a3
 80035f8:	080134b4 	.word	0x080134b4
 80035fc:	080134bf 	.word	0x080134bf
 8003600:	080132da 	.word	0x080132da
 8003604:	080132e9 	.word	0x080132e9
 8003608:	080133e4 	.word	0x080133e4
 800360c:	080134e2 	.word	0x080134e2
 8003610:	20002728 	.word	0x20002728

08003614 <show_numpad_question>:

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint8_t min_value, uint8_t max_value, uint8_t *value){
 8003614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003616:	460f      	mov	r7, r1
	bool minusbutton_show = false;
	bool decimalbutton_show = false;
	float number_value;
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 8003618:	2100      	movs	r1, #0
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint8_t min_value, uint8_t max_value, uint8_t *value){
 800361a:	4615      	mov	r5, r2
 800361c:	461c      	mov	r4, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 800361e:	aa01      	add	r2, sp, #4
 8003620:	4603      	mov	r3, r0
 8003622:	4608      	mov	r0, r1
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint8_t min_value, uint8_t max_value, uint8_t *value){
 8003624:	9e08      	ldr	r6, [sp, #32]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 8003626:	f002 fa07 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 800362a:	4601      	mov	r1, r0
 800362c:	b928      	cbnz	r0, 800363a <show_numpad_question+0x26>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800362e:	4638      	mov	r0, r7
 8003630:	f000 fafa 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
		return 1;
 8003634:	2001      	movs	r0, #1
	else if(number_value > max_value)
		*value = max_value;
	else
		*value = (uint32_t) number_value;
	return 0;
}
 8003636:	b003      	add	sp, #12
 8003638:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(number_value < min_value)
 800363a:	ee07 5a10 	vmov	s14, r5
 800363e:	eddd 7a01 	vldr	s15, [sp, #4]
 8003642:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364e:	dd02      	ble.n	8003656 <show_numpad_question+0x42>
		*value = min_value;
 8003650:	7035      	strb	r5, [r6, #0]
	return 0;
 8003652:	2000      	movs	r0, #0
 8003654:	e7ef      	b.n	8003636 <show_numpad_question+0x22>
	else if(number_value > max_value)
 8003656:	ee07 4a10 	vmov	s14, r4
 800365a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800365e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*value = (uint32_t) number_value;
 8003666:	bfd7      	itett	le
 8003668:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		*value = max_value;
 800366c:	7034      	strbgt	r4, [r6, #0]
		*value = (uint32_t) number_value;
 800366e:	ee17 3a90 	vmovle	r3, s15
 8003672:	7033      	strble	r3, [r6, #0]
 8003674:	e7ed      	b.n	8003652 <show_numpad_question+0x3e>
	...

08003678 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame>:
void STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(uint8_t *frame_id) {
 8003678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367c:	b099      	sub	sp, #100	; 0x64
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800367e:	f04f 080f 	mov.w	r8, #15
 8003682:	f8cd 8000 	str.w	r8, [sp]
 8003686:	23ea      	movs	r3, #234	; 0xea
 8003688:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800368c:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(uint8_t *frame_id) {
 800368e:	4604      	mov	r4, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003690:	2033      	movs	r0, #51	; 0x33
	ILI9341_print_text("Configure the date and time and alarm", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003692:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003694:	f002 fe0a 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003698:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800369c:	f240 1209 	movw	r2, #265	; 0x109
 80036a0:	211e      	movs	r1, #30
 80036a2:	2032      	movs	r0, #50	; 0x32
 80036a4:	f002 fe44 	bl	8006330 <ILI9341_draw_horizontal_line>
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 80036a8:	f10d 0b1d 	add.w	fp, sp, #29
	ILI9341_print_text("Configure the date and time and alarm", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80036ac:	e9cd 8500 	strd	r8, r5, [sp]
 80036b0:	48c7      	ldr	r0, [pc, #796]	; (80039d0 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x358>)
 80036b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036b6:	220a      	movs	r2, #10
 80036b8:	2137      	movs	r1, #55	; 0x37
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 80036ba:	f10d 0a1e 	add.w	sl, sp, #30
	ILI9341_print_text("Configure the date and time and alarm", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80036be:	f002 ff23 	bl	8006508 <ILI9341_print_text>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 80036c2:	f10d 0721 	add.w	r7, sp, #33	; 0x21
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 80036c6:	465b      	mov	r3, fp
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 80036c8:	f10d 0622 	add.w	r6, sp, #34	; 0x22
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 80036cc:	4652      	mov	r2, sl
 80036ce:	a908      	add	r1, sp, #32
 80036d0:	f10d 001f 	add.w	r0, sp, #31
 80036d4:	f7fe faec 	bl	8001cb0 <STM32_PLC_RTC_Get_Date>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 80036d8:	463a      	mov	r2, r7
 80036da:	4631      	mov	r1, r6
 80036dc:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 80036e0:	f7fe fb16 	bl	8001d10 <STM32_PLC_RTC_Get_Time>
	ILI9341_print_text("Current date and time:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 80036e4:	e9cd 8500 	strd	r8, r5, [sp]
 80036e8:	48ba      	ldr	r0, [pc, #744]	; (80039d4 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x35c>)
 80036ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036ee:	2223      	movs	r2, #35	; 0x23
 80036f0:	2137      	movs	r1, #55	; 0x37
 80036f2:	f002 ff09 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Date:%i-%i-%i Time:%i:%i:%i", year + 2000, month, date, hours, minutes, seconds);
 80036f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80036fa:	9303      	str	r3, [sp, #12]
 80036fc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8003700:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003710:	49b1      	ldr	r1, [pc, #708]	; (80039d8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x360>)
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8003718:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800371c:	a809      	add	r0, sp, #36	; 0x24
 800371e:	f00b fcef 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8003722:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003726:	222d      	movs	r2, #45	; 0x2d
 8003728:	2137      	movs	r1, #55	; 0x37
 800372a:	e9cd 8500 	strd	r8, r5, [sp]
 800372e:	a809      	add	r0, sp, #36	; 0x24
 8003730:	f002 feea 	bl	8006508 <ILI9341_print_text>
	bool active = STM32_PLC_RTC_Alarm_A_Is_Activated();
 8003734:	f7fe fc1a 	bl	8001f6c <STM32_PLC_RTC_Alarm_A_Is_Activated>
 8003738:	9005      	str	r0, [sp, #20]
	bool enabled = STM32_PLC_RTC_Alarm_A_Is_Enabled();
 800373a:	f7fe fc11 	bl	8001f60 <STM32_PLC_RTC_Alarm_A_Is_Enabled>
	STM32_PLC_RTC_Get_Alarm_A(&date, &hours, &minutes);
 800373e:	4632      	mov	r2, r6
	bool enabled = STM32_PLC_RTC_Alarm_A_Is_Enabled();
 8003740:	4681      	mov	r9, r0
	STM32_PLC_RTC_Get_Alarm_A(&date, &hours, &minutes);
 8003742:	4639      	mov	r1, r7
 8003744:	a808      	add	r0, sp, #32
 8003746:	f7fe fb1b 	bl	8001d80 <STM32_PLC_RTC_Get_Alarm_A>
	ILI9341_print_text("Current alarm A:", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 800374a:	2237      	movs	r2, #55	; 0x37
 800374c:	4611      	mov	r1, r2
 800374e:	e9cd 8500 	strd	r8, r5, [sp]
 8003752:	48a2      	ldr	r0, [pc, #648]	; (80039dc <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x364>)
 8003754:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003758:	f002 fed6 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Date:%i Time:%i:%i Active:%i Enabled:%i", date, hours, minutes, active, enabled);
 800375c:	9b05      	ldr	r3, [sp, #20]
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8003764:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8003768:	499d      	ldr	r1, [pc, #628]	; (80039e0 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x368>)
 800376a:	f8cd 9008 	str.w	r9, [sp, #8]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	a809      	add	r0, sp, #36	; 0x24
 8003772:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8003776:	f00b fcc3 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 800377a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800377e:	2241      	movs	r2, #65	; 0x41
 8003780:	2137      	movs	r1, #55	; 0x37
 8003782:	e9cd 8500 	strd	r8, r5, [sp]
 8003786:	a809      	add	r0, sp, #36	; 0x24
 8003788:	f002 febe 	bl	8006508 <ILI9341_print_text>
	active = STM32_PLC_RTC_Alarm_B_Is_Activated();
 800378c:	f7fe fc26 	bl	8001fdc <STM32_PLC_RTC_Alarm_B_Is_Activated>
 8003790:	9005      	str	r0, [sp, #20]
	enabled = STM32_PLC_RTC_Alarm_B_Is_Enabled();
 8003792:	f7fe fc1d 	bl	8001fd0 <STM32_PLC_RTC_Alarm_B_Is_Enabled>
	STM32_PLC_RTC_Get_Alarm_B(&week_day, &hours, &minutes);
 8003796:	4632      	mov	r2, r6
	enabled = STM32_PLC_RTC_Alarm_B_Is_Enabled();
 8003798:	4681      	mov	r9, r0
	STM32_PLC_RTC_Get_Alarm_B(&week_day, &hours, &minutes);
 800379a:	4639      	mov	r1, r7
 800379c:	f10d 001f 	add.w	r0, sp, #31
 80037a0:	f7fe fb0e 	bl	8001dc0 <STM32_PLC_RTC_Get_Alarm_B>
	ILI9341_print_text("Current alarm B:", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 80037a4:	e9cd 8500 	strd	r8, r5, [sp]
 80037a8:	488e      	ldr	r0, [pc, #568]	; (80039e4 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x36c>)
 80037aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037ae:	224b      	movs	r2, #75	; 0x4b
 80037b0:	2137      	movs	r1, #55	; 0x37
 80037b2:	f002 fea9 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Week day:%i Time:%i:%i Active:%i Enabled:%i", week_day, hours, minutes, active, enabled);
 80037b6:	9b05      	ldr	r3, [sp, #20]
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80037be:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80037c2:	4989      	ldr	r1, [pc, #548]	; (80039e8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x370>)
 80037c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	a809      	add	r0, sp, #36	; 0x24
 80037cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80037d0:	f00b fc96 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80037d4:	e9cd 8500 	strd	r8, r5, [sp]
 80037d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037dc:	2255      	movs	r2, #85	; 0x55
 80037de:	2137      	movs	r1, #55	; 0x37
 80037e0:	a809      	add	r0, sp, #36	; 0x24
 80037e2:	f002 fe91 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Alarm A active = PWM4 to PWM7 high", 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80037e6:	e9cd 8500 	strd	r8, r5, [sp]
 80037ea:	4880      	ldr	r0, [pc, #512]	; (80039ec <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x374>)
 80037ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037f0:	225f      	movs	r2, #95	; 0x5f
 80037f2:	2137      	movs	r1, #55	; 0x37
 80037f4:	f002 fe88 	bl	8006508 <ILI9341_print_text>
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 80037f8:	f44f 69fc 	mov.w	r9, #2016	; 0x7e0
	ILI9341_print_text("Alarm B active = PWM0 to PWM3 high", 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80037fc:	e9cd 8500 	strd	r8, r5, [sp]
 8003800:	487b      	ldr	r0, [pc, #492]	; (80039f0 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x378>)
 8003802:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003806:	2269      	movs	r2, #105	; 0x69
 8003808:	2137      	movs	r1, #55	; 0x37
 800380a:	f002 fe7d 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 800380e:	f04f 0800 	mov.w	r8, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8003812:	23dc      	movs	r3, #220	; 0xdc
 8003814:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003818:	21c3      	movs	r1, #195	; 0xc3
 800381a:	2041      	movs	r0, #65	; 0x41
 800381c:	f8cd 9000 	str.w	r9, [sp]
 8003820:	f002 fd44 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8003824:	23dc      	movs	r3, #220	; 0xdc
 8003826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800382a:	21c3      	movs	r1, #195	; 0xc3
 800382c:	2041      	movs	r0, #65	; 0x41
 800382e:	f8cd 8000 	str.w	r8, [sp]
 8003832:	f002 fdcf 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Set date time alarm", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8003836:	2302      	movs	r3, #2
 8003838:	e9cd 9300 	strd	r9, r3, [sp]
 800383c:	486d      	ldr	r0, [pc, #436]	; (80039f4 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x37c>)
 800383e:	4643      	mov	r3, r8
 8003840:	22c8      	movs	r2, #200	; 0xc8
 8003842:	2146      	movs	r1, #70	; 0x46
 8003844:	f002 fe60 	bl	8006508 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 8003848:	23dc      	movs	r3, #220	; 0xdc
 800384a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800384e:	21c3      	movs	r1, #195	; 0xc3
 8003850:	2041      	movs	r0, #65	; 0x41
 8003852:	f003 fd3b 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Alarm A:Do you want to enable?") == 0) {
 8003856:	4868      	ldr	r0, [pc, #416]	; (80039f8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x380>)
 8003858:	f7fe ff06 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 800385c:	2800      	cmp	r0, #0
 800385e:	d164      	bne.n	800392a <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2b2>
		STM32_PLC_RTC_Enable_Alarm_A(true);
 8003860:	f7fe fb6c 	bl	8001f3c <STM32_PLC_RTC_Enable_Alarm_A>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Alarm A:Do you want to edit?") == 1) {
 8003864:	4865      	ldr	r0, [pc, #404]	; (80039fc <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x384>)
 8003866:	f7fe feff 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 800386a:	2801      	cmp	r0, #1
 800386c:	4605      	mov	r5, r0
 800386e:	d123      	bne.n	80038b8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x240>
		if(show_numpad_question("Alarm A:Enter hours between 0 and 23", frame_id, 0, 23, &hours))
 8003870:	2200      	movs	r2, #0
 8003872:	4863      	ldr	r0, [pc, #396]	; (8003a00 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x388>)
 8003874:	9700      	str	r7, [sp, #0]
 8003876:	2317      	movs	r3, #23
 8003878:	4621      	mov	r1, r4
 800387a:	f7ff fecb 	bl	8003614 <show_numpad_question>
 800387e:	4602      	mov	r2, r0
 8003880:	2800      	cmp	r0, #0
 8003882:	d14f      	bne.n	8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
		if(show_numpad_question("Alarm A:Enter minutes between 0 and 59", frame_id, 0, 59, &minutes))
 8003884:	485f      	ldr	r0, [pc, #380]	; (8003a04 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x38c>)
 8003886:	9600      	str	r6, [sp, #0]
 8003888:	233b      	movs	r3, #59	; 0x3b
 800388a:	4621      	mov	r1, r4
 800388c:	f7ff fec2 	bl	8003614 <show_numpad_question>
 8003890:	2800      	cmp	r0, #0
 8003892:	d147      	bne.n	8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
		if(show_numpad_question("Alarm A:Enter date between 1 and 31", frame_id, 1, 31, &date))
 8003894:	ab08      	add	r3, sp, #32
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	485b      	ldr	r0, [pc, #364]	; (8003a08 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x390>)
 800389a:	231f      	movs	r3, #31
 800389c:	462a      	mov	r2, r5
 800389e:	4621      	mov	r1, r4
 80038a0:	f7ff feb8 	bl	8003614 <show_numpad_question>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d13d      	bne.n	8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
		STM32_PLC_RTC_Set_Alarm_A(minutes, hours, date);
 80038a8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80038ac:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 80038b0:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 80038b4:	f7fe faa4 	bl	8001e00 <STM32_PLC_RTC_Set_Alarm_A>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Alarm B:Do you want to enable?") == 0) {
 80038b8:	4854      	ldr	r0, [pc, #336]	; (8003a0c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x394>)
 80038ba:	f7fe fed5 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80038be:	bbb0      	cbnz	r0, 800392e <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2b6>
		STM32_PLC_RTC_Enable_Alarm_B(true);
 80038c0:	f7fe fb72 	bl	8001fa8 <STM32_PLC_RTC_Enable_Alarm_B>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Alarm B:Do you want to edit?") == 1) {
 80038c4:	4852      	ldr	r0, [pc, #328]	; (8003a10 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x398>)
 80038c6:	f7fe fecf 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80038ca:	2801      	cmp	r0, #1
 80038cc:	4605      	mov	r5, r0
 80038ce:	d121      	bne.n	8003914 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x29c>
		if(show_numpad_question("Alarm B:Enter hours between 0 and 23", frame_id, 0, 23, &hours))
 80038d0:	2200      	movs	r2, #0
 80038d2:	4850      	ldr	r0, [pc, #320]	; (8003a14 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x39c>)
 80038d4:	9700      	str	r7, [sp, #0]
 80038d6:	2317      	movs	r3, #23
 80038d8:	4621      	mov	r1, r4
 80038da:	f7ff fe9b 	bl	8003614 <show_numpad_question>
 80038de:	4602      	mov	r2, r0
 80038e0:	bb00      	cbnz	r0, 8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
		if(show_numpad_question("Alarm B:Enter minutes between 0 and 59", frame_id, 0, 59, &minutes))
 80038e2:	484d      	ldr	r0, [pc, #308]	; (8003a18 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3a0>)
 80038e4:	9600      	str	r6, [sp, #0]
 80038e6:	233b      	movs	r3, #59	; 0x3b
 80038e8:	4621      	mov	r1, r4
 80038ea:	f7ff fe93 	bl	8003614 <show_numpad_question>
 80038ee:	b9c8      	cbnz	r0, 8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
		if(show_numpad_question("Alarm B:Enter week day between 1 and 7", frame_id, 1, 7, &week_day))
 80038f0:	f10d 031f 	add.w	r3, sp, #31
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	4849      	ldr	r0, [pc, #292]	; (8003a1c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3a4>)
 80038f8:	2307      	movs	r3, #7
 80038fa:	462a      	mov	r2, r5
 80038fc:	4621      	mov	r1, r4
 80038fe:	f7ff fe89 	bl	8003614 <show_numpad_question>
 8003902:	b978      	cbnz	r0, 8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
		STM32_PLC_RTC_Set_Alarm_B(minutes, hours, week_day);
 8003904:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8003908:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 800390c:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 8003910:	f7fe fa94 	bl	8001e3c <STM32_PLC_RTC_Set_Alarm_B>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set date and time?") == 0) {
 8003914:	4842      	ldr	r0, [pc, #264]	; (8003a20 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3a8>)
 8003916:	f7fe fea7 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 800391a:	4601      	mov	r1, r0
 800391c:	b948      	cbnz	r0, 8003932 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ba>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800391e:	4620      	mov	r0, r4
 8003920:	f000 f982 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 8003924:	b019      	add	sp, #100	; 0x64
 8003926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		STM32_PLC_RTC_Enable_Alarm_A(true);
 800392a:	4628      	mov	r0, r5
 800392c:	e798      	b.n	8003860 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1e8>
		STM32_PLC_RTC_Enable_Alarm_B(true);
 800392e:	2001      	movs	r0, #1
 8003930:	e7c6      	b.n	80038c0 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x248>
	if(show_numpad_question("Enter year between 0 and 99", frame_id, 0, 99, &year))
 8003932:	483c      	ldr	r0, [pc, #240]	; (8003a24 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3ac>)
 8003934:	f8cd b000 	str.w	fp, [sp]
 8003938:	2363      	movs	r3, #99	; 0x63
 800393a:	2200      	movs	r2, #0
 800393c:	4621      	mov	r1, r4
 800393e:	f7ff fe69 	bl	8003614 <show_numpad_question>
 8003942:	2800      	cmp	r0, #0
 8003944:	d1ee      	bne.n	8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
	if(show_numpad_question("Enter month between 1 and 12", frame_id, 1, 11, &month))
 8003946:	4838      	ldr	r0, [pc, #224]	; (8003a28 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3b0>)
 8003948:	f8cd a000 	str.w	sl, [sp]
 800394c:	230b      	movs	r3, #11
 800394e:	2201      	movs	r2, #1
 8003950:	4621      	mov	r1, r4
 8003952:	f7ff fe5f 	bl	8003614 <show_numpad_question>
 8003956:	2800      	cmp	r0, #0
 8003958:	d1e4      	bne.n	8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
	if(show_numpad_question("Enter week day between 1 and 7", frame_id, 1, 7, &week_day))
 800395a:	f10d 031f 	add.w	r3, sp, #31
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	4832      	ldr	r0, [pc, #200]	; (8003a2c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3b4>)
 8003962:	2307      	movs	r3, #7
 8003964:	2201      	movs	r2, #1
 8003966:	4621      	mov	r1, r4
 8003968:	f7ff fe54 	bl	8003614 <show_numpad_question>
 800396c:	2800      	cmp	r0, #0
 800396e:	d1d9      	bne.n	8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
	if(show_numpad_question("Enter date between 1 and 31", frame_id, 1, 31, &date))
 8003970:	ab08      	add	r3, sp, #32
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2201      	movs	r2, #1
 8003976:	482e      	ldr	r0, [pc, #184]	; (8003a30 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3b8>)
 8003978:	231f      	movs	r3, #31
 800397a:	4621      	mov	r1, r4
 800397c:	f7ff fe4a 	bl	8003614 <show_numpad_question>
 8003980:	4602      	mov	r2, r0
 8003982:	2800      	cmp	r0, #0
 8003984:	d1ce      	bne.n	8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
	if(show_numpad_question("Enter hours between 0 and 23", frame_id, 0, 23, &hours))
 8003986:	482b      	ldr	r0, [pc, #172]	; (8003a34 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3bc>)
 8003988:	9700      	str	r7, [sp, #0]
 800398a:	2317      	movs	r3, #23
 800398c:	4621      	mov	r1, r4
 800398e:	f7ff fe41 	bl	8003614 <show_numpad_question>
 8003992:	4602      	mov	r2, r0
 8003994:	2800      	cmp	r0, #0
 8003996:	d1c5      	bne.n	8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
	if(show_numpad_question("Enter minutes between 0 and 59", frame_id, 0, 59, &minutes))
 8003998:	4827      	ldr	r0, [pc, #156]	; (8003a38 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3c0>)
 800399a:	9600      	str	r6, [sp, #0]
 800399c:	233b      	movs	r3, #59	; 0x3b
 800399e:	4621      	mov	r1, r4
 80039a0:	f7ff fe38 	bl	8003614 <show_numpad_question>
 80039a4:	4605      	mov	r5, r0
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d1bc      	bne.n	8003924 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2ac>
	STM32_PLC_RTC_Set_Date(date, week_day, month, year);
 80039aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80039ae:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80039b2:	f89d 101f 	ldrb.w	r1, [sp, #31]
 80039b6:	f89d 0020 	ldrb.w	r0, [sp, #32]
 80039ba:	f7fe f995 	bl	8001ce8 <STM32_PLC_RTC_Set_Date>
	STM32_PLC_RTC_Set_Time(0, minutes, hours);
 80039be:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 80039c2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80039c6:	4628      	mov	r0, r5
 80039c8:	f7fe f9c0 	bl	8001d4c <STM32_PLC_RTC_Set_Time>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80039cc:	4629      	mov	r1, r5
 80039ce:	e7a6      	b.n	800391e <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2a6>
 80039d0:	080134f2 	.word	0x080134f2
 80039d4:	08013518 	.word	0x08013518
 80039d8:	0801352f 	.word	0x0801352f
 80039dc:	0801354b 	.word	0x0801354b
 80039e0:	0801355c 	.word	0x0801355c
 80039e4:	08013584 	.word	0x08013584
 80039e8:	08013595 	.word	0x08013595
 80039ec:	080135c1 	.word	0x080135c1
 80039f0:	080135e4 	.word	0x080135e4
 80039f4:	08013607 	.word	0x08013607
 80039f8:	0801361b 	.word	0x0801361b
 80039fc:	0801363a 	.word	0x0801363a
 8003a00:	08013657 	.word	0x08013657
 8003a04:	0801367c 	.word	0x0801367c
 8003a08:	080136a3 	.word	0x080136a3
 8003a0c:	080136c7 	.word	0x080136c7
 8003a10:	080136e6 	.word	0x080136e6
 8003a14:	08013703 	.word	0x08013703
 8003a18:	08013728 	.word	0x08013728
 8003a1c:	0801374f 	.word	0x0801374f
 8003a20:	08013776 	.word	0x08013776
 8003a24:	08013798 	.word	0x08013798
 8003a28:	080137b4 	.word	0x080137b4
 8003a2c:	08013757 	.word	0x08013757
 8003a30:	080136ab 	.word	0x080136ab
 8003a34:	0801365f 	.word	0x0801365f
 8003a38:	08013684 	.word	0x08013684

08003a3c <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(uint8_t *frame_id) {
 8003a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3e:	b095      	sub	sp, #84	; 0x54
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003a40:	250f      	movs	r5, #15
 8003a42:	9500      	str	r5, [sp, #0]
 8003a44:	23ea      	movs	r3, #234	; 0xea
 8003a46:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8003a4a:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(uint8_t *frame_id) {
 8003a4c:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003a4e:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set encoder revolution", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003a50:	2401      	movs	r4, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003a52:	f002 fc2b 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003a56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a5a:	f240 1209 	movw	r2, #265	; 0x109
 8003a5e:	211e      	movs	r1, #30
 8003a60:	2032      	movs	r0, #50	; 0x32
 8003a62:	f002 fc65 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set encoder revolution", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003a66:	e9cd 5400 	strd	r5, r4, [sp]
 8003a6a:	4863      	ldr	r0, [pc, #396]	; (8003bf8 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1bc>)
 8003a6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a70:	220a      	movs	r2, #10
 8003a72:	2137      	movs	r1, #55	; 0x37
 8003a74:	f002 fd48 	bl	8006508 <ILI9341_print_text>

	/* Show all calibration inputs */
	ILI9341_print_text("Encoder counts between:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8003a78:	e9cd 5400 	strd	r5, r4, [sp]
 8003a7c:	485f      	ldr	r0, [pc, #380]	; (8003bfc <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1c0>)
 8003a7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a82:	2223      	movs	r2, #35	; 0x23
 8003a84:	2137      	movs	r1, #55	; 0x37
 8003a86:	f002 fd3f 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("-32768 to 32767", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8003a8a:	e9cd 5400 	strd	r5, r4, [sp]
 8003a8e:	485c      	ldr	r0, [pc, #368]	; (8003c00 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1c4>)
 8003a90:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a94:	222d      	movs	r2, #45	; 0x2d
 8003a96:	2137      	movs	r1, #55	; 0x37
 8003a98:	f002 fd36 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Set how many pulses one", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8003a9c:	2237      	movs	r2, #55	; 0x37
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	e9cd 5400 	strd	r5, r4, [sp]
 8003aa4:	4857      	ldr	r0, [pc, #348]	; (8003c04 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1c8>)
 8003aa6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003aaa:	f002 fd2d 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("revolution is for encoder:", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8003aae:	e9cd 5400 	strd	r5, r4, [sp]
 8003ab2:	4855      	ldr	r0, [pc, #340]	; (8003c08 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1cc>)
 8003ab4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ab8:	2241      	movs	r2, #65	; 0x41
 8003aba:	2137      	movs	r1, #55	; 0x37
 8003abc:	f002 fd24 	bl	8006508 <ILI9341_print_text>

	/* Show selected frequency */
	char text[50];
	ILI9341_print_text("Current settings:", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ac0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ac4:	224b      	movs	r2, #75	; 0x4b
 8003ac6:	e9cd 5400 	strd	r5, r4, [sp]
 8003aca:	4850      	ldr	r0, [pc, #320]	; (8003c0c <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1d0>)
 8003acc:	2137      	movs	r1, #55	; 0x37
 8003ace:	f002 fd1b 	bl	8006508 <ILI9341_print_text>
	uint16_t pulses0, pulses1, pulses2;
	STM32_PLC_Encoder_Get_Calibration(0, &pulses0);
 8003ad2:	f10d 0112 	add.w	r1, sp, #18
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f7fd fc54 	bl	8001384 <STM32_PLC_Encoder_Get_Calibration>
	STM32_PLC_Encoder_Get_Calibration(1, &pulses1);
 8003adc:	a905      	add	r1, sp, #20
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7fd fc50 	bl	8001384 <STM32_PLC_Encoder_Get_Calibration>
	STM32_PLC_Encoder_Get_Calibration(2, &pulses2);
 8003ae4:	f10d 0116 	add.w	r1, sp, #22
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f7fd fc4b 	bl	8001384 <STM32_PLC_Encoder_Get_Calibration>
	sprintf(text, "Encoder0:%i Encoder1:%i Encoder2:%i", pulses0, pulses1, pulses2);
 8003aee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8003af2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8003af6:	4946      	ldr	r1, [pc, #280]	; (8003c10 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1d4>)
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	a807      	add	r0, sp, #28
 8003afc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003b00:	f00b fafe 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);

	/* Select settings button */
	ILI9341_fill_rect(90, 195, 273, 220, COLOR_GREEN);
 8003b04:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8003b08:	e9cd 5400 	strd	r5, r4, [sp]
 8003b0c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b10:	2255      	movs	r2, #85	; 0x55
 8003b12:	2137      	movs	r1, #55	; 0x37
 8003b14:	a807      	add	r0, sp, #28
 8003b16:	f002 fcf7 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(90, 195, 273, 220, COLOR_BLACK);
 8003b1a:	2500      	movs	r5, #0
	ILI9341_fill_rect(90, 195, 273, 220, COLOR_GREEN);
 8003b1c:	23dc      	movs	r3, #220	; 0xdc
 8003b1e:	f240 1211 	movw	r2, #273	; 0x111
 8003b22:	21c3      	movs	r1, #195	; 0xc3
 8003b24:	205a      	movs	r0, #90	; 0x5a
 8003b26:	9700      	str	r7, [sp, #0]
 8003b28:	f002 fbc0 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(90, 195, 273, 220, COLOR_BLACK);
 8003b2c:	23dc      	movs	r3, #220	; 0xdc
 8003b2e:	f240 1211 	movw	r2, #273	; 0x111
 8003b32:	21c3      	movs	r1, #195	; 0xc3
 8003b34:	205a      	movs	r0, #90	; 0x5a
 8003b36:	9500      	str	r5, [sp, #0]
 8003b38:	f002 fc4c 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Select encoder", 100, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e9cd 7300 	strd	r7, r3, [sp]
 8003b42:	4834      	ldr	r0, [pc, #208]	; (8003c14 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1d8>)
 8003b44:	462b      	mov	r3, r5
 8003b46:	22c8      	movs	r2, #200	; 0xc8
 8003b48:	2164      	movs	r1, #100	; 0x64
 8003b4a:	f002 fcdd 	bl	8006508 <ILI9341_print_text>

	/* Logic for request button */
	STM32_PLC_LCD_Call_One_Button_Logic(90, 195, 273, 220);
 8003b4e:	23dc      	movs	r3, #220	; 0xdc
 8003b50:	f240 1211 	movw	r2, #273	; 0x111
 8003b54:	21c3      	movs	r1, #195	; 0xc3
 8003b56:	205a      	movs	r0, #90	; 0x5a
 8003b58:	f003 fbb8 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set encoder revolution?") == 0) {
 8003b5c:	482e      	ldr	r0, [pc, #184]	; (8003c18 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1dc>)
 8003b5e:	f7fe fd83 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8003b62:	b928      	cbnz	r0, 8003b70 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x134>

	/* Apply them */
	STM32_PLC_Encoder_Set_Calibration(encoder_choice, pulses_per_revolution, true);

	/* Show main frame again */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8003b64:	2100      	movs	r1, #0
 8003b66:	4630      	mov	r0, r6
 8003b68:	f000 f85e 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 8003b6c:	b015      	add	sp, #84	; 0x54
 8003b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 1 and 65535") == 0) {
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1e0>)
 8003b72:	aa06      	add	r2, sp, #24
 8003b74:	4629      	mov	r1, r5
 8003b76:	4628      	mov	r0, r5
 8003b78:	f001 ff5e 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	d0f1      	beq.n	8003b64 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x128>
	if(number_value < 1)
 8003b80:	eddd 7a06 	vldr	s15, [sp, #24]
 8003b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b90:	d40d      	bmi.n	8003bae <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x172>
	else if(number_value > 65535)
 8003b92:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003c20 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1e4>
 8003b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		pulses_per_revolution = (uint16_t) number_value;
 8003b9e:	bfd7      	itett	le
 8003ba0:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		pulses_per_revolution = 65535;
 8003ba4:	f64f 74ff 	movwgt	r4, #65535	; 0xffff
		pulses_per_revolution = (uint16_t) number_value;
 8003ba8:	ee17 3a90 	vmovle	r3, s15
 8003bac:	b29c      	uxthle	r4, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Set setting for Encoder0=0, Encoder1=1, Encoder2=2") == 0) {
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1e8>)
 8003bb2:	aa06      	add	r2, sp, #24
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	f001 ff3f 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d0d2      	beq.n	8003b64 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x128>
	if(number_value < 0)
 8003bbe:	eddd 7a06 	vldr	s15, [sp, #24]
 8003bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bca:	d411      	bmi.n	8003bf0 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1b4>
	else if(number_value > 2)
 8003bcc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	dc0c      	bgt.n	8003bf4 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1b8>
		encoder_choice = (uint8_t) number_value;
 8003bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bde:	edcd 7a03 	vstr	s15, [sp, #12]
 8003be2:	f89d 000c 	ldrb.w	r0, [sp, #12]
	STM32_PLC_Encoder_Set_Calibration(encoder_choice, pulses_per_revolution, true);
 8003be6:	2201      	movs	r2, #1
 8003be8:	4621      	mov	r1, r4
 8003bea:	f7fd fbc1 	bl	8001370 <STM32_PLC_Encoder_Set_Calibration>
 8003bee:	e7b9      	b.n	8003b64 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x128>
		encoder_choice = 0;
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	e7f8      	b.n	8003be6 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1aa>
		encoder_choice = 2;
 8003bf4:	2002      	movs	r0, #2
 8003bf6:	e7f6      	b.n	8003be6 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1aa>
 8003bf8:	080137d1 	.word	0x080137d1
 8003bfc:	080137e8 	.word	0x080137e8
 8003c00:	08013800 	.word	0x08013800
 8003c04:	08013810 	.word	0x08013810
 8003c08:	08013828 	.word	0x08013828
 8003c0c:	08013843 	.word	0x08013843
 8003c10:	08013855 	.word	0x08013855
 8003c14:	08013879 	.word	0x08013879
 8003c18:	08013888 	.word	0x08013888
 8003c1c:	080138af 	.word	0x080138af
 8003c20:	477fff00 	.word	0x477fff00
 8003c24:	080138d6 	.word	0x080138d6

08003c28 <STM32_PLC_LCD_Show_Main_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

/* Create the main frame */
void STM32_PLC_LCD_Show_Main_Frame(uint8_t *frame_id, bool change_only_ABC_buttons) {
 8003c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	b08d      	sub	sp, #52	; 0x34
 8003c30:	460f      	mov	r7, r1
	/* Set rotation */
	ILI9341_set_rotation(2);
 8003c32:	2002      	movs	r0, #2
 8003c34:	f002 fd38 	bl	80066a8 <ILI9341_set_rotation>

	if(!change_only_ABC_buttons) {
 8003c38:	2f00      	cmp	r7, #0
 8003c3a:	d153      	bne.n	8003ce4 <STM32_PLC_LCD_Show_Main_Frame+0xbc>
		/* Set background */
		ILI9341_fill_screen(COLOR_NAVY);
 8003c3c:	200f      	movs	r0, #15
 8003c3e:	f002 faff 	bl	8006240 <ILI9341_fill_screen>

		/* Print frame - large square */
		ILI9341_draw_horizontal_line(5, 235, 310, COLOR_GREEN);
 8003c42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c46:	f44f 729b 	mov.w	r2, #310	; 0x136
 8003c4a:	21eb      	movs	r1, #235	; 0xeb
 8003c4c:	2005      	movs	r0, #5
 8003c4e:	f002 fb6f 	bl	8006330 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 5, 310, COLOR_GREEN);
 8003c52:	2105      	movs	r1, #5
 8003c54:	4608      	mov	r0, r1
 8003c56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c5a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8003c5e:	f002 fb67 	bl	8006330 <ILI9341_draw_horizontal_line>
		ILI9341_draw_vertical_line(5, 5, 230, COLOR_GREEN);
 8003c62:	2105      	movs	r1, #5
 8003c64:	4608      	mov	r0, r1
 8003c66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c6a:	22e6      	movs	r2, #230	; 0xe6
 8003c6c:	f002 fb8a 	bl	8006384 <ILI9341_draw_vertical_line>
		ILI9341_draw_vertical_line(315, 5, 230, COLOR_GREEN);
 8003c70:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c74:	22e6      	movs	r2, #230	; 0xe6
 8003c76:	2105      	movs	r1, #5
 8003c78:	f240 103b 	movw	r0, #315	; 0x13b
 8003c7c:	f002 fb82 	bl	8006384 <ILI9341_draw_vertical_line>

		/* Print buttons - Small squares */
		ILI9341_draw_vertical_line(50, 5, 230, COLOR_GREEN);
 8003c80:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c84:	22e6      	movs	r2, #230	; 0xe6
 8003c86:	2105      	movs	r1, #5
 8003c88:	2032      	movs	r0, #50	; 0x32
 8003c8a:	f002 fb7b 	bl	8006384 <ILI9341_draw_vertical_line>
		ILI9341_draw_horizontal_line(5, 49, 45, COLOR_GREEN);
 8003c8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c92:	222d      	movs	r2, #45	; 0x2d
 8003c94:	2131      	movs	r1, #49	; 0x31
 8003c96:	2005      	movs	r0, #5
 8003c98:	f002 fb4a 	bl	8006330 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 96, 45, COLOR_GREEN);
 8003c9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ca0:	222d      	movs	r2, #45	; 0x2d
 8003ca2:	2160      	movs	r1, #96	; 0x60
 8003ca4:	2005      	movs	r0, #5
 8003ca6:	f002 fb43 	bl	8006330 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 143, 45, COLOR_GREEN);
 8003caa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cae:	222d      	movs	r2, #45	; 0x2d
 8003cb0:	218f      	movs	r1, #143	; 0x8f
 8003cb2:	2005      	movs	r0, #5
 8003cb4:	f002 fb3c 	bl	8006330 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 190, 45, COLOR_GREEN);
 8003cb8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cbc:	222d      	movs	r2, #45	; 0x2d
 8003cbe:	21be      	movs	r1, #190	; 0xbe
 8003cc0:	2005      	movs	r0, #5
 8003cc2:	f002 fb35 	bl	8006330 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 235, 45, COLOR_GREEN);
 8003cc6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cca:	222d      	movs	r2, #45	; 0x2d
 8003ccc:	21eb      	movs	r1, #235	; 0xeb
 8003cce:	2005      	movs	r0, #5
 8003cd0:	f002 fb2e 	bl	8006330 <ILI9341_draw_horizontal_line>

		/* This line is for the input and output text */
		ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003cd4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cd8:	f240 1209 	movw	r2, #265	; 0x109
 8003cdc:	211e      	movs	r1, #30
 8003cde:	2032      	movs	r0, #50	; 0x32
 8003ce0:	f002 fb26 	bl	8006330 <ILI9341_draw_horizontal_line>
	}
	/* Apply them */
	char text[40];
	sprintf(text, "%c", 65 + 3 * *frame_id); /* A */
 8003ce4:	7832      	ldrb	r2, [r6, #0]
 8003ce6:	49b5      	ldr	r1, [pc, #724]	; (8003fbc <STM32_PLC_LCD_Show_Main_Frame+0x394>)
 8003ce8:	2503      	movs	r5, #3
 8003cea:	f04f 0941 	mov.w	r9, #65	; 0x41
	ILI9341_print_text(text, 18, 13, COLOR_YELLOW, COLOR_NAVY, 4);
 8003cee:	240f      	movs	r4, #15
 8003cf0:	f04f 0804 	mov.w	r8, #4
	sprintf(text, "%c", 65 + 3 * *frame_id); /* A */
 8003cf4:	fb05 9202 	mla	r2, r5, r2, r9
 8003cf8:	a802      	add	r0, sp, #8
 8003cfa:	f00b fa01 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 18, 13, COLOR_YELLOW, COLOR_NAVY, 4);
 8003cfe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d02:	220d      	movs	r2, #13
 8003d04:	2112      	movs	r1, #18
 8003d06:	a802      	add	r0, sp, #8
 8003d08:	e9cd 4800 	strd	r4, r8, [sp]
 8003d0c:	f002 fbfc 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "%c", 66 + 3 * *frame_id); /* B */
 8003d10:	7832      	ldrb	r2, [r6, #0]
 8003d12:	49aa      	ldr	r1, [pc, #680]	; (8003fbc <STM32_PLC_LCD_Show_Main_Frame+0x394>)
 8003d14:	2342      	movs	r3, #66	; 0x42
 8003d16:	fb05 3202 	mla	r2, r5, r2, r3
 8003d1a:	a802      	add	r0, sp, #8
 8003d1c:	f00b f9f0 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 18, 59, COLOR_CYAN, COLOR_NAVY, 4);
 8003d20:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003d24:	223b      	movs	r2, #59	; 0x3b
 8003d26:	2112      	movs	r1, #18
 8003d28:	a802      	add	r0, sp, #8
 8003d2a:	e9cd 4800 	strd	r4, r8, [sp]
 8003d2e:	f002 fbeb 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "%c", 67 + 3 * *frame_id); /* C */
 8003d32:	7832      	ldrb	r2, [r6, #0]
 8003d34:	49a1      	ldr	r1, [pc, #644]	; (8003fbc <STM32_PLC_LCD_Show_Main_Frame+0x394>)
 8003d36:	2343      	movs	r3, #67	; 0x43
 8003d38:	fb05 3202 	mla	r2, r5, r2, r3
 8003d3c:	a802      	add	r0, sp, #8
 8003d3e:	f00b f9df 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 18, 106, COLOR_MAGENTA, COLOR_NAVY, 4);
 8003d42:	e9cd 4800 	strd	r4, r8, [sp]
 8003d46:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003d4a:	226a      	movs	r2, #106	; 0x6a
 8003d4c:	2112      	movs	r1, #18
 8003d4e:	a802      	add	r0, sp, #8
 8003d50:	f002 fbda 	bl	8006508 <ILI9341_print_text>
	if(!change_only_ABC_buttons) {
 8003d54:	2f00      	cmp	r7, #0
 8003d56:	f040 812e 	bne.w	8003fb6 <STM32_PLC_LCD_Show_Main_Frame+0x38e>
		ILI9341_print_text("<-", 10, 156, COLOR_ORANGE, COLOR_NAVY, 3);
 8003d5a:	e9cd 4500 	strd	r4, r5, [sp]
 8003d5e:	4898      	ldr	r0, [pc, #608]	; (8003fc0 <STM32_PLC_LCD_Show_Main_Frame+0x398>)
 8003d60:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d64:	229c      	movs	r2, #156	; 0x9c
 8003d66:	210a      	movs	r1, #10
 8003d68:	f002 fbce 	bl	8006508 <ILI9341_print_text>
		ILI9341_print_text("->", 14, 202, COLOR_GREEN, COLOR_NAVY, 3);
 8003d6c:	e9cd 4500 	strd	r4, r5, [sp]
 8003d70:	4894      	ldr	r0, [pc, #592]	; (8003fc4 <STM32_PLC_LCD_Show_Main_Frame+0x39c>)
 8003d72:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d76:	22ca      	movs	r2, #202	; 0xca
 8003d78:	210e      	movs	r1, #14
 8003d7a:	f002 fbc5 	bl	8006508 <ILI9341_print_text>

		/* Print title */
		ILI9341_print_text("Main frame", 55, 10, COLOR_YELLOW, COLOR_NAVY, 2);
 8003d7e:	2302      	movs	r3, #2
 8003d80:	220a      	movs	r2, #10
 8003d82:	e9cd 4300 	strd	r4, r3, [sp]
 8003d86:	4890      	ldr	r0, [pc, #576]	; (8003fc8 <STM32_PLC_LCD_Show_Main_Frame+0x3a0>)
 8003d88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d8c:	2137      	movs	r1, #55	; 0x37

		/* Write out letters */
		sprintf(text, "A:Show measurement and time");
		ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8003d8e:	2501      	movs	r5, #1
		ILI9341_print_text("Main frame", 55, 10, COLOR_YELLOW, COLOR_NAVY, 2);
 8003d90:	f002 fbba 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "A:Show measurement and time");
 8003d94:	498d      	ldr	r1, [pc, #564]	; (8003fcc <STM32_PLC_LCD_Show_Main_Frame+0x3a4>)
 8003d96:	a802      	add	r0, sp, #8
 8003d98:	f00b f9d2 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8003d9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003da0:	2223      	movs	r2, #35	; 0x23
 8003da2:	2137      	movs	r1, #55	; 0x37
 8003da4:	a802      	add	r0, sp, #8
 8003da6:	e9cd 4500 	strd	r4, r5, [sp]
 8003daa:	f002 fbad 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "B:Set analog gain");
 8003dae:	4988      	ldr	r1, [pc, #544]	; (8003fd0 <STM32_PLC_LCD_Show_Main_Frame+0x3a8>)
 8003db0:	a802      	add	r0, sp, #8
 8003db2:	f00b f9c5 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8003db6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003dba:	222d      	movs	r2, #45	; 0x2d
 8003dbc:	2137      	movs	r1, #55	; 0x37
 8003dbe:	a802      	add	r0, sp, #8
 8003dc0:	e9cd 4500 	strd	r4, r5, [sp]
 8003dc4:	f002 fba0 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "C:Set PWM frequencies");
 8003dc8:	4982      	ldr	r1, [pc, #520]	; (8003fd4 <STM32_PLC_LCD_Show_Main_Frame+0x3ac>)
 8003dca:	a802      	add	r0, sp, #8
 8003dcc:	f00b f9b8 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8003dd0:	2237      	movs	r2, #55	; 0x37
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003dd8:	a802      	add	r0, sp, #8
 8003dda:	e9cd 4500 	strd	r4, r5, [sp]
 8003dde:	f002 fb93 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "D:Set analog input calibration");
 8003de2:	497d      	ldr	r1, [pc, #500]	; (8003fd8 <STM32_PLC_LCD_Show_Main_Frame+0x3b0>)
 8003de4:	a802      	add	r0, sp, #8
 8003de6:	f00b f9ab 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8003dea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003dee:	464a      	mov	r2, r9
 8003df0:	2137      	movs	r1, #55	; 0x37
 8003df2:	a802      	add	r0, sp, #8
 8003df4:	e9cd 4500 	strd	r4, r5, [sp]
 8003df8:	f002 fb86 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "E:Set pulses per encoder revolution");
 8003dfc:	4977      	ldr	r1, [pc, #476]	; (8003fdc <STM32_PLC_LCD_Show_Main_Frame+0x3b4>)
 8003dfe:	a802      	add	r0, sp, #8
 8003e00:	f00b f99e 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e08:	224b      	movs	r2, #75	; 0x4b
 8003e0a:	2137      	movs	r1, #55	; 0x37
 8003e0c:	a802      	add	r0, sp, #8
 8003e0e:	e9cd 4500 	strd	r4, r5, [sp]
 8003e12:	f002 fb79 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "F:Set date and time and alarm");
 8003e16:	4972      	ldr	r1, [pc, #456]	; (8003fe0 <STM32_PLC_LCD_Show_Main_Frame+0x3b8>)
 8003e18:	a802      	add	r0, sp, #8
 8003e1a:	f00b f991 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e22:	2255      	movs	r2, #85	; 0x55
 8003e24:	2137      	movs	r1, #55	; 0x37
 8003e26:	a802      	add	r0, sp, #8
 8003e28:	e9cd 4500 	strd	r4, r5, [sp]
 8003e2c:	f002 fb6c 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "G:Do a PGN request");
 8003e30:	496c      	ldr	r1, [pc, #432]	; (8003fe4 <STM32_PLC_LCD_Show_Main_Frame+0x3bc>)
 8003e32:	a802      	add	r0, sp, #8
 8003e34:	f00b f984 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e3c:	225f      	movs	r2, #95	; 0x5f
 8003e3e:	2137      	movs	r1, #55	; 0x37
 8003e40:	a802      	add	r0, sp, #8
 8003e42:	e9cd 4500 	strd	r4, r5, [sp]
 8003e46:	f002 fb5f 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "H:Show ECU addresses");
 8003e4a:	4967      	ldr	r1, [pc, #412]	; (8003fe8 <STM32_PLC_LCD_Show_Main_Frame+0x3c0>)
 8003e4c:	a802      	add	r0, sp, #8
 8003e4e:	f00b f977 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e56:	2269      	movs	r2, #105	; 0x69
 8003e58:	2137      	movs	r1, #55	; 0x37
 8003e5a:	a802      	add	r0, sp, #8
 8003e5c:	e9cd 4500 	strd	r4, r5, [sp]
 8003e60:	f002 fb52 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "I:Commanded address");
 8003e64:	4961      	ldr	r1, [pc, #388]	; (8003fec <STM32_PLC_LCD_Show_Main_Frame+0x3c4>)
 8003e66:	a802      	add	r0, sp, #8
 8003e68:	f00b f96a 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e70:	2273      	movs	r2, #115	; 0x73
 8003e72:	2137      	movs	r1, #55	; 0x37
 8003e74:	a802      	add	r0, sp, #8
 8003e76:	e9cd 4500 	strd	r4, r5, [sp]
 8003e7a:	f002 fb45 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "J:Show this ECU DM1 codes");
 8003e7e:	495c      	ldr	r1, [pc, #368]	; (8003ff0 <STM32_PLC_LCD_Show_Main_Frame+0x3c8>)
 8003e80:	a802      	add	r0, sp, #8
 8003e82:	f00b f95d 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e86:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e8a:	227d      	movs	r2, #125	; 0x7d
 8003e8c:	2137      	movs	r1, #55	; 0x37
 8003e8e:	a802      	add	r0, sp, #8
 8003e90:	e9cd 4500 	strd	r4, r5, [sp]
 8003e94:	f002 fb38 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "K:Show other ECU DM1 codes");
 8003e98:	4956      	ldr	r1, [pc, #344]	; (8003ff4 <STM32_PLC_LCD_Show_Main_Frame+0x3cc>)
 8003e9a:	a802      	add	r0, sp, #8
 8003e9c:	f00b f950 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ea0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ea4:	2287      	movs	r2, #135	; 0x87
 8003ea6:	2137      	movs	r1, #55	; 0x37
 8003ea8:	a802      	add	r0, sp, #8
 8003eaa:	e9cd 4500 	strd	r4, r5, [sp]
 8003eae:	f002 fb2b 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "L:Show this ECU DM2 codes");
 8003eb2:	4951      	ldr	r1, [pc, #324]	; (8003ff8 <STM32_PLC_LCD_Show_Main_Frame+0x3d0>)
 8003eb4:	a802      	add	r0, sp, #8
 8003eb6:	f00b f943 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 8003eba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ebe:	2291      	movs	r2, #145	; 0x91
 8003ec0:	2137      	movs	r1, #55	; 0x37
 8003ec2:	a802      	add	r0, sp, #8
 8003ec4:	e9cd 4500 	strd	r4, r5, [sp]
 8003ec8:	f002 fb1e 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "M:Show other ECU DM2 codes");
 8003ecc:	494b      	ldr	r1, [pc, #300]	; (8003ffc <STM32_PLC_LCD_Show_Main_Frame+0x3d4>)
 8003ece:	a802      	add	r0, sp, #8
 8003ed0:	f00b f936 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 155, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ed4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ed8:	229b      	movs	r2, #155	; 0x9b
 8003eda:	2137      	movs	r1, #55	; 0x37
 8003edc:	a802      	add	r0, sp, #8
 8003ede:	e9cd 4500 	strd	r4, r5, [sp]
 8003ee2:	f002 fb11 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "N:Show this ECU name");
 8003ee6:	4946      	ldr	r1, [pc, #280]	; (8004000 <STM32_PLC_LCD_Show_Main_Frame+0x3d8>)
 8003ee8:	a802      	add	r0, sp, #8
 8003eea:	f00b f929 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 165, COLOR_YELLOW, COLOR_NAVY, 1);
 8003eee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ef2:	22a5      	movs	r2, #165	; 0xa5
 8003ef4:	2137      	movs	r1, #55	; 0x37
 8003ef6:	a802      	add	r0, sp, #8
 8003ef8:	e9cd 4500 	strd	r4, r5, [sp]
 8003efc:	f002 fb04 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "O:Show other ECU name");
 8003f00:	4940      	ldr	r1, [pc, #256]	; (8004004 <STM32_PLC_LCD_Show_Main_Frame+0x3dc>)
 8003f02:	a802      	add	r0, sp, #8
 8003f04:	f00b f91c 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 175, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f08:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f0c:	22af      	movs	r2, #175	; 0xaf
 8003f0e:	2137      	movs	r1, #55	; 0x37
 8003f10:	a802      	add	r0, sp, #8
 8003f12:	e9cd 4500 	strd	r4, r5, [sp]
 8003f16:	f002 faf7 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "P:Show this ECU identifications");
 8003f1a:	493b      	ldr	r1, [pc, #236]	; (8004008 <STM32_PLC_LCD_Show_Main_Frame+0x3e0>)
 8003f1c:	a802      	add	r0, sp, #8
 8003f1e:	f00b f90f 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 185, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f22:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f26:	22b9      	movs	r2, #185	; 0xb9
 8003f28:	2137      	movs	r1, #55	; 0x37
 8003f2a:	a802      	add	r0, sp, #8
 8003f2c:	e9cd 4500 	strd	r4, r5, [sp]
 8003f30:	f002 faea 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "Q:Show other ECU identifications");
 8003f34:	4935      	ldr	r1, [pc, #212]	; (800400c <STM32_PLC_LCD_Show_Main_Frame+0x3e4>)
 8003f36:	a802      	add	r0, sp, #8
 8003f38:	f00b f902 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 195, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f40:	22c3      	movs	r2, #195	; 0xc3
 8003f42:	2137      	movs	r1, #55	; 0x37
 8003f44:	a802      	add	r0, sp, #8
 8003f46:	e9cd 4500 	strd	r4, r5, [sp]
 8003f4a:	f002 fadd 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "R:SAE J1939 Auxiliary valve command");
 8003f4e:	4930      	ldr	r1, [pc, #192]	; (8004010 <STM32_PLC_LCD_Show_Main_Frame+0x3e8>)
 8003f50:	a802      	add	r0, sp, #8
 8003f52:	f00b f8f5 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 195, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f5a:	22c3      	movs	r2, #195	; 0xc3
 8003f5c:	2137      	movs	r1, #55	; 0x37
 8003f5e:	a802      	add	r0, sp, #8
 8003f60:	e9cd 4500 	strd	r4, r5, [sp]
 8003f64:	f002 fad0 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "S:Analog in to PWM");
 8003f68:	492a      	ldr	r1, [pc, #168]	; (8004014 <STM32_PLC_LCD_Show_Main_Frame+0x3ec>)
 8003f6a:	a802      	add	r0, sp, #8
 8003f6c:	f00b f8e8 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 205, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f70:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f74:	22cd      	movs	r2, #205	; 0xcd
 8003f76:	2137      	movs	r1, #55	; 0x37
 8003f78:	a802      	add	r0, sp, #8
 8003f7a:	e9cd 4500 	strd	r4, r5, [sp]
 8003f7e:	f002 fac3 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "T:Analog in to analog out");
 8003f82:	4925      	ldr	r1, [pc, #148]	; (8004018 <STM32_PLC_LCD_Show_Main_Frame+0x3f0>)
 8003f84:	a802      	add	r0, sp, #8
 8003f86:	f00b f8db 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 215, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f8a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f8e:	22d7      	movs	r2, #215	; 0xd7
 8003f90:	2137      	movs	r1, #55	; 0x37
 8003f92:	a802      	add	r0, sp, #8
 8003f94:	e9cd 4500 	strd	r4, r5, [sp]
 8003f98:	f002 fab6 	bl	8006508 <ILI9341_print_text>
		sprintf(text, "U:About STM32 PLC");
 8003f9c:	491f      	ldr	r1, [pc, #124]	; (800401c <STM32_PLC_LCD_Show_Main_Frame+0x3f4>)
 8003f9e:	a802      	add	r0, sp, #8
 8003fa0:	f00b f8ce 	bl	800f140 <strcpy>
		ILI9341_print_text(text, 55, 225, COLOR_YELLOW, COLOR_NAVY, 1);
 8003fa4:	e9cd 4500 	strd	r4, r5, [sp]
 8003fa8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003fac:	22e1      	movs	r2, #225	; 0xe1
 8003fae:	2137      	movs	r1, #55	; 0x37
 8003fb0:	a802      	add	r0, sp, #8
 8003fb2:	f002 faa9 	bl	8006508 <ILI9341_print_text>
	}
}
 8003fb6:	b00d      	add	sp, #52	; 0x34
 8003fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fbc:	08013909 	.word	0x08013909
 8003fc0:	0801390c 	.word	0x0801390c
 8003fc4:	0801390f 	.word	0x0801390f
 8003fc8:	08013912 	.word	0x08013912
 8003fcc:	0801391d 	.word	0x0801391d
 8003fd0:	08013939 	.word	0x08013939
 8003fd4:	0801394b 	.word	0x0801394b
 8003fd8:	08013961 	.word	0x08013961
 8003fdc:	08013980 	.word	0x08013980
 8003fe0:	080139a4 	.word	0x080139a4
 8003fe4:	080139c2 	.word	0x080139c2
 8003fe8:	080139d5 	.word	0x080139d5
 8003fec:	080139ea 	.word	0x080139ea
 8003ff0:	080139fe 	.word	0x080139fe
 8003ff4:	08013a18 	.word	0x08013a18
 8003ff8:	08013a33 	.word	0x08013a33
 8003ffc:	08013a4d 	.word	0x08013a4d
 8004000:	08013a68 	.word	0x08013a68
 8004004:	08013a7d 	.word	0x08013a7d
 8004008:	08013a93 	.word	0x08013a93
 800400c:	08013ab3 	.word	0x08013ab3
 8004010:	08013ad4 	.word	0x08013ad4
 8004014:	08013af8 	.word	0x08013af8
 8004018:	08013b0b 	.word	0x08013b0b
 800401c:	08013b25 	.word	0x08013b25

08004020 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Measurement_And_Time_Frame(uint8_t *frame_id) {
 8004020:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004022:	250f      	movs	r5, #15
 8004024:	9500      	str	r5, [sp, #0]
 8004026:	23ea      	movs	r3, #234	; 0xea
 8004028:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800402c:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Measurement_And_Time_Frame(uint8_t *frame_id) {
 800402e:	4604      	mov	r4, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004030:	2033      	movs	r0, #51	; 0x33
 8004032:	f002 f93b 	bl	80062ac <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8004036:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800403a:	f240 1209 	movw	r2, #265	; 0x109
 800403e:	211e      	movs	r1, #30
 8004040:	2032      	movs	r0, #50	; 0x32
 8004042:	f002 f975 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Measurement values and time", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004046:	2301      	movs	r3, #1
 8004048:	e9cd 5300 	strd	r5, r3, [sp]
 800404c:	4823      	ldr	r0, [pc, #140]	; (80040dc <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0xbc>)
 800404e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004052:	220a      	movs	r2, #10
 8004054:	2137      	movs	r1, #55	; 0x37

	/* Exit button */
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8004056:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text("Measurement values and time", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800405a:	f002 fa55 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 800405e:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8004060:	23e6      	movs	r3, #230	; 0xe6
 8004062:	f240 1211 	movw	r2, #273	; 0x111
 8004066:	21cd      	movs	r1, #205	; 0xcd
 8004068:	2055      	movs	r0, #85	; 0x55
 800406a:	9600      	str	r6, [sp, #0]
 800406c:	f002 f91e 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8004070:	9500      	str	r5, [sp, #0]
 8004072:	23e6      	movs	r3, #230	; 0xe6
 8004074:	f240 1211 	movw	r2, #273	; 0x111
 8004078:	21cd      	movs	r1, #205	; 0xcd
 800407a:	2055      	movs	r0, #85	; 0x55
 800407c:	f002 f9aa 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8004080:	2302      	movs	r3, #2
 8004082:	e9cd 6300 	strd	r6, r3, [sp]
 8004086:	4816      	ldr	r0, [pc, #88]	; (80040e0 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0xc0>)
 8004088:	462b      	mov	r3, r5
 800408a:	22d2      	movs	r2, #210	; 0xd2
 800408c:	215f      	movs	r1, #95	; 0x5f
 800408e:	f002 fa3b 	bl	8006508 <ILI9341_print_text>
		STM32_PLC_LCD_Show_Plot_Frame();

		/* Logic for button */
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 8004092:	4d14      	ldr	r5, [pc, #80]	; (80040e4 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0xc4>)
		STM32_PLC_LCD_Show_Plot_Frame();
 8004094:	f001 fdf0 	bl	8005c78 <STM32_PLC_LCD_Show_Plot_Frame>
		if (TSC2046_isPressed()) {
 8004098:	f002 fc3e 	bl	8006918 <TSC2046_isPressed>
 800409c:	2800      	cmp	r0, #0
 800409e:	d0f9      	beq.n	8004094 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0x74>
			TSC2046_GetTouchData();
 80040a0:	f002 fbd2 	bl	8006848 <TSC2046_GetTouchData>
			uint16_t Y = lcd.myTsData.Y;
			if (X >= 85 && X <= 273 && Y >= 205 && Y <= 230) {
 80040a4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80040a6:	3b55      	subs	r3, #85	; 0x55
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2bbc      	cmp	r3, #188	; 0xbc
 80040ac:	d8f2      	bhi.n	8004094 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0x74>
 80040ae:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80040b0:	3bcd      	subs	r3, #205	; 0xcd
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b19      	cmp	r3, #25
 80040b6:	d8ed      	bhi.n	8004094 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0x74>
				ILI9341_hollow_rect(85, 205, 273, 230, COLOR_MAGENTA);
 80040b8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	f240 1211 	movw	r2, #273	; 0x111
 80040c2:	23e6      	movs	r3, #230	; 0xe6
 80040c4:	21cd      	movs	r1, #205	; 0xcd
 80040c6:	2055      	movs	r0, #85	; 0x55
 80040c8:	f002 f984 	bl	80063d4 <ILI9341_hollow_rect>
			}
		}
	}

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80040cc:	2100      	movs	r1, #0
 80040ce:	4620      	mov	r0, r4
}
 80040d0:	b002      	add	sp, #8
 80040d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80040d6:	f7ff bda7 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
 80040da:	bf00      	nop
 80040dc:	08013b37 	.word	0x08013b37
 80040e0:	080132da 	.word	0x080132da
 80040e4:	20002728 	.word	0x20002728

080040e8 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame>:
#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"


void STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(uint8_t *frame_id) {
 80040e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ea:	b095      	sub	sp, #84	; 0x54
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80040ec:	250f      	movs	r5, #15
 80040ee:	9500      	str	r5, [sp, #0]
 80040f0:	23ea      	movs	r3, #234	; 0xea
 80040f2:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80040f6:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(uint8_t *frame_id) {
 80040f8:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80040fa:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set PWM frequency", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80040fc:	2401      	movs	r4, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80040fe:	f002 f8d5 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8004102:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004106:	f240 1209 	movw	r2, #265	; 0x109
 800410a:	211e      	movs	r1, #30
 800410c:	2032      	movs	r0, #50	; 0x32
 800410e:	f002 f90f 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set PWM frequency", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004112:	e9cd 5400 	strd	r5, r4, [sp]
 8004116:	485a      	ldr	r0, [pc, #360]	; (8004280 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x198>)
 8004118:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800411c:	220a      	movs	r2, #10
 800411e:	2137      	movs	r1, #55	; 0x37
 8004120:	f002 f9f2 	bl	8006508 <ILI9341_print_text>
    		disp(sprintf("Hz = %i at prescaler = %i", (48*10^6/(1+i))/0xFFFF, i));
		end
	 */

	/* Show all calibration inputs */
	ILI9341_print_text("PWM Hz choices to select:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8004124:	e9cd 5400 	strd	r5, r4, [sp]
 8004128:	4856      	ldr	r0, [pc, #344]	; (8004284 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x19c>)
 800412a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800412e:	2223      	movs	r2, #35	; 0x23
 8004130:	2137      	movs	r1, #55	; 0x37
 8004132:	f002 f9e9 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Hz=((48*10^6/(s+1))/65535", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8004136:	e9cd 5400 	strd	r5, r4, [sp]
 800413a:	4853      	ldr	r0, [pc, #332]	; (8004288 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1a0>)
 800413c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004140:	222d      	movs	r2, #45	; 0x2d
 8004142:	2137      	movs	r1, #55	; 0x37
 8004144:	f002 f9e0 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("s=Prescaler 0 to 65535", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8004148:	2237      	movs	r2, #55	; 0x37
 800414a:	4611      	mov	r1, r2
 800414c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004150:	e9cd 5400 	strd	r5, r4, [sp]
 8004154:	484d      	ldr	r0, [pc, #308]	; (800428c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1a4>)
 8004156:	f002 f9d7 	bl	8006508 <ILI9341_print_text>

	/* Show selected frequency */
	char text[50];
	uint16_t prescaler_for_PWM_0_3, prescaler_for_PWM_4_7;
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 800415a:	f10d 0116 	add.w	r1, sp, #22
 800415e:	a805      	add	r0, sp, #20
 8004160:	f7fd fa71 	bl	8001646 <STM32_PLC_Flash_Get_PWM_Prescalers>
	ILI9341_print_text("Current prescaler settings:", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8004164:	e9cd 5400 	strd	r5, r4, [sp]
 8004168:	4849      	ldr	r0, [pc, #292]	; (8004290 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1a8>)
 800416a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800416e:	2241      	movs	r2, #65	; 0x41
 8004170:	2137      	movs	r1, #55	; 0x37
 8004172:	f002 f9c9 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "PWM0 to PWM3:%i PWM4 to PWM7:%i", prescaler_for_PWM_0_3, prescaler_for_PWM_4_7);
 8004176:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800417a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800417e:	4945      	ldr	r1, [pc, #276]	; (8004294 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1ac>)
 8004180:	a807      	add	r0, sp, #28
 8004182:	f00a ffbd 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);

	/* Select settings button */
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 8004186:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800418a:	e9cd 5400 	strd	r5, r4, [sp]
 800418e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004192:	224b      	movs	r2, #75	; 0x4b
 8004194:	2137      	movs	r1, #55	; 0x37
 8004196:	a807      	add	r0, sp, #28
 8004198:	f002 f9b6 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 800419c:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 800419e:	23dc      	movs	r3, #220	; 0xdc
 80041a0:	f240 1211 	movw	r2, #273	; 0x111
 80041a4:	21c3      	movs	r1, #195	; 0xc3
 80041a6:	2055      	movs	r0, #85	; 0x55
 80041a8:	9700      	str	r7, [sp, #0]
 80041aa:	f002 f87f 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 80041ae:	23dc      	movs	r3, #220	; 0xdc
 80041b0:	f240 1211 	movw	r2, #273	; 0x111
 80041b4:	21c3      	movs	r1, #195	; 0xc3
 80041b6:	2055      	movs	r0, #85	; 0x55
 80041b8:	9500      	str	r5, [sp, #0]
 80041ba:	f002 f90b 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Select PWM freq", 90, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80041be:	2302      	movs	r3, #2
 80041c0:	e9cd 7300 	strd	r7, r3, [sp]
 80041c4:	4834      	ldr	r0, [pc, #208]	; (8004298 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1b0>)
 80041c6:	462b      	mov	r3, r5
 80041c8:	22c8      	movs	r2, #200	; 0xc8
 80041ca:	215a      	movs	r1, #90	; 0x5a
 80041cc:	f002 f99c 	bl	8006508 <ILI9341_print_text>

	/* Logic for request button */
	STM32_PLC_LCD_Call_One_Button_Logic(85, 195, 273, 220);
 80041d0:	23dc      	movs	r3, #220	; 0xdc
 80041d2:	f240 1211 	movw	r2, #273	; 0x111
 80041d6:	21c3      	movs	r1, #195	; 0xc3
 80041d8:	2055      	movs	r0, #85	; 0x55
 80041da:	f003 f877 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set PWM frequency?") == 0) {
 80041de:	482f      	ldr	r0, [pc, #188]	; (800429c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1b4>)
 80041e0:	f7fe fa42 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80041e4:	b928      	cbnz	r0, 80041f2 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x10a>
	else
		STM32_PLC_PWM4_To_PWM7_Set_Prescaler(prescaler, true);


	/* Show main frame again */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80041e6:	2100      	movs	r1, #0
 80041e8:	4630      	mov	r0, r6
 80041ea:	f7ff fd1d 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 80041ee:	b015      	add	sp, #84	; 0x54
 80041f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Set setting for PWM0-PWM3=0 or PWM4-PWM7=1") == 0) {
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1b8>)
 80041f4:	aa06      	add	r2, sp, #24
 80041f6:	4629      	mov	r1, r5
 80041f8:	4628      	mov	r0, r5
 80041fa:	f001 fc1d 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d0f1      	beq.n	80041e6 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xfe>
	if(number_value < 0)
 8004202:	eddd 7a06 	vldr	s15, [sp, #24]
 8004206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420e:	d42c      	bmi.n	800426a <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x182>
	else if(number_value > 1)
 8004210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	dc05      	bgt.n	800422a <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x142>
		PWM_TIM = (uint8_t) number_value;
 800421e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004222:	edcd 7a03 	vstr	s15, [sp, #12]
 8004226:	f89d 400c 	ldrb.w	r4, [sp, #12]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter prescaler 0 to 65535") == 0) {
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1bc>)
 800422c:	2100      	movs	r1, #0
 800422e:	aa06      	add	r2, sp, #24
 8004230:	4608      	mov	r0, r1
 8004232:	f001 fc01 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8004236:	2800      	cmp	r0, #0
 8004238:	d0d5      	beq.n	80041e6 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xfe>
	if(number_value < 0)
 800423a:	eddd 7a06 	vldr	s15, [sp, #24]
 800423e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004246:	d412      	bmi.n	800426e <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x186>
	else if(number_value > 65535)
 8004248:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80042a8 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1c0>
 800424c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	dc0d      	bgt.n	8004272 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x18a>
		prescaler = (uint16_t) number_value;
 8004256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425a:	ee17 3a90 	vmov	r3, s15
 800425e:	b298      	uxth	r0, r3
		STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler, true);
 8004260:	2101      	movs	r1, #1
	if(PWM_TIM == 0)
 8004262:	b94c      	cbnz	r4, 8004278 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x190>
		STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler, true);
 8004264:	f7fd fd04 	bl	8001c70 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>
 8004268:	e7bd      	b.n	80041e6 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xfe>
		PWM_TIM = 0;
 800426a:	462c      	mov	r4, r5
 800426c:	e7dd      	b.n	800422a <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x142>
		prescaler = 0;
 800426e:	2000      	movs	r0, #0
 8004270:	e7f6      	b.n	8004260 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x178>
		prescaler = 65535;
 8004272:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004276:	e7f3      	b.n	8004260 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x178>
		STM32_PLC_PWM4_To_PWM7_Set_Prescaler(prescaler, true);
 8004278:	f7fd fd04 	bl	8001c84 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>
 800427c:	e7b3      	b.n	80041e6 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xfe>
 800427e:	bf00      	nop
 8004280:	08013b53 	.word	0x08013b53
 8004284:	08013b65 	.word	0x08013b65
 8004288:	08013b7f 	.word	0x08013b7f
 800428c:	08013b99 	.word	0x08013b99
 8004290:	08013bb0 	.word	0x08013bb0
 8004294:	08013bcc 	.word	0x08013bcc
 8004298:	08013bec 	.word	0x08013bec
 800429c:	08013bfc 	.word	0x08013bfc
 80042a0:	08013c1e 	.word	0x08013c1e
 80042a4:	08013c49 	.word	0x08013c49
 80042a8:	477fff00 	.word	0x477fff00

080042ac <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame>:
#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"
#include "../../../Functions.h"
#include "../../../Open SAE J1939/SAE_J1939/SAE_J1939-81_Network_Management_Layer/Network_Management_Layer.h"

void STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80042ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b0:	b093      	sub	sp, #76	; 0x4c
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80042b2:	260f      	movs	r6, #15
void STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80042b4:	4605      	mov	r5, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80042b6:	23ea      	movs	r3, #234	; 0xea
 80042b8:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80042bc:	2033      	movs	r0, #51	; 0x33
void STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80042be:	4688      	mov	r8, r1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80042c0:	9600      	str	r6, [sp, #0]
 80042c2:	2106      	movs	r1, #6
 80042c4:	f001 fff2 	bl	80062ac <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);

	ILI9341_print_text("ECU address and connections", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80042c8:	2701      	movs	r7, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80042ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042ce:	f240 1209 	movw	r2, #265	; 0x109
 80042d2:	211e      	movs	r1, #30
 80042d4:	2032      	movs	r0, #50	; 0x32

	/* This ECU address */
	char text[50];
	sprintf(text, "This ECU address:%i", j1939->information_this_ECU.this_ECU_address);
 80042d6:	f505 5980 	add.w	r9, r5, #4096	; 0x1000
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80042da:	f002 f829 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("ECU address and connections", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80042de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80042e2:	485c      	ldr	r0, [pc, #368]	; (8004454 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1a8>)

	/* Which ECU are connected */
	sprintf(text, "Other ECU addresses:");
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
		sprintf(text, "%i,", j1939->other_ECU_address[i]); /* Important with space */
 80042e4:	f8df b190 	ldr.w	fp, [pc, #400]	; 8004478 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1cc>
	ILI9341_print_text("ECU address and connections", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80042e8:	220a      	movs	r2, #10
 80042ea:	2137      	movs	r1, #55	; 0x37
 80042ec:	e9cd 6700 	strd	r6, r7, [sp]
 80042f0:	f002 f90a 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "This ECU address:%i", j1939->information_this_ECU.this_ECU_address);
 80042f4:	f899 22d4 	ldrb.w	r2, [r9, #724]	; 0x2d4
 80042f8:	4957      	ldr	r1, [pc, #348]	; (8004458 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1ac>)
 80042fa:	a805      	add	r0, sp, #20
 80042fc:	f00a ff00 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8004300:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004304:	2223      	movs	r2, #35	; 0x23
 8004306:	2137      	movs	r1, #55	; 0x37
 8004308:	a805      	add	r0, sp, #20
 800430a:	e9cd 6700 	strd	r6, r7, [sp]
 800430e:	f002 f8fb 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Other ECU connected:%i", j1939->number_of_other_ECU);
 8004312:	7b6a      	ldrb	r2, [r5, #13]
 8004314:	4951      	ldr	r1, [pc, #324]	; (800445c <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1b0>)
 8004316:	a805      	add	r0, sp, #20
 8004318:	f00a fef2 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 800431c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004320:	222d      	movs	r2, #45	; 0x2d
 8004322:	2137      	movs	r1, #55	; 0x37
 8004324:	a805      	add	r0, sp, #20
 8004326:	e9cd 6700 	strd	r6, r7, [sp]
 800432a:	f002 f8ed 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Other ECU addresses:");
 800432e:	494c      	ldr	r1, [pc, #304]	; (8004460 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1b4>)
 8004330:	a805      	add	r0, sp, #20
 8004332:	f00a ff05 	bl	800f140 <strcpy>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8004336:	2237      	movs	r2, #55	; 0x37
 8004338:	e9cd 6700 	strd	r6, r7, [sp]
 800433c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004340:	4611      	mov	r1, r2
 8004342:	a805      	add	r0, sp, #20
 8004344:	f002 f8e0 	bl	8006508 <ILI9341_print_text>
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 8004348:	f04f 0a00 	mov.w	sl, #0
 800434c:	7b6b      	ldrb	r3, [r5, #13]
 800434e:	fa5f f48a 	uxtb.w	r4, sl
 8004352:	42a3      	cmp	r3, r4
 8004354:	d83d      	bhi.n	80043d2 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x126>
		ILI9341_print_text(text, 55 + i*15, 65, COLOR_YELLOW, COLOR_NAVY, 1);
	}

	/* How many ECU are not connected */
	sprintf(text, "Other ECU not connected:%i", j1939->number_of_cannot_claim_address);
 8004356:	7baa      	ldrb	r2, [r5, #14]
 8004358:	4942      	ldr	r1, [pc, #264]	; (8004464 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1b8>)
 800435a:	a805      	add	r0, sp, #20
 800435c:	f00a fed0 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8004360:	230f      	movs	r3, #15
 8004362:	2201      	movs	r2, #1
 8004364:	e9cd 3200 	strd	r3, r2, [sp]
 8004368:	2137      	movs	r1, #55	; 0x37
 800436a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800436e:	224b      	movs	r2, #75	; 0x4b
 8004370:	a805      	add	r0, sp, #20

	/* Button */
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8004372:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8004376:	f002 f8c7 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 800437a:	2400      	movs	r4, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 800437c:	23dc      	movs	r3, #220	; 0xdc
 800437e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004382:	21c3      	movs	r1, #195	; 0xc3
 8004384:	2041      	movs	r0, #65	; 0x41
 8004386:	9600      	str	r6, [sp, #0]
 8004388:	f001 ff90 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 800438c:	23dc      	movs	r3, #220	; 0xdc
 800438e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004392:	21c3      	movs	r1, #195	; 0xc3
 8004394:	2041      	movs	r0, #65	; 0x41
 8004396:	9400      	str	r4, [sp, #0]
 8004398:	f002 f81c 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Set the ECU address", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 800439c:	2302      	movs	r3, #2
 800439e:	e9cd 6300 	strd	r6, r3, [sp]
 80043a2:	4831      	ldr	r0, [pc, #196]	; (8004468 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1bc>)
 80043a4:	4623      	mov	r3, r4
 80043a6:	22c8      	movs	r2, #200	; 0xc8
 80043a8:	2146      	movs	r1, #70	; 0x46
 80043aa:	f002 f8ad 	bl	8006508 <ILI9341_print_text>

	/* Logic for button */
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 80043ae:	23dc      	movs	r3, #220	; 0xdc
 80043b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043b4:	21c3      	movs	r1, #195	; 0xc3
 80043b6:	2041      	movs	r0, #65	; 0x41
 80043b8:	f002 ff88 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set the ECU address?") == 0) {
 80043bc:	482b      	ldr	r0, [pc, #172]	; (800446c <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1c0>)
 80043be:	f7fe f953 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80043c2:	b9d8      	cbnz	r0, 80043fc <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x150>

	/* Send new address to all other ECU */
	SAE_J1939_Response_Request_Address_Claimed(j1939);

	/* Done */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80043c4:	2100      	movs	r1, #0
 80043c6:	4640      	mov	r0, r8
 80043c8:	f7ff fc2e 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 80043cc:	b013      	add	sp, #76	; 0x4c
 80043ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sprintf(text, "%i,", j1939->other_ECU_address[i]); /* Important with space */
 80043d2:	192b      	adds	r3, r5, r4
 80043d4:	4659      	mov	r1, fp
 80043d6:	7bda      	ldrb	r2, [r3, #15]
 80043d8:	a805      	add	r0, sp, #20
		ILI9341_print_text(text, 55 + i*15, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80043da:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
		sprintf(text, "%i,", j1939->other_ECU_address[i]); /* Important with space */
 80043de:	f00a fe8f 	bl	800f100 <siprintf>
		ILI9341_print_text(text, 55 + i*15, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80043e2:	e9cd 6700 	strd	r6, r7, [sp]
 80043e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043ea:	2241      	movs	r2, #65	; 0x41
 80043ec:	f104 0137 	add.w	r1, r4, #55	; 0x37
 80043f0:	a805      	add	r0, sp, #20
 80043f2:	f002 f889 	bl	8006508 <ILI9341_print_text>
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 80043f6:	f10a 0a01 	add.w	sl, sl, #1
 80043fa:	e7a7      	b.n	800434c <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0xa0>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter address between 0 and 253") == 0) {
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1c4>)
 80043fe:	aa04      	add	r2, sp, #16
 8004400:	4621      	mov	r1, r4
 8004402:	4620      	mov	r0, r4
 8004404:	f001 fb18 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8004408:	2800      	cmp	r0, #0
 800440a:	d0db      	beq.n	80043c4 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x118>
	if(number_value < 0)
 800440c:	eddd 7a04 	vldr	s15, [sp, #16]
 8004410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	d40d      	bmi.n	8004436 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x18a>
	else if(number_value > 253)
 800441a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004474 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1c8>
 800441e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		address = (uint8_t) number_value;
 8004426:	bfd7      	itett	le
 8004428:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		address = 253;
 800442c:	24fd      	movgt	r4, #253	; 0xfd
		address = (uint8_t) number_value;
 800442e:	edcd 7a03 	vstrle	s15, [sp, #12]
 8004432:	f89d 400c 	ldrble.w	r4, [sp, #12]
	SAE_J1939_Send_Address_Delete(j1939, 0xFF, j1939->information_this_ECU.this_ECU_address);
 8004436:	f899 22d4 	ldrb.w	r2, [r9, #724]	; 0x2d4
 800443a:	21ff      	movs	r1, #255	; 0xff
 800443c:	4628      	mov	r0, r5
 800443e:	f7fe f889 	bl	8002554 <SAE_J1939_Send_Address_Delete>
	STM32_PLC_Flash_Set_J1939_This_ECU_Address(address);
 8004442:	4620      	mov	r0, r4
	j1939->information_this_ECU.this_ECU_address = address;
 8004444:	f889 42d4 	strb.w	r4, [r9, #724]	; 0x2d4
	STM32_PLC_Flash_Set_J1939_This_ECU_Address(address);
 8004448:	f7fd f868 	bl	800151c <STM32_PLC_Flash_Set_J1939_This_ECU_Address>
	SAE_J1939_Response_Request_Address_Claimed(j1939);
 800444c:	4628      	mov	r0, r5
 800444e:	f7fe f845 	bl	80024dc <SAE_J1939_Response_Request_Address_Claimed>
 8004452:	e7b7      	b.n	80043c4 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x118>
 8004454:	08013c64 	.word	0x08013c64
 8004458:	08013c80 	.word	0x08013c80
 800445c:	08013c94 	.word	0x08013c94
 8004460:	08013cab 	.word	0x08013cab
 8004464:	08013cc4 	.word	0x08013cc4
 8004468:	08013cdf 	.word	0x08013cdf
 800446c:	08013cf3 	.word	0x08013cf3
 8004470:	08013d17 	.word	0x08013d17
 8004474:	437d0000 	.word	0x437d0000
 8004478:	08013cc0 	.word	0x08013cc0

0800447c <show_numpad_question>:

	/* Done */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 800447c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800447e:	460f      	mov	r7, r1
	bool minusbutton_show = false;
	bool decimalbutton_show = false;
	float number_value;
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 8004480:	2100      	movs	r1, #0
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 8004482:	4616      	mov	r6, r2
 8004484:	461d      	mov	r5, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 8004486:	aa01      	add	r2, sp, #4
 8004488:	4603      	mov	r3, r0
 800448a:	4608      	mov	r0, r1
 800448c:	f001 fad4 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8004490:	4604      	mov	r4, r0
 8004492:	b930      	cbnz	r0, 80044a2 <show_numpad_question+0x26>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004494:	4601      	mov	r1, r0
 8004496:	4638      	mov	r0, r7
 8004498:	f7ff fbc6 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
	else if(number_value > max_value)
		*value = max_value;
	else
		*value = (uint32_t) number_value;
	return 1;
}
 800449c:	4620      	mov	r0, r4
 800449e:	b003      	add	sp, #12
 80044a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(number_value < 0)
 80044a2:	eddd 7a01 	vldr	s15, [sp, #4]
 80044a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ae:	d503      	bpl.n	80044b8 <show_numpad_question+0x3c>
		*value = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	602b      	str	r3, [r5, #0]
	return 1;
 80044b4:	2401      	movs	r4, #1
 80044b6:	e7f1      	b.n	800449c <show_numpad_question+0x20>
	else if(number_value > max_value)
 80044b8:	ee07 6a10 	vmov	s14, r6
 80044bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*value = (uint32_t) number_value;
 80044c8:	bfd6      	itet	le
 80044ca:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		*value = max_value;
 80044ce:	602e      	strgt	r6, [r5, #0]
		*value = (uint32_t) number_value;
 80044d0:	edc5 7a00 	vstrle	s15, [r5]
 80044d4:	e7ee      	b.n	80044b4 <show_numpad_question+0x38>
	...

080044d8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80044d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044da:	b0a1      	sub	sp, #132	; 0x84
 80044dc:	4607      	mov	r7, r0
	if(show_numpad_question("Enter identity between 0 and 2097151", frame_id, 2097151, &identity_number) == 0)
 80044de:	4ac3      	ldr	r2, [pc, #780]	; (80047ec <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x314>)
 80044e0:	48c3      	ldr	r0, [pc, #780]	; (80047f0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x318>)
 80044e2:	ab08      	add	r3, sp, #32
void STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80044e4:	460c      	mov	r4, r1
	if(show_numpad_question("Enter identity between 0 and 2097151", frame_id, 2097151, &identity_number) == 0)
 80044e6:	f7ff ffc9 	bl	800447c <show_numpad_question>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	f000 815b 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter manufacturer code between 0 and 2047", frame_id, 2047, &manufacturer_code) == 0)
 80044f0:	48c0      	ldr	r0, [pc, #768]	; (80047f4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x31c>)
 80044f2:	ab09      	add	r3, sp, #36	; 0x24
 80044f4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80044f8:	4621      	mov	r1, r4
 80044fa:	f7ff ffbf 	bl	800447c <show_numpad_question>
 80044fe:	2800      	cmp	r0, #0
 8004500:	f000 8151 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter function instance between 0 and 31", frame_id, 31, &function_instance) == 0)
 8004504:	48bc      	ldr	r0, [pc, #752]	; (80047f8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x320>)
 8004506:	ab0a      	add	r3, sp, #40	; 0x28
 8004508:	221f      	movs	r2, #31
 800450a:	4621      	mov	r1, r4
 800450c:	f7ff ffb6 	bl	800447c <show_numpad_question>
 8004510:	2800      	cmp	r0, #0
 8004512:	f000 8148 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter ECU instance between 0 and 7", frame_id, 7, &ECU_instance) == 0)
 8004516:	48b9      	ldr	r0, [pc, #740]	; (80047fc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x324>)
 8004518:	ab0b      	add	r3, sp, #44	; 0x2c
 800451a:	2207      	movs	r2, #7
 800451c:	4621      	mov	r1, r4
 800451e:	f7ff ffad 	bl	800447c <show_numpad_question>
 8004522:	2800      	cmp	r0, #0
 8004524:	f000 813f 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter function between 0 and 255", frame_id, 255, &function) == 0)
 8004528:	48b5      	ldr	r0, [pc, #724]	; (8004800 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x328>)
 800452a:	ab0c      	add	r3, sp, #48	; 0x30
 800452c:	22ff      	movs	r2, #255	; 0xff
 800452e:	4621      	mov	r1, r4
 8004530:	f7ff ffa4 	bl	800447c <show_numpad_question>
 8004534:	2800      	cmp	r0, #0
 8004536:	f000 8136 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter vehicle system between 0 and 127", frame_id, 127, &vehicle_system) == 0)
 800453a:	48b2      	ldr	r0, [pc, #712]	; (8004804 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x32c>)
 800453c:	ab0d      	add	r3, sp, #52	; 0x34
 800453e:	227f      	movs	r2, #127	; 0x7f
 8004540:	4621      	mov	r1, r4
 8004542:	f7ff ff9b 	bl	800447c <show_numpad_question>
 8004546:	2800      	cmp	r0, #0
 8004548:	f000 812d 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter arbitrary address capable between 0 and 1", frame_id, 1, &arbitrary_address_capable) == 0)
 800454c:	48ae      	ldr	r0, [pc, #696]	; (8004808 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x330>)
 800454e:	ab0e      	add	r3, sp, #56	; 0x38
 8004550:	2201      	movs	r2, #1
 8004552:	4621      	mov	r1, r4
 8004554:	f7ff ff92 	bl	800447c <show_numpad_question>
 8004558:	2800      	cmp	r0, #0
 800455a:	f000 8124 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter industry group between 0 and 7", frame_id, 7, &industry_group) == 0)
 800455e:	48ab      	ldr	r0, [pc, #684]	; (800480c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x334>)
 8004560:	ab0f      	add	r3, sp, #60	; 0x3c
 8004562:	2207      	movs	r2, #7
 8004564:	4621      	mov	r1, r4
 8004566:	f7ff ff89 	bl	800447c <show_numpad_question>
 800456a:	2800      	cmp	r0, #0
 800456c:	f000 811b 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter vehicle system instance between 0 and 15", frame_id, 15, &vehicle_system_instance) == 0)
 8004570:	48a7      	ldr	r0, [pc, #668]	; (8004810 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x338>)
 8004572:	ab10      	add	r3, sp, #64	; 0x40
 8004574:	220f      	movs	r2, #15
 8004576:	4621      	mov	r1, r4
 8004578:	f7ff ff80 	bl	800447c <show_numpad_question>
 800457c:	2800      	cmp	r0, #0
 800457e:	f000 8112 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter new ECU address between 0 and 253", frame_id, 253, &new_ECU_address) == 0)
 8004582:	48a4      	ldr	r0, [pc, #656]	; (8004814 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x33c>)
 8004584:	ab11      	add	r3, sp, #68	; 0x44
 8004586:	22fd      	movs	r2, #253	; 0xfd
 8004588:	4621      	mov	r1, r4
 800458a:	f7ff ff77 	bl	800447c <show_numpad_question>
 800458e:	2800      	cmp	r0, #0
 8004590:	f000 8109 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Destination of the ECU between 0 and 253", frame_id, 253, &DA) == 0)
 8004594:	48a0      	ldr	r0, [pc, #640]	; (8004818 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x340>)
 8004596:	ab12      	add	r3, sp, #72	; 0x48
 8004598:	22fd      	movs	r2, #253	; 0xfd
 800459a:	4621      	mov	r1, r4
 800459c:	f7ff ff6e 	bl	800447c <show_numpad_question>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	f000 8100 	beq.w	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80045a6:	250f      	movs	r5, #15
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80045a8:	2100      	movs	r1, #0
 80045aa:	4620      	mov	r0, r4
 80045ac:	f7ff fb3c 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80045b0:	23ea      	movs	r3, #234	; 0xea
 80045b2:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80045b6:	2106      	movs	r1, #6
 80045b8:	2033      	movs	r0, #51	; 0x33
 80045ba:	9500      	str	r5, [sp, #0]
 80045bc:	f001 fe76 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_print_text("Set NAME and source address", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80045c0:	2601      	movs	r6, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80045c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80045c6:	f240 1209 	movw	r2, #265	; 0x109
 80045ca:	211e      	movs	r1, #30
 80045cc:	2032      	movs	r0, #50	; 0x32
 80045ce:	f001 feaf 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set NAME and source address", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80045d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045d6:	4891      	ldr	r0, [pc, #580]	; (800481c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x344>)
 80045d8:	220a      	movs	r2, #10
 80045da:	2137      	movs	r1, #55	; 0x37
 80045dc:	e9cd 5600 	strd	r5, r6, [sp]
 80045e0:	f001 ff92 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Identity:%lu", identity_number);
 80045e4:	9a08      	ldr	r2, [sp, #32]
 80045e6:	498e      	ldr	r1, [pc, #568]	; (8004820 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x348>)
 80045e8:	a813      	add	r0, sp, #76	; 0x4c
 80045ea:	f00a fd89 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 80045ee:	2223      	movs	r2, #35	; 0x23
 80045f0:	e9cd 5600 	strd	r5, r6, [sp]
 80045f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045f8:	2137      	movs	r1, #55	; 0x37
 80045fa:	a813      	add	r0, sp, #76	; 0x4c
 80045fc:	f001 ff84 	bl	8006508 <ILI9341_print_text>
	if(manufacturer_code == MANUFACTURER_CODE_GRAYHILL)
 8004600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004602:	f5b2 7f93 	cmp.w	r2, #294	; 0x126
 8004606:	f040 80d0 	bne.w	80047aa <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2d2>
		sprintf(text, "Manufacturer code: Gray Hill");
 800460a:	4986      	ldr	r1, [pc, #536]	; (8004824 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x34c>)
		sprintf(text, "Manufacturer code: SonceBoz");
 800460c:	a813      	add	r0, sp, #76	; 0x4c
 800460e:	f00a fd97 	bl	800f140 <strcpy>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8004612:	250f      	movs	r5, #15
 8004614:	2601      	movs	r6, #1
 8004616:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800461a:	222d      	movs	r2, #45	; 0x2d
 800461c:	2137      	movs	r1, #55	; 0x37
 800461e:	a813      	add	r0, sp, #76	; 0x4c
 8004620:	e9cd 5600 	strd	r5, r6, [sp]
 8004624:	f001 ff70 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Function instance:%i", (uint8_t)function_instance);
 8004628:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800462c:	497e      	ldr	r1, [pc, #504]	; (8004828 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x350>)
 800462e:	a813      	add	r0, sp, #76	; 0x4c
 8004630:	f00a fd66 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8004634:	2237      	movs	r2, #55	; 0x37
 8004636:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800463a:	4611      	mov	r1, r2
 800463c:	a813      	add	r0, sp, #76	; 0x4c
 800463e:	e9cd 5600 	strd	r5, r6, [sp]
 8004642:	f001 ff61 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "ECU instance:%i", (uint8_t)ECU_instance);
 8004646:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800464a:	4978      	ldr	r1, [pc, #480]	; (800482c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x354>)
 800464c:	a813      	add	r0, sp, #76	; 0x4c
 800464e:	f00a fd57 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8004652:	2241      	movs	r2, #65	; 0x41
 8004654:	e9cd 5600 	strd	r5, r6, [sp]
 8004658:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800465c:	2137      	movs	r1, #55	; 0x37
 800465e:	a813      	add	r0, sp, #76	; 0x4c
 8004660:	f001 ff52 	bl	8006508 <ILI9341_print_text>
	if(function == FUNCTION_AUXILIARY_VALVES_CONTROL)
 8004664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004666:	2a81      	cmp	r2, #129	; 0x81
 8004668:	f040 80ab 	bne.w	80047c2 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ea>
		sprintf(text, "Function:Auxiliary Valves Control");
 800466c:	4970      	ldr	r1, [pc, #448]	; (8004830 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x358>)
		sprintf(text, "Function:VDC Module");
 800466e:	a813      	add	r0, sp, #76	; 0x4c
 8004670:	f00a fd66 	bl	800f140 <strcpy>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8004674:	250f      	movs	r5, #15
 8004676:	2601      	movs	r6, #1
 8004678:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800467c:	224b      	movs	r2, #75	; 0x4b
 800467e:	2137      	movs	r1, #55	; 0x37
 8004680:	a813      	add	r0, sp, #76	; 0x4c
 8004682:	e9cd 5600 	strd	r5, r6, [sp]
 8004686:	f001 ff3f 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Vehicle system:%i", (uint8_t)vehicle_system);
 800468a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800468e:	4969      	ldr	r1, [pc, #420]	; (8004834 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x35c>)
 8004690:	a813      	add	r0, sp, #76	; 0x4c
 8004692:	f00a fd35 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8004696:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800469a:	e9cd 5600 	strd	r5, r6, [sp]
 800469e:	2255      	movs	r2, #85	; 0x55
 80046a0:	2137      	movs	r1, #55	; 0x37
 80046a2:	a813      	add	r0, sp, #76	; 0x4c
 80046a4:	f001 ff30 	bl	8006508 <ILI9341_print_text>
	if(arbitrary_address_capable > 0)
 80046a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8093 	beq.w	80047d6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2fe>
		sprintf(text, "Arbitrary address capable:Yes");
 80046b0:	4961      	ldr	r1, [pc, #388]	; (8004838 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x360>)
		sprintf(text, "Arbitrary address capable:No");
 80046b2:	a813      	add	r0, sp, #76	; 0x4c
 80046b4:	f00a fd44 	bl	800f140 <strcpy>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80046b8:	230f      	movs	r3, #15
 80046ba:	2201      	movs	r2, #1
 80046bc:	e9cd 3200 	strd	r3, r2, [sp]
 80046c0:	2137      	movs	r1, #55	; 0x37
 80046c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046c6:	225f      	movs	r2, #95	; 0x5f
 80046c8:	a813      	add	r0, sp, #76	; 0x4c
 80046ca:	f001 ff1d 	bl	8006508 <ILI9341_print_text>
	if(industry_group == INDUSTRY_GROUP_GLOBAL)
 80046ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 8082 	bne.w	80047da <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x302>
		sprintf(text, "Industry group:Global");
 80046d6:	4959      	ldr	r1, [pc, #356]	; (800483c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x364>)
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80046d8:	250f      	movs	r5, #15
 80046da:	2601      	movs	r6, #1
		sprintf(text, "Industry group:None");
 80046dc:	a813      	add	r0, sp, #76	; 0x4c
 80046de:	f00a fd2f 	bl	800f140 <strcpy>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80046e2:	e9cd 5600 	strd	r5, r6, [sp]
 80046e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046ea:	2269      	movs	r2, #105	; 0x69
 80046ec:	2137      	movs	r1, #55	; 0x37
 80046ee:	a813      	add	r0, sp, #76	; 0x4c
 80046f0:	f001 ff0a 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Vehicle system instance:%i", (uint8_t)vehicle_system_instance);
 80046f4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80046f8:	4951      	ldr	r1, [pc, #324]	; (8004840 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x368>)
 80046fa:	a813      	add	r0, sp, #76	; 0x4c
 80046fc:	f00a fd00 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8004700:	e9cd 5600 	strd	r5, r6, [sp]
 8004704:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004708:	2273      	movs	r2, #115	; 0x73
 800470a:	2137      	movs	r1, #55	; 0x37
 800470c:	a813      	add	r0, sp, #76	; 0x4c
 800470e:	f001 fefb 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "New ECU address:%i", (uint8_t)new_ECU_address);
 8004712:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004716:	494b      	ldr	r1, [pc, #300]	; (8004844 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x36c>)
 8004718:	a813      	add	r0, sp, #76	; 0x4c
 800471a:	f00a fcf1 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 800471e:	e9cd 5600 	strd	r5, r6, [sp]
 8004722:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004726:	227d      	movs	r2, #125	; 0x7d
 8004728:	2137      	movs	r1, #55	; 0x37
 800472a:	a813      	add	r0, sp, #76	; 0x4c
 800472c:	f001 feec 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "Current ECU address:%i", (uint8_t)DA);
 8004730:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8004734:	4944      	ldr	r1, [pc, #272]	; (8004848 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x370>)
 8004736:	a813      	add	r0, sp, #76	; 0x4c
 8004738:	f00a fce2 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 800473c:	e9cd 5600 	strd	r5, r6, [sp]
 8004740:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004744:	2287      	movs	r2, #135	; 0x87
 8004746:	2137      	movs	r1, #55	; 0x37
 8004748:	a813      	add	r0, sp, #76	; 0x4c
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 800474a:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 800474e:	f001 fedb 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8004752:	2500      	movs	r5, #0
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 8004754:	23dc      	movs	r3, #220	; 0xdc
 8004756:	f240 1225 	movw	r2, #293	; 0x125
 800475a:	21c3      	movs	r1, #195	; 0xc3
 800475c:	2046      	movs	r0, #70	; 0x46
 800475e:	9600      	str	r6, [sp, #0]
 8004760:	f001 fda4 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8004764:	23dc      	movs	r3, #220	; 0xdc
 8004766:	f240 1225 	movw	r2, #293	; 0x125
 800476a:	21c3      	movs	r1, #195	; 0xc3
 800476c:	2046      	movs	r0, #70	; 0x46
 800476e:	9500      	str	r5, [sp, #0]
 8004770:	f001 fe30 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Set name & address", 75, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8004774:	2302      	movs	r3, #2
 8004776:	e9cd 6300 	strd	r6, r3, [sp]
 800477a:	4834      	ldr	r0, [pc, #208]	; (800484c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x374>)
 800477c:	462b      	mov	r3, r5
 800477e:	22c8      	movs	r2, #200	; 0xc8
 8004780:	214b      	movs	r1, #75	; 0x4b
 8004782:	f001 fec1 	bl	8006508 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(70, 195, 293, 220);
 8004786:	21c3      	movs	r1, #195	; 0xc3
 8004788:	23dc      	movs	r3, #220	; 0xdc
 800478a:	f240 1225 	movw	r2, #293	; 0x125
 800478e:	2046      	movs	r0, #70	; 0x46
 8004790:	f002 fd9c 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set NAME and address?") == 0) {
 8004794:	482e      	ldr	r0, [pc, #184]	; (8004850 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x378>)
 8004796:	f7fd ff67 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 800479a:	4601      	mov	r1, r0
 800479c:	2800      	cmp	r0, #0
 800479e:	d174      	bne.n	800488a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3b2>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7ff fa41 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 80047a6:	b021      	add	sp, #132	; 0x84
 80047a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (manufacturer_code == MANUFACTURER_CODE_SONCEBOZ)
 80047aa:	f240 1347 	movw	r3, #327	; 0x147
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d101      	bne.n	80047b6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2de>
		sprintf(text, "Manufacturer code: SonceBoz");
 80047b2:	4928      	ldr	r1, [pc, #160]	; (8004854 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x37c>)
 80047b4:	e72a      	b.n	800460c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x134>
		sprintf(text, "Manufacturer code:%i", (uint16_t)manufacturer_code);
 80047b6:	4928      	ldr	r1, [pc, #160]	; (8004858 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x380>)
 80047b8:	b292      	uxth	r2, r2
 80047ba:	a813      	add	r0, sp, #76	; 0x4c
 80047bc:	f00a fca0 	bl	800f100 <siprintf>
 80047c0:	e727      	b.n	8004612 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x13a>
	else if (function == FUNCTION_VDC_MODULE)
 80047c2:	2a87      	cmp	r2, #135	; 0x87
 80047c4:	d101      	bne.n	80047ca <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2f2>
		sprintf(text, "Function:VDC Module");
 80047c6:	4925      	ldr	r1, [pc, #148]	; (800485c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x384>)
 80047c8:	e751      	b.n	800466e <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x196>
		sprintf(text, "Function:%i", (uint8_t)function);
 80047ca:	4925      	ldr	r1, [pc, #148]	; (8004860 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x388>)
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	a813      	add	r0, sp, #76	; 0x4c
 80047d0:	f00a fc96 	bl	800f100 <siprintf>
 80047d4:	e74e      	b.n	8004674 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x19c>
		sprintf(text, "Arbitrary address capable:No");
 80047d6:	4923      	ldr	r1, [pc, #140]	; (8004864 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x38c>)
 80047d8:	e76b      	b.n	80046b2 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x1da>
	else if(industry_group == INDUSTRY_GROUP_CONSTRUCTION)
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d101      	bne.n	80047e2 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x30a>
		sprintf(text, "Industry group:Construction");
 80047de:	4922      	ldr	r1, [pc, #136]	; (8004868 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x390>)
 80047e0:	e77a      	b.n	80046d8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
	else if(industry_group == INDUSTRY_GROUP_AGRICULTURAL_AND_FORESTRY)
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d144      	bne.n	8004870 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x398>
		sprintf(text, "Industry group:Agricultural and forestry");
 80047e6:	4921      	ldr	r1, [pc, #132]	; (800486c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x394>)
 80047e8:	e776      	b.n	80046d8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
 80047ea:	bf00      	nop
 80047ec:	001fffff 	.word	0x001fffff
 80047f0:	08013d37 	.word	0x08013d37
 80047f4:	08013d5c 	.word	0x08013d5c
 80047f8:	08013d87 	.word	0x08013d87
 80047fc:	08013db0 	.word	0x08013db0
 8004800:	08013dd3 	.word	0x08013dd3
 8004804:	08013df4 	.word	0x08013df4
 8004808:	08013e1b 	.word	0x08013e1b
 800480c:	08013e4b 	.word	0x08013e4b
 8004810:	08013e70 	.word	0x08013e70
 8004814:	08013e9f 	.word	0x08013e9f
 8004818:	08013ec7 	.word	0x08013ec7
 800481c:	08013ef0 	.word	0x08013ef0
 8004820:	08013f0c 	.word	0x08013f0c
 8004824:	08013f19 	.word	0x08013f19
 8004828:	08013f67 	.word	0x08013f67
 800482c:	08013f7c 	.word	0x08013f7c
 8004830:	08013f8c 	.word	0x08013f8c
 8004834:	08013fce 	.word	0x08013fce
 8004838:	08013fe0 	.word	0x08013fe0
 800483c:	0801401b 	.word	0x0801401b
 8004840:	080140e4 	.word	0x080140e4
 8004844:	080140ff 	.word	0x080140ff
 8004848:	08014112 	.word	0x08014112
 800484c:	08014129 	.word	0x08014129
 8004850:	0801413c 	.word	0x0801413c
 8004854:	08013f36 	.word	0x08013f36
 8004858:	08013f52 	.word	0x08013f52
 800485c:	08013fae 	.word	0x08013fae
 8004860:	08013fc2 	.word	0x08013fc2
 8004864:	08013ffe 	.word	0x08013ffe
 8004868:	08014031 	.word	0x08014031
 800486c:	0801404d 	.word	0x0801404d
	else if(industry_group == INDUSTRY_GROUP_INDUSTRIAL_CONTROL_PROCESS)
 8004870:	2b05      	cmp	r3, #5
 8004872:	d101      	bne.n	8004878 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3a0>
		sprintf(text, "Industry group:Industrial control process");
 8004874:	4916      	ldr	r1, [pc, #88]	; (80048d0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3f8>)
 8004876:	e72f      	b.n	80046d8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
	else if(industry_group == INDUSTRY_GROUP_MARINE)
 8004878:	2b04      	cmp	r3, #4
 800487a:	d101      	bne.n	8004880 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3a8>
		sprintf(text, "Industry group:Marine");
 800487c:	4915      	ldr	r1, [pc, #84]	; (80048d4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3fc>)
 800487e:	e72b      	b.n	80046d8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
	else if(industry_group == INDUSTRY_GROUP_ON_HIGHWAY)
 8004880:	2b01      	cmp	r3, #1
		sprintf(text, "Industry group:On highway");
 8004882:	bf0c      	ite	eq
 8004884:	4914      	ldreq	r1, [pc, #80]	; (80048d8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x400>)
		sprintf(text, "Industry group:None");
 8004886:	4915      	ldrne	r1, [pc, #84]	; (80048dc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x404>)
 8004888:	e726      	b.n	80046d8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
	SAE_J1939_Send_Commanded_Address(j1939, DA, new_ECU_address, identity_number, manufacturer_code, function_instance, ECU_instance, function, vehicle_system, arbitrary_address_capable, industry_group, vehicle_system_instance);
 800488a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800488e:	9307      	str	r3, [sp, #28]
 8004890:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004894:	9306      	str	r3, [sp, #24]
 8004896:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80048a0:	9304      	str	r3, [sp, #16]
 80048a2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80048ac:	9302      	str	r3, [sp, #8]
 80048ae:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80048b8:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80048c2:	9b08      	ldr	r3, [sp, #32]
 80048c4:	4638      	mov	r0, r7
 80048c6:	f7fd fe74 	bl	80025b2 <SAE_J1939_Send_Commanded_Address>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80048ca:	4629      	mov	r1, r5
 80048cc:	e768      	b.n	80047a0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c8>
 80048ce:	bf00      	nop
 80048d0:	08014076 	.word	0x08014076
 80048d4:	080140a0 	.word	0x080140a0
 80048d8:	080140b6 	.word	0x080140b6
 80048dc:	080140d0 	.word	0x080140d0

080048e0 <show_DM_frame>:
	show_DM_frame("Other ECU DM2 codes", &j1939->from_other_ecu_dm.dm2, true);
	call_exit(frame_id);
}

/* This can be DM1 or DM2 frame */
static void show_DM_frame(char title[], struct DM1 *dm, bool display_from_ecu_address) {
 80048e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e4:	b090      	sub	sp, #64	; 0x40
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80048e6:	250f      	movs	r5, #15
static void show_DM_frame(char title[], struct DM1 *dm, bool display_from_ecu_address) {
 80048e8:	460c      	mov	r4, r1
 80048ea:	4680      	mov	r8, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80048ec:	23ea      	movs	r3, #234	; 0xea
 80048ee:	2106      	movs	r1, #6
 80048f0:	2033      	movs	r0, #51	; 0x33
static void show_DM_frame(char title[], struct DM1 *dm, bool display_from_ecu_address) {
 80048f2:	4617      	mov	r7, r2
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80048f4:	9500      	str	r5, [sp, #0]
 80048f6:	f44f 729d 	mov.w	r2, #314	; 0x13a

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80048fa:	2601      	movs	r6, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80048fc:	f001 fcd6 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8004900:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004904:	f240 1209 	movw	r2, #265	; 0x109
 8004908:	211e      	movs	r1, #30
 800490a:	2032      	movs	r0, #50	; 0x32
 800490c:	f001 fd10 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004910:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004914:	220a      	movs	r2, #10
 8004916:	2137      	movs	r1, #55	; 0x37
 8004918:	4640      	mov	r0, r8
 800491a:	e9cd 5600 	strd	r5, r6, [sp]
 800491e:	f001 fdf3 	bl	8006508 <ILI9341_print_text>

	/* SAE Lamp status malfunction indicator */
	char text[50];
	sprintf(text, "Lamp malfunction:%i", dm->SAE_lamp_status_malfunction_indicator);
 8004922:	7822      	ldrb	r2, [r4, #0]
 8004924:	497a      	ldr	r1, [pc, #488]	; (8004b10 <show_DM_frame+0x230>)
 8004926:	a803      	add	r0, sp, #12
 8004928:	f00a fbea 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800492c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004930:	2223      	movs	r2, #35	; 0x23
 8004932:	2137      	movs	r1, #55	; 0x37
 8004934:	a803      	add	r0, sp, #12
 8004936:	e9cd 5600 	strd	r5, r6, [sp]
 800493a:	f001 fde5 	bl	8006508 <ILI9341_print_text>

	/* SAE Lamp status red stop */
	sprintf(text, "Lamp red stop:%i", dm->SAE_lamp_status_red_stop);
 800493e:	7862      	ldrb	r2, [r4, #1]
 8004940:	4974      	ldr	r1, [pc, #464]	; (8004b14 <show_DM_frame+0x234>)
 8004942:	a803      	add	r0, sp, #12
 8004944:	f00a fbdc 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8004948:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800494c:	222d      	movs	r2, #45	; 0x2d
 800494e:	2137      	movs	r1, #55	; 0x37
 8004950:	a803      	add	r0, sp, #12
 8004952:	e9cd 5600 	strd	r5, r6, [sp]
 8004956:	f001 fdd7 	bl	8006508 <ILI9341_print_text>

	/* SAE Lamp status amber warning */
	sprintf(text, "Lamp amber warning:%i", dm->SAE_lamp_status_amber_warning);
 800495a:	78a2      	ldrb	r2, [r4, #2]
 800495c:	496e      	ldr	r1, [pc, #440]	; (8004b18 <show_DM_frame+0x238>)
 800495e:	a803      	add	r0, sp, #12
 8004960:	f00a fbce 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8004964:	2237      	movs	r2, #55	; 0x37
 8004966:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800496a:	4611      	mov	r1, r2
 800496c:	a803      	add	r0, sp, #12
 800496e:	e9cd 5600 	strd	r5, r6, [sp]
 8004972:	f001 fdc9 	bl	8006508 <ILI9341_print_text>

	/* SAE Lamp status protection lamp */
	sprintf(text, "Lamp protection:%i", dm->SAE_lamp_status_protect_lamp);
 8004976:	78e2      	ldrb	r2, [r4, #3]
 8004978:	4968      	ldr	r1, [pc, #416]	; (8004b1c <show_DM_frame+0x23c>)
 800497a:	a803      	add	r0, sp, #12
 800497c:	f00a fbc0 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8004980:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004984:	2241      	movs	r2, #65	; 0x41
 8004986:	2137      	movs	r1, #55	; 0x37
 8004988:	a803      	add	r0, sp, #12
 800498a:	e9cd 5600 	strd	r5, r6, [sp]
 800498e:	f001 fdbb 	bl	8006508 <ILI9341_print_text>

	/* SAE Flash lamp malfunction indicator */
	sprintf(text, "Flash malfunction:%i", dm->SAE_flash_lamp_malfunction_indicator);
 8004992:	7922      	ldrb	r2, [r4, #4]
 8004994:	4962      	ldr	r1, [pc, #392]	; (8004b20 <show_DM_frame+0x240>)
 8004996:	a803      	add	r0, sp, #12
 8004998:	f00a fbb2 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800499c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049a0:	224b      	movs	r2, #75	; 0x4b
 80049a2:	2137      	movs	r1, #55	; 0x37
 80049a4:	a803      	add	r0, sp, #12
 80049a6:	e9cd 5600 	strd	r5, r6, [sp]
 80049aa:	f001 fdad 	bl	8006508 <ILI9341_print_text>

	/* SAE Flash lamp red stop */
	sprintf(text, "Flash red stop:%i", dm->SAE_flash_lamp_red_stop);
 80049ae:	7962      	ldrb	r2, [r4, #5]
 80049b0:	495c      	ldr	r1, [pc, #368]	; (8004b24 <show_DM_frame+0x244>)
 80049b2:	a803      	add	r0, sp, #12
 80049b4:	f00a fba4 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80049b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049bc:	2255      	movs	r2, #85	; 0x55
 80049be:	2137      	movs	r1, #55	; 0x37
 80049c0:	a803      	add	r0, sp, #12
 80049c2:	e9cd 5600 	strd	r5, r6, [sp]
 80049c6:	f001 fd9f 	bl	8006508 <ILI9341_print_text>

	/* SAE Flash lamp amber warning */
	sprintf(text, "Flash amber warning:%i", dm->SAE_flash_lamp_amber_warning);
 80049ca:	79a2      	ldrb	r2, [r4, #6]
 80049cc:	4956      	ldr	r1, [pc, #344]	; (8004b28 <show_DM_frame+0x248>)
 80049ce:	a803      	add	r0, sp, #12
 80049d0:	f00a fb96 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80049d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049d8:	225f      	movs	r2, #95	; 0x5f
 80049da:	2137      	movs	r1, #55	; 0x37
 80049dc:	a803      	add	r0, sp, #12
 80049de:	e9cd 5600 	strd	r5, r6, [sp]
 80049e2:	f001 fd91 	bl	8006508 <ILI9341_print_text>

	/* SAE Flash lamp protection lamp */
	sprintf(text, "Lamp protection:%i", dm->SAE_flash_lamp_protect_lamp);
 80049e6:	79e2      	ldrb	r2, [r4, #7]
 80049e8:	494c      	ldr	r1, [pc, #304]	; (8004b1c <show_DM_frame+0x23c>)
 80049ea:	a803      	add	r0, sp, #12
 80049ec:	f00a fb88 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80049f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049f4:	2269      	movs	r2, #105	; 0x69
 80049f6:	2137      	movs	r1, #55	; 0x37
 80049f8:	a803      	add	r0, sp, #12
 80049fa:	e9cd 5600 	strd	r5, r6, [sp]
 80049fe:	f001 fd83 	bl	8006508 <ILI9341_print_text>

	/* SPN */
	sprintf(text, "SPN:%lu", dm->SPN);
 8004a02:	68a2      	ldr	r2, [r4, #8]
 8004a04:	4949      	ldr	r1, [pc, #292]	; (8004b2c <show_DM_frame+0x24c>)
 8004a06:	a803      	add	r0, sp, #12
 8004a08:	f00a fb7a 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a0c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a10:	e9cd 5600 	strd	r5, r6, [sp]
 8004a14:	2273      	movs	r2, #115	; 0x73
 8004a16:	2137      	movs	r1, #55	; 0x37
 8004a18:	a803      	add	r0, sp, #12
 8004a1a:	f001 fd75 	bl	8006508 <ILI9341_print_text>

	/* FMI */
	uint8_t FMI = dm->FMI;
	switch (FMI) {
 8004a1e:	7b23      	ldrb	r3, [r4, #12]
 8004a20:	2b15      	cmp	r3, #21
 8004a22:	d873      	bhi.n	8004b0c <show_DM_frame+0x22c>
 8004a24:	e8df f003 	tbb	[pc, r3]
 8004a28:	4c4a480b 	.word	0x4c4a480b
 8004a2c:	5452504e 	.word	0x5452504e
 8004a30:	5c5a5856 	.word	0x5c5a5856
 8004a34:	6462605e 	.word	0x6462605e
 8004a38:	6c6a6866 	.word	0x6c6a6866
 8004a3c:	706e      	.short	0x706e
	case 0x0:
		sprintf(text, "FMI:Above normal most serve");
 8004a3e:	493c      	ldr	r1, [pc, #240]	; (8004b30 <show_DM_frame+0x250>)
		break;
	default:
		sprintf(text, "FMI:Not available");
		break;
	}
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a40:	250f      	movs	r5, #15
 8004a42:	2601      	movs	r6, #1
		sprintf(text, "FMI:Not available");
 8004a44:	a803      	add	r0, sp, #12
 8004a46:	f00a fb7b 	bl	800f140 <strcpy>
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a4e:	227d      	movs	r2, #125	; 0x7d
 8004a50:	2137      	movs	r1, #55	; 0x37
 8004a52:	a803      	add	r0, sp, #12
 8004a54:	e9cd 5600 	strd	r5, r6, [sp]
 8004a58:	f001 fd56 	bl	8006508 <ILI9341_print_text>

	/* SPN conversion method */
	sprintf(text, "SPN conversion method:%i", dm->SPN_conversion_method);
 8004a5c:	7b62      	ldrb	r2, [r4, #13]
 8004a5e:	4935      	ldr	r1, [pc, #212]	; (8004b34 <show_DM_frame+0x254>)
 8004a60:	a803      	add	r0, sp, #12
 8004a62:	f00a fb4d 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a66:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a6a:	2287      	movs	r2, #135	; 0x87
 8004a6c:	2137      	movs	r1, #55	; 0x37
 8004a6e:	a803      	add	r0, sp, #12
 8004a70:	e9cd 5600 	strd	r5, r6, [sp]
 8004a74:	f001 fd48 	bl	8006508 <ILI9341_print_text>

	/* Occurrence count */
	sprintf(text, "Occurrence count:%i", dm->occurrence_count);
 8004a78:	7ba2      	ldrb	r2, [r4, #14]
 8004a7a:	492f      	ldr	r1, [pc, #188]	; (8004b38 <show_DM_frame+0x258>)
 8004a7c:	a803      	add	r0, sp, #12
 8004a7e:	f00a fb3f 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a82:	e9cd 5600 	strd	r5, r6, [sp]
 8004a86:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a8a:	2291      	movs	r2, #145	; 0x91
 8004a8c:	2137      	movs	r1, #55	; 0x37
 8004a8e:	a803      	add	r0, sp, #12
 8004a90:	f001 fd3a 	bl	8006508 <ILI9341_print_text>

	/* From ECU address */
	if(display_from_ecu_address){
 8004a94:	b16f      	cbz	r7, 8004ab2 <show_DM_frame+0x1d2>
		sprintf(text, "From ECU address:%i", dm->from_ecu_address);
 8004a96:	7be2      	ldrb	r2, [r4, #15]
 8004a98:	4928      	ldr	r1, [pc, #160]	; (8004b3c <show_DM_frame+0x25c>)
 8004a9a:	a803      	add	r0, sp, #12
 8004a9c:	f00a fb30 	bl	800f100 <siprintf>
		ILI9341_print_text(text, 55, 155, COLOR_YELLOW, COLOR_NAVY, 1);
 8004aa0:	e9cd 5600 	strd	r5, r6, [sp]
 8004aa4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004aa8:	229b      	movs	r2, #155	; 0x9b
 8004aaa:	2137      	movs	r1, #55	; 0x37
 8004aac:	a803      	add	r0, sp, #12
 8004aae:	f001 fd2b 	bl	8006508 <ILI9341_print_text>
	}
}
 8004ab2:	b010      	add	sp, #64	; 0x40
 8004ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sprintf(text, "FMI:Below normal most serve");
 8004ab8:	4921      	ldr	r1, [pc, #132]	; (8004b40 <show_DM_frame+0x260>)
 8004aba:	e7c1      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Data erratic");
 8004abc:	4921      	ldr	r1, [pc, #132]	; (8004b44 <show_DM_frame+0x264>)
 8004abe:	e7bf      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Voltage above normal");
 8004ac0:	4921      	ldr	r1, [pc, #132]	; (8004b48 <show_DM_frame+0x268>)
 8004ac2:	e7bd      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Voltage below normal");
 8004ac4:	4921      	ldr	r1, [pc, #132]	; (8004b4c <show_DM_frame+0x26c>)
 8004ac6:	e7bb      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Current below normal");
 8004ac8:	4921      	ldr	r1, [pc, #132]	; (8004b50 <show_DM_frame+0x270>)
 8004aca:	e7b9      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Current above normal");
 8004acc:	4921      	ldr	r1, [pc, #132]	; (8004b54 <show_DM_frame+0x274>)
 8004ace:	e7b7      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Mechanical system not responding");
 8004ad0:	4921      	ldr	r1, [pc, #132]	; (8004b58 <show_DM_frame+0x278>)
 8004ad2:	e7b5      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal frequency");
 8004ad4:	4921      	ldr	r1, [pc, #132]	; (8004b5c <show_DM_frame+0x27c>)
 8004ad6:	e7b3      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal update rate");
 8004ad8:	4921      	ldr	r1, [pc, #132]	; (8004b60 <show_DM_frame+0x280>)
 8004ada:	e7b1      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal rate change");
 8004adc:	4921      	ldr	r1, [pc, #132]	; (8004b64 <show_DM_frame+0x284>)
 8004ade:	e7af      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Root cause not known");
 8004ae0:	4921      	ldr	r1, [pc, #132]	; (8004b68 <show_DM_frame+0x288>)
 8004ae2:	e7ad      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Bad intelligent device");
 8004ae4:	4921      	ldr	r1, [pc, #132]	; (8004b6c <show_DM_frame+0x28c>)
 8004ae6:	e7ab      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Out of calibration");
 8004ae8:	4921      	ldr	r1, [pc, #132]	; (8004b70 <show_DM_frame+0x290>)
 8004aea:	e7a9      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Special instructions");
 8004aec:	4921      	ldr	r1, [pc, #132]	; (8004b74 <show_DM_frame+0x294>)
 8004aee:	e7a7      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal least serve");
 8004af0:	4921      	ldr	r1, [pc, #132]	; (8004b78 <show_DM_frame+0x298>)
 8004af2:	e7a5      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Above normal moderately serve");
 8004af4:	4921      	ldr	r1, [pc, #132]	; (8004b7c <show_DM_frame+0x29c>)
 8004af6:	e7a3      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Below normal least serve");
 8004af8:	4921      	ldr	r1, [pc, #132]	; (8004b80 <show_DM_frame+0x2a0>)
 8004afa:	e7a1      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Below normal moderately serve");
 8004afc:	4921      	ldr	r1, [pc, #132]	; (8004b84 <show_DM_frame+0x2a4>)
 8004afe:	e79f      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Received network data in error");
 8004b00:	4921      	ldr	r1, [pc, #132]	; (8004b88 <show_DM_frame+0x2a8>)
 8004b02:	e79d      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Data drifted high");
 8004b04:	4921      	ldr	r1, [pc, #132]	; (8004b8c <show_DM_frame+0x2ac>)
 8004b06:	e79b      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Data drifted low");
 8004b08:	4921      	ldr	r1, [pc, #132]	; (8004b90 <show_DM_frame+0x2b0>)
 8004b0a:	e799      	b.n	8004a40 <show_DM_frame+0x160>
		sprintf(text, "FMI:Not available");
 8004b0c:	4921      	ldr	r1, [pc, #132]	; (8004b94 <show_DM_frame+0x2b4>)
 8004b0e:	e797      	b.n	8004a40 <show_DM_frame+0x160>
 8004b10:	08014161 	.word	0x08014161
 8004b14:	08014175 	.word	0x08014175
 8004b18:	08014186 	.word	0x08014186
 8004b1c:	0801419c 	.word	0x0801419c
 8004b20:	080141af 	.word	0x080141af
 8004b24:	080141c4 	.word	0x080141c4
 8004b28:	080141d6 	.word	0x080141d6
 8004b2c:	080141ed 	.word	0x080141ed
 8004b30:	080141f5 	.word	0x080141f5
 8004b34:	0801444e 	.word	0x0801444e
 8004b38:	08014467 	.word	0x08014467
 8004b3c:	0801447b 	.word	0x0801447b
 8004b40:	08014211 	.word	0x08014211
 8004b44:	0801422d 	.word	0x0801422d
 8004b48:	0801423e 	.word	0x0801423e
 8004b4c:	08014257 	.word	0x08014257
 8004b50:	08014270 	.word	0x08014270
 8004b54:	08014289 	.word	0x08014289
 8004b58:	080142a2 	.word	0x080142a2
 8004b5c:	080142c7 	.word	0x080142c7
 8004b60:	080142de 	.word	0x080142de
 8004b64:	080142f7 	.word	0x080142f7
 8004b68:	08014310 	.word	0x08014310
 8004b6c:	08014329 	.word	0x08014329
 8004b70:	08014344 	.word	0x08014344
 8004b74:	0801435b 	.word	0x0801435b
 8004b78:	08014374 	.word	0x08014374
 8004b7c:	0801438d 	.word	0x0801438d
 8004b80:	080143af 	.word	0x080143af
 8004b84:	080143cc 	.word	0x080143cc
 8004b88:	080143ee 	.word	0x080143ee
 8004b8c:	08014411 	.word	0x08014411
 8004b90:	08014427 	.word	0x08014427
 8004b94:	0801443c 	.word	0x0801443c

08004b98 <call_exit>:

static void call_exit(uint8_t *frame_id){
 8004b98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Exit button */
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8004b9a:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8004b9e:	2500      	movs	r5, #0
static void call_exit(uint8_t *frame_id){
 8004ba0:	4604      	mov	r4, r0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8004ba2:	9600      	str	r6, [sp, #0]
 8004ba4:	23e6      	movs	r3, #230	; 0xe6
 8004ba6:	f240 1211 	movw	r2, #273	; 0x111
 8004baa:	21cd      	movs	r1, #205	; 0xcd
 8004bac:	2055      	movs	r0, #85	; 0x55
 8004bae:	f001 fb7d 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8004bb2:	9500      	str	r5, [sp, #0]
 8004bb4:	23e6      	movs	r3, #230	; 0xe6
 8004bb6:	f240 1211 	movw	r2, #273	; 0x111
 8004bba:	21cd      	movs	r1, #205	; 0xcd
 8004bbc:	2055      	movs	r0, #85	; 0x55
 8004bbe:	f001 fc09 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e9cd 6300 	strd	r6, r3, [sp]
 8004bc8:	4809      	ldr	r0, [pc, #36]	; (8004bf0 <call_exit+0x58>)
 8004bca:	462b      	mov	r3, r5
 8004bcc:	22d2      	movs	r2, #210	; 0xd2
 8004bce:	215f      	movs	r1, #95	; 0x5f
 8004bd0:	f001 fc9a 	bl	8006508 <ILI9341_print_text>

	/* Logic for that button */
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 8004bd4:	23e6      	movs	r3, #230	; 0xe6
 8004bd6:	f240 1211 	movw	r2, #273	; 0x111
 8004bda:	21cd      	movs	r1, #205	; 0xcd
 8004bdc:	2055      	movs	r0, #85	; 0x55
 8004bde:	f002 fb75 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Go back */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004be2:	4629      	mov	r1, r5
 8004be4:	4620      	mov	r0, r4
}
 8004be6:	b002      	add	sp, #8
 8004be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004bec:	f7ff b81c 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
 8004bf0:	080132da 	.word	0x080132da

08004bf4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	460c      	mov	r4, r1
	show_DM_frame("This ECU DM1 codes", &j1939->this_dm.dm1, false);
 8004bf8:	f500 519f 	add.w	r1, r0, #5088	; 0x13e0
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4804      	ldr	r0, [pc, #16]	; (8004c10 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame+0x1c>)
 8004c00:	3110      	adds	r1, #16
 8004c02:	f7ff fe6d 	bl	80048e0 <show_DM_frame>
	call_exit(frame_id);
 8004c06:	4620      	mov	r0, r4
}
 8004c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 8004c0c:	f7ff bfc4 	b.w	8004b98 <call_exit>
 8004c10:	0801448f 	.word	0x0801448f

08004c14 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id){
 8004c14:	b510      	push	{r4, lr}
	show_DM_frame("Other ECU DM1 codes", &j1939->from_other_ecu_dm.dm1, true);
 8004c16:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id){
 8004c18:	460c      	mov	r4, r1
	show_DM_frame("Other ECU DM1 codes", &j1939->from_other_ecu_dm.dm1, true);
 8004c1a:	f600 013c 	addw	r1, r0, #2108	; 0x83c
 8004c1e:	4804      	ldr	r0, [pc, #16]	; (8004c30 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame+0x1c>)
 8004c20:	f7ff fe5e 	bl	80048e0 <show_DM_frame>
	call_exit(frame_id);
 8004c24:	4620      	mov	r0, r4
}
 8004c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 8004c2a:	f7ff bfb5 	b.w	8004b98 <call_exit>
 8004c2e:	bf00      	nop
 8004c30:	080144a2 	.word	0x080144a2

08004c34 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004c34:	b510      	push	{r4, lr}
	show_DM_frame("This ECU DM2 codes", &j1939->this_dm.dm2, false);
 8004c36:	2200      	movs	r2, #0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004c38:	460c      	mov	r4, r1
	show_DM_frame("This ECU DM2 codes", &j1939->this_dm.dm2, false);
 8004c3a:	f500 51a0 	add.w	r1, r0, #5120	; 0x1400
 8004c3e:	4804      	ldr	r0, [pc, #16]	; (8004c50 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame+0x1c>)
 8004c40:	f7ff fe4e 	bl	80048e0 <show_DM_frame>
	call_exit(frame_id);
 8004c44:	4620      	mov	r0, r4
}
 8004c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 8004c4a:	f7ff bfa5 	b.w	8004b98 <call_exit>
 8004c4e:	bf00      	nop
 8004c50:	080144b6 	.word	0x080144b6

08004c54 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004c54:	b510      	push	{r4, lr}
	show_DM_frame("Other ECU DM2 codes", &j1939->from_other_ecu_dm.dm2, true);
 8004c56:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004c58:	460c      	mov	r4, r1
	show_DM_frame("Other ECU DM2 codes", &j1939->from_other_ecu_dm.dm2, true);
 8004c5a:	f600 014c 	addw	r1, r0, #2124	; 0x84c
 8004c5e:	4804      	ldr	r0, [pc, #16]	; (8004c70 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame+0x1c>)
 8004c60:	f7ff fe3e 	bl	80048e0 <show_DM_frame>
	call_exit(frame_id);
 8004c64:	4620      	mov	r0, r4
}
 8004c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 8004c6a:	f7ff bf95 	b.w	8004b98 <call_exit>
 8004c6e:	bf00      	nop
 8004c70:	080144c9 	.word	0x080144c9

08004c74 <fill_char_array>:
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
	}

}

static void fill_char_array(char text[], char title[], uint8_t data[], uint8_t length) {
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	461f      	mov	r7, r3
 8004c78:	460d      	mov	r5, r1
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4616      	mov	r6, r2
	memset(text, 0, strlen(text));
 8004c7e:	f7fb faa7 	bl	80001d0 <strlen>
 8004c82:	2100      	movs	r1, #0
 8004c84:	4602      	mov	r2, r0
 8004c86:	4620      	mov	r0, r4
 8004c88:	f009 fdc8 	bl	800e81c <memset>
	memcpy(text, title, strlen(title));
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f7fb fa9f 	bl	80001d0 <strlen>
 8004c92:	4629      	mov	r1, r5
 8004c94:	4602      	mov	r2, r0
 8004c96:	4620      	mov	r0, r4
 8004c98:	f009 fd98 	bl	800e7cc <memcpy>
	memcpy(text + strlen(title), (char*)data, length); /* Move text strlen(title) elements */
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f7fb fa97 	bl	80001d0 <strlen>
 8004ca2:	463a      	mov	r2, r7
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	4420      	add	r0, r4
}
 8004ca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memcpy(text + strlen(title), (char*)data, length); /* Move text strlen(title) elements */
 8004cac:	f009 bd8e 	b.w	800e7cc <memcpy>

08004cb0 <show_identifications>:
static void show_identifications(char title[], struct Identifications *identifications, bool display_from_ecu_address) {
 8004cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cb4:	b093      	sub	sp, #76	; 0x4c
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004cb6:	250f      	movs	r5, #15
static void show_identifications(char title[], struct Identifications *identifications, bool display_from_ecu_address) {
 8004cb8:	4680      	mov	r8, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	4617      	mov	r7, r2
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004cbe:	23ea      	movs	r3, #234	; 0xea
 8004cc0:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8004cc4:	2106      	movs	r1, #6
 8004cc6:	2033      	movs	r0, #51	; 0x33
 8004cc8:	9500      	str	r5, [sp, #0]
 8004cca:	f001 faef 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004cce:	2601      	movs	r6, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8004cd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004cd4:	f240 1209 	movw	r2, #265	; 0x109
 8004cd8:	211e      	movs	r1, #30
 8004cda:	2032      	movs	r0, #50	; 0x32
 8004cdc:	f001 fb28 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004ce0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	220a      	movs	r2, #10
 8004ce8:	2137      	movs	r1, #55	; 0x37
	uint8_t length = identifications->software_identification.number_of_fields;
 8004cea:	46a0      	mov	r8, r4
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004cec:	e9cd 5600 	strd	r5, r6, [sp]
 8004cf0:	f001 fc0a 	bl	8006508 <ILI9341_print_text>
	char text[50] = "";
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	222e      	movs	r2, #46	; 0x2e
 8004cf8:	a806      	add	r0, sp, #24
 8004cfa:	9105      	str	r1, [sp, #20]
 8004cfc:	f009 fd8e 	bl	800e81c <memset>
	uint8_t length = identifications->software_identification.number_of_fields;
 8004d00:	f818 9b01 	ldrb.w	r9, [r8], #1
	ILI9341_print_text("Software identification:", 55, index_row, COLOR_YELLOW, COLOR_NAVY, 1);
 8004d04:	4883      	ldr	r0, [pc, #524]	; (8004f14 <show_identifications+0x264>)
 8004d06:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004d0a:	2223      	movs	r2, #35	; 0x23
 8004d0c:	2137      	movs	r1, #55	; 0x37
 8004d0e:	e9cd 5600 	strd	r5, r6, [sp]
 8004d12:	f001 fbf9 	bl	8006508 <ILI9341_print_text>
	fill_char_array(text, "ID:", identifications->software_identification.identifications, length);
 8004d16:	4980      	ldr	r1, [pc, #512]	; (8004f18 <show_identifications+0x268>)
 8004d18:	464b      	mov	r3, r9
 8004d1a:	4642      	mov	r2, r8
 8004d1c:	a805      	add	r0, sp, #20
 8004d1e:	f7ff ffa9 	bl	8004c74 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004d22:	e9cd 5600 	strd	r5, r6, [sp]
 8004d26:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004d2a:	222d      	movs	r2, #45	; 0x2d
 8004d2c:	2137      	movs	r1, #55	; 0x37
 8004d2e:	a805      	add	r0, sp, #20
 8004d30:	f001 fbea 	bl	8006508 <ILI9341_print_text>
	if(display_from_ecu_address){
 8004d34:	b16f      	cbz	r7, 8004d52 <show_identifications+0xa2>
		sprintf(text, "Source address:%i", identifications->software_identification.from_ecu_address);
 8004d36:	7fe2      	ldrb	r2, [r4, #31]
 8004d38:	4978      	ldr	r1, [pc, #480]	; (8004f1c <show_identifications+0x26c>)
 8004d3a:	a805      	add	r0, sp, #20
 8004d3c:	f00a f9e0 	bl	800f100 <siprintf>
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004d40:	2237      	movs	r2, #55	; 0x37
 8004d42:	e9cd 5600 	strd	r5, r6, [sp]
 8004d46:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	a805      	add	r0, sp, #20
 8004d4e:	f001 fbdb 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("ECU identification:", 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004d52:	250f      	movs	r5, #15
 8004d54:	2601      	movs	r6, #1
 8004d56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004d5a:	2137      	movs	r1, #55	; 0x37
 8004d5c:	4870      	ldr	r0, [pc, #448]	; (8004f20 <show_identifications+0x270>)
 8004d5e:	2241      	movs	r2, #65	; 0x41
 8004d60:	e9cd 5600 	strd	r5, r6, [sp]
 8004d64:	f001 fbd0 	bl	8006508 <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_part_number);
 8004d68:	f104 0221 	add.w	r2, r4, #33	; 0x21
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	9203      	str	r2, [sp, #12]
 8004d70:	f7fb fa2e 	bl	80001d0 <strlen>
	fill_char_array(text, "Part number:", identifications->ecu_identification.ecu_part_number, length);
 8004d74:	9a03      	ldr	r2, [sp, #12]
 8004d76:	496b      	ldr	r1, [pc, #428]	; (8004f24 <show_identifications+0x274>)
 8004d78:	b2c3      	uxtb	r3, r0
 8004d7a:	a805      	add	r0, sp, #20
 8004d7c:	f7ff ff7a 	bl	8004c74 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004d80:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004d84:	2137      	movs	r1, #55	; 0x37
 8004d86:	224b      	movs	r2, #75	; 0x4b
 8004d88:	a805      	add	r0, sp, #20
 8004d8a:	e9cd 5600 	strd	r5, r6, [sp]
 8004d8e:	f001 fbbb 	bl	8006508 <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_serial_number);
 8004d92:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 8004d96:	4610      	mov	r0, r2
 8004d98:	9203      	str	r2, [sp, #12]
 8004d9a:	f7fb fa19 	bl	80001d0 <strlen>
	fill_char_array(text, "Serial number:", identifications->ecu_identification.ecu_serial_number, length);
 8004d9e:	9a03      	ldr	r2, [sp, #12]
 8004da0:	4961      	ldr	r1, [pc, #388]	; (8004f28 <show_identifications+0x278>)
 8004da2:	b2c3      	uxtb	r3, r0
 8004da4:	a805      	add	r0, sp, #20
 8004da6:	f7ff ff65 	bl	8004c74 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004daa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004dae:	2137      	movs	r1, #55	; 0x37
 8004db0:	2255      	movs	r2, #85	; 0x55
 8004db2:	a805      	add	r0, sp, #20
 8004db4:	e9cd 5600 	strd	r5, r6, [sp]
 8004db8:	f001 fba6 	bl	8006508 <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_location);
 8004dbc:	f104 025d 	add.w	r2, r4, #93	; 0x5d
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	9203      	str	r2, [sp, #12]
 8004dc4:	f7fb fa04 	bl	80001d0 <strlen>
	fill_char_array(text, "Location:", identifications->ecu_identification.ecu_location, length);
 8004dc8:	9a03      	ldr	r2, [sp, #12]
 8004dca:	4958      	ldr	r1, [pc, #352]	; (8004f2c <show_identifications+0x27c>)
 8004dcc:	b2c3      	uxtb	r3, r0
 8004dce:	a805      	add	r0, sp, #20
 8004dd0:	f7ff ff50 	bl	8004c74 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004dd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004dd8:	2137      	movs	r1, #55	; 0x37
 8004dda:	225f      	movs	r2, #95	; 0x5f
 8004ddc:	a805      	add	r0, sp, #20
 8004dde:	e9cd 5600 	strd	r5, r6, [sp]
 8004de2:	f001 fb91 	bl	8006508 <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_type);
 8004de6:	f104 027b 	add.w	r2, r4, #123	; 0x7b
 8004dea:	4610      	mov	r0, r2
 8004dec:	9203      	str	r2, [sp, #12]
 8004dee:	f7fb f9ef 	bl	80001d0 <strlen>
	fill_char_array(text, "Type:", identifications->ecu_identification.ecu_type, length);
 8004df2:	9a03      	ldr	r2, [sp, #12]
 8004df4:	494e      	ldr	r1, [pc, #312]	; (8004f30 <show_identifications+0x280>)
 8004df6:	b2c3      	uxtb	r3, r0
 8004df8:	a805      	add	r0, sp, #20
 8004dfa:	f7ff ff3b 	bl	8004c74 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004dfe:	e9cd 5600 	strd	r5, r6, [sp]
 8004e02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e06:	2269      	movs	r2, #105	; 0x69
 8004e08:	2137      	movs	r1, #55	; 0x37
 8004e0a:	a805      	add	r0, sp, #20
 8004e0c:	f001 fb7c 	bl	8006508 <ILI9341_print_text>
	if(display_from_ecu_address){
 8004e10:	b177      	cbz	r7, 8004e30 <show_identifications+0x180>
		sprintf(text, "Source address:%i", identifications->ecu_identification.from_ecu_address);
 8004e12:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 8004e16:	4941      	ldr	r1, [pc, #260]	; (8004f1c <show_identifications+0x26c>)
 8004e18:	a805      	add	r0, sp, #20
 8004e1a:	f00a f971 	bl	800f100 <siprintf>
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e1e:	e9cd 5600 	strd	r5, r6, [sp]
 8004e22:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e26:	2273      	movs	r2, #115	; 0x73
 8004e28:	2137      	movs	r1, #55	; 0x37
 8004e2a:	a805      	add	r0, sp, #20
 8004e2c:	f001 fb6c 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Component identification:", 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e30:	250f      	movs	r5, #15
 8004e32:	2601      	movs	r6, #1
 8004e34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e38:	2137      	movs	r1, #55	; 0x37
 8004e3a:	483e      	ldr	r0, [pc, #248]	; (8004f34 <show_identifications+0x284>)
 8004e3c:	227d      	movs	r2, #125	; 0x7d
 8004e3e:	e9cd 5600 	strd	r5, r6, [sp]
 8004e42:	f001 fb61 	bl	8006508 <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_product_date);
 8004e46:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	9203      	str	r2, [sp, #12]
 8004e4e:	f7fb f9bf 	bl	80001d0 <strlen>
	fill_char_array(text, "Product date:", identifications->component_identification.component_product_date, length);
 8004e52:	9a03      	ldr	r2, [sp, #12]
 8004e54:	4938      	ldr	r1, [pc, #224]	; (8004f38 <show_identifications+0x288>)
 8004e56:	b2c3      	uxtb	r3, r0
 8004e58:	a805      	add	r0, sp, #20
 8004e5a:	f7ff ff0b 	bl	8004c74 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e5e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e62:	2137      	movs	r1, #55	; 0x37
 8004e64:	2287      	movs	r2, #135	; 0x87
 8004e66:	a805      	add	r0, sp, #20
 8004e68:	e9cd 5600 	strd	r5, r6, [sp]
 8004e6c:	f001 fb4c 	bl	8006508 <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_model_name);
 8004e70:	f104 02b9 	add.w	r2, r4, #185	; 0xb9
 8004e74:	4610      	mov	r0, r2
 8004e76:	9203      	str	r2, [sp, #12]
 8004e78:	f7fb f9aa 	bl	80001d0 <strlen>
	fill_char_array(text, "Model name:", identifications->component_identification.component_model_name, length);
 8004e7c:	9a03      	ldr	r2, [sp, #12]
 8004e7e:	492f      	ldr	r1, [pc, #188]	; (8004f3c <show_identifications+0x28c>)
 8004e80:	b2c3      	uxtb	r3, r0
 8004e82:	a805      	add	r0, sp, #20
 8004e84:	f7ff fef6 	bl	8004c74 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e8c:	2137      	movs	r1, #55	; 0x37
 8004e8e:	2291      	movs	r2, #145	; 0x91
 8004e90:	a805      	add	r0, sp, #20
 8004e92:	e9cd 5600 	strd	r5, r6, [sp]
 8004e96:	f001 fb37 	bl	8006508 <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_serial_number);
 8004e9a:	f104 02d7 	add.w	r2, r4, #215	; 0xd7
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	9203      	str	r2, [sp, #12]
 8004ea2:	f7fb f995 	bl	80001d0 <strlen>
	fill_char_array(text, "Serial number:", identifications->component_identification.component_serial_number, length);
 8004ea6:	9a03      	ldr	r2, [sp, #12]
 8004ea8:	491f      	ldr	r1, [pc, #124]	; (8004f28 <show_identifications+0x278>)
 8004eaa:	b2c3      	uxtb	r3, r0
 8004eac:	a805      	add	r0, sp, #20
 8004eae:	f7ff fee1 	bl	8004c74 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004eb2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004eb6:	2137      	movs	r1, #55	; 0x37
 8004eb8:	229b      	movs	r2, #155	; 0x9b
 8004eba:	a805      	add	r0, sp, #20
 8004ebc:	e9cd 5600 	strd	r5, r6, [sp]
 8004ec0:	f001 fb22 	bl	8006508 <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_unit_name);
 8004ec4:	f104 02f5 	add.w	r2, r4, #245	; 0xf5
 8004ec8:	4610      	mov	r0, r2
 8004eca:	9203      	str	r2, [sp, #12]
 8004ecc:	f7fb f980 	bl	80001d0 <strlen>
	fill_char_array(text, "Unit name:", identifications->component_identification.component_unit_name, length);
 8004ed0:	9a03      	ldr	r2, [sp, #12]
 8004ed2:	491b      	ldr	r1, [pc, #108]	; (8004f40 <show_identifications+0x290>)
 8004ed4:	b2c3      	uxtb	r3, r0
 8004ed6:	a805      	add	r0, sp, #20
 8004ed8:	f7ff fecc 	bl	8004c74 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004edc:	e9cd 5600 	strd	r5, r6, [sp]
 8004ee0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004ee4:	22a5      	movs	r2, #165	; 0xa5
 8004ee6:	2137      	movs	r1, #55	; 0x37
 8004ee8:	a805      	add	r0, sp, #20
 8004eea:	f001 fb0d 	bl	8006508 <ILI9341_print_text>
	if(display_from_ecu_address){
 8004eee:	b177      	cbz	r7, 8004f0e <show_identifications+0x25e>
		sprintf(text, "Source address:%i", identifications->component_identification.from_ecu_address);
 8004ef0:	f894 2113 	ldrb.w	r2, [r4, #275]	; 0x113
 8004ef4:	4909      	ldr	r1, [pc, #36]	; (8004f1c <show_identifications+0x26c>)
 8004ef6:	a805      	add	r0, sp, #20
 8004ef8:	f00a f902 	bl	800f100 <siprintf>
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004efc:	e9cd 5600 	strd	r5, r6, [sp]
 8004f00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004f04:	22af      	movs	r2, #175	; 0xaf
 8004f06:	2137      	movs	r1, #55	; 0x37
 8004f08:	a805      	add	r0, sp, #20
 8004f0a:	f001 fafd 	bl	8006508 <ILI9341_print_text>
}
 8004f0e:	b013      	add	sp, #76	; 0x4c
 8004f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f14:	080144dd 	.word	0x080144dd
 8004f18:	080144f6 	.word	0x080144f6
 8004f1c:	080144fa 	.word	0x080144fa
 8004f20:	0801450c 	.word	0x0801450c
 8004f24:	08014520 	.word	0x08014520
 8004f28:	0801452d 	.word	0x0801452d
 8004f2c:	0801453c 	.word	0x0801453c
 8004f30:	08014546 	.word	0x08014546
 8004f34:	0801454c 	.word	0x0801454c
 8004f38:	08014566 	.word	0x08014566
 8004f3c:	08014574 	.word	0x08014574
 8004f40:	08014580 	.word	0x08014580

08004f44 <enter_identification>:
static uint8_t enter_identification(char identification[], char title[], uint8_t *frame_id) {
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	4604      	mov	r4, r0
 8004f48:	460e      	mov	r6, r1
 8004f4a:	4615      	mov	r5, r2
	memset(identification, 0, strlen(identification));
 8004f4c:	f7fb f940 	bl	80001d0 <strlen>
 8004f50:	2100      	movs	r1, #0
 8004f52:	4602      	mov	r2, r0
 8004f54:	4620      	mov	r0, r4
 8004f56:	f009 fc61 	bl	800e81c <memset>
	if(STM32_PLC_LCD_Show_Keyboard_Frame(identification, title) == 0){
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	f000 fc79 	bl	8005854 <STM32_PLC_LCD_Show_Keyboard_Frame>
 8004f62:	4604      	mov	r4, r0
 8004f64:	b928      	cbnz	r0, 8004f72 <enter_identification+0x2e>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004f66:	4601      	mov	r1, r0
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f7fe fe5d 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 8004f6e:	4620      	mov	r0, r4
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
	return 1;
 8004f72:	2401      	movs	r4, #1
 8004f74:	e7fb      	b.n	8004f6e <enter_identification+0x2a>
	...

08004f78 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	b089      	sub	sp, #36	; 0x24
	show_identifications("Identifications about this ECU", &j1939->information_this_ECU.this_identifications, false);
 8004f7e:	f500 5196 	add.w	r1, r0, #4800	; 0x12c0
 8004f82:	2200      	movs	r2, #0
 8004f84:	3115      	adds	r1, #21
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 8004f86:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004f8a:	4604      	mov	r4, r0
	show_identifications("Identifications about this ECU", &j1939->information_this_ECU.this_identifications, false);
 8004f8c:	4880      	ldr	r0, [pc, #512]	; (8005190 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x218>)
 8004f8e:	f7ff fe8f 	bl	8004cb0 <show_identifications>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8004f92:	2600      	movs	r6, #0
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 8004f94:	23dc      	movs	r3, #220	; 0xdc
 8004f96:	f240 1225 	movw	r2, #293	; 0x125
 8004f9a:	21c3      	movs	r1, #195	; 0xc3
 8004f9c:	2046      	movs	r0, #70	; 0x46
 8004f9e:	9700      	str	r7, [sp, #0]
 8004fa0:	f001 f984 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8004fa4:	23dc      	movs	r3, #220	; 0xdc
 8004fa6:	f240 1225 	movw	r2, #293	; 0x125
 8004faa:	21c3      	movs	r1, #195	; 0xc3
 8004fac:	2046      	movs	r0, #70	; 0x46
 8004fae:	9600      	str	r6, [sp, #0]
 8004fb0:	f001 fa10 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Set identification", 75, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e9cd 7300 	strd	r7, r3, [sp]
 8004fba:	4876      	ldr	r0, [pc, #472]	; (8005194 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x21c>)
 8004fbc:	4633      	mov	r3, r6
 8004fbe:	22c8      	movs	r2, #200	; 0xc8
 8004fc0:	214b      	movs	r1, #75	; 0x4b
 8004fc2:	f001 faa1 	bl	8006508 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(70, 195, 293, 220);
 8004fc6:	21c3      	movs	r1, #195	; 0xc3
 8004fc8:	23dc      	movs	r3, #220	; 0xdc
 8004fca:	f240 1225 	movw	r2, #293	; 0x125
 8004fce:	2046      	movs	r0, #70	; 0x46
 8004fd0:	f002 f97c 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set identification?") == 0) {
 8004fd4:	4870      	ldr	r0, [pc, #448]	; (8005198 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x220>)
 8004fd6:	f7fd fb47 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8004fda:	4601      	mov	r1, r0
 8004fdc:	b928      	cbnz	r0, 8004fea <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x72>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004fde:	4628      	mov	r0, r5
}
 8004fe0:	b009      	add	sp, #36	; 0x24
 8004fe2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004fe6:	f7fe be1f 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
	char identification[17] = "";
 8004fea:	220d      	movs	r2, #13
 8004fec:	4631      	mov	r1, r6
 8004fee:	a804      	add	r0, sp, #16
 8004ff0:	9603      	str	r6, [sp, #12]
 8004ff2:	f009 fc13 	bl	800e81c <memset>
	if(enter_identification(identification, "Enter software identification", frame_id) == 0)
 8004ff6:	4969      	ldr	r1, [pc, #420]	; (800519c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x224>)
 8004ff8:	462a      	mov	r2, r5
 8004ffa:	a803      	add	r0, sp, #12
 8004ffc:	f7ff ffa2 	bl	8004f44 <enter_identification>
 8005000:	2800      	cmp	r0, #0
 8005002:	f000 80c2 	beq.w	800518a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	j1939->information_this_ECU.this_identifications.software_identification.number_of_fields = strlen(identification); /* This differ from ECU/Component identification */
 8005006:	a803      	add	r0, sp, #12
 8005008:	f7fb f8e2 	bl	80001d0 <strlen>
 800500c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	memcpy(j1939->information_this_ECU.this_identifications.software_identification.identifications, (uint8_t*)identification, sizeof(identification));
 8005010:	af03      	add	r7, sp, #12
	j1939->information_this_ECU.this_identifications.software_identification.number_of_fields = strlen(identification); /* This differ from ECU/Component identification */
 8005012:	f884 02d5 	strb.w	r0, [r4, #725]	; 0x2d5
	memcpy(j1939->information_this_ECU.this_identifications.software_identification.identifications, (uint8_t*)identification, sizeof(identification));
 8005016:	f204 23d6 	addw	r3, r4, #726	; 0x2d6
 800501a:	ae07      	add	r6, sp, #28
 800501c:	463a      	mov	r2, r7
 800501e:	ca03      	ldmia	r2!, {r0, r1}
 8005020:	42b2      	cmp	r2, r6
 8005022:	6018      	str	r0, [r3, #0]
 8005024:	6059      	str	r1, [r3, #4]
 8005026:	4617      	mov	r7, r2
 8005028:	f103 0308 	add.w	r3, r3, #8
 800502c:	d1f6      	bne.n	800501c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0xa4>
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU part number", frame_id) == 0)
 8005032:	495b      	ldr	r1, [pc, #364]	; (80051a0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x228>)
 8005034:	462a      	mov	r2, r5
 8005036:	a803      	add	r0, sp, #12
 8005038:	f7ff ff84 	bl	8004f44 <enter_identification>
 800503c:	2800      	cmp	r0, #0
 800503e:	f000 80a4 	beq.w	800518a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.ecu_identification.ecu_part_number, (uint8_t*)identification, sizeof(identification));
 8005042:	af03      	add	r7, sp, #12
 8005044:	f204 23f6 	addw	r3, r4, #758	; 0x2f6
 8005048:	463a      	mov	r2, r7
 800504a:	ca03      	ldmia	r2!, {r0, r1}
 800504c:	42b2      	cmp	r2, r6
 800504e:	6018      	str	r0, [r3, #0]
 8005050:	6059      	str	r1, [r3, #4]
 8005052:	4617      	mov	r7, r2
 8005054:	f103 0308 	add.w	r3, r3, #8
 8005058:	d1f6      	bne.n	8005048 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0xd0>
 800505a:	7812      	ldrb	r2, [r2, #0]
 800505c:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU serial number", frame_id) == 0)
 800505e:	4951      	ldr	r1, [pc, #324]	; (80051a4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x22c>)
 8005060:	462a      	mov	r2, r5
 8005062:	a803      	add	r0, sp, #12
 8005064:	f7ff ff6e 	bl	8004f44 <enter_identification>
 8005068:	2800      	cmp	r0, #0
 800506a:	f000 808e 	beq.w	800518a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.ecu_identification.ecu_serial_number, (uint8_t*)identification, sizeof(identification));
 800506e:	af03      	add	r7, sp, #12
 8005070:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8005074:	463a      	mov	r2, r7
 8005076:	ca03      	ldmia	r2!, {r0, r1}
 8005078:	42b2      	cmp	r2, r6
 800507a:	6018      	str	r0, [r3, #0]
 800507c:	6059      	str	r1, [r3, #4]
 800507e:	4617      	mov	r7, r2
 8005080:	f103 0308 	add.w	r3, r3, #8
 8005084:	d1f6      	bne.n	8005074 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0xfc>
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU location", frame_id) == 0)
 800508a:	4947      	ldr	r1, [pc, #284]	; (80051a8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x230>)
 800508c:	462a      	mov	r2, r5
 800508e:	a803      	add	r0, sp, #12
 8005090:	f7ff ff58 	bl	8004f44 <enter_identification>
 8005094:	2800      	cmp	r0, #0
 8005096:	d078      	beq.n	800518a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.ecu_identification.ecu_location, (uint8_t*)identification, sizeof(identification));
 8005098:	af03      	add	r7, sp, #12
 800509a:	f204 3332 	addw	r3, r4, #818	; 0x332
 800509e:	463a      	mov	r2, r7
 80050a0:	ca03      	ldmia	r2!, {r0, r1}
 80050a2:	42b2      	cmp	r2, r6
 80050a4:	6018      	str	r0, [r3, #0]
 80050a6:	6059      	str	r1, [r3, #4]
 80050a8:	4617      	mov	r7, r2
 80050aa:	f103 0308 	add.w	r3, r3, #8
 80050ae:	d1f6      	bne.n	800509e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x126>
 80050b0:	7812      	ldrb	r2, [r2, #0]
 80050b2:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU type", frame_id) == 0)
 80050b4:	493d      	ldr	r1, [pc, #244]	; (80051ac <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x234>)
 80050b6:	462a      	mov	r2, r5
 80050b8:	a803      	add	r0, sp, #12
 80050ba:	f7ff ff43 	bl	8004f44 <enter_identification>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d063      	beq.n	800518a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.ecu_identification.ecu_type, (uint8_t*)identification, sizeof(identification));
 80050c2:	af03      	add	r7, sp, #12
 80050c4:	f504 7354 	add.w	r3, r4, #848	; 0x350
 80050c8:	463a      	mov	r2, r7
 80050ca:	ca03      	ldmia	r2!, {r0, r1}
 80050cc:	42b2      	cmp	r2, r6
 80050ce:	6018      	str	r0, [r3, #0]
 80050d0:	6059      	str	r1, [r3, #4]
 80050d2:	4617      	mov	r7, r2
 80050d4:	f103 0308 	add.w	r3, r3, #8
 80050d8:	d1f6      	bne.n	80050c8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x150>
 80050da:	7812      	ldrb	r2, [r2, #0]
 80050dc:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component product date", frame_id) == 0)
 80050de:	4934      	ldr	r1, [pc, #208]	; (80051b0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x238>)
 80050e0:	462a      	mov	r2, r5
 80050e2:	a803      	add	r0, sp, #12
 80050e4:	f7ff ff2e 	bl	8004f44 <enter_identification>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d04e      	beq.n	800518a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.component_identification.component_product_date, (uint8_t*)identification, sizeof(identification));
 80050ec:	af03      	add	r7, sp, #12
 80050ee:	f504 735c 	add.w	r3, r4, #880	; 0x370
 80050f2:	463a      	mov	r2, r7
 80050f4:	ca03      	ldmia	r2!, {r0, r1}
 80050f6:	42b2      	cmp	r2, r6
 80050f8:	6018      	str	r0, [r3, #0]
 80050fa:	6059      	str	r1, [r3, #4]
 80050fc:	4617      	mov	r7, r2
 80050fe:	f103 0308 	add.w	r3, r3, #8
 8005102:	d1f6      	bne.n	80050f2 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x17a>
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component model name", frame_id) == 0)
 8005108:	492a      	ldr	r1, [pc, #168]	; (80051b4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x23c>)
 800510a:	462a      	mov	r2, r5
 800510c:	a803      	add	r0, sp, #12
 800510e:	f7ff ff19 	bl	8004f44 <enter_identification>
 8005112:	2800      	cmp	r0, #0
 8005114:	d039      	beq.n	800518a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.component_identification.component_model_name, (uint8_t*)identification, sizeof(identification));
 8005116:	af03      	add	r7, sp, #12
 8005118:	f204 338e 	addw	r3, r4, #910	; 0x38e
 800511c:	463a      	mov	r2, r7
 800511e:	ca03      	ldmia	r2!, {r0, r1}
 8005120:	42b2      	cmp	r2, r6
 8005122:	6018      	str	r0, [r3, #0]
 8005124:	6059      	str	r1, [r3, #4]
 8005126:	4617      	mov	r7, r2
 8005128:	f103 0308 	add.w	r3, r3, #8
 800512c:	d1f6      	bne.n	800511c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x1a4>
 800512e:	7812      	ldrb	r2, [r2, #0]
 8005130:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component serial number", frame_id) == 0)
 8005132:	4921      	ldr	r1, [pc, #132]	; (80051b8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x240>)
 8005134:	462a      	mov	r2, r5
 8005136:	a803      	add	r0, sp, #12
 8005138:	f7ff ff04 	bl	8004f44 <enter_identification>
 800513c:	b328      	cbz	r0, 800518a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.component_identification.component_serial_number, (uint8_t*)identification, sizeof(identification));
 800513e:	af03      	add	r7, sp, #12
 8005140:	f504 736b 	add.w	r3, r4, #940	; 0x3ac
 8005144:	463a      	mov	r2, r7
 8005146:	ca03      	ldmia	r2!, {r0, r1}
 8005148:	42b2      	cmp	r2, r6
 800514a:	6018      	str	r0, [r3, #0]
 800514c:	6059      	str	r1, [r3, #4]
 800514e:	4617      	mov	r7, r2
 8005150:	f103 0308 	add.w	r3, r3, #8
 8005154:	d1f6      	bne.n	8005144 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x1cc>
 8005156:	7812      	ldrb	r2, [r2, #0]
 8005158:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component unit name", frame_id) == 0)
 800515a:	4918      	ldr	r1, [pc, #96]	; (80051bc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x244>)
 800515c:	462a      	mov	r2, r5
 800515e:	a803      	add	r0, sp, #12
 8005160:	f7ff fef0 	bl	8004f44 <enter_identification>
 8005164:	b188      	cbz	r0, 800518a <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.component_identification.component_unit_name, (uint8_t*)identification, sizeof(identification));
 8005166:	ab03      	add	r3, sp, #12
 8005168:	f204 34ca 	addw	r4, r4, #970	; 0x3ca
 800516c:	461a      	mov	r2, r3
 800516e:	ca03      	ldmia	r2!, {r0, r1}
 8005170:	42b2      	cmp	r2, r6
 8005172:	6020      	str	r0, [r4, #0]
 8005174:	6061      	str	r1, [r4, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	f104 0408 	add.w	r4, r4, #8
 800517c:	d1f6      	bne.n	800516c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x1f4>
 800517e:	7813      	ldrb	r3, [r2, #0]
 8005180:	7023      	strb	r3, [r4, #0]
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005182:	2100      	movs	r1, #0
 8005184:	4628      	mov	r0, r5
 8005186:	f7fe fd4f 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 800518a:	b009      	add	sp, #36	; 0x24
 800518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800518e:	bf00      	nop
 8005190:	0801458b 	.word	0x0801458b
 8005194:	080145aa 	.word	0x080145aa
 8005198:	080145bd 	.word	0x080145bd
 800519c:	080145e0 	.word	0x080145e0
 80051a0:	080145fe 	.word	0x080145fe
 80051a4:	08014614 	.word	0x08014614
 80051a8:	0801462c 	.word	0x0801462c
 80051ac:	0801463f 	.word	0x0801463f
 80051b0:	0801464e 	.word	0x0801464e
 80051b4:	0801466b 	.word	0x0801466b
 80051b8:	08014686 	.word	0x08014686
 80051bc:	080146a4 	.word	0x080146a4

080051c0 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 80051c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	show_identifications("Identifications about other ECU", &j1939->from_other_ecu_identifications, true);
 80051c2:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 80051c4:	460c      	mov	r4, r1
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80051c6:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	show_identifications("Identifications about other ECU", &j1939->from_other_ecu_identifications, true);
 80051ca:	f500 6117 	add.w	r1, r0, #2416	; 0x970
 80051ce:	4815      	ldr	r0, [pc, #84]	; (8005224 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame+0x64>)
 80051d0:	f7ff fd6e 	bl	8004cb0 <show_identifications>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80051d4:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80051d6:	9600      	str	r6, [sp, #0]
 80051d8:	23e6      	movs	r3, #230	; 0xe6
 80051da:	f240 1211 	movw	r2, #273	; 0x111
 80051de:	21cd      	movs	r1, #205	; 0xcd
 80051e0:	2055      	movs	r0, #85	; 0x55
 80051e2:	f001 f863 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80051e6:	9500      	str	r5, [sp, #0]
 80051e8:	23e6      	movs	r3, #230	; 0xe6
 80051ea:	f240 1211 	movw	r2, #273	; 0x111
 80051ee:	21cd      	movs	r1, #205	; 0xcd
 80051f0:	2055      	movs	r0, #85	; 0x55
 80051f2:	f001 f8ef 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 80051f6:	2302      	movs	r3, #2
 80051f8:	e9cd 6300 	strd	r6, r3, [sp]
 80051fc:	480a      	ldr	r0, [pc, #40]	; (8005228 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame+0x68>)
 80051fe:	462b      	mov	r3, r5
 8005200:	22d2      	movs	r2, #210	; 0xd2
 8005202:	215f      	movs	r1, #95	; 0x5f
 8005204:	f001 f980 	bl	8006508 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 8005208:	23e6      	movs	r3, #230	; 0xe6
 800520a:	f240 1211 	movw	r2, #273	; 0x111
 800520e:	21cd      	movs	r1, #205	; 0xcd
 8005210:	2055      	movs	r0, #85	; 0x55
 8005212:	f002 f85b 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005216:	4629      	mov	r1, r5
 8005218:	4620      	mov	r0, r4
}
 800521a:	b002      	add	sp, #8
 800521c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005220:	f7fe bd02 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
 8005224:	080146be 	.word	0x080146be
 8005228:	080132da 	.word	0x080132da

0800522c <show_name_frame>:
	else
		*value = (uint32_t) number_value;
	return 1;
}

static void show_name_frame(char title[], struct Name *name, bool display_from_ecu_address){
 800522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005230:	b090      	sub	sp, #64	; 0x40
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005232:	250f      	movs	r5, #15
static void show_name_frame(char title[], struct Name *name, bool display_from_ecu_address){
 8005234:	460c      	mov	r4, r1
 8005236:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005238:	23ea      	movs	r3, #234	; 0xea
 800523a:	2106      	movs	r1, #6
 800523c:	2033      	movs	r0, #51	; 0x33
static void show_name_frame(char title[], struct Name *name, bool display_from_ecu_address){
 800523e:	4617      	mov	r7, r2
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005240:	9500      	str	r5, [sp, #0]
 8005242:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8005246:	f001 f831 	bl	80062ac <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800524a:	f04f 0801 	mov.w	r8, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 800524e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005252:	f240 1209 	movw	r2, #265	; 0x109
 8005256:	211e      	movs	r1, #30
 8005258:	2032      	movs	r0, #50	; 0x32
 800525a:	f001 f869 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800525e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005262:	220a      	movs	r2, #10
 8005264:	2137      	movs	r1, #55	; 0x37
 8005266:	4630      	mov	r0, r6
 8005268:	e9cd 5800 	strd	r5, r8, [sp]
 800526c:	f001 f94c 	bl	8006508 <ILI9341_print_text>

	/* Write out identity number */
	char text[50];
	sprintf(text, "Identity:%lu", name->identity_number);
 8005270:	6822      	ldr	r2, [r4, #0]
 8005272:	4966      	ldr	r1, [pc, #408]	; (800540c <show_name_frame+0x1e0>)
 8005274:	a803      	add	r0, sp, #12
 8005276:	f009 ff43 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800527a:	2223      	movs	r2, #35	; 0x23
 800527c:	e9cd 5800 	strd	r5, r8, [sp]
 8005280:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005284:	2137      	movs	r1, #55	; 0x37
 8005286:	a803      	add	r0, sp, #12
 8005288:	f001 f93e 	bl	8006508 <ILI9341_print_text>

	/* Write out manufacturer code */
	if(name->manufacturer_code == MANUFACTURER_CODE_GRAYHILL)
 800528c:	88a2      	ldrh	r2, [r4, #4]
 800528e:	f5b2 7f93 	cmp.w	r2, #294	; 0x126
 8005292:	f040 808f 	bne.w	80053b4 <show_name_frame+0x188>
		sprintf(text, "Manufacturer code: Gray Hill");
 8005296:	495e      	ldr	r1, [pc, #376]	; (8005410 <show_name_frame+0x1e4>)
	else if (name->manufacturer_code == MANUFACTURER_CODE_SONCEBOZ)
		sprintf(text, "Manufacturer code: SonceBoz");
 8005298:	a803      	add	r0, sp, #12
 800529a:	f009 ff51 	bl	800f140 <strcpy>
	else
		sprintf(text, "Manufacturer code:%i", name->manufacturer_code);
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 800529e:	250f      	movs	r5, #15
 80052a0:	2601      	movs	r6, #1
 80052a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80052a6:	222d      	movs	r2, #45	; 0x2d
 80052a8:	2137      	movs	r1, #55	; 0x37
 80052aa:	a803      	add	r0, sp, #12
 80052ac:	e9cd 5600 	strd	r5, r6, [sp]
 80052b0:	f001 f92a 	bl	8006508 <ILI9341_print_text>

	/* Write out function instance */
	sprintf(text, "Function instance:%i", name->function_instance);
 80052b4:	79a2      	ldrb	r2, [r4, #6]
 80052b6:	4957      	ldr	r1, [pc, #348]	; (8005414 <show_name_frame+0x1e8>)
 80052b8:	a803      	add	r0, sp, #12
 80052ba:	f009 ff21 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 80052be:	2237      	movs	r2, #55	; 0x37
 80052c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80052c4:	4611      	mov	r1, r2
 80052c6:	a803      	add	r0, sp, #12
 80052c8:	e9cd 5600 	strd	r5, r6, [sp]
 80052cc:	f001 f91c 	bl	8006508 <ILI9341_print_text>

	/* Write out ECU instance */
	sprintf(text, "ECU instance:%i", name->ECU_instance);
 80052d0:	79e2      	ldrb	r2, [r4, #7]
 80052d2:	4951      	ldr	r1, [pc, #324]	; (8005418 <show_name_frame+0x1ec>)
 80052d4:	a803      	add	r0, sp, #12
 80052d6:	f009 ff13 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80052da:	2241      	movs	r2, #65	; 0x41
 80052dc:	e9cd 5600 	strd	r5, r6, [sp]
 80052e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80052e4:	2137      	movs	r1, #55	; 0x37
 80052e6:	a803      	add	r0, sp, #12
 80052e8:	f001 f90e 	bl	8006508 <ILI9341_print_text>

	/* Write out function */
	if(name->function == FUNCTION_AUXILIARY_VALVES_CONTROL)
 80052ec:	7a22      	ldrb	r2, [r4, #8]
 80052ee:	2a81      	cmp	r2, #129	; 0x81
 80052f0:	d16b      	bne.n	80053ca <show_name_frame+0x19e>
		sprintf(text, "Function:Auxiliary Valves Control");
 80052f2:	494a      	ldr	r1, [pc, #296]	; (800541c <show_name_frame+0x1f0>)
	else if (name->function == FUNCTION_VDC_MODULE)
		sprintf(text, "Function:VDC Module");
 80052f4:	a803      	add	r0, sp, #12
 80052f6:	f009 ff23 	bl	800f140 <strcpy>
	else
		sprintf(text, "Function:%i", name->function);
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 80052fa:	250f      	movs	r5, #15
 80052fc:	2601      	movs	r6, #1
 80052fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005302:	224b      	movs	r2, #75	; 0x4b
 8005304:	2137      	movs	r1, #55	; 0x37
 8005306:	a803      	add	r0, sp, #12
 8005308:	e9cd 5600 	strd	r5, r6, [sp]
 800530c:	f001 f8fc 	bl	8006508 <ILI9341_print_text>

	/* Write out vehicle system */
	sprintf(text, "Vehicle system:%i", name->vehicle_system);
 8005310:	7a62      	ldrb	r2, [r4, #9]
 8005312:	4943      	ldr	r1, [pc, #268]	; (8005420 <show_name_frame+0x1f4>)
 8005314:	a803      	add	r0, sp, #12
 8005316:	f009 fef3 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 800531a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800531e:	e9cd 5600 	strd	r5, r6, [sp]
 8005322:	2255      	movs	r2, #85	; 0x55
 8005324:	2137      	movs	r1, #55	; 0x37
 8005326:	a803      	add	r0, sp, #12
 8005328:	f001 f8ee 	bl	8006508 <ILI9341_print_text>

	/* Write out vehicle system */
	if(name->arbitrary_address_capable > 0)
 800532c:	7aa3      	ldrb	r3, [r4, #10]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d054      	beq.n	80053dc <show_name_frame+0x1b0>
		sprintf(text, "Arbitrary address capable:Yes");
 8005332:	493c      	ldr	r1, [pc, #240]	; (8005424 <show_name_frame+0x1f8>)
	else
		sprintf(text, "Arbitrary address capable:No");
 8005334:	a803      	add	r0, sp, #12
 8005336:	f009 ff03 	bl	800f140 <strcpy>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 800533a:	230f      	movs	r3, #15
 800533c:	2201      	movs	r2, #1
 800533e:	e9cd 3200 	strd	r3, r2, [sp]
 8005342:	2137      	movs	r1, #55	; 0x37
 8005344:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005348:	225f      	movs	r2, #95	; 0x5f
 800534a:	a803      	add	r0, sp, #12
 800534c:	f001 f8dc 	bl	8006508 <ILI9341_print_text>

	/* Write out industry group */
	if(name->industry_group == INDUSTRY_GROUP_GLOBAL)
 8005350:	7ae3      	ldrb	r3, [r4, #11]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d144      	bne.n	80053e0 <show_name_frame+0x1b4>
		sprintf(text, "Industry group:Global");
 8005356:	4934      	ldr	r1, [pc, #208]	; (8005428 <show_name_frame+0x1fc>)
		sprintf(text, "Industry group:Marine");
	else if(name->industry_group == INDUSTRY_GROUP_ON_HIGHWAY)
		sprintf(text, "Industry group:On highway");
	else
		sprintf(text, "Industry group:None");
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8005358:	250f      	movs	r5, #15
 800535a:	2601      	movs	r6, #1
		sprintf(text, "Industry group:None");
 800535c:	a803      	add	r0, sp, #12
 800535e:	f009 feef 	bl	800f140 <strcpy>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8005362:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005366:	2269      	movs	r2, #105	; 0x69
 8005368:	2137      	movs	r1, #55	; 0x37
 800536a:	a803      	add	r0, sp, #12
 800536c:	e9cd 5600 	strd	r5, r6, [sp]
 8005370:	f001 f8ca 	bl	8006508 <ILI9341_print_text>

	/* Write out vehicle system instance */
	sprintf(text, "Vehicle system instance:%i", name->vehicle_system_instance);
 8005374:	7b22      	ldrb	r2, [r4, #12]
 8005376:	492d      	ldr	r1, [pc, #180]	; (800542c <show_name_frame+0x200>)
 8005378:	a803      	add	r0, sp, #12
 800537a:	f009 fec1 	bl	800f100 <siprintf>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 800537e:	e9cd 5600 	strd	r5, r6, [sp]
 8005382:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005386:	2273      	movs	r2, #115	; 0x73
 8005388:	2137      	movs	r1, #55	; 0x37
 800538a:	a803      	add	r0, sp, #12
 800538c:	f001 f8bc 	bl	8006508 <ILI9341_print_text>

	/* Write out source address */
	if(display_from_ecu_address){
 8005390:	b16f      	cbz	r7, 80053ae <show_name_frame+0x182>
		sprintf(text, "Source address:%i", name->from_ecu_address);
 8005392:	7b62      	ldrb	r2, [r4, #13]
 8005394:	4926      	ldr	r1, [pc, #152]	; (8005430 <show_name_frame+0x204>)
 8005396:	a803      	add	r0, sp, #12
 8005398:	f009 feb2 	bl	800f100 <siprintf>
		ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 800539c:	e9cd 5600 	strd	r5, r6, [sp]
 80053a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80053a4:	227d      	movs	r2, #125	; 0x7d
 80053a6:	2137      	movs	r1, #55	; 0x37
 80053a8:	a803      	add	r0, sp, #12
 80053aa:	f001 f8ad 	bl	8006508 <ILI9341_print_text>
	}
}
 80053ae:	b010      	add	sp, #64	; 0x40
 80053b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if (name->manufacturer_code == MANUFACTURER_CODE_SONCEBOZ)
 80053b4:	f240 1347 	movw	r3, #327	; 0x147
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d101      	bne.n	80053c0 <show_name_frame+0x194>
		sprintf(text, "Manufacturer code: SonceBoz");
 80053bc:	491d      	ldr	r1, [pc, #116]	; (8005434 <show_name_frame+0x208>)
 80053be:	e76b      	b.n	8005298 <show_name_frame+0x6c>
		sprintf(text, "Manufacturer code:%i", name->manufacturer_code);
 80053c0:	491d      	ldr	r1, [pc, #116]	; (8005438 <show_name_frame+0x20c>)
 80053c2:	a803      	add	r0, sp, #12
 80053c4:	f009 fe9c 	bl	800f100 <siprintf>
 80053c8:	e769      	b.n	800529e <show_name_frame+0x72>
	else if (name->function == FUNCTION_VDC_MODULE)
 80053ca:	2a87      	cmp	r2, #135	; 0x87
 80053cc:	d101      	bne.n	80053d2 <show_name_frame+0x1a6>
		sprintf(text, "Function:VDC Module");
 80053ce:	491b      	ldr	r1, [pc, #108]	; (800543c <show_name_frame+0x210>)
 80053d0:	e790      	b.n	80052f4 <show_name_frame+0xc8>
		sprintf(text, "Function:%i", name->function);
 80053d2:	491b      	ldr	r1, [pc, #108]	; (8005440 <show_name_frame+0x214>)
 80053d4:	a803      	add	r0, sp, #12
 80053d6:	f009 fe93 	bl	800f100 <siprintf>
 80053da:	e78e      	b.n	80052fa <show_name_frame+0xce>
		sprintf(text, "Arbitrary address capable:No");
 80053dc:	4919      	ldr	r1, [pc, #100]	; (8005444 <show_name_frame+0x218>)
 80053de:	e7a9      	b.n	8005334 <show_name_frame+0x108>
	else if(name->industry_group == INDUSTRY_GROUP_CONSTRUCTION)
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d101      	bne.n	80053e8 <show_name_frame+0x1bc>
		sprintf(text, "Industry group:Construction");
 80053e4:	4918      	ldr	r1, [pc, #96]	; (8005448 <show_name_frame+0x21c>)
 80053e6:	e7b7      	b.n	8005358 <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_AGRICULTURAL_AND_FORESTRY)
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d101      	bne.n	80053f0 <show_name_frame+0x1c4>
		sprintf(text, "Industry group:Agricultural and forestry");
 80053ec:	4917      	ldr	r1, [pc, #92]	; (800544c <show_name_frame+0x220>)
 80053ee:	e7b3      	b.n	8005358 <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_INDUSTRIAL_CONTROL_PROCESS)
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	d101      	bne.n	80053f8 <show_name_frame+0x1cc>
		sprintf(text, "Industry group:Industrial control process");
 80053f4:	4916      	ldr	r1, [pc, #88]	; (8005450 <show_name_frame+0x224>)
 80053f6:	e7af      	b.n	8005358 <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_MARINE)
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d101      	bne.n	8005400 <show_name_frame+0x1d4>
		sprintf(text, "Industry group:Marine");
 80053fc:	4915      	ldr	r1, [pc, #84]	; (8005454 <show_name_frame+0x228>)
 80053fe:	e7ab      	b.n	8005358 <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_ON_HIGHWAY)
 8005400:	2b01      	cmp	r3, #1
		sprintf(text, "Industry group:On highway");
 8005402:	bf0c      	ite	eq
 8005404:	4914      	ldreq	r1, [pc, #80]	; (8005458 <show_name_frame+0x22c>)
		sprintf(text, "Industry group:None");
 8005406:	4915      	ldrne	r1, [pc, #84]	; (800545c <show_name_frame+0x230>)
 8005408:	e7a6      	b.n	8005358 <show_name_frame+0x12c>
 800540a:	bf00      	nop
 800540c:	08013f0c 	.word	0x08013f0c
 8005410:	08013f19 	.word	0x08013f19
 8005414:	08013f67 	.word	0x08013f67
 8005418:	08013f7c 	.word	0x08013f7c
 800541c:	08013f8c 	.word	0x08013f8c
 8005420:	08013fce 	.word	0x08013fce
 8005424:	08013fe0 	.word	0x08013fe0
 8005428:	0801401b 	.word	0x0801401b
 800542c:	080140e4 	.word	0x080140e4
 8005430:	080144fa 	.word	0x080144fa
 8005434:	08013f36 	.word	0x08013f36
 8005438:	08013f52 	.word	0x08013f52
 800543c:	08013fae 	.word	0x08013fae
 8005440:	08013fc2 	.word	0x08013fc2
 8005444:	08013ffe 	.word	0x08013ffe
 8005448:	08014031 	.word	0x08014031
 800544c:	0801404d 	.word	0x0801404d
 8005450:	08014076 	.word	0x08014076
 8005454:	080140a0 	.word	0x080140a0
 8005458:	080140b6 	.word	0x080140b6
 800545c:	080140d0 	.word	0x080140d0

08005460 <show_numpad_question>:
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 8005460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005462:	460f      	mov	r7, r1
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 8005464:	2100      	movs	r1, #0
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 8005466:	4616      	mov	r6, r2
 8005468:	461d      	mov	r5, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 800546a:	aa01      	add	r2, sp, #4
 800546c:	4603      	mov	r3, r0
 800546e:	4608      	mov	r0, r1
 8005470:	f000 fae2 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 8005474:	4604      	mov	r4, r0
 8005476:	b930      	cbnz	r0, 8005486 <show_numpad_question+0x26>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005478:	4601      	mov	r1, r0
 800547a:	4638      	mov	r0, r7
 800547c:	f7fe fbd4 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 8005480:	4620      	mov	r0, r4
 8005482:	b003      	add	sp, #12
 8005484:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(number_value < 0)
 8005486:	eddd 7a01 	vldr	s15, [sp, #4]
 800548a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005492:	d503      	bpl.n	800549c <show_numpad_question+0x3c>
		*value = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	602b      	str	r3, [r5, #0]
	return 1;
 8005498:	2401      	movs	r4, #1
 800549a:	e7f1      	b.n	8005480 <show_numpad_question+0x20>
	else if(number_value > max_value)
 800549c:	ee07 6a10 	vmov	s14, r6
 80054a0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80054a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*value = (uint32_t) number_value;
 80054ac:	bfd6      	itet	le
 80054ae:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		*value = max_value;
 80054b2:	602e      	strgt	r6, [r5, #0]
		*value = (uint32_t) number_value;
 80054b4:	edc5 7a00 	vstrle	s15, [r5]
 80054b8:	e7ee      	b.n	8005498 <show_numpad_question+0x38>
	...

080054bc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 80054bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054be:	460d      	mov	r5, r1
 80054c0:	b08d      	sub	sp, #52	; 0x34
	show_name_frame("This ECU name", &j1939->information_this_ECU.this_name, false);
 80054c2:	f500 5196 	add.w	r1, r0, #4800	; 0x12c0
 80054c6:	2200      	movs	r2, #0
 80054c8:	3104      	adds	r1, #4
	ILI9341_fill_rect(80, 195, 285, 220, COLOR_GREEN);
 80054ca:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 80054ce:	4604      	mov	r4, r0
	show_name_frame("This ECU name", &j1939->information_this_ECU.this_name, false);
 80054d0:	484b      	ldr	r0, [pc, #300]	; (8005600 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x144>)
 80054d2:	f7ff feab 	bl	800522c <show_name_frame>
	ILI9341_hollow_rect(80, 195, 285, 220, COLOR_BLACK);
 80054d6:	2600      	movs	r6, #0
	ILI9341_fill_rect(80, 195, 285, 220, COLOR_GREEN);
 80054d8:	23dc      	movs	r3, #220	; 0xdc
 80054da:	f240 121d 	movw	r2, #285	; 0x11d
 80054de:	21c3      	movs	r1, #195	; 0xc3
 80054e0:	2050      	movs	r0, #80	; 0x50
 80054e2:	9700      	str	r7, [sp, #0]
 80054e4:	f000 fee2 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(80, 195, 285, 220, COLOR_BLACK);
 80054e8:	23dc      	movs	r3, #220	; 0xdc
 80054ea:	f240 121d 	movw	r2, #285	; 0x11d
 80054ee:	21c3      	movs	r1, #195	; 0xc3
 80054f0:	2050      	movs	r0, #80	; 0x50
 80054f2:	9600      	str	r6, [sp, #0]
 80054f4:	f000 ff6e 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Set the ECU NAME", 87, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80054f8:	2302      	movs	r3, #2
 80054fa:	e9cd 7300 	strd	r7, r3, [sp]
 80054fe:	4841      	ldr	r0, [pc, #260]	; (8005604 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x148>)
 8005500:	4633      	mov	r3, r6
 8005502:	22c8      	movs	r2, #200	; 0xc8
 8005504:	2157      	movs	r1, #87	; 0x57
 8005506:	f000 ffff 	bl	8006508 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(80, 195, 285, 220);
 800550a:	21c3      	movs	r1, #195	; 0xc3
 800550c:	23dc      	movs	r3, #220	; 0xdc
 800550e:	f240 121d 	movw	r2, #285	; 0x11d
 8005512:	2050      	movs	r0, #80	; 0x50
 8005514:	f001 feda 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set the NAME?") == 0) {
 8005518:	483b      	ldr	r0, [pc, #236]	; (8005608 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x14c>)
 800551a:	f7fd f8a5 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 800551e:	4601      	mov	r1, r0
 8005520:	b928      	cbnz	r0, 800552e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x72>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005522:	4628      	mov	r0, r5
}
 8005524:	b00d      	add	sp, #52	; 0x34
 8005526:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800552a:	f7fe bb7d 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
	if(show_numpad_question("Enter identity between 0 and 2097151", frame_id, 2097151, &identity_number) == 0)
 800552e:	4a37      	ldr	r2, [pc, #220]	; (800560c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x150>)
 8005530:	4837      	ldr	r0, [pc, #220]	; (8005610 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x154>)
 8005532:	ab03      	add	r3, sp, #12
 8005534:	4629      	mov	r1, r5
 8005536:	f7ff ff93 	bl	8005460 <show_numpad_question>
 800553a:	2800      	cmp	r0, #0
 800553c:	d05e      	beq.n	80055fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter manufacturer code between 0 and 2047", frame_id, 2047, &manufacturer_code) == 0)
 800553e:	4835      	ldr	r0, [pc, #212]	; (8005614 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x158>)
 8005540:	ab04      	add	r3, sp, #16
 8005542:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005546:	4629      	mov	r1, r5
 8005548:	f7ff ff8a 	bl	8005460 <show_numpad_question>
 800554c:	2800      	cmp	r0, #0
 800554e:	d055      	beq.n	80055fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter function instance between 0 and 31", frame_id, 31, &function_instance) == 0)
 8005550:	4831      	ldr	r0, [pc, #196]	; (8005618 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x15c>)
 8005552:	ab05      	add	r3, sp, #20
 8005554:	221f      	movs	r2, #31
 8005556:	4629      	mov	r1, r5
 8005558:	f7ff ff82 	bl	8005460 <show_numpad_question>
 800555c:	2800      	cmp	r0, #0
 800555e:	d04d      	beq.n	80055fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter ECU instance between 0 and 7", frame_id, 7, &ECU_instance) == 0)
 8005560:	482e      	ldr	r0, [pc, #184]	; (800561c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x160>)
 8005562:	ab06      	add	r3, sp, #24
 8005564:	2207      	movs	r2, #7
 8005566:	4629      	mov	r1, r5
 8005568:	f7ff ff7a 	bl	8005460 <show_numpad_question>
 800556c:	2800      	cmp	r0, #0
 800556e:	d045      	beq.n	80055fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter function between 0 and 255", frame_id, 255, &function) == 0)
 8005570:	482b      	ldr	r0, [pc, #172]	; (8005620 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x164>)
 8005572:	ab07      	add	r3, sp, #28
 8005574:	22ff      	movs	r2, #255	; 0xff
 8005576:	4629      	mov	r1, r5
 8005578:	f7ff ff72 	bl	8005460 <show_numpad_question>
 800557c:	2800      	cmp	r0, #0
 800557e:	d03d      	beq.n	80055fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter vehicle system between 0 and 127", frame_id, 127, &vehicle_system) == 0)
 8005580:	4828      	ldr	r0, [pc, #160]	; (8005624 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x168>)
 8005582:	ab08      	add	r3, sp, #32
 8005584:	227f      	movs	r2, #127	; 0x7f
 8005586:	4629      	mov	r1, r5
 8005588:	f7ff ff6a 	bl	8005460 <show_numpad_question>
 800558c:	2800      	cmp	r0, #0
 800558e:	d035      	beq.n	80055fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter arbitrary address capable between 0 and 1", frame_id, 1, &arbitrary_address_capable) == 0)
 8005590:	4825      	ldr	r0, [pc, #148]	; (8005628 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x16c>)
 8005592:	ab09      	add	r3, sp, #36	; 0x24
 8005594:	2201      	movs	r2, #1
 8005596:	4629      	mov	r1, r5
 8005598:	f7ff ff62 	bl	8005460 <show_numpad_question>
 800559c:	b370      	cbz	r0, 80055fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter industry group between 0 and 7", frame_id, 7, &industry_group) == 0)
 800559e:	4823      	ldr	r0, [pc, #140]	; (800562c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x170>)
 80055a0:	ab0a      	add	r3, sp, #40	; 0x28
 80055a2:	2207      	movs	r2, #7
 80055a4:	4629      	mov	r1, r5
 80055a6:	f7ff ff5b 	bl	8005460 <show_numpad_question>
 80055aa:	b338      	cbz	r0, 80055fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter vehicle system instance between 0 and 15", frame_id, 15, &vehicle_system_instance) == 0)
 80055ac:	4820      	ldr	r0, [pc, #128]	; (8005630 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x174>)
 80055ae:	ab0b      	add	r3, sp, #44	; 0x2c
 80055b0:	220f      	movs	r2, #15
 80055b2:	4629      	mov	r1, r5
 80055b4:	f7ff ff54 	bl	8005460 <show_numpad_question>
 80055b8:	b300      	cbz	r0, 80055fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	j1939->information_this_ECU.this_name.identity_number = identity_number;
 80055ba:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80055be:	9a03      	ldr	r2, [sp, #12]
 80055c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	j1939->information_this_ECU.this_name.manufacturer_code = manufacturer_code;
 80055c4:	9a04      	ldr	r2, [sp, #16]
 80055c6:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
	j1939->information_this_ECU.this_name.function_instance = function_instance;
 80055ca:	9a05      	ldr	r2, [sp, #20]
 80055cc:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
	j1939->information_this_ECU.this_name.ECU_instance = ECU_instance;
 80055d0:	9a06      	ldr	r2, [sp, #24]
 80055d2:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
	j1939->information_this_ECU.this_name.function = function;
 80055d6:	9a07      	ldr	r2, [sp, #28]
 80055d8:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
	j1939->information_this_ECU.this_name.vehicle_system = vehicle_system;
 80055dc:	9a08      	ldr	r2, [sp, #32]
 80055de:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
	j1939->information_this_ECU.this_name.arbitrary_address_capable = arbitrary_address_capable;
 80055e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e4:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
	j1939->information_this_ECU.this_name.industry_group = industry_group;
 80055e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ea:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
	j1939->information_this_ECU.this_name.vehicle_system_instance = vehicle_system_instance;
 80055ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055f0:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80055f4:	2100      	movs	r1, #0
 80055f6:	4628      	mov	r0, r5
 80055f8:	f7fe fb16 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 80055fc:	b00d      	add	sp, #52	; 0x34
 80055fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005600:	080146de 	.word	0x080146de
 8005604:	080146ec 	.word	0x080146ec
 8005608:	080146fd 	.word	0x080146fd
 800560c:	001fffff 	.word	0x001fffff
 8005610:	08013d37 	.word	0x08013d37
 8005614:	08013d5c 	.word	0x08013d5c
 8005618:	08013d87 	.word	0x08013d87
 800561c:	08013db0 	.word	0x08013db0
 8005620:	08013dd3 	.word	0x08013dd3
 8005624:	08013df4 	.word	0x08013df4
 8005628:	08013e1b 	.word	0x08013e1b
 800562c:	08013e4b 	.word	0x08013e4b
 8005630:	08013e70 	.word	0x08013e70

08005634 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 8005634:	b573      	push	{r0, r1, r4, r5, r6, lr}
	show_name_frame("Other ECU name", &j1939->from_other_ecu_name, true);
 8005636:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 8005638:	460c      	mov	r4, r1
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 800563a:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	show_name_frame("Other ECU name", &j1939->from_other_ecu_name, true);
 800563e:	f500 7188 	add.w	r1, r0, #272	; 0x110
 8005642:	4815      	ldr	r0, [pc, #84]	; (8005698 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame+0x64>)
 8005644:	f7ff fdf2 	bl	800522c <show_name_frame>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8005648:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 800564a:	9600      	str	r6, [sp, #0]
 800564c:	23e6      	movs	r3, #230	; 0xe6
 800564e:	f240 1211 	movw	r2, #273	; 0x111
 8005652:	21cd      	movs	r1, #205	; 0xcd
 8005654:	2055      	movs	r0, #85	; 0x55
 8005656:	f000 fe29 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 800565a:	9500      	str	r5, [sp, #0]
 800565c:	23e6      	movs	r3, #230	; 0xe6
 800565e:	f240 1211 	movw	r2, #273	; 0x111
 8005662:	21cd      	movs	r1, #205	; 0xcd
 8005664:	2055      	movs	r0, #85	; 0x55
 8005666:	f000 feb5 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 800566a:	2302      	movs	r3, #2
 800566c:	e9cd 6300 	strd	r6, r3, [sp]
 8005670:	480a      	ldr	r0, [pc, #40]	; (800569c <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame+0x68>)
 8005672:	462b      	mov	r3, r5
 8005674:	22d2      	movs	r2, #210	; 0xd2
 8005676:	215f      	movs	r1, #95	; 0x5f
 8005678:	f000 ff46 	bl	8006508 <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 800567c:	23e6      	movs	r3, #230	; 0xe6
 800567e:	f240 1211 	movw	r2, #273	; 0x111
 8005682:	21cd      	movs	r1, #205	; 0xcd
 8005684:	2055      	movs	r0, #85	; 0x55
 8005686:	f001 fe21 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800568a:	4629      	mov	r1, r5
 800568c:	4620      	mov	r0, r4
}
 800568e:	b002      	add	sp, #8
 8005690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005694:	f7fe bac8 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
 8005698:	0801471a 	.word	0x0801471a
 800569c:	080132da 	.word	0x080132da

080056a0 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame>:
#include "../../../Open SAE J1939/SAE_J1939/SAE_J1939_Enums/Enum_PGN.h"
#include "../../../Open SAE J1939/SAE_J1939/SAE_J1939-21_Transport_Layer/Transport_Layer.h"
#include "../../../Open SAE J1939/SAE_J1939/SAE_J1939-81_Network_Management_Layer/Network_Management_Layer.h"


void STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(J1939 *j1939, uint8_t *frame_id) {
 80056a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a2:	b087      	sub	sp, #28
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80056a4:	240f      	movs	r4, #15
 80056a6:	9400      	str	r4, [sp, #0]
 80056a8:	23ea      	movs	r3, #234	; 0xea
 80056aa:	f44f 729d 	mov.w	r2, #314	; 0x13a
void STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(J1939 *j1939, uint8_t *frame_id) {
 80056ae:	4607      	mov	r7, r0
 80056b0:	460e      	mov	r6, r1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80056b2:	2033      	movs	r0, #51	; 0x33
 80056b4:	2106      	movs	r1, #6

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Do a PGN request", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80056b6:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80056b8:	f000 fdf8 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80056bc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80056c0:	f240 1209 	movw	r2, #265	; 0x109
 80056c4:	211e      	movs	r1, #30
 80056c6:	2032      	movs	r0, #50	; 0x32
 80056c8:	f000 fe32 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Do a PGN request", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80056cc:	e9cd 4500 	strd	r4, r5, [sp]
 80056d0:	4854      	ldr	r0, [pc, #336]	; (8005824 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x184>)
 80056d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80056d6:	220a      	movs	r2, #10
 80056d8:	2137      	movs	r1, #55	; 0x37
 80056da:	f000 ff15 	bl	8006508 <ILI9341_print_text>

	/* Most commonly PGN requests */
	ILI9341_print_text("Commonly PGN numbers:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 80056de:	e9cd 4500 	strd	r4, r5, [sp]
 80056e2:	4851      	ldr	r0, [pc, #324]	; (8005828 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x188>)
 80056e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80056e8:	2223      	movs	r2, #35	; 0x23
 80056ea:	2137      	movs	r1, #55	; 0x37
 80056ec:	f000 ff0c 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("Address claimed:60928 Software ID:65242", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 80056f0:	e9cd 4500 	strd	r4, r5, [sp]
 80056f4:	484d      	ldr	r0, [pc, #308]	; (800582c <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x18c>)
 80056f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80056fa:	222d      	movs	r2, #45	; 0x2d
 80056fc:	2137      	movs	r1, #55	; 0x37
 80056fe:	f000 ff03 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("ECU ID:64965 Component ID:65295", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8005702:	2237      	movs	r2, #55	; 0x37
 8005704:	e9cd 4500 	strd	r4, r5, [sp]
 8005708:	4611      	mov	r1, r2
 800570a:	4849      	ldr	r0, [pc, #292]	; (8005830 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x190>)
 800570c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005710:	f000 fefa 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("DM1:65226 DM2:65227 DM3:65228", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8005714:	e9cd 4500 	strd	r4, r5, [sp]
 8005718:	4846      	ldr	r0, [pc, #280]	; (8005834 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x194>)
 800571a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800571e:	2241      	movs	r2, #65	; 0x41
 8005720:	2137      	movs	r1, #55	; 0x37
 8005722:	f000 fef1 	bl	8006508 <ILI9341_print_text>
	ILI9341_print_text("PGN 60928 will update all ECU addresses", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8005726:	e9cd 4500 	strd	r4, r5, [sp]
 800572a:	4843      	ldr	r0, [pc, #268]	; (8005838 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x198>)
 800572c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005730:	224b      	movs	r2, #75	; 0x4b
 8005732:	2137      	movs	r1, #55	; 0x37

	/* Request button */
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 8005734:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("PGN 60928 will update all ECU addresses", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8005738:	f000 fee6 	bl	8006508 <ILI9341_print_text>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 800573c:	2400      	movs	r4, #0
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 800573e:	23dc      	movs	r3, #220	; 0xdc
 8005740:	f240 1211 	movw	r2, #273	; 0x111
 8005744:	21c3      	movs	r1, #195	; 0xc3
 8005746:	2055      	movs	r0, #85	; 0x55
 8005748:	9500      	str	r5, [sp, #0]
 800574a:	f000 fdaf 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 800574e:	23dc      	movs	r3, #220	; 0xdc
 8005750:	f240 1211 	movw	r2, #273	; 0x111
 8005754:	21c3      	movs	r1, #195	; 0xc3
 8005756:	2055      	movs	r0, #85	; 0x55
 8005758:	9400      	str	r4, [sp, #0]
 800575a:	f000 fe3b 	bl	80063d4 <ILI9341_hollow_rect>
	ILI9341_print_text("Enter a request", 90, 200, COLOR_BLACK, COLOR_GREEN, 2);
 800575e:	2302      	movs	r3, #2
 8005760:	e9cd 5300 	strd	r5, r3, [sp]
 8005764:	4835      	ldr	r0, [pc, #212]	; (800583c <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x19c>)
 8005766:	4623      	mov	r3, r4
 8005768:	22c8      	movs	r2, #200	; 0xc8
 800576a:	215a      	movs	r1, #90	; 0x5a
 800576c:	f000 fecc 	bl	8006508 <ILI9341_print_text>

	/* Logic for request button */
	STM32_PLC_LCD_Call_One_Button_Logic(85, 195, 273, 220);
 8005770:	23dc      	movs	r3, #220	; 0xdc
 8005772:	f240 1211 	movw	r2, #273	; 0x111
 8005776:	21c3      	movs	r1, #195	; 0xc3
 8005778:	2055      	movs	r0, #85	; 0x55
 800577a:	f001 fda7 	bl	80072cc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to enter a PGN number?") == 0)
 800577e:	4830      	ldr	r0, [pc, #192]	; (8005840 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1a0>)
 8005780:	f7fc ff72 	bl	8002668 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8005784:	b928      	cbnz	r0, 8005792 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xf2>
		SAE_J1939_Send_Request_Address_Claimed(j1939, DA);
	else
		SAE_J1939_Send_Request(j1939, DA, PGN);

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005786:	2100      	movs	r1, #0
 8005788:	4630      	mov	r0, r6
 800578a:	f7fe fa4d 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
}
 800578e:	b007      	add	sp, #28
 8005790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter PGN number between 0 and 65535") == 0)
 8005792:	4b2c      	ldr	r3, [pc, #176]	; (8005844 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1a4>)
 8005794:	aa05      	add	r2, sp, #20
 8005796:	4621      	mov	r1, r4
 8005798:	4620      	mov	r0, r4
 800579a:	f000 f94d 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d0f1      	beq.n	8005786 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xe6>
	if(number_value < 0)
 80057a2:	eddd 7a05 	vldr	s15, [sp, #20]
 80057a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ae:	d40d      	bmi.n	80057cc <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x12c>
	else if(number_value > 0xFFFF)
 80057b0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005848 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1a8>
 80057b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		PGN = (uint16_t) number_value;
 80057bc:	bfd7      	itett	le
 80057be:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		PGN = 0xFFFF;
 80057c2:	f64f 74ff 	movwgt	r4, #65535	; 0xffff
		PGN = (uint16_t) number_value;
 80057c6:	ee17 3a90 	vmovle	r3, s15
 80057ca:	b29c      	uxthle	r4, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter destination address 0 to 255") == 0)
 80057cc:	2100      	movs	r1, #0
 80057ce:	4b1f      	ldr	r3, [pc, #124]	; (800584c <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1ac>)
 80057d0:	aa05      	add	r2, sp, #20
 80057d2:	4608      	mov	r0, r1
 80057d4:	f000 f930 	bl	8005a38 <STM32_PLC_LCD_Show_Numpad_Frame>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d0d4      	beq.n	8005786 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xe6>
	if(number_value < 0)
 80057dc:	eddd 7a05 	vldr	s15, [sp, #20]
 80057e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e8:	d413      	bmi.n	8005812 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x172>
	else if(number_value > 0xFF)
 80057ea:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005850 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1b0>
 80057ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f6:	dc0e      	bgt.n	8005816 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x176>
		DA = (uint8_t) number_value;
 80057f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fc:	edcd 7a03 	vstr	s15, [sp, #12]
 8005800:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if(PGN == PGN_ADDRESS_CLAIMED)
 8005804:	f5b4 4f6e 	cmp.w	r4, #60928	; 0xee00
 8005808:	d107      	bne.n	800581a <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x17a>
		SAE_J1939_Send_Request_Address_Claimed(j1939, DA);
 800580a:	4638      	mov	r0, r7
 800580c:	f7fc fe52 	bl	80024b4 <SAE_J1939_Send_Request_Address_Claimed>
 8005810:	e7b9      	b.n	8005786 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xe6>
		DA = 0;
 8005812:	2100      	movs	r1, #0
 8005814:	e7f6      	b.n	8005804 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x164>
		DA = 0xFF;
 8005816:	21ff      	movs	r1, #255	; 0xff
 8005818:	e7f4      	b.n	8005804 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x164>
		SAE_J1939_Send_Request(j1939, DA, PGN);
 800581a:	4622      	mov	r2, r4
 800581c:	4638      	mov	r0, r7
 800581e:	f7fc fdc7 	bl	80023b0 <SAE_J1939_Send_Request>
 8005822:	e7b0      	b.n	8005786 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xe6>
 8005824:	080139c4 	.word	0x080139c4
 8005828:	08014729 	.word	0x08014729
 800582c:	0801473f 	.word	0x0801473f
 8005830:	08014767 	.word	0x08014767
 8005834:	08014787 	.word	0x08014787
 8005838:	080147a5 	.word	0x080147a5
 800583c:	080147cd 	.word	0x080147cd
 8005840:	080147dd 	.word	0x080147dd
 8005844:	08014800 	.word	0x08014800
 8005848:	477fff00 	.word	0x477fff00
 800584c:	08014825 	.word	0x08014825
 8005850:	437f0000 	.word	0x437f0000

08005854 <STM32_PLC_LCD_Show_Keyboard_Frame>:
 */

#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Keyboard_Frame(char word[], char title[]) {
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	ed2d 8b02 	vpush	{d8}
 800585c:	ee08 0a10 	vmov	s16, r0
 8005860:	b085      	sub	sp, #20
	/* Begin with black page */
	ILI9341_fill_screen(COLOR_BLACK);
 8005862:	2000      	movs	r0, #0
uint8_t STM32_PLC_LCD_Show_Keyboard_Frame(char word[], char title[]) {
 8005864:	460c      	mov	r4, r1
	ILI9341_fill_screen(COLOR_BLACK);
 8005866:	f000 fceb 	bl	8006240 <ILI9341_fill_screen>

	/* Print frame - large square */
	ILI9341_hollow_rect(5, 5, 315, 235, COLOR_GREEN);
 800586a:	2105      	movs	r1, #5
 800586c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005870:	4608      	mov	r0, r1
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	f240 123b 	movw	r2, #315	; 0x13b
 8005878:	23eb      	movs	r3, #235	; 0xeb
 800587a:	f000 fdab 	bl	80063d4 <ILI9341_hollow_rect>

	/* Create gray, white square */
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 800587e:	f647 36ef 	movw	r6, #31727	; 0x7bef
 8005882:	2106      	movs	r1, #6
 8005884:	4608      	mov	r0, r1
 8005886:	9600      	str	r6, [sp, #0]
 8005888:	2337      	movs	r3, #55	; 0x37
 800588a:	f44f 729d 	mov.w	r2, #314	; 0x13a
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 800588e:	f64f 75ff 	movw	r5, #65535	; 0xffff
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 8005892:	f000 fd0b 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 8005896:	2332      	movs	r3, #50	; 0x32
 8005898:	f44f 729a 	mov.w	r2, #308	; 0x134
 800589c:	2118      	movs	r1, #24
 800589e:	200c      	movs	r0, #12
 80058a0:	9500      	str	r5, [sp, #0]
 80058a2:	f000 fd03 	bl	80062ac <ILI9341_fill_rect>

	/* Set title */
	ILI9341_print_text(title, 12, 12, COLOR_WHITE, COLOR_DGRAY, 1);
 80058a6:	2301      	movs	r3, #1
 80058a8:	220c      	movs	r2, #12
 80058aa:	e9cd 6300 	strd	r6, r3, [sp]
 80058ae:	4620      	mov	r0, r4
 80058b0:	462b      	mov	r3, r5
 80058b2:	4611      	mov	r1, r2
 80058b4:	f000 fe28 	bl	8006508 <ILI9341_print_text>
 80058b8:	2426      	movs	r4, #38	; 0x26
 80058ba:	2600      	movs	r6, #0
	char letter[3];
	uint8_t keyboard_page = 6; /* We start at this */
	for (uint8_t i = 0; i < 5; i++) {
		x += 23;
		/* Upper numbers */
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 80058bc:	f1a4 090f 	sub.w	r9, r4, #15
 80058c0:	f104 0a19 	add.w	sl, r4, #25
 80058c4:	fa0f f989 	sxth.w	r9, r9
 80058c8:	fa0f fa8a 	sxth.w	sl, sl
 80058cc:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80058d0:	f1a4 070a 	sub.w	r7, r4, #10
 80058d4:	f104 0814 	add.w	r8, r4, #20
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 80058d8:	f64f 75ff 	movw	r5, #65535	; 0xffff
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	4652      	mov	r2, sl
 80058e0:	236e      	movs	r3, #110	; 0x6e
 80058e2:	2146      	movs	r1, #70	; 0x46
 80058e4:	4648      	mov	r0, r9
 80058e6:	b23f      	sxth	r7, r7
 80058e8:	fa0f f888 	sxth.w	r8, r8
 80058ec:	f000 fcde 	bl	80062ac <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 80058f0:	2369      	movs	r3, #105	; 0x69
 80058f2:	4642      	mov	r2, r8
 80058f4:	214b      	movs	r1, #75	; 0x4b
 80058f6:	4638      	mov	r0, r7
 80058f8:	9500      	str	r5, [sp, #0]
 80058fa:	f000 fcd7 	bl	80062ac <ILI9341_fill_rect>
		sprintf(letter, "%c", i + 32 + 5*keyboard_page); /* 32 is space char when i = 0 */
 80058fe:	f104 0b01 	add.w	fp, r4, #1
 8005902:	4947      	ldr	r1, [pc, #284]	; (8005a20 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1cc>)
 8005904:	f106 023e 	add.w	r2, r6, #62	; 0x3e
 8005908:	a803      	add	r0, sp, #12
 800590a:	f009 fbf9 	bl	800f100 <siprintf>
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 800590e:	fa0f fb8b 	sxth.w	fp, fp
 8005912:	2302      	movs	r3, #2
 8005914:	4659      	mov	r1, fp
 8005916:	e9cd 5300 	strd	r5, r3, [sp]
 800591a:	2253      	movs	r2, #83	; 0x53
 800591c:	2300      	movs	r3, #0
 800591e:	a803      	add	r0, sp, #12
 8005920:	f000 fdf2 	bl	8006508 <ILI9341_print_text>

		/* Lower numbers */
		ILI9341_fill_rect(x, 125, x + 40, 165, COLOR_DGRAY);
 8005924:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	4652      	mov	r2, sl
 800592c:	23a5      	movs	r3, #165	; 0xa5
 800592e:	217d      	movs	r1, #125	; 0x7d
 8005930:	4648      	mov	r0, r9
 8005932:	f000 fcbb 	bl	80062ac <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 130, x + 35, 160, COLOR_WHITE);
 8005936:	23a0      	movs	r3, #160	; 0xa0
 8005938:	4642      	mov	r2, r8
 800593a:	2182      	movs	r1, #130	; 0x82
 800593c:	4638      	mov	r0, r7
 800593e:	9500      	str	r5, [sp, #0]
 8005940:	f000 fcb4 	bl	80062ac <ILI9341_fill_rect>
		sprintf(letter, "%c", i + 5 + 32 + 5*keyboard_page); /* 32 + 5 is % char when i = 0 */
 8005944:	4936      	ldr	r1, [pc, #216]	; (8005a20 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1cc>)
 8005946:	f106 0243 	add.w	r2, r6, #67	; 0x43
 800594a:	a803      	add	r0, sp, #12
 800594c:	f009 fbd8 	bl	800f100 <siprintf>
		ILI9341_print_text(letter, x + 16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 8005950:	2302      	movs	r3, #2
 8005952:	4659      	mov	r1, fp
 8005954:	e9cd 5300 	strd	r5, r3, [sp]
 8005958:	228a      	movs	r2, #138	; 0x8a
 800595a:	2300      	movs	r3, #0
 800595c:	a803      	add	r0, sp, #12
 800595e:	f000 fdd3 	bl	8006508 <ILI9341_print_text>

		/* This show the < and > buttons */
		if (i == 0) {
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005962:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	fa5f fb86 	uxtb.w	fp, r6
 800596c:	23dc      	movs	r3, #220	; 0xdc
 800596e:	4652      	mov	r2, sl
 8005970:	21b4      	movs	r1, #180	; 0xb4
 8005972:	4648      	mov	r0, r9
		if (i == 0) {
 8005974:	b9fe      	cbnz	r6, 80059b6 <STM32_PLC_LCD_Show_Keyboard_Frame+0x162>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005976:	f000 fc99 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 800597a:	23d7      	movs	r3, #215	; 0xd7
 800597c:	4642      	mov	r2, r8
 800597e:	21b9      	movs	r1, #185	; 0xb9
 8005980:	4638      	mov	r0, r7
 8005982:	9500      	str	r5, [sp, #0]
 8005984:	f000 fc92 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
		}

		/* Give the buttons a text */
		if (i == 0) {
			ILI9341_print_text("<", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005988:	2302      	movs	r3, #2
 800598a:	4826      	ldr	r0, [pc, #152]	; (8005a24 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1d0>)
 800598c:	e9cd 5300 	strd	r5, r3, [sp]
 8005990:	22c1      	movs	r2, #193	; 0xc1
 8005992:	4633      	mov	r3, r6
 8005994:	b221      	sxth	r1, r4
	for (uint8_t i = 0; i < 5; i++) {
 8005996:	3601      	adds	r6, #1
		} else if (i == 2) {
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 3) {
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 4) {
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005998:	f000 fdb6 	bl	8006508 <ILI9341_print_text>
	for (uint8_t i = 0; i < 5; i++) {
 800599c:	343a      	adds	r4, #58	; 0x3a
 800599e:	2e05      	cmp	r6, #5
 80059a0:	b2a4      	uxth	r4, r4
 80059a2:	d18b      	bne.n	80058bc <STM32_PLC_LCD_Show_Keyboard_Frame+0x68>

		x += 35; /* Space between buttons */
	}

	/* Logic */
	return STM32_PLC_LCD_Call_Keyboard_Logic(word);
 80059a4:	ee18 0a10 	vmov	r0, s16
 80059a8:	f001 f906 	bl	8006bb8 <STM32_PLC_LCD_Call_Keyboard_Logic>
}
 80059ac:	b005      	add	sp, #20
 80059ae:	ecbd 8b02 	vpop	{d8}
 80059b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (i == 1) {
 80059b6:	f1bb 0f01 	cmp.w	fp, #1
 80059ba:	d110      	bne.n	80059de <STM32_PLC_LCD_Show_Keyboard_Frame+0x18a>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 80059bc:	f000 fc76 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 80059c0:	23d7      	movs	r3, #215	; 0xd7
 80059c2:	4642      	mov	r2, r8
 80059c4:	21b9      	movs	r1, #185	; 0xb9
 80059c6:	4638      	mov	r0, r7
 80059c8:	9500      	str	r5, [sp, #0]
 80059ca:	f000 fc6f 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_print_text(">", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 80059ce:	2302      	movs	r3, #2
 80059d0:	e9cd 5300 	strd	r5, r3, [sp]
 80059d4:	4814      	ldr	r0, [pc, #80]	; (8005a28 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1d4>)
 80059d6:	2300      	movs	r3, #0
 80059d8:	22c1      	movs	r2, #193	; 0xc1
 80059da:	b221      	sxth	r1, r4
 80059dc:	e7db      	b.n	8005996 <STM32_PLC_LCD_Show_Keyboard_Frame+0x142>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 80059de:	f000 fc65 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 80059e2:	9500      	str	r5, [sp, #0]
 80059e4:	23d7      	movs	r3, #215	; 0xd7
 80059e6:	4642      	mov	r2, r8
 80059e8:	21b9      	movs	r1, #185	; 0xb9
 80059ea:	4638      	mov	r0, r7
 80059ec:	f000 fc5e 	bl	80062ac <ILI9341_fill_rect>
		} else if (i == 2) {
 80059f0:	f1bb 0f02 	cmp.w	fp, #2
 80059f4:	d106      	bne.n	8005a04 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1b0>
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 80059f6:	e9cd 5b00 	strd	r5, fp, [sp]
 80059fa:	480c      	ldr	r0, [pc, #48]	; (8005a2c <STM32_PLC_LCD_Show_Keyboard_Frame+0x1d8>)
 80059fc:	2300      	movs	r3, #0
 80059fe:	22c1      	movs	r2, #193	; 0xc1
 8005a00:	b221      	sxth	r1, r4
 8005a02:	e7c8      	b.n	8005996 <STM32_PLC_LCD_Show_Keyboard_Frame+0x142>
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005a04:	2302      	movs	r3, #2
		} else if (i == 3) {
 8005a06:	f1bb 0f03 	cmp.w	fp, #3
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005a0a:	f1a4 0106 	sub.w	r1, r4, #6
 8005a0e:	e9cd 5300 	strd	r5, r3, [sp]
 8005a12:	bf0c      	ite	eq
 8005a14:	4806      	ldreq	r0, [pc, #24]	; (8005a30 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1dc>)
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005a16:	4807      	ldrne	r0, [pc, #28]	; (8005a34 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1e0>)
 8005a18:	b209      	sxth	r1, r1
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	22c1      	movs	r2, #193	; 0xc1
 8005a1e:	e7ba      	b.n	8005996 <STM32_PLC_LCD_Show_Keyboard_Frame+0x142>
 8005a20:	08013909 	.word	0x08013909
 8005a24:	08014848 	.word	0x08014848
 8005a28:	08013910 	.word	0x08013910
 8005a2c:	08012df3 	.word	0x08012df3
 8005a30:	0801390c 	.word	0x0801390c
 8005a34:	0801484a 	.word	0x0801484a

08005a38 <STM32_PLC_LCD_Show_Numpad_Frame>:
 */

#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Numpad_Frame(bool decimalbutton_show, bool minusbutton_show, float *number_value, char title[]) {
 8005a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	b089      	sub	sp, #36	; 0x24
 8005a3e:	e9cd 0103 	strd	r0, r1, [sp, #12]
	/* Begin with black page */
	ILI9341_fill_screen(COLOR_BLACK);
 8005a42:	2000      	movs	r0, #0
uint8_t STM32_PLC_LCD_Show_Numpad_Frame(bool decimalbutton_show, bool minusbutton_show, float *number_value, char title[]) {
 8005a44:	461c      	mov	r4, r3
 8005a46:	9205      	str	r2, [sp, #20]
	ILI9341_fill_screen(COLOR_BLACK);
 8005a48:	f000 fbfa 	bl	8006240 <ILI9341_fill_screen>

	/* Print frame - large square */
	ILI9341_hollow_rect(5, 5, 315, 235, COLOR_GREEN);
 8005a4c:	2105      	movs	r1, #5
 8005a4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005a52:	4608      	mov	r0, r1
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	f240 123b 	movw	r2, #315	; 0x13b
 8005a5a:	23eb      	movs	r3, #235	; 0xeb
 8005a5c:	f000 fcba 	bl	80063d4 <ILI9341_hollow_rect>

	/* Create gray, white square */
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 8005a60:	f647 36ef 	movw	r6, #31727	; 0x7bef
 8005a64:	2106      	movs	r1, #6
 8005a66:	4608      	mov	r0, r1
 8005a68:	9600      	str	r6, [sp, #0]
 8005a6a:	2337      	movs	r3, #55	; 0x37
 8005a6c:	f44f 729d 	mov.w	r2, #314	; 0x13a
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 8005a70:	f64f 75ff 	movw	r5, #65535	; 0xffff
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 8005a74:	f000 fc1a 	bl	80062ac <ILI9341_fill_rect>
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 8005a78:	2332      	movs	r3, #50	; 0x32
 8005a7a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005a7e:	2118      	movs	r1, #24
 8005a80:	200c      	movs	r0, #12
 8005a82:	9500      	str	r5, [sp, #0]
 8005a84:	f000 fc12 	bl	80062ac <ILI9341_fill_rect>

	/* Set title */
	ILI9341_print_text(title, 12, 12, COLOR_WHITE, COLOR_DGRAY, 1);
 8005a88:	2301      	movs	r3, #1
 8005a8a:	220c      	movs	r2, #12
 8005a8c:	e9cd 6300 	strd	r6, r3, [sp]
 8005a90:	4620      	mov	r0, r4
 8005a92:	462b      	mov	r3, r5
 8005a94:	4611      	mov	r1, r2
 8005a96:	f000 fd37 	bl	8006508 <ILI9341_print_text>
 8005a9a:	2426      	movs	r4, #38	; 0x26
 8005a9c:	2600      	movs	r6, #0
	uint16_t x = 0;
	char number[3];
	for (uint8_t i = 0; i < 5; i++) {
		x += 23;
		/* Upper numbers */
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 8005a9e:	f1a4 090f 	sub.w	r9, r4, #15
 8005aa2:	f104 0a19 	add.w	sl, r4, #25
 8005aa6:	fa0f f989 	sxth.w	r9, r9
 8005aaa:	fa0f fa8a 	sxth.w	sl, sl
 8005aae:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005ab2:	f1a4 070a 	sub.w	r7, r4, #10
 8005ab6:	f104 0814 	add.w	r8, r4, #20
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 8005aba:	f64f 75ff 	movw	r5, #65535	; 0xffff
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4652      	mov	r2, sl
 8005ac2:	236e      	movs	r3, #110	; 0x6e
 8005ac4:	2146      	movs	r1, #70	; 0x46
 8005ac6:	4648      	mov	r0, r9
 8005ac8:	b23f      	sxth	r7, r7
 8005aca:	fa0f f888 	sxth.w	r8, r8
 8005ace:	f000 fbed 	bl	80062ac <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 8005ad2:	2369      	movs	r3, #105	; 0x69
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	214b      	movs	r1, #75	; 0x4b
 8005ad8:	4638      	mov	r0, r7
 8005ada:	9500      	str	r5, [sp, #0]
 8005adc:	f000 fbe6 	bl	80062ac <ILI9341_fill_rect>
		sprintf(number, "%d", i);
 8005ae0:	f104 0b01 	add.w	fp, r4, #1
 8005ae4:	4954      	ldr	r1, [pc, #336]	; (8005c38 <STM32_PLC_LCD_Show_Numpad_Frame+0x200>)
 8005ae6:	4632      	mov	r2, r6
 8005ae8:	a807      	add	r0, sp, #28
 8005aea:	f009 fb09 	bl	800f100 <siprintf>
		ILI9341_print_text(number, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8005aee:	fa0f fb8b 	sxth.w	fp, fp
 8005af2:	2302      	movs	r3, #2
 8005af4:	4659      	mov	r1, fp
 8005af6:	e9cd 5300 	strd	r5, r3, [sp]
 8005afa:	2253      	movs	r2, #83	; 0x53
 8005afc:	2300      	movs	r3, #0
 8005afe:	a807      	add	r0, sp, #28
 8005b00:	f000 fd02 	bl	8006508 <ILI9341_print_text>

		/* Lower numbers */
		ILI9341_fill_rect(x, 125, x + 40, 165, COLOR_DGRAY);
 8005b04:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	4652      	mov	r2, sl
 8005b0c:	23a5      	movs	r3, #165	; 0xa5
 8005b0e:	217d      	movs	r1, #125	; 0x7d
 8005b10:	4648      	mov	r0, r9
 8005b12:	f000 fbcb 	bl	80062ac <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 130, x + 35, 160, COLOR_WHITE);
 8005b16:	23a0      	movs	r3, #160	; 0xa0
 8005b18:	4642      	mov	r2, r8
 8005b1a:	2182      	movs	r1, #130	; 0x82
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	9500      	str	r5, [sp, #0]
 8005b20:	f000 fbc4 	bl	80062ac <ILI9341_fill_rect>
		sprintf(number, "%d", i + 5);
 8005b24:	4944      	ldr	r1, [pc, #272]	; (8005c38 <STM32_PLC_LCD_Show_Numpad_Frame+0x200>)
 8005b26:	1d72      	adds	r2, r6, #5
 8005b28:	a807      	add	r0, sp, #28
 8005b2a:	f009 fae9 	bl	800f100 <siprintf>
		ILI9341_print_text(number, x + 16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e9cd 5300 	strd	r5, r3, [sp]
 8005b34:	4659      	mov	r1, fp
 8005b36:	2300      	movs	r3, #0
 8005b38:	228a      	movs	r2, #138	; 0x8a
 8005b3a:	a807      	add	r0, sp, #28
 8005b3c:	f000 fce4 	bl	8006508 <ILI9341_print_text>

		/* This hide or show the buttons */
		if (i == 0 && minusbutton_show == true) {
 8005b40:	fa5f fb86 	uxtb.w	fp, r6
 8005b44:	bb4e      	cbnz	r6, 8005b9a <STM32_PLC_LCD_Show_Numpad_Frame+0x162>
 8005b46:	9b04      	ldr	r3, [sp, #16]
 8005b48:	b1c3      	cbz	r3, 8005b7c <STM32_PLC_LCD_Show_Numpad_Frame+0x144>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005b4a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4652      	mov	r2, sl
 8005b52:	23dc      	movs	r3, #220	; 0xdc
 8005b54:	21b4      	movs	r1, #180	; 0xb4
 8005b56:	4648      	mov	r0, r9
 8005b58:	f000 fba8 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8005b5c:	23d7      	movs	r3, #215	; 0xd7
 8005b5e:	4642      	mov	r2, r8
 8005b60:	21b9      	movs	r1, #185	; 0xb9
 8005b62:	4638      	mov	r0, r7
 8005b64:	9500      	str	r5, [sp, #0]
 8005b66:	f000 fba1 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
		}

		/* Give the buttons a text */
		if (i == 0 && minusbutton_show == true) {
			ILI9341_print_text("-", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	4833      	ldr	r0, [pc, #204]	; (8005c3c <STM32_PLC_LCD_Show_Numpad_Frame+0x204>)
 8005b6e:	e9cd 5300 	strd	r5, r3, [sp]
 8005b72:	22c1      	movs	r2, #193	; 0xc1
 8005b74:	4633      	mov	r3, r6
 8005b76:	b221      	sxth	r1, r4
		} else if (i == 2) {
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 3) {
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 4) {
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005b78:	f000 fcc6 	bl	8006508 <ILI9341_print_text>
	for (uint8_t i = 0; i < 5; i++) {
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	343a      	adds	r4, #58	; 0x3a
 8005b80:	2e05      	cmp	r6, #5
 8005b82:	b2a4      	uxth	r4, r4
 8005b84:	d18b      	bne.n	8005a9e <STM32_PLC_LCD_Show_Numpad_Frame+0x66>
		}
		x += 35; /* Space between buttons */
	}

	/* Logic */
	*number_value = 0;
 8005b86:	9a05      	ldr	r2, [sp, #20]
 8005b88:	2300      	movs	r3, #0
	return STM32_PLC_LCD_Call_Numpad_Logic(decimalbutton_show, minusbutton_show, number_value);
 8005b8a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
	*number_value = 0;
 8005b8e:	6013      	str	r3, [r2, #0]
	return STM32_PLC_LCD_Call_Numpad_Logic(decimalbutton_show, minusbutton_show, number_value);
 8005b90:	f001 fa48 	bl	8007024 <STM32_PLC_LCD_Call_Numpad_Logic>
}
 8005b94:	b009      	add	sp, #36	; 0x24
 8005b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (i == 1 && decimalbutton_show == true) {
 8005b9a:	f1bb 0f01 	cmp.w	fp, #1
 8005b9e:	d11a      	bne.n	8005bd6 <STM32_PLC_LCD_Show_Numpad_Frame+0x19e>
 8005ba0:	9b03      	ldr	r3, [sp, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ea      	beq.n	8005b7c <STM32_PLC_LCD_Show_Numpad_Frame+0x144>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005ba6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	4652      	mov	r2, sl
 8005bae:	23dc      	movs	r3, #220	; 0xdc
 8005bb0:	21b4      	movs	r1, #180	; 0xb4
 8005bb2:	4648      	mov	r0, r9
 8005bb4:	f000 fb7a 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8005bb8:	23d7      	movs	r3, #215	; 0xd7
 8005bba:	4642      	mov	r2, r8
 8005bbc:	21b9      	movs	r1, #185	; 0xb9
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	9500      	str	r5, [sp, #0]
 8005bc2:	f000 fb73 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_print_text(".", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e9cd 5300 	strd	r5, r3, [sp]
 8005bcc:	481c      	ldr	r0, [pc, #112]	; (8005c40 <STM32_PLC_LCD_Show_Numpad_Frame+0x208>)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	22c1      	movs	r2, #193	; 0xc1
 8005bd2:	b221      	sxth	r1, r4
 8005bd4:	e7d0      	b.n	8005b78 <STM32_PLC_LCD_Show_Numpad_Frame+0x140>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005bd6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	4652      	mov	r2, sl
 8005bde:	23dc      	movs	r3, #220	; 0xdc
 8005be0:	21b4      	movs	r1, #180	; 0xb4
 8005be2:	4648      	mov	r0, r9
 8005be4:	f000 fb62 	bl	80062ac <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8005be8:	9500      	str	r5, [sp, #0]
 8005bea:	23d7      	movs	r3, #215	; 0xd7
 8005bec:	4642      	mov	r2, r8
 8005bee:	21b9      	movs	r1, #185	; 0xb9
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	f000 fb5b 	bl	80062ac <ILI9341_fill_rect>
		} else if (i == 2) {
 8005bf6:	2e02      	cmp	r6, #2
 8005bf8:	d106      	bne.n	8005c08 <STM32_PLC_LCD_Show_Numpad_Frame+0x1d0>
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005bfa:	e9cd 5600 	strd	r5, r6, [sp]
 8005bfe:	4811      	ldr	r0, [pc, #68]	; (8005c44 <STM32_PLC_LCD_Show_Numpad_Frame+0x20c>)
 8005c00:	2300      	movs	r3, #0
 8005c02:	22c1      	movs	r2, #193	; 0xc1
 8005c04:	b221      	sxth	r1, r4
 8005c06:	e7b7      	b.n	8005b78 <STM32_PLC_LCD_Show_Numpad_Frame+0x140>
		} else if (i == 3) {
 8005c08:	f1bb 0f03 	cmp.w	fp, #3
 8005c0c:	d108      	bne.n	8005c20 <STM32_PLC_LCD_Show_Numpad_Frame+0x1e8>
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005c0e:	2302      	movs	r3, #2
 8005c10:	1fa1      	subs	r1, r4, #6
 8005c12:	e9cd 5300 	strd	r5, r3, [sp]
 8005c16:	480c      	ldr	r0, [pc, #48]	; (8005c48 <STM32_PLC_LCD_Show_Numpad_Frame+0x210>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	22c1      	movs	r2, #193	; 0xc1
 8005c1c:	b209      	sxth	r1, r1
 8005c1e:	e7ab      	b.n	8005b78 <STM32_PLC_LCD_Show_Numpad_Frame+0x140>
		} else if (i == 4) {
 8005c20:	f1bb 0f04 	cmp.w	fp, #4
 8005c24:	d1aa      	bne.n	8005b7c <STM32_PLC_LCD_Show_Numpad_Frame+0x144>
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005c26:	2302      	movs	r3, #2
 8005c28:	1fa1      	subs	r1, r4, #6
 8005c2a:	e9cd 5300 	strd	r5, r3, [sp]
 8005c2e:	4807      	ldr	r0, [pc, #28]	; (8005c4c <STM32_PLC_LCD_Show_Numpad_Frame+0x214>)
 8005c30:	2300      	movs	r3, #0
 8005c32:	22c1      	movs	r2, #193	; 0xc1
 8005c34:	b209      	sxth	r1, r1
 8005c36:	e79f      	b.n	8005b78 <STM32_PLC_LCD_Show_Numpad_Frame+0x140>
 8005c38:	0801484d 	.word	0x0801484d
 8005c3c:	0801390d 	.word	0x0801390d
 8005c40:	08012e7b 	.word	0x08012e7b
 8005c44:	08012df3 	.word	0x08012df3
 8005c48:	0801390c 	.word	0x0801390c
 8005c4c:	0801484a 	.word	0x0801484a

08005c50 <add_spaces.constprop.0>:
	sprintf(text, "Date:%i-%i-%i Time:%i:%i:%i", 2000 + year, month, date, hours, minutes, seconds);
	add_spaces(43, text);
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
}

static void add_spaces(uint8_t length, char text[]){
 8005c50:	b510      	push	{r4, lr}
 8005c52:	4604      	mov	r4, r0
	/* This is for removing old values from LCD */
	for(uint8_t i = strlen(text); i < length; i++)
 8005c54:	f7fa fabc 	bl	80001d0 <strlen>
 8005c58:	b2c0      	uxtb	r0, r0
		text[i] = ' ';
 8005c5a:	282b      	cmp	r0, #43	; 0x2b
 8005c5c:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	f04f 0120 	mov.w	r1, #32
 8005c66:	bf88      	it	hi
 8005c68:	2200      	movhi	r2, #0
 8005c6a:	4420      	add	r0, r4
 8005c6c:	f008 fdd6 	bl	800e81c <memset>
	text[length] = '\0'; /* C-String termination */
 8005c70:	2300      	movs	r3, #0
 8005c72:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 8005c76:	bd10      	pop	{r4, pc}

08005c78 <STM32_PLC_LCD_Show_Plot_Frame>:
void STM32_PLC_LCD_Show_Plot_Frame() {
 8005c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	sprintf(text, "ADC0:%0.2f ADC1:%0.2f ADC2:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(0), STM32_PLC_Analog_Input_ADC_Get_Calibrated(1), STM32_PLC_Analog_Input_ADC_Get_Calibrated(2));
 8005c7c:	2000      	movs	r0, #0
void STM32_PLC_LCD_Show_Plot_Frame() {
 8005c7e:	b09a      	sub	sp, #104	; 0x68
	sprintf(text, "ADC0:%0.2f ADC1:%0.2f ADC2:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(0), STM32_PLC_Analog_Input_ADC_Get_Calibrated(1), STM32_PLC_Analog_Input_ADC_Get_Calibrated(2));
 8005c80:	f7fb f9a0 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005c84:	2001      	movs	r0, #1
 8005c86:	ee10 6a10 	vmov	r6, s0
 8005c8a:	f7fb f99b 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005c8e:	2002      	movs	r0, #2
 8005c90:	ee10 4a10 	vmov	r4, s0
 8005c94:	f7fb f996 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	ee10 5a10 	vmov	r5, s0
 8005c9e:	f7fa fc53 	bl	8000548 <__aeabi_f2d>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cac:	f7fa fc4c 	bl	8000548 <__aeabi_f2d>
 8005cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f7fa fc47 	bl	8000548 <__aeabi_f2d>
 8005cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cbe:	e9cd 0100 	strd	r0, r1, [sp]
 8005cc2:	49d0      	ldr	r1, [pc, #832]	; (8006004 <STM32_PLC_LCD_Show_Plot_Frame+0x38c>)
 8005cc4:	a80b      	add	r0, sp, #44	; 0x2c
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8005cc6:	2401      	movs	r4, #1
 8005cc8:	250f      	movs	r5, #15
	sprintf(text, "ADC0:%0.2f ADC1:%0.2f ADC2:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(0), STM32_PLC_Analog_Input_ADC_Get_Calibrated(1), STM32_PLC_Analog_Input_ADC_Get_Calibrated(2));
 8005cca:	f009 fa19 	bl	800f100 <siprintf>
	add_spaces(43, text);
 8005cce:	a80b      	add	r0, sp, #44	; 0x2c
 8005cd0:	f7ff ffbe 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8005cd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005cd8:	2223      	movs	r2, #35	; 0x23
 8005cda:	2137      	movs	r1, #55	; 0x37
 8005cdc:	a80b      	add	r0, sp, #44	; 0x2c
 8005cde:	e9cd 5400 	strd	r5, r4, [sp]
 8005ce2:	f000 fc11 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "ADC3:%0.2f ADC4:%0.2f ADC5:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(3), STM32_PLC_Analog_Input_ADC_Get_Calibrated(4), STM32_PLC_Analog_Input_ADC_Get_Calibrated(5));
 8005ce6:	2003      	movs	r0, #3
 8005ce8:	f7fb f96c 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005cec:	2004      	movs	r0, #4
 8005cee:	ee10 8a10 	vmov	r8, s0
 8005cf2:	f7fb f967 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005cf6:	2005      	movs	r0, #5
 8005cf8:	ee10 6a10 	vmov	r6, s0
 8005cfc:	f7fb f962 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005d00:	4640      	mov	r0, r8
 8005d02:	ee10 7a10 	vmov	r7, s0
 8005d06:	f7fa fc1f 	bl	8000548 <__aeabi_f2d>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4638      	mov	r0, r7
 8005d10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d14:	f7fa fc18 	bl	8000548 <__aeabi_f2d>
 8005d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7fa fc13 	bl	8000548 <__aeabi_f2d>
 8005d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d26:	e9cd 0100 	strd	r0, r1, [sp]
 8005d2a:	49b7      	ldr	r1, [pc, #732]	; (8006008 <STM32_PLC_LCD_Show_Plot_Frame+0x390>)
 8005d2c:	a80b      	add	r0, sp, #44	; 0x2c
 8005d2e:	f009 f9e7 	bl	800f100 <siprintf>
	add_spaces(43, text);
 8005d32:	a80b      	add	r0, sp, #44	; 0x2c
 8005d34:	f7ff ff8c 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8005d38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005d3c:	222d      	movs	r2, #45	; 0x2d
 8005d3e:	2137      	movs	r1, #55	; 0x37
 8005d40:	a80b      	add	r0, sp, #44	; 0x2c
 8005d42:	e9cd 5400 	strd	r5, r4, [sp]
 8005d46:	f000 fbdf 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "ADC6:%0.2f ADC7:%0.2f ADC8:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(6), STM32_PLC_Analog_Input_ADC_Get_Calibrated(7), STM32_PLC_Analog_Input_ADC_Get_Calibrated(8));
 8005d4a:	2006      	movs	r0, #6
 8005d4c:	f7fb f93a 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005d50:	2007      	movs	r0, #7
 8005d52:	ee10 8a10 	vmov	r8, s0
 8005d56:	f7fb f935 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005d5a:	2008      	movs	r0, #8
 8005d5c:	ee10 6a10 	vmov	r6, s0
 8005d60:	f7fb f930 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005d64:	4640      	mov	r0, r8
 8005d66:	ee10 7a10 	vmov	r7, s0
 8005d6a:	f7fa fbed 	bl	8000548 <__aeabi_f2d>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4638      	mov	r0, r7
 8005d74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d78:	f7fa fbe6 	bl	8000548 <__aeabi_f2d>
 8005d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d80:	4630      	mov	r0, r6
 8005d82:	f7fa fbe1 	bl	8000548 <__aeabi_f2d>
 8005d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d8a:	e9cd 0100 	strd	r0, r1, [sp]
 8005d8e:	499f      	ldr	r1, [pc, #636]	; (800600c <STM32_PLC_LCD_Show_Plot_Frame+0x394>)
 8005d90:	a80b      	add	r0, sp, #44	; 0x2c
 8005d92:	f009 f9b5 	bl	800f100 <siprintf>
	add_spaces(43, text);
 8005d96:	a80b      	add	r0, sp, #44	; 0x2c
 8005d98:	f7ff ff5a 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8005d9c:	2237      	movs	r2, #55	; 0x37
 8005d9e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005da2:	4611      	mov	r1, r2
 8005da4:	a80b      	add	r0, sp, #44	; 0x2c
 8005da6:	e9cd 5400 	strd	r5, r4, [sp]
 8005daa:	f000 fbad 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "ADC9:%0.2f ADC10:%0.2f ADC11:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(9), STM32_PLC_Analog_Input_ADC_Get_Calibrated(10), STM32_PLC_Analog_Input_ADC_Get_Calibrated(11));
 8005dae:	2009      	movs	r0, #9
 8005db0:	f7fb f908 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005db4:	200a      	movs	r0, #10
 8005db6:	ee10 8a10 	vmov	r8, s0
 8005dba:	f7fb f903 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005dbe:	200b      	movs	r0, #11
 8005dc0:	ee10 6a10 	vmov	r6, s0
 8005dc4:	f7fb f8fe 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005dc8:	4640      	mov	r0, r8
 8005dca:	ee10 7a10 	vmov	r7, s0
 8005dce:	f7fa fbbb 	bl	8000548 <__aeabi_f2d>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ddc:	f7fa fbb4 	bl	8000548 <__aeabi_f2d>
 8005de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de4:	4630      	mov	r0, r6
 8005de6:	f7fa fbaf 	bl	8000548 <__aeabi_f2d>
 8005dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dee:	e9cd 0100 	strd	r0, r1, [sp]
 8005df2:	4987      	ldr	r1, [pc, #540]	; (8006010 <STM32_PLC_LCD_Show_Plot_Frame+0x398>)
 8005df4:	a80b      	add	r0, sp, #44	; 0x2c
 8005df6:	f009 f983 	bl	800f100 <siprintf>
	add_spaces(43, text);
 8005dfa:	a80b      	add	r0, sp, #44	; 0x2c
 8005dfc:	f7ff ff28 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8005e00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005e04:	2241      	movs	r2, #65	; 0x41
 8005e06:	2137      	movs	r1, #55	; 0x37
 8005e08:	a80b      	add	r0, sp, #44	; 0x2c
 8005e0a:	e9cd 5400 	strd	r5, r4, [sp]
 8005e0e:	f000 fb7b 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "DADC0:%0.2f DADC1:%0.2f DADC2:%0.2f", STM32_PLC_Analog_Input_DADC_Get_Calibrated(0), STM32_PLC_Analog_Input_DADC_Get_Calibrated(1), STM32_PLC_Analog_Input_DADC_Get_Calibrated(2));
 8005e12:	2000      	movs	r0, #0
 8005e14:	f7fb f910 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005e18:	4620      	mov	r0, r4
 8005e1a:	ee10 8a10 	vmov	r8, s0
 8005e1e:	f7fb f90b 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005e22:	2002      	movs	r0, #2
 8005e24:	ee10 6a10 	vmov	r6, s0
 8005e28:	f7fb f906 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	ee10 7a10 	vmov	r7, s0
 8005e32:	f7fa fb89 	bl	8000548 <__aeabi_f2d>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e40:	f7fa fb82 	bl	8000548 <__aeabi_f2d>
 8005e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f7fa fb7d 	bl	8000548 <__aeabi_f2d>
 8005e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e52:	e9cd 0100 	strd	r0, r1, [sp]
 8005e56:	496f      	ldr	r1, [pc, #444]	; (8006014 <STM32_PLC_LCD_Show_Plot_Frame+0x39c>)
 8005e58:	a80b      	add	r0, sp, #44	; 0x2c
 8005e5a:	f009 f951 	bl	800f100 <siprintf>
	add_spaces(43, text);
 8005e5e:	a80b      	add	r0, sp, #44	; 0x2c
 8005e60:	f7ff fef6 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8005e64:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005e68:	224b      	movs	r2, #75	; 0x4b
 8005e6a:	2137      	movs	r1, #55	; 0x37
 8005e6c:	a80b      	add	r0, sp, #44	; 0x2c
 8005e6e:	e9cd 5400 	strd	r5, r4, [sp]
 8005e72:	f000 fb49 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "DADC3:%0.2f DADC4:%0.2f", STM32_PLC_Analog_Input_DADC_Get_Calibrated(3), STM32_PLC_Analog_Input_DADC_Get_Calibrated(4));
 8005e76:	2003      	movs	r0, #3
 8005e78:	f7fb f8de 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005e7c:	2004      	movs	r0, #4
 8005e7e:	ee10 7a10 	vmov	r7, s0
 8005e82:	f7fb f8d9 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005e86:	4638      	mov	r0, r7
 8005e88:	ee10 6a10 	vmov	r6, s0
 8005e8c:	f7fa fb5c 	bl	8000548 <__aeabi_f2d>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4630      	mov	r0, r6
 8005e96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e9a:	f7fa fb55 	bl	8000548 <__aeabi_f2d>
 8005e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ea6:	495c      	ldr	r1, [pc, #368]	; (8006018 <STM32_PLC_LCD_Show_Plot_Frame+0x3a0>)
 8005ea8:	a80b      	add	r0, sp, #44	; 0x2c
 8005eaa:	f009 f929 	bl	800f100 <siprintf>
	add_spaces(43, text);
 8005eae:	a80b      	add	r0, sp, #44	; 0x2c
 8005eb0:	f7ff fece 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8005eb4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005eb8:	2255      	movs	r2, #85	; 0x55
 8005eba:	2137      	movs	r1, #55	; 0x37
 8005ebc:	a80b      	add	r0, sp, #44	; 0x2c
 8005ebe:	e9cd 5400 	strd	r5, r4, [sp]
 8005ec2:	f000 fb21 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "DI0:%i DI1:%i DI2:%i DI3:%i DI4:%i", STM32_PLC_Digital_Input_Get(0), STM32_PLC_Digital_Input_Get(1), STM32_PLC_Digital_Input_Get(2), STM32_PLC_Digital_Input_Get(3), STM32_PLC_Digital_Input_Get(4));
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f7fb f9bc 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005ecc:	9007      	str	r0, [sp, #28]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7fb f9b8 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005ed4:	9004      	str	r0, [sp, #16]
 8005ed6:	2002      	movs	r0, #2
 8005ed8:	f7fb f9b4 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005edc:	4606      	mov	r6, r0
 8005ede:	2003      	movs	r0, #3
 8005ee0:	f7fb f9b0 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	2004      	movs	r0, #4
 8005ee8:	f7fb f9ac 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005eec:	9b04      	ldr	r3, [sp, #16]
 8005eee:	9a07      	ldr	r2, [sp, #28]
 8005ef0:	494a      	ldr	r1, [pc, #296]	; (800601c <STM32_PLC_LCD_Show_Plot_Frame+0x3a4>)
 8005ef2:	9600      	str	r6, [sp, #0]
 8005ef4:	e9cd 7001 	strd	r7, r0, [sp, #4]
 8005ef8:	a80b      	add	r0, sp, #44	; 0x2c
 8005efa:	f009 f901 	bl	800f100 <siprintf>
	add_spaces(43, text);
 8005efe:	a80b      	add	r0, sp, #44	; 0x2c
 8005f00:	f7ff fea6 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8005f04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005f08:	225f      	movs	r2, #95	; 0x5f
 8005f0a:	2137      	movs	r1, #55	; 0x37
 8005f0c:	a80b      	add	r0, sp, #44	; 0x2c
 8005f0e:	e9cd 5400 	strd	r5, r4, [sp]
 8005f12:	f000 faf9 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "DI5:%i DI6:%i DI7:%i DI8:%i DI9:%i", STM32_PLC_Digital_Input_Get(5), STM32_PLC_Digital_Input_Get(6), STM32_PLC_Digital_Input_Get(7), STM32_PLC_Digital_Input_Get(8), STM32_PLC_Digital_Input_Get(9));
 8005f16:	2005      	movs	r0, #5
 8005f18:	f7fb f994 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005f1c:	9007      	str	r0, [sp, #28]
 8005f1e:	2006      	movs	r0, #6
 8005f20:	f7fb f990 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005f24:	9004      	str	r0, [sp, #16]
 8005f26:	2007      	movs	r0, #7
 8005f28:	f7fb f98c 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	2008      	movs	r0, #8
 8005f30:	f7fb f988 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005f34:	4607      	mov	r7, r0
 8005f36:	2009      	movs	r0, #9
 8005f38:	f7fb f984 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005f3c:	9b04      	ldr	r3, [sp, #16]
 8005f3e:	9a07      	ldr	r2, [sp, #28]
 8005f40:	4937      	ldr	r1, [pc, #220]	; (8006020 <STM32_PLC_LCD_Show_Plot_Frame+0x3a8>)
 8005f42:	9600      	str	r6, [sp, #0]
 8005f44:	e9cd 7001 	strd	r7, r0, [sp, #4]
 8005f48:	a80b      	add	r0, sp, #44	; 0x2c
 8005f4a:	f009 f8d9 	bl	800f100 <siprintf>
	add_spaces(43, text);
 8005f4e:	a80b      	add	r0, sp, #44	; 0x2c
 8005f50:	f7ff fe7e 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8005f54:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005f58:	2269      	movs	r2, #105	; 0x69
 8005f5a:	2137      	movs	r1, #55	; 0x37
 8005f5c:	a80b      	add	r0, sp, #44	; 0x2c
 8005f5e:	e9cd 5400 	strd	r5, r4, [sp]
 8005f62:	f000 fad1 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "E0:%0.2f E1:%0.2f E2:%0.2f", STM32_PLC_Encoder_Get_Calibrated(0), STM32_PLC_Encoder_Get_Calibrated(1), STM32_PLC_Encoder_Get_Calibrated(2));
 8005f66:	2000      	movs	r0, #0
 8005f68:	f7fb f9ee 	bl	8001348 <STM32_PLC_Encoder_Get_Calibrated>
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	ee10 8a10 	vmov	r8, s0
 8005f72:	f7fb f9e9 	bl	8001348 <STM32_PLC_Encoder_Get_Calibrated>
 8005f76:	2002      	movs	r0, #2
 8005f78:	ee10 6a10 	vmov	r6, s0
 8005f7c:	f7fb f9e4 	bl	8001348 <STM32_PLC_Encoder_Get_Calibrated>
 8005f80:	4640      	mov	r0, r8
 8005f82:	ee10 7a10 	vmov	r7, s0
 8005f86:	f7fa fadf 	bl	8000548 <__aeabi_f2d>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4638      	mov	r0, r7
 8005f90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f94:	f7fa fad8 	bl	8000548 <__aeabi_f2d>
 8005f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7fa fad3 	bl	8000548 <__aeabi_f2d>
 8005fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fa6:	e9cd 0100 	strd	r0, r1, [sp]
 8005faa:	491e      	ldr	r1, [pc, #120]	; (8006024 <STM32_PLC_LCD_Show_Plot_Frame+0x3ac>)
 8005fac:	a80b      	add	r0, sp, #44	; 0x2c
 8005fae:	f009 f8a7 	bl	800f100 <siprintf>
	add_spaces(43, text);
 8005fb2:	a80b      	add	r0, sp, #44	; 0x2c
 8005fb4:	f7ff fe4c 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8005fb8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005fbc:	2273      	movs	r2, #115	; 0x73
 8005fbe:	2137      	movs	r1, #55	; 0x37
 8005fc0:	a80b      	add	r0, sp, #44	; 0x2c
 8005fc2:	e9cd 5400 	strd	r5, r4, [sp]
 8005fc6:	f000 fa9f 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "IC0:%0.2f IC1:%0.2f", STM32_PLC_Input_Capture_Get_Calibrated(0), STM32_PLC_Input_Capture_Get_Calibrated(1));
 8005fca:	2000      	movs	r0, #0
 8005fcc:	f7fb fc78 	bl	80018c0 <STM32_PLC_Input_Capture_Get_Calibrated>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	ee10 7a10 	vmov	r7, s0
 8005fd6:	f7fb fc73 	bl	80018c0 <STM32_PLC_Input_Capture_Get_Calibrated>
 8005fda:	4638      	mov	r0, r7
 8005fdc:	ee10 6a10 	vmov	r6, s0
 8005fe0:	f7fa fab2 	bl	8000548 <__aeabi_f2d>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4630      	mov	r0, r6
 8005fea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fee:	f7fa faab 	bl	8000548 <__aeabi_f2d>
 8005ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ff6:	e9cd 0100 	strd	r0, r1, [sp]
 8005ffa:	490b      	ldr	r1, [pc, #44]	; (8006028 <STM32_PLC_LCD_Show_Plot_Frame+0x3b0>)
 8005ffc:	a80b      	add	r0, sp, #44	; 0x2c
 8005ffe:	f009 f87f 	bl	800f100 <siprintf>
 8006002:	e013      	b.n	800602c <STM32_PLC_LCD_Show_Plot_Frame+0x3b4>
 8006004:	08014850 	.word	0x08014850
 8006008:	08014871 	.word	0x08014871
 800600c:	08014892 	.word	0x08014892
 8006010:	080148b3 	.word	0x080148b3
 8006014:	080148d6 	.word	0x080148d6
 8006018:	080148fa 	.word	0x080148fa
 800601c:	08014912 	.word	0x08014912
 8006020:	08014935 	.word	0x08014935
 8006024:	08014958 	.word	0x08014958
 8006028:	08014973 	.word	0x08014973
	add_spaces(43, text);
 800602c:	a80b      	add	r0, sp, #44	; 0x2c
 800602e:	f7ff fe0f 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8006032:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006036:	227d      	movs	r2, #125	; 0x7d
 8006038:	2137      	movs	r1, #55	; 0x37
 800603a:	a80b      	add	r0, sp, #44	; 0x2c
 800603c:	e9cd 5400 	strd	r5, r4, [sp]
 8006040:	f000 fa62 	bl	8006508 <ILI9341_print_text>
	sprintf(text, "IC2:%0.2f IC3:%0.2f", STM32_PLC_Input_Capture_Get_Calibrated(2), STM32_PLC_Input_Capture_Get_Calibrated(3));
 8006044:	2002      	movs	r0, #2
 8006046:	f7fb fc3b 	bl	80018c0 <STM32_PLC_Input_Capture_Get_Calibrated>
 800604a:	2003      	movs	r0, #3
 800604c:	ee10 7a10 	vmov	r7, s0
 8006050:	f7fb fc36 	bl	80018c0 <STM32_PLC_Input_Capture_Get_Calibrated>
 8006054:	4638      	mov	r0, r7
 8006056:	ee10 6a10 	vmov	r6, s0
 800605a:	f7fa fa75 	bl	8000548 <__aeabi_f2d>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4630      	mov	r0, r6
 8006064:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006068:	f7fa fa6e 	bl	8000548 <__aeabi_f2d>
 800606c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006070:	e9cd 0100 	strd	r0, r1, [sp]
 8006074:	4922      	ldr	r1, [pc, #136]	; (8006100 <STM32_PLC_LCD_Show_Plot_Frame+0x488>)
 8006076:	a80b      	add	r0, sp, #44	; 0x2c
 8006078:	f009 f842 	bl	800f100 <siprintf>
	add_spaces(43, text);
 800607c:	a80b      	add	r0, sp, #44	; 0x2c
 800607e:	f7ff fde7 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8006082:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006086:	a80b      	add	r0, sp, #44	; 0x2c
 8006088:	e9cd 5400 	strd	r5, r4, [sp]
 800608c:	2287      	movs	r2, #135	; 0x87
 800608e:	2137      	movs	r1, #55	; 0x37
 8006090:	f000 fa3a 	bl	8006508 <ILI9341_print_text>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 8006094:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8006098:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 800609c:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 80060a0:	f7fb fe36 	bl	8001d10 <STM32_PLC_RTC_Get_Time>
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 80060a4:	ab0a      	add	r3, sp, #40	; 0x28
 80060a6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80060aa:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 80060ae:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 80060b2:	f7fb fdfd 	bl	8001cb0 <STM32_PLC_RTC_Get_Date>
	sprintf(text, "Date:%i-%i-%i Time:%i:%i:%i", 2000 + year, month, date, hours, minutes, seconds);
 80060b6:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80060ba:	9303      	str	r3, [sp, #12]
 80060bc:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80060c0:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80060c4:	9302      	str	r3, [sp, #8]
 80060c6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80060ca:	9301      	str	r3, [sp, #4]
 80060cc:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80060d0:	490c      	ldr	r1, [pc, #48]	; (8006104 <STM32_PLC_LCD_Show_Plot_Frame+0x48c>)
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80060d8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80060dc:	a80b      	add	r0, sp, #44	; 0x2c
 80060de:	f009 f80f 	bl	800f100 <siprintf>
	add_spaces(43, text);
 80060e2:	a80b      	add	r0, sp, #44	; 0x2c
 80060e4:	f7ff fdb4 	bl	8005c50 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 80060e8:	e9cd 5400 	strd	r5, r4, [sp]
 80060ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80060f0:	2291      	movs	r2, #145	; 0x91
 80060f2:	2137      	movs	r1, #55	; 0x37
 80060f4:	a80b      	add	r0, sp, #44	; 0x2c
 80060f6:	f000 fa07 	bl	8006508 <ILI9341_print_text>
}
 80060fa:	b01a      	add	sp, #104	; 0x68
 80060fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006100:	08014987 	.word	0x08014987
 8006104:	0801352f 	.word	0x0801352f

08006108 <STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame>:
 */

#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"

void STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame() {
 8006108:	b507      	push	{r0, r1, r2, lr}
	ILI9341_set_rotation(2);
 800610a:	2002      	movs	r0, #2
 800610c:	f000 facc 	bl	80066a8 <ILI9341_set_rotation>
	ILI9341_fill_screen(COLOR_WHITE);
 8006110:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006114:	f000 f894 	bl	8006240 <ILI9341_fill_screen>
	ILI9341_print_text("Hold screen for calibration", 80, 120, COLOR_BLACK, COLOR_WHITE, 1);
 8006118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800611c:	2201      	movs	r2, #1
 800611e:	e9cd 3200 	strd	r3, r2, [sp]
 8006122:	4804      	ldr	r0, [pc, #16]	; (8006134 <STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame+0x2c>)
 8006124:	2300      	movs	r3, #0
 8006126:	2278      	movs	r2, #120	; 0x78
 8006128:	2150      	movs	r1, #80	; 0x50
 800612a:	f000 f9ed 	bl	8006508 <ILI9341_print_text>
}
 800612e:	b003      	add	sp, #12
 8006130:	f85d fb04 	ldr.w	pc, [sp], #4
 8006134:	0801499b 	.word	0x0801499b

08006138 <ILI9341_send_data>:

/* This is 240*320 divided by 12 and it's used for transferring data */
static uint8_t SPI_DATA[6400];

/* Write data to LCD with one byte */
void ILI9341_send_data(uint8_t data) {
 8006138:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 800613a:	4c0b      	ldr	r4, [pc, #44]	; (8006168 <ILI9341_send_data+0x30>)
void ILI9341_send_data(uint8_t data) {
 800613c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8006140:	89a1      	ldrh	r1, [r4, #12]
 8006142:	68a0      	ldr	r0, [r4, #8]
 8006144:	2200      	movs	r2, #0
 8006146:	f003 fb43 	bl	80097d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd.lcdSpi, &data, 1, 5);
 800614a:	2305      	movs	r3, #5
 800614c:	f10d 0107 	add.w	r1, sp, #7
 8006150:	6860      	ldr	r0, [r4, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f005 fc4e 	bl	800b9f4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 8006158:	89a1      	ldrh	r1, [r4, #12]
 800615a:	68a0      	ldr	r0, [r4, #8]
 800615c:	2201      	movs	r2, #1
 800615e:	f003 fb37 	bl	80097d0 <HAL_GPIO_WritePin>
}
 8006162:	b002      	add	sp, #8
 8006164:	bd10      	pop	{r4, pc}
 8006166:	bf00      	nop
 8006168:	20002728 	.word	0x20002728

0800616c <ILI9341_send_data_array>:

/* Write data to LCD with array of bytes */
void ILI9341_send_data_array(uint8_t data[], uint16_t size) {
 800616c:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 800616e:	4c0a      	ldr	r4, [pc, #40]	; (8006198 <ILI9341_send_data_array+0x2c>)
void ILI9341_send_data_array(uint8_t data[], uint16_t size) {
 8006170:	4605      	mov	r5, r0
 8006172:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8006174:	68a0      	ldr	r0, [r4, #8]
 8006176:	89a1      	ldrh	r1, [r4, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f003 fb29 	bl	80097d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd.lcdSpi, data, size, 100);
 800617e:	4632      	mov	r2, r6
 8006180:	4629      	mov	r1, r5
 8006182:	6860      	ldr	r0, [r4, #4]
 8006184:	2364      	movs	r3, #100	; 0x64
 8006186:	f005 fc35 	bl	800b9f4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 800618a:	89a1      	ldrh	r1, [r4, #12]
 800618c:	68a0      	ldr	r0, [r4, #8]
 800618e:	2201      	movs	r2, #1
}
 8006190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 8006194:	f003 bb1c 	b.w	80097d0 <HAL_GPIO_WritePin>
 8006198:	20002728 	.word	0x20002728

0800619c <ILI9341_send_command>:

/* Write Command to LCD */
void ILI9341_send_command(uint8_t com) {
 800619c:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_RESET);
 800619e:	4c10      	ldr	r4, [pc, #64]	; (80061e0 <ILI9341_send_command+0x44>)
void ILI9341_send_command(uint8_t com) {
 80061a0:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_RESET);
 80061a4:	8aa1      	ldrh	r1, [r4, #20]
 80061a6:	6920      	ldr	r0, [r4, #16]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f003 fb11 	bl	80097d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 80061ae:	89a1      	ldrh	r1, [r4, #12]
 80061b0:	68a0      	ldr	r0, [r4, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f003 fb0c 	bl	80097d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd.lcdSpi, &com, 1, 5);
 80061b8:	2305      	movs	r3, #5
 80061ba:	f10d 0107 	add.w	r1, sp, #7
 80061be:	6860      	ldr	r0, [r4, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f005 fc17 	bl	800b9f4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 80061c6:	89a1      	ldrh	r1, [r4, #12]
 80061c8:	68a0      	ldr	r0, [r4, #8]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f003 fb00 	bl	80097d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 80061d0:	8aa1      	ldrh	r1, [r4, #20]
 80061d2:	6920      	ldr	r0, [r4, #16]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f003 fafb 	bl	80097d0 <HAL_GPIO_WritePin>
}
 80061da:	b002      	add	sp, #8
 80061dc:	bd10      	pop	{r4, pc}
 80061de:	bf00      	nop
 80061e0:	20002728 	.word	0x20002728

080061e4 <ILI9341_set_cursor_position>:

/* Set cursor position */
static void ILI9341_set_cursor_position(int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 80061e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061e6:	4607      	mov	r7, r0
	ILI9341_send_command(ILI9341_COLUMN_ADDR);
 80061e8:	202a      	movs	r0, #42	; 0x2a
static void ILI9341_set_cursor_position(int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 80061ea:	4616      	mov	r6, r2
 80061ec:	460d      	mov	r5, r1
 80061ee:	461c      	mov	r4, r3
	ILI9341_send_command(ILI9341_COLUMN_ADDR);
 80061f0:	f7ff ffd4 	bl	800619c <ILI9341_send_command>
	uint8_t data[4] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
	ILI9341_send_data_array(data, 4);
 80061f4:	2104      	movs	r1, #4
	uint8_t data[4] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 80061f6:	123b      	asrs	r3, r7, #8
	ILI9341_send_data_array(data, 4);
 80061f8:	eb0d 0001 	add.w	r0, sp, r1
	uint8_t data[4] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 80061fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8006200:	1233      	asrs	r3, r6, #8
 8006202:	f88d 3006 	strb.w	r3, [sp, #6]
 8006206:	f88d 7005 	strb.w	r7, [sp, #5]
 800620a:	f88d 6007 	strb.w	r6, [sp, #7]
	ILI9341_send_data_array(data, 4);
 800620e:	f7ff ffad 	bl	800616c <ILI9341_send_data_array>

	ILI9341_send_command(ILI9341_PAGE_ADDR);
 8006212:	202b      	movs	r0, #43	; 0x2b
 8006214:	f7ff ffc2 	bl	800619c <ILI9341_send_command>
	data[0] = y1 >> 8;
	data[1] = y1 & 0xFF;
	data[2] = y2 >> 8;
	data[3] = y2 & 0xFF;
	ILI9341_send_data_array(data, 4);
 8006218:	2104      	movs	r1, #4
	data[0] = y1 >> 8;
 800621a:	122b      	asrs	r3, r5, #8
	ILI9341_send_data_array(data, 4);
 800621c:	eb0d 0001 	add.w	r0, sp, r1
	data[0] = y1 >> 8;
 8006220:	f88d 3004 	strb.w	r3, [sp, #4]
	data[2] = y2 >> 8;
 8006224:	1223      	asrs	r3, r4, #8
 8006226:	f88d 3006 	strb.w	r3, [sp, #6]
	data[1] = y1 & 0xFF;
 800622a:	f88d 5005 	strb.w	r5, [sp, #5]
	data[3] = y2 & 0xFF;
 800622e:	f88d 4007 	strb.w	r4, [sp, #7]
	ILI9341_send_data_array(data, 4);
 8006232:	f7ff ff9b 	bl	800616c <ILI9341_send_data_array>
	ILI9341_send_command(ILI9341_GRAM);
 8006236:	202c      	movs	r0, #44	; 0x2c
 8006238:	f7ff ffb0 	bl	800619c <ILI9341_send_command>
}
 800623c:	b003      	add	sp, #12
 800623e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006240 <ILI9341_fill_screen>:

	return pixels_added_into_data;
}

/* Fill the entire screen with a background color */
void ILI9341_fill_screen(uint16_t color) {
 8006240:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t n = ILI9341_PIXEL_COUNT;
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 8006242:	4b18      	ldr	r3, [pc, #96]	; (80062a4 <ILI9341_fill_screen+0x64>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800624a:	2a01      	cmp	r2, #1
void ILI9341_fill_screen(uint16_t color) {
 800624c:	4604      	mov	r4, r0
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 800624e:	d121      	bne.n	8006294 <ILI9341_fill_screen+0x54>
		ILI9341_set_cursor_position(0, 0, ILI9341_WIDTH - 1, ILI9341_HEIGHT - 1);
 8006250:	f240 133f 	movw	r3, #319	; 0x13f
 8006254:	22ef      	movs	r2, #239	; 0xef
	} else if (lcd.rotationNum == 2 || lcd.rotationNum == 4) {
		ILI9341_set_cursor_position(0, 0, ILI9341_HEIGHT - 1, ILI9341_WIDTH - 1);
 8006256:	2100      	movs	r1, #0
 8006258:	4608      	mov	r0, r1
 800625a:	f7ff ffc3 	bl	80061e4 <ILI9341_set_cursor_position>
	}
	uint8_t color_16_bit[2] = {color >> 8, color};
 800625e:	0a23      	lsrs	r3, r4, #8
 8006260:	f88d 3004 	strb.w	r3, [sp, #4]
 8006264:	f88d 4005 	strb.w	r4, [sp, #5]
	for(uint16_t i = 0; i < iterations; i++){
 8006268:	f8bd 1004 	ldrh.w	r1, [sp, #4]
		memcpy(data, pixel_data, 2);
 800626c:	4a0e      	ldr	r2, [pc, #56]	; (80062a8 <ILI9341_fill_screen+0x68>)
	uint8_t color_16_bit[2] = {color >> 8, color};
 800626e:	2300      	movs	r3, #0
		memcpy(data, pixel_data, 2);
 8006270:	5299      	strh	r1, [r3, r2]
	for(uint16_t i = 0; i < iterations; i++){
 8006272:	3302      	adds	r3, #2
 8006274:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8006278:	d1fa      	bne.n	8006270 <ILI9341_fill_screen+0x30>
	uint16_t size_of_SPI_DATA = sizeof(SPI_DATA);
	ILI9341_insert_color_data(SPI_DATA, size_of_SPI_DATA/2, color_16_bit);
	/* Begin with the first iterations. 2 times N pixels because it's 16-bit pixels, not 8-bit pixels */
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
	for(uint8_t i = 0; i < iterations; i++)
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 800627a:	4d0b      	ldr	r5, [pc, #44]	; (80062a8 <ILI9341_fill_screen+0x68>)
 800627c:	2430      	movs	r4, #48	; 0x30
 800627e:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006282:	4628      	mov	r0, r5
	for(uint8_t i = 0; i < iterations; i++)
 8006284:	3c01      	subs	r4, #1
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 8006286:	f7ff ff71 	bl	800616c <ILI9341_send_data_array>
	for(uint8_t i = 0; i < iterations; i++)
 800628a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800628e:	d1f6      	bne.n	800627e <ILI9341_fill_screen+0x3e>

	/* Send the remaining */
	uint16_t remaning_bytes = (2*n) % (size_of_SPI_DATA/2);
	if(remaning_bytes > 0)
		ILI9341_send_data_array(SPI_DATA, remaning_bytes);
}
 8006290:	b003      	add	sp, #12
 8006292:	bd30      	pop	{r4, r5, pc}
	} else if (lcd.rotationNum == 2 || lcd.rotationNum == 4) {
 8006294:	2b02      	cmp	r3, #2
 8006296:	d001      	beq.n	800629c <ILI9341_fill_screen+0x5c>
 8006298:	2b04      	cmp	r3, #4
 800629a:	d1e0      	bne.n	800625e <ILI9341_fill_screen+0x1e>
		ILI9341_set_cursor_position(0, 0, ILI9341_HEIGHT - 1, ILI9341_WIDTH - 1);
 800629c:	23ef      	movs	r3, #239	; 0xef
 800629e:	f240 123f 	movw	r2, #319	; 0x13f
 80062a2:	e7d8      	b.n	8006256 <ILI9341_fill_screen+0x16>
 80062a4:	20002728 	.word	0x20002728
 80062a8:	200007a8 	.word	0x200007a8

080062ac <ILI9341_fill_rect>:

/* Create filled rectangle */
void ILI9341_fill_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80062ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 80062ae:	1c5d      	adds	r5, r3, #1
 80062b0:	1a16      	subs	r6, r2, r0
 80062b2:	1a6c      	subs	r4, r5, r1
void ILI9341_fill_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80062b4:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 80062b8:	fb06 4404 	mla	r4, r6, r4, r4
	if (n > ILI9341_PIXEL_COUNT)
 80062bc:	f5b4 3f96 	cmp.w	r4, #76800	; 0x12c00
 80062c0:	bf28      	it	cs
 80062c2:	f44f 3496 	movcs.w	r4, #76800	; 0x12c00
		n = ILI9341_PIXEL_COUNT;
	ILI9341_set_cursor_position(x0, y0, x1, y1);
 80062c6:	f7ff ff8d 	bl	80061e4 <ILI9341_set_cursor_position>
	uint8_t color_16_bit[2] = {color >> 8, color};
 80062ca:	0a3b      	lsrs	r3, r7, #8
 80062cc:	f88d 3004 	strb.w	r3, [sp, #4]
 80062d0:	f88d 7005 	strb.w	r7, [sp, #5]
	for(uint16_t i = 0; i < iterations; i++){
 80062d4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
		memcpy(data, pixel_data, 2);
 80062d8:	4a14      	ldr	r2, [pc, #80]	; (800632c <ILI9341_fill_rect+0x80>)
	uint8_t color_16_bit[2] = {color >> 8, color};
 80062da:	2300      	movs	r3, #0
		memcpy(data, pixel_data, 2);
 80062dc:	5299      	strh	r1, [r3, r2]
	for(uint16_t i = 0; i < iterations; i++){
 80062de:	3302      	adds	r3, #2
 80062e0:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80062e4:	d1fa      	bne.n	80062dc <ILI9341_fill_rect+0x30>
	uint16_t size_of_SPI_DATA = sizeof(SPI_DATA);
	ILI9341_insert_color_data(SPI_DATA, size_of_SPI_DATA/2, color_16_bit);
	/* Begin with the first iterations. 2 times N pixels because it's 16-bit pixels, not 8-bit pixels */
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
	for(uint8_t i = 0; i < iterations; i++)
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 80062e6:	4f11      	ldr	r7, [pc, #68]	; (800632c <ILI9341_fill_rect+0x80>)
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
 80062e8:	0064      	lsls	r4, r4, #1
 80062ea:	f44f 6548 	mov.w	r5, #3200	; 0xc80
	for(uint8_t i = 0; i < iterations; i++)
 80062ee:	2600      	movs	r6, #0
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
 80062f0:	fbb4 f5f5 	udiv	r5, r4, r5
 80062f4:	b2ed      	uxtb	r5, r5
	for(uint8_t i = 0; i < iterations; i++)
 80062f6:	b2f3      	uxtb	r3, r6
 80062f8:	429d      	cmp	r5, r3
 80062fa:	d80d      	bhi.n	8006318 <ILI9341_fill_rect+0x6c>

	/* Send the remaining */
	uint16_t remaning_bytes = (2*n) % (size_of_SPI_DATA/2);
 80062fc:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8006300:	fbb4 f3f1 	udiv	r3, r4, r1
 8006304:	fb01 4113 	mls	r1, r1, r3, r4
	if(remaning_bytes > 0)
 8006308:	b169      	cbz	r1, 8006326 <ILI9341_fill_rect+0x7a>
		ILI9341_send_data_array(SPI_DATA, remaning_bytes);
 800630a:	4808      	ldr	r0, [pc, #32]	; (800632c <ILI9341_fill_rect+0x80>)
 800630c:	b289      	uxth	r1, r1
}
 800630e:	b003      	add	sp, #12
 8006310:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		ILI9341_send_data_array(SPI_DATA, remaning_bytes);
 8006314:	f7ff bf2a 	b.w	800616c <ILI9341_send_data_array>
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 8006318:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800631c:	4638      	mov	r0, r7
 800631e:	f7ff ff25 	bl	800616c <ILI9341_send_data_array>
	for(uint8_t i = 0; i < iterations; i++)
 8006322:	3601      	adds	r6, #1
 8006324:	e7e7      	b.n	80062f6 <ILI9341_fill_rect+0x4a>
}
 8006326:	b003      	add	sp, #12
 8006328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800632a:	bf00      	nop
 800632c:	200007a8 	.word	0x200007a8

08006330 <ILI9341_draw_horizontal_line>:
		}
	}
}

/* Draw a fast horizontal line */
void ILI9341_draw_horizontal_line(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8006330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006332:	4615      	mov	r5, r2
	uint8_t color_16_bit[2] = {color >> 8, color};
 8006334:	0a1a      	lsrs	r2, r3, #8
void ILI9341_draw_horizontal_line(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8006336:	4604      	mov	r4, r0
	uint8_t color_16_bit[2] = {color >> 8, color};
 8006338:	f88d 2004 	strb.w	r2, [sp, #4]
 800633c:	f88d 3005 	strb.w	r3, [sp, #5]
	ILI9341_insert_color_data(SPI_DATA, x + w - 1, color_16_bit);
 8006340:	1e68      	subs	r0, r5, #1
 8006342:	4420      	add	r0, r4
 8006344:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8006348:	4a0d      	ldr	r2, [pc, #52]	; (8006380 <ILI9341_draw_horizontal_line+0x50>)
void ILI9341_draw_horizontal_line(int16_t x, int16_t y, int16_t w, uint16_t color) {
 800634a:	460e      	mov	r6, r1
	ILI9341_insert_color_data(SPI_DATA, x + w - 1, color_16_bit);
 800634c:	b280      	uxth	r0, r0
 800634e:	2300      	movs	r3, #0
	for(uint16_t i = 0; i < iterations; i++){
 8006350:	b299      	uxth	r1, r3
 8006352:	4288      	cmp	r0, r1
 8006354:	d80f      	bhi.n	8006376 <ILI9341_draw_horizontal_line+0x46>
	ILI9341_set_cursor_position(x, y, x + w - 1, y);
 8006356:	b202      	sxth	r2, r0
 8006358:	4631      	mov	r1, r6
 800635a:	4620      	mov	r0, r4
 800635c:	4633      	mov	r3, r6
 800635e:	f7ff ff41 	bl	80061e4 <ILI9341_set_cursor_position>
	ILI9341_send_data_array(SPI_DATA, 2*(x + w - 1));
 8006362:	1961      	adds	r1, r4, r5
 8006364:	3901      	subs	r1, #1
 8006366:	4806      	ldr	r0, [pc, #24]	; (8006380 <ILI9341_draw_horizontal_line+0x50>)
 8006368:	0049      	lsls	r1, r1, #1
 800636a:	b289      	uxth	r1, r1
}
 800636c:	b003      	add	sp, #12
 800636e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ILI9341_send_data_array(SPI_DATA, 2*(x + w - 1));
 8006372:	f7ff befb 	b.w	800616c <ILI9341_send_data_array>
		memcpy(data, pixel_data, 2);
 8006376:	f822 7b02 	strh.w	r7, [r2], #2
	for(uint16_t i = 0; i < iterations; i++){
 800637a:	3301      	adds	r3, #1
 800637c:	e7e8      	b.n	8006350 <ILI9341_draw_horizontal_line+0x20>
 800637e:	bf00      	nop
 8006380:	200007a8 	.word	0x200007a8

08006384 <ILI9341_draw_vertical_line>:

/* Draw vertical line */
void ILI9341_draw_vertical_line(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8006384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006386:	4615      	mov	r5, r2
	uint8_t color_16_bit[2] = {color >> 8, color};
 8006388:	0a1a      	lsrs	r2, r3, #8
 800638a:	f88d 2004 	strb.w	r2, [sp, #4]
 800638e:	f88d 3005 	strb.w	r3, [sp, #5]
	ILI9341_insert_color_data(SPI_DATA, y + h - 1, color_16_bit);
 8006392:	1e6b      	subs	r3, r5, #1
 8006394:	440b      	add	r3, r1
void ILI9341_draw_vertical_line(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8006396:	460c      	mov	r4, r1
 8006398:	f8bd 7004 	ldrh.w	r7, [sp, #4]
	ILI9341_insert_color_data(SPI_DATA, y + h - 1, color_16_bit);
 800639c:	490c      	ldr	r1, [pc, #48]	; (80063d0 <ILI9341_draw_vertical_line+0x4c>)
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2200      	movs	r2, #0
	for(uint16_t i = 0; i < iterations; i++){
 80063a2:	b296      	uxth	r6, r2
 80063a4:	42b3      	cmp	r3, r6
 80063a6:	d80e      	bhi.n	80063c6 <ILI9341_draw_vertical_line+0x42>
	ILI9341_set_cursor_position(x, y, x, y + h - 1);
 80063a8:	4602      	mov	r2, r0
 80063aa:	4621      	mov	r1, r4
 80063ac:	b21b      	sxth	r3, r3
 80063ae:	f7ff ff19 	bl	80061e4 <ILI9341_set_cursor_position>
	ILI9341_send_data_array(SPI_DATA, 2*(y + h - 1));
 80063b2:	1961      	adds	r1, r4, r5
 80063b4:	3901      	subs	r1, #1
 80063b6:	4806      	ldr	r0, [pc, #24]	; (80063d0 <ILI9341_draw_vertical_line+0x4c>)
 80063b8:	0049      	lsls	r1, r1, #1
 80063ba:	b289      	uxth	r1, r1
}
 80063bc:	b003      	add	sp, #12
 80063be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ILI9341_send_data_array(SPI_DATA, 2*(y + h - 1));
 80063c2:	f7ff bed3 	b.w	800616c <ILI9341_send_data_array>
		memcpy(data, pixel_data, 2);
 80063c6:	f821 7b02 	strh.w	r7, [r1], #2
	for(uint16_t i = 0; i < iterations; i++){
 80063ca:	3201      	adds	r2, #1
 80063cc:	e7e9      	b.n	80063a2 <ILI9341_draw_vertical_line+0x1e>
 80063ce:	bf00      	nop
 80063d0:	200007a8 	.word	0x200007a8

080063d4 <ILI9341_hollow_rect>:
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80063d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80063d8:	4698      	mov	r8, r3
	int16_t v = y1 - y0 + 1;
 80063da:	eba8 0401 	sub.w	r4, r8, r1
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80063de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80063e2:	4617      	mov	r7, r2
	int16_t h = x1 - x0;
 80063e4:	1a12      	subs	r2, r2, r0
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80063e6:	4606      	mov	r6, r0
	int16_t h = x1 - x0;
 80063e8:	b212      	sxth	r2, r2
	int16_t v = y1 - y0 + 1;
 80063ea:	3401      	adds	r4, #1
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80063ec:	460d      	mov	r5, r1
	ILI9341_draw_horizontal_line(x0, y0, h, color);
 80063ee:	e9cd 3200 	strd	r3, r2, [sp]
	int16_t v = y1 - y0 + 1;
 80063f2:	b224      	sxth	r4, r4
	ILI9341_draw_horizontal_line(x0, y0, h, color);
 80063f4:	f7ff ff9c 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_draw_horizontal_line(x0, y1, h, color);
 80063f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80063fc:	4641      	mov	r1, r8
 80063fe:	4630      	mov	r0, r6
 8006400:	f7ff ff96 	bl	8006330 <ILI9341_draw_horizontal_line>
	ILI9341_draw_vertical_line(x0, y0, v, color);
 8006404:	9b00      	ldr	r3, [sp, #0]
 8006406:	4622      	mov	r2, r4
 8006408:	4629      	mov	r1, r5
 800640a:	4630      	mov	r0, r6
 800640c:	f7ff ffba 	bl	8006384 <ILI9341_draw_vertical_line>
	ILI9341_draw_vertical_line(x1, y0, v, color);
 8006410:	9b00      	ldr	r3, [sp, #0]
 8006412:	4622      	mov	r2, r4
 8006414:	4629      	mov	r1, r5
 8006416:	4638      	mov	r0, r7
}
 8006418:	b002      	add	sp, #8
 800641a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ILI9341_draw_vertical_line(x1, y0, v, color);
 800641e:	f7ff bfb1 	b.w	8006384 <ILI9341_draw_vertical_line>

08006422 <ILI9341_fill_circle>:
void ILI9341_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8006422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006426:	b087      	sub	sp, #28
 8006428:	4614      	mov	r4, r2
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 800642a:	b28a      	uxth	r2, r1
 800642c:	9203      	str	r2, [sp, #12]
 800642e:	b2a7      	uxth	r7, r4
 8006430:	9903      	ldr	r1, [sp, #12]
 8006432:	007a      	lsls	r2, r7, #1
 8006434:	1bc9      	subs	r1, r1, r7
	int16_t f = 1 - r;
 8006436:	f1c7 0501 	rsb	r5, r7, #1
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 800643a:	3201      	adds	r2, #1
	int16_t ddF_y = -2 * r;
 800643c:	ebc7 37c7 	rsb	r7, r7, r7, lsl #15
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 8006440:	b212      	sxth	r2, r2
 8006442:	b209      	sxth	r1, r1
	int16_t ddF_y = -2 * r;
 8006444:	007f      	lsls	r7, r7, #1
void ILI9341_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8006446:	4680      	mov	r8, r0
 8006448:	461e      	mov	r6, r3
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 800644a:	f7ff ff9b 	bl	8006384 <ILI9341_draw_vertical_line>
	int16_t ddF_y = -2 * r;
 800644e:	b23b      	sxth	r3, r7
 8006450:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	9304      	str	r3, [sp, #16]
			ILI9341_draw_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 8006456:	fa1f f388 	uxth.w	r3, r8
	int16_t f = 1 - r;
 800645a:	b22d      	sxth	r5, r5
			ILI9341_draw_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 800645c:	9302      	str	r3, [sp, #8]
	while (x < y) {
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	429c      	cmp	r4, r3
 8006462:	dc02      	bgt.n	800646a <ILI9341_fill_circle+0x48>
}
 8006464:	b007      	add	sp, #28
 8006466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (f >= 0) {
 800646a:	2d00      	cmp	r5, #0
 800646c:	db08      	blt.n	8006480 <ILI9341_fill_circle+0x5e>
			ddF_y += 2;
 800646e:	9b05      	ldr	r3, [sp, #20]
 8006470:	3302      	adds	r3, #2
			y--;
 8006472:	3c01      	subs	r4, #1
			ddF_y += 2;
 8006474:	b21a      	sxth	r2, r3
			f += ddF_y;
 8006476:	fa15 f583 	uxtah	r5, r5, r3
			y--;
 800647a:	b224      	sxth	r4, r4
			ddF_y += 2;
 800647c:	9205      	str	r2, [sp, #20]
			f += ddF_y;
 800647e:	b22d      	sxth	r5, r5
		x++;
 8006480:	9b04      	ldr	r3, [sp, #16]
 8006482:	3301      	adds	r3, #1
 8006484:	b29f      	uxth	r7, r3
 8006486:	b21b      	sxth	r3, r3
 8006488:	9304      	str	r3, [sp, #16]
		ddF_x += 2;
 800648a:	007b      	lsls	r3, r7, #1
 800648c:	3301      	adds	r3, #1
 800648e:	fa1f fa83 	uxth.w	sl, r3
		f += ddF_x;
 8006492:	fa15 f583 	uxtah	r5, r5, r3
			ILI9341_draw_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 8006496:	b2a3      	uxth	r3, r4
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	9a01      	ldr	r2, [sp, #4]
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80064a2:	eba3 0b02 	sub.w	fp, r3, r2
 80064a6:	9b02      	ldr	r3, [sp, #8]
 80064a8:	f108 0801 	add.w	r8, r8, #1
 80064ac:	fa0f fb8b 	sxth.w	fp, fp
 80064b0:	fa0f f888 	sxth.w	r8, r8
 80064b4:	19d8      	adds	r0, r3, r7
 80064b6:	4642      	mov	r2, r8
 80064b8:	4633      	mov	r3, r6
 80064ba:	4659      	mov	r1, fp
 80064bc:	b200      	sxth	r0, r0
 80064be:	f7ff ff61 	bl	8006384 <ILI9341_draw_vertical_line>
 80064c2:	9b03      	ldr	r3, [sp, #12]
 80064c4:	eba3 0907 	sub.w	r9, r3, r7
			ILI9341_draw_vertical_line(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 80064c8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80064cc:	fa0f f989 	sxth.w	r9, r9
 80064d0:	fa0f fa8a 	sxth.w	sl, sl
 80064d4:	1898      	adds	r0, r3, r2
 80064d6:	4649      	mov	r1, r9
 80064d8:	4633      	mov	r3, r6
 80064da:	4652      	mov	r2, sl
 80064dc:	b200      	sxth	r0, r0
 80064de:	f7ff ff51 	bl	8006384 <ILI9341_draw_vertical_line>
			ILI9341_draw_vertical_line(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 80064e2:	9b02      	ldr	r3, [sp, #8]
 80064e4:	1bd8      	subs	r0, r3, r7
 80064e6:	4642      	mov	r2, r8
 80064e8:	4633      	mov	r3, r6
 80064ea:	4659      	mov	r1, fp
 80064ec:	b200      	sxth	r0, r0
 80064ee:	f7ff ff49 	bl	8006384 <ILI9341_draw_vertical_line>
			ILI9341_draw_vertical_line(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 80064f2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80064f6:	1a98      	subs	r0, r3, r2
 80064f8:	4649      	mov	r1, r9
 80064fa:	4633      	mov	r3, r6
 80064fc:	4652      	mov	r2, sl
 80064fe:	b200      	sxth	r0, r0
		f += ddF_x;
 8006500:	b22d      	sxth	r5, r5
			ILI9341_draw_vertical_line(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8006502:	f7ff ff3f 	bl	8006384 <ILI9341_draw_vertical_line>
 8006506:	e7aa      	b.n	800645e <ILI9341_fill_circle+0x3c>

08006508 <ILI9341_print_text>:
		ILI9341_draw_horizontal_line(a, y, b - a + 1, color);
	}
}

/* Print a string */
void ILI9341_print_text(char text[], int16_t x0, int16_t y0, uint16_t font_color, uint16_t background_color, uint8_t font_size) {
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	4617      	mov	r7, r2
	/* Quick check */
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 800650e:	4a63      	ldr	r2, [pc, #396]	; (800669c <ILI9341_print_text+0x194>)
 8006510:	7812      	ldrb	r2, [r2, #0]
void ILI9341_print_text(char text[], int16_t x0, int16_t y0, uint16_t font_color, uint16_t background_color, uint8_t font_size) {
 8006512:	b087      	sub	sp, #28
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 8006514:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8006518:	2a01      	cmp	r2, #1
void ILI9341_print_text(char text[], int16_t x0, int16_t y0, uint16_t font_color, uint16_t background_color, uint8_t font_size) {
 800651a:	460e      	mov	r6, r1
 800651c:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 8006520:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 8006524:	d146      	bne.n	80065b4 <ILI9341_print_text+0xac>
		if ((x0 >= ILI9341_WIDTH) || // Clip right
 8006526:	2eef      	cmp	r6, #239	; 0xef
 8006528:	f300 80b5 	bgt.w	8006696 <ILI9341_print_text+0x18e>
 800652c:	f5b7 7fa0 	cmp.w	r7, #320	; 0x140
 8006530:	f280 80b1 	bge.w	8006696 <ILI9341_print_text+0x18e>
				(y0 >= ILI9341_HEIGHT) || // Clip bottom
				((x0 + 6 * font_size - 1) < 0) || // Clip left
 8006534:	2206      	movs	r2, #6
 8006536:	fb12 6204 	smlabb	r2, r2, r4, r6
				(y0 >= ILI9341_HEIGHT) || // Clip bottom
 800653a:	2a00      	cmp	r2, #0
 800653c:	f340 80ab 	ble.w	8006696 <ILI9341_print_text+0x18e>
				((y0 + 8 * font_size - 1) < 0))   // Clip top
 8006540:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
			return;
	} else {
		if ((y0 >= ILI9341_WIDTH) || // Clip right
				(x0 >= ILI9341_HEIGHT) || // Clip bottom
				((y0 + 6 * font_size - 1) < 0) || // Clip left
 8006544:	2a00      	cmp	r2, #0
 8006546:	f340 80a6 	ble.w	8006696 <ILI9341_print_text+0x18e>
	uint8_t font_color_16_bit[2] = {font_color >> 8, font_color};
 800654a:	0a1a      	lsrs	r2, r3, #8
 800654c:	f88d 3011 	strb.w	r3, [sp, #17]
	uint8_t background_color_16_bit[2] = {background_color >> 8, background_color};
 8006550:	0a0b      	lsrs	r3, r1, #8
	uint8_t font_color_16_bit[2] = {font_color >> 8, font_color};
 8006552:	f88d 2010 	strb.w	r2, [sp, #16]
	uint8_t background_color_16_bit[2] = {background_color >> 8, background_color};
 8006556:	f88d 3014 	strb.w	r3, [sp, #20]
 800655a:	f88d 1015 	strb.w	r1, [sp, #21]
	for(j = 0; j < CHAR_HEIGHT; j++) {
 800655e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006562:	f8bd 8010 	ldrh.w	r8, [sp, #16]
 8006566:	f8df c138 	ldr.w	ip, [pc, #312]	; 80066a0 <ILI9341_print_text+0x198>
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	2500      	movs	r5, #0
 800656e:	f88d 500a 	strb.w	r5, [sp, #10]
		for(h = 0; h < font_size; h++) {
 8006572:	462b      	mov	r3, r5
					a = font[index_row][i] & (1 << j);
 8006574:	f04f 0906 	mov.w	r9, #6
	for(j = 0; j < CHAR_HEIGHT; j++) {
 8006578:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800657c:	2a06      	cmp	r2, #6
 800657e:	d926      	bls.n	80065ce <ILI9341_print_text+0xc6>
				((x0 + 8 * font_size - 1) < 0))   // Clip top
			return;
	}

	uint16_t pixels_added_into_data = ILI9341_text_to_image(text, SPI_DATA, font_color, background_color, font_size);
	uint16_t x1 = x0 + font_size*CHAR_WIDTH*strlen(text) - 1;
 8006580:	f7f9 fe26 	bl	80001d0 <strlen>
	uint8_t y1 = y0 + font_size*CHAR_HEIGHT;
 8006584:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
	uint16_t x1 = x0 + font_size*CHAR_WIDTH*strlen(text) - 1;
 8006588:	fb14 f400 	smulbb	r4, r4, r0
 800658c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006590:	1e72      	subs	r2, r6, #1
	uint8_t y1 = y0 + font_size*CHAR_HEIGHT;
 8006592:	443b      	add	r3, r7
	uint16_t x1 = x0 + font_size*CHAR_WIDTH*strlen(text) - 1;
 8006594:	eb02 0244 	add.w	r2, r2, r4, lsl #1
	ILI9341_set_cursor_position(x0, y0, x1, y1);
 8006598:	4639      	mov	r1, r7
 800659a:	4630      	mov	r0, r6
 800659c:	b2db      	uxtb	r3, r3
 800659e:	b212      	sxth	r2, r2
 80065a0:	f7ff fe20 	bl	80061e4 <ILI9341_set_cursor_position>
	ILI9341_send_data_array(SPI_DATA, 2*pixels_added_into_data); /* Because it's 16-bit pixels with 8-bit data */
 80065a4:	0069      	lsls	r1, r5, #1
 80065a6:	483e      	ldr	r0, [pc, #248]	; (80066a0 <ILI9341_print_text+0x198>)
 80065a8:	b289      	uxth	r1, r1

}
 80065aa:	b007      	add	sp, #28
 80065ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ILI9341_send_data_array(SPI_DATA, 2*pixels_added_into_data); /* Because it's 16-bit pixels with 8-bit data */
 80065b0:	f7ff bddc 	b.w	800616c <ILI9341_send_data_array>
		if ((y0 >= ILI9341_WIDTH) || // Clip right
 80065b4:	2fef      	cmp	r7, #239	; 0xef
 80065b6:	dc6e      	bgt.n	8006696 <ILI9341_print_text+0x18e>
 80065b8:	f5b6 7fa0 	cmp.w	r6, #320	; 0x140
 80065bc:	da6b      	bge.n	8006696 <ILI9341_print_text+0x18e>
				((y0 + 6 * font_size - 1) < 0) || // Clip left
 80065be:	2206      	movs	r2, #6
 80065c0:	fb12 7204 	smlabb	r2, r2, r4, r7
				(x0 >= ILI9341_HEIGHT) || // Clip bottom
 80065c4:	2a00      	cmp	r2, #0
 80065c6:	dd66      	ble.n	8006696 <ILI9341_print_text+0x18e>
				((x0 + 8 * font_size - 1) < 0))   // Clip top
 80065c8:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 80065cc:	e7ba      	b.n	8006544 <ILI9341_print_text+0x3c>
		for(h = 0; h < font_size; h++) {
 80065ce:	f88d 300b 	strb.w	r3, [sp, #11]
					a = font[index_row][i] & (1 << j);
 80065d2:	f04f 0a01 	mov.w	sl, #1
		for(h = 0; h < font_size; h++) {
 80065d6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80065da:	4294      	cmp	r4, r2
 80065dc:	d954      	bls.n	8006688 <ILI9341_print_text+0x180>
 80065de:	f100 3eff 	add.w	lr, r0, #4294967295
 80065e2:	e016      	b.n	8006612 <ILI9341_print_text+0x10a>
				c = *text++ & 0x7F;
 80065e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065e8:	f88d 200f 	strb.w	r2, [sp, #15]
				if (c < ' ')
 80065ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80065f0:	2a1f      	cmp	r2, #31
					index_row = c - ' ';
 80065f2:	bf89      	itett	hi
 80065f4:	f89d 200f 	ldrbhi.w	r2, [sp, #15]
					index_row = 0; /* This is the first row in the font array */
 80065f8:	f88d 300e 	strbls.w	r3, [sp, #14]
					index_row = c - ' ';
 80065fc:	3a20      	subhi	r2, #32
 80065fe:	b2d2      	uxtbhi	r2, r2
 8006600:	bf88      	it	hi
 8006602:	f88d 200e 	strbhi.w	r2, [sp, #14]
				for (i = 0; i < CHAR_WIDTH; i++) {
 8006606:	f88d 3009 	strb.w	r3, [sp, #9]
 800660a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800660e:	2a05      	cmp	r2, #5
 8006610:	d90a      	bls.n	8006628 <ILI9341_print_text+0x120>
			while(*text) {
 8006612:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
 8006616:	2a00      	cmp	r2, #0
 8006618:	d1e4      	bne.n	80065e4 <ILI9341_print_text+0xdc>
		for(h = 0; h < font_size; h++) {
 800661a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800661e:	3201      	adds	r2, #1
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	f88d 200b 	strb.w	r2, [sp, #11]
 8006626:	e7d6      	b.n	80065d6 <ILI9341_print_text+0xce>
					a = font[index_row][i] & (1 << j);
 8006628:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800662c:	f89d b009 	ldrb.w	fp, [sp, #9]
 8006630:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006634:	9201      	str	r2, [sp, #4]
 8006636:	4a1b      	ldr	r2, [pc, #108]	; (80066a4 <ILI9341_print_text+0x19c>)
 8006638:	fb09 2101 	mla	r1, r9, r1, r2
 800663c:	9a01      	ldr	r2, [sp, #4]
 800663e:	f811 100b 	ldrb.w	r1, [r1, fp]
 8006642:	fa0a f202 	lsl.w	r2, sl, r2
 8006646:	400a      	ands	r2, r1
 8006648:	f88d 200d 	strb.w	r2, [sp, #13]
					for(w = 0; w < font_size; w++) {
 800664c:	f88d 300c 	strb.w	r3, [sp, #12]
 8006650:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8006654:	4294      	cmp	r4, r2
 8006656:	d806      	bhi.n	8006666 <ILI9341_print_text+0x15e>
				for (i = 0; i < CHAR_WIDTH; i++) {
 8006658:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800665c:	3201      	adds	r2, #1
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	f88d 2009 	strb.w	r2, [sp, #9]
 8006664:	e7d1      	b.n	800660a <ILI9341_print_text+0x102>
						if (a > 0){
 8006666:	f89d 100d 	ldrb.w	r1, [sp, #13]
							memcpy(data, font_color_16_bit, 2); /* We have a pixel 1 - Font pixel */
 800666a:	9a00      	ldr	r2, [sp, #0]
 800666c:	2900      	cmp	r1, #0
 800666e:	bf18      	it	ne
 8006670:	4642      	movne	r2, r8
 8006672:	f82c 2b02 	strh.w	r2, [ip], #2
					for(w = 0; w < font_size; w++) {
 8006676:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800667a:	3201      	adds	r2, #1
						pixels_added_into_data++;
 800667c:	3501      	adds	r5, #1
					for(w = 0; w < font_size; w++) {
 800667e:	b2d2      	uxtb	r2, r2
						pixels_added_into_data++;
 8006680:	b2ad      	uxth	r5, r5
					for(w = 0; w < font_size; w++) {
 8006682:	f88d 200c 	strb.w	r2, [sp, #12]
 8006686:	e7e3      	b.n	8006650 <ILI9341_print_text+0x148>
	for(j = 0; j < CHAR_HEIGHT; j++) {
 8006688:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800668c:	3201      	adds	r2, #1
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	f88d 200a 	strb.w	r2, [sp, #10]
 8006694:	e770      	b.n	8006578 <ILI9341_print_text+0x70>
}
 8006696:	b007      	add	sp, #28
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	20002728 	.word	0x20002728
 80066a0:	200007a8 	.word	0x200007a8
 80066a4:	080149b7 	.word	0x080149b7

080066a8 <ILI9341_set_rotation>:
	ILI9341_set_cursor_position(x, y, w + x - 1, h + y - 1);
	ILI9341_send_data_array(SPI_DATA, size);
}

/* Set screen rotation */
void ILI9341_set_rotation(uint8_t rotate) {
 80066a8:	b508      	push	{r3, lr}
	if(lcd.ScreenOrientation == rotate)
 80066aa:	4b15      	ldr	r3, [pc, #84]	; (8006700 <ILI9341_set_rotation+0x58>)
 80066ac:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80066b0:	4282      	cmp	r2, r0
 80066b2:	d023      	beq.n	80066fc <ILI9341_set_rotation+0x54>
		return; /* No action */

	lcd.ScreenOrientation = rotate;
	switch (rotate) {
 80066b4:	2803      	cmp	r0, #3
	lcd.ScreenOrientation = rotate;
 80066b6:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
	switch (rotate) {
 80066ba:	d013      	beq.n	80066e4 <ILI9341_set_rotation+0x3c>
 80066bc:	2804      	cmp	r0, #4
 80066be:	d017      	beq.n	80066f0 <ILI9341_set_rotation+0x48>
 80066c0:	2802      	cmp	r0, #2
 80066c2:	d009      	beq.n	80066d8 <ILI9341_set_rotation+0x30>
	case 1:
		lcd.rotationNum = 1;
 80066c4:	2201      	movs	r2, #1
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80066c6:	2036      	movs	r0, #54	; 0x36
		lcd.rotationNum = 1;
 80066c8:	701a      	strb	r2, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80066ca:	f7ff fd67 	bl	800619c <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 80066ce:	2088      	movs	r0, #136	; 0x88
		lcd.rotationNum = 1;
		ILI9341_send_command(ILI9341_MEMCONTROL);
		ILI9341_send_data(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
		break;
	}
}
 80066d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ILI9341_send_data(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80066d4:	f7ff bd30 	b.w	8006138 <ILI9341_send_data>
		lcd.rotationNum = 2;
 80066d8:	7018      	strb	r0, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80066da:	2036      	movs	r0, #54	; 0x36
 80066dc:	f7ff fd5e 	bl	800619c <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80066e0:	2028      	movs	r0, #40	; 0x28
 80066e2:	e7f5      	b.n	80066d0 <ILI9341_set_rotation+0x28>
		lcd.rotationNum = 3;
 80066e4:	7018      	strb	r0, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80066e6:	2036      	movs	r0, #54	; 0x36
 80066e8:	f7ff fd58 	bl	800619c <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 80066ec:	2048      	movs	r0, #72	; 0x48
 80066ee:	e7ef      	b.n	80066d0 <ILI9341_set_rotation+0x28>
		lcd.rotationNum = 4;
 80066f0:	7018      	strb	r0, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80066f2:	2036      	movs	r0, #54	; 0x36
 80066f4:	f7ff fd52 	bl	800619c <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80066f8:	20e8      	movs	r0, #232	; 0xe8
 80066fa:	e7e9      	b.n	80066d0 <ILI9341_set_rotation+0x28>
}
 80066fc:	bd08      	pop	{r3, pc}
 80066fe:	bf00      	nop
 8006700:	20002728 	.word	0x20002728

08006704 <TSC2046_SendCommand>:
 */

#include "ILI9341.h"

// Send TSC2046 Command and wait for a response
static uint16_t TSC2046_SendCommand(uint8_t cmd) {
 8006704:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 8006706:	4b17      	ldr	r3, [pc, #92]	; (8006764 <TSC2046_SendCommand+0x60>)
	uint16_t return16 = 0;
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 8006708:	4d17      	ldr	r5, [pc, #92]	; (8006768 <TSC2046_SendCommand+0x64>)
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 800670a:	881a      	ldrh	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 800670c:	8c29      	ldrh	r1, [r5, #32]
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 800670e:	789b      	ldrb	r3, [r3, #2]
 8006710:	f8ad 2004 	strh.w	r2, [sp, #4]
static uint16_t TSC2046_SendCommand(uint8_t cmd) {
 8006714:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 8006716:	2200      	movs	r2, #0
 8006718:	69e8      	ldr	r0, [r5, #28]
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 800671a:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 800671e:	f003 f857 	bl	80097d0 <HAL_GPIO_WritePin>
	lcdBuf[0] = cmd;
	HAL_SPI_Transmit(lcd.touchSpi, lcdBuf, 1, 10);
 8006722:	230a      	movs	r3, #10
 8006724:	2201      	movs	r2, #1
 8006726:	a901      	add	r1, sp, #4
 8006728:	69a8      	ldr	r0, [r5, #24]
	lcdBuf[0] = cmd;
 800672a:	f88d 4004 	strb.w	r4, [sp, #4]
	HAL_SPI_Transmit(lcd.touchSpi, lcdBuf, 1, 10);
 800672e:	f005 f961 	bl	800b9f4 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(lcd.touchSpi, &lcdBuf[1], 2, 10) == HAL_OK)
 8006732:	69a8      	ldr	r0, [r5, #24]
 8006734:	230a      	movs	r3, #10
 8006736:	2202      	movs	r2, #2
 8006738:	f10d 0105 	add.w	r1, sp, #5
 800673c:	f005 fb4f 	bl	800bdde <HAL_SPI_Receive>
 8006740:	b970      	cbnz	r0, 8006760 <TSC2046_SendCommand+0x5c>
		return16 = (lcdBuf[1] << 4) + (lcdBuf[2] >> 4);
 8006742:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8006746:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800674a:	0924      	lsrs	r4, r4, #4
 800674c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
	else
		return16 = 0;
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_SET);
 8006750:	69e8      	ldr	r0, [r5, #28]
 8006752:	8c29      	ldrh	r1, [r5, #32]
 8006754:	2201      	movs	r2, #1
 8006756:	f003 f83b 	bl	80097d0 <HAL_GPIO_WritePin>
	return return16;
}
 800675a:	4620      	mov	r0, r4
 800675c:	b003      	add	sp, #12
 800675e:	bd30      	pop	{r4, r5, pc}
		return16 = 0;
 8006760:	2400      	movs	r4, #0
 8006762:	e7f5      	b.n	8006750 <TSC2046_SendCommand+0x4c>
 8006764:	08012c68 	.word	0x08012c68
 8006768:	20002728 	.word	0x20002728

0800676c <TSC2046_getRaw_Y>:
static uint16_t TSC2046_getRaw_X() {
	return TSC2046_SendCommand(CMD_X_AXIS | lcd.CMD_Default);
}
// Get y-axis raw touch 12-bit value
static uint16_t TSC2046_getRaw_Y() {
	return TSC2046_SendCommand(CMD_Y_AXIS | lcd.CMD_Default);
 800676c:	4b03      	ldr	r3, [pc, #12]	; (800677c <TSC2046_getRaw_Y+0x10>)
 800676e:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8006772:	f040 0010 	orr.w	r0, r0, #16
 8006776:	f7ff bfc5 	b.w	8006704 <TSC2046_SendCommand>
 800677a:	bf00      	nop
 800677c:	20002728 	.word	0x20002728

08006780 <TSC2046_getRaw_X>:
	return TSC2046_SendCommand(CMD_X_AXIS | lcd.CMD_Default);
 8006780:	4b03      	ldr	r3, [pc, #12]	; (8006790 <TSC2046_getRaw_X+0x10>)
 8006782:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8006786:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 800678a:	f7ff bfbb 	b.w	8006704 <TSC2046_SendCommand>
 800678e:	bf00      	nop
 8006790:	20002728 	.word	0x20002728

08006794 <TSC2046_GetRawTouch>:
	ILI9341_fill_circle(lcd.myTS_Calibrate.Width - 1, lcd.myTS_Calibrate.Height - 1, 3, COLOR_BLUE);
	ILI9341_print_text("Press here", lcd.myTS_Calibrate.Width - 80, lcd.myTS_Calibrate.Height - 40, COLOR_BLUE, COLOR_CYAN, 1);
}

// Poll for touch status
static void TSC2046_GetRawTouch() {
 8006794:	b538      	push	{r3, r4, r5, lr}

	// Assign raw touch based on orientation
	switch (lcd.ScreenOrientation) {
 8006796:	4c1b      	ldr	r4, [pc, #108]	; (8006804 <TSC2046_GetRawTouch+0x70>)
 8006798:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800679c:	3b01      	subs	r3, #1
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d812      	bhi.n	80067c8 <TSC2046_GetRawTouch+0x34>
 80067a2:	e8df f003 	tbb	[pc, r3]
 80067a6:	1402      	.short	0x1402
 80067a8:	2920      	.short	0x2920
	case 1:
		lcd.localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 80067aa:	f7ff ffe9 	bl	8006780 <TSC2046_getRaw_X>
 80067ae:	f5c0 607f 	rsb	r0, r0, #4080	; 0xff0
 80067b2:	300f      	adds	r0, #15
 80067b4:	8520      	strh	r0, [r4, #40]	; 0x28
	return TSC2046_SendCommand(CMD_Y_AXIS | lcd.CMD_Default);
 80067b6:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 80067ba:	f040 0010 	orr.w	r0, r0, #16
 80067be:	f7ff ffa1 	bl	8006704 <TSC2046_SendCommand>
		break;

	case 3:
		lcd.localRawTouch.x_touch = TSC2046_getRaw_X();
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
		lcd.myTS_Calibrate.Width = 230;
 80067c2:	4b11      	ldr	r3, [pc, #68]	; (8006808 <TSC2046_GetRawTouch+0x74>)
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 80067c4:	8560      	strh	r0, [r4, #42]	; 0x2a
		break;

	case 4:
		lcd.localRawTouch.x_touch = TSC2046_getRaw_Y();
		lcd.localRawTouch.y_touch = TSC2046_getRaw_X();
		lcd.myTS_Calibrate.Width = 320;
 80067c6:	64e3      	str	r3, [r4, #76]	; 0x4c
		lcd.myTS_Calibrate.Height = 240;
		break;
	}
	// These are for the calibration
	lcd.myRawTouchDef.x_touch = lcd.localRawTouch.x_touch;
 80067c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067ca:	62e3      	str	r3, [r4, #44]	; 0x2c
	lcd.myRawTouchDef.y_touch = lcd.localRawTouch.y_touch;
}
 80067cc:	bd38      	pop	{r3, r4, r5, pc}
		lcd.localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y();
 80067ce:	f7ff ffcd 	bl	800676c <TSC2046_getRaw_Y>
 80067d2:	f640 75ff 	movw	r5, #4095	; 0xfff
 80067d6:	1a28      	subs	r0, r5, r0
 80067d8:	8520      	strh	r0, [r4, #40]	; 0x28
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_X();
 80067da:	f7ff ffd1 	bl	8006780 <TSC2046_getRaw_X>
 80067de:	1a28      	subs	r0, r5, r0
		lcd.myTS_Calibrate.Width = 320;
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <TSC2046_GetRawTouch+0x78>)
		lcd.localRawTouch.y_touch = TSC2046_getRaw_X();
 80067e2:	8560      	strh	r0, [r4, #42]	; 0x2a
		lcd.myTS_Calibrate.Height = 240;
 80067e4:	e7ef      	b.n	80067c6 <TSC2046_GetRawTouch+0x32>
		lcd.localRawTouch.x_touch = TSC2046_getRaw_X();
 80067e6:	f7ff ffcb 	bl	8006780 <TSC2046_getRaw_X>
 80067ea:	8520      	strh	r0, [r4, #40]	; 0x28
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 80067ec:	f7ff ffbe 	bl	800676c <TSC2046_getRaw_Y>
 80067f0:	f5c0 607f 	rsb	r0, r0, #4080	; 0xff0
 80067f4:	300f      	adds	r0, #15
 80067f6:	e7e4      	b.n	80067c2 <TSC2046_GetRawTouch+0x2e>
		lcd.localRawTouch.x_touch = TSC2046_getRaw_Y();
 80067f8:	f7ff ffb8 	bl	800676c <TSC2046_getRaw_Y>
 80067fc:	8520      	strh	r0, [r4, #40]	; 0x28
		lcd.localRawTouch.y_touch = TSC2046_getRaw_X();
 80067fe:	f7ff ffbf 	bl	8006780 <TSC2046_getRaw_X>
 8006802:	e7ed      	b.n	80067e0 <TSC2046_GetRawTouch+0x4c>
 8006804:	20002728 	.word	0x20002728
 8006808:	014000e6 	.word	0x014000e6
 800680c:	00f00140 	.word	0x00f00140

08006810 <TSC2046_GetTouchCalibrationParameters>:
	// Calculate bias
	lcd.myTS_Calibrate.Bias_X = -1 - lcd.myTS_Calibrate.Scale_X * lcd.myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
}

void TSC2046_GetTouchCalibrationParameters(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y) {
 8006810:	b530      	push	{r4, r5, lr}
	*Scale_X = lcd.myTS_Calibrate.Scale_X;
 8006812:	4c05      	ldr	r4, [pc, #20]	; (8006828 <TSC2046_GetTouchCalibrationParameters+0x18>)
 8006814:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006816:	6005      	str	r5, [r0, #0]
	*Scale_Y = lcd.myTS_Calibrate.Scale_Y;
 8006818:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800681a:	6008      	str	r0, [r1, #0]
	*Bias_X = lcd.myTS_Calibrate.Bias_X;
 800681c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800681e:	6011      	str	r1, [r2, #0]
	*Bias_Y = lcd.myTS_Calibrate.Bias_Y;
 8006820:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006822:	601a      	str	r2, [r3, #0]
}
 8006824:	bd30      	pop	{r4, r5, pc}
 8006826:	bf00      	nop
 8006828:	20002728 	.word	0x20002728

0800682c <TSC2046_SetTouchCalibrationParameters>:

void TSC2046_SetTouchCalibrationParameters(float Scale_X, float Scale_Y, float Bias_X, float Bias_Y) {
	lcd.myTS_Calibrate.Scale_X = Scale_X;
 800682c:	4b04      	ldr	r3, [pc, #16]	; (8006840 <TSC2046_SetTouchCalibrationParameters+0x14>)
 800682e:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
	lcd.myTS_Calibrate.Scale_Y = Scale_Y;
 8006832:	edc3 0a10 	vstr	s1, [r3, #64]	; 0x40
	lcd.myTS_Calibrate.Bias_X = Bias_X;
 8006836:	ed83 1a11 	vstr	s2, [r3, #68]	; 0x44
	lcd.myTS_Calibrate.Bias_Y = Bias_Y;
 800683a:	edc3 1a12 	vstr	s3, [r3, #72]	; 0x48
}
 800683e:	4770      	bx	lr
 8006840:	20002728 	.word	0x20002728
 8006844:	00000000 	.word	0x00000000

08006848 <TSC2046_GetTouchData>:

// Get touch screen data when calibration is already made
void TSC2046_GetTouchData() {
 8006848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Reset
	uint16_t temp16x = 0, temp16y = 0;
 800684c:	f04f 0800 	mov.w	r8, #0
	// Read touch data
	for (uint8_t i = 0; i < 10; i++) {
		TSC2046_GetRawTouch(lcd);
 8006850:	4e2f      	ldr	r6, [pc, #188]	; (8006910 <TSC2046_GetTouchData+0xc8>)
void TSC2046_GetTouchData() {
 8006852:	b091      	sub	sp, #68	; 0x44
 8006854:	270a      	movs	r7, #10
	uint16_t temp16x = 0, temp16y = 0;
 8006856:	46c1      	mov	r9, r8
		TSC2046_GetRawTouch(lcd);
 8006858:	4d2e      	ldr	r5, [pc, #184]	; (8006914 <TSC2046_GetTouchData+0xcc>)
 800685a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800685c:	466c      	mov	r4, sp
 800685e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006868:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800686c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006870:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006874:	f7ff ff8e 	bl	8006794 <TSC2046_GetRawTouch>
		temp16x += lcd.localRawTouch.x_touch;
 8006878:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800687a:	4499      	add	r9, r3
		temp16y += lcd.localRawTouch.y_touch;
 800687c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	for (uint8_t i = 0; i < 10; i++) {
 800687e:	3f01      	subs	r7, #1
		temp16y += lcd.localRawTouch.y_touch;
 8006880:	4498      	add	r8, r3
	for (uint8_t i = 0; i < 10; i++) {
 8006882:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
		temp16x += lcd.localRawTouch.x_touch;
 8006886:	fa1f f989 	uxth.w	r9, r9
		temp16y += lcd.localRawTouch.y_touch;
 800688a:	fa1f f888 	uxth.w	r8, r8
	for (uint8_t i = 0; i < 10; i++) {
 800688e:	d1e3      	bne.n	8006858 <TSC2046_GetTouchData+0x10>
	}
	lcd.localRawTouch.x_touch = temp16x * 0.1;
 8006890:	4648      	mov	r0, r9
 8006892:	f7f9 fe47 	bl	8000524 <__aeabi_i2d>
 8006896:	a31c      	add	r3, pc, #112	; (adr r3, 8006908 <TSC2046_GetTouchData+0xc0>)
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f7f9 feac 	bl	80005f8 <__aeabi_dmul>
 80068a0:	f7fa f982 	bl	8000ba8 <__aeabi_d2uiz>
 80068a4:	b284      	uxth	r4, r0
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 80068a6:	4640      	mov	r0, r8
	lcd.localRawTouch.x_touch = temp16x * 0.1;
 80068a8:	8534      	strh	r4, [r6, #40]	; 0x28
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 80068aa:	f7f9 fe3b 	bl	8000524 <__aeabi_i2d>
 80068ae:	a316      	add	r3, pc, #88	; (adr r3, 8006908 <TSC2046_GetTouchData+0xc0>)
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f7f9 fea0 	bl	80005f8 <__aeabi_dmul>
 80068b8:	f7fa f976 	bl	8000ba8 <__aeabi_d2uiz>

	// X-axis value
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80068bc:	ee07 4a90 	vmov	s15, r4
 80068c0:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
 80068c4:	ed96 7a11 	vldr	s14, [r6, #68]	; 0x44
 80068c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 80068cc:	b280      	uxth	r0, r0
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80068ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 80068d2:	8570      	strh	r0, [r6, #42]	; 0x2a

	// Y-axis value
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 80068d4:	ee07 0a90 	vmov	s15, r0
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80068d8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 80068dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80068e0:	ee17 3a10 	vmov	r3, s14
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 80068e4:	edd6 6a10 	vldr	s13, [r6, #64]	; 0x40
 80068e8:	ed96 7a12 	vldr	s14, [r6, #72]	; 0x48
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80068ec:	8633      	strh	r3, [r6, #48]	; 0x30
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 80068ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068f2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80068f6:	ee17 3a10 	vmov	r3, s14
 80068fa:	8673      	strh	r3, [r6, #50]	; 0x32
}
 80068fc:	b011      	add	sp, #68	; 0x44
 80068fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006902:	bf00      	nop
 8006904:	f3af 8000 	nop.w
 8006908:	9999999a 	.word	0x9999999a
 800690c:	3fb99999 	.word	0x3fb99999
 8006910:	20002728 	.word	0x20002728
 8006914:	20002738 	.word	0x20002738

08006918 <TSC2046_isPressed>:


bool TSC2046_isPressed() {
 8006918:	b510      	push	{r4, lr}
	return TSC2046_SendCommand(CMD_Z_AXIS | lcd.CMD_Default);
 800691a:	4b11      	ldr	r3, [pc, #68]	; (8006960 <TSC2046_isPressed+0x48>)
 800691c:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8006920:	f040 0030 	orr.w	r0, r0, #48	; 0x30
 8006924:	f7ff feee 	bl	8006704 <TSC2046_SendCommand>
	static uint8_t count = 0;
	static bool has_been_pressed = false;
	bool pressed = 50 < TSC2046_getRaw_Z() ? true : false;
	if(pressed == true && has_been_pressed == false){
 8006928:	490e      	ldr	r1, [pc, #56]	; (8006964 <TSC2046_isPressed+0x4c>)
 800692a:	4a0f      	ldr	r2, [pc, #60]	; (8006968 <TSC2046_isPressed+0x50>)
 800692c:	780b      	ldrb	r3, [r1, #0]
 800692e:	2832      	cmp	r0, #50	; 0x32
 8006930:	d908      	bls.n	8006944 <TSC2046_isPressed+0x2c>
 8006932:	b993      	cbnz	r3, 800695a <TSC2046_isPressed+0x42>
		has_been_pressed = true;
 8006934:	2401      	movs	r4, #1
		count = 0;
		HAL_Delay(100); /* Wait until the finger have fully pressed the LCD screen. The Touch SPI and Touch Interrupt are different things */
 8006936:	2064      	movs	r0, #100	; 0x64
		has_been_pressed = true;
 8006938:	700c      	strb	r4, [r1, #0]
		count = 0;
 800693a:	7013      	strb	r3, [r2, #0]
		HAL_Delay(100); /* Wait until the finger have fully pressed the LCD screen. The Touch SPI and Touch Interrupt are different things */
 800693c:	f002 f8b4 	bl	8008aa8 <HAL_Delay>
 8006940:	4620      	mov	r0, r4
		}else{
			count = 0;
		}
		return false;
	}
}
 8006942:	bd10      	pop	{r4, pc}
		if(pressed == false && has_been_pressed == true) {
 8006944:	b14b      	cbz	r3, 800695a <TSC2046_isPressed+0x42>
			count = 1 + count;
 8006946:	7813      	ldrb	r3, [r2, #0]
 8006948:	3301      	adds	r3, #1
 800694a:	b2db      	uxtb	r3, r3
			if(count >= 10)
 800694c:	2b09      	cmp	r3, #9
			count = 1 + count;
 800694e:	7013      	strb	r3, [r2, #0]
			if(count >= 10)
 8006950:	f04f 0000 	mov.w	r0, #0
 8006954:	d9f5      	bls.n	8006942 <TSC2046_isPressed+0x2a>
				has_been_pressed = false;
 8006956:	7008      	strb	r0, [r1, #0]
 8006958:	e7f3      	b.n	8006942 <TSC2046_isPressed+0x2a>
			count = 0;
 800695a:	2000      	movs	r0, #0
 800695c:	7010      	strb	r0, [r2, #0]
 800695e:	e7f0      	b.n	8006942 <TSC2046_isPressed+0x2a>
 8006960:	20002728 	.word	0x20002728
 8006964:	200020a9 	.word	0x200020a9
 8006968:	200020a8 	.word	0x200020a8
 800696c:	00000000 	.word	0x00000000

08006970 <TSC2046_Calibrate>:
void TSC2046_Calibrate() {
 8006970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	lcd.myTS_Calibrate.TL_X = 0;
 8006974:	4c72      	ldr	r4, [pc, #456]	; (8006b40 <TSC2046_Calibrate+0x1d0>)
	ILI9341_set_rotation(2);
 8006976:	2002      	movs	r0, #2
 8006978:	f7ff fe96 	bl	80066a8 <ILI9341_set_rotation>
	ILI9341_fill_circle(3, 3, 3, COLOR_BLUE);
 800697c:	2203      	movs	r2, #3
	lcd.myTS_Calibrate.TL_X = 0;
 800697e:	2300      	movs	r3, #0
	ILI9341_fill_circle(3, 3, 3, COLOR_BLUE);
 8006980:	4611      	mov	r1, r2
 8006982:	4610      	mov	r0, r2
	lcd.myTS_Calibrate.BR_X = 0;
 8006984:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	lcd.myRawTouchDef.x_touch = 0;
 8006988:	62e3      	str	r3, [r4, #44]	; 0x2c
	ILI9341_fill_circle(3, 3, 3, COLOR_BLUE);
 800698a:	231f      	movs	r3, #31
 800698c:	f7ff fd49 	bl	8006422 <ILI9341_fill_circle>
	ILI9341_print_text("Press here", 20, 30, COLOR_BLUE, COLOR_CYAN, 1);
 8006990:	2501      	movs	r5, #1
 8006992:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006996:	e9cd 3500 	strd	r3, r5, [sp]
 800699a:	486a      	ldr	r0, [pc, #424]	; (8006b44 <TSC2046_Calibrate+0x1d4>)
 800699c:	231f      	movs	r3, #31
 800699e:	221e      	movs	r2, #30
 80069a0:	2114      	movs	r1, #20
 80069a2:	f7ff fdb1 	bl	8006508 <ILI9341_print_text>
	HAL_Delay(2000);
 80069a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80069aa:	f002 f87d 	bl	8008aa8 <HAL_Delay>
		if (TSC2046_isPressed()) {
 80069ae:	f7ff ffb3 	bl	8006918 <TSC2046_isPressed>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	f000 80b8 	beq.w	8006b28 <TSC2046_Calibrate+0x1b8>
 80069b8:	250a      	movs	r5, #10
				TSC2046_GetRawTouch();
 80069ba:	f7ff feeb 	bl	8006794 <TSC2046_GetRawTouch>
				lcd.myTS_Calibrate.TL_X += lcd.myRawTouchDef.x_touch;
 80069be:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80069c0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80069c2:	4413      	add	r3, r2
 80069c4:	86a3      	strh	r3, [r4, #52]	; 0x34
				lcd.myTS_Calibrate.TL_Y += lcd.myRawTouchDef.y_touch;
 80069c6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80069c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
			for (uint8_t i = 0; i < 10; i++) {
 80069ca:	3d01      	subs	r5, #1
				lcd.myTS_Calibrate.TL_Y += lcd.myRawTouchDef.y_touch;
 80069cc:	4413      	add	r3, r2
			for (uint8_t i = 0; i < 10; i++) {
 80069ce:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
				lcd.myTS_Calibrate.TL_Y += lcd.myRawTouchDef.y_touch;
 80069d2:	86e3      	strh	r3, [r4, #54]	; 0x36
			for (uint8_t i = 0; i < 10; i++) {
 80069d4:	d1f1      	bne.n	80069ba <TSC2046_Calibrate+0x4a>
	HAL_Delay(1000);
 80069d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069da:	f002 f865 	bl	8008aa8 <HAL_Delay>
	ILI9341_fill_circle(lcd.myTS_Calibrate.Width - 1, lcd.myTS_Calibrate.Height - 1, 3, COLOR_BLUE);
 80069de:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80069e2:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 80069e6:	3901      	subs	r1, #1
 80069e8:	3801      	subs	r0, #1
 80069ea:	231f      	movs	r3, #31
 80069ec:	2203      	movs	r2, #3
 80069ee:	b209      	sxth	r1, r1
 80069f0:	b200      	sxth	r0, r0
 80069f2:	f7ff fd16 	bl	8006422 <ILI9341_fill_circle>
	ILI9341_print_text("Press here", lcd.myTS_Calibrate.Width - 80, lcd.myTS_Calibrate.Height - 40, COLOR_BLUE, COLOR_CYAN, 1);
 80069f6:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 80069fa:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 80069fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006a02:	2001      	movs	r0, #1
 8006a04:	3a28      	subs	r2, #40	; 0x28
 8006a06:	3950      	subs	r1, #80	; 0x50
 8006a08:	e9cd 3000 	strd	r3, r0, [sp]
 8006a0c:	b212      	sxth	r2, r2
 8006a0e:	484d      	ldr	r0, [pc, #308]	; (8006b44 <TSC2046_Calibrate+0x1d4>)
 8006a10:	231f      	movs	r3, #31
 8006a12:	b209      	sxth	r1, r1
 8006a14:	f7ff fd78 	bl	8006508 <ILI9341_print_text>
		if (TSC2046_isPressed()) {
 8006a18:	f7ff ff7e 	bl	8006918 <TSC2046_isPressed>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f000 8085 	beq.w	8006b2c <TSC2046_Calibrate+0x1bc>
 8006a22:	260a      	movs	r6, #10
				TSC2046_GetRawTouch();
 8006a24:	f7ff feb6 	bl	8006794 <TSC2046_GetRawTouch>
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 8006a28:	8f25      	ldrh	r5, [r4, #56]	; 0x38
 8006a2a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006a2c:	f8b4 803a 	ldrh.w	r8, [r4, #58]	; 0x3a
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 8006a30:	441d      	add	r5, r3
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006a32:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			for (uint8_t i = 0; i < 10; i++) {
 8006a34:	3e01      	subs	r6, #1
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006a36:	4498      	add	r8, r3
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 8006a38:	b2ad      	uxth	r5, r5
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006a3a:	fa1f f888 	uxth.w	r8, r8
			for (uint8_t i = 0; i < 10; i++) {
 8006a3e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 8006a42:	8725      	strh	r5, [r4, #56]	; 0x38
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006a44:	f8a4 803a 	strh.w	r8, [r4, #58]	; 0x3a
			for (uint8_t i = 0; i < 10; i++) {
 8006a48:	d1ec      	bne.n	8006a24 <TSC2046_Calibrate+0xb4>
	lcd.myTS_Calibrate.TL_X *= 0.1;
 8006a4a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8006a4c:	f7f9 fd6a 	bl	8000524 <__aeabi_i2d>
 8006a50:	a339      	add	r3, pc, #228	; (adr r3, 8006b38 <TSC2046_Calibrate+0x1c8>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 fdcf 	bl	80005f8 <__aeabi_dmul>
 8006a5a:	f7fa f8a5 	bl	8000ba8 <__aeabi_d2uiz>
 8006a5e:	b287      	uxth	r7, r0
	lcd.myTS_Calibrate.TL_Y *= 0.1;
 8006a60:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
	lcd.myTS_Calibrate.TL_X *= 0.1;
 8006a62:	86a7      	strh	r7, [r4, #52]	; 0x34
	lcd.myTS_Calibrate.TL_Y *= 0.1;
 8006a64:	f7f9 fd5e 	bl	8000524 <__aeabi_i2d>
 8006a68:	a333      	add	r3, pc, #204	; (adr r3, 8006b38 <TSC2046_Calibrate+0x1c8>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7f9 fdc3 	bl	80005f8 <__aeabi_dmul>
 8006a72:	f7fa f899 	bl	8000ba8 <__aeabi_d2uiz>
 8006a76:	b286      	uxth	r6, r0
	lcd.myTS_Calibrate.BR_X *= 0.1;
 8006a78:	4628      	mov	r0, r5
	lcd.myTS_Calibrate.TL_Y *= 0.1;
 8006a7a:	86e6      	strh	r6, [r4, #54]	; 0x36
	lcd.myTS_Calibrate.BR_X *= 0.1;
 8006a7c:	f7f9 fd52 	bl	8000524 <__aeabi_i2d>
 8006a80:	a32d      	add	r3, pc, #180	; (adr r3, 8006b38 <TSC2046_Calibrate+0x1c8>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fdb7 	bl	80005f8 <__aeabi_dmul>
 8006a8a:	f7fa f88d 	bl	8000ba8 <__aeabi_d2uiz>
 8006a8e:	b285      	uxth	r5, r0
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8006a90:	4640      	mov	r0, r8
	lcd.myTS_Calibrate.BR_X *= 0.1;
 8006a92:	8725      	strh	r5, [r4, #56]	; 0x38
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8006a94:	f7f9 fd46 	bl	8000524 <__aeabi_i2d>
 8006a98:	a327      	add	r3, pc, #156	; (adr r3, 8006b38 <TSC2046_Calibrate+0x1c8>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fdab 	bl	80005f8 <__aeabi_dmul>
 8006aa2:	f7fa f881 	bl	8000ba8 <__aeabi_d2uiz>
	lcd.myTS_Calibrate.Scale_X = (lcd.myTS_Calibrate.Width + 0.0f) / (lcd.myTS_Calibrate.BR_X - lcd.myTS_Calibrate.TL_X + 0.0f);
 8006aa6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8006aaa:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8006b48 <TSC2046_Calibrate+0x1d8>
 8006aae:	ee06 2a90 	vmov	s13, r2
 8006ab2:	1bea      	subs	r2, r5, r7
 8006ab4:	ee07 2a10 	vmov	s14, r2
 8006ab8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006abc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ac0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006ac4:	ee37 7a06 	vadd.f32	s14, s14, s12
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8006ac8:	b283      	uxth	r3, r0
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006aca:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8006ace:	8763      	strh	r3, [r4, #58]	; 0x3a
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006ad0:	1b9b      	subs	r3, r3, r6
	lcd.myTS_Calibrate.Scale_X = (lcd.myTS_Calibrate.Width + 0.0f) / (lcd.myTS_Calibrate.BR_X - lcd.myTS_Calibrate.TL_X + 0.0f);
 8006ad2:	eec6 5a87 	vdiv.f32	s11, s13, s14
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	ee07 2a10 	vmov	s14, r2
 8006ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ae2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ae6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006aea:	ee37 7a06 	vadd.f32	s14, s14, s12
	lcd.myTS_Calibrate.Scale_X = (lcd.myTS_Calibrate.Width + 0.0f) / (lcd.myTS_Calibrate.BR_X - lcd.myTS_Calibrate.TL_X + 0.0f);
 8006aee:	edc4 5a0f 	vstr	s11, [r4, #60]	; 0x3c
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006af2:	eec7 6a27 	vdiv.f32	s13, s14, s15
	lcd.myTS_Calibrate.Bias_X = -1 - lcd.myTS_Calibrate.Scale_X * lcd.myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006af6:	ee07 7a90 	vmov	s15, r7
 8006afa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b02:	eeb0 6a47 	vmov.f32	s12, s14
 8006b06:	eea5 6ae7 	vfms.f32	s12, s11, s15
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006b0a:	ee07 6a90 	vmov	s15, r6
 8006b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006b12:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006b16:	eea6 7ae7 	vfms.f32	s14, s13, s15
	lcd.myTS_Calibrate.Bias_X = -1 - lcd.myTS_Calibrate.Scale_X * lcd.myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006b1a:	ed84 6a11 	vstr	s12, [r4, #68]	; 0x44
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006b1e:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
}
 8006b22:	b002      	add	sp, #8
 8006b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_Delay(10);
 8006b28:	200a      	movs	r0, #10
 8006b2a:	e73e      	b.n	80069aa <TSC2046_Calibrate+0x3a>
		HAL_Delay(10);
 8006b2c:	200a      	movs	r0, #10
 8006b2e:	f001 ffbb 	bl	8008aa8 <HAL_Delay>
		if (TSC2046_isPressed()) {
 8006b32:	e771      	b.n	8006a18 <TSC2046_Calibrate+0xa8>
 8006b34:	f3af 8000 	nop.w
 8006b38:	9999999a 	.word	0x9999999a
 8006b3c:	3fb99999 	.word	0x3fb99999
 8006b40:	20002728 	.word	0x20002728
 8006b44:	08014bf7 	.word	0x08014bf7
 8006b48:	00000000 	.word	0x00000000

08006b4c <shift_keyboard>:
			ILI9341_print_text(text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
		}
	}
}

static void shift_keyboard(uint8_t keyboard_page) {
 8006b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b50:	2320      	movs	r3, #32
 8006b52:	2505      	movs	r5, #5
	for(uint8_t i = 0; i < 5; i++) {
		/* Jump one step to the left */
		x += 23;

		/* Upper letters */
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 8006b54:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8006bb4 <shift_keyboard+0x68>
static void shift_keyboard(uint8_t keyboard_page) {
 8006b58:	b085      	sub	sp, #20
 8006b5a:	fb05 3500 	mla	r5, r5, r0, r3
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 8006b5e:	2427      	movs	r4, #39	; 0x27
 8006b60:	462a      	mov	r2, r5
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8006b62:	b226      	sxth	r6, r4
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 8006b64:	4649      	mov	r1, r9
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8006b66:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8006b6a:	f04f 0802 	mov.w	r8, #2
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 8006b6e:	a803      	add	r0, sp, #12
 8006b70:	f008 fac6 	bl	800f100 <siprintf>
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8006b74:	2300      	movs	r3, #0
 8006b76:	2253      	movs	r2, #83	; 0x53
 8006b78:	4631      	mov	r1, r6
 8006b7a:	a803      	add	r0, sp, #12
 8006b7c:	e9cd 7800 	strd	r7, r8, [sp]
 8006b80:	f7ff fcc2 	bl	8006508 <ILI9341_print_text>

		/* Down letter */
		sprintf(letter, "%c", i + 5 + 32 + 5*keyboard_page);
 8006b84:	1d6a      	adds	r2, r5, #5
 8006b86:	4649      	mov	r1, r9
 8006b88:	a803      	add	r0, sp, #12
 8006b8a:	f008 fab9 	bl	800f100 <siprintf>
	for(uint8_t i = 0; i < 5; i++) {
 8006b8e:	343a      	adds	r4, #58	; 0x3a
		ILI9341_print_text(letter, x + 16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 8006b90:	2300      	movs	r3, #0
 8006b92:	e9cd 7800 	strd	r7, r8, [sp]
 8006b96:	228a      	movs	r2, #138	; 0x8a
 8006b98:	4631      	mov	r1, r6
 8006b9a:	a803      	add	r0, sp, #12
 8006b9c:	f7ff fcb4 	bl	8006508 <ILI9341_print_text>
	for(uint8_t i = 0; i < 5; i++) {
 8006ba0:	b2a4      	uxth	r4, r4
 8006ba2:	f240 1349 	movw	r3, #329	; 0x149
 8006ba6:	429c      	cmp	r4, r3
 8006ba8:	f105 0501 	add.w	r5, r5, #1
 8006bac:	d1d8      	bne.n	8006b60 <shift_keyboard+0x14>

		/* Jump one step to the left */
		x += 35;
	}
}
 8006bae:	b005      	add	sp, #20
 8006bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bb4:	08013909 	.word	0x08013909

08006bb8 <STM32_PLC_LCD_Call_Keyboard_Logic>:
uint8_t STM32_PLC_LCD_Call_Keyboard_Logic(char word[]) {
 8006bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char text[17] = "";
 8006bbc:	2400      	movs	r4, #0
uint8_t STM32_PLC_LCD_Call_Keyboard_Logic(char word[]) {
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	4606      	mov	r6, r0
	char text[17] = "";
 8006bc2:	220d      	movs	r2, #13
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	a804      	add	r0, sp, #16
 8006bc8:	9403      	str	r4, [sp, #12]
 8006bca:	f007 fe27 	bl	800e81c <memset>
			uint16_t X = lcd.myTsData.X;
 8006bce:	4fad      	ldr	r7, [pc, #692]	; (8006e84 <STM32_PLC_LCD_Call_Keyboard_Logic+0x2cc>)
	uint8_t keyboard_page = 6; /* We start at this */
 8006bd0:	2506      	movs	r5, #6
		if (TSC2046_isPressed()) {
 8006bd2:	f7ff fea1 	bl	8006918 <TSC2046_isPressed>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d0fb      	beq.n	8006bd2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1a>
			TSC2046_GetTouchData();
 8006bda:	f7ff fe35 	bl	8006848 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8006bde:	8e39      	ldrh	r1, [r7, #48]	; 0x30
			uint16_t Y = lcd.myTsData.Y;
 8006be0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
			if (X >= 23 && X <= 63 && Y >= 70 && Y <= 110) {
 8006be2:	f1a1 0e17 	sub.w	lr, r1, #23
 8006be6:	fa1f fe8e 	uxth.w	lr, lr
 8006bea:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8006bee:	d81c      	bhi.n	8006c2a <STM32_PLC_LCD_Call_Keyboard_Logic+0x72>
 8006bf0:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 8006bf4:	2a28      	cmp	r2, #40	; 0x28
 8006bf6:	d818      	bhi.n	8006c2a <STM32_PLC_LCD_Call_Keyboard_Logic+0x72>
				if (k >= 0 && k < 16) {
 8006bf8:	2c0f      	cmp	r4, #15
 8006bfa:	d80a      	bhi.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 0 + 32 + 5*keyboard_page;
 8006bfc:	f104 0320 	add.w	r3, r4, #32
 8006c00:	eb0d 0203 	add.w	r2, sp, r3
 8006c04:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006c08:	3320      	adds	r3, #32
					k++;
 8006c0a:	3401      	adds	r4, #1
					text[k] = 1 + 32 + 5*keyboard_page;
 8006c0c:	f802 3c14 	strb.w	r3, [r2, #-20]
					k++;
 8006c10:	b2e4      	uxtb	r4, r4
			ILI9341_print_text(text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 8006c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c16:	2203      	movs	r2, #3
 8006c18:	e9cd 3200 	strd	r3, r2, [sp]
 8006c1c:	210f      	movs	r1, #15
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2219      	movs	r2, #25
 8006c22:	a803      	add	r0, sp, #12
 8006c24:	f7ff fc70 	bl	8006508 <ILI9341_print_text>
 8006c28:	e7d3      	b.n	8006bd2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1a>
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
 8006c2a:	f1a1 0c51 	sub.w	ip, r1, #81	; 0x51
 8006c2e:	fa1f fc8c 	uxth.w	ip, ip
 8006c32:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006c36:	d80d      	bhi.n	8006c54 <STM32_PLC_LCD_Call_Keyboard_Logic+0x9c>
 8006c38:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 8006c3c:	2a28      	cmp	r2, #40	; 0x28
 8006c3e:	d809      	bhi.n	8006c54 <STM32_PLC_LCD_Call_Keyboard_Logic+0x9c>
				if (k < 16) {
 8006c40:	2c0f      	cmp	r4, #15
 8006c42:	d8e6      	bhi.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 1 + 32 + 5*keyboard_page;
 8006c44:	f104 0320 	add.w	r3, r4, #32
 8006c48:	eb0d 0203 	add.w	r2, sp, r3
 8006c4c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006c50:	3321      	adds	r3, #33	; 0x21
 8006c52:	e7da      	b.n	8006c0a <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 139 && X <= 179 && Y >= 70 && Y <= 110) {
 8006c54:	f1a1 008b 	sub.w	r0, r1, #139	; 0x8b
 8006c58:	b280      	uxth	r0, r0
 8006c5a:	2828      	cmp	r0, #40	; 0x28
 8006c5c:	d80d      	bhi.n	8006c7a <STM32_PLC_LCD_Call_Keyboard_Logic+0xc2>
 8006c5e:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 8006c62:	2a28      	cmp	r2, #40	; 0x28
 8006c64:	d809      	bhi.n	8006c7a <STM32_PLC_LCD_Call_Keyboard_Logic+0xc2>
				if (k < 16) {
 8006c66:	2c0f      	cmp	r4, #15
 8006c68:	d8d3      	bhi.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 2 + 32 + 5*keyboard_page;
 8006c6a:	f104 0320 	add.w	r3, r4, #32
 8006c6e:	eb0d 0203 	add.w	r2, sp, r3
 8006c72:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006c76:	3322      	adds	r3, #34	; 0x22
 8006c78:	e7c7      	b.n	8006c0a <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 197 && X <= 237 && Y >= 70 && Y <= 110) {
 8006c7a:	f1a1 02c5 	sub.w	r2, r1, #197	; 0xc5
 8006c7e:	b292      	uxth	r2, r2
 8006c80:	2a28      	cmp	r2, #40	; 0x28
 8006c82:	d80e      	bhi.n	8006ca2 <STM32_PLC_LCD_Call_Keyboard_Logic+0xea>
 8006c84:	f1a3 0846 	sub.w	r8, r3, #70	; 0x46
 8006c88:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8006c8c:	d809      	bhi.n	8006ca2 <STM32_PLC_LCD_Call_Keyboard_Logic+0xea>
				if (k < 16) {
 8006c8e:	2c0f      	cmp	r4, #15
 8006c90:	d8bf      	bhi.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 3 + 32 + 5*keyboard_page;
 8006c92:	f104 0320 	add.w	r3, r4, #32
 8006c96:	eb0d 0203 	add.w	r2, sp, r3
 8006c9a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006c9e:	3323      	adds	r3, #35	; 0x23
 8006ca0:	e7b3      	b.n	8006c0a <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 255 && X <= 295 && Y >= 70 && Y <= 110) {
 8006ca2:	39ff      	subs	r1, #255	; 0xff
 8006ca4:	b289      	uxth	r1, r1
 8006ca6:	2928      	cmp	r1, #40	; 0x28
 8006ca8:	d80e      	bhi.n	8006cc8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x110>
 8006caa:	f1a3 0846 	sub.w	r8, r3, #70	; 0x46
 8006cae:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8006cb2:	d809      	bhi.n	8006cc8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x110>
				if (k < 16) {
 8006cb4:	2c0f      	cmp	r4, #15
 8006cb6:	d8ac      	bhi.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 4 + 32 + 5*keyboard_page;
 8006cb8:	f104 0320 	add.w	r3, r4, #32
 8006cbc:	eb0d 0203 	add.w	r2, sp, r3
 8006cc0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006cc4:	3324      	adds	r3, #36	; 0x24
 8006cc6:	e7a0      	b.n	8006c0a <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 23 && X <= 63 && Y >= 125 && Y <= 165) {
 8006cc8:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8006ccc:	d80f      	bhi.n	8006cee <STM32_PLC_LCD_Call_Keyboard_Logic+0x136>
 8006cce:	2b7c      	cmp	r3, #124	; 0x7c
 8006cd0:	f240 80ac 	bls.w	8006e2c <STM32_PLC_LCD_Call_Keyboard_Logic+0x274>
 8006cd4:	2ba5      	cmp	r3, #165	; 0xa5
 8006cd6:	f200 809e 	bhi.w	8006e16 <STM32_PLC_LCD_Call_Keyboard_Logic+0x25e>
				if (k < 16) {
 8006cda:	2c0f      	cmp	r4, #15
 8006cdc:	d899      	bhi.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 0 + 5 + 32 + 5*keyboard_page;
 8006cde:	f104 0320 	add.w	r3, r4, #32
 8006ce2:	eb0d 0203 	add.w	r2, sp, r3
 8006ce6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006cea:	3325      	adds	r3, #37	; 0x25
 8006cec:	e78d      	b.n	8006c0a <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8006cee:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006cf2:	d80e      	bhi.n	8006d12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x15a>
 8006cf4:	2b7c      	cmp	r3, #124	; 0x7c
 8006cf6:	d97a      	bls.n	8006dee <STM32_PLC_LCD_Call_Keyboard_Logic+0x236>
 8006cf8:	2ba5      	cmp	r3, #165	; 0xa5
 8006cfa:	f200 80bc 	bhi.w	8006e76 <STM32_PLC_LCD_Call_Keyboard_Logic+0x2be>
				if (k < 16) {
 8006cfe:	2c0f      	cmp	r4, #15
 8006d00:	d887      	bhi.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 1 + 5 + 32 + 5*keyboard_page;
 8006d02:	f104 0320 	add.w	r3, r4, #32
 8006d06:	eb0d 0203 	add.w	r2, sp, r3
 8006d0a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006d0e:	3326      	adds	r3, #38	; 0x26
 8006d10:	e77b      	b.n	8006c0a <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006d12:	2828      	cmp	r0, #40	; 0x28
 8006d14:	d86d      	bhi.n	8006df2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x23a>
 8006d16:	2b7c      	cmp	r3, #124	; 0x7c
 8006d18:	f240 808d 	bls.w	8006e36 <STM32_PLC_LCD_Call_Keyboard_Logic+0x27e>
 8006d1c:	2ba5      	cmp	r3, #165	; 0xa5
 8006d1e:	d828      	bhi.n	8006d72 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1ba>
				if (k < 16) {
 8006d20:	2c0f      	cmp	r4, #15
 8006d22:	f63f af76 	bhi.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 2 + 5 + 32 + 5*keyboard_page;
 8006d26:	f104 0320 	add.w	r3, r4, #32
 8006d2a:	eb0d 0203 	add.w	r2, sp, r3
 8006d2e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006d32:	3327      	adds	r3, #39	; 0x27
 8006d34:	e769      	b.n	8006c0a <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8006d36:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8006d3a:	d80c      	bhi.n	8006d56 <STM32_PLC_LCD_Call_Keyboard_Logic+0x19e>
 8006d3c:	2bb3      	cmp	r3, #179	; 0xb3
 8006d3e:	d936      	bls.n	8006dae <STM32_PLC_LCD_Call_Keyboard_Logic+0x1f6>
 8006d40:	2bdc      	cmp	r3, #220	; 0xdc
 8006d42:	d87b      	bhi.n	8006e3c <STM32_PLC_LCD_Call_Keyboard_Logic+0x284>
				if(keyboard_page > 0){
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	f43f af64 	beq.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					keyboard_page--;
 8006d4a:	3d01      	subs	r5, #1
					keyboard_page++;
 8006d4c:	b2ed      	uxtb	r5, r5
					shift_keyboard(keyboard_page);
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f7ff fefc 	bl	8006b4c <shift_keyboard>
 8006d54:	e75d      	b.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8006d56:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006d5a:	d808      	bhi.n	8006d6e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1b6>
 8006d5c:	2bb3      	cmp	r3, #179	; 0xb3
 8006d5e:	d929      	bls.n	8006db4 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1fc>
 8006d60:	2bdc      	cmp	r3, #220	; 0xdc
 8006d62:	d86b      	bhi.n	8006e3c <STM32_PLC_LCD_Call_Keyboard_Logic+0x284>
				if(keyboard_page < 17){
 8006d64:	2d10      	cmp	r5, #16
 8006d66:	f63f af54 	bhi.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					keyboard_page++;
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	e7ee      	b.n	8006d4c <STM32_PLC_LCD_Call_Keyboard_Logic+0x194>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8006d6e:	2828      	cmp	r0, #40	; 0x28
 8006d70:	d815      	bhi.n	8006d9e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1e6>
 8006d72:	2bb3      	cmp	r3, #179	; 0xb3
 8006d74:	d920      	bls.n	8006db8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x200>
 8006d76:	2bdc      	cmp	r3, #220	; 0xdc
 8006d78:	f63f af4b 	bhi.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
				memset(text, 0, sizeof(text));
 8006d7c:	2211      	movs	r2, #17
 8006d7e:	2100      	movs	r1, #0
 8006d80:	a803      	add	r0, sp, #12
 8006d82:	f007 fd4b 	bl	800e81c <memset>
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8006d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8006d90:	2332      	movs	r3, #50	; 0x32
 8006d92:	2118      	movs	r1, #24
 8006d94:	200c      	movs	r0, #12
 8006d96:	f7ff fa89 	bl	80062ac <ILI9341_fill_rect>
				k = 0;
 8006d9a:	2400      	movs	r4, #0
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8006d9c:	e739      	b.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8006d9e:	2a28      	cmp	r2, #40	; 0x28
 8006da0:	d80d      	bhi.n	8006dbe <STM32_PLC_LCD_Call_Keyboard_Logic+0x206>
 8006da2:	3bb4      	subs	r3, #180	; 0xb4
 8006da4:	2b28      	cmp	r3, #40	; 0x28
 8006da6:	f63f af34 	bhi.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
				return 0;
 8006daa:	2000      	movs	r0, #0
 8006dac:	e01c      	b.n	8006de8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x230>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8006dae:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006db2:	d801      	bhi.n	8006db8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x200>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8006db4:	2828      	cmp	r0, #40	; 0x28
 8006db6:	d8f2      	bhi.n	8006d9e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1e6>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8006db8:	2a28      	cmp	r2, #40	; 0x28
 8006dba:	f67f af2a 	bls.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
			} else if (X >= 255 && X <= 295 && Y >= 180 && Y <= 220) {
 8006dbe:	2928      	cmp	r1, #40	; 0x28
 8006dc0:	f63f af27 	bhi.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
 8006dc4:	3bb4      	subs	r3, #180	; 0xb4
 8006dc6:	2b28      	cmp	r3, #40	; 0x28
 8006dc8:	f63f af23 	bhi.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
				memcpy(word, text, 17);
 8006dcc:	aa03      	add	r2, sp, #12
 8006dce:	ac07      	add	r4, sp, #28
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	cb03      	ldmia	r3!, {r0, r1}
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	6030      	str	r0, [r6, #0]
 8006dd8:	6071      	str	r1, [r6, #4]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f106 0608 	add.w	r6, r6, #8
 8006de0:	d1f6      	bne.n	8006dd0 <STM32_PLC_LCD_Call_Keyboard_Logic+0x218>
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	7033      	strb	r3, [r6, #0]
				return 1;
 8006de6:	2001      	movs	r0, #1
}
 8006de8:	b008      	add	sp, #32
 8006dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006dee:	2828      	cmp	r0, #40	; 0x28
 8006df0:	d92a      	bls.n	8006e48 <STM32_PLC_LCD_Call_Keyboard_Logic+0x290>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8006df2:	2a28      	cmp	r2, #40	; 0x28
 8006df4:	d82b      	bhi.n	8006e4e <STM32_PLC_LCD_Call_Keyboard_Logic+0x296>
 8006df6:	f1a3 087d 	sub.w	r8, r3, #125	; 0x7d
 8006dfa:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8006dfe:	d89a      	bhi.n	8006d36 <STM32_PLC_LCD_Call_Keyboard_Logic+0x17e>
				if (k < 16) {
 8006e00:	2c0f      	cmp	r4, #15
 8006e02:	f63f af06 	bhi.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 3 + 5 + 32 + 5*keyboard_page;
 8006e06:	f104 0320 	add.w	r3, r4, #32
 8006e0a:	eb0d 0203 	add.w	r2, sp, r3
 8006e0e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006e12:	3328      	adds	r3, #40	; 0x28
 8006e14:	e6f9      	b.n	8006c0a <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8006e16:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006e1a:	d913      	bls.n	8006e44 <STM32_PLC_LCD_Call_Keyboard_Logic+0x28c>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006e1c:	2828      	cmp	r0, #40	; 0x28
 8006e1e:	d92d      	bls.n	8006e7c <STM32_PLC_LCD_Call_Keyboard_Logic+0x2c4>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8006e20:	2a28      	cmp	r2, #40	; 0x28
 8006e22:	d814      	bhi.n	8006e4e <STM32_PLC_LCD_Call_Keyboard_Logic+0x296>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8006e24:	2bb3      	cmp	r3, #179	; 0xb3
 8006e26:	f67f aef4 	bls.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
 8006e2a:	e789      	b.n	8006d40 <STM32_PLC_LCD_Call_Keyboard_Logic+0x188>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8006e2c:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006e30:	d9dd      	bls.n	8006dee <STM32_PLC_LCD_Call_Keyboard_Logic+0x236>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006e32:	2828      	cmp	r0, #40	; 0x28
 8006e34:	d8dd      	bhi.n	8006df2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x23a>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8006e36:	2a28      	cmp	r2, #40	; 0x28
 8006e38:	d809      	bhi.n	8006e4e <STM32_PLC_LCD_Call_Keyboard_Logic+0x296>
 8006e3a:	e6ea      	b.n	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8006e3c:	2828      	cmp	r0, #40	; 0x28
 8006e3e:	f67f aee8 	bls.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
 8006e42:	e7b9      	b.n	8006db8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x200>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006e44:	2828      	cmp	r0, #40	; 0x28
 8006e46:	d919      	bls.n	8006e7c <STM32_PLC_LCD_Call_Keyboard_Logic+0x2c4>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8006e48:	2a28      	cmp	r2, #40	; 0x28
 8006e4a:	f67f af74 	bls.w	8006d36 <STM32_PLC_LCD_Call_Keyboard_Logic+0x17e>
			} else if (X >= 255 && X <= 295 && Y >= 125 && Y <= 165) {
 8006e4e:	2928      	cmp	r1, #40	; 0x28
 8006e50:	f63f af71 	bhi.w	8006d36 <STM32_PLC_LCD_Call_Keyboard_Logic+0x17e>
 8006e54:	f1a3 087d 	sub.w	r8, r3, #125	; 0x7d
 8006e58:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8006e5c:	f63f af6b 	bhi.w	8006d36 <STM32_PLC_LCD_Call_Keyboard_Logic+0x17e>
				if (k < 16) {
 8006e60:	2c0f      	cmp	r4, #15
 8006e62:	f63f aed6 	bhi.w	8006c12 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 4 + 5 + 32 + 5*keyboard_page;
 8006e66:	f104 0320 	add.w	r3, r4, #32
 8006e6a:	eb0d 0203 	add.w	r2, sp, r3
 8006e6e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006e72:	3329      	adds	r3, #41	; 0x29
 8006e74:	e6c9      	b.n	8006c0a <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006e76:	2828      	cmp	r0, #40	; 0x28
 8006e78:	d8e6      	bhi.n	8006e48 <STM32_PLC_LCD_Call_Keyboard_Logic+0x290>
 8006e7a:	e76f      	b.n	8006d5c <STM32_PLC_LCD_Call_Keyboard_Logic+0x1a4>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8006e7c:	2bb3      	cmp	r3, #179	; 0xb3
 8006e7e:	f63f af5f 	bhi.w	8006d40 <STM32_PLC_LCD_Call_Keyboard_Logic+0x188>
 8006e82:	e799      	b.n	8006db8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x200>
 8006e84:	20002728 	.word	0x20002728

08006e88 <STM32_PLC_LCD_Call_Main_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

void STM32_PLC_LCD_Call_Main_Logic(uint8_t *frame_id, J1939 *j1939) {
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	460d      	mov	r5, r1
	if (TSC2046_isPressed()) {
 8006e8e:	f7ff fd43 	bl	8006918 <TSC2046_isPressed>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	f000 80c2 	beq.w	800701c <STM32_PLC_LCD_Call_Main_Logic+0x194>
		TSC2046_GetTouchData();
 8006e98:	f7ff fcd6 	bl	8006848 <TSC2046_GetTouchData>
		uint16_t X = lcd.myTsData.X;
 8006e9c:	4a60      	ldr	r2, [pc, #384]	; (8007020 <STM32_PLC_LCD_Call_Main_Logic+0x198>)
		uint16_t Y = lcd.myTsData.Y;
		/* Check which button we are pressing on */
		if (X >= 8 && X <= 37 && Y >= 8 && Y <= 37) {            /* First icon */
 8006e9e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8006ea0:	3b08      	subs	r3, #8
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b1d      	cmp	r3, #29
 8006ea6:	f200 80b9 	bhi.w	800701c <STM32_PLC_LCD_Call_Main_Logic+0x194>
		uint16_t Y = lcd.myTsData.Y;
 8006eaa:	8e53      	ldrh	r3, [r2, #50]	; 0x32
		if (X >= 8 && X <= 37 && Y >= 8 && Y <= 37) {            /* First icon */
 8006eac:	f1a3 0208 	sub.w	r2, r3, #8
 8006eb0:	2a1d      	cmp	r2, #29
 8006eb2:	d830      	bhi.n	8006f16 <STM32_PLC_LCD_Call_Main_Logic+0x8e>
			switch (*frame_id) {
 8006eb4:	7823      	ldrb	r3, [r4, #0]
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	f200 80b0 	bhi.w	800701c <STM32_PLC_LCD_Call_Main_Logic+0x194>
 8006ebc:	e8df f003 	tbb	[pc, r3]
 8006ec0:	140e0904 	.word	0x140e0904
 8006ec4:	201a      	.short	0x201a
 8006ec6:	26          	.byte	0x26
 8006ec7:	00          	.byte	0x00
			case 0: /* A */
				STM32_PLC_LCD_Show_Measurement_And_Time_Frame(frame_id);
 8006ec8:	4620      	mov	r0, r4
			else
				*frame_id = 0; /* Go to start frame */
			STM32_PLC_LCD_Show_Main_Frame(frame_id, true);
		}
	}
}
 8006eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Measurement_And_Time_Frame(frame_id);
 8006ece:	f7fd b8a7 	b.w	8004020 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame>
				STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame(frame_id);
 8006ed2:	4620      	mov	r0, r4
}
 8006ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame(frame_id);
 8006ed8:	f7fb bf18 	b.w	8002d0c <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(j1939, frame_id);
 8006edc:	4621      	mov	r1, r4
 8006ede:	4628      	mov	r0, r5
}
 8006ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(j1939, frame_id);
 8006ee4:	f7fe bbdc 	b.w	80056a0 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(j1939, frame_id);
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4628      	mov	r0, r5
}
 8006eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(j1939, frame_id);
 8006ef0:	f7fd be80 	b.w	8004bf4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(j1939, frame_id);
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4628      	mov	r0, r5
}
 8006ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(j1939, frame_id);
 8006efc:	f7fd beaa 	b.w	8004c54 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(j1939, frame_id);
 8006f00:	4621      	mov	r1, r4
 8006f02:	4628      	mov	r0, r5
}
 8006f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(j1939, frame_id);
 8006f08:	f7fe b836 	b.w	8004f78 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame>
				STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(frame_id);
 8006f0c:	4620      	mov	r0, r4
}
 8006f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(frame_id);
 8006f12:	f7fc ba77 	b.w	8003404 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 55 && Y <= 94) {    /* Second icon */
 8006f16:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 8006f1a:	2a27      	cmp	r2, #39	; 0x27
 8006f1c:	d82f      	bhi.n	8006f7e <STM32_PLC_LCD_Call_Main_Logic+0xf6>
			switch (*frame_id) {
 8006f1e:	7823      	ldrb	r3, [r4, #0]
 8006f20:	2b06      	cmp	r3, #6
 8006f22:	d87b      	bhi.n	800701c <STM32_PLC_LCD_Call_Main_Logic+0x194>
 8006f24:	e8df f003 	tbb	[pc, r3]
 8006f28:	140e0904 	.word	0x140e0904
 8006f2c:	201a      	.short	0x201a
 8006f2e:	26          	.byte	0x26
 8006f2f:	00          	.byte	0x00
				STM32_PLC_LCD_Show_Analog_Gain_Frame(frame_id);
 8006f30:	4620      	mov	r0, r4
}
 8006f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Gain_Frame(frame_id);
 8006f36:	f7fb bd17 	b.w	8002968 <STM32_PLC_LCD_Show_Analog_Gain_Frame>
				STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(frame_id);
 8006f3a:	4620      	mov	r0, r4
}
 8006f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(frame_id);
 8006f40:	f7fc bd7c 	b.w	8003a3c <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(j1939, frame_id);
 8006f44:	4621      	mov	r1, r4
 8006f46:	4628      	mov	r0, r5
}
 8006f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(j1939, frame_id);
 8006f4c:	f7fd b9ae 	b.w	80042ac <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(j1939, frame_id);
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
}
 8006f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(j1939, frame_id);
 8006f58:	f7fd be5c 	b.w	8004c14 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(j1939, frame_id);
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4628      	mov	r0, r5
}
 8006f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(j1939, frame_id);
 8006f64:	f7fe baaa 	b.w	80054bc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(j1939, frame_id);
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4628      	mov	r0, r5
}
 8006f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(j1939, frame_id);
 8006f70:	f7fe b926 	b.w	80051c0 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame>
				STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(frame_id);
 8006f74:	4620      	mov	r0, r4
}
 8006f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(frame_id);
 8006f7a:	f7fb bfe3 	b.w	8002f44 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 100 && Y <= 139) {  /* Third icon */
 8006f7e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006f82:	2a27      	cmp	r2, #39	; 0x27
 8006f84:	d82f      	bhi.n	8006fe6 <STM32_PLC_LCD_Call_Main_Logic+0x15e>
			switch (*frame_id) {
 8006f86:	7823      	ldrb	r3, [r4, #0]
 8006f88:	2b06      	cmp	r3, #6
 8006f8a:	d847      	bhi.n	800701c <STM32_PLC_LCD_Call_Main_Logic+0x194>
 8006f8c:	e8df f003 	tbb	[pc, r3]
 8006f90:	140e0904 	.word	0x140e0904
 8006f94:	201a      	.short	0x201a
 8006f96:	26          	.byte	0x26
 8006f97:	00          	.byte	0x00
				STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(frame_id);
 8006f98:	4620      	mov	r0, r4
}
 8006f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(frame_id);
 8006f9e:	f7fd b8a3 	b.w	80040e8 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame>
				STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(frame_id);
 8006fa2:	4620      	mov	r0, r4
}
 8006fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(frame_id);
 8006fa8:	f7fc bb66 	b.w	8003678 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(j1939, frame_id);
 8006fac:	4621      	mov	r1, r4
 8006fae:	4628      	mov	r0, r5
}
 8006fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(j1939, frame_id);
 8006fb4:	f7fd ba90 	b.w	80044d8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(j1939, frame_id);
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4628      	mov	r0, r5
}
 8006fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(j1939, frame_id);
 8006fc0:	f7fd be38 	b.w	8004c34 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(j1939, frame_id);
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	4628      	mov	r0, r5
}
 8006fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(j1939, frame_id);
 8006fcc:	f7fe bb32 	b.w	8005634 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame>
				STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(j1939, frame_id);
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4628      	mov	r0, r5
}
 8006fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(j1939, frame_id);
 8006fd8:	f7fc b8ac 	b.w	8003134 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame>
				STM32_PLC_LCD_Show_About_STM32_PLC_Frame(frame_id);
 8006fdc:	4620      	mov	r0, r4
}
 8006fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_About_STM32_PLC_Frame(frame_id);
 8006fe2:	f7fb bbd1 	b.w	8002788 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 146 && Y <= 185) {  /* Fourth icon */
 8006fe6:	f1a3 0292 	sub.w	r2, r3, #146	; 0x92
 8006fea:	2a27      	cmp	r2, #39	; 0x27
 8006fec:	d80c      	bhi.n	8007008 <STM32_PLC_LCD_Call_Main_Logic+0x180>
			if (*frame_id > 0)
 8006fee:	7823      	ldrb	r3, [r4, #0]
 8006ff0:	b113      	cbz	r3, 8006ff8 <STM32_PLC_LCD_Call_Main_Logic+0x170>
				*frame_id = *frame_id - 1; /* Got to previous frame */
 8006ff2:	3b01      	subs	r3, #1
				*frame_id = *frame_id + 1; /* Go to next frame */
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	e000      	b.n	8006ffa <STM32_PLC_LCD_Call_Main_Logic+0x172>
				*frame_id = 6; /* Go to last frame */
 8006ff8:	2306      	movs	r3, #6
 8006ffa:	7023      	strb	r3, [r4, #0]
			STM32_PLC_LCD_Show_Main_Frame(frame_id, true);
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	2101      	movs	r1, #1
}
 8007000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			STM32_PLC_LCD_Show_Main_Frame(frame_id, true);
 8007004:	f7fc be10 	b.w	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 193 && Y <= 232) {  /* Fifth icon */
 8007008:	3bc1      	subs	r3, #193	; 0xc1
 800700a:	2b27      	cmp	r3, #39	; 0x27
 800700c:	d806      	bhi.n	800701c <STM32_PLC_LCD_Call_Main_Logic+0x194>
			if (*frame_id < 6)
 800700e:	7823      	ldrb	r3, [r4, #0]
 8007010:	2b05      	cmp	r3, #5
 8007012:	d801      	bhi.n	8007018 <STM32_PLC_LCD_Call_Main_Logic+0x190>
				*frame_id = *frame_id + 1; /* Go to next frame */
 8007014:	3301      	adds	r3, #1
 8007016:	e7ed      	b.n	8006ff4 <STM32_PLC_LCD_Call_Main_Logic+0x16c>
				*frame_id = 0; /* Go to start frame */
 8007018:	2300      	movs	r3, #0
 800701a:	e7ee      	b.n	8006ffa <STM32_PLC_LCD_Call_Main_Logic+0x172>
}
 800701c:	bd38      	pop	{r3, r4, r5, pc}
 800701e:	bf00      	nop
 8007020:	20002728 	.word	0x20002728

08007024 <STM32_PLC_LCD_Call_Numpad_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Call_Numpad_Logic(bool decimalbutton_show, bool minusbutton_show, float *number_value) {
 8007024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool haveDot = false;
	char text[17] = "";
 8007028:	2400      	movs	r4, #0
uint8_t STM32_PLC_LCD_Call_Numpad_Logic(bool decimalbutton_show, bool minusbutton_show, float *number_value) {
 800702a:	b088      	sub	sp, #32
 800702c:	4606      	mov	r6, r0
 800702e:	4688      	mov	r8, r1
 8007030:	4691      	mov	r9, r2
	char text[17] = "";
 8007032:	4621      	mov	r1, r4
 8007034:	220d      	movs	r2, #13
 8007036:	a804      	add	r0, sp, #16
 8007038:	9403      	str	r4, [sp, #12]
 800703a:	f007 fbef 	bl	800e81c <memset>
	uint8_t k = 0;
	while (1) {
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 800703e:	f8df a288 	ldr.w	sl, [pc, #648]	; 80072c8 <STM32_PLC_LCD_Call_Numpad_Logic+0x2a4>
	bool haveDot = false;
 8007042:	4627      	mov	r7, r4
		if (TSC2046_isPressed()) {
 8007044:	f7ff fc68 	bl	8006918 <TSC2046_isPressed>
 8007048:	2800      	cmp	r0, #0
 800704a:	d0fb      	beq.n	8007044 <STM32_PLC_LCD_Call_Numpad_Logic+0x20>
			TSC2046_GetTouchData();
 800704c:	f7ff fbfc 	bl	8006848 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8007050:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
			uint16_t Y = lcd.myTsData.Y;
 8007054:	f8ba 3032 	ldrh.w	r3, [sl, #50]	; 0x32
			if (X >= 23 && X <= 63 && Y >= 70 && Y <= 110) {
 8007058:	f1a2 0c17 	sub.w	ip, r2, #23
 800705c:	fa1f fc8c 	uxth.w	ip, ip
 8007060:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8007064:	d819      	bhi.n	800709a <STM32_PLC_LCD_Call_Numpad_Logic+0x76>
 8007066:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
 800706a:	2928      	cmp	r1, #40	; 0x28
 800706c:	d815      	bhi.n	800709a <STM32_PLC_LCD_Call_Numpad_Logic+0x76>
				/* 0 */
				if (k >= 0 && k < 16) {
 800706e:	2c0f      	cmp	r4, #15
 8007070:	d807      	bhi.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '0';
 8007072:	f104 0320 	add.w	r3, r4, #32
 8007076:	446b      	add	r3, sp
 8007078:	2230      	movs	r2, #48	; 0x30
				}
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
				/* 1 */
				if (k < 16) {
					text[k] = '1';
					k++;
 800707a:	3401      	adds	r4, #1
					text[k] = '1';
 800707c:	f803 2c14 	strb.w	r2, [r3, #-20]
					k++;
 8007080:	b2e4      	uxtb	r4, r4
				/* OK */
				*number_value = atoff(text);
				return 1;
			}
			/* Display the selected number text */
			ILI9341_print_text(text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 8007082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007086:	2203      	movs	r2, #3
 8007088:	e9cd 3200 	strd	r3, r2, [sp]
 800708c:	210f      	movs	r1, #15
 800708e:	2300      	movs	r3, #0
 8007090:	2219      	movs	r2, #25
 8007092:	a803      	add	r0, sp, #12
 8007094:	f7ff fa38 	bl	8006508 <ILI9341_print_text>
 8007098:	e7d4      	b.n	8007044 <STM32_PLC_LCD_Call_Numpad_Logic+0x20>
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
 800709a:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
 800709e:	b280      	uxth	r0, r0
 80070a0:	2828      	cmp	r0, #40	; 0x28
 80070a2:	d80a      	bhi.n	80070ba <STM32_PLC_LCD_Call_Numpad_Logic+0x96>
 80070a4:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
 80070a8:	2928      	cmp	r1, #40	; 0x28
 80070aa:	d806      	bhi.n	80070ba <STM32_PLC_LCD_Call_Numpad_Logic+0x96>
				if (k < 16) {
 80070ac:	2c0f      	cmp	r4, #15
 80070ae:	d8e8      	bhi.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '1';
 80070b0:	f104 0320 	add.w	r3, r4, #32
 80070b4:	446b      	add	r3, sp
 80070b6:	2231      	movs	r2, #49	; 0x31
 80070b8:	e7df      	b.n	800707a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 139 && X <= 179 && Y >= 70 && Y <= 110) {
 80070ba:	f1a2 018b 	sub.w	r1, r2, #139	; 0x8b
 80070be:	b289      	uxth	r1, r1
 80070c0:	2928      	cmp	r1, #40	; 0x28
 80070c2:	d80a      	bhi.n	80070da <STM32_PLC_LCD_Call_Numpad_Logic+0xb6>
 80070c4:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 80070c8:	2d28      	cmp	r5, #40	; 0x28
 80070ca:	d806      	bhi.n	80070da <STM32_PLC_LCD_Call_Numpad_Logic+0xb6>
				if (k < 16) {
 80070cc:	2c0f      	cmp	r4, #15
 80070ce:	d8d8      	bhi.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '2';
 80070d0:	f104 0320 	add.w	r3, r4, #32
 80070d4:	446b      	add	r3, sp
 80070d6:	2232      	movs	r2, #50	; 0x32
 80070d8:	e7cf      	b.n	800707a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 197 && X <= 237 && Y >= 70 && Y <= 110) {
 80070da:	f1a2 05c5 	sub.w	r5, r2, #197	; 0xc5
 80070de:	b2ad      	uxth	r5, r5
 80070e0:	2d28      	cmp	r5, #40	; 0x28
 80070e2:	d80b      	bhi.n	80070fc <STM32_PLC_LCD_Call_Numpad_Logic+0xd8>
 80070e4:	f1a3 0e46 	sub.w	lr, r3, #70	; 0x46
 80070e8:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 80070ec:	d806      	bhi.n	80070fc <STM32_PLC_LCD_Call_Numpad_Logic+0xd8>
				if (k < 16) {
 80070ee:	2c0f      	cmp	r4, #15
 80070f0:	d8c7      	bhi.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '3';
 80070f2:	f104 0320 	add.w	r3, r4, #32
 80070f6:	446b      	add	r3, sp
 80070f8:	2233      	movs	r2, #51	; 0x33
 80070fa:	e7be      	b.n	800707a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 255 && X <= 295 && Y >= 70 && Y <= 110) {
 80070fc:	3aff      	subs	r2, #255	; 0xff
 80070fe:	b292      	uxth	r2, r2
 8007100:	2a28      	cmp	r2, #40	; 0x28
 8007102:	d80b      	bhi.n	800711c <STM32_PLC_LCD_Call_Numpad_Logic+0xf8>
 8007104:	f1a3 0e46 	sub.w	lr, r3, #70	; 0x46
 8007108:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 800710c:	d806      	bhi.n	800711c <STM32_PLC_LCD_Call_Numpad_Logic+0xf8>
				if (k < 16) {
 800710e:	2c0f      	cmp	r4, #15
 8007110:	d8b7      	bhi.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '4';
 8007112:	f104 0320 	add.w	r3, r4, #32
 8007116:	446b      	add	r3, sp
 8007118:	2234      	movs	r2, #52	; 0x34
 800711a:	e7ae      	b.n	800707a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 23 && X <= 63 && Y >= 125 && Y <= 165) {
 800711c:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8007120:	d80c      	bhi.n	800713c <STM32_PLC_LCD_Call_Numpad_Logic+0x118>
 8007122:	2b7c      	cmp	r3, #124	; 0x7c
 8007124:	f240 80a5 	bls.w	8007272 <STM32_PLC_LCD_Call_Numpad_Logic+0x24e>
 8007128:	2ba5      	cmp	r3, #165	; 0xa5
 800712a:	f200 809b 	bhi.w	8007264 <STM32_PLC_LCD_Call_Numpad_Logic+0x240>
				if (k < 16) {
 800712e:	2c0f      	cmp	r4, #15
 8007130:	d8a7      	bhi.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '5';
 8007132:	f104 0320 	add.w	r3, r4, #32
 8007136:	446b      	add	r3, sp
 8007138:	2235      	movs	r2, #53	; 0x35
 800713a:	e79e      	b.n	800707a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 800713c:	2828      	cmp	r0, #40	; 0x28
 800713e:	d80b      	bhi.n	8007158 <STM32_PLC_LCD_Call_Numpad_Logic+0x134>
 8007140:	2b7c      	cmp	r3, #124	; 0x7c
 8007142:	d97e      	bls.n	8007242 <STM32_PLC_LCD_Call_Numpad_Logic+0x21e>
 8007144:	2ba5      	cmp	r3, #165	; 0xa5
 8007146:	f200 80b5 	bhi.w	80072b4 <STM32_PLC_LCD_Call_Numpad_Logic+0x290>
				if (k < 16) {
 800714a:	2c0f      	cmp	r4, #15
 800714c:	d899      	bhi.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '6';
 800714e:	f104 0320 	add.w	r3, r4, #32
 8007152:	446b      	add	r3, sp
 8007154:	2236      	movs	r2, #54	; 0x36
 8007156:	e790      	b.n	800707a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007158:	2928      	cmp	r1, #40	; 0x28
 800715a:	d874      	bhi.n	8007246 <STM32_PLC_LCD_Call_Numpad_Logic+0x222>
 800715c:	2b7c      	cmp	r3, #124	; 0x7c
 800715e:	f240 808c 	bls.w	800727a <STM32_PLC_LCD_Call_Numpad_Logic+0x256>
 8007162:	2ba5      	cmp	r3, #165	; 0xa5
 8007164:	d837      	bhi.n	80071d6 <STM32_PLC_LCD_Call_Numpad_Logic+0x1b2>
				if (k < 16) {
 8007166:	2c0f      	cmp	r4, #15
 8007168:	d88b      	bhi.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '7';
 800716a:	f104 0320 	add.w	r3, r4, #32
 800716e:	446b      	add	r3, sp
 8007170:	2237      	movs	r2, #55	; 0x37
 8007172:	e782      	b.n	800707a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8007174:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8007178:	d80f      	bhi.n	800719a <STM32_PLC_LCD_Call_Numpad_Logic+0x176>
 800717a:	2bb3      	cmp	r3, #179	; 0xb3
 800717c:	d94a      	bls.n	8007214 <STM32_PLC_LCD_Call_Numpad_Logic+0x1f0>
 800717e:	2bdc      	cmp	r3, #220	; 0xdc
 8007180:	d87e      	bhi.n	8007280 <STM32_PLC_LCD_Call_Numpad_Logic+0x25c>
				if (minusbutton_show == true && k == 0) {
 8007182:	f1b8 0f00 	cmp.w	r8, #0
 8007186:	f43f af7c 	beq.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 800718a:	2c00      	cmp	r4, #0
 800718c:	f47f af79 	bne.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '-';
 8007190:	232d      	movs	r3, #45	; 0x2d
 8007192:	f88d 300c 	strb.w	r3, [sp, #12]
					k++;
 8007196:	2401      	movs	r4, #1
 8007198:	e773      	b.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 800719a:	2828      	cmp	r0, #40	; 0x28
 800719c:	d819      	bhi.n	80071d2 <STM32_PLC_LCD_Call_Numpad_Logic+0x1ae>
 800719e:	2bb3      	cmp	r3, #179	; 0xb3
 80071a0:	d93a      	bls.n	8007218 <STM32_PLC_LCD_Call_Numpad_Logic+0x1f4>
 80071a2:	2bdc      	cmp	r3, #220	; 0xdc
 80071a4:	d86c      	bhi.n	8007280 <STM32_PLC_LCD_Call_Numpad_Logic+0x25c>
				if (decimalbutton_show == true && k > 0 && haveDot == false && k < 16) {
 80071a6:	2e00      	cmp	r6, #0
 80071a8:	f43f af6b 	beq.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 80071ac:	2c00      	cmp	r4, #0
 80071ae:	f43f af68 	beq.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 80071b2:	2f00      	cmp	r7, #0
 80071b4:	f47f af65 	bne.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 80071b8:	2c0f      	cmp	r4, #15
 80071ba:	f63f af62 	bhi.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '.';
 80071be:	f104 0320 	add.w	r3, r4, #32
 80071c2:	446b      	add	r3, sp
 80071c4:	222e      	movs	r2, #46	; 0x2e
					k++;
 80071c6:	3401      	adds	r4, #1
					text[k] = '.';
 80071c8:	f803 2c14 	strb.w	r2, [r3, #-20]
					k++;
 80071cc:	b2e4      	uxtb	r4, r4
					haveDot = true;
 80071ce:	4637      	mov	r7, r6
 80071d0:	e757      	b.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 80071d2:	2928      	cmp	r1, #40	; 0x28
 80071d4:	d816      	bhi.n	8007204 <STM32_PLC_LCD_Call_Numpad_Logic+0x1e0>
 80071d6:	2bb3      	cmp	r3, #179	; 0xb3
 80071d8:	d920      	bls.n	800721c <STM32_PLC_LCD_Call_Numpad_Logic+0x1f8>
 80071da:	2bdc      	cmp	r3, #220	; 0xdc
 80071dc:	f63f af51 	bhi.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
				memset(text, 0, sizeof(text));
 80071e0:	2211      	movs	r2, #17
 80071e2:	2100      	movs	r1, #0
 80071e4:	a803      	add	r0, sp, #12
 80071e6:	f007 fb19 	bl	800e81c <memset>
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 80071ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	f44f 729a 	mov.w	r2, #308	; 0x134
 80071f4:	2332      	movs	r3, #50	; 0x32
 80071f6:	2118      	movs	r1, #24
 80071f8:	200c      	movs	r0, #12
				k = 0;
 80071fa:	2400      	movs	r4, #0
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 80071fc:	f7ff f856 	bl	80062ac <ILI9341_fill_rect>
				haveDot = false;
 8007200:	4627      	mov	r7, r4
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8007202:	e73e      	b.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8007204:	2d28      	cmp	r5, #40	; 0x28
 8007206:	d80c      	bhi.n	8007222 <STM32_PLC_LCD_Call_Numpad_Logic+0x1fe>
 8007208:	3bb4      	subs	r3, #180	; 0xb4
 800720a:	2b28      	cmp	r3, #40	; 0x28
 800720c:	f63f af39 	bhi.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
				return 0;
 8007210:	2000      	movs	r0, #0
 8007212:	e013      	b.n	800723c <STM32_PLC_LCD_Call_Numpad_Logic+0x218>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8007214:	2828      	cmp	r0, #40	; 0x28
 8007216:	d801      	bhi.n	800721c <STM32_PLC_LCD_Call_Numpad_Logic+0x1f8>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8007218:	2928      	cmp	r1, #40	; 0x28
 800721a:	d8f3      	bhi.n	8007204 <STM32_PLC_LCD_Call_Numpad_Logic+0x1e0>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 800721c:	2d28      	cmp	r5, #40	; 0x28
 800721e:	f67f af30 	bls.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 255 && X <= 295 && Y >= 180 && Y <= 220) {
 8007222:	2a28      	cmp	r2, #40	; 0x28
 8007224:	f63f af2d 	bhi.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 8007228:	3bb4      	subs	r3, #180	; 0xb4
 800722a:	2b28      	cmp	r3, #40	; 0x28
 800722c:	f63f af29 	bhi.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
				*number_value = atoff(text);
 8007230:	a803      	add	r0, sp, #12
 8007232:	f007 fa9d 	bl	800e770 <atoff>
				return 1;
 8007236:	2001      	movs	r0, #1
				*number_value = atoff(text);
 8007238:	ed89 0a00 	vstr	s0, [r9]
		}
	}
}
 800723c:	b008      	add	sp, #32
 800723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007242:	2928      	cmp	r1, #40	; 0x28
 8007244:	d922      	bls.n	800728c <STM32_PLC_LCD_Call_Numpad_Logic+0x268>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8007246:	2d28      	cmp	r5, #40	; 0x28
 8007248:	d823      	bhi.n	8007292 <STM32_PLC_LCD_Call_Numpad_Logic+0x26e>
 800724a:	f1a3 0e7d 	sub.w	lr, r3, #125	; 0x7d
 800724e:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8007252:	d88f      	bhi.n	8007174 <STM32_PLC_LCD_Call_Numpad_Logic+0x150>
				if (k < 16) {
 8007254:	2c0f      	cmp	r4, #15
 8007256:	f63f af14 	bhi.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '8';
 800725a:	f104 0320 	add.w	r3, r4, #32
 800725e:	446b      	add	r3, sp
 8007260:	2238      	movs	r2, #56	; 0x38
 8007262:	e70a      	b.n	800707a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8007264:	2828      	cmp	r0, #40	; 0x28
 8007266:	d90f      	bls.n	8007288 <STM32_PLC_LCD_Call_Numpad_Logic+0x264>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007268:	2928      	cmp	r1, #40	; 0x28
 800726a:	d826      	bhi.n	80072ba <STM32_PLC_LCD_Call_Numpad_Logic+0x296>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 800726c:	2bb3      	cmp	r3, #179	; 0xb3
 800726e:	d886      	bhi.n	800717e <STM32_PLC_LCD_Call_Numpad_Logic+0x15a>
 8007270:	e7d4      	b.n	800721c <STM32_PLC_LCD_Call_Numpad_Logic+0x1f8>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8007272:	2828      	cmp	r0, #40	; 0x28
 8007274:	d9e5      	bls.n	8007242 <STM32_PLC_LCD_Call_Numpad_Logic+0x21e>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007276:	2928      	cmp	r1, #40	; 0x28
 8007278:	d8e5      	bhi.n	8007246 <STM32_PLC_LCD_Call_Numpad_Logic+0x222>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 800727a:	2d28      	cmp	r5, #40	; 0x28
 800727c:	d809      	bhi.n	8007292 <STM32_PLC_LCD_Call_Numpad_Logic+0x26e>
 800727e:	e700      	b.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8007280:	2928      	cmp	r1, #40	; 0x28
 8007282:	f67f aefe 	bls.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 8007286:	e7c9      	b.n	800721c <STM32_PLC_LCD_Call_Numpad_Logic+0x1f8>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007288:	2928      	cmp	r1, #40	; 0x28
 800728a:	d9ef      	bls.n	800726c <STM32_PLC_LCD_Call_Numpad_Logic+0x248>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 800728c:	2d28      	cmp	r5, #40	; 0x28
 800728e:	f67f af71 	bls.w	8007174 <STM32_PLC_LCD_Call_Numpad_Logic+0x150>
			} else if (X >= 255 && X <= 295 && Y >= 125 && Y <= 165) {
 8007292:	2a28      	cmp	r2, #40	; 0x28
 8007294:	f63f af6e 	bhi.w	8007174 <STM32_PLC_LCD_Call_Numpad_Logic+0x150>
 8007298:	f1a3 0e7d 	sub.w	lr, r3, #125	; 0x7d
 800729c:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 80072a0:	f63f af68 	bhi.w	8007174 <STM32_PLC_LCD_Call_Numpad_Logic+0x150>
				if (k < 16) {
 80072a4:	2c0f      	cmp	r4, #15
 80072a6:	f63f aeec 	bhi.w	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '9';
 80072aa:	f104 0320 	add.w	r3, r4, #32
 80072ae:	446b      	add	r3, sp
 80072b0:	2239      	movs	r2, #57	; 0x39
 80072b2:	e6e2      	b.n	800707a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 80072b4:	2928      	cmp	r1, #40	; 0x28
 80072b6:	d8e9      	bhi.n	800728c <STM32_PLC_LCD_Call_Numpad_Logic+0x268>
 80072b8:	e771      	b.n	800719e <STM32_PLC_LCD_Call_Numpad_Logic+0x17a>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 80072ba:	2d28      	cmp	r5, #40	; 0x28
 80072bc:	d8e9      	bhi.n	8007292 <STM32_PLC_LCD_Call_Numpad_Logic+0x26e>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 80072be:	2bb3      	cmp	r3, #179	; 0xb3
 80072c0:	f63f af5d 	bhi.w	800717e <STM32_PLC_LCD_Call_Numpad_Logic+0x15a>
 80072c4:	e6dd      	b.n	8007082 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 80072c6:	bf00      	nop
 80072c8:	20002728 	.word	0x20002728

080072cc <STM32_PLC_LCD_Call_One_Button_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Call_One_Button_Logic(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80072cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while (1) {
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 80072d0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800731c <STM32_PLC_LCD_Call_One_Button_Logic+0x50>
uint8_t STM32_PLC_LCD_Call_One_Button_Logic(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80072d4:	4604      	mov	r4, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	4616      	mov	r6, r2
 80072da:	461f      	mov	r7, r3
		if (TSC2046_isPressed()) {
 80072dc:	f7ff fb1c 	bl	8006918 <TSC2046_isPressed>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d0fb      	beq.n	80072dc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
			TSC2046_GetTouchData();
 80072e4:	f7ff fab0 	bl	8006848 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 80072e8:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
			uint16_t Y = lcd.myTsData.Y;
			if (X >= x1 && X <= x2 && Y >= y1 && Y <= y2) {
 80072ec:	42a3      	cmp	r3, r4
 80072ee:	d3f5      	bcc.n	80072dc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
 80072f0:	42b3      	cmp	r3, r6
 80072f2:	d8f3      	bhi.n	80072dc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
			uint16_t Y = lcd.myTsData.Y;
 80072f4:	f8b8 3032 	ldrh.w	r3, [r8, #50]	; 0x32
			if (X >= x1 && X <= x2 && Y >= y1 && Y <= y2) {
 80072f8:	42ab      	cmp	r3, r5
 80072fa:	d3ef      	bcc.n	80072dc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
 80072fc:	42bb      	cmp	r3, r7
 80072fe:	d8ed      	bhi.n	80072dc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
				ILI9341_hollow_rect(x1, y1, x2, y2, COLOR_MAGENTA);
 8007300:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	b220      	sxth	r0, r4
 8007308:	b23b      	sxth	r3, r7
 800730a:	b232      	sxth	r2, r6
 800730c:	b229      	sxth	r1, r5
 800730e:	f7ff f861 	bl	80063d4 <ILI9341_hollow_rect>
				return 1; /* Button 1 */
			}
		}
	}
}
 8007312:	2001      	movs	r0, #1
 8007314:	b002      	add	sp, #8
 8007316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800731a:	bf00      	nop
 800731c:	20002728 	.word	0x20002728

08007320 <STM32_PLC_LCD_Call_Two_Button_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Call_Two_Button_Logic(uint16_t b1_x1, uint16_t b1_y1, uint16_t b1_x2, uint16_t b1_y2, uint16_t b2_x1, uint16_t b2_y1, uint16_t b2_x2, uint16_t b2_y2) {
 8007320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8007328:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800732c:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
 8007330:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8007334:	4604      	mov	r4, r0
 8007336:	468b      	mov	fp, r1
 8007338:	4615      	mov	r5, r2
 800733a:	461e      	mov	r6, r3
	while (1) {
		if (TSC2046_isPressed()) {
 800733c:	f7ff faec 	bl	8006918 <TSC2046_isPressed>
 8007340:	2800      	cmp	r0, #0
 8007342:	d0fb      	beq.n	800733c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
			TSC2046_GetTouchData();
 8007344:	f7ff fa80 	bl	8006848 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8007348:	4b17      	ldr	r3, [pc, #92]	; (80073a8 <STM32_PLC_LCD_Call_Two_Button_Logic+0x88>)
 800734a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			uint16_t Y = lcd.myTsData.Y;
 800734c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
			if (X >= b1_x1 && X <= b1_x2 && Y >= b1_y1 && Y <= b1_y2) {
 800734e:	42a2      	cmp	r2, r4
 8007350:	d313      	bcc.n	800737a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
 8007352:	42aa      	cmp	r2, r5
 8007354:	d811      	bhi.n	800737a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
 8007356:	455b      	cmp	r3, fp
 8007358:	d30f      	bcc.n	800737a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
 800735a:	42b3      	cmp	r3, r6
 800735c:	d80d      	bhi.n	800737a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
				ILI9341_hollow_rect(b1_x1, b1_y1, b1_x2, b1_y2, COLOR_MAGENTA);
 800735e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	b220      	sxth	r0, r4
 8007366:	b233      	sxth	r3, r6
 8007368:	b22a      	sxth	r2, r5
 800736a:	fa0f f18b 	sxth.w	r1, fp
 800736e:	f7ff f831 	bl	80063d4 <ILI9341_hollow_rect>
				return 1; /* Button 1 */
 8007372:	2001      	movs	r0, #1
				ILI9341_hollow_rect(b2_x1, b2_y1, b2_x2, b2_y2, COLOR_MAGENTA);
				return 0; /* Button 2 */
			}
		}
	}
}
 8007374:	b003      	add	sp, #12
 8007376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (X >= b2_x1 && X <= b2_x2 && Y >= b2_y1 && Y <= b2_y2) {
 800737a:	42ba      	cmp	r2, r7
 800737c:	d3de      	bcc.n	800733c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
 800737e:	454a      	cmp	r2, r9
 8007380:	d8dc      	bhi.n	800733c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
 8007382:	4543      	cmp	r3, r8
 8007384:	d3da      	bcc.n	800733c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
 8007386:	4553      	cmp	r3, sl
 8007388:	d8d8      	bhi.n	800733c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
				ILI9341_hollow_rect(b2_x1, b2_y1, b2_x2, b2_y2, COLOR_MAGENTA);
 800738a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	b238      	sxth	r0, r7
 8007392:	fa0f f38a 	sxth.w	r3, sl
 8007396:	fa0f f289 	sxth.w	r2, r9
 800739a:	fa0f f188 	sxth.w	r1, r8
 800739e:	f7ff f819 	bl	80063d4 <ILI9341_hollow_rect>
				return 0; /* Button 2 */
 80073a2:	2000      	movs	r0, #0
 80073a4:	e7e6      	b.n	8007374 <STM32_PLC_LCD_Call_Two_Button_Logic+0x54>
 80073a6:	bf00      	nop
 80073a8:	20002728 	.word	0x20002728

080073ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073ac:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80073ae:	b672      	cpsid	i
  __disable_irq();

  while (1)
  {
	  HAL_Delay(1000);
	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 80073b0:	4c09      	ldr	r4, [pc, #36]	; (80073d8 <Error_Handler+0x2c>)
	  HAL_Delay(1000);
 80073b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073b6:	f001 fb77 	bl	8008aa8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 80073ba:	2200      	movs	r2, #0
 80073bc:	2120      	movs	r1, #32
 80073be:	4620      	mov	r0, r4
 80073c0:	f002 fa06 	bl	80097d0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80073c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073c8:	f001 fb6e 	bl	8008aa8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 80073cc:	2201      	movs	r2, #1
 80073ce:	2120      	movs	r1, #32
 80073d0:	4620      	mov	r0, r4
 80073d2:	f002 f9fd 	bl	80097d0 <HAL_GPIO_WritePin>
  while (1)
 80073d6:	e7ec      	b.n	80073b2 <Error_Handler+0x6>
 80073d8:	48000800 	.word	0x48000800

080073dc <SystemClock_Config>:
{
 80073dc:	b530      	push	{r4, r5, lr}
 80073de:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073e0:	2228      	movs	r2, #40	; 0x28
 80073e2:	2100      	movs	r1, #0
 80073e4:	a805      	add	r0, sp, #20
 80073e6:	f007 fa19 	bl	800e81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073ea:	2214      	movs	r2, #20
 80073ec:	2100      	movs	r1, #0
 80073ee:	4668      	mov	r0, sp
 80073f0:	f007 fa14 	bl	800e81c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80073f4:	222c      	movs	r2, #44	; 0x2c
 80073f6:	2100      	movs	r1, #0
 80073f8:	a80f      	add	r0, sp, #60	; 0x3c
 80073fa:	f007 fa0f 	bl	800e81c <memset>
  HAL_PWR_EnableBkUpAccess();
 80073fe:	f003 f867 	bl	800a4d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007402:	4a23      	ldr	r2, [pc, #140]	; (8007490 <SystemClock_Config+0xb4>)
 8007404:	6a13      	ldr	r3, [r2, #32]
 8007406:	f023 0318 	bic.w	r3, r3, #24
 800740a:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800740c:	2005      	movs	r0, #5
 800740e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007412:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007414:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007418:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800741a:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800741e:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8007420:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007424:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007426:	e9cd 2407 	strd	r2, r4, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800742a:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800742c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800742e:	f003 f86d 	bl	800a50c <HAL_RCC_OscConfig>
 8007432:	b108      	cbz	r0, 8007438 <SystemClock_Config+0x5c>
    Error_Handler();
 8007434:	f7ff ffba 	bl	80073ac <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007438:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800743a:	e9cd 3500 	strd	r3, r5, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800743e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007442:	e9cd 5003 	strd	r5, r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007446:	9002      	str	r0, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007448:	4621      	mov	r1, r4
 800744a:	4668      	mov	r0, sp
 800744c:	f003 fb12 	bl	800aa74 <HAL_RCC_ClockConfig>
 8007450:	2800      	cmp	r0, #0
 8007452:	d1ef      	bne.n	8007434 <SystemClock_Config+0x58>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007458:	f44f 3242 	mov.w	r2, #198656	; 0x30800
 800745c:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8007460:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007464:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007466:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV8;
 8007468:	f04f 4318 	mov.w	r3, #2550136832	; 0x98000000
 800746c:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800746e:	f003 fbad 	bl	800abcc <HAL_RCCEx_PeriphCLKConfig>
 8007472:	2800      	cmp	r0, #0
 8007474:	d1de      	bne.n	8007434 <SystemClock_Config+0x58>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8007476:	f44f 7000 	mov.w	r0, #512	; 0x200
 800747a:	f003 f831 	bl	800a4e0 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 800747e:	4628      	mov	r0, r5
 8007480:	f003 f82e 	bl	800a4e0 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 8007484:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007488:	f003 f82a 	bl	800a4e0 <HAL_PWREx_EnableSDADC>
}
 800748c:	b01b      	add	sp, #108	; 0x6c
 800748e:	bd30      	pop	{r4, r5, pc}
 8007490:	40021000 	.word	0x40021000

08007494 <main>:
{
 8007494:	b580      	push	{r7, lr}
 8007496:	f5ad 5dbf 	sub.w	sp, sp, #6112	; 0x17e0
 800749a:	b084      	sub	sp, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800749c:	4e73      	ldr	r6, [pc, #460]	; (800766c <main+0x1d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800749e:	ad78      	add	r5, sp, #480	; 0x1e0
  HAL_Init();
 80074a0:	f001 fade 	bl	8008a60 <HAL_Init>
  SystemClock_Config();
 80074a4:	f7ff ff9a 	bl	80073dc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074a8:	2214      	movs	r2, #20
 80074aa:	4628      	mov	r0, r5
 80074ac:	2100      	movs	r1, #0
 80074ae:	f007 f9b5 	bl	800e81c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80074b2:	6973      	ldr	r3, [r6, #20]
 80074b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074b8:	6173      	str	r3, [r6, #20]
 80074ba:	6973      	ldr	r3, [r6, #20]
 80074bc:	aa08      	add	r2, sp, #32
 80074be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074c6:	6973      	ldr	r3, [r6, #20]
 80074c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074cc:	6173      	str	r3, [r6, #20]
 80074ce:	6973      	ldr	r3, [r6, #20]
 80074d0:	aa09      	add	r2, sp, #36	; 0x24
 80074d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80074da:	6973      	ldr	r3, [r6, #20]
 80074dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074e0:	6173      	str	r3, [r6, #20]
 80074e2:	6973      	ldr	r3, [r6, #20]
 80074e4:	aa0a      	add	r2, sp, #40	; 0x28
 80074e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ee:	6973      	ldr	r3, [r6, #20]
 80074f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f4:	6173      	str	r3, [r6, #20]
 80074f6:	6973      	ldr	r3, [r6, #20]
 80074f8:	aa0b      	add	r2, sp, #44	; 0x2c
 80074fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007502:	6973      	ldr	r3, [r6, #20]
 8007504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007508:	6173      	str	r3, [r6, #20]
 800750a:	6973      	ldr	r3, [r6, #20]
 800750c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007510:	930c      	str	r3, [sp, #48]	; 0x30
 8007512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007514:	6973      	ldr	r3, [r6, #20]
 8007516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800751a:	6173      	str	r3, [r6, #20]
 800751c:	6973      	ldr	r3, [r6, #20]
 800751e:	aa0d      	add	r2, sp, #52	; 0x34
 8007520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, GPIO_PIN_RESET);
 8007528:	2180      	movs	r1, #128	; 0x80
 800752a:	2200      	movs	r2, #0
 800752c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007530:	f002 f94e 	bl	80097d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 8007534:	484e      	ldr	r0, [pc, #312]	; (8007670 <main+0x1dc>)
 8007536:	2200      	movs	r2, #0
 8007538:	2130      	movs	r1, #48	; 0x30
 800753a:	f002 f949 	bl	80097d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, CS0_Pin|CS1_Pin|CS2_Pin, GPIO_PIN_RESET);
 800753e:	2200      	movs	r2, #0
 8007540:	484c      	ldr	r0, [pc, #304]	; (8007674 <main+0x1e0>)
 8007542:	21e0      	movs	r1, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007544:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOD, CS0_Pin|CS1_Pin|CS2_Pin, GPIO_PIN_RESET);
 8007546:	f002 f943 	bl	80097d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800754a:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800754c:	237c      	movs	r3, #124	; 0x7c
 800754e:	e9c5 3400 	strd	r3, r4, [r5]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007552:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007554:	4629      	mov	r1, r5
 8007556:	4848      	ldr	r0, [pc, #288]	; (8007678 <main+0x1e4>)
 8007558:	f002 f870 	bl	800963c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI5_Pin;
 800755c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007560:	e9c5 3400 	strd	r3, r4, [r5]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007564:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(DI5_GPIO_Port, &GPIO_InitStruct);
 8007566:	4629      	mov	r1, r5
 8007568:	4841      	ldr	r0, [pc, #260]	; (8007670 <main+0x1dc>)
 800756a:	f002 f867 	bl	800963c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI8_Pin|DI9_Pin;
 800756e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007572:	e9c5 3400 	strd	r3, r4, [r5]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007576:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007578:	4629      	mov	r1, r5
 800757a:	4840      	ldr	r0, [pc, #256]	; (800767c <main+0x1e8>)
 800757c:	f002 f85e 	bl	800963c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007580:	2701      	movs	r7, #1
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	e9c5 3700 	strd	r3, r7, [r5]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007588:	e9c5 4402 	strd	r4, r4, [r5, #8]
  HAL_GPIO_Init(LED_USB_GPIO_Port, &GPIO_InitStruct);
 800758c:	4629      	mov	r1, r5
 800758e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_ERROR_Pin;
 8007592:	f04f 0830 	mov.w	r8, #48	; 0x30
  HAL_GPIO_Init(LED_USB_GPIO_Port, &GPIO_InitStruct);
 8007596:	f002 f851 	bl	800963c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800759a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800759e:	4629      	mov	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075a0:	e9c5 8700 	strd	r8, r7, [r5]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075a4:	4832      	ldr	r0, [pc, #200]	; (8007670 <main+0x1dc>)
 80075a6:	f002 f849 	bl	800963c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS0_Pin|CS1_Pin|CS2_Pin;
 80075aa:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075ac:	e9c5 3700 	strd	r3, r7, [r5]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b0:	e9c5 4402 	strd	r4, r4, [r5, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075b4:	4629      	mov	r1, r5
 80075b6:	482f      	ldr	r0, [pc, #188]	; (8007674 <main+0x1e0>)
 80075b8:	f002 f840 	bl	800963c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075bc:	e9c5 8400 	strd	r8, r4, [r5]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c0:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075c2:	4629      	mov	r1, r5
 80075c4:	482e      	ldr	r0, [pc, #184]	; (8007680 <main+0x1ec>)
 80075c6:	f002 f839 	bl	800963c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80075ca:	6973      	ldr	r3, [r6, #20]
 80075cc:	433b      	orrs	r3, r7
 80075ce:	6173      	str	r3, [r6, #20]
 80075d0:	6973      	ldr	r3, [r6, #20]
 80075d2:	aa06      	add	r2, sp, #24
 80075d4:	403b      	ands	r3, r7
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80075da:	6973      	ldr	r3, [r6, #20]
 80075dc:	f043 0302 	orr.w	r3, r3, #2
 80075e0:	6173      	str	r3, [r6, #20]
 80075e2:	6973      	ldr	r3, [r6, #20]
 80075e4:	aa07      	add	r2, sp, #28
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80075ee:	4621      	mov	r1, r4
 80075f0:	4622      	mov	r2, r4
 80075f2:	200b      	movs	r0, #11
 80075f4:	f001 fd78 	bl	80090e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80075f8:	200b      	movs	r0, #11
 80075fa:	f001 fda7 	bl	800914c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80075fe:	4622      	mov	r2, r4
 8007600:	4621      	mov	r1, r4
 8007602:	200d      	movs	r0, #13
 8007604:	f001 fd70 	bl	80090e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007608:	200d      	movs	r0, #13
 800760a:	f001 fd9f 	bl	800914c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800760e:	4622      	mov	r2, r4
 8007610:	4621      	mov	r1, r4
 8007612:	200f      	movs	r0, #15
 8007614:	f001 fd68 	bl	80090e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007618:	200f      	movs	r0, #15
 800761a:	f001 fd97 	bl	800914c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800761e:	4622      	mov	r2, r4
 8007620:	4621      	mov	r1, r4
 8007622:	203a      	movs	r0, #58	; 0x3a
 8007624:	f001 fd60 	bl	80090e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8007628:	203a      	movs	r0, #58	; 0x3a
 800762a:	f001 fd8f 	bl	800914c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800762e:	4622      	mov	r2, r4
 8007630:	4621      	mov	r1, r4
 8007632:	203b      	movs	r0, #59	; 0x3b
 8007634:	f001 fd58 	bl	80090e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8007638:	203b      	movs	r0, #59	; 0x3b
 800763a:	f001 fd87 	bl	800914c <HAL_NVIC_EnableIRQ>
  DAC_ChannelConfTypeDef sConfig = {0};
 800763e:	ad1f      	add	r5, sp, #124	; 0x7c
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8007640:	4622      	mov	r2, r4
 8007642:	4621      	mov	r1, r4
 8007644:	203c      	movs	r0, #60	; 0x3c
 8007646:	f001 fd4f 	bl	80090e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800764a:	203c      	movs	r0, #60	; 0x3c
 800764c:	f001 fd7e 	bl	800914c <HAL_NVIC_EnableIRQ>
  DAC_ChannelConfTypeDef sConfig = {0};
 8007650:	e9c5 4400 	strd	r4, r4, [r5]
 8007654:	60ac      	str	r4, [r5, #8]
  hdac1.Instance = DAC1;
 8007656:	4c0b      	ldr	r4, [pc, #44]	; (8007684 <main+0x1f0>)
 8007658:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <main+0x1f4>)
 800765a:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800765c:	4620      	mov	r0, r4
 800765e:	f001 fd97 	bl	8009190 <HAL_DAC_Init>
 8007662:	4602      	mov	r2, r0
 8007664:	b190      	cbz	r0, 800768c <main+0x1f8>
    Error_Handler();
 8007666:	f7ff fea1 	bl	80073ac <Error_Handler>
 800766a:	bf00      	nop
 800766c:	40021000 	.word	0x40021000
 8007670:	48000800 	.word	0x48000800
 8007674:	48000c00 	.word	0x48000c00
 8007678:	48001000 	.word	0x48001000
 800767c:	48001400 	.word	0x48001400
 8007680:	48000400 	.word	0x48000400
 8007684:	200020d4 	.word	0x200020d4
 8007688:	40007400 	.word	0x40007400
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800768c:	2604      	movs	r6, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800768e:	e9c5 6000 	strd	r6, r0, [r5]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007692:	a91f      	add	r1, sp, #124	; 0x7c
 8007694:	4620      	mov	r0, r4
 8007696:	f001 fdc6 	bl	8009226 <HAL_DAC_ConfigChannel>
 800769a:	2800      	cmp	r0, #0
 800769c:	d1e3      	bne.n	8007666 <main+0x1d2>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800769e:	2210      	movs	r2, #16
 80076a0:	a91f      	add	r1, sp, #124	; 0x7c
 80076a2:	4620      	mov	r0, r4
 80076a4:	f001 fdbf 	bl	8009226 <HAL_DAC_ConfigChannel>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d1dc      	bne.n	8007666 <main+0x1d2>
  hdac2.Instance = DAC2;
 80076ac:	4cd1      	ldr	r4, [pc, #836]	; (80079f4 <main+0x560>)
 80076ae:	4bd2      	ldr	r3, [pc, #840]	; (80079f8 <main+0x564>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80076b0:	901e      	str	r0, [sp, #120]	; 0x78
 80076b2:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80076b6:	4620      	mov	r0, r4
  hdac2.Instance = DAC2;
 80076b8:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80076ba:	f001 fd69 	bl	8009190 <HAL_DAC_Init>
 80076be:	4602      	mov	r2, r0
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d1d0      	bne.n	8007666 <main+0x1d2>
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80076c4:	e9cd 601c 	strd	r6, r0, [sp, #112]	; 0x70
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80076c8:	a91c      	add	r1, sp, #112	; 0x70
 80076ca:	4620      	mov	r0, r4
 80076cc:	f001 fdab 	bl	8009226 <HAL_DAC_ConfigChannel>
 80076d0:	4605      	mov	r5, r0
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d1c7      	bne.n	8007666 <main+0x1d2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076d6:	f50d 788c 	add.w	r8, sp, #280	; 0x118
 80076da:	4601      	mov	r1, r0
 80076dc:	2210      	movs	r2, #16
 80076de:	4640      	mov	r0, r8
 80076e0:	f007 f89c 	bl	800e81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076e4:	f50d 63fe 	add.w	r3, sp, #2032	; 0x7f0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076e8:	f2a3 6674 	subw	r6, r3, #1652	; 0x674
  htim2.Instance = TIM2;
 80076ec:	4cc3      	ldr	r4, [pc, #780]	; (80079fc <main+0x568>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076ee:	af1a      	add	r7, sp, #104	; 0x68
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076f0:	221c      	movs	r2, #28
 80076f2:	4629      	mov	r1, r5
 80076f4:	4630      	mov	r0, r6
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076f6:	e9c7 5500 	strd	r5, r5, [r7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076fa:	f007 f88f 	bl	800e81c <memset>
  htim2.Instance = TIM2;
 80076fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8007702:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007706:	4620      	mov	r0, r4
  htim2.Init.Period = 0xffff;
 8007708:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800770c:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007710:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007712:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007714:	f004 fe78 	bl	800c408 <HAL_TIM_Base_Init>
 8007718:	2800      	cmp	r0, #0
 800771a:	d1a4      	bne.n	8007666 <main+0x1d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800771c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007720:	4641      	mov	r1, r8
 8007722:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007724:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007728:	f005 f945 	bl	800c9b6 <HAL_TIM_ConfigClockSource>
 800772c:	2800      	cmp	r0, #0
 800772e:	d19a      	bne.n	8007666 <main+0x1d2>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007730:	4620      	mov	r0, r4
 8007732:	f004 fec1 	bl	800c4b8 <HAL_TIM_PWM_Init>
 8007736:	2800      	cmp	r0, #0
 8007738:	d195      	bne.n	8007666 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800773a:	e9c7 0000 	strd	r0, r0, [r7]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800773e:	4639      	mov	r1, r7
 8007740:	4620      	mov	r0, r4
 8007742:	f005 fbaf 	bl	800cea4 <HAL_TIMEx_MasterConfigSynchronization>
 8007746:	4602      	mov	r2, r0
 8007748:	2800      	cmp	r0, #0
 800774a:	d18c      	bne.n	8007666 <main+0x1d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800774c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800774e:	e9c6 3000 	strd	r3, r0, [r6]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007752:	60b0      	str	r0, [r6, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007754:	6130      	str	r0, [r6, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007756:	4631      	mov	r1, r6
 8007758:	4620      	mov	r0, r4
 800775a:	f004 ffd6 	bl	800c70a <HAL_TIM_PWM_ConfigChannel>
 800775e:	2800      	cmp	r0, #0
 8007760:	d181      	bne.n	8007666 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007762:	2204      	movs	r2, #4
 8007764:	4631      	mov	r1, r6
 8007766:	4620      	mov	r0, r4
 8007768:	f004 ffcf 	bl	800c70a <HAL_TIM_PWM_ConfigChannel>
 800776c:	2800      	cmp	r0, #0
 800776e:	f47f af7a 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007772:	2208      	movs	r2, #8
 8007774:	4631      	mov	r1, r6
 8007776:	4620      	mov	r0, r4
 8007778:	f004 ffc7 	bl	800c70a <HAL_TIM_PWM_ConfigChannel>
 800777c:	2800      	cmp	r0, #0
 800777e:	f47f af72 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007782:	220c      	movs	r2, #12
 8007784:	4631      	mov	r1, r6
 8007786:	4620      	mov	r0, r4
 8007788:	f004 ffbf 	bl	800c70a <HAL_TIM_PWM_ConfigChannel>
 800778c:	4605      	mov	r5, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	f47f af69 	bne.w	8007666 <main+0x1d2>
  HAL_TIM_MspPostInit(&htim2);
 8007794:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007796:	f50d 7884 	add.w	r8, sp, #264	; 0x108
  HAL_TIM_MspPostInit(&htim2);
 800779a:	f001 f81d 	bl	80087d8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800779e:	2210      	movs	r2, #16
 80077a0:	4629      	mov	r1, r5
 80077a2:	4640      	mov	r0, r8
 80077a4:	f007 f83a 	bl	800e81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077a8:	f50d 63fe 	add.w	r3, sp, #2032	; 0x7f0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077ac:	f5a3 66d2 	sub.w	r6, r3, #1680	; 0x690
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077b0:	af18      	add	r7, sp, #96	; 0x60
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077b2:	221c      	movs	r2, #28
 80077b4:	4629      	mov	r1, r5
 80077b6:	4630      	mov	r0, r6
  htim5.Instance = TIM5;
 80077b8:	4c91      	ldr	r4, [pc, #580]	; (8007a00 <main+0x56c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077ba:	e9c7 5500 	strd	r5, r5, [r7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077be:	f007 f82d 	bl	800e81c <memset>
  htim5.Instance = TIM5;
 80077c2:	4b90      	ldr	r3, [pc, #576]	; (8007a04 <main+0x570>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077c4:	60a5      	str	r5, [r4, #8]
  htim5.Init.Prescaler = 0;
 80077c6:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80077ca:	4620      	mov	r0, r4
  htim5.Init.Period = 0xffff;
 80077cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077d4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80077d6:	f004 fe17 	bl	800c408 <HAL_TIM_Base_Init>
 80077da:	2800      	cmp	r0, #0
 80077dc:	f47f af43 	bne.w	8007666 <main+0x1d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80077e4:	4641      	mov	r1, r8
 80077e6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077e8:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80077ec:	f005 f8e3 	bl	800c9b6 <HAL_TIM_ConfigClockSource>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	f47f af38 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80077f6:	4620      	mov	r0, r4
 80077f8:	f004 fe5e 	bl	800c4b8 <HAL_TIM_PWM_Init>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f47f af32 	bne.w	8007666 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007802:	e9c7 0000 	strd	r0, r0, [r7]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007806:	4639      	mov	r1, r7
 8007808:	4620      	mov	r0, r4
 800780a:	f005 fb4b 	bl	800cea4 <HAL_TIMEx_MasterConfigSynchronization>
 800780e:	4602      	mov	r2, r0
 8007810:	2800      	cmp	r0, #0
 8007812:	f47f af28 	bne.w	8007666 <main+0x1d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007816:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8007818:	e9c6 3000 	strd	r3, r0, [r6]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800781c:	60b0      	str	r0, [r6, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800781e:	6130      	str	r0, [r6, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007820:	4631      	mov	r1, r6
 8007822:	4620      	mov	r0, r4
 8007824:	f004 ff71 	bl	800c70a <HAL_TIM_PWM_ConfigChannel>
 8007828:	2800      	cmp	r0, #0
 800782a:	f47f af1c 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800782e:	2204      	movs	r2, #4
 8007830:	4631      	mov	r1, r6
 8007832:	4620      	mov	r0, r4
 8007834:	f004 ff69 	bl	800c70a <HAL_TIM_PWM_ConfigChannel>
 8007838:	2800      	cmp	r0, #0
 800783a:	f47f af14 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800783e:	2208      	movs	r2, #8
 8007840:	4631      	mov	r1, r6
 8007842:	4620      	mov	r0, r4
 8007844:	f004 ff61 	bl	800c70a <HAL_TIM_PWM_ConfigChannel>
 8007848:	2800      	cmp	r0, #0
 800784a:	f47f af0c 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800784e:	4620      	mov	r0, r4
 8007850:	220c      	movs	r2, #12
 8007852:	4631      	mov	r1, r6
 8007854:	f004 ff59 	bl	800c70a <HAL_TIM_PWM_ConfigChannel>
 8007858:	4604      	mov	r4, r0
 800785a:	2800      	cmp	r0, #0
 800785c:	f47f af03 	bne.w	8007666 <main+0x1d2>
  HAL_TIM_MspPostInit(&htim5);
 8007860:	4867      	ldr	r0, [pc, #412]	; (8007a00 <main+0x56c>)
  htim4.Instance = TIM4;
 8007862:	4d69      	ldr	r5, [pc, #420]	; (8007a08 <main+0x574>)
  HAL_TIM_MspPostInit(&htim5);
 8007864:	f000 ffb8 	bl	80087d8 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007868:	2220      	movs	r2, #32
 800786a:	4621      	mov	r1, r4
 800786c:	a879      	add	r0, sp, #484	; 0x1e4
 800786e:	f006 ffd5 	bl	800e81c <memset>
  htim4.Instance = TIM4;
 8007872:	4b66      	ldr	r3, [pc, #408]	; (8007a0c <main+0x578>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007874:	60ac      	str	r4, [r5, #8]
  htim4.Init.Prescaler = 0;
 8007876:	e9c5 3400 	strd	r3, r4, [r5]
  htim4.Init.Period = 65535;
 800787a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800787e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007882:	ab78      	add	r3, sp, #480	; 0x1e0
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007884:	2701      	movs	r7, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007886:	2203      	movs	r2, #3
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007888:	ae16      	add	r6, sp, #88	; 0x58
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800788a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800788c:	609f      	str	r7, [r3, #8]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800788e:	619f      	str	r7, [r3, #24]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8007890:	4619      	mov	r1, r3
 8007892:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007894:	e9c6 4400 	strd	r4, r4, [r6]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007898:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800789a:	f004 fe65 	bl	800c568 <HAL_TIM_Encoder_Init>
 800789e:	2800      	cmp	r0, #0
 80078a0:	f47f aee1 	bne.w	8007666 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078a4:	e9c6 0000 	strd	r0, r0, [r6]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	f005 fafa 	bl	800cea4 <HAL_TIMEx_MasterConfigSynchronization>
 80078b0:	4606      	mov	r6, r0
 80078b2:	2800      	cmp	r0, #0
 80078b4:	f47f aed7 	bne.w	8007666 <main+0x1d2>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80078b8:	ac3e      	add	r4, sp, #248	; 0xf8
 80078ba:	4601      	mov	r1, r0
 80078bc:	2210      	movs	r2, #16
 80078be:	4620      	mov	r0, r4
 80078c0:	f006 ffac 	bl	800e81c <memset>
  hsdadc1.Instance = SDADC1;
 80078c4:	4d52      	ldr	r5, [pc, #328]	; (8007a10 <main+0x57c>)
 80078c6:	4b53      	ldr	r3, [pc, #332]	; (8007a14 <main+0x580>)
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80078c8:	612e      	str	r6, [r5, #16]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80078ca:	e9c5 3600 	strd	r3, r6, [r5]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80078ce:	e9c5 6602 	strd	r6, r6, [r5, #8]
  hsdadc1.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 80078d2:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 80078d6:	2602      	movs	r6, #2
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 80078d8:	4628      	mov	r0, r5
  hsdadc1.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 80078da:	e9c5 680b 	strd	r6, r8, [r5, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 80078de:	f003 fd5f 	bl	800b3a0 <HAL_SDADC_Init>
 80078e2:	4601      	mov	r1, r0
 80078e4:	2800      	cmp	r0, #0
 80078e6:	f47f aebe 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 80078ea:	4628      	mov	r0, r5
 80078ec:	f003 fe44 	bl	800b578 <HAL_SDADC_SelectInjectedDelay>
 80078f0:	4601      	mov	r1, r0
 80078f2:	2800      	cmp	r0, #0
 80078f4:	f47f aeb7 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc1, SDADC_EXT_TRIG_TIM13_CC1, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 80078f8:	4642      	mov	r2, r8
 80078fa:	4628      	mov	r0, r5
 80078fc:	f003 fe1c 	bl	800b538 <HAL_SDADC_SelectInjectedExtTrigger>
 8007900:	2800      	cmp	r0, #0
 8007902:	f47f aeb0 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	f003 fe03 	bl	800b514 <HAL_SDADC_SelectInjectedTrigger>
 800790e:	2800      	cmp	r0, #0
 8007910:	f47f aea9 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_0|SDADC_CHANNEL_1
 8007914:	4940      	ldr	r1, [pc, #256]	; (8007a18 <main+0x584>)
 8007916:	463a      	mov	r2, r7
 8007918:	4628      	mov	r0, r5
 800791a:	f003 fdd9 	bl	800b4d0 <HAL_SDADC_InjectedConfigChannel>
 800791e:	4601      	mov	r1, r0
 8007920:	2800      	cmp	r0, #0
 8007922:	f47f aea0 	bne.w	8007666 <main+0x1d2>
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8007926:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  ConfParamStruct.Gain = SDADC_GAIN_1;
 800792a:	e9c4 3000 	strd	r3, r0, [r4]
  ConfParamStruct.Offset = 0;
 800792e:	e9c4 0002 	strd	r0, r0, [r4, #8]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8007932:	4622      	mov	r2, r4
 8007934:	4628      	mov	r0, r5
 8007936:	9405      	str	r4, [sp, #20]
 8007938:	f003 fd7a 	bl	800b430 <HAL_SDADC_PrepareChannelConfig>
 800793c:	2800      	cmp	r0, #0
 800793e:	f47f ae92 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8007942:	9a05      	ldr	r2, [sp, #20]
 8007944:	4639      	mov	r1, r7
 8007946:	4628      	mov	r0, r5
 8007948:	f003 fd72 	bl	800b430 <HAL_SDADC_PrepareChannelConfig>
 800794c:	2800      	cmp	r0, #0
 800794e:	f47f ae8a 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 8007952:	9a05      	ldr	r2, [sp, #20]
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	f003 fd6a 	bl	800b430 <HAL_SDADC_PrepareChannelConfig>
 800795c:	2800      	cmp	r0, #0
 800795e:	f47f ae82 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_0, SDADC_CONF_INDEX_2) != HAL_OK)
 8007962:	4632      	mov	r2, r6
 8007964:	4639      	mov	r1, r7
 8007966:	4628      	mov	r0, r5
 8007968:	f003 fd84 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 800796c:	2800      	cmp	r0, #0
 800796e:	f47f ae7a 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_1, SDADC_CONF_INDEX_2) != HAL_OK)
 8007972:	492a      	ldr	r1, [pc, #168]	; (8007a1c <main+0x588>)
 8007974:	4632      	mov	r2, r6
 8007976:	4628      	mov	r0, r5
 8007978:	f003 fd7c 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 800797c:	2800      	cmp	r0, #0
 800797e:	f47f ae72 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_2, SDADC_CONF_INDEX_1) != HAL_OK)
 8007982:	4927      	ldr	r1, [pc, #156]	; (8007a20 <main+0x58c>)
 8007984:	463a      	mov	r2, r7
 8007986:	4628      	mov	r0, r5
 8007988:	f003 fd74 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 800798c:	2800      	cmp	r0, #0
 800798e:	f47f ae6a 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_3, SDADC_CONF_INDEX_1) != HAL_OK)
 8007992:	463a      	mov	r2, r7
 8007994:	4923      	ldr	r1, [pc, #140]	; (8007a24 <main+0x590>)
 8007996:	4628      	mov	r0, r5
 8007998:	f003 fd6c 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 800799c:	4602      	mov	r2, r0
 800799e:	2800      	cmp	r0, #0
 80079a0:	f47f ae61 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 80079a4:	4920      	ldr	r1, [pc, #128]	; (8007a28 <main+0x594>)
 80079a6:	4628      	mov	r0, r5
 80079a8:	f003 fd64 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 80079ac:	4602      	mov	r2, r0
 80079ae:	2800      	cmp	r0, #0
 80079b0:	f47f ae59 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 80079b4:	491d      	ldr	r1, [pc, #116]	; (8007a2c <main+0x598>)
 80079b6:	4628      	mov	r0, r5
 80079b8:	f003 fd5c 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 80079bc:	4602      	mov	r2, r0
 80079be:	2800      	cmp	r0, #0
 80079c0:	f47f ae51 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 80079c4:	491a      	ldr	r1, [pc, #104]	; (8007a30 <main+0x59c>)
 80079c6:	4628      	mov	r0, r5
 80079c8:	f003 fd54 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f47f ae4a 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_7, SDADC_CONF_INDEX_1) != HAL_OK)
 80079d2:	4918      	ldr	r1, [pc, #96]	; (8007a34 <main+0x5a0>)
 80079d4:	463a      	mov	r2, r7
 80079d6:	4628      	mov	r0, r5
 80079d8:	f003 fd4c 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f47f ae42 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_1) != HAL_OK)
 80079e2:	4915      	ldr	r1, [pc, #84]	; (8007a38 <main+0x5a4>)
 80079e4:	463a      	mov	r2, r7
 80079e6:	4628      	mov	r0, r5
 80079e8:	f003 fd44 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	f47f ae3a 	bne.w	8007666 <main+0x1d2>
 80079f2:	e023      	b.n	8007a3c <main+0x5a8>
 80079f4:	200020e8 	.word	0x200020e8
 80079f8:	40009800 	.word	0x40009800
 80079fc:	200025ac 	.word	0x200025ac
 8007a00:	20002690 	.word	0x20002690
 8007a04:	40000c00 	.word	0x40000c00
 8007a08:	20002644 	.word	0x20002644
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	200022b4 	.word	0x200022b4
 8007a14:	40016000 	.word	0x40016000
 8007a18:	000f01ff 	.word	0x000f01ff
 8007a1c:	00010002 	.word	0x00010002
 8007a20:	00020004 	.word	0x00020004
 8007a24:	00030008 	.word	0x00030008
 8007a28:	00040010 	.word	0x00040010
 8007a2c:	00050020 	.word	0x00050020
 8007a30:	00060040 	.word	0x00060040
 8007a34:	00070080 	.word	0x00070080
 8007a38:	00080100 	.word	0x00080100
  hsdadc2.Instance = SDADC2;
 8007a3c:	4cd1      	ldr	r4, [pc, #836]	; (8007d84 <main+0x8f0>)
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8007a3e:	f8df 9390 	ldr.w	r9, [pc, #912]	; 8007dd0 <main+0x93c>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8007a42:	ad3a      	add	r5, sp, #232	; 0xe8
 8007a44:	2100      	movs	r1, #0
 8007a46:	2210      	movs	r2, #16
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f006 fee7 	bl	800e81c <memset>
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8007a4e:	2300      	movs	r3, #0
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8007a50:	4620      	mov	r0, r4
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8007a52:	e9c4 9300 	strd	r9, r3, [r4]
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8007a56:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8007a5a:	6123      	str	r3, [r4, #16]
  hsdadc2.InjectedTrigger = SDADC_EXTERNAL_TRIGGER;
 8007a5c:	62e6      	str	r6, [r4, #44]	; 0x2c
  hsdadc2.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8007a5e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8007a62:	f003 fc9d 	bl	800b3a0 <HAL_SDADC_Init>
 8007a66:	4601      	mov	r1, r0
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	f47f adfc 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc2, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f003 fd82 	bl	800b578 <HAL_SDADC_SelectInjectedDelay>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f47f adf6 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc2, SDADC_EXT_TRIG_TIM12_CC1, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a80:	4620      	mov	r0, r4
 8007a82:	f003 fd59 	bl	800b538 <HAL_SDADC_SelectInjectedExtTrigger>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	f47f aded 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc2, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f003 fd40 	bl	800b514 <HAL_SDADC_SelectInjectedTrigger>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	f47f ade6 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc2, SDADC_CHANNEL_0|SDADC_CHANNEL_1
 8007a9a:	49bb      	ldr	r1, [pc, #748]	; (8007d88 <main+0x8f4>)
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f003 fd16 	bl	800b4d0 <HAL_SDADC_InjectedConfigChannel>
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f47f addd 	bne.w	8007666 <main+0x1d2>
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8007aac:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8007ab0:	e9c5 3000 	strd	r3, r0, [r5]
  ConfParamStruct.Offset = 0;
 8007ab4:	e9c5 0002 	strd	r0, r0, [r5, #8]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8007ab8:	462a      	mov	r2, r5
 8007aba:	4620      	mov	r0, r4
 8007abc:	f003 fcb8 	bl	800b430 <HAL_SDADC_PrepareChannelConfig>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f47f add0 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8007ac6:	462a      	mov	r2, r5
 8007ac8:	2101      	movs	r1, #1
 8007aca:	4620      	mov	r0, r4
 8007acc:	f003 fcb0 	bl	800b430 <HAL_SDADC_PrepareChannelConfig>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f47f adc8 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4620      	mov	r0, r4
 8007adc:	f003 fca8 	bl	800b430 <HAL_SDADC_PrepareChannelConfig>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	f47f adc0 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_0, SDADC_CONF_INDEX_2) != HAL_OK)
 8007ae6:	4632      	mov	r2, r6
 8007ae8:	2101      	movs	r1, #1
 8007aea:	4620      	mov	r0, r4
 8007aec:	f003 fcc2 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f47f adb8 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_1, SDADC_CONF_INDEX_1) != HAL_OK)
 8007af6:	49a5      	ldr	r1, [pc, #660]	; (8007d8c <main+0x8f8>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	4620      	mov	r0, r4
 8007afc:	f003 fcba 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	f47f adb0 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_2, SDADC_CONF_INDEX_0) != HAL_OK)
 8007b06:	49a2      	ldr	r1, [pc, #648]	; (8007d90 <main+0x8fc>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f003 fcb2 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 8007b10:	4605      	mov	r5, r0
 8007b12:	2800      	cmp	r0, #0
 8007b14:	f47f ada7 	bne.w	8007666 <main+0x1d2>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8007b18:	ae36      	add	r6, sp, #216	; 0xd8
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	2210      	movs	r2, #16
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f006 fe7c 	bl	800e81c <memset>
  hsdadc3.Instance = SDADC3;
 8007b24:	4c9b      	ldr	r4, [pc, #620]	; (8007d94 <main+0x900>)
 8007b26:	4b9c      	ldr	r3, [pc, #624]	; (8007d98 <main+0x904>)
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8007b28:	6125      	str	r5, [r4, #16]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8007b2a:	e9c4 3500 	strd	r3, r5, [r4]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8007b2e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8007b32:	4620      	mov	r0, r4
  hsdadc3.InjectedTrigger = SDADC_EXTERNAL_TRIGGER;
 8007b34:	2502      	movs	r5, #2
  hsdadc3.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8007b36:	e9c4 580b 	strd	r5, r8, [r4, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8007b3a:	f003 fc31 	bl	800b3a0 <HAL_SDADC_Init>
 8007b3e:	4601      	mov	r1, r0
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f47f ad90 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc3, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8007b46:	4620      	mov	r0, r4
 8007b48:	f003 fd16 	bl	800b578 <HAL_SDADC_SelectInjectedDelay>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	f47f ad8a 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc3, SDADC_EXT_TRIG_TIM12_CC2, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8007b52:	4642      	mov	r2, r8
 8007b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f003 fced 	bl	800b538 <HAL_SDADC_SelectInjectedExtTrigger>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f47f ad81 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc3, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8007b64:	4629      	mov	r1, r5
 8007b66:	4620      	mov	r0, r4
 8007b68:	f003 fcd4 	bl	800b514 <HAL_SDADC_SelectInjectedTrigger>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	f47f ad7a 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc3, SDADC_CHANNEL_0|SDADC_CHANNEL_2
 8007b72:	498a      	ldr	r1, [pc, #552]	; (8007d9c <main+0x908>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	4620      	mov	r0, r4
 8007b78:	f003 fcaa 	bl	800b4d0 <HAL_SDADC_InjectedConfigChannel>
 8007b7c:	4601      	mov	r1, r0
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f47f ad71 	bne.w	8007666 <main+0x1d2>
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8007b84:	e9c6 0000 	strd	r0, r0, [r6]
  ConfParamStruct.Offset = 0;
 8007b88:	e9c6 0002 	strd	r0, r0, [r6, #8]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8007b8c:	4632      	mov	r2, r6
 8007b8e:	4620      	mov	r0, r4
 8007b90:	9605      	str	r6, [sp, #20]
 8007b92:	f003 fc4d 	bl	800b430 <HAL_SDADC_PrepareChannelConfig>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f47f ad65 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8007b9c:	9a05      	ldr	r2, [sp, #20]
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f003 fc45 	bl	800b430 <HAL_SDADC_PrepareChannelConfig>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f47f ad5d 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 8007bac:	9a05      	ldr	r2, [sp, #20]
 8007bae:	4629      	mov	r1, r5
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f003 fc3d 	bl	800b430 <HAL_SDADC_PrepareChannelConfig>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f47f ad55 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_0, SDADC_CONF_INDEX_2) != HAL_OK)
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f003 fc57 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f47f ad4d 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_2, SDADC_CONF_INDEX_1) != HAL_OK)
 8007bcc:	4970      	ldr	r1, [pc, #448]	; (8007d90 <main+0x8fc>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f003 fc4f 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f47f ad45 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_4, SDADC_CONF_INDEX_1) != HAL_OK)
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4970      	ldr	r1, [pc, #448]	; (8007da0 <main+0x90c>)
 8007be0:	4620      	mov	r0, r4
 8007be2:	f003 fc47 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 8007be6:	4602      	mov	r2, r0
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f47f ad3c 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8007bee:	496d      	ldr	r1, [pc, #436]	; (8007da4 <main+0x910>)
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f003 fc3f 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f47f ad34 	bne.w	8007666 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 8007bfe:	496a      	ldr	r1, [pc, #424]	; (8007da8 <main+0x914>)
 8007c00:	4620      	mov	r0, r4
 8007c02:	f003 fc37 	bl	800b474 <HAL_SDADC_AssociateChannelConfig>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f47f ad2c 	bne.w	8007666 <main+0x1d2>
  hcan.Instance = CAN;
 8007c0e:	4867      	ldr	r0, [pc, #412]	; (8007dac <main+0x918>)
  hcan.Init.Prescaler = 16;
 8007c10:	4a67      	ldr	r2, [pc, #412]	; (8007db0 <main+0x91c>)
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007c12:	6183      	str	r3, [r0, #24]
  hcan.Init.Prescaler = 16;
 8007c14:	2610      	movs	r6, #16
 8007c16:	e9c0 2600 	strd	r2, r6, [r0]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8007c1a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8007c1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007c22:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007c24:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8007c28:	e9c0 8204 	strd	r8, r2, [r0, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007c2c:	f000 ff50 	bl	8008ad0 <HAL_CAN_Init>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f47f ad18 	bne.w	8007666 <main+0x1d2>
  htim6.Instance = TIM6;
 8007c36:	4c5f      	ldr	r4, [pc, #380]	; (8007db4 <main+0x920>)
  htim6.Init.Prescaler = 99;
 8007c38:	4b5f      	ldr	r3, [pc, #380]	; (8007db8 <main+0x924>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c3a:	60a0      	str	r0, [r4, #8]
  htim6.Init.Prescaler = 99;
 8007c3c:	2763      	movs	r7, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c3e:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  htim6.Init.Prescaler = 99;
 8007c42:	e9c4 3700 	strd	r3, r7, [r4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c46:	61a0      	str	r0, [r4, #24]
  htim6.Init.Period = 0xbb80;
 8007c48:	f64b 3380 	movw	r3, #48000	; 0xbb80
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007c4c:	4620      	mov	r0, r4
  htim6.Init.Period = 0xbb80;
 8007c4e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007c50:	f004 fbda 	bl	800c408 <HAL_TIM_Base_Init>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f47f ad06 	bne.w	8007666 <main+0x1d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007c5a:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c5c:	e9cd 3014 	strd	r3, r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007c60:	a914      	add	r1, sp, #80	; 0x50
 8007c62:	4620      	mov	r0, r4
 8007c64:	f005 f91e 	bl	800cea4 <HAL_TIMEx_MasterConfigSynchronization>
 8007c68:	4605      	mov	r5, r0
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f47f acfb 	bne.w	8007666 <main+0x1d2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c70:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8007c74:	4601      	mov	r1, r0
 8007c76:	4632      	mov	r2, r6
 8007c78:	4640      	mov	r0, r8
 8007c7a:	f006 fdcf 	bl	800e81c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c7e:	221c      	movs	r2, #28
 8007c80:	4629      	mov	r1, r5
 8007c82:	a851      	add	r0, sp, #324	; 0x144
 8007c84:	f006 fdca 	bl	800e81c <memset>
  htim12.Instance = TIM12;
 8007c88:	4c4c      	ldr	r4, [pc, #304]	; (8007dbc <main+0x928>)
 8007c8a:	4b4d      	ldr	r3, [pc, #308]	; (8007dc0 <main+0x92c>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c8c:	60a5      	str	r5, [r4, #8]
  htim12.Init.Prescaler = 99;
 8007c8e:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8007c92:	4620      	mov	r0, r4
  htim12.Init.Period = 4800;
 8007c94:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c98:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c9c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8007c9e:	f004 fbb3 	bl	800c408 <HAL_TIM_Base_Init>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	f47f acdf 	bne.w	8007666 <main+0x1d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8007cac:	4641      	mov	r1, r8
 8007cae:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007cb0:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8007cb4:	f004 fe7f 	bl	800c9b6 <HAL_TIM_ConfigClockSource>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f47f acd4 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f004 fbce 	bl	800c460 <HAL_TIM_OC_Init>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f47f acce 	bne.w	8007666 <main+0x1d2>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8007cca:	ab51      	add	r3, sp, #324	; 0x144
  sConfigOC.Pulse = 0;
 8007ccc:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8007cce:	2730      	movs	r7, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007cd4:	e9c3 2201 	strd	r2, r2, [r3, #4]
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8007cd8:	601f      	str	r7, [r3, #0]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007cda:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cdc:	f004 fcc6 	bl	800c66c <HAL_TIM_OC_ConfigChannel>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	f47f acc0 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	a951      	add	r1, sp, #324	; 0x144
 8007cea:	4620      	mov	r0, r4
 8007cec:	f004 fcbe 	bl	800c66c <HAL_TIM_OC_ConfigChannel>
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f47f acb7 	bne.w	8007666 <main+0x1d2>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007cf8:	ae4a      	add	r6, sp, #296	; 0x128
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	221c      	movs	r2, #28
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f006 fd8c 	bl	800e81c <memset>
  htim13.Instance = TIM13;
 8007d04:	4c2f      	ldr	r4, [pc, #188]	; (8007dc4 <main+0x930>)
  htim13.Init.Prescaler = 99;
 8007d06:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8007dd4 <main+0x940>
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d0a:	60a5      	str	r5, [r4, #8]
  htim13.Init.Prescaler = 99;
 8007d0c:	2363      	movs	r3, #99	; 0x63
 8007d0e:	e9c4 e300 	strd	lr, r3, [r4]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007d12:	4620      	mov	r0, r4
  htim13.Init.Period = 4800;
 8007d14:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d18:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d1c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007d1e:	f004 fb73 	bl	800c408 <HAL_TIM_Base_Init>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f47f ac9f 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f004 fb99 	bl	800c460 <HAL_TIM_OC_Init>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f47f ac98 	bne.w	8007666 <main+0x1d2>
  sConfigOC.Pulse = 0;
 8007d36:	e9c6 7000 	strd	r7, r0, [r6]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d3a:	60b0      	str	r0, [r6, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d3c:	6130      	str	r0, [r6, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4620      	mov	r0, r4
 8007d42:	f004 fc93 	bl	800c66c <HAL_TIM_OC_ConfigChannel>
 8007d46:	4605      	mov	r5, r0
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	f47f ac8c 	bne.w	8007666 <main+0x1d2>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007d4e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
  htim16.Instance = TIM16;
 8007d52:	4c1d      	ldr	r4, [pc, #116]	; (8007dc8 <main+0x934>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007d54:	4601      	mov	r1, r0
 8007d56:	2210      	movs	r2, #16
 8007d58:	4640      	mov	r0, r8
 8007d5a:	f006 fd5f 	bl	800e81c <memset>
  htim16.Init.Prescaler = 4799;
 8007d5e:	4b1b      	ldr	r3, [pc, #108]	; (8007dcc <main+0x938>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d60:	60a5      	str	r5, [r4, #8]
  htim16.Init.Prescaler = 4799;
 8007d62:	f241 27bf 	movw	r7, #4799	; 0x12bf
  htim16.Init.Period = 0xffff;
 8007d66:	f64f 76ff 	movw	r6, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007d6a:	4620      	mov	r0, r4
  htim16.Init.Prescaler = 4799;
 8007d6c:	e9c4 3700 	strd	r3, r7, [r4]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d70:	e9c4 6503 	strd	r6, r5, [r4, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d74:	e9c4 5505 	strd	r5, r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007d78:	f004 fb46 	bl	800c408 <HAL_TIM_Base_Init>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f47f ac72 	bne.w	8007666 <main+0x1d2>
 8007d82:	e029      	b.n	8007dd8 <main+0x944>
 8007d84:	200022f8 	.word	0x200022f8
 8007d88:	00030007 	.word	0x00030007
 8007d8c:	00010002 	.word	0x00010002
 8007d90:	00020004 	.word	0x00020004
 8007d94:	2000233c 	.word	0x2000233c
 8007d98:	40016800 	.word	0x40016800
 8007d9c:	000e0155 	.word	0x000e0155
 8007da0:	00040010 	.word	0x00040010
 8007da4:	00060040 	.word	0x00060040
 8007da8:	00080100 	.word	0x00080100
 8007dac:	200020ac 	.word	0x200020ac
 8007db0:	40006400 	.word	0x40006400
 8007db4:	200026dc 	.word	0x200026dc
 8007db8:	40001000 	.word	0x40001000
 8007dbc:	200023e4 	.word	0x200023e4
 8007dc0:	40001800 	.word	0x40001800
 8007dc4:	20002430 	.word	0x20002430
 8007dc8:	200024c8 	.word	0x200024c8
 8007dcc:	40014400 	.word	0x40014400
 8007dd0:	40016400 	.word	0x40016400
 8007dd4:	40001c00 	.word	0x40001c00
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f004 fb99 	bl	800c510 <HAL_TIM_IC_Init>
 8007dde:	4602      	mov	r2, r0
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f47f ac40 	bne.w	8007666 <main+0x1d2>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007de6:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007de8:	e9c8 3001 	strd	r3, r0, [r8, #4]
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007dec:	f8c8 0000 	str.w	r0, [r8]
  sConfigIC.ICFilter = 0;
 8007df0:	f8c8 000c 	str.w	r0, [r8, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007df4:	4641      	mov	r1, r8
 8007df6:	4620      	mov	r0, r4
 8007df8:	f004 fd40 	bl	800c87c <HAL_TIM_IC_ConfigChannel>
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f47f ac31 	bne.w	8007666 <main+0x1d2>
  MX_USB_DEVICE_Init();
 8007e04:	f006 faa2 	bl	800e34c <MX_USB_DEVICE_Init>
  htim17.Instance = TIM17;
 8007e08:	4ca4      	ldr	r4, [pc, #656]	; (800809c <main+0xc08>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	a82a      	add	r0, sp, #168	; 0xa8
 8007e10:	f006 fd04 	bl	800e81c <memset>
  htim17.Instance = TIM17;
 8007e14:	4ba2      	ldr	r3, [pc, #648]	; (80080a0 <main+0xc0c>)
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e16:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007e18:	4620      	mov	r0, r4
  htim17.Init.Prescaler = 4799;
 8007e1a:	e9c4 3700 	strd	r3, r7, [r4]
  htim17.Init.Period = 0xffff;
 8007e1e:	e9c4 5602 	strd	r5, r6, [r4, #8]
  htim17.Init.RepetitionCounter = 0;
 8007e22:	e9c4 5504 	strd	r5, r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007e26:	f004 faef 	bl	800c408 <HAL_TIM_Base_Init>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	f47f ac1b 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8007e30:	4620      	mov	r0, r4
 8007e32:	f004 fb6d 	bl	800c510 <HAL_TIM_IC_Init>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f47f ac15 	bne.w	8007666 <main+0x1d2>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007e3c:	ab2a      	add	r3, sp, #168	; 0xa8
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007e3e:	2200      	movs	r2, #0
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007e40:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007e42:	2601      	movs	r6, #1
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007e44:	a92a      	add	r1, sp, #168	; 0xa8
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007e46:	e9c3 2600 	strd	r2, r6, [r3]
  sConfigIC.ICFilter = 0;
 8007e4a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007e4e:	f004 fd15 	bl	800c87c <HAL_TIM_IC_ConfigChannel>
 8007e52:	4604      	mov	r4, r0
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f47f ac06 	bne.w	8007666 <main+0x1d2>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007e5a:	4601      	mov	r1, r0
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	a870      	add	r0, sp, #448	; 0x1c0
 8007e60:	f006 fcdc 	bl	800e81c <memset>
  htim19.Instance = TIM19;
 8007e64:	4d8f      	ldr	r5, [pc, #572]	; (80080a4 <main+0xc10>)
 8007e66:	4b90      	ldr	r3, [pc, #576]	; (80080a8 <main+0xc14>)
  htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e68:	60ac      	str	r4, [r5, #8]
  htim19.Init.Prescaler = 0;
 8007e6a:	e9c5 3400 	strd	r3, r4, [r5]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007e6e:	f04f 0803 	mov.w	r8, #3
 8007e72:	ab6f      	add	r3, sp, #444	; 0x1bc
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e74:	f10d 0948 	add.w	r9, sp, #72	; 0x48
  htim19.Init.Period = 65535;
 8007e78:	f64f 77ff 	movw	r7, #65535	; 0xffff
  if (HAL_TIM_Encoder_Init(&htim19, &sConfig) != HAL_OK)
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4628      	mov	r0, r5
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007e80:	f8c3 8000 	str.w	r8, [r3]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007e84:	609e      	str	r6, [r3, #8]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007e86:	619e      	str	r6, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e88:	e9c9 4400 	strd	r4, r4, [r9]
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e8c:	e9c5 7403 	strd	r7, r4, [r5, #12]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e90:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Encoder_Init(&htim19, &sConfig) != HAL_OK)
 8007e92:	f004 fb69 	bl	800c568 <HAL_TIM_Encoder_Init>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f47f abe5 	bne.w	8007666 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e9c:	e9c9 0000 	strd	r0, r0, [r9]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f004 fffe 	bl	800cea4 <HAL_TIMEx_MasterConfigSynchronization>
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	f47f abdb 	bne.w	8007666 <main+0x1d2>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	a867      	add	r0, sp, #412	; 0x19c
 8007eb6:	f006 fcb1 	bl	800e81c <memset>
  htim3.Instance = TIM3;
 8007eba:	4d7c      	ldr	r5, [pc, #496]	; (80080ac <main+0xc18>)
 8007ebc:	4b7c      	ldr	r3, [pc, #496]	; (80080b0 <main+0xc1c>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ebe:	612c      	str	r4, [r5, #16]
  htim3.Init.Prescaler = 0;
 8007ec0:	e9c5 3400 	strd	r3, r4, [r5]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007ec4:	ab66      	add	r3, sp, #408	; 0x198
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ec6:	f10d 0940 	add.w	r9, sp, #64	; 0x40
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ece:	e9c9 4400 	strd	r4, r4, [r9]
  htim3.Init.Period = 65535;
 8007ed2:	e9c5 4702 	strd	r4, r7, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ed6:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007ed8:	f8c3 8000 	str.w	r8, [r3]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007edc:	609e      	str	r6, [r3, #8]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007ede:	619e      	str	r6, [r3, #24]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8007ee0:	f004 fb42 	bl	800c568 <HAL_TIM_Encoder_Init>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f47f abbe 	bne.w	8007666 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007eea:	e9c9 0000 	strd	r0, r0, [r9]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f004 ffd7 	bl	800cea4 <HAL_TIMEx_MasterConfigSynchronization>
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f47f abb4 	bne.w	8007666 <main+0x1d2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007efe:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 8007f02:	4601      	mov	r1, r0
 8007f04:	2210      	movs	r2, #16
 8007f06:	4650      	mov	r0, sl
 8007f08:	f006 fc88 	bl	800e81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f0c:	f50d 63fe 	add.w	r3, sp, #2032	; 0x7f0
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007f10:	f5a3 68eb 	sub.w	r8, r3, #1880	; 0x758
  htim15.Instance = TIM15;
 8007f14:	4c67      	ldr	r4, [pc, #412]	; (80080b4 <main+0xc20>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f16:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007f1a:	2210      	movs	r2, #16
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4640      	mov	r0, r8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f20:	e9c9 5500 	strd	r5, r5, [r9]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007f24:	f006 fc7a 	bl	800e81c <memset>
  htim15.Init.Prescaler = 4799;
 8007f28:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8008100 <main+0xc6c>
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f2c:	61a5      	str	r5, [r4, #24]
  htim15.Init.Prescaler = 4799;
 8007f2e:	f241 23bf 	movw	r3, #4799	; 0x12bf
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007f32:	4620      	mov	r0, r4
  htim15.Init.Prescaler = 4799;
 8007f34:	e9c4 c300 	strd	ip, r3, [r4]
  htim15.Init.Period = 0xffff;
 8007f38:	e9c4 5702 	strd	r5, r7, [r4, #8]
  htim15.Init.RepetitionCounter = 0;
 8007f3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007f40:	f004 fa62 	bl	800c408 <HAL_TIM_Base_Init>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f47f ab8e 	bne.w	8007666 <main+0x1d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007f4e:	4651      	mov	r1, sl
 8007f50:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f52:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007f56:	f004 fd2e 	bl	800c9b6 <HAL_TIM_ConfigClockSource>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	f47f ab83 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8007f60:	4620      	mov	r0, r4
 8007f62:	f004 fad5 	bl	800c510 <HAL_TIM_IC_Init>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f47f ab7d 	bne.w	8007666 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f6c:	e9c9 0000 	strd	r0, r0, [r9]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007f70:	4649      	mov	r1, r9
 8007f72:	4620      	mov	r0, r4
 8007f74:	f004 ff96 	bl	800cea4 <HAL_TIMEx_MasterConfigSynchronization>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	f47f ab73 	bne.w	8007666 <main+0x1d2>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007f80:	e9c8 0600 	strd	r0, r6, [r8]
  sConfigIC.ICFilter = 0;
 8007f84:	e9c8 0002 	strd	r0, r0, [r8, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007f88:	4641      	mov	r1, r8
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007f90:	f004 fc74 	bl	800c87c <HAL_TIM_IC_ConfigChannel>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f47f ab66 	bne.w	8007666 <main+0x1d2>
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8007f9a:	9905      	ldr	r1, [sp, #20]
 8007f9c:	2204      	movs	r2, #4
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f004 fc6c 	bl	800c87c <HAL_TIM_IC_ConfigChannel>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f47f ab5e 	bne.w	8007666 <main+0x1d2>
  hspi2.Instance = SPI2;
 8007faa:	4c43      	ldr	r4, [pc, #268]	; (80080b8 <main+0xc24>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007fac:	4943      	ldr	r1, [pc, #268]	; (80080bc <main+0xc28>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007fae:	60a0      	str	r0, [r4, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007fb0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007fb4:	e9c4 1300 	strd	r1, r3, [r4]
  hspi2.Init.CRCPolynomial = 7;
 8007fb8:	2207      	movs	r2, #7
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007fba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fbe:	e9c4 3003 	strd	r3, r0, [r4, #12]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007fc2:	e9c4 0008 	strd	r0, r0, [r4, #32]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007fc6:	2308      	movs	r3, #8
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007fc8:	e9c4 200b 	strd	r2, r0, [r4, #44]	; 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007fcc:	6160      	str	r0, [r4, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007fce:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fd2:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007fd4:	4620      	mov	r0, r4
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007fd6:	e9c4 5306 	strd	r5, r3, [r4, #24]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007fda:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007fdc:	f003 fc9c 	bl	800b918 <HAL_SPI_Init>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f47f ab40 	bne.w	8007666 <main+0x1d2>
  hrtc.Instance = RTC;
 8007fe6:	4d36      	ldr	r5, [pc, #216]	; (80080c0 <main+0xc2c>)
 8007fe8:	4b36      	ldr	r3, [pc, #216]	; (80080c4 <main+0xc30>)
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007fea:	61a8      	str	r0, [r5, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007fec:	e9c5 3000 	strd	r3, r0, [r5]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007ff0:	e9c5 0004 	strd	r0, r0, [r5, #16]
  hrtc.Init.SynchPrediv = 255;
 8007ff4:	227f      	movs	r2, #127	; 0x7f
 8007ff6:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007ff8:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8007ffa:	e9c5 2302 	strd	r2, r3, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007ffe:	f002 ff1f 	bl	800ae40 <HAL_RTC_Init>
 8008002:	4606      	mov	r6, r0
 8008004:	2800      	cmp	r0, #0
 8008006:	f47f ab2e 	bne.w	8007666 <main+0x1d2>
  STM32_PLC_Analog_Input(&htim12, &htim13, &hsdadc1, &hsdadc2, &hsdadc3);
 800800a:	4b2f      	ldr	r3, [pc, #188]	; (80080c8 <main+0xc34>)
 800800c:	4a2f      	ldr	r2, [pc, #188]	; (80080cc <main+0xc38>)
 800800e:	4930      	ldr	r1, [pc, #192]	; (80080d0 <main+0xc3c>)
 8008010:	4830      	ldr	r0, [pc, #192]	; (80080d4 <main+0xc40>)
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	4b30      	ldr	r3, [pc, #192]	; (80080d8 <main+0xc44>)
 8008016:	f7f8 feb7 	bl	8000d88 <STM32_PLC_Analog_Input>
  STM32_PLC_Analog_Output(&hdac1, &hdac2, &htim6);
 800801a:	4a30      	ldr	r2, [pc, #192]	; (80080dc <main+0xc48>)
 800801c:	4930      	ldr	r1, [pc, #192]	; (80080e0 <main+0xc4c>)
 800801e:	4831      	ldr	r0, [pc, #196]	; (80080e4 <main+0xc50>)
 8008020:	f7f9 f862 	bl	80010e8 <STM32_PLC_Analog_Output>
  STM32_PLC_Encoder(&htim4, &htim19, &htim3);
 8008024:	4a21      	ldr	r2, [pc, #132]	; (80080ac <main+0xc18>)
 8008026:	491f      	ldr	r1, [pc, #124]	; (80080a4 <main+0xc10>)
 8008028:	482f      	ldr	r0, [pc, #188]	; (80080e8 <main+0xc54>)
 800802a:	f7f9 f93f 	bl	80012ac <STM32_PLC_Encoder>
  STM32_PLC_Input_Capture(&htim17, &htim16, &htim15);
 800802e:	4a21      	ldr	r2, [pc, #132]	; (80080b4 <main+0xc20>)
 8008030:	492e      	ldr	r1, [pc, #184]	; (80080ec <main+0xc58>)
 8008032:	481a      	ldr	r0, [pc, #104]	; (800809c <main+0xc08>)
 8008034:	f7f9 fbd2 	bl	80017dc <STM32_PLC_Input_Capture>
  STM32_PLC_PWM(&htim2, &htim5);
 8008038:	492d      	ldr	r1, [pc, #180]	; (80080f0 <main+0xc5c>)
 800803a:	482e      	ldr	r0, [pc, #184]	; (80080f4 <main+0xc60>)
 800803c:	f7f9 fdc4 	bl	8001bc8 <STM32_PLC_PWM>
  STM32_PLC_CAN(&hcan);
 8008040:	482d      	ldr	r0, [pc, #180]	; (80080f8 <main+0xc64>)
 8008042:	f7f9 f879 	bl	8001138 <STM32_PLC_CAN>
  STM32_PLC_RTC(&hrtc);
 8008046:	4628      	mov	r0, r5
 8008048:	f7f9 fe26 	bl	8001c98 <STM32_PLC_RTC>
  STM32_PLC_LCD(&hspi2, &hspi2, CS0_GPIO_Port, CS0_Pin, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin);
 800804c:	4a2b      	ldr	r2, [pc, #172]	; (80080fc <main+0xc68>)
 800804e:	2380      	movs	r3, #128	; 0x80
 8008050:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	e9cd 2300 	strd	r2, r3, [sp]
 800805a:	4621      	mov	r1, r4
 800805c:	2320      	movs	r3, #32
 800805e:	4620      	mov	r0, r4
 8008060:	f7f9 fc76 	bl	8001950 <STM32_PLC_LCD>
  STM32_PLC_LED();
 8008064:	f7f9 fd50 	bl	8001b08 <STM32_PLC_LED>
  J1939 j1939 = {0};
 8008068:	4631      	mov	r1, r6
 800806a:	f241 6210 	movw	r2, #5648	; 0x1610
 800806e:	a878      	add	r0, sp, #480	; 0x1e0
 8008070:	f006 fbd4 	bl	800e81c <memset>
  Open_SAE_J1939_Startup_ECU(&j1939);
 8008074:	a878      	add	r0, sp, #480	; 0x1e0
 8008076:	f7fa f961 	bl	800233c <Open_SAE_J1939_Startup_ECU>
  STM32_PLC_Flash_Get_J1939_This_ECU_Address(&j1939.information_this_ECU.this_ECU_address);
 800807a:	f50d 50a5 	add.w	r0, sp, #5280	; 0x14a0
 800807e:	3014      	adds	r0, #20
 8008080:	f7f9 fb3e 	bl	8001700 <STM32_PLC_Flash_Get_J1939_This_ECU_Address>
  uint8_t frame_id = 0;
 8008084:	ab6f      	add	r3, sp, #444	; 0x1bc
  STM32_PLC_LCD_Show_Main_Frame(&frame_id, false);
 8008086:	4631      	mov	r1, r6
 8008088:	4618      	mov	r0, r3
  uint8_t frame_id = 0;
 800808a:	701e      	strb	r6, [r3, #0]
  STM32_PLC_LCD_Show_Main_Frame(&frame_id, false);
 800808c:	f7fb fdcc 	bl	8003c28 <STM32_PLC_LCD_Show_Main_Frame>
	  STM32_PLC_LCD_Call_Main_Logic(&frame_id, &j1939);
 8008090:	a978      	add	r1, sp, #480	; 0x1e0
 8008092:	a86f      	add	r0, sp, #444	; 0x1bc
 8008094:	f7fe fef8 	bl	8006e88 <STM32_PLC_LCD_Call_Main_Logic>
  while (1)
 8008098:	e7fa      	b.n	8008090 <main+0xbfc>
 800809a:	bf00      	nop
 800809c:	20002514 	.word	0x20002514
 80080a0:	40014800 	.word	0x40014800
 80080a4:	20002560 	.word	0x20002560
 80080a8:	40015c00 	.word	0x40015c00
 80080ac:	200025f8 	.word	0x200025f8
 80080b0:	40000400 	.word	0x40000400
 80080b4:	2000247c 	.word	0x2000247c
 80080b8:	20002380 	.word	0x20002380
 80080bc:	40003800 	.word	0x40003800
 80080c0:	20002294 	.word	0x20002294
 80080c4:	40002800 	.word	0x40002800
 80080c8:	2000233c 	.word	0x2000233c
 80080cc:	200022b4 	.word	0x200022b4
 80080d0:	20002430 	.word	0x20002430
 80080d4:	200023e4 	.word	0x200023e4
 80080d8:	200022f8 	.word	0x200022f8
 80080dc:	200026dc 	.word	0x200026dc
 80080e0:	200020e8 	.word	0x200020e8
 80080e4:	200020d4 	.word	0x200020d4
 80080e8:	20002644 	.word	0x20002644
 80080ec:	200024c8 	.word	0x200024c8
 80080f0:	20002690 	.word	0x20002690
 80080f4:	200025ac 	.word	0x200025ac
 80080f8:	200020ac 	.word	0x200020ac
 80080fc:	48000c00 	.word	0x48000c00
 8008100:	40014000 	.word	0x40014000

08008104 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008104:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <HAL_MspInit+0x2c>)
 8008106:	699a      	ldr	r2, [r3, #24]
 8008108:	f042 0201 	orr.w	r2, r2, #1
 800810c:	619a      	str	r2, [r3, #24]
 800810e:	699a      	ldr	r2, [r3, #24]
{
 8008110:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008112:	f002 0201 	and.w	r2, r2, #1
 8008116:	9200      	str	r2, [sp, #0]
 8008118:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800811a:	69da      	ldr	r2, [r3, #28]
 800811c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008120:	61da      	str	r2, [r3, #28]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800812c:	b002      	add	sp, #8
 800812e:	4770      	bx	lr
 8008130:	40021000 	.word	0x40021000

08008134 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008134:	b510      	push	{r4, lr}
 8008136:	4604      	mov	r4, r0
 8008138:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813a:	2214      	movs	r2, #20
 800813c:	2100      	movs	r1, #0
 800813e:	a803      	add	r0, sp, #12
 8008140:	f006 fb6c 	bl	800e81c <memset>
  if(hcan->Instance==CAN)
 8008144:	6822      	ldr	r2, [r4, #0]
 8008146:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <HAL_CAN_MspInit+0x6c>)
 8008148:	429a      	cmp	r2, r3
 800814a:	d126      	bne.n	800819a <HAL_CAN_MspInit+0x66>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800814c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008150:	4814      	ldr	r0, [pc, #80]	; (80081a4 <HAL_CAN_MspInit+0x70>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008158:	61da      	str	r2, [r3, #28]
 800815a:	69da      	ldr	r2, [r3, #28]
 800815c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8008160:	9201      	str	r2, [sp, #4]
 8008162:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008164:	695a      	ldr	r2, [r3, #20]
 8008166:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800816a:	615a      	str	r2, [r3, #20]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008172:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008174:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008176:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008178:	2303      	movs	r3, #3
 800817a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800817e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008180:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8008182:	2307      	movs	r3, #7
 8008184:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008186:	f001 fa59 	bl	800963c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800818a:	2200      	movs	r2, #0
 800818c:	2014      	movs	r0, #20
 800818e:	4611      	mov	r1, r2
 8008190:	f000 ffaa 	bl	80090e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8008194:	2014      	movs	r0, #20
 8008196:	f000 ffd9 	bl	800914c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800819a:	b008      	add	sp, #32
 800819c:	bd10      	pop	{r4, pc}
 800819e:	bf00      	nop
 80081a0:	40006400 	.word	0x40006400
 80081a4:	48000c00 	.word	0x48000c00

080081a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80081a8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081aa:	2214      	movs	r2, #20
{
 80081ac:	b08a      	sub	sp, #40	; 0x28
 80081ae:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b0:	2100      	movs	r1, #0
 80081b2:	eb0d 0002 	add.w	r0, sp, r2
 80081b6:	f006 fb31 	bl	800e81c <memset>
  if(hdac->Instance==DAC1)
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	4a1c      	ldr	r2, [pc, #112]	; (8008230 <HAL_DAC_MspInit+0x88>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d11d      	bne.n	80081fe <HAL_DAC_MspInit+0x56>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80081c2:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <HAL_DAC_MspInit+0x8c>)
 80081c4:	69da      	ldr	r2, [r3, #28]
 80081c6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80081ca:	61da      	str	r2, [r3, #28]
 80081cc:	69da      	ldr	r2, [r3, #28]
 80081ce:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80081d2:	9201      	str	r2, [sp, #4]
 80081d4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081d6:	695a      	ldr	r2, [r3, #20]
 80081d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80081dc:	615a      	str	r2, [r3, #20]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e4:	9302      	str	r3, [sp, #8]
 80081e6:	9b02      	ldr	r3, [sp, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AO0_Pin|AO1_Pin;
 80081e8:	2330      	movs	r3, #48	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = AO2_Pin;
 80081ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 80081ec:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081ee:	2303      	movs	r3, #3
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 80081f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081f4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 80081f6:	f001 fa21 	bl	800963c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80081fa:	b00a      	add	sp, #40	; 0x28
 80081fc:	bd10      	pop	{r4, pc}
  else if(hdac->Instance==DAC2)
 80081fe:	4a0e      	ldr	r2, [pc, #56]	; (8008238 <HAL_DAC_MspInit+0x90>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d1fa      	bne.n	80081fa <HAL_DAC_MspInit+0x52>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8008204:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <HAL_DAC_MspInit+0x8c>)
 8008206:	69da      	ldr	r2, [r3, #28]
 8008208:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800820c:	61da      	str	r2, [r3, #28]
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8008214:	9203      	str	r2, [sp, #12]
 8008216:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008218:	695a      	ldr	r2, [r3, #20]
 800821a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800821e:	615a      	str	r2, [r3, #20]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008226:	9304      	str	r3, [sp, #16]
 8008228:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = AO2_Pin;
 800822a:	2340      	movs	r3, #64	; 0x40
 800822c:	e7dd      	b.n	80081ea <HAL_DAC_MspInit+0x42>
 800822e:	bf00      	nop
 8008230:	40007400 	.word	0x40007400
 8008234:	40021000 	.word	0x40021000
 8008238:	40009800 	.word	0x40009800

0800823c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800823c:	b508      	push	{r3, lr}
  if(hrtc->Instance==RTC)
 800823e:	6802      	ldr	r2, [r0, #0]
 8008240:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <HAL_RTC_MspInit+0x38>)
 8008242:	429a      	cmp	r2, r3
 8008244:	d114      	bne.n	8008270 <HAL_RTC_MspInit+0x34>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008246:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800824a:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800824e:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <HAL_RTC_MspInit+0x3c>)
 8008250:	fab2 f282 	clz	r2, r2
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	2201      	movs	r2, #1
 800825a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800825c:	2200      	movs	r2, #0
 800825e:	2029      	movs	r0, #41	; 0x29
 8008260:	4611      	mov	r1, r2
 8008262:	f000 ff41 	bl	80090e8 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800826a:	2029      	movs	r0, #41	; 0x29
 800826c:	f000 bf6e 	b.w	800914c <HAL_NVIC_EnableIRQ>
}
 8008270:	bd08      	pop	{r3, pc}
 8008272:	bf00      	nop
 8008274:	40002800 	.word	0x40002800
 8008278:	10908100 	.word	0x10908100

0800827c <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	4605      	mov	r5, r0
 8008280:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008282:	2214      	movs	r2, #20
 8008284:	2100      	movs	r1, #0
 8008286:	a809      	add	r0, sp, #36	; 0x24
 8008288:	f006 fac8 	bl	800e81c <memset>
  if(hsdadc->Instance==SDADC1)
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	4a59      	ldr	r2, [pc, #356]	; (80083f4 <HAL_SDADC_MspInit+0x178>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d13e      	bne.n	8008312 <HAL_SDADC_MspInit+0x96>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8008294:	4b58      	ldr	r3, [pc, #352]	; (80083f8 <HAL_SDADC_MspInit+0x17c>)
    PE12     ------> SDADC1_AIN0P
    */
    GPIO_InitStruct.Pin = AI0_Pin|AI1_Pin|AI2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008296:	4859      	ldr	r0, [pc, #356]	; (80083fc <HAL_SDADC_MspInit+0x180>)
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8008298:	699a      	ldr	r2, [r3, #24]
 800829a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800829e:	619a      	str	r2, [r3, #24]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80082a6:	9201      	str	r2, [sp, #4]
 80082a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082aa:	695a      	ldr	r2, [r3, #20]
 80082ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80082b0:	615a      	str	r2, [r3, #20]
 80082b2:	695a      	ldr	r2, [r3, #20]
 80082b4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80082b8:	9202      	str	r2, [sp, #8]
 80082ba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80082c2:	615a      	str	r2, [r3, #20]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082cc:	2403      	movs	r4, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80082ce:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082d0:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082d2:	2307      	movs	r3, #7
 80082d4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24

    GPIO_InitStruct.Pin = AI3_Pin|AI4_Pin|AI5_Pin|AI6_Pin
                          |AI7_Pin|AI8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d8:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082da:	f001 f9af 	bl	800963c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AI3_Pin|AI4_Pin|AI5_Pin|AI6_Pin
 80082de:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80082e2:	4847      	ldr	r0, [pc, #284]	; (8008400 <HAL_SDADC_MspInit+0x184>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80082e6:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082e8:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80082ec:	f001 f9a6 	bl	800963c <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 80082f0:	4c44      	ldr	r4, [pc, #272]	; (8008404 <HAL_SDADC_MspInit+0x188>)
 80082f2:	4b45      	ldr	r3, [pc, #276]	; (8008408 <HAL_SDADC_MspInit+0x18c>)

    /* SDADC3 DMA Init */
    /* SDADC3 Init */
    hdma_sdadc3.Instance = DMA2_Channel5;
    hdma_sdadc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sdadc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80082f4:	60a6      	str	r6, [r4, #8]
    hdma_sdadc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80082f6:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_sdadc3.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdadc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80082fa:	2280      	movs	r2, #128	; 0x80
 80082fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008300:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_sdadc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_sdadc3.Init.Mode = DMA_CIRCULAR;
 8008304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008308:	2320      	movs	r3, #32
 800830a:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hdma_sdadc3.Init.Priority = DMA_PRIORITY_LOW;
 800830e:	61e6      	str	r6, [r4, #28]
 8008310:	e030      	b.n	8008374 <HAL_SDADC_MspInit+0xf8>
  else if(hsdadc->Instance==SDADC2)
 8008312:	4a3e      	ldr	r2, [pc, #248]	; (800840c <HAL_SDADC_MspInit+0x190>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d137      	bne.n	8008388 <HAL_SDADC_MspInit+0x10c>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 8008318:	4b37      	ldr	r3, [pc, #220]	; (80083f8 <HAL_SDADC_MspInit+0x17c>)
    hdma_sdadc2.Instance = DMA2_Channel4;
 800831a:	4c3d      	ldr	r4, [pc, #244]	; (8008410 <HAL_SDADC_MspInit+0x194>)
    __HAL_RCC_SDADC2_CLK_ENABLE();
 800831c:	699a      	ldr	r2, [r3, #24]
    hdma_sdadc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800831e:	4e3d      	ldr	r6, [pc, #244]	; (8008414 <HAL_SDADC_MspInit+0x198>)
    __HAL_RCC_SDADC2_CLK_ENABLE();
 8008320:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008324:	619a      	str	r2, [r3, #24]
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800832c:	9204      	str	r2, [sp, #16]
 800832e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008330:	695a      	ldr	r2, [r3, #20]
 8008332:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8008336:	615a      	str	r2, [r3, #20]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800833e:	9305      	str	r3, [sp, #20]
 8008340:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008342:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8008346:	2303      	movs	r3, #3
 8008348:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800834c:	a909      	add	r1, sp, #36	; 0x24
 800834e:	482c      	ldr	r0, [pc, #176]	; (8008400 <HAL_SDADC_MspInit+0x184>)
 8008350:	f001 f974 	bl	800963c <HAL_GPIO_Init>
    hdma_sdadc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008358:	f04f 0c80 	mov.w	ip, #128	; 0x80
    hdma_sdadc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800835c:	2300      	movs	r3, #0
    hdma_sdadc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800835e:	e9c4 c203 	strd	ip, r2, [r4, #12]
    hdma_sdadc2.Init.Mode = DMA_CIRCULAR;
 8008362:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8008366:	2220      	movs	r2, #32
    hdma_sdadc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008368:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_sdadc2.Init.Mode = DMA_CIRCULAR;
 800836c:	e9c4 e205 	strd	lr, r2, [r4, #20]
    hdma_sdadc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008370:	60a3      	str	r3, [r4, #8]
    hdma_sdadc2.Init.Priority = DMA_PRIORITY_LOW;
 8008372:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_sdadc3) != HAL_OK)
 8008374:	4620      	mov	r0, r4
 8008376:	f000 ff99 	bl	80092ac <HAL_DMA_Init>
 800837a:	b108      	cbz	r0, 8008380 <HAL_SDADC_MspInit+0x104>
    {
      Error_Handler();
 800837c:	f7ff f816 	bl	80073ac <Error_Handler>
    }

    __HAL_LINKDMA(hsdadc,hdma,hdma_sdadc3);
 8008380:	616c      	str	r4, [r5, #20]
 8008382:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 8008384:	b00e      	add	sp, #56	; 0x38
 8008386:	bd70      	pop	{r4, r5, r6, pc}
  else if(hsdadc->Instance==SDADC3)
 8008388:	4a23      	ldr	r2, [pc, #140]	; (8008418 <HAL_SDADC_MspInit+0x19c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d1fa      	bne.n	8008384 <HAL_SDADC_MspInit+0x108>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 800838e:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <HAL_SDADC_MspInit+0x17c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008390:	481a      	ldr	r0, [pc, #104]	; (80083fc <HAL_SDADC_MspInit+0x180>)
    __HAL_RCC_SDADC3_CLK_ENABLE();
 8008392:	699a      	ldr	r2, [r3, #24]
 8008394:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008398:	619a      	str	r2, [r3, #24]
 800839a:	699a      	ldr	r2, [r3, #24]
 800839c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80083a0:	9206      	str	r2, [sp, #24]
 80083a2:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083a4:	695a      	ldr	r2, [r3, #20]
 80083a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80083aa:	615a      	str	r2, [r3, #20]
 80083ac:	695a      	ldr	r2, [r3, #20]
 80083ae:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80083b2:	9207      	str	r2, [sp, #28]
 80083b4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80083b6:	695a      	ldr	r2, [r3, #20]
 80083b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80083bc:	615a      	str	r2, [r3, #20]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083c4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083c6:	2403      	movs	r4, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80083c8:	9b08      	ldr	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083ca:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80083d0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d4:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083d6:	f001 f931 	bl	800963c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAI1P_Pin|DAI1M_Pin|DAI2P_Pin|DAI2M_Pin
 80083da:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083de:	480f      	ldr	r0, [pc, #60]	; (800841c <HAL_SDADC_MspInit+0x1a0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083e0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083e2:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083e4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083e8:	f001 f928 	bl	800963c <HAL_GPIO_Init>
    hdma_sdadc3.Instance = DMA2_Channel5;
 80083ec:	4c0c      	ldr	r4, [pc, #48]	; (8008420 <HAL_SDADC_MspInit+0x1a4>)
 80083ee:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <HAL_SDADC_MspInit+0x1a8>)
 80083f0:	e780      	b.n	80082f4 <HAL_SDADC_MspInit+0x78>
 80083f2:	bf00      	nop
 80083f4:	40016000 	.word	0x40016000
 80083f8:	40021000 	.word	0x40021000
 80083fc:	48000400 	.word	0x48000400
 8008400:	48001000 	.word	0x48001000
 8008404:	200020fc 	.word	0x200020fc
 8008408:	40020430 	.word	0x40020430
 800840c:	40016400 	.word	0x40016400
 8008410:	20002140 	.word	0x20002140
 8008414:	40020444 	.word	0x40020444
 8008418:	40016800 	.word	0x40016800
 800841c:	48000c00 	.word	0x48000c00
 8008420:	20002184 	.word	0x20002184
 8008424:	40020458 	.word	0x40020458

08008428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	4604      	mov	r4, r0
 800842c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800842e:	2214      	movs	r2, #20
 8008430:	2100      	movs	r1, #0
 8008432:	a803      	add	r0, sp, #12
 8008434:	f006 f9f2 	bl	800e81c <memset>
  if(hspi->Instance==SPI2)
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	4b1d      	ldr	r3, [pc, #116]	; (80084b0 <HAL_SPI_MspInit+0x88>)
 800843c:	429a      	cmp	r2, r3
 800843e:	d134      	bne.n	80084aa <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008440:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008444:	481b      	ldr	r0, [pc, #108]	; (80084b4 <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800844c:	61da      	str	r2, [r3, #28]
 800844e:	69da      	ldr	r2, [r3, #28]
 8008450:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008454:	9200      	str	r2, [sp, #0]
 8008456:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008458:	695a      	ldr	r2, [r3, #20]
 800845a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800845e:	615a      	str	r2, [r3, #20]
 8008460:	695a      	ldr	r2, [r3, #20]
 8008462:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8008466:	9201      	str	r2, [sp, #4]
 8008468:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800846a:	695a      	ldr	r2, [r3, #20]
 800846c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008470:	615a      	str	r2, [r3, #20]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008478:	9302      	str	r3, [sp, #8]
 800847a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800847c:	2602      	movs	r6, #2
 800847e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008482:	2503      	movs	r5, #3
 8008484:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008486:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008488:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800848c:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008490:	f001 f8d4 	bl	800963c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8008494:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008496:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800849a:	4807      	ldr	r0, [pc, #28]	; (80084b8 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800849c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084a0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084a2:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084a6:	f001 f8c9 	bl	800963c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80084aa:	b008      	add	sp, #32
 80084ac:	bd70      	pop	{r4, r5, r6, pc}
 80084ae:	bf00      	nop
 80084b0:	40003800 	.word	0x40003800
 80084b4:	48000400 	.word	0x48000400
 80084b8:	48000c00 	.word	0x48000c00

080084bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	4604      	mov	r4, r0
 80084c0:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c2:	2214      	movs	r2, #20
 80084c4:	2100      	movs	r1, #0
 80084c6:	a80b      	add	r0, sp, #44	; 0x2c
 80084c8:	f006 f9a8 	bl	800e81c <memset>
  if(htim_base->Instance==TIM2)
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d2:	d10c      	bne.n	80084ee <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80084d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80084d8:	69da      	ldr	r2, [r3, #28]
 80084da:	f042 0201 	orr.w	r2, r2, #1
 80084de:	61da      	str	r2, [r3, #28]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80084ea:	b010      	add	sp, #64	; 0x40
 80084ec:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_base->Instance==TIM5)
 80084ee:	4a74      	ldr	r2, [pc, #464]	; (80086c0 <HAL_TIM_Base_MspInit+0x204>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d10a      	bne.n	800850a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80084f4:	4b73      	ldr	r3, [pc, #460]	; (80086c4 <HAL_TIM_Base_MspInit+0x208>)
 80084f6:	69da      	ldr	r2, [r3, #28]
 80084f8:	f042 0208 	orr.w	r2, r2, #8
 80084fc:	61da      	str	r2, [r3, #28]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	9b01      	ldr	r3, [sp, #4]
 8008508:	e7ef      	b.n	80084ea <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM6)
 800850a:	4a6f      	ldr	r2, [pc, #444]	; (80086c8 <HAL_TIM_Base_MspInit+0x20c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d10a      	bne.n	8008526 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008510:	4b6c      	ldr	r3, [pc, #432]	; (80086c4 <HAL_TIM_Base_MspInit+0x208>)
 8008512:	69da      	ldr	r2, [r3, #28]
 8008514:	f042 0210 	orr.w	r2, r2, #16
 8008518:	61da      	str	r2, [r3, #28]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	9302      	str	r3, [sp, #8]
 8008522:	9b02      	ldr	r3, [sp, #8]
 8008524:	e7e1      	b.n	80084ea <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM12)
 8008526:	4a69      	ldr	r2, [pc, #420]	; (80086cc <HAL_TIM_Base_MspInit+0x210>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d10a      	bne.n	8008542 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800852c:	4b65      	ldr	r3, [pc, #404]	; (80086c4 <HAL_TIM_Base_MspInit+0x208>)
 800852e:	69da      	ldr	r2, [r3, #28]
 8008530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008534:	61da      	str	r2, [r3, #28]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853c:	9303      	str	r3, [sp, #12]
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	e7d3      	b.n	80084ea <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM13)
 8008542:	4a63      	ldr	r2, [pc, #396]	; (80086d0 <HAL_TIM_Base_MspInit+0x214>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d10a      	bne.n	800855e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8008548:	4b5e      	ldr	r3, [pc, #376]	; (80086c4 <HAL_TIM_Base_MspInit+0x208>)
 800854a:	69da      	ldr	r2, [r3, #28]
 800854c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008550:	61da      	str	r2, [r3, #28]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	9b04      	ldr	r3, [sp, #16]
 800855c:	e7c5      	b.n	80084ea <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM15)
 800855e:	4a5d      	ldr	r2, [pc, #372]	; (80086d4 <HAL_TIM_Base_MspInit+0x218>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d142      	bne.n	80085ea <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008564:	4b57      	ldr	r3, [pc, #348]	; (80086c4 <HAL_TIM_Base_MspInit+0x208>)
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8008566:	4d5c      	ldr	r5, [pc, #368]	; (80086d8 <HAL_TIM_Base_MspInit+0x21c>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800856e:	619a      	str	r2, [r3, #24]
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8008576:	9205      	str	r2, [sp, #20]
 8008578:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800857a:	695a      	ldr	r2, [r3, #20]
 800857c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008580:	615a      	str	r2, [r3, #20]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008588:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800858a:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800858c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800858e:	2302      	movs	r3, #2
 8008590:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008594:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8008596:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800859c:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800859e:	f001 f84d 	bl	800963c <HAL_GPIO_Init>
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80085a2:	2080      	movs	r0, #128	; 0x80
 80085a4:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80085a8:	494c      	ldr	r1, [pc, #304]	; (80086dc <HAL_TIM_Base_MspInit+0x220>)
 80085aa:	2300      	movs	r3, #0
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80085ac:	e9c5 0203 	strd	r0, r2, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_CIRCULAR;
 80085b0:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80085b4:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80085b6:	4628      	mov	r0, r5
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80085b8:	e9c5 1300 	strd	r1, r3, [r5]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_CIRCULAR;
 80085bc:	e9c5 6205 	strd	r6, r2, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80085c0:	60ab      	str	r3, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80085c2:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80085c4:	f000 fe72 	bl	80092ac <HAL_DMA_Init>
 80085c8:	b108      	cbz	r0, 80085ce <HAL_TIM_Base_MspInit+0x112>
      Error_Handler();
 80085ca:	f7fe feef 	bl	80073ac <Error_Handler>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80085ce:	2200      	movs	r2, #0
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80085d0:	e9c4 5508 	strd	r5, r5, [r4, #32]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 80085d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80085d8:	4611      	mov	r1, r2
 80085da:	2018      	movs	r0, #24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80085dc:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80085de:	f000 fd83 	bl	80090e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80085e2:	2018      	movs	r0, #24
 80085e4:	f000 fdb2 	bl	800914c <HAL_NVIC_EnableIRQ>
 80085e8:	e77f      	b.n	80084ea <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM16)
 80085ea:	4a3d      	ldr	r2, [pc, #244]	; (80086e0 <HAL_TIM_Base_MspInit+0x224>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d137      	bne.n	8008660 <HAL_TIM_Base_MspInit+0x1a4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80085f0:	4b34      	ldr	r3, [pc, #208]	; (80086c4 <HAL_TIM_Base_MspInit+0x208>)
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 80085f2:	483c      	ldr	r0, [pc, #240]	; (80086e4 <HAL_TIM_Base_MspInit+0x228>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 80085f4:	699a      	ldr	r2, [r3, #24]
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 80085f6:	4d3c      	ldr	r5, [pc, #240]	; (80086e8 <HAL_TIM_Base_MspInit+0x22c>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 80085f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80085fc:	619a      	str	r2, [r3, #24]
 80085fe:	699a      	ldr	r2, [r3, #24]
 8008600:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8008604:	9207      	str	r2, [sp, #28]
 8008606:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008608:	695a      	ldr	r2, [r3, #20]
 800860a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800860e:	615a      	str	r2, [r3, #20]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008616:	9308      	str	r3, [sp, #32]
 8008618:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800861a:	f44f 7680 	mov.w	r6, #256	; 0x100
 800861e:	2302      	movs	r3, #2
 8008620:	e9cd 630b 	strd	r6, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 8008624:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8008626:	2301      	movs	r3, #1
 8008628:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 800862a:	f001 f807 	bl	800963c <HAL_GPIO_Init>
    hdma_tim16_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800862e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 80086f8 <HAL_TIM_Base_MspInit+0x23c>
 8008632:	2300      	movs	r3, #0
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8008634:	2280      	movs	r2, #128	; 0x80
    hdma_tim16_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008636:	e9c5 e300 	strd	lr, r3, [r5]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800863a:	e9c5 2603 	strd	r2, r6, [r5, #12]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800863e:	60ab      	str	r3, [r5, #8]
    hdma_tim17_ch1_up.Init.Mode = DMA_CIRCULAR;
 8008640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008644:	2220      	movs	r2, #32
 8008646:	e9c5 1205 	strd	r1, r2, [r5, #20]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800864a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 800864c:	4628      	mov	r0, r5
 800864e:	f000 fe2d 	bl	80092ac <HAL_DMA_Init>
 8008652:	b108      	cbz	r0, 8008658 <HAL_TIM_Base_MspInit+0x19c>
      Error_Handler();
 8008654:	f7fe feaa 	bl	80073ac <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 8008658:	e9c4 5508 	strd	r5, r5, [r4, #32]
 800865c:	626c      	str	r4, [r5, #36]	; 0x24
}
 800865e:	e744      	b.n	80084ea <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM17)
 8008660:	4a22      	ldr	r2, [pc, #136]	; (80086ec <HAL_TIM_Base_MspInit+0x230>)
 8008662:	4293      	cmp	r3, r2
 8008664:	f47f af41 	bne.w	80084ea <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008668:	4b16      	ldr	r3, [pc, #88]	; (80086c4 <HAL_TIM_Base_MspInit+0x208>)
    hdma_tim17_ch1_up.Instance = DMA1_Channel1;
 800866a:	4d21      	ldr	r5, [pc, #132]	; (80086f0 <HAL_TIM_Base_MspInit+0x234>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 800866c:	699a      	ldr	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800866e:	4e21      	ldr	r6, [pc, #132]	; (80086f4 <HAL_TIM_Base_MspInit+0x238>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008670:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008674:	619a      	str	r2, [r3, #24]
 8008676:	699a      	ldr	r2, [r3, #24]
 8008678:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800867c:	9209      	str	r2, [sp, #36]	; 0x24
 800867e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008680:	695a      	ldr	r2, [r3, #20]
 8008682:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008686:	615a      	str	r2, [r3, #20]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800868e:	930a      	str	r3, [sp, #40]	; 0x28
 8008690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008692:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008696:	2302      	movs	r3, #2
 8008698:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 800869c:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800869e:	2301      	movs	r3, #1
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 80086a0:	4810      	ldr	r0, [pc, #64]	; (80086e4 <HAL_TIM_Base_MspInit+0x228>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80086a2:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 80086a4:	f000 ffca 	bl	800963c <HAL_GPIO_Init>
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086a8:	2300      	movs	r3, #0
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80086aa:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80086ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086b2:	e9c5 6300 	strd	r6, r3, [r5]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80086b6:	e9c5 c203 	strd	ip, r2, [r5, #12]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80086ba:	60ab      	str	r3, [r5, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 80086bc:	e7c0      	b.n	8008640 <HAL_TIM_Base_MspInit+0x184>
 80086be:	bf00      	nop
 80086c0:	40000c00 	.word	0x40000c00
 80086c4:	40021000 	.word	0x40021000
 80086c8:	40001000 	.word	0x40001000
 80086cc:	40001800 	.word	0x40001800
 80086d0:	40001c00 	.word	0x40001c00
 80086d4:	40014000 	.word	0x40014000
 80086d8:	200021c8 	.word	0x200021c8
 80086dc:	40020058 	.word	0x40020058
 80086e0:	40014400 	.word	0x40014400
 80086e4:	48000400 	.word	0x48000400
 80086e8:	2000220c 	.word	0x2000220c
 80086ec:	40014800 	.word	0x40014800
 80086f0:	20002250 	.word	0x20002250
 80086f4:	40020008 	.word	0x40020008
 80086f8:	40020030 	.word	0x40020030

080086fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80086fc:	b510      	push	{r4, lr}
 80086fe:	4604      	mov	r4, r0
 8008700:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008702:	2214      	movs	r2, #20
 8008704:	2100      	movs	r1, #0
 8008706:	a807      	add	r0, sp, #28
 8008708:	f006 f888 	bl	800e81c <memset>
  if(htim_encoder->Instance==TIM3)
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	4a2c      	ldr	r2, [pc, #176]	; (80087c0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d11a      	bne.n	800874a <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008714:	4b2b      	ldr	r3, [pc, #172]	; (80087c4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008716:	69da      	ldr	r2, [r3, #28]
 8008718:	f042 0202 	orr.w	r2, r2, #2
 800871c:	61da      	str	r2, [r3, #28]
 800871e:	69da      	ldr	r2, [r3, #28]
 8008720:	f002 0202 	and.w	r2, r2, #2
 8008724:	9201      	str	r2, [sp, #4]
 8008726:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008728:	695a      	ldr	r2, [r3, #20]
 800872a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800872e:	615a      	str	r2, [r3, #20]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	9b02      	ldr	r3, [sp, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = E2__Pin|E2_C7_Pin;
 800873a:	23c0      	movs	r3, #192	; 0xc0
    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**TIM19 GPIO Configuration
    PC10     ------> TIM19_CH1
    PC11     ------> TIM19_CH2
    */
    GPIO_InitStruct.Pin = E1__Pin|E1_C11_Pin;
 800873c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800873e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008740:	4821      	ldr	r0, [pc, #132]	; (80087c8 <HAL_TIM_Encoder_MspInit+0xcc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008742:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
 8008744:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008746:	a907      	add	r1, sp, #28
 8008748:	e01c      	b.n	8008784 <HAL_TIM_Encoder_MspInit+0x88>
  else if(htim_encoder->Instance==TIM4)
 800874a:	4a20      	ldr	r2, [pc, #128]	; (80087cc <HAL_TIM_Encoder_MspInit+0xd0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d11d      	bne.n	800878c <HAL_TIM_Encoder_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008750:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <HAL_TIM_Encoder_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008752:	481f      	ldr	r0, [pc, #124]	; (80087d0 <HAL_TIM_Encoder_MspInit+0xd4>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008754:	69da      	ldr	r2, [r3, #28]
 8008756:	f042 0204 	orr.w	r2, r2, #4
 800875a:	61da      	str	r2, [r3, #28]
 800875c:	69da      	ldr	r2, [r3, #28]
 800875e:	f002 0204 	and.w	r2, r2, #4
 8008762:	9203      	str	r2, [sp, #12]
 8008764:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008766:	695a      	ldr	r2, [r3, #20]
 8008768:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800876c:	615a      	str	r2, [r3, #20]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008778:	22c0      	movs	r2, #192	; 0xc0
 800877a:	2302      	movs	r3, #2
 800877c:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008780:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008782:	a907      	add	r1, sp, #28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008784:	f000 ff5a 	bl	800963c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM19_MspInit 1 */

  /* USER CODE END TIM19_MspInit 1 */
  }

}
 8008788:	b00c      	add	sp, #48	; 0x30
 800878a:	bd10      	pop	{r4, pc}
  else if(htim_encoder->Instance==TIM19)
 800878c:	4a11      	ldr	r2, [pc, #68]	; (80087d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d1fa      	bne.n	8008788 <HAL_TIM_Encoder_MspInit+0x8c>
    __HAL_RCC_TIM19_CLK_ENABLE();
 8008792:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800879a:	619a      	str	r2, [r3, #24]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80087a2:	9205      	str	r2, [sp, #20]
 80087a4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087a6:	695a      	ldr	r2, [r3, #20]
 80087a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80087ac:	615a      	str	r2, [r3, #20]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087b4:	9306      	str	r3, [sp, #24]
 80087b6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = E1__Pin|E1_C11_Pin;
 80087b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80087bc:	e7be      	b.n	800873c <HAL_TIM_Encoder_MspInit+0x40>
 80087be:	bf00      	nop
 80087c0:	40000400 	.word	0x40000400
 80087c4:	40021000 	.word	0x40021000
 80087c8:	48000800 	.word	0x48000800
 80087cc:	40000800 	.word	0x40000800
 80087d0:	48000400 	.word	0x48000400
 80087d4:	40015c00 	.word	0x40015c00

080087d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80087d8:	b510      	push	{r4, lr}
 80087da:	4604      	mov	r4, r0
 80087dc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087de:	2214      	movs	r2, #20
 80087e0:	2100      	movs	r1, #0
 80087e2:	a803      	add	r0, sp, #12
 80087e4:	f006 f81a 	bl	800e81c <memset>
  if(htim->Instance==TIM2)
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ee:	d125      	bne.n	800883c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA1     ------> TIM2_CH2
    PA9     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f4:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087f6:	695a      	ldr	r2, [r3, #20]
 80087f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80087fc:	615a      	str	r2, [r3, #20]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008808:	2303      	movs	r3, #3
 800880a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800880e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008810:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008816:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008818:	f000 ff10 	bl	800963c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin;
 800881c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008820:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008824:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008826:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800882a:	230a      	movs	r3, #10
 800882c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800882e:	a903      	add	r1, sp, #12
 8008830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008834:	f000 ff02 	bl	800963c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008838:	b008      	add	sp, #32
 800883a:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM5)
 800883c:	4a0a      	ldr	r2, [pc, #40]	; (8008868 <HAL_TIM_MspPostInit+0x90>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d1fa      	bne.n	8008838 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008842:	4b0a      	ldr	r3, [pc, #40]	; (800886c <HAL_TIM_MspPostInit+0x94>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008844:	480a      	ldr	r0, [pc, #40]	; (8008870 <HAL_TIM_MspPostInit+0x98>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008846:	695a      	ldr	r2, [r3, #20]
 8008848:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800884c:	615a      	str	r2, [r3, #20]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008854:	9302      	str	r3, [sp, #8]
 8008856:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008858:	220f      	movs	r2, #15
 800885a:	2302      	movs	r3, #2
 800885c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008860:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008862:	a903      	add	r1, sp, #12
 8008864:	e7e6      	b.n	8008834 <HAL_TIM_MspPostInit+0x5c>
 8008866:	bf00      	nop
 8008868:	40000c00 	.word	0x40000c00
 800886c:	40021000 	.word	0x40021000
 8008870:	48000800 	.word	0x48000800

08008874 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008874:	e7fe      	b.n	8008874 <NMI_Handler>

08008876 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008876:	e7fe      	b.n	8008876 <HardFault_Handler>

08008878 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008878:	e7fe      	b.n	8008878 <MemManage_Handler>

0800887a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800887a:	e7fe      	b.n	800887a <BusFault_Handler>

0800887c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800887c:	e7fe      	b.n	800887c <UsageFault_Handler>

0800887e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800887e:	4770      	bx	lr

08008880 <DebugMon_Handler>:
 8008880:	4770      	bx	lr

08008882 <PendSV_Handler>:
 8008882:	4770      	bx	lr

08008884 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008884:	f000 b8fe 	b.w	8008a84 <HAL_IncTick>

08008888 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <DMA1_Channel1_IRQHandler+0x8>)
 800888a:	f000 bd70 	b.w	800936e <HAL_DMA_IRQHandler>
 800888e:	bf00      	nop
 8008890:	20002250 	.word	0x20002250

08008894 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <DMA1_Channel3_IRQHandler+0x8>)
 8008896:	f000 bd6a 	b.w	800936e <HAL_DMA_IRQHandler>
 800889a:	bf00      	nop
 800889c:	2000220c 	.word	0x2000220c

080088a0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <DMA1_Channel5_IRQHandler+0x8>)
 80088a2:	f000 bd64 	b.w	800936e <HAL_DMA_IRQHandler>
 80088a6:	bf00      	nop
 80088a8:	200021c8 	.word	0x200021c8

080088ac <CAN_RX0_IRQHandler>:
void CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <CAN_RX0_IRQHandler+0x8>)
 80088ae:	f000 bb0b 	b.w	8008ec8 <HAL_CAN_IRQHandler>
 80088b2:	bf00      	nop
 80088b4:	200020ac 	.word	0x200020ac

080088b8 <TIM15_IRQHandler>:
void TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <TIM15_IRQHandler+0x8>)
 80088ba:	f003 bc71 	b.w	800c1a0 <HAL_TIM_IRQHandler>
 80088be:	bf00      	nop
 80088c0:	2000247c 	.word	0x2000247c

080088c4 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80088c4:	4801      	ldr	r0, [pc, #4]	; (80088cc <RTC_Alarm_IRQHandler+0x8>)
 80088c6:	f002 ba5f 	b.w	800ad88 <HAL_RTC_AlarmIRQHandler>
 80088ca:	bf00      	nop
 80088cc:	20002294 	.word	0x20002294

080088d0 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <DMA2_Channel3_IRQHandler+0x8>)
 80088d2:	f000 bd4c 	b.w	800936e <HAL_DMA_IRQHandler>
 80088d6:	bf00      	nop
 80088d8:	200020fc 	.word	0x200020fc

080088dc <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc2);
 80088dc:	4801      	ldr	r0, [pc, #4]	; (80088e4 <DMA2_Channel4_IRQHandler+0x8>)
 80088de:	f000 bd46 	b.w	800936e <HAL_DMA_IRQHandler>
 80088e2:	bf00      	nop
 80088e4:	20002140 	.word	0x20002140

080088e8 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc3);
 80088e8:	4801      	ldr	r0, [pc, #4]	; (80088f0 <DMA2_Channel5_IRQHandler+0x8>)
 80088ea:	f000 bd40 	b.w	800936e <HAL_DMA_IRQHandler>
 80088ee:	bf00      	nop
 80088f0:	20002184 	.word	0x20002184

080088f4 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80088f4:	4801      	ldr	r0, [pc, #4]	; (80088fc <USB_LP_IRQHandler+0x8>)
 80088f6:	f000 bffd 	b.w	80098f4 <HAL_PCD_IRQHandler>
 80088fa:	bf00      	nop
 80088fc:	20003438 	.word	0x20003438

08008900 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8008900:	2001      	movs	r0, #1
 8008902:	4770      	bx	lr

08008904 <_kill>:

int _kill(int pid, int sig)
{
 8008904:	b508      	push	{r3, lr}
	errno = EINVAL;
 8008906:	f005 ff37 	bl	800e778 <__errno>
 800890a:	2316      	movs	r3, #22
 800890c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	bd08      	pop	{r3, pc}

08008914 <_exit>:

void _exit (int status)
{
 8008914:	b508      	push	{r3, lr}
	errno = EINVAL;
 8008916:	f005 ff2f 	bl	800e778 <__errno>
 800891a:	2316      	movs	r3, #22
 800891c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800891e:	e7fe      	b.n	800891e <_exit+0xa>

08008920 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	460d      	mov	r5, r1
 8008924:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008926:	460e      	mov	r6, r1
 8008928:	1b73      	subs	r3, r6, r5
 800892a:	429c      	cmp	r4, r3
 800892c:	dc01      	bgt.n	8008932 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800892e:	4620      	mov	r0, r4
 8008930:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8008932:	f3af 8000 	nop.w
 8008936:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800893a:	e7f5      	b.n	8008928 <_read+0x8>

0800893c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	460d      	mov	r5, r1
 8008940:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008942:	460e      	mov	r6, r1
 8008944:	1b73      	subs	r3, r6, r5
 8008946:	429c      	cmp	r4, r3
 8008948:	dc01      	bgt.n	800894e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800894a:	4620      	mov	r0, r4
 800894c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800894e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8008952:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008956:	e7f5      	b.n	8008944 <_write+0x8>

08008958 <_close>:

int _close(int file)
{
	return -1;
}
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	4770      	bx	lr

0800895e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800895e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008962:	604b      	str	r3, [r1, #4]
	return 0;
}
 8008964:	2000      	movs	r0, #0
 8008966:	4770      	bx	lr

08008968 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8008968:	2001      	movs	r0, #1
 800896a:	4770      	bx	lr

0800896c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800896c:	2000      	movs	r0, #0
 800896e:	4770      	bx	lr

08008970 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008970:	4a0b      	ldr	r2, [pc, #44]	; (80089a0 <_sbrk+0x30>)
 8008972:	6811      	ldr	r1, [r2, #0]
{
 8008974:	b510      	push	{r4, lr}
 8008976:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8008978:	b909      	cbnz	r1, 800897e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800897a:	490a      	ldr	r1, [pc, #40]	; (80089a4 <_sbrk+0x34>)
 800897c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800897e:	6810      	ldr	r0, [r2, #0]
 8008980:	4909      	ldr	r1, [pc, #36]	; (80089a8 <_sbrk+0x38>)
 8008982:	4c0a      	ldr	r4, [pc, #40]	; (80089ac <_sbrk+0x3c>)
 8008984:	4403      	add	r3, r0
 8008986:	1b09      	subs	r1, r1, r4
 8008988:	428b      	cmp	r3, r1
 800898a:	d906      	bls.n	800899a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800898c:	f005 fef4 	bl	800e778 <__errno>
 8008990:	230c      	movs	r3, #12
 8008992:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008994:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8008998:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800899a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800899c:	e7fc      	b.n	8008998 <_sbrk+0x28>
 800899e:	bf00      	nop
 80089a0:	20002778 	.word	0x20002778
 80089a4:	20003958 	.word	0x20003958
 80089a8:	20006000 	.word	0x20006000
 80089ac:	00000400 	.word	0x00000400

080089b0 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80089b0:	4a03      	ldr	r2, [pc, #12]	; (80089c0 <SystemInit+0x10>)
 80089b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80089b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80089be:	4770      	bx	lr
 80089c0:	e000ed00 	.word	0xe000ed00

080089c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80089c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80089fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80089c8:	480d      	ldr	r0, [pc, #52]	; (8008a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80089ca:	490e      	ldr	r1, [pc, #56]	; (8008a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80089cc:	4a0e      	ldr	r2, [pc, #56]	; (8008a08 <LoopForever+0xe>)
  movs r3, #0
 80089ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80089d0:	e002      	b.n	80089d8 <LoopCopyDataInit>

080089d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80089d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80089d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80089d6:	3304      	adds	r3, #4

080089d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80089d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089dc:	d3f9      	bcc.n	80089d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80089de:	4a0b      	ldr	r2, [pc, #44]	; (8008a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80089e0:	4c0b      	ldr	r4, [pc, #44]	; (8008a10 <LoopForever+0x16>)
  movs r3, #0
 80089e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089e4:	e001      	b.n	80089ea <LoopFillZerobss>

080089e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089e8:	3204      	adds	r2, #4

080089ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089ec:	d3fb      	bcc.n	80089e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80089ee:	f7ff ffdf 	bl	80089b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80089f2:	f005 fec7 	bl	800e784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80089f6:	f7fe fd4d 	bl	8007494 <main>

080089fa <LoopForever>:

LoopForever:
    b LoopForever
 80089fa:	e7fe      	b.n	80089fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80089fc:	20006000 	.word	0x20006000
  ldr r0, =_sdata
 8008a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a04:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8008a08:	0801511c 	.word	0x0801511c
  ldr r2, =_sbss
 8008a0c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8008a10:	20003954 	.word	0x20003954

08008a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008a14:	e7fe      	b.n	8008a14 <ADC1_IRQHandler>
	...

08008a18 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a18:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a1a:	4a0e      	ldr	r2, [pc, #56]	; (8008a54 <HAL_InitTick+0x3c>)
 8008a1c:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <HAL_InitTick+0x40>)
{
 8008a1e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a20:	7818      	ldrb	r0, [r3, #0]
 8008a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a26:	fbb3 f3f0 	udiv	r3, r3, r0
 8008a2a:	6810      	ldr	r0, [r2, #0]
 8008a2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008a30:	f000 fb9a 	bl	8009168 <HAL_SYSTICK_Config>
 8008a34:	4604      	mov	r4, r0
 8008a36:	b958      	cbnz	r0, 8008a50 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a38:	2d0f      	cmp	r5, #15
 8008a3a:	d809      	bhi.n	8008a50 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	f000 fb50 	bl	80090e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <HAL_InitTick+0x44>)
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008a50:	2001      	movs	r0, #1
 8008a52:	e7fc      	b.n	8008a4e <HAL_InitTick+0x36>
 8008a54:	20000008 	.word	0x20000008
 8008a58:	2000000c 	.word	0x2000000c
 8008a5c:	20000010 	.word	0x20000010

08008a60 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a60:	4a07      	ldr	r2, [pc, #28]	; (8008a80 <HAL_Init+0x20>)
{
 8008a62:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a64:	6813      	ldr	r3, [r2, #0]
 8008a66:	f043 0310 	orr.w	r3, r3, #16
 8008a6a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a6c:	2003      	movs	r0, #3
 8008a6e:	f000 fb29 	bl	80090c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a72:	2000      	movs	r0, #0
 8008a74:	f7ff ffd0 	bl	8008a18 <HAL_InitTick>
  HAL_MspInit();
 8008a78:	f7ff fb44 	bl	8008104 <HAL_MspInit>
}
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	bd08      	pop	{r3, pc}
 8008a80:	40022000 	.word	0x40022000

08008a84 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008a84:	4a03      	ldr	r2, [pc, #12]	; (8008a94 <HAL_IncTick+0x10>)
 8008a86:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <HAL_IncTick+0x14>)
 8008a88:	6811      	ldr	r1, [r2, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	440b      	add	r3, r1
 8008a8e:	6013      	str	r3, [r2, #0]
}
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	2000277c 	.word	0x2000277c
 8008a98:	2000000c 	.word	0x2000000c

08008a9c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8008a9c:	4b01      	ldr	r3, [pc, #4]	; (8008aa4 <HAL_GetTick+0x8>)
 8008a9e:	6818      	ldr	r0, [r3, #0]
}
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	2000277c 	.word	0x2000277c

08008aa8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008aac:	f7ff fff6 	bl	8008a9c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ab0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008ab2:	bf1c      	itt	ne
 8008ab4:	4b05      	ldrne	r3, [pc, #20]	; (8008acc <HAL_Delay+0x24>)
 8008ab6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8008ab8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8008aba:	bf18      	it	ne
 8008abc:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8008abe:	f7ff ffed 	bl	8008a9c <HAL_GetTick>
 8008ac2:	1b43      	subs	r3, r0, r5
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	d3fa      	bcc.n	8008abe <HAL_Delay+0x16>
  {
  }
}
 8008ac8:	bd38      	pop	{r3, r4, r5, pc}
 8008aca:	bf00      	nop
 8008acc:	2000000c 	.word	0x2000000c

08008ad0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008ad0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d06e      	beq.n	8008bb6 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008ad8:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008adc:	b90b      	cbnz	r3, 8008ae2 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008ade:	f7ff fb29 	bl	8008134 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	6813      	ldr	r3, [r2, #0]
 8008ae6:	f043 0301 	orr.w	r3, r3, #1
 8008aea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008aec:	f7ff ffd6 	bl	8008a9c <HAL_GetTick>
 8008af0:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	07d1      	lsls	r1, r2, #31
 8008af8:	d551      	bpl.n	8008b9e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	f022 0202 	bic.w	r2, r2, #2
 8008b00:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b02:	f7ff ffcb 	bl	8008a9c <HAL_GetTick>
 8008b06:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	0792      	lsls	r2, r2, #30
 8008b0e:	d454      	bmi.n	8008bba <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008b10:	7e22      	ldrb	r2, [r4, #24]
 8008b12:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	bf0c      	ite	eq
 8008b18:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008b1c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8008b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008b22:	7e62      	ldrb	r2, [r4, #25]
 8008b24:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	bf0c      	ite	eq
 8008b2a:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008b2e:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8008b32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008b34:	7ea2      	ldrb	r2, [r4, #26]
 8008b36:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	bf0c      	ite	eq
 8008b3c:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008b40:	f022 0220 	bicne.w	r2, r2, #32
 8008b44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008b46:	7ee2      	ldrb	r2, [r4, #27]
 8008b48:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	bf0c      	ite	eq
 8008b4e:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008b52:	f042 0210 	orrne.w	r2, r2, #16
 8008b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008b58:	7f22      	ldrb	r2, [r4, #28]
 8008b5a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	bf0c      	ite	eq
 8008b60:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008b64:	f022 0208 	bicne.w	r2, r2, #8
 8008b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008b6a:	7f62      	ldrb	r2, [r4, #29]
 8008b6c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	bf0c      	ite	eq
 8008b72:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008b76:	f022 0204 	bicne.w	r2, r2, #4
 8008b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008b7c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	6921      	ldr	r1, [r4, #16]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	6961      	ldr	r1, [r4, #20]
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	6861      	ldr	r1, [r4, #4]
 8008b8c:	3901      	subs	r1, #1
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008b92:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008b94:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008b96:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8008b98:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008b9e:	f7ff ff7d 	bl	8008a9c <HAL_GetTick>
 8008ba2:	1b40      	subs	r0, r0, r5
 8008ba4:	280a      	cmp	r0, #10
 8008ba6:	d9a4      	bls.n	8008af2 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bae:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8008bb0:	2305      	movs	r3, #5
 8008bb2:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	e7f0      	b.n	8008b9c <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008bba:	f7ff ff6f 	bl	8008a9c <HAL_GetTick>
 8008bbe:	1b40      	subs	r0, r0, r5
 8008bc0:	280a      	cmp	r0, #10
 8008bc2:	d9a1      	bls.n	8008b08 <HAL_CAN_Init+0x38>
 8008bc4:	e7f0      	b.n	8008ba8 <HAL_CAN_Init+0xd8>

08008bc6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8008bc6:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008bc8:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d862      	bhi.n	8008c98 <HAL_CAN_ConfigFilter+0xd2>
  CAN_TypeDef *can_ip = hcan->Instance;
 8008bd2:	6803      	ldr	r3, [r0, #0]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008bd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008bd8:	f042 0201 	orr.w	r2, r2, #1
 8008bdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008be0:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008be2:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008be6:	2401      	movs	r4, #1
 8008be8:	f002 001f 	and.w	r0, r2, #31
 8008bec:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008bf0:	ea25 0500 	bic.w	r5, r5, r0
 8008bf4:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008bf8:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008bfa:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008bfc:	bb85      	cbnz	r5, 8008c60 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008bfe:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008c02:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008c04:	4025      	ands	r5, r4
 8008c06:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008c0a:	888d      	ldrh	r5, [r1, #4]
 8008c0c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008c10:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008c14:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008c18:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008c1a:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008c1c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008c20:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008c24:	698a      	ldr	r2, [r1, #24]
 8008c26:	bb6a      	cbnz	r2, 8008c84 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c2c:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008c2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008c32:	690a      	ldr	r2, [r1, #16]
 8008c34:	bb52      	cbnz	r2, 8008c8c <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008c36:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008c3a:	4014      	ands	r4, r2
 8008c3c:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008c40:	6a0a      	ldr	r2, [r1, #32]
 8008c42:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008c44:	bf02      	ittt	eq
 8008c46:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8008c4a:	4310      	orreq	r0, r2
 8008c4c:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008c50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008c54:	f022 0201 	bic.w	r2, r2, #1
 8008c58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008c5c:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008c60:	2d01      	cmp	r5, #1
 8008c62:	d1df      	bne.n	8008c24 <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008c64:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008c68:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008c6a:	4305      	orrs	r5, r0
 8008c6c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008c70:	888d      	ldrh	r5, [r1, #4]
 8008c72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008c76:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008c7a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008c7e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008c80:	898d      	ldrh	r5, [r1, #12]
 8008c82:	e7cb      	b.n	8008c1c <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008c84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c88:	4302      	orrs	r2, r0
 8008c8a:	e7d0      	b.n	8008c2e <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008c8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008c90:	4302      	orrs	r2, r0
 8008c92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008c96:	e7d3      	b.n	8008c40 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008c98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c9e:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	e7dc      	b.n	8008c5e <HAL_CAN_ConfigFilter+0x98>

08008ca4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008ca4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008ca6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008caa:	2b01      	cmp	r3, #1
{
 8008cac:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8008cae:	b2dd      	uxtb	r5, r3
 8008cb0:	d120      	bne.n	8008cf4 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008cb2:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008cba:	6813      	ldr	r3, [r2, #0]
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008cc2:	f7ff feeb 	bl	8008a9c <HAL_GetTick>
 8008cc6:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f013 0301 	ands.w	r3, r3, #1
 8008cd0:	d102      	bne.n	8008cd8 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008cd2:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8008cd4:	461d      	mov	r5, r3
 8008cd6:	e00b      	b.n	8008cf0 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008cd8:	f7ff fee0 	bl	8008a9c <HAL_GetTick>
 8008cdc:	1b80      	subs	r0, r0, r6
 8008cde:	280a      	cmp	r0, #10
 8008ce0:	d9f2      	bls.n	8008cc8 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce8:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8008cea:	2305      	movs	r3, #5
 8008cec:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008cf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cfa:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8008cfc:	2501      	movs	r5, #1
 8008cfe:	e7f7      	b.n	8008cf0 <HAL_CAN_Start+0x4c>

08008d00 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8008d00:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008d02:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008d06:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008d08:	3d01      	subs	r5, #1
 8008d0a:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008d0c:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8008d0e:	d843      	bhi.n	8008d98 <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008d10:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8008d14:	d03c      	beq.n	8008d90 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008d16:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8008d1a:	2c03      	cmp	r4, #3
 8008d1c:	f04f 0501 	mov.w	r5, #1
 8008d20:	d105      	bne.n	8008d2e <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8008d22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008d28:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	e02a      	b.n	8008d84 <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008d2e:	40a5      	lsls	r5, r4
 8008d30:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8008d32:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8008d36:	f104 0318 	add.w	r3, r4, #24
 8008d3a:	bb20      	cbnz	r0, 8008d86 <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008d3c:	6808      	ldr	r0, [r1, #0]
 8008d3e:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008d46:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8008d4a:	690d      	ldr	r5, [r1, #16]
 8008d4c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008d50:	7d09      	ldrb	r1, [r1, #20]
 8008d52:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008d54:	bf08      	it	eq
 8008d56:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8008d5a:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8008d5e:	bf04      	itt	eq
 8008d60:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8008d64:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008d68:	4406      	add	r6, r0
 8008d6a:	6851      	ldr	r1, [r2, #4]
 8008d6c:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008d70:	6812      	ldr	r2, [r2, #0]
 8008d72:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008d76:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8008d7a:	f042 0201 	orr.w	r2, r2, #1
 8008d7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8008d82:	2000      	movs	r0, #0
  }
}
 8008d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008d86:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8008d88:	4338      	orrs	r0, r7
 8008d8a:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8008d8e:	e7d8      	b.n	8008d42 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008d90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d96:	e7c7      	b.n	8008d28 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008d98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d9e:	e7c3      	b.n	8008d28 <HAL_CAN_AddTxMessage+0x28>

08008da0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008da0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8008da2:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008da6:	3c01      	subs	r4, #1
 8008da8:	2c01      	cmp	r4, #1
 8008daa:	d86c      	bhi.n	8008e86 <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008dac:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008dae:	b941      	cbnz	r1, 8008dc2 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008db0:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008db2:	07a4      	lsls	r4, r4, #30
 8008db4:	d107      	bne.n	8008dc6 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008db6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008db8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008dbc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	e056      	b.n	8008e70 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008dc2:	6934      	ldr	r4, [r6, #16]
 8008dc4:	e7f5      	b.n	8008db2 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008dc6:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8008dca:	010c      	lsls	r4, r1, #4
 8008dcc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8008dd0:	f007 0704 	and.w	r7, r7, #4
 8008dd4:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008dd6:	2f00      	cmp	r7, #0
 8008dd8:	d14b      	bne.n	8008e72 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008dda:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8008dde:	0d7f      	lsrs	r7, r7, #21
 8008de0:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008de2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8008de6:	f007 0702 	and.w	r7, r7, #2
 8008dea:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008dec:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8008df0:	f007 070f 	and.w	r7, r7, #15
 8008df4:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008df6:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008dfa:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008dfe:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008e00:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008e04:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008e06:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008e08:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008e0a:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8008e0e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8008e10:	6802      	ldr	r2, [r0, #0]
 8008e12:	4422      	add	r2, r4
 8008e14:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8008e18:	0a12      	lsrs	r2, r2, #8
 8008e1a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008e1c:	6802      	ldr	r2, [r0, #0]
 8008e1e:	4422      	add	r2, r4
 8008e20:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8008e24:	0c12      	lsrs	r2, r2, #16
 8008e26:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008e28:	6802      	ldr	r2, [r0, #0]
 8008e2a:	4422      	add	r2, r4
 8008e2c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8008e30:	0e12      	lsrs	r2, r2, #24
 8008e32:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008e34:	6802      	ldr	r2, [r0, #0]
 8008e36:	4422      	add	r2, r4
 8008e38:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8008e3c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008e3e:	6802      	ldr	r2, [r0, #0]
 8008e40:	4422      	add	r2, r4
 8008e42:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8008e46:	0a12      	lsrs	r2, r2, #8
 8008e48:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008e4a:	6802      	ldr	r2, [r0, #0]
 8008e4c:	4422      	add	r2, r4
 8008e4e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8008e52:	0c12      	lsrs	r2, r2, #16
 8008e54:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008e56:	6802      	ldr	r2, [r0, #0]
 8008e58:	4422      	add	r2, r4
 8008e5a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8008e5e:	0e12      	lsrs	r2, r2, #24
 8008e60:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008e62:	6803      	ldr	r3, [r0, #0]
 8008e64:	b951      	cbnz	r1, 8008e7c <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	f042 0220 	orr.w	r2, r2, #32
 8008e6c:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8008e6e:	2000      	movs	r0, #0
  }
}
 8008e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008e72:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8008e76:	08ff      	lsrs	r7, r7, #3
 8008e78:	6057      	str	r7, [r2, #4]
 8008e7a:	e7b2      	b.n	8008de2 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008e7c:	691a      	ldr	r2, [r3, #16]
 8008e7e:	f042 0220 	orr.w	r2, r2, #32
 8008e82:	611a      	str	r2, [r3, #16]
 8008e84:	e7f3      	b.n	8008e6e <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008e86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e8c:	e796      	b.n	8008dbc <HAL_CAN_GetRxMessage+0x1c>

08008e8e <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8008e8e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008e92:	3b01      	subs	r3, #1
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d805      	bhi.n	8008ea4 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008e98:	6802      	ldr	r2, [r0, #0]
 8008e9a:	6953      	ldr	r3, [r2, #20]
 8008e9c:	4319      	orrs	r1, r3
 8008e9e:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008ea4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008eaa:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8008eac:	2001      	movs	r0, #1
  }
}
 8008eae:	4770      	bx	lr

08008eb0 <HAL_CAN_TxMailbox0CompleteCallback>:
 8008eb0:	4770      	bx	lr

08008eb2 <HAL_CAN_TxMailbox1CompleteCallback>:
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_CAN_TxMailbox2CompleteCallback>:
 8008eb4:	4770      	bx	lr

08008eb6 <HAL_CAN_TxMailbox0AbortCallback>:
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_CAN_TxMailbox1AbortCallback>:
 8008eb8:	4770      	bx	lr

08008eba <HAL_CAN_TxMailbox2AbortCallback>:
 8008eba:	4770      	bx	lr

08008ebc <HAL_CAN_RxFifo0FullCallback>:
 8008ebc:	4770      	bx	lr

08008ebe <HAL_CAN_RxFifo1MsgPendingCallback>:
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_CAN_RxFifo1FullCallback>:
 8008ec0:	4770      	bx	lr

08008ec2 <HAL_CAN_SleepCallback>:
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8008ec4:	4770      	bx	lr

08008ec6 <HAL_CAN_ErrorCallback>:
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008ecc:	6803      	ldr	r3, [r0, #0]
 8008ece:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008ed0:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008ed4:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008ed6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008eda:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008ede:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008ee2:	f016 0401 	ands.w	r4, r6, #1
{
 8008ee6:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008ee8:	d022      	beq.n	8008f30 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008eea:	f017 0401 	ands.w	r4, r7, #1
 8008eee:	d007      	beq.n	8008f00 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008ef0:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008ef2:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008ef4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008ef6:	f140 80a5 	bpl.w	8009044 <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008efa:	f7ff ffd9 	bl	8008eb0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008efe:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008f00:	05fb      	lsls	r3, r7, #23
 8008f02:	d509      	bpl.n	8008f18 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008f0a:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008f0c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008f0e:	f140 80a7 	bpl.w	8009060 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008f12:	4628      	mov	r0, r5
 8008f14:	f7ff ffcd 	bl	8008eb2 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008f18:	03fb      	lsls	r3, r7, #15
 8008f1a:	d509      	bpl.n	8008f30 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008f22:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008f24:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008f26:	f140 80a9 	bpl.w	800907c <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f7ff ffc2 	bl	8008eb4 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008f30:	0733      	lsls	r3, r6, #28
 8008f32:	d507      	bpl.n	8008f44 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008f34:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008f38:	bf1f      	itttt	ne
 8008f3a:	682b      	ldrne	r3, [r5, #0]
 8008f3c:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008f3e:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008f42:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008f44:	0777      	lsls	r7, r6, #29
 8008f46:	d508      	bpl.n	8008f5a <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008f48:	f01b 0f08 	tst.w	fp, #8
 8008f4c:	d005      	beq.n	8008f5a <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008f4e:	682b      	ldr	r3, [r5, #0]
 8008f50:	2208      	movs	r2, #8
 8008f52:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7ff ffb1 	bl	8008ebc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008f5a:	07b0      	lsls	r0, r6, #30
 8008f5c:	d506      	bpl.n	8008f6c <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008f5e:	682b      	ldr	r3, [r5, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	0799      	lsls	r1, r3, #30
 8008f64:	d002      	beq.n	8008f6c <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008f66:	4628      	mov	r0, r5
 8008f68:	f7f8 f91e 	bl	80011a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008f6c:	0672      	lsls	r2, r6, #25
 8008f6e:	d507      	bpl.n	8008f80 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008f70:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008f74:	bf1f      	itttt	ne
 8008f76:	682b      	ldrne	r3, [r5, #0]
 8008f78:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008f7a:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008f7e:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008f80:	06b3      	lsls	r3, r6, #26
 8008f82:	d508      	bpl.n	8008f96 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008f84:	f01a 0f08 	tst.w	sl, #8
 8008f88:	d005      	beq.n	8008f96 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008f8a:	682b      	ldr	r3, [r5, #0]
 8008f8c:	2208      	movs	r2, #8
 8008f8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008f90:	4628      	mov	r0, r5
 8008f92:	f7ff ff95 	bl	8008ec0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008f96:	06f7      	lsls	r7, r6, #27
 8008f98:	d506      	bpl.n	8008fa8 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	0798      	lsls	r0, r3, #30
 8008fa0:	d002      	beq.n	8008fa8 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f7ff ff8b 	bl	8008ebe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008fa8:	03b1      	lsls	r1, r6, #14
 8008faa:	d508      	bpl.n	8008fbe <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008fac:	f019 0f10 	tst.w	r9, #16
 8008fb0:	d005      	beq.n	8008fbe <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	2210      	movs	r2, #16
 8008fb6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f7ff ff82 	bl	8008ec2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008fbe:	03f2      	lsls	r2, r6, #15
 8008fc0:	d508      	bpl.n	8008fd4 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008fc2:	f019 0f08 	tst.w	r9, #8
 8008fc6:	d005      	beq.n	8008fd4 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008fc8:	682b      	ldr	r3, [r5, #0]
 8008fca:	2208      	movs	r2, #8
 8008fcc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f7ff ff78 	bl	8008ec4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008fd4:	0433      	lsls	r3, r6, #16
 8008fd6:	d52c      	bpl.n	8009032 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008fd8:	f019 0f04 	tst.w	r9, #4
 8008fdc:	682a      	ldr	r2, [r5, #0]
 8008fde:	d026      	beq.n	800902e <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008fe0:	05f7      	lsls	r7, r6, #23
 8008fe2:	d504      	bpl.n	8008fee <HAL_CAN_IRQHandler+0x126>
 8008fe4:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008fe8:	bf18      	it	ne
 8008fea:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008fee:	05b0      	lsls	r0, r6, #22
 8008ff0:	d504      	bpl.n	8008ffc <HAL_CAN_IRQHandler+0x134>
 8008ff2:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008ff6:	bf18      	it	ne
 8008ff8:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008ffc:	0571      	lsls	r1, r6, #21
 8008ffe:	d504      	bpl.n	800900a <HAL_CAN_IRQHandler+0x142>
 8009000:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009004:	bf18      	it	ne
 8009006:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800900a:	0533      	lsls	r3, r6, #20
 800900c:	d50f      	bpl.n	800902e <HAL_CAN_IRQHandler+0x166>
 800900e:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8009012:	d00c      	beq.n	800902e <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8009014:	2b40      	cmp	r3, #64	; 0x40
 8009016:	d04f      	beq.n	80090b8 <HAL_CAN_IRQHandler+0x1f0>
 8009018:	d83e      	bhi.n	8009098 <HAL_CAN_IRQHandler+0x1d0>
 800901a:	2b20      	cmp	r3, #32
 800901c:	d046      	beq.n	80090ac <HAL_CAN_IRQHandler+0x1e4>
 800901e:	2b30      	cmp	r3, #48	; 0x30
 8009020:	d047      	beq.n	80090b2 <HAL_CAN_IRQHandler+0x1ea>
 8009022:	2b10      	cmp	r3, #16
 8009024:	d03f      	beq.n	80090a6 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009026:	6993      	ldr	r3, [r2, #24]
 8009028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800902c:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800902e:	2304      	movs	r3, #4
 8009030:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009032:	b12c      	cbz	r4, 8009040 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009034:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009036:	431c      	orrs	r4, r3
 8009038:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800903a:	4628      	mov	r0, r5
 800903c:	f7ff ff43 	bl	8008ec6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009044:	077a      	lsls	r2, r7, #29
 8009046:	d405      	bmi.n	8009054 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009048:	f017 0408 	ands.w	r4, r7, #8
 800904c:	d105      	bne.n	800905a <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800904e:	f7ff ff32 	bl	8008eb6 <HAL_CAN_TxMailbox0AbortCallback>
 8009052:	e755      	b.n	8008f00 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009054:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8009058:	e752      	b.n	8008f00 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800905a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800905e:	e74f      	b.n	8008f00 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009060:	0579      	lsls	r1, r7, #21
 8009062:	d502      	bpl.n	800906a <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009064:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8009068:	e756      	b.n	8008f18 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800906a:	053a      	lsls	r2, r7, #20
 800906c:	d502      	bpl.n	8009074 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800906e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8009072:	e751      	b.n	8008f18 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009074:	4628      	mov	r0, r5
 8009076:	f7ff ff1f 	bl	8008eb8 <HAL_CAN_TxMailbox1AbortCallback>
 800907a:	e74d      	b.n	8008f18 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800907c:	0379      	lsls	r1, r7, #13
 800907e:	d502      	bpl.n	8009086 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009080:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8009084:	e754      	b.n	8008f30 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009086:	033a      	lsls	r2, r7, #12
 8009088:	d502      	bpl.n	8009090 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800908a:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800908e:	e74f      	b.n	8008f30 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009090:	4628      	mov	r0, r5
 8009092:	f7ff ff12 	bl	8008eba <HAL_CAN_TxMailbox2AbortCallback>
 8009096:	e74b      	b.n	8008f30 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8009098:	2b50      	cmp	r3, #80	; 0x50
 800909a:	d010      	beq.n	80090be <HAL_CAN_IRQHandler+0x1f6>
 800909c:	2b60      	cmp	r3, #96	; 0x60
 800909e:	d1c2      	bne.n	8009026 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80090a0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80090a4:	e7bf      	b.n	8009026 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 80090a6:	f044 0408 	orr.w	r4, r4, #8
            break;
 80090aa:	e7bc      	b.n	8009026 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80090ac:	f044 0410 	orr.w	r4, r4, #16
            break;
 80090b0:	e7b9      	b.n	8009026 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80090b2:	f044 0420 	orr.w	r4, r4, #32
            break;
 80090b6:	e7b6      	b.n	8009026 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 80090b8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80090bc:	e7b3      	b.n	8009026 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 80090be:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80090c2:	e7b0      	b.n	8009026 <HAL_CAN_IRQHandler+0x15e>

080090c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090c4:	4907      	ldr	r1, [pc, #28]	; (80090e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80090c6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090cc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090ce:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090d4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80090d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80090dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80090e0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80090e2:	4770      	bx	lr
 80090e4:	e000ed00 	.word	0xe000ed00

080090e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090e8:	4b16      	ldr	r3, [pc, #88]	; (8009144 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090ea:	b530      	push	{r4, r5, lr}
 80090ec:	68dc      	ldr	r4, [r3, #12]
 80090ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090f2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090f6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090f8:	2d04      	cmp	r5, #4
 80090fa:	bf28      	it	cs
 80090fc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090fe:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009100:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009104:	bf8c      	ite	hi
 8009106:	3c03      	subhi	r4, #3
 8009108:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800910a:	fa03 f505 	lsl.w	r5, r3, r5
 800910e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009112:	40a3      	lsls	r3, r4
 8009114:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009118:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800911a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800911c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009120:	bfac      	ite	ge
 8009122:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009126:	4a08      	ldrlt	r2, [pc, #32]	; (8009148 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009128:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800912c:	bfb8      	it	lt
 800912e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009132:	b2db      	uxtb	r3, r3
 8009134:	bfaa      	itet	ge
 8009136:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800913a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800913c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009140:	bd30      	pop	{r4, r5, pc}
 8009142:	bf00      	nop
 8009144:	e000ed00 	.word	0xe000ed00
 8009148:	e000ed14 	.word	0xe000ed14

0800914c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800914c:	2800      	cmp	r0, #0
 800914e:	db08      	blt.n	8009162 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009150:	0942      	lsrs	r2, r0, #5
 8009152:	2301      	movs	r3, #1
 8009154:	f000 001f 	and.w	r0, r0, #31
 8009158:	fa03 f000 	lsl.w	r0, r3, r0
 800915c:	4b01      	ldr	r3, [pc, #4]	; (8009164 <HAL_NVIC_EnableIRQ+0x18>)
 800915e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009162:	4770      	bx	lr
 8009164:	e000e100 	.word	0xe000e100

08009168 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009168:	3801      	subs	r0, #1
 800916a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800916e:	d20b      	bcs.n	8009188 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009170:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009174:	4a05      	ldr	r2, [pc, #20]	; (800918c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009176:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009178:	21f0      	movs	r1, #240	; 0xf0
 800917a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800917e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009180:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009182:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009184:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009186:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8009188:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800918a:	4770      	bx	lr
 800918c:	e000ed00 	.word	0xe000ed00

08009190 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8009190:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8009192:	4604      	mov	r4, r0
 8009194:	b168      	cbz	r0, 80091b2 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8009196:	7903      	ldrb	r3, [r0, #4]
 8009198:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800919c:	b913      	cbnz	r3, 80091a4 <HAL_DAC_Init+0x14>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800919e:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80091a0:	f7ff f802 	bl	80081a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80091a4:	2302      	movs	r3, #2
 80091a6:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80091a8:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80091aa:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80091ac:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80091ae:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80091b0:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80091b2:	2001      	movs	r0, #1
 80091b4:	e7fc      	b.n	80091b0 <HAL_DAC_Init+0x20>

080091b6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80091b6:	b513      	push	{r0, r1, r4, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80091b8:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 80091ba:	2400      	movs	r4, #0
 80091bc:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 80091be:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80091c0:	b941      	cbnz	r1, 80091d4 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80091c2:	9901      	ldr	r1, [sp, #4]
 80091c4:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80091c6:	440a      	add	r2, r1
 80091c8:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80091ca:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80091cc:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80091ce:	6013      	str	r3, [r2, #0]
}
 80091d0:	b002      	add	sp, #8
 80091d2:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80091d4:	9901      	ldr	r1, [sp, #4]
 80091d6:	3114      	adds	r1, #20
 80091d8:	e7f5      	b.n	80091c6 <HAL_DAC_SetValue+0x10>

080091da <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80091da:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80091dc:	7943      	ldrb	r3, [r0, #5]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	f04f 0302 	mov.w	r3, #2
 80091e4:	d014      	beq.n	8009210 <HAL_DAC_Start+0x36>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80091e6:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80091e8:	6803      	ldr	r3, [r0, #0]
 80091ea:	2201      	movs	r2, #1
 80091ec:	681c      	ldr	r4, [r3, #0]
 80091ee:	408a      	lsls	r2, r1
 80091f0:	4322      	orrs	r2, r4
 80091f2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80091f4:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 80091f6:	b969      	cbnz	r1, 8009214 <HAL_DAC_Start+0x3a>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80091f8:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80091fc:	2a3c      	cmp	r2, #60	; 0x3c
 80091fe:	d103      	bne.n	8009208 <HAL_DAC_Start+0x2e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009206:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009208:	2301      	movs	r3, #1
 800920a:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800920c:	2300      	movs	r3, #0
 800920e:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8009210:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 8009212:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8009214:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8009218:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800921c:	d1f4      	bne.n	8009208 <HAL_DAC_Start+0x2e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	f042 0202 	orr.w	r2, r2, #2
 8009224:	e7ef      	b.n	8009206 <HAL_DAC_Start+0x2c>

08009226 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8009226:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8009228:	7943      	ldrb	r3, [r0, #5]
 800922a:	2b01      	cmp	r3, #1
 800922c:	f04f 0302 	mov.w	r3, #2
 8009230:	d018      	beq.n	8009264 <HAL_DAC_ConfigChannel+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009232:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8009234:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8009236:	6823      	ldr	r3, [r4, #0]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8009238:	f640 75fe 	movw	r5, #4094	; 0xffe
 800923c:	4095      	lsls	r5, r2
 800923e:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8009242:	e9d1 3100 	ldrd	r3, r1, [r1]
 8009246:	430b      	orrs	r3, r1
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8009248:	4093      	lsls	r3, r2
 800924a:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800924c:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	21c0      	movs	r1, #192	; 0xc0
 8009252:	fa01 f202 	lsl.w	r2, r1, r2
 8009256:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800925a:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800925c:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800925e:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009260:	2300      	movs	r3, #0
 8009262:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8009264:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8009266:	bd30      	pop	{r4, r5, pc}

08009268 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009268:	6801      	ldr	r1, [r0, #0]
 800926a:	4b0c      	ldr	r3, [pc, #48]	; (800929c <DMA_CalcBaseAndBitshift+0x34>)
 800926c:	4299      	cmp	r1, r3
{
 800926e:	b510      	push	{r4, lr}
 8009270:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009274:	d809      	bhi.n	800928a <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009276:	4a0a      	ldr	r2, [pc, #40]	; (80092a0 <DMA_CalcBaseAndBitshift+0x38>)
 8009278:	440a      	add	r2, r1
 800927a:	fbb2 f2f4 	udiv	r2, r2, r4
 800927e:	0092      	lsls	r2, r2, #2
 8009280:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8009282:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8009286:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8009288:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800928a:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <DMA_CalcBaseAndBitshift+0x3c>)
 800928c:	440b      	add	r3, r1
 800928e:	fbb3 f3f4 	udiv	r3, r3, r4
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8009296:	4b04      	ldr	r3, [pc, #16]	; (80092a8 <DMA_CalcBaseAndBitshift+0x40>)
 8009298:	e7f5      	b.n	8009286 <DMA_CalcBaseAndBitshift+0x1e>
 800929a:	bf00      	nop
 800929c:	40020407 	.word	0x40020407
 80092a0:	bffdfff8 	.word	0xbffdfff8
 80092a4:	bffdfbf8 	.word	0xbffdfbf8
 80092a8:	40020400 	.word	0x40020400

080092ac <HAL_DMA_Init>:
{ 
 80092ac:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 80092ae:	4604      	mov	r4, r0
 80092b0:	b1f8      	cbz	r0, 80092f2 <HAL_DMA_Init+0x46>
  hdma->State = HAL_DMA_STATE_BUSY;
 80092b2:	2302      	movs	r3, #2
 80092b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 80092b8:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 80092bc:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092be:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 80092c0:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092c2:	432b      	orrs	r3, r5
 80092c4:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80092c6:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092c8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092ca:	6945      	ldr	r5, [r0, #20]
 80092cc:	432b      	orrs	r3, r5
 80092ce:	6985      	ldr	r5, [r0, #24]
 80092d0:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80092d2:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80092d4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80092d8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80092dc:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80092de:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80092e0:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80092e2:	f7ff ffc1 	bl	8009268 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092e6:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 80092e8:	f44f 7380 	mov.w	r3, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092ec:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80092ee:	8423      	strh	r3, [r4, #32]
}  
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80092f2:	2001      	movs	r0, #1
 80092f4:	e7fc      	b.n	80092f0 <HAL_DMA_Init+0x44>

080092f6 <HAL_DMA_Start_IT>:
{
 80092f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80092f8:	f890 4020 	ldrb.w	r4, [r0, #32]
 80092fc:	2c01      	cmp	r4, #1
 80092fe:	d034      	beq.n	800936a <HAL_DMA_Start_IT+0x74>
  if(HAL_DMA_STATE_READY == hdma->State)
 8009300:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8009304:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8009306:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8009308:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800930c:	f04f 0600 	mov.w	r6, #0
 8009310:	f04f 0402 	mov.w	r4, #2
 8009314:	d127      	bne.n	8009366 <HAL_DMA_Start_IT+0x70>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8009316:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800931a:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800931c:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800931e:	6826      	ldr	r6, [r4, #0]
 8009320:	f026 0601 	bic.w	r6, r6, #1
 8009324:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8009326:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 800932a:	40bd      	lsls	r5, r7
 800932c:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800932e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009330:	6843      	ldr	r3, [r0, #4]
 8009332:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8009334:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8009336:	bf0b      	itete	eq
 8009338:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800933a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800933c:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800933e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8009340:	b14b      	cbz	r3, 8009356 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8009348:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	f043 0301 	orr.w	r3, r3, #1
 8009350:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009352:	2000      	movs	r0, #0
} 
 8009354:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	f043 030a 	orr.w	r3, r3, #10
 800935c:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	f023 0304 	bic.w	r3, r3, #4
 8009364:	e7f0      	b.n	8009348 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8009366:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800936a:	2002      	movs	r0, #2
 800936c:	e7f2      	b.n	8009354 <HAL_DMA_Start_IT+0x5e>

0800936e <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800936e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8009370:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8009372:	6803      	ldr	r3, [r0, #0]
{
 8009374:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009376:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8009378:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800937a:	2404      	movs	r4, #4
 800937c:	4094      	lsls	r4, r2
 800937e:	4234      	tst	r4, r6
 8009380:	d00e      	beq.n	80093a0 <HAL_DMA_IRQHandler+0x32>
 8009382:	f015 0f04 	tst.w	r5, #4
 8009386:	d00b      	beq.n	80093a0 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800938c:	bf5e      	ittt	pl
 800938e:	681a      	ldrpl	r2, [r3, #0]
 8009390:	f022 0204 	bicpl.w	r2, r2, #4
 8009394:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8009396:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8009398:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800939a:	b363      	cbz	r3, 80093f6 <HAL_DMA_IRQHandler+0x88>
}  
 800939c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800939e:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80093a0:	2402      	movs	r4, #2
 80093a2:	4094      	lsls	r4, r2
 80093a4:	4234      	tst	r4, r6
 80093a6:	d012      	beq.n	80093ce <HAL_DMA_IRQHandler+0x60>
 80093a8:	f015 0f02 	tst.w	r5, #2
 80093ac:	d00f      	beq.n	80093ce <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	0695      	lsls	r5, r2, #26
 80093b2:	d406      	bmi.n	80093c2 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	f022 020a 	bic.w	r2, r2, #10
 80093ba:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80093bc:	2301      	movs	r3, #1
 80093be:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80093c2:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80093c4:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80093c6:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80093ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80093cc:	e7e5      	b.n	800939a <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80093ce:	2408      	movs	r4, #8
 80093d0:	4094      	lsls	r4, r2
 80093d2:	4234      	tst	r4, r6
 80093d4:	d00f      	beq.n	80093f6 <HAL_DMA_IRQHandler+0x88>
 80093d6:	072c      	lsls	r4, r5, #28
 80093d8:	d50d      	bpl.n	80093f6 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80093da:	681c      	ldr	r4, [r3, #0]
 80093dc:	f024 040e 	bic.w	r4, r4, #14
 80093e0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80093e2:	2301      	movs	r3, #1
 80093e4:	fa03 f202 	lsl.w	r2, r3, r2
 80093e8:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80093ea:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 80093ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093f0:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80093f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80093f4:	e7d1      	b.n	800939a <HAL_DMA_IRQHandler+0x2c>
}  
 80093f6:	bc70      	pop	{r4, r5, r6}
 80093f8:	4770      	bx	lr
	...

080093fc <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80093fc:	4a0b      	ldr	r2, [pc, #44]	; (800942c <FLASH_SetErrorCode+0x30>)
 80093fe:	68d3      	ldr	r3, [r2, #12]
 8009400:	f013 0310 	ands.w	r3, r3, #16
 8009404:	d005      	beq.n	8009412 <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009406:	490a      	ldr	r1, [pc, #40]	; (8009430 <FLASH_SetErrorCode+0x34>)
 8009408:	69cb      	ldr	r3, [r1, #28]
 800940a:	f043 0302 	orr.w	r3, r3, #2
 800940e:	61cb      	str	r3, [r1, #28]
    flags |= FLASH_FLAG_WRPERR;
 8009410:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009412:	68d2      	ldr	r2, [r2, #12]
 8009414:	0752      	lsls	r2, r2, #29
 8009416:	d506      	bpl.n	8009426 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8009418:	4905      	ldr	r1, [pc, #20]	; (8009430 <FLASH_SetErrorCode+0x34>)
 800941a:	69ca      	ldr	r2, [r1, #28]
 800941c:	f042 0201 	orr.w	r2, r2, #1
 8009420:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8009422:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8009426:	4a01      	ldr	r2, [pc, #4]	; (800942c <FLASH_SetErrorCode+0x30>)
 8009428:	60d3      	str	r3, [r2, #12]
}  
 800942a:	4770      	bx	lr
 800942c:	40022000 	.word	0x40022000
 8009430:	20002780 	.word	0x20002780

08009434 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009434:	4b06      	ldr	r3, [pc, #24]	; (8009450 <HAL_FLASH_Unlock+0x1c>)
 8009436:	6918      	ldr	r0, [r3, #16]
 8009438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800943c:	d007      	beq.n	800944e <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800943e:	4a05      	ldr	r2, [pc, #20]	; (8009454 <HAL_FLASH_Unlock+0x20>)
 8009440:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009442:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8009446:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009448:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800944a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800944e:	4770      	bx	lr
 8009450:	40022000 	.word	0x40022000
 8009454:	45670123 	.word	0x45670123

08009458 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009458:	4a03      	ldr	r2, [pc, #12]	; (8009468 <HAL_FLASH_Lock+0x10>)
 800945a:	6913      	ldr	r3, [r2, #16]
 800945c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009460:	6113      	str	r3, [r2, #16]
}
 8009462:	2000      	movs	r0, #0
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	40022000 	.word	0x40022000

0800946c <FLASH_WaitForLastOperation>:
{
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8009470:	f7ff fb14 	bl	8008a9c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8009474:	4c0f      	ldr	r4, [pc, #60]	; (80094b4 <FLASH_WaitForLastOperation+0x48>)
  uint32_t tickstart = HAL_GetTick();
 8009476:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8009478:	68e3      	ldr	r3, [r4, #12]
 800947a:	07d9      	lsls	r1, r3, #31
 800947c:	d40f      	bmi.n	800949e <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800947e:	68e3      	ldr	r3, [r4, #12]
 8009480:	069a      	lsls	r2, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009482:	bf44      	itt	mi
 8009484:	2320      	movmi	r3, #32
 8009486:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009488:	68e3      	ldr	r3, [r4, #12]
 800948a:	06db      	lsls	r3, r3, #27
 800948c:	d403      	bmi.n	8009496 <FLASH_WaitForLastOperation+0x2a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800948e:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009490:	f010 0004 	ands.w	r0, r0, #4
 8009494:	d007      	beq.n	80094a6 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 8009496:	f7ff ffb1 	bl	80093fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 800949a:	2001      	movs	r0, #1
 800949c:	e003      	b.n	80094a6 <FLASH_WaitForLastOperation+0x3a>
    if (Timeout != HAL_MAX_DELAY)
 800949e:	1c68      	adds	r0, r5, #1
 80094a0:	d0ea      	beq.n	8009478 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80094a2:	b90d      	cbnz	r5, 80094a8 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 80094a4:	2003      	movs	r0, #3
}
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80094a8:	f7ff faf8 	bl	8008a9c <HAL_GetTick>
 80094ac:	1b80      	subs	r0, r0, r6
 80094ae:	42a8      	cmp	r0, r5
 80094b0:	d9e2      	bls.n	8009478 <FLASH_WaitForLastOperation+0xc>
 80094b2:	e7f7      	b.n	80094a4 <FLASH_WaitForLastOperation+0x38>
 80094b4:	40022000 	.word	0x40022000

080094b8 <HAL_FLASH_Program>:
{
 80094b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80094bc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009550 <HAL_FLASH_Program+0x98>
{
 80094c0:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80094c2:	f899 3018 	ldrb.w	r3, [r9, #24]
 80094c6:	2b01      	cmp	r3, #1
{
 80094c8:	4604      	mov	r4, r0
 80094ca:	460f      	mov	r7, r1
 80094cc:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80094ce:	d03d      	beq.n	800954c <HAL_FLASH_Program+0x94>
 80094d0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80094d2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80094d6:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80094da:	f7ff ffc7 	bl	800946c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80094de:	bb80      	cbnz	r0, 8009542 <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80094e0:	2c01      	cmp	r4, #1
 80094e2:	d003      	beq.n	80094ec <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 80094e4:	2c02      	cmp	r4, #2
 80094e6:	bf0c      	ite	eq
 80094e8:	2402      	moveq	r4, #2
 80094ea:	2404      	movne	r4, #4
 80094ec:	2500      	movs	r5, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80094ee:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009554 <HAL_FLASH_Program+0x9c>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80094f2:	46ab      	mov	fp, r5
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80094f4:	0128      	lsls	r0, r5, #4
 80094f6:	f1c0 0220 	rsb	r2, r0, #32
 80094fa:	f1a0 0320 	sub.w	r3, r0, #32
 80094fe:	fa06 f202 	lsl.w	r2, r6, r2
 8009502:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009506:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800950a:	4310      	orrs	r0, r2
 800950c:	fa26 f303 	lsr.w	r3, r6, r3
 8009510:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009512:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8009516:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009518:	f043 0301 	orr.w	r3, r3, #1
 800951c:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 8009520:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009524:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009528:	f7ff ffa0 	bl	800946c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800952c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009530:	f023 0301 	bic.w	r3, r3, #1
 8009534:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8009538:	b918      	cbnz	r0, 8009542 <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 800953a:	3501      	adds	r5, #1
 800953c:	b2eb      	uxtb	r3, r5
 800953e:	429c      	cmp	r4, r3
 8009540:	d8d8      	bhi.n	80094f4 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8009542:	2300      	movs	r3, #0
 8009544:	f889 3018 	strb.w	r3, [r9, #24]
}
 8009548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800954c:	2002      	movs	r0, #2
 800954e:	e7fb      	b.n	8009548 <HAL_FLASH_Program+0x90>
 8009550:	20002780 	.word	0x20002780
 8009554:	40022000 	.word	0x40022000

08009558 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009558:	4b06      	ldr	r3, [pc, #24]	; (8009574 <FLASH_MassErase+0x1c>)
 800955a:	2200      	movs	r2, #0
 800955c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800955e:	4b06      	ldr	r3, [pc, #24]	; (8009578 <FLASH_MassErase+0x20>)
 8009560:	691a      	ldr	r2, [r3, #16]
 8009562:	f042 0204 	orr.w	r2, r2, #4
 8009566:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009568:	691a      	ldr	r2, [r3, #16]
 800956a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800956e:	611a      	str	r2, [r3, #16]
}
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	20002780 	.word	0x20002780
 8009578:	40022000 	.word	0x40022000

0800957c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800957c:	4b06      	ldr	r3, [pc, #24]	; (8009598 <FLASH_PageErase+0x1c>)
 800957e:	2200      	movs	r2, #0
 8009580:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <FLASH_PageErase+0x20>)
 8009584:	691a      	ldr	r2, [r3, #16]
 8009586:	f042 0202 	orr.w	r2, r2, #2
 800958a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800958c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800958e:	691a      	ldr	r2, [r3, #16]
 8009590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009594:	611a      	str	r2, [r3, #16]
}
 8009596:	4770      	bx	lr
 8009598:	20002780 	.word	0x20002780
 800959c:	40022000 	.word	0x40022000

080095a0 <HAL_FLASHEx_Erase>:
{
 80095a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80095a4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8009638 <HAL_FLASHEx_Erase+0x98>
 80095a8:	f898 3018 	ldrb.w	r3, [r8, #24]
 80095ac:	2b01      	cmp	r3, #1
{
 80095ae:	4605      	mov	r5, r0
 80095b0:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 80095b2:	d03d      	beq.n	8009630 <HAL_FLASHEx_Erase+0x90>
 80095b4:	2401      	movs	r4, #1
 80095b6:	f888 4018 	strb.w	r4, [r8, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80095ba:	6803      	ldr	r3, [r0, #0]
 80095bc:	42a3      	cmp	r3, r4
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80095be:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80095c2:	d114      	bne.n	80095ee <HAL_FLASHEx_Erase+0x4e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80095c4:	f7ff ff52 	bl	800946c <FLASH_WaitForLastOperation>
 80095c8:	b128      	cbz	r0, 80095d6 <HAL_FLASHEx_Erase+0x36>
  HAL_StatusTypeDef status = HAL_ERROR;
 80095ca:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80095cc:	2300      	movs	r3, #0
 80095ce:	f888 3018 	strb.w	r3, [r8, #24]
}
 80095d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80095d6:	f24c 3050 	movw	r0, #50000	; 0xc350
        FLASH_MassErase();
 80095da:	f7ff ffbd 	bl	8009558 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80095de:	f7ff ff45 	bl	800946c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80095e2:	4a14      	ldr	r2, [pc, #80]	; (8009634 <HAL_FLASHEx_Erase+0x94>)
 80095e4:	6913      	ldr	r3, [r2, #16]
 80095e6:	f023 0304 	bic.w	r3, r3, #4
 80095ea:	6113      	str	r3, [r2, #16]
 80095ec:	e7ee      	b.n	80095cc <HAL_FLASHEx_Erase+0x2c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80095ee:	f7ff ff3d 	bl	800946c <FLASH_WaitForLastOperation>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d1e9      	bne.n	80095ca <HAL_FLASHEx_Erase+0x2a>
        *PageError = 0xFFFFFFFFU;
 80095f6:	f04f 33ff 	mov.w	r3, #4294967295
 80095fa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80095fc:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80095fe:	686e      	ldr	r6, [r5, #4]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009600:	4c0c      	ldr	r4, [pc, #48]	; (8009634 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8009602:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 8009606:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 800960a:	42b3      	cmp	r3, r6
 800960c:	d9de      	bls.n	80095cc <HAL_FLASHEx_Erase+0x2c>
          FLASH_PageErase(address);
 800960e:	4630      	mov	r0, r6
 8009610:	f7ff ffb4 	bl	800957c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009614:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009618:	f7ff ff28 	bl	800946c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	f023 0302 	bic.w	r3, r3, #2
 8009622:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8009624:	b108      	cbz	r0, 800962a <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8009626:	603e      	str	r6, [r7, #0]
            break;
 8009628:	e7d0      	b.n	80095cc <HAL_FLASHEx_Erase+0x2c>
            address += FLASH_PAGE_SIZE)
 800962a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800962e:	e7e8      	b.n	8009602 <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 8009630:	2002      	movs	r0, #2
 8009632:	e7ce      	b.n	80095d2 <HAL_FLASHEx_Erase+0x32>
 8009634:	40022000 	.word	0x40022000
 8009638:	20002780 	.word	0x20002780

0800963c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800963c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009640:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80097c0 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009644:	4c5c      	ldr	r4, [pc, #368]	; (80097b8 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8009646:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009648:	680a      	ldr	r2, [r1, #0]
 800964a:	fa32 f503 	lsrs.w	r5, r2, r3
 800964e:	d102      	bne.n	8009656 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8009650:	b003      	add	sp, #12
 8009652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009656:	2501      	movs	r5, #1
 8009658:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 800965c:	ea1e 0202 	ands.w	r2, lr, r2
 8009660:	f000 80a0 	beq.w	80097a4 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009664:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009666:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009668:	f006 0503 	and.w	r5, r6, #3
 800966c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009670:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009674:	1e6f      	subs	r7, r5, #1
 8009676:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009678:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800967c:	d834      	bhi.n	80096e8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800967e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009680:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009684:	68cf      	ldr	r7, [r1, #12]
 8009686:	fa07 f708 	lsl.w	r7, r7, r8
 800968a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800968e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009690:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009692:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009696:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800969a:	409f      	lsls	r7, r3
 800969c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80096a0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80096a2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80096a4:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80096a8:	688f      	ldr	r7, [r1, #8]
 80096aa:	fa07 f708 	lsl.w	r7, r7, r8
 80096ae:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096b2:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 80096b4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096b6:	d119      	bne.n	80096ec <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 80096b8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80096bc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80096c0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80096c4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80096c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80096cc:	f04f 0e0f 	mov.w	lr, #15
 80096d0:	fa0e fe0b 	lsl.w	lr, lr, fp
 80096d4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80096d8:	690f      	ldr	r7, [r1, #16]
 80096da:	fa07 f70b 	lsl.w	r7, r7, fp
 80096de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80096e2:	f8ca 7020 	str.w	r7, [sl, #32]
 80096e6:	e001      	b.n	80096ec <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096e8:	2d03      	cmp	r5, #3
 80096ea:	d1da      	bne.n	80096a2 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 80096ec:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80096ee:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80096f2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80096f6:	432f      	orrs	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80096f8:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80096fc:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80096fe:	d051      	beq.n	80097a4 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009700:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8009704:	f045 0501 	orr.w	r5, r5, #1
 8009708:	f8c9 5018 	str.w	r5, [r9, #24]
 800970c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8009710:	f023 0703 	bic.w	r7, r3, #3
 8009714:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8009718:	f005 0501 	and.w	r5, r5, #1
 800971c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8009720:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009722:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009726:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8009728:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800972a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800972e:	f04f 0c0f 	mov.w	ip, #15
 8009732:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009736:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800973a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800973e:	d033      	beq.n	80097a8 <HAL_GPIO_Init+0x16c>
 8009740:	4d1e      	ldr	r5, [pc, #120]	; (80097bc <HAL_GPIO_Init+0x180>)
 8009742:	42a8      	cmp	r0, r5
 8009744:	d032      	beq.n	80097ac <HAL_GPIO_Init+0x170>
 8009746:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800974a:	42a8      	cmp	r0, r5
 800974c:	d030      	beq.n	80097b0 <HAL_GPIO_Init+0x174>
 800974e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009752:	42a8      	cmp	r0, r5
 8009754:	d02e      	beq.n	80097b4 <HAL_GPIO_Init+0x178>
 8009756:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800975a:	42a8      	cmp	r0, r5
 800975c:	bf0c      	ite	eq
 800975e:	2504      	moveq	r5, #4
 8009760:	2505      	movne	r5, #5
 8009762:	fa05 f50e 	lsl.w	r5, r5, lr
 8009766:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800976a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800976c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800976e:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009770:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8009774:	bf0c      	ite	eq
 8009776:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009778:	4315      	orrne	r5, r2
        EXTI->IMR = temp;
 800977a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR;
 800977c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800977e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8009782:	bf0c      	ite	eq
 8009784:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009786:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8009788:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR;
 800978a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800978c:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8009790:	bf0c      	ite	eq
 8009792:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009794:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8009796:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8009798:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800979a:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800979c:	bf54      	ite	pl
 800979e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80097a0:	4315      	orrmi	r5, r2
        EXTI->FTSR = temp;
 80097a2:	60e5      	str	r5, [r4, #12]
    position++;
 80097a4:	3301      	adds	r3, #1
 80097a6:	e74f      	b.n	8009648 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80097a8:	2500      	movs	r5, #0
 80097aa:	e7da      	b.n	8009762 <HAL_GPIO_Init+0x126>
 80097ac:	2501      	movs	r5, #1
 80097ae:	e7d8      	b.n	8009762 <HAL_GPIO_Init+0x126>
 80097b0:	2502      	movs	r5, #2
 80097b2:	e7d6      	b.n	8009762 <HAL_GPIO_Init+0x126>
 80097b4:	2503      	movs	r5, #3
 80097b6:	e7d4      	b.n	8009762 <HAL_GPIO_Init+0x126>
 80097b8:	40010400 	.word	0x40010400
 80097bc:	48000400 	.word	0x48000400
 80097c0:	40021000 	.word	0x40021000

080097c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80097c4:	6903      	ldr	r3, [r0, #16]
 80097c6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80097c8:	bf14      	ite	ne
 80097ca:	2001      	movne	r0, #1
 80097cc:	2000      	moveq	r0, #0
 80097ce:	4770      	bx	lr

080097d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80097d0:	b10a      	cbz	r2, 80097d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80097d2:	6181      	str	r1, [r0, #24]
 80097d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80097d6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80097d8:	4770      	bx	lr

080097da <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80097da:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80097dc:	ea01 0203 	and.w	r2, r1, r3
 80097e0:	ea21 0103 	bic.w	r1, r1, r3
 80097e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097e8:	6181      	str	r1, [r0, #24]
}
 80097ea:	4770      	bx	lr

080097ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80097ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80097ee:	4604      	mov	r4, r0
{
 80097f0:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d04f      	beq.n	8009896 <HAL_PCD_Init+0xaa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80097f6:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80097fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80097fe:	b91b      	cbnz	r3, 8009808 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009800:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009804:	f004 fe8c 	bl	800e520 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009808:	2303      	movs	r3, #3
 800980a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800980e:	6820      	ldr	r0, [r4, #0]
 8009810:	f003 fb8d 	bl	800cf2e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009814:	2300      	movs	r3, #0
 8009816:	6865      	ldr	r5, [r4, #4]
 8009818:	2628      	movs	r6, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800981a:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800981c:	4618      	mov	r0, r3
 800981e:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009820:	428d      	cmp	r5, r1
 8009822:	f103 0201 	add.w	r2, r3, #1
 8009826:	d81b      	bhi.n	8009860 <HAL_PCD_Init+0x74>
 8009828:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800982a:	2628      	movs	r6, #40	; 0x28
 800982c:	4619      	mov	r1, r3
 800982e:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009830:	4285      	cmp	r5, r0
 8009832:	f103 0301 	add.w	r3, r3, #1
 8009836:	d821      	bhi.n	800987c <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009838:	f104 0610 	add.w	r6, r4, #16
 800983c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800983e:	466d      	mov	r5, sp
 8009840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009842:	6833      	ldr	r3, [r6, #0]
 8009844:	602b      	str	r3, [r5, #0]
 8009846:	1d23      	adds	r3, r4, #4
 8009848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800984a:	6820      	ldr	r0, [r4, #0]
 800984c:	f003 fb79 	bl	800cf42 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009850:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8009852:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8009854:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8009858:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 800985c:	b007      	add	sp, #28
 800985e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8009860:	fb06 4301 	mla	r3, r6, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009864:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8009868:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800986c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009870:	86d9      	strh	r1, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009872:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8009876:	6418      	str	r0, [r3, #64]	; 0x40
 8009878:	4613      	mov	r3, r2
 800987a:	e7d0      	b.n	800981e <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 800987c:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009880:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8009884:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8009888:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800988c:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009890:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009894:	e7cb      	b.n	800982e <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8009896:	2001      	movs	r0, #1
 8009898:	e7e0      	b.n	800985c <HAL_PCD_Init+0x70>

0800989a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800989a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800989c:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80098a0:	2b01      	cmp	r3, #1
{
 80098a2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80098a4:	d010      	beq.n	80098c8 <HAL_PCD_Start+0x2e>
 80098a6:	2501      	movs	r5, #1
 80098a8:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80098ac:	6800      	ldr	r0, [r0, #0]
 80098ae:	f003 fb35 	bl	800cf1c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80098b2:	4629      	mov	r1, r5
 80098b4:	4620      	mov	r0, r4
 80098b6:	f004 ff5a 	bl	800e76e <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80098ba:	6820      	ldr	r0, [r4, #0]
 80098bc:	f003 fdec 	bl	800d498 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80098c0:	2000      	movs	r0, #0
 80098c2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80098c8:	2002      	movs	r0, #2
 80098ca:	e7fc      	b.n	80098c6 <HAL_PCD_Start+0x2c>

080098cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80098cc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80098ce:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 80098d2:	2a01      	cmp	r2, #1
{
 80098d4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80098d6:	d00b      	beq.n	80098f0 <HAL_PCD_SetAddress+0x24>
 80098d8:	2201      	movs	r2, #1
 80098da:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80098de:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80098e2:	6800      	ldr	r0, [r0, #0]
 80098e4:	f003 fdd2 	bl	800d48c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80098e8:	2000      	movs	r0, #0
 80098ea:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80098ee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80098f0:	2002      	movs	r0, #2
 80098f2:	e7fc      	b.n	80098ee <HAL_PCD_SetAddress+0x22>

080098f4 <HAL_PCD_IRQHandler>:
{
 80098f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	f003 fdce 	bl	800d49c <USB_ReadInterrupts>
 8009900:	0400      	lsls	r0, r0, #16
 8009902:	d508      	bpl.n	8009916 <HAL_PCD_IRQHandler+0x22>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009904:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8009bc8 <HAL_PCD_IRQHandler+0x2d4>
 8009908:	4fae      	ldr	r7, [pc, #696]	; (8009bc4 <HAL_PCD_IRQHandler+0x2d0>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800990a:	6820      	ldr	r0, [r4, #0]
 800990c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009910:	041b      	lsls	r3, r3, #16
 8009912:	f100 8093 	bmi.w	8009a3c <HAL_PCD_IRQHandler+0x148>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8009916:	6820      	ldr	r0, [r4, #0]
 8009918:	f003 fdc0 	bl	800d49c <USB_ReadInterrupts>
 800991c:	0541      	lsls	r1, r0, #21
 800991e:	d50f      	bpl.n	8009940 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009920:	6822      	ldr	r2, [r4, #0]
 8009922:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 800992e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009930:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8009934:	f004 fe4b 	bl	800e5ce <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009938:	2100      	movs	r1, #0
 800993a:	4620      	mov	r0, r4
 800993c:	f7ff ffc6 	bl	80098cc <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8009940:	6820      	ldr	r0, [r4, #0]
 8009942:	f003 fdab 	bl	800d49c <USB_ReadInterrupts>
 8009946:	0446      	lsls	r6, r0, #17
 8009948:	d508      	bpl.n	800995c <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800994a:	6822      	ldr	r2, [r4, #0]
 800994c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009954:	041b      	lsls	r3, r3, #16
 8009956:	0c1b      	lsrs	r3, r3, #16
 8009958:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800995c:	6820      	ldr	r0, [r4, #0]
 800995e:	f003 fd9d 	bl	800d49c <USB_ReadInterrupts>
 8009962:	0485      	lsls	r5, r0, #18
 8009964:	d508      	bpl.n	8009978 <HAL_PCD_IRQHandler+0x84>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009966:	6822      	ldr	r2, [r4, #0]
 8009968:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800996c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009970:	041b      	lsls	r3, r3, #16
 8009972:	0c1b      	lsrs	r3, r3, #16
 8009974:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8009978:	6820      	ldr	r0, [r4, #0]
 800997a:	f003 fd8f 	bl	800d49c <USB_ReadInterrupts>
 800997e:	04c0      	lsls	r0, r0, #19
 8009980:	d51c      	bpl.n	80099bc <HAL_PCD_IRQHandler+0xc8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009988:	f023 0304 	bic.w	r3, r3, #4
 800998c:	041b      	lsls	r3, r3, #16
 800998e:	0c1b      	lsrs	r3, r3, #16
 8009990:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009994:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009998:	f023 0308 	bic.w	r3, r3, #8
 800999c:	041b      	lsls	r3, r3, #16
 800999e:	0c1b      	lsrs	r3, r3, #16
 80099a0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80099a4:	4620      	mov	r0, r4
 80099a6:	f004 fe35 	bl	800e614 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80099aa:	6822      	ldr	r2, [r4, #0]
 80099ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80099b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099b4:	041b      	lsls	r3, r3, #16
 80099b6:	0c1b      	lsrs	r3, r3, #16
 80099b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80099bc:	6820      	ldr	r0, [r4, #0]
 80099be:	f003 fd6d 	bl	800d49c <USB_ReadInterrupts>
 80099c2:	0501      	lsls	r1, r0, #20
 80099c4:	d519      	bpl.n	80099fa <HAL_PCD_IRQHandler+0x106>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80099c6:	6822      	ldr	r2, [r4, #0]
 80099c8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f043 0308 	orr.w	r3, r3, #8
 80099d2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80099d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80099da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80099e6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	f043 0304 	orr.w	r3, r3, #4
 80099f0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80099f4:	4620      	mov	r0, r4
 80099f6:	f004 fdfd 	bl	800e5f4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80099fa:	6820      	ldr	r0, [r4, #0]
 80099fc:	f003 fd4e 	bl	800d49c <USB_ReadInterrupts>
 8009a00:	0582      	lsls	r2, r0, #22
 8009a02:	d50b      	bpl.n	8009a1c <HAL_PCD_IRQHandler+0x128>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a0e:	041b      	lsls	r3, r3, #16
 8009a10:	0c1b      	lsrs	r3, r3, #16
 8009a12:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009a16:	4620      	mov	r0, r4
 8009a18:	f004 fdd5 	bl	800e5c6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	f003 fd3d 	bl	800d49c <USB_ReadInterrupts>
 8009a22:	05c3      	lsls	r3, r0, #23
 8009a24:	d508      	bpl.n	8009a38 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a30:	041b      	lsls	r3, r3, #16
 8009a32:	0c1b      	lsrs	r3, r3, #16
 8009a34:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8009a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8009a3c:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8009a40:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8009a42:	f015 050f 	ands.w	r5, r5, #15
 8009a46:	f040 80c1 	bne.w	8009bcc <HAL_PCD_IRQHandler+0x2d8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009a4a:	f011 0110 	ands.w	r1, r1, #16
 8009a4e:	d12d      	bne.n	8009aac <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009a50:	8803      	ldrh	r3, [r0, #0]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	ea03 0308 	and.w	r3, r3, r8
 8009a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a5c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009a5e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009a62:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a6c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8009a70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009a72:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8009a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a7a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8009a7c:	4413      	add	r3, r2
 8009a7e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009a80:	4620      	mov	r0, r4
 8009a82:	f004 fd98 	bl	800e5b6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009a86:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f43f af3d 	beq.w	800990a <HAL_PCD_IRQHandler+0x16>
 8009a90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009a92:	2a00      	cmp	r2, #0
 8009a94:	f47f af39 	bne.w	800990a <HAL_PCD_IRQHandler+0x16>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009a98:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009a9c:	6821      	ldr	r1, [r4, #0]
 8009a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009aa6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8009aaa:	e72e      	b.n	800990a <HAL_PCD_IRQHandler+0x16>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009aac:	8805      	ldrh	r5, [r0, #0]
 8009aae:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009ab0:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8009ab4:	d021      	beq.n	8009afa <HAL_PCD_IRQHandler+0x206>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009ab6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009aba:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ac4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009ac8:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009acc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8009ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009ad4:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009ad8:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8009adc:	f003 ff0a 	bl	800d8f4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009ae0:	6822      	ldr	r2, [r4, #0]
 8009ae2:	8813      	ldrh	r3, [r2, #0]
 8009ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae8:	051b      	lsls	r3, r3, #20
 8009aea:	0d1b      	lsrs	r3, r3, #20
 8009aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009af2:	4620      	mov	r0, r4
 8009af4:	f004 fd50 	bl	800e598 <HAL_PCD_SetupStageCallback>
 8009af8:	e707      	b.n	800990a <HAL_PCD_IRQHandler+0x16>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009afa:	041a      	lsls	r2, r3, #16
 8009afc:	f57f af05 	bpl.w	800990a <HAL_PCD_IRQHandler+0x16>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b00:	8803      	ldrh	r3, [r0, #0]
 8009b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b06:	051b      	lsls	r3, r3, #20
 8009b08:	0d1b      	lsrs	r3, r3, #20
 8009b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b0e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009b10:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009b14:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009b22:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8009b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b2a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009b2e:	b18b      	cbz	r3, 8009b54 <HAL_PCD_IRQHandler+0x260>
 8009b30:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8009b34:	b171      	cbz	r1, 8009b54 <HAL_PCD_IRQHandler+0x260>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009b36:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009b3a:	f003 fedb 	bl	800d8f4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8009b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b42:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8009b46:	4413      	add	r3, r2
 8009b48:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f004 fd28 	bl	800e5a4 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8009b54:	6821      	ldr	r1, [r4, #0]
 8009b56:	880b      	ldrh	r3, [r1, #0]
 8009b58:	051b      	lsls	r3, r3, #20
 8009b5a:	f53f aed6 	bmi.w	800990a <HAL_PCD_IRQHandler+0x16>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009b5e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8009b62:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8009b6c:	b9cd      	cbnz	r5, 8009ba2 <HAL_PCD_IRQHandler+0x2ae>
 8009b6e:	5ac2      	ldrh	r2, [r0, r3]
 8009b70:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009b74:	0412      	lsls	r2, r2, #16
 8009b76:	0c12      	lsrs	r2, r2, #16
 8009b78:	52c2      	strh	r2, [r0, r3]
 8009b7a:	5ac2      	ldrh	r2, [r0, r3]
 8009b7c:	b292      	uxth	r2, r2
 8009b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b82:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009b84:	880b      	ldrh	r3, [r1, #0]
 8009b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8e:	041b      	lsls	r3, r3, #16
 8009b90:	0c1b      	lsrs	r3, r3, #16
 8009b92:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9e:	800b      	strh	r3, [r1, #0]
 8009ba0:	e6b3      	b.n	800990a <HAL_PCD_IRQHandler+0x16>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009ba2:	2d3e      	cmp	r5, #62	; 0x3e
 8009ba4:	d806      	bhi.n	8009bb4 <HAL_PCD_IRQHandler+0x2c0>
 8009ba6:	086a      	lsrs	r2, r5, #1
 8009ba8:	07ee      	lsls	r6, r5, #31
 8009baa:	bf48      	it	mi
 8009bac:	3201      	addmi	r2, #1
 8009bae:	0292      	lsls	r2, r2, #10
 8009bb0:	b292      	uxth	r2, r2
 8009bb2:	e7e6      	b.n	8009b82 <HAL_PCD_IRQHandler+0x28e>
 8009bb4:	096a      	lsrs	r2, r5, #5
 8009bb6:	06ed      	lsls	r5, r5, #27
 8009bb8:	bf08      	it	eq
 8009bba:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8009bbe:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 8009bc2:	e7f5      	b.n	8009bb0 <HAL_PCD_IRQHandler+0x2bc>
 8009bc4:	ffff8000 	.word	0xffff8000
 8009bc8:	ffff8f0f 	.word	0xffff8f0f
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009bcc:	fa0f f985 	sxth.w	r9, r5
 8009bd0:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009bd4:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009bd6:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009bd8:	f140 80f5 	bpl.w	8009dc6 <HAL_PCD_IRQHandler+0x4d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009bdc:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8009be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be4:	051b      	lsls	r3, r3, #20
 8009be6:	0d1b      	lsrs	r3, r3, #20
 8009be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8009bec:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009bee:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 8009bf2:	fb01 4105 	mla	r1, r1, r5, r4
 8009bf6:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8009bfa:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8009bfe:	b9bb      	cbnz	r3, 8009c30 <HAL_PCD_IRQHandler+0x33c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009c00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009c04:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	3306      	adds	r3, #6
 8009c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c10:	f83c a013 	ldrh.w	sl, [ip, r3, lsl #1]
 8009c14:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8009c18:	f1ba 0f00 	cmp.w	sl, #0
 8009c1c:	f000 80b7 	beq.w	8009d8e <HAL_PCD_IRQHandler+0x49a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009c20:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8009c24:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009c26:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009c2a:	f003 fe63 	bl	800d8f4 <USB_ReadPMA>
 8009c2e:	e0ae      	b.n	8009d8e <HAL_PCD_IRQHandler+0x49a>
          if (ep->type == EP_TYPE_BULK)
 8009c30:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8009c3a:	f040 8084 	bne.w	8009d46 <HAL_PCD_IRQHandler+0x452>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009c3e:	f416 4b80 	ands.w	fp, r6, #16384	; 0x4000
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);

    if (ep->xfer_len >= count)
 8009c42:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009c46:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009c4a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009c4e:	d03d      	beq.n	8009ccc <HAL_PCD_IRQHandler+0x3d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009c50:	fa1a fa8e 	uxtah	sl, sl, lr
 8009c54:	f10a 0a02 	add.w	sl, sl, #2
 8009c58:	f83c a01a 	ldrh.w	sl, [ip, sl, lsl #1]
 8009c5c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8009c60:	4592      	cmp	sl, r2
 8009c62:	d913      	bls.n	8009c8c <HAL_PCD_IRQHandler+0x398>
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009c6a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c76:	0412      	lsls	r2, r2, #16
 8009c78:	0c12      	lsrs	r2, r2, #16
 8009c7a:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8009c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c86:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8009c8a:	e005      	b.n	8009c98 <HAL_PCD_IRQHandler+0x3a4>
      ep->xfer_len -= count;
 8009c8c:	eba2 020a 	sub.w	r2, r2, sl
 8009c90:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009c94:	2a00      	cmp	r2, #0
 8009c96:	d0e8      	beq.n	8009c6a <HAL_PCD_IRQHandler+0x376>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009c98:	0672      	lsls	r2, r6, #25
 8009c9a:	d50d      	bpl.n	8009cb8 <HAL_PCD_IRQHandler+0x3c4>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009c9c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ca0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009ca4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ca8:	0412      	lsls	r2, r2, #16
 8009caa:	0c12      	lsrs	r2, r2, #16
 8009cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cb0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009cb4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8009cb8:	f1ba 0f00 	cmp.w	sl, #0
 8009cbc:	d067      	beq.n	8009d8e <HAL_PCD_IRQHandler+0x49a>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009cbe:	2128      	movs	r1, #40	; 0x28
 8009cc0:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009cc4:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009cc8:	4653      	mov	r3, sl
 8009cca:	e7ac      	b.n	8009c26 <HAL_PCD_IRQHandler+0x332>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009ccc:	fa1a fe8e 	uxtah	lr, sl, lr
 8009cd0:	f10e 0e06 	add.w	lr, lr, #6
 8009cd4:	f83c a01e 	ldrh.w	sl, [ip, lr, lsl #1]
 8009cd8:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8009cdc:	4592      	cmp	sl, r2
 8009cde:	d912      	bls.n	8009d06 <HAL_PCD_IRQHandler+0x412>
 8009ce0:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009ce4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ce8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009cec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009cf0:	0412      	lsls	r2, r2, #16
 8009cf2:	0c12      	lsrs	r2, r2, #16
 8009cf4:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8009cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d00:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8009d04:	e005      	b.n	8009d12 <HAL_PCD_IRQHandler+0x41e>
      ep->xfer_len -= count;
 8009d06:	eba2 020a 	sub.w	r2, r2, sl
 8009d0a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009d0e:	2a00      	cmp	r2, #0
 8009d10:	d0e8      	beq.n	8009ce4 <HAL_PCD_IRQHandler+0x3f0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009d12:	0671      	lsls	r1, r6, #25
 8009d14:	d40d      	bmi.n	8009d32 <HAL_PCD_IRQHandler+0x43e>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009d16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d1a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009d1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d22:	0412      	lsls	r2, r2, #16
 8009d24:	0c12      	lsrs	r2, r2, #16
 8009d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d2a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009d2e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8009d32:	f1ba 0f00 	cmp.w	sl, #0
 8009d36:	d02a      	beq.n	8009d8e <HAL_PCD_IRQHandler+0x49a>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009d38:	2128      	movs	r1, #40	; 0x28
 8009d3a:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009d3e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009d42:	4653      	mov	r3, sl
 8009d44:	e76f      	b.n	8009c26 <HAL_PCD_IRQHandler+0x332>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009d46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009d4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d52:	0412      	lsls	r2, r2, #16
 8009d54:	0c12      	lsrs	r2, r2, #16
 8009d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d5a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009d5e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009d62:	f891 e168 	ldrb.w	lr, [r1, #360]	; 0x168
 8009d66:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 8009d6a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009d72:	f04f 0208 	mov.w	r2, #8
 8009d76:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009d78:	d05d      	beq.n	8009e36 <HAL_PCD_IRQHandler+0x542>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d7a:	3302      	adds	r3, #2
 8009d7c:	fb12 330e 	smlabb	r3, r2, lr, r3
 8009d80:	f83c a013 	ldrh.w	sl, [ip, r3, lsl #1]
 8009d84:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8009d88:	f1ba 0f00 	cmp.w	sl, #0
 8009d8c:	d19a      	bne.n	8009cc4 <HAL_PCD_IRQHandler+0x3d0>
        ep->xfer_count += count;
 8009d8e:	2128      	movs	r1, #40	; 0x28
 8009d90:	fb01 4305 	mla	r3, r1, r5, r4
 8009d94:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8009d98:	4452      	add	r2, sl
 8009d9a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8009d9e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009da2:	4452      	add	r2, sl
 8009da4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009da8:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8009dac:	b11a      	cbz	r2, 8009db6 <HAL_PCD_IRQHandler+0x4c2>
 8009dae:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8009db2:	459a      	cmp	sl, r3
 8009db4:	d24a      	bcs.n	8009e4c <HAL_PCD_IRQHandler+0x558>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009db6:	2328      	movs	r3, #40	; 0x28
 8009db8:	fb03 4305 	mla	r3, r3, r5, r4
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8009dc2:	f004 fbef 	bl	800e5a4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009dc6:	0632      	lsls	r2, r6, #24
 8009dc8:	f57f ad9f 	bpl.w	800990a <HAL_PCD_IRQHandler+0x16>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009dcc:	6820      	ldr	r0, [r4, #0]
 8009dce:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	ea03 0308 	and.w	r3, r3, r8
 8009dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ddc:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8009de0:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8009de4:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 8009de8:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8009dec:	f899 302b 	ldrb.w	r3, [r9, #43]	; 0x2b
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d056      	beq.n	8009ea2 <HAL_PCD_IRQHandler+0x5ae>
          ep->xfer_len = 0U;
 8009df4:	fb0c 4c05 	mla	ip, ip, r5, r4
 8009df8:	2500      	movs	r5, #0
 8009dfa:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009dfe:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8009e02:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8009e06:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8009e0a:	d038      	beq.n	8009e7e <HAL_PCD_IRQHandler+0x58a>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e0c:	bb33      	cbnz	r3, 8009e5c <HAL_PCD_IRQHandler+0x568>
 8009e0e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009e12:	f200 4004 	addw	r0, r0, #1028	; 0x404
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e16:	fa10 f083 	uxtah	r0, r0, r3
 8009e1a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8009e1e:	8803      	ldrh	r3, [r0, #0]
 8009e20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e24:	041b      	lsls	r3, r3, #16
 8009e26:	0c1b      	lsrs	r3, r3, #16
 8009e28:	8003      	strh	r3, [r0, #0]
 8009e2a:	8803      	ldrh	r3, [r0, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e32:	8003      	strh	r3, [r0, #0]
 8009e34:	e01d      	b.n	8009e72 <HAL_PCD_IRQHandler+0x57e>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009e36:	3306      	adds	r3, #6
 8009e38:	fb12 330e 	smlabb	r3, r2, lr, r3
 8009e3c:	f83c a013 	ldrh.w	sl, [ip, r3, lsl #1]
 8009e40:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8009e44:	f1ba 0f00 	cmp.w	sl, #0
 8009e48:	d0a1      	beq.n	8009d8e <HAL_PCD_IRQHandler+0x49a>
 8009e4a:	e778      	b.n	8009d3e <HAL_PCD_IRQHandler+0x44a>
        ep = &hpcd->OUT_ep[epindex];
 8009e4c:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009e50:	6820      	ldr	r0, [r4, #0]
 8009e52:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8009e56:	f003 fb35 	bl	800d4c4 <USB_EPStartXfer>
 8009e5a:	e7b4      	b.n	8009dc6 <HAL_PCD_IRQHandler+0x4d2>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d108      	bne.n	8009e72 <HAL_PCD_IRQHandler+0x57e>
 8009e60:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009e64:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8009e68:	fa10 f082 	uxtah	r0, r0, r2
 8009e6c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8009e70:	8005      	strh	r5, [r0, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009e72:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009e76:	4620      	mov	r0, r4
 8009e78:	f004 fb9d 	bl	800e5b6 <HAL_PCD_DataInStageCallback>
 8009e7c:	e545      	b.n	800990a <HAL_PCD_IRQHandler+0x16>
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e7e:	b923      	cbnz	r3, 8009e8a <HAL_PCD_IRQHandler+0x596>
 8009e80:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009e84:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8009e88:	e7c5      	b.n	8009e16 <HAL_PCD_IRQHandler+0x522>
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d1f1      	bne.n	8009e72 <HAL_PCD_IRQHandler+0x57e>
 8009e8e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009e92:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8009e96:	fa10 f383 	uxtah	r3, r0, r3
 8009e9a:	eb03 1001 	add.w	r0, r3, r1, lsl #4
 8009e9e:	8006      	strh	r6, [r0, #0]
 8009ea0:	e7e7      	b.n	8009e72 <HAL_PCD_IRQHandler+0x57e>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009ea2:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
          if (ep->xfer_len > TxByteNbre)
 8009ea6:	fb0c 4c05 	mla	ip, ip, r5, r4
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8009eaa:	f416 7b80 	ands.w	fp, r6, #256	; 0x100
          if (ep->xfer_len > TxByteNbre)
 8009eae:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009eb2:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8009eb6:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8009eba:	d123      	bne.n	8009f04 <HAL_PCD_IRQHandler+0x610>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009ebc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009ec0:	fa1a fa83 	uxtah	sl, sl, r3
 8009ec4:	f10a 0a02 	add.w	sl, sl, #2
 8009ec8:	f83e 301a 	ldrh.w	r3, [lr, sl, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 8009ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d302      	bcc.n	8009eda <HAL_PCD_IRQHandler+0x5e6>
 8009ed4:	f8cc b040 	str.w	fp, [ip, #64]	; 0x40
 8009ed8:	e7cd      	b.n	8009e76 <HAL_PCD_IRQHandler+0x582>
            ep->xfer_len -= TxByteNbre;
 8009eda:	1ad2      	subs	r2, r2, r3
 8009edc:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
            ep->xfer_buff += TxByteNbre;
 8009ee0:	f8dc 203c 	ldr.w	r2, [ip, #60]	; 0x3c
 8009ee4:	441a      	add	r2, r3
 8009ee6:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8009eea:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8009eee:	3501      	adds	r5, #1
            ep->xfer_count += TxByteNbre;
 8009ef0:	4413      	add	r3, r2
        ep = &hpcd->IN_ep[epindex];
 8009ef2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8009ef6:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009efa:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009efe:	f003 fae1 	bl	800d4c4 <USB_EPStartXfer>
 8009f02:	e502      	b.n	800990a <HAL_PCD_IRQHandler+0x16>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009f04:	f016 0c40 	ands.w	ip, r6, #64	; 0x40
 8009f08:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8009f0c:	f000 80df 	beq.w	800a0ce <HAL_PCD_IRQHandler+0x7da>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009f10:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8009f14:	fa1a fa8c 	uxtah	sl, sl, ip
 8009f18:	f10a 0a02 	add.w	sl, sl, #2
 8009f1c:	b2b6      	uxth	r6, r6
 8009f1e:	f83e c01a 	ldrh.w	ip, [lr, sl, lsl #1]
 8009f22:	f04f 0e28 	mov.w	lr, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 8009f26:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009f2a:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxByteNbre;
 8009f2c:	fb0e 4e05 	mla	lr, lr, r5, r4
 8009f30:	bf34      	ite	cc
 8009f32:	eba2 020c 	subcc.w	r2, r2, ip
    }
    else
    {
      ep->xfer_len = 0U;
 8009f36:	2200      	movcs	r2, #0
 8009f38:	f8ce 2040 	str.w	r2, [lr, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009f3c:	2a00      	cmp	r2, #0
 8009f3e:	d150      	bne.n	8009fe2 <HAL_PCD_IRQHandler+0x6ee>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f40:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	d13a      	bne.n	8009fbe <HAL_PCD_IRQHandler+0x6ca>
 8009f48:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009f4c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8009f50:	010b      	lsls	r3, r1, #4
 8009f52:	fa12 f585 	uxtah	r5, r2, r5
 8009f56:	5aea      	ldrh	r2, [r5, r3]
 8009f58:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009f5c:	0412      	lsls	r2, r2, #16
 8009f5e:	0c12      	lsrs	r2, r2, #16
 8009f60:	52ea      	strh	r2, [r5, r3]
 8009f62:	5aea      	ldrh	r2, [r5, r3]
 8009f64:	b292      	uxth	r2, r2
 8009f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f6a:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f6c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f70:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8009f74:	fa10 f082 	uxtah	r0, r0, r2
 8009f78:	5ac2      	ldrh	r2, [r0, r3]
 8009f7a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009f7e:	0412      	lsls	r2, r2, #16
 8009f80:	0c12      	lsrs	r2, r2, #16
 8009f82:	52c2      	strh	r2, [r0, r3]
 8009f84:	5ac2      	ldrh	r2, [r0, r3]
 8009f86:	b292      	uxth	r2, r2
 8009f88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f8c:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f004 fb11 	bl	800e5b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009f94:	2e00      	cmp	r6, #0
 8009f96:	f000 80e0 	beq.w	800a15a <HAL_PCD_IRQHandler+0x866>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009f9a:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8009f9e:	6822      	ldr	r2, [r4, #0]
 8009fa0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fac:	041b      	lsls	r3, r3, #16
 8009fae:	0c1b      	lsrs	r3, r3, #16
 8009fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8009fbc:	e0cd      	b.n	800a15a <HAL_PCD_IRQHandler+0x866>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009fbe:	2d01      	cmp	r5, #1
 8009fc0:	d1e5      	bne.n	8009f8e <HAL_PCD_IRQHandler+0x69a>
 8009fc2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009fc6:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 8009fca:	010b      	lsls	r3, r1, #4
 8009fcc:	fa1c f585 	uxtah	r5, ip, r5
 8009fd0:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009fd2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009fd6:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8009fda:	fa10 f585 	uxtah	r5, r0, r5
 8009fde:	52ea      	strh	r2, [r5, r3]
 8009fe0:	e7d5      	b.n	8009f8e <HAL_PCD_IRQHandler+0x69a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009fe2:	b16e      	cbz	r6, 800a000 <HAL_PCD_IRQHandler+0x70c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009fe4:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8009fe8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009fec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ff0:	0412      	lsls	r2, r2, #16
 8009ff2:	0c12      	lsrs	r2, r2, #16
 8009ff4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009ff8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ffc:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800a000:	2228      	movs	r2, #40	; 0x28
 800a002:	fb02 4205 	mla	r2, r2, r5, r4
 800a006:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	f040 80a5 	bne.w	800a15a <HAL_PCD_IRQHandler+0x866>
        ep->xfer_buff += TxByteNbre;
 800a010:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800a012:	f8d2 e048 	ldr.w	lr, [r2, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 800a016:	eb03 060c 	add.w	r6, r3, ip
        ep->xfer_count += TxByteNbre;
 800a01a:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800a01c:	63d6      	str	r6, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800a01e:	4463      	add	r3, ip
 800a020:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800a022:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a024:	459e      	cmp	lr, r3
 800a026:	d326      	bcc.n	800a076 <HAL_PCD_IRQHandler+0x782>
          ep->xfer_len_db -= len;
 800a028:	ebae 0e03 	sub.w	lr, lr, r3
 800a02c:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a030:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 800a034:	fa1f fc83 	uxth.w	ip, r3
 800a038:	2a00      	cmp	r2, #0
 800a03a:	d13b      	bne.n	800a0b4 <HAL_PCD_IRQHandler+0x7c0>
 800a03c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a040:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 800a044:	fa1e f282 	uxtah	r2, lr, r2
 800a048:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800a04c:	bb03      	cbnz	r3, 800a090 <HAL_PCD_IRQHandler+0x79c>
 800a04e:	880b      	ldrh	r3, [r1, #0]
 800a050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a054:	041b      	lsls	r3, r3, #16
 800a056:	0c1b      	lsrs	r3, r3, #16
 800a058:	800b      	strh	r3, [r1, #0]
 800a05a:	880b      	ldrh	r3, [r1, #0]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a062:	800b      	strh	r3, [r1, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a064:	2128      	movs	r1, #40	; 0x28
 800a066:	fb01 4505 	mla	r5, r1, r5, r4
 800a06a:	4663      	mov	r3, ip
 800a06c:	8e2a      	ldrh	r2, [r5, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a06e:	4631      	mov	r1, r6
 800a070:	f003 fa18 	bl	800d4a4 <USB_WritePMA>
 800a074:	e071      	b.n	800a15a <HAL_PCD_IRQHandler+0x866>
        else if (ep->xfer_len_db == 0U)
 800a076:	f1be 0f00 	cmp.w	lr, #0
 800a07a:	d103      	bne.n	800a084 <HAL_PCD_IRQHandler+0x790>
          ep->xfer_fill_db = 0U;
 800a07c:	f882 e04c 	strb.w	lr, [r2, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 800a080:	4663      	mov	r3, ip
 800a082:	e7d5      	b.n	800a030 <HAL_PCD_IRQHandler+0x73c>
          ep->xfer_fill_db = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800a08a:	6493      	str	r3, [r2, #72]	; 0x48
 800a08c:	4673      	mov	r3, lr
 800a08e:	e7cf      	b.n	800a030 <HAL_PCD_IRQHandler+0x73c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a090:	2b3e      	cmp	r3, #62	; 0x3e
 800a092:	d807      	bhi.n	800a0a4 <HAL_PCD_IRQHandler+0x7b0>
 800a094:	085a      	lsrs	r2, r3, #1
 800a096:	07db      	lsls	r3, r3, #31
 800a098:	bf48      	it	mi
 800a09a:	3201      	addmi	r2, #1
 800a09c:	0292      	lsls	r2, r2, #10
 800a09e:	b292      	uxth	r2, r2
 800a0a0:	800a      	strh	r2, [r1, #0]
 800a0a2:	e7df      	b.n	800a064 <HAL_PCD_IRQHandler+0x770>
 800a0a4:	095a      	lsrs	r2, r3, #5
 800a0a6:	06db      	lsls	r3, r3, #27
 800a0a8:	bf08      	it	eq
 800a0aa:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a0ae:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 800a0b2:	e7f4      	b.n	800a09e <HAL_PCD_IRQHandler+0x7aa>
 800a0b4:	2a01      	cmp	r2, #1
 800a0b6:	d1d5      	bne.n	800a064 <HAL_PCD_IRQHandler+0x770>
 800a0b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a0bc:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800a0c0:	fa12 f383 	uxtah	r3, r2, r3
 800a0c4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a0c8:	f8a1 c000 	strh.w	ip, [r1]
 800a0cc:	e7ca      	b.n	800a064 <HAL_PCD_IRQHandler+0x770>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a0ce:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 800a0d2:	fa1a fb8b 	uxtah	fp, sl, fp
 800a0d6:	f10b 0b06 	add.w	fp, fp, #6
 800a0da:	b2b6      	uxth	r6, r6
 800a0dc:	f83e e01b 	ldrh.w	lr, [lr, fp, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 800a0e0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a0e4:	4596      	cmp	lr, r2
      ep->xfer_len = 0U;
 800a0e6:	bf88      	it	hi
 800a0e8:	4662      	movhi	r2, ip
 800a0ea:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800a0ee:	fb0c 4c05 	mla	ip, ip, r5, r4
      ep->xfer_len -= TxByteNbre;
 800a0f2:	bf98      	it	ls
 800a0f4:	eba2 020e 	subls.w	r2, r2, lr
 800a0f8:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	d152      	bne.n	800a1a6 <HAL_PCD_IRQHandler+0x8b2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a100:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 800a104:	2d00      	cmp	r5, #0
 800a106:	d13c      	bne.n	800a182 <HAL_PCD_IRQHandler+0x88e>
 800a108:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800a10c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800a110:	010b      	lsls	r3, r1, #4
 800a112:	fa12 f585 	uxtah	r5, r2, r5
 800a116:	5aea      	ldrh	r2, [r5, r3]
 800a118:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a11c:	0412      	lsls	r2, r2, #16
 800a11e:	0c12      	lsrs	r2, r2, #16
 800a120:	52ea      	strh	r2, [r5, r3]
 800a122:	5aea      	ldrh	r2, [r5, r3]
 800a124:	b292      	uxth	r2, r2
 800a126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a12a:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a12c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a130:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800a134:	fa10 f082 	uxtah	r0, r0, r2
 800a138:	5ac2      	ldrh	r2, [r0, r3]
 800a13a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a13e:	0412      	lsls	r2, r2, #16
 800a140:	0c12      	lsrs	r2, r2, #16
 800a142:	52c2      	strh	r2, [r0, r3]
 800a144:	5ac2      	ldrh	r2, [r0, r3]
 800a146:	b292      	uxth	r2, r2
 800a148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a14c:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a14e:	4620      	mov	r0, r4
 800a150:	f004 fa31 	bl	800e5b6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a154:	2e00      	cmp	r6, #0
 800a156:	f43f af20 	beq.w	8009f9a <HAL_PCD_IRQHandler+0x6a6>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a15a:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 800a15e:	6822      	ldr	r2, [r4, #0]
 800a160:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a164:	b29b      	uxth	r3, r3
 800a166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a16a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a16e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800a17e:	f7ff bbc4 	b.w	800990a <HAL_PCD_IRQHandler+0x16>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a182:	2d01      	cmp	r5, #1
 800a184:	d1e3      	bne.n	800a14e <HAL_PCD_IRQHandler+0x85a>
 800a186:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800a18a:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800a18e:	010b      	lsls	r3, r1, #4
 800a190:	fa1c f585 	uxtah	r5, ip, r5
 800a194:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a196:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800a19a:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800a19e:	fa10 f585 	uxtah	r5, r0, r5
 800a1a2:	52ea      	strh	r2, [r5, r3]
 800a1a4:	e7d3      	b.n	800a14e <HAL_PCD_IRQHandler+0x85a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a1a6:	b96e      	cbnz	r6, 800a1c4 <HAL_PCD_IRQHandler+0x8d0>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a1a8:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800a1ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a1b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a1b4:	0412      	lsls	r2, r2, #16
 800a1b6:	0c12      	lsrs	r2, r2, #16
 800a1b8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a1bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1c0:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800a1c4:	2228      	movs	r2, #40	; 0x28
 800a1c6:	fb02 4205 	mla	r2, r2, r5, r4
 800a1ca:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d1c3      	bne.n	800a15a <HAL_PCD_IRQHandler+0x866>
        ep->xfer_count += TxByteNbre;
 800a1d2:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800a1d4:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800a1d6:	f8d2 c048 	ldr.w	ip, [r2, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 800a1da:	4473      	add	r3, lr
 800a1dc:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800a1de:	6b93      	ldr	r3, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800a1e0:	4476      	add	r6, lr
        if (ep->xfer_len_db >= ep->maxpacket)
 800a1e2:	459c      	cmp	ip, r3
        ep->xfer_buff += TxByteNbre;
 800a1e4:	63d6      	str	r6, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800a1e6:	d323      	bcc.n	800a230 <HAL_PCD_IRQHandler+0x93c>
          ep->xfer_len_db -= len;
 800a1e8:	ebac 0c03 	sub.w	ip, ip, r3
 800a1ec:	f8c2 c048 	str.w	ip, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a1f0:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 800a1f4:	fa1f fc83 	uxth.w	ip, r3
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	d138      	bne.n	800a26e <HAL_PCD_IRQHandler+0x97a>
 800a1fc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a200:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 800a204:	fa1e f282 	uxtah	r2, lr, r2
 800a208:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800a20c:	b9eb      	cbnz	r3, 800a24a <HAL_PCD_IRQHandler+0x956>
 800a20e:	880b      	ldrh	r3, [r1, #0]
 800a210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a214:	041b      	lsls	r3, r3, #16
 800a216:	0c1b      	lsrs	r3, r3, #16
 800a218:	800b      	strh	r3, [r1, #0]
 800a21a:	880b      	ldrh	r3, [r1, #0]
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a222:	800b      	strh	r3, [r1, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a224:	2128      	movs	r1, #40	; 0x28
 800a226:	fb01 4505 	mla	r5, r1, r5, r4
 800a22a:	4663      	mov	r3, ip
 800a22c:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800a22e:	e71e      	b.n	800a06e <HAL_PCD_IRQHandler+0x77a>
        else if (ep->xfer_len_db == 0U)
 800a230:	f1bc 0f00 	cmp.w	ip, #0
 800a234:	d103      	bne.n	800a23e <HAL_PCD_IRQHandler+0x94a>
          ep->xfer_fill_db = 0U;
 800a236:	f882 c04c 	strb.w	ip, [r2, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 800a23a:	4673      	mov	r3, lr
 800a23c:	e7d8      	b.n	800a1f0 <HAL_PCD_IRQHandler+0x8fc>
          ep->xfer_len_db = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800a242:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 800a246:	4663      	mov	r3, ip
 800a248:	e7d2      	b.n	800a1f0 <HAL_PCD_IRQHandler+0x8fc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a24a:	2b3e      	cmp	r3, #62	; 0x3e
 800a24c:	d807      	bhi.n	800a25e <HAL_PCD_IRQHandler+0x96a>
 800a24e:	085a      	lsrs	r2, r3, #1
 800a250:	07db      	lsls	r3, r3, #31
 800a252:	bf48      	it	mi
 800a254:	3201      	addmi	r2, #1
 800a256:	0292      	lsls	r2, r2, #10
 800a258:	b292      	uxth	r2, r2
 800a25a:	800a      	strh	r2, [r1, #0]
 800a25c:	e7e2      	b.n	800a224 <HAL_PCD_IRQHandler+0x930>
 800a25e:	095a      	lsrs	r2, r3, #5
 800a260:	06db      	lsls	r3, r3, #27
 800a262:	bf08      	it	eq
 800a264:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a268:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 800a26c:	e7f4      	b.n	800a258 <HAL_PCD_IRQHandler+0x964>
 800a26e:	2a01      	cmp	r2, #1
 800a270:	d1d8      	bne.n	800a224 <HAL_PCD_IRQHandler+0x930>
 800a272:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a276:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800a27a:	fa12 f383 	uxtah	r3, r2, r3
 800a27e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a282:	f8a1 c000 	strh.w	ip, [r1]
 800a286:	e7cd      	b.n	800a224 <HAL_PCD_IRQHandler+0x930>

0800a288 <HAL_PCD_EP_Open>:
{
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800a28e:	0609      	lsls	r1, r1, #24
{
 800a290:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a292:	d522      	bpl.n	800a2da <HAL_PCD_EP_Open+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a294:	1c69      	adds	r1, r5, #1
 800a296:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a29a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800a29e:	2028      	movs	r0, #40	; 0x28
 800a2a0:	fb05 0000 	mla	r0, r5, r0, r0
 800a2a4:	4420      	add	r0, r4
 800a2a6:	2601      	movs	r6, #1
 800a2a8:	7046      	strb	r6, [r0, #1]
  ep->maxpacket = ep_mps;
 800a2aa:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800a2ac:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2ae:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800a2b0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800a2b2:	b102      	cbz	r2, 800a2b6 <HAL_PCD_EP_Open+0x2e>
    ep->tx_fifo_num = ep->num;
 800a2b4:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800a2b6:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800a2b8:	bf04      	itt	eq
 800a2ba:	2300      	moveq	r3, #0
 800a2bc:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800a2be:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d014      	beq.n	800a2f0 <HAL_PCD_EP_Open+0x68>
 800a2c6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a2c8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a2ca:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a2ce:	f002 fe4d 	bl	800cf6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800a2d8:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2da:	2028      	movs	r0, #40	; 0x28
 800a2dc:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 0U;
 800a2e0:	fb00 4005 	mla	r0, r0, r5, r4
 800a2e4:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2e6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800a2ea:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 800a2ee:	e7dc      	b.n	800a2aa <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 800a2f0:	2002      	movs	r0, #2
 800a2f2:	e7f1      	b.n	800a2d8 <HAL_PCD_EP_Open+0x50>

0800a2f4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800a2f4:	060b      	lsls	r3, r1, #24
{
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	f001 0207 	and.w	r2, r1, #7
 800a2fc:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a2fe:	d519      	bpl.n	800a334 <HAL_PCD_EP_Close+0x40>
    ep->is_in = 1U;
 800a300:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a302:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 800a304:	fb02 3303 	mla	r3, r2, r3, r3
 800a308:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a30a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a30e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800a312:	2001      	movs	r0, #1
 800a314:	7058      	strb	r0, [r3, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a316:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800a318:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d014      	beq.n	800a34a <HAL_PCD_EP_Close+0x56>
 800a320:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a322:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a324:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a328:	f002 ff76 	bl	800d218 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a32c:	2000      	movs	r0, #0
 800a32e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800a332:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a334:	2328      	movs	r3, #40	; 0x28
 800a336:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800a33a:	fb03 0302 	mla	r3, r3, r2, r0
 800a33e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a340:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800a344:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800a348:	e7e5      	b.n	800a316 <HAL_PCD_EP_Close+0x22>
  __HAL_LOCK(hpcd);
 800a34a:	2002      	movs	r0, #2
 800a34c:	e7f1      	b.n	800a332 <HAL_PCD_EP_Close+0x3e>

0800a34e <HAL_PCD_EP_Receive>:
{
 800a34e:	b570      	push	{r4, r5, r6, lr}
 800a350:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800a354:	2628      	movs	r6, #40	; 0x28
 800a356:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 800a35a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800a35c:	f884 1168 	strb.w	r1, [r4, #360]	; 0x168
  ep->xfer_len = len;
 800a360:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 800a364:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
  ep->is_in = 0U;
 800a368:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a36c:	f504 71b4 	add.w	r1, r4, #360	; 0x168
 800a370:	6800      	ldr	r0, [r0, #0]
 800a372:	f003 f8a7 	bl	800d4c4 <USB_EPStartXfer>
}
 800a376:	4628      	mov	r0, r5
 800a378:	bd70      	pop	{r4, r5, r6, pc}

0800a37a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a37a:	f001 0107 	and.w	r1, r1, #7
 800a37e:	2328      	movs	r3, #40	; 0x28
 800a380:	fb03 0001 	mla	r0, r3, r1, r0
}
 800a384:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 800a388:	4770      	bx	lr

0800a38a <HAL_PCD_EP_Transmit>:
{
 800a38a:	b538      	push	{r3, r4, r5, lr}
 800a38c:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800a390:	2428      	movs	r4, #40	; 0x28
 800a392:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 800a396:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_len_db = len;
 800a39a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a39c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a3a0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_fill_db = 1U;
 800a3a4:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 800a3a6:	2500      	movs	r5, #0
  ep->xfer_fill_db = 1U;
 800a3a8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 800a3ac:	6465      	str	r5, [r4, #68]	; 0x44
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3ae:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3b2:	4411      	add	r1, r2
 800a3b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a3b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->is_in = 1U;
 800a3bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a3c0:	6800      	ldr	r0, [r0, #0]
 800a3c2:	f003 f87f 	bl	800d4c4 <USB_EPStartXfer>
}
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	bd38      	pop	{r3, r4, r5, pc}

0800a3ca <HAL_PCD_EP_SetStall>:
{
 800a3ca:	b538      	push	{r3, r4, r5, lr}
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a3d2:	6863      	ldr	r3, [r4, #4]
 800a3d4:	4298      	cmp	r0, r3
 800a3d6:	d826      	bhi.n	800a426 <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800a3d8:	060b      	lsls	r3, r1, #24
 800a3da:	d51a      	bpl.n	800a412 <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 1U;
 800a3dc:	2328      	movs	r3, #40	; 0x28
 800a3de:	fb00 3303 	mla	r3, r0, r3, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3e2:	1c41      	adds	r1, r0, #1
    ep->is_in = 1U;
 800a3e4:	4423      	add	r3, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ep->is_in = 1U;
 800a3ea:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3ec:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 800a3f0:	705a      	strb	r2, [r3, #1]
  ep->is_stall = 1U;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3f6:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 800a3f8:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d014      	beq.n	800a42a <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a400:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a402:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a406:	f002 ffd8 	bl	800d3ba <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800a40a:	2000      	movs	r0, #0
 800a40c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800a410:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800a412:	2528      	movs	r5, #40	; 0x28
 800a414:	fb05 4301 	mla	r3, r5, r1, r4
    ep->is_in = 0U;
 800a418:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 800a41a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	f882 3169 	strb.w	r3, [r2, #361]	; 0x169
 800a424:	e7e5      	b.n	800a3f2 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800a426:	2001      	movs	r0, #1
 800a428:	e7f2      	b.n	800a410 <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 800a42a:	2002      	movs	r0, #2
 800a42c:	e7f0      	b.n	800a410 <HAL_PCD_EP_SetStall+0x46>

0800a42e <HAL_PCD_EP_ClrStall>:
{
 800a42e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a430:	6843      	ldr	r3, [r0, #4]
 800a432:	f001 020f 	and.w	r2, r1, #15
 800a436:	429a      	cmp	r2, r3
{
 800a438:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a43a:	d82a      	bhi.n	800a492 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800a43c:	060b      	lsls	r3, r1, #24
 800a43e:	f001 0207 	and.w	r2, r1, #7
 800a442:	d51b      	bpl.n	800a47c <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 1U;
 800a444:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a446:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 800a448:	fb02 3303 	mla	r3, r2, r3, r3
 800a44c:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a44e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a452:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800a456:	2001      	movs	r0, #1
 800a458:	7058      	strb	r0, [r3, #1]
  ep->is_stall = 0U;
 800a45a:	2500      	movs	r5, #0
 800a45c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a45e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800a460:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a464:	2b01      	cmp	r3, #1
 800a466:	d016      	beq.n	800a496 <HAL_PCD_EP_ClrStall+0x68>
 800a468:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a46a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a46c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a470:	f002 ffc3 	bl	800d3fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a474:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a478:	4628      	mov	r0, r5
}
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a47c:	2328      	movs	r3, #40	; 0x28
 800a47e:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800a482:	fb03 0302 	mla	r3, r3, r2, r0
 800a486:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a488:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800a48c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800a490:	e7e3      	b.n	800a45a <HAL_PCD_EP_ClrStall+0x2c>
    return HAL_ERROR;
 800a492:	2001      	movs	r0, #1
 800a494:	e7f1      	b.n	800a47a <HAL_PCD_EP_ClrStall+0x4c>
  __HAL_LOCK(hpcd);
 800a496:	2002      	movs	r0, #2
 800a498:	e7ef      	b.n	800a47a <HAL_PCD_EP_ClrStall+0x4c>

0800a49a <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a49a:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a49e:	bf18      	it	ne
 800a4a0:	f001 0107 	andne.w	r1, r1, #7
{
 800a4a4:	b510      	push	{r4, lr}
 800a4a6:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4aa:	bf15      	itete	ne
 800a4ac:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a4b0:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4b4:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800a4b6:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a4ba:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800a4bc:	b91a      	cbnz	r2, 800a4c6 <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 800a4be:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800a4c0:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a4ca:	6083      	str	r3, [r0, #8]
 800a4cc:	e7f9      	b.n	800a4c2 <HAL_PCDEx_PMAConfig+0x28>
	...

0800a4d0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800a4d0:	4a02      	ldr	r2, [pc, #8]	; (800a4dc <HAL_PWR_EnableBkUpAccess+0xc>)
 800a4d2:	6813      	ldr	r3, [r2, #0]
 800a4d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4d8:	6013      	str	r3, [r2, #0]
}
 800a4da:	4770      	bx	lr
 800a4dc:	40007000 	.word	0x40007000

0800a4e0 <HAL_PWREx_EnableSDADC>:
{
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a4e0:	4a08      	ldr	r2, [pc, #32]	; (800a504 <HAL_PWREx_EnableSDADC+0x24>)
 800a4e2:	69d1      	ldr	r1, [r2, #28]
 800a4e4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800a4e8:	61d1      	str	r1, [r2, #28]
 800a4ea:	69d2      	ldr	r2, [r2, #28]
{
 800a4ec:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800a4ee:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a4f2:	9201      	str	r2, [sp, #4]
    
  PWR->CR |= Analogx;
 800a4f4:	4a04      	ldr	r2, [pc, #16]	; (800a508 <HAL_PWREx_EnableSDADC+0x28>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800a4f6:	9b01      	ldr	r3, [sp, #4]
  PWR->CR |= Analogx;
 800a4f8:	6813      	ldr	r3, [r2, #0]
 800a4fa:	4318      	orrs	r0, r3
 800a4fc:	6010      	str	r0, [r2, #0]
}
 800a4fe:	b002      	add	sp, #8
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	40021000 	.word	0x40021000
 800a508:	40007000 	.word	0x40007000

0800a50c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a50c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a510:	4605      	mov	r5, r0
 800a512:	2800      	cmp	r0, #0
 800a514:	d035      	beq.n	800a582 <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a516:	6803      	ldr	r3, [r0, #0]
 800a518:	07da      	lsls	r2, r3, #31
 800a51a:	d411      	bmi.n	800a540 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	079b      	lsls	r3, r3, #30
 800a520:	f100 8088 	bmi.w	800a634 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	071c      	lsls	r4, r3, #28
 800a528:	f100 80f8 	bmi.w	800a71c <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	0758      	lsls	r0, r3, #29
 800a530:	f100 8146 	bmi.w	800a7c0 <HAL_RCC_OscConfig+0x2b4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a534:	69e8      	ldr	r0, [r5, #28]
 800a536:	2800      	cmp	r0, #0
 800a538:	f040 81d4 	bne.w	800a8e4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }

  return HAL_OK;
 800a53c:	2000      	movs	r0, #0
 800a53e:	e04b      	b.n	800a5d8 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800a540:	4c9d      	ldr	r4, [pc, #628]	; (800a7b8 <HAL_RCC_OscConfig+0x2ac>)
 800a542:	6863      	ldr	r3, [r4, #4]
 800a544:	f003 030c 	and.w	r3, r3, #12
 800a548:	2b04      	cmp	r3, #4
 800a54a:	d007      	beq.n	800a55c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a54c:	6863      	ldr	r3, [r4, #4]
 800a54e:	f003 030c 	and.w	r3, r3, #12
 800a552:	2b08      	cmp	r3, #8
 800a554:	d117      	bne.n	800a586 <HAL_RCC_OscConfig+0x7a>
 800a556:	6863      	ldr	r3, [r4, #4]
 800a558:	03df      	lsls	r7, r3, #15
 800a55a:	d514      	bpl.n	800a586 <HAL_RCC_OscConfig+0x7a>
 800a55c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a560:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a564:	6821      	ldr	r1, [r4, #0]
 800a566:	fa93 f3a3 	rbit	r3, r3
 800a56a:	fab3 f383 	clz	r3, r3
 800a56e:	f003 031f 	and.w	r3, r3, #31
 800a572:	2201      	movs	r2, #1
 800a574:	fa02 f303 	lsl.w	r3, r2, r3
 800a578:	420b      	tst	r3, r1
 800a57a:	d0cf      	beq.n	800a51c <HAL_RCC_OscConfig+0x10>
 800a57c:	686b      	ldr	r3, [r5, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1cc      	bne.n	800a51c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800a582:	2001      	movs	r0, #1
 800a584:	e028      	b.n	800a5d8 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a586:	686a      	ldr	r2, [r5, #4]
 800a588:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a58c:	d127      	bne.n	800a5de <HAL_RCC_OscConfig+0xd2>
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a594:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a598:	68a9      	ldr	r1, [r5, #8]
 800a59a:	f023 030f 	bic.w	r3, r3, #15
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5a2:	b362      	cbz	r2, 800a5fe <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 800a5a4:	f7fe fa7a 	bl	8008a9c <HAL_GetTick>
 800a5a8:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800a5ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5ae:	f04f 0801 	mov.w	r8, #1
 800a5b2:	fa97 f3a7 	rbit	r3, r7
 800a5b6:	6822      	ldr	r2, [r4, #0]
 800a5b8:	fa97 f3a7 	rbit	r3, r7
 800a5bc:	fab3 f383 	clz	r3, r3
 800a5c0:	f003 031f 	and.w	r3, r3, #31
 800a5c4:	fa08 f303 	lsl.w	r3, r8, r3
 800a5c8:	4213      	tst	r3, r2
 800a5ca:	d1a7      	bne.n	800a51c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5cc:	f7fe fa66 	bl	8008a9c <HAL_GetTick>
 800a5d0:	1b83      	subs	r3, r0, r6
 800a5d2:	2b64      	cmp	r3, #100	; 0x64
 800a5d4:	d9ed      	bls.n	800a5b2 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 800a5d6:	2003      	movs	r0, #3
}
 800a5d8:	b003      	add	sp, #12
 800a5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	b932      	cbnz	r2, 800a5f0 <HAL_RCC_OscConfig+0xe4>
 800a5e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5e6:	6023      	str	r3, [r4, #0]
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5ee:	e7d1      	b.n	800a594 <HAL_RCC_OscConfig+0x88>
 800a5f0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800a5f4:	d1f5      	bne.n	800a5e2 <HAL_RCC_OscConfig+0xd6>
 800a5f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	e7c7      	b.n	800a58e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800a5fe:	f7fe fa4d 	bl	8008a9c <HAL_GetTick>
 800a602:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800a606:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a608:	f04f 0801 	mov.w	r8, #1
 800a60c:	fa97 f3a7 	rbit	r3, r7
 800a610:	6822      	ldr	r2, [r4, #0]
 800a612:	fa97 f3a7 	rbit	r3, r7
 800a616:	fab3 f383 	clz	r3, r3
 800a61a:	f003 031f 	and.w	r3, r3, #31
 800a61e:	fa08 f303 	lsl.w	r3, r8, r3
 800a622:	4213      	tst	r3, r2
 800a624:	f43f af7a 	beq.w	800a51c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a628:	f7fe fa38 	bl	8008a9c <HAL_GetTick>
 800a62c:	1b83      	subs	r3, r0, r6
 800a62e:	2b64      	cmp	r3, #100	; 0x64
 800a630:	d9ec      	bls.n	800a60c <HAL_RCC_OscConfig+0x100>
 800a632:	e7d0      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800a634:	4c60      	ldr	r4, [pc, #384]	; (800a7b8 <HAL_RCC_OscConfig+0x2ac>)
 800a636:	6863      	ldr	r3, [r4, #4]
 800a638:	f013 0f0c 	tst.w	r3, #12
 800a63c:	d007      	beq.n	800a64e <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a63e:	6863      	ldr	r3, [r4, #4]
 800a640:	f003 030c 	and.w	r3, r3, #12
 800a644:	2b08      	cmp	r3, #8
 800a646:	d121      	bne.n	800a68c <HAL_RCC_OscConfig+0x180>
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	03de      	lsls	r6, r3, #15
 800a64c:	d41e      	bmi.n	800a68c <HAL_RCC_OscConfig+0x180>
 800a64e:	2302      	movs	r3, #2
 800a650:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a654:	6821      	ldr	r1, [r4, #0]
 800a656:	fa93 f3a3 	rbit	r3, r3
 800a65a:	fab3 f383 	clz	r3, r3
 800a65e:	f003 031f 	and.w	r3, r3, #31
 800a662:	2201      	movs	r2, #1
 800a664:	fa02 f303 	lsl.w	r3, r2, r3
 800a668:	420b      	tst	r3, r1
 800a66a:	d002      	beq.n	800a672 <HAL_RCC_OscConfig+0x166>
 800a66c:	692b      	ldr	r3, [r5, #16]
 800a66e:	4293      	cmp	r3, r2
 800a670:	d187      	bne.n	800a582 <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a672:	6821      	ldr	r1, [r4, #0]
 800a674:	23f8      	movs	r3, #248	; 0xf8
 800a676:	fa93 f3a3 	rbit	r3, r3
 800a67a:	fab3 f283 	clz	r2, r3
 800a67e:	696b      	ldr	r3, [r5, #20]
 800a680:	4093      	lsls	r3, r2
 800a682:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800a686:	4313      	orrs	r3, r2
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	e74b      	b.n	800a524 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a68c:	692a      	ldr	r2, [r5, #16]
 800a68e:	2601      	movs	r6, #1
 800a690:	b30a      	cbz	r2, 800a6d6 <HAL_RCC_OscConfig+0x1ca>
 800a692:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800a696:	fab3 f383 	clz	r3, r3
 800a69a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a69e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	f04f 0802 	mov.w	r8, #2
 800a6a8:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800a6aa:	f7fe f9f7 	bl	8008a9c <HAL_GetTick>
 800a6ae:	4607      	mov	r7, r0
 800a6b0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6b4:	6822      	ldr	r2, [r4, #0]
 800a6b6:	fa98 f3a8 	rbit	r3, r8
 800a6ba:	fab3 f383 	clz	r3, r3
 800a6be:	f003 031f 	and.w	r3, r3, #31
 800a6c2:	fa06 f303 	lsl.w	r3, r6, r3
 800a6c6:	4213      	tst	r3, r2
 800a6c8:	d1d3      	bne.n	800a672 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6ca:	f7fe f9e7 	bl	8008a9c <HAL_GetTick>
 800a6ce:	1bc3      	subs	r3, r0, r7
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d9ed      	bls.n	800a6b0 <HAL_RCC_OscConfig+0x1a4>
 800a6d4:	e77f      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
 800a6d6:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800a6da:	fab3 f383 	clz	r3, r3
 800a6de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a6e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	f04f 0802 	mov.w	r8, #2
 800a6ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a6ee:	f7fe f9d5 	bl	8008a9c <HAL_GetTick>
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	fa98 f3a8 	rbit	r3, r8
 800a6fe:	fab3 f383 	clz	r3, r3
 800a702:	f003 031f 	and.w	r3, r3, #31
 800a706:	fa06 f303 	lsl.w	r3, r6, r3
 800a70a:	4213      	tst	r3, r2
 800a70c:	f43f af0a 	beq.w	800a524 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a710:	f7fe f9c4 	bl	8008a9c <HAL_GetTick>
 800a714:	1bc3      	subs	r3, r0, r7
 800a716:	2b02      	cmp	r3, #2
 800a718:	d9ec      	bls.n	800a6f4 <HAL_RCC_OscConfig+0x1e8>
 800a71a:	e75c      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a71c:	69aa      	ldr	r2, [r5, #24]
 800a71e:	4e26      	ldr	r6, [pc, #152]	; (800a7b8 <HAL_RCC_OscConfig+0x2ac>)
 800a720:	4926      	ldr	r1, [pc, #152]	; (800a7bc <HAL_RCC_OscConfig+0x2b0>)
 800a722:	2401      	movs	r4, #1
 800a724:	b31a      	cbz	r2, 800a76e <HAL_RCC_OscConfig+0x262>
 800a726:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800a72a:	fab3 f383 	clz	r3, r3
 800a72e:	440b      	add	r3, r1
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	2702      	movs	r7, #2
 800a734:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800a736:	f7fe f9b1 	bl	8008a9c <HAL_GetTick>
 800a73a:	4680      	mov	r8, r0
 800a73c:	fa97 f3a7 	rbit	r3, r7
 800a740:	fa97 f3a7 	rbit	r3, r7
 800a744:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a748:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a74a:	fa97 f3a7 	rbit	r3, r7
 800a74e:	fab3 f383 	clz	r3, r3
 800a752:	f003 031f 	and.w	r3, r3, #31
 800a756:	fa04 f303 	lsl.w	r3, r4, r3
 800a75a:	4213      	tst	r3, r2
 800a75c:	f47f aee6 	bne.w	800a52c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a760:	f7fe f99c 	bl	8008a9c <HAL_GetTick>
 800a764:	eba0 0308 	sub.w	r3, r0, r8
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d9e7      	bls.n	800a73c <HAL_RCC_OscConfig+0x230>
 800a76c:	e733      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
 800a76e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800a772:	fab3 f383 	clz	r3, r3
 800a776:	440b      	add	r3, r1
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	2702      	movs	r7, #2
 800a77c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800a77e:	f7fe f98d 	bl	8008a9c <HAL_GetTick>
 800a782:	4680      	mov	r8, r0
 800a784:	fa97 f3a7 	rbit	r3, r7
 800a788:	fa97 f3a7 	rbit	r3, r7
 800a78c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a790:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a792:	fa97 f3a7 	rbit	r3, r7
 800a796:	fab3 f383 	clz	r3, r3
 800a79a:	f003 031f 	and.w	r3, r3, #31
 800a79e:	fa04 f303 	lsl.w	r3, r4, r3
 800a7a2:	4213      	tst	r3, r2
 800a7a4:	f43f aec2 	beq.w	800a52c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a7a8:	f7fe f978 	bl	8008a9c <HAL_GetTick>
 800a7ac:	eba0 0308 	sub.w	r3, r0, r8
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d9e7      	bls.n	800a784 <HAL_RCC_OscConfig+0x278>
 800a7b4:	e70f      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
 800a7b6:	bf00      	nop
 800a7b8:	40021000 	.word	0x40021000
 800a7bc:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7c0:	4c91      	ldr	r4, [pc, #580]	; (800aa08 <HAL_RCC_OscConfig+0x4fc>)
 800a7c2:	69e3      	ldr	r3, [r4, #28]
 800a7c4:	00d9      	lsls	r1, r3, #3
 800a7c6:	d433      	bmi.n	800a830 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7c8:	69e3      	ldr	r3, [r4, #28]
 800a7ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ce:	61e3      	str	r3, [r4, #28]
 800a7d0:	69e3      	ldr	r3, [r4, #28]
 800a7d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a7da:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7dc:	4f8b      	ldr	r7, [pc, #556]	; (800aa0c <HAL_RCC_OscConfig+0x500>)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	05da      	lsls	r2, r3, #23
 800a7e2:	d527      	bpl.n	800a834 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7e4:	68eb      	ldr	r3, [r5, #12]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d135      	bne.n	800a856 <HAL_RCC_OscConfig+0x34a>
 800a7ea:	6a23      	ldr	r3, [r4, #32]
 800a7ec:	f043 0301 	orr.w	r3, r3, #1
 800a7f0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800a7f2:	f7fe f953 	bl	8008a9c <HAL_GetTick>
 800a7f6:	2702      	movs	r7, #2
 800a7f8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7fa:	f04f 0901 	mov.w	r9, #1
 800a7fe:	fa97 f3a7 	rbit	r3, r7
 800a802:	fa97 f3a7 	rbit	r3, r7
 800a806:	2b00      	cmp	r3, #0
 800a808:	d064      	beq.n	800a8d4 <HAL_RCC_OscConfig+0x3c8>
 800a80a:	6a22      	ldr	r2, [r4, #32]
 800a80c:	fa97 f3a7 	rbit	r3, r7
 800a810:	fab3 f383 	clz	r3, r3
 800a814:	f003 031f 	and.w	r3, r3, #31
 800a818:	fa09 f303 	lsl.w	r3, r9, r3
 800a81c:	4213      	tst	r3, r2
 800a81e:	d050      	beq.n	800a8c2 <HAL_RCC_OscConfig+0x3b6>
    if(pwrclkchanged == SET)
 800a820:	2e00      	cmp	r6, #0
 800a822:	f43f ae87 	beq.w	800a534 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a826:	69e3      	ldr	r3, [r4, #28]
 800a828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a82c:	61e3      	str	r3, [r4, #28]
 800a82e:	e681      	b.n	800a534 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800a830:	2600      	movs	r6, #0
 800a832:	e7d3      	b.n	800a7dc <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a83a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800a83c:	f7fe f92e 	bl	8008a9c <HAL_GetTick>
 800a840:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	05db      	lsls	r3, r3, #23
 800a846:	d4cd      	bmi.n	800a7e4 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a848:	f7fe f928 	bl	8008a9c <HAL_GetTick>
 800a84c:	eba0 0008 	sub.w	r0, r0, r8
 800a850:	2864      	cmp	r0, #100	; 0x64
 800a852:	d9f6      	bls.n	800a842 <HAL_RCC_OscConfig+0x336>
 800a854:	e6bf      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a856:	bb33      	cbnz	r3, 800a8a6 <HAL_RCC_OscConfig+0x39a>
 800a858:	6a23      	ldr	r3, [r4, #32]
 800a85a:	f023 0301 	bic.w	r3, r3, #1
 800a85e:	6223      	str	r3, [r4, #32]
 800a860:	6a23      	ldr	r3, [r4, #32]
 800a862:	f023 0304 	bic.w	r3, r3, #4
 800a866:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800a868:	f7fe f918 	bl	8008a9c <HAL_GetTick>
 800a86c:	2702      	movs	r7, #2
 800a86e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a870:	f04f 0901 	mov.w	r9, #1
 800a874:	fa97 f3a7 	rbit	r3, r7
 800a878:	fa97 f3a7 	rbit	r3, r7
 800a87c:	b373      	cbz	r3, 800a8dc <HAL_RCC_OscConfig+0x3d0>
 800a87e:	6a22      	ldr	r2, [r4, #32]
 800a880:	fa97 f3a7 	rbit	r3, r7
 800a884:	fab3 f383 	clz	r3, r3
 800a888:	f003 031f 	and.w	r3, r3, #31
 800a88c:	fa09 f303 	lsl.w	r3, r9, r3
 800a890:	4213      	tst	r3, r2
 800a892:	d0c5      	beq.n	800a820 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a894:	f7fe f902 	bl	8008a9c <HAL_GetTick>
 800a898:	f242 7310 	movw	r3, #10000	; 0x2710
 800a89c:	eba0 0008 	sub.w	r0, r0, r8
 800a8a0:	4298      	cmp	r0, r3
 800a8a2:	d9e7      	bls.n	800a874 <HAL_RCC_OscConfig+0x368>
 800a8a4:	e697      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8a6:	2b05      	cmp	r3, #5
 800a8a8:	6a23      	ldr	r3, [r4, #32]
 800a8aa:	d103      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x3a8>
 800a8ac:	f043 0304 	orr.w	r3, r3, #4
 800a8b0:	6223      	str	r3, [r4, #32]
 800a8b2:	e79a      	b.n	800a7ea <HAL_RCC_OscConfig+0x2de>
 800a8b4:	f023 0301 	bic.w	r3, r3, #1
 800a8b8:	6223      	str	r3, [r4, #32]
 800a8ba:	6a23      	ldr	r3, [r4, #32]
 800a8bc:	f023 0304 	bic.w	r3, r3, #4
 800a8c0:	e796      	b.n	800a7f0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a8c2:	f7fe f8eb 	bl	8008a9c <HAL_GetTick>
 800a8c6:	f242 7310 	movw	r3, #10000	; 0x2710
 800a8ca:	eba0 0008 	sub.w	r0, r0, r8
 800a8ce:	4298      	cmp	r0, r3
 800a8d0:	d995      	bls.n	800a7fe <HAL_RCC_OscConfig+0x2f2>
 800a8d2:	e680      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
 800a8d4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a8da:	e797      	b.n	800a80c <HAL_RCC_OscConfig+0x300>
 800a8dc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a8e2:	e7cd      	b.n	800a880 <HAL_RCC_OscConfig+0x374>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8e4:	4c48      	ldr	r4, [pc, #288]	; (800aa08 <HAL_RCC_OscConfig+0x4fc>)
 800a8e6:	6863      	ldr	r3, [r4, #4]
 800a8e8:	f003 030c 	and.w	r3, r3, #12
 800a8ec:	2b08      	cmp	r3, #8
 800a8ee:	d07a      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x4da>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8f0:	2802      	cmp	r0, #2
 800a8f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8f6:	d151      	bne.n	800a99c <HAL_RCC_OscConfig+0x490>
 800a8f8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800a8fc:	fab3 f383 	clz	r3, r3
 800a900:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a904:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a90e:	f7fe f8c5 	bl	8008a9c <HAL_GetTick>
 800a912:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800a916:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a918:	2601      	movs	r6, #1
 800a91a:	fa98 f3a8 	rbit	r3, r8
 800a91e:	6822      	ldr	r2, [r4, #0]
 800a920:	fa98 f3a8 	rbit	r3, r8
 800a924:	fab3 f383 	clz	r3, r3
 800a928:	f003 031f 	and.w	r3, r3, #31
 800a92c:	fa06 f303 	lsl.w	r3, r6, r3
 800a930:	4213      	tst	r3, r2
 800a932:	d12d      	bne.n	800a990 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a934:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 800a938:	6862      	ldr	r2, [r4, #4]
 800a93a:	430b      	orrs	r3, r1
 800a93c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800a940:	4313      	orrs	r3, r2
 800a942:	6063      	str	r3, [r4, #4]
 800a944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a948:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800a94c:	fab3 f383 	clz	r3, r3
 800a950:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a954:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a958:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a95a:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 800a95c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800a95e:	f7fe f89d 	bl	8008a9c <HAL_GetTick>
 800a962:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800a966:	4605      	mov	r5, r0
 800a968:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a96c:	6822      	ldr	r2, [r4, #0]
 800a96e:	fa96 f3a6 	rbit	r3, r6
 800a972:	fab3 f383 	clz	r3, r3
 800a976:	f003 031f 	and.w	r3, r3, #31
 800a97a:	fa07 f303 	lsl.w	r3, r7, r3
 800a97e:	4213      	tst	r3, r2
 800a980:	f47f addc 	bne.w	800a53c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a984:	f7fe f88a 	bl	8008a9c <HAL_GetTick>
 800a988:	1b40      	subs	r0, r0, r5
 800a98a:	2802      	cmp	r0, #2
 800a98c:	d9ec      	bls.n	800a968 <HAL_RCC_OscConfig+0x45c>
 800a98e:	e622      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a990:	f7fe f884 	bl	8008a9c <HAL_GetTick>
 800a994:	1bc3      	subs	r3, r0, r7
 800a996:	2b02      	cmp	r3, #2
 800a998:	d9bf      	bls.n	800a91a <HAL_RCC_OscConfig+0x40e>
 800a99a:	e61c      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
 800a99c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800a9a0:	fab3 f383 	clz	r3, r3
 800a9a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a9a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a9b2:	f7fe f873 	bl	8008a9c <HAL_GetTick>
 800a9b6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800a9ba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9bc:	2701      	movs	r7, #1
 800a9be:	fa96 f3a6 	rbit	r3, r6
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	fa96 f3a6 	rbit	r3, r6
 800a9c8:	fab3 f383 	clz	r3, r3
 800a9cc:	f003 031f 	and.w	r3, r3, #31
 800a9d0:	fa07 f303 	lsl.w	r3, r7, r3
 800a9d4:	4213      	tst	r3, r2
 800a9d6:	f43f adb1 	beq.w	800a53c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a9da:	f7fe f85f 	bl	8008a9c <HAL_GetTick>
 800a9de:	1b40      	subs	r0, r0, r5
 800a9e0:	2802      	cmp	r0, #2
 800a9e2:	d9ec      	bls.n	800a9be <HAL_RCC_OscConfig+0x4b2>
 800a9e4:	e5f7      	b.n	800a5d6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9e6:	2801      	cmp	r0, #1
 800a9e8:	f43f adf6 	beq.w	800a5d8 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 800a9ec:	6863      	ldr	r3, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a9ee:	6a2a      	ldr	r2, [r5, #32]
 800a9f0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800a9f4:	4291      	cmp	r1, r2
 800a9f6:	f47f adc4 	bne.w	800a582 <HAL_RCC_OscConfig+0x76>
 800a9fa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800a9fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800aa00:	4293      	cmp	r3, r2
 800aa02:	f43f ad9b 	beq.w	800a53c <HAL_RCC_OscConfig+0x30>
 800aa06:	e5bc      	b.n	800a582 <HAL_RCC_OscConfig+0x76>
 800aa08:	40021000 	.word	0x40021000
 800aa0c:	40007000 	.word	0x40007000

0800aa10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa10:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800aa12:	4c13      	ldr	r4, [pc, #76]	; (800aa60 <HAL_RCC_GetSysClockFreq+0x50>)
 800aa14:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aa16:	f001 030c 	and.w	r3, r1, #12
 800aa1a:	2b08      	cmp	r3, #8
 800aa1c:	d11e      	bne.n	800aa5c <HAL_RCC_GetSysClockFreq+0x4c>
 800aa1e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800aa22:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800aa26:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800aa2a:	fab3 f383 	clz	r3, r3
 800aa2e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa32:	4a0c      	ldr	r2, [pc, #48]	; (800aa64 <HAL_RCC_GetSysClockFreq+0x54>)
 800aa34:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800aa36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa38:	220f      	movs	r2, #15
 800aa3a:	fa92 f2a2 	rbit	r2, r2
 800aa3e:	fab2 f282 	clz	r2, r2
 800aa42:	f003 030f 	and.w	r3, r3, #15
 800aa46:	40d3      	lsrs	r3, r2
 800aa48:	4a07      	ldr	r2, [pc, #28]	; (800aa68 <HAL_RCC_GetSysClockFreq+0x58>)
 800aa4a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800aa4c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800aa4e:	bf4a      	itet	mi
 800aa50:	4b06      	ldrmi	r3, [pc, #24]	; (800aa6c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800aa52:	4b07      	ldrpl	r3, [pc, #28]	; (800aa70 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800aa54:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800aa58:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800aa5a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800aa5c:	4803      	ldr	r0, [pc, #12]	; (800aa6c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800aa5e:	e7fc      	b.n	800aa5a <HAL_RCC_GetSysClockFreq+0x4a>
 800aa60:	40021000 	.word	0x40021000
 800aa64:	08014c12 	.word	0x08014c12
 800aa68:	08014c22 	.word	0x08014c22
 800aa6c:	007a1200 	.word	0x007a1200
 800aa70:	003d0900 	.word	0x003d0900

0800aa74 <HAL_RCC_ClockConfig>:
{
 800aa74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa78:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	b910      	cbnz	r0, 800aa84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800aa7e:	2001      	movs	r0, #1
}
 800aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa84:	4a4c      	ldr	r2, [pc, #304]	; (800abb8 <HAL_RCC_ClockConfig+0x144>)
 800aa86:	6813      	ldr	r3, [r2, #0]
 800aa88:	f003 0307 	and.w	r3, r3, #7
 800aa8c:	428b      	cmp	r3, r1
 800aa8e:	d32e      	bcc.n	800aaee <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	0791      	lsls	r1, r2, #30
 800aa94:	d436      	bmi.n	800ab04 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa96:	07d2      	lsls	r2, r2, #31
 800aa98:	d43c      	bmi.n	800ab14 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa9a:	4a47      	ldr	r2, [pc, #284]	; (800abb8 <HAL_RCC_ClockConfig+0x144>)
 800aa9c:	6813      	ldr	r3, [r2, #0]
 800aa9e:	f003 0307 	and.w	r3, r3, #7
 800aaa2:	42ab      	cmp	r3, r5
 800aaa4:	d874      	bhi.n	800ab90 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	4d44      	ldr	r5, [pc, #272]	; (800abbc <HAL_RCC_ClockConfig+0x148>)
 800aaaa:	f012 0f04 	tst.w	r2, #4
 800aaae:	d17b      	bne.n	800aba8 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aab0:	0713      	lsls	r3, r2, #28
 800aab2:	d506      	bpl.n	800aac2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aab4:	686b      	ldr	r3, [r5, #4]
 800aab6:	6922      	ldr	r2, [r4, #16]
 800aab8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800aabc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800aac0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800aac2:	f7ff ffa5 	bl	800aa10 <HAL_RCC_GetSysClockFreq>
 800aac6:	686b      	ldr	r3, [r5, #4]
 800aac8:	22f0      	movs	r2, #240	; 0xf0
 800aaca:	fa92 f2a2 	rbit	r2, r2
 800aace:	fab2 f282 	clz	r2, r2
 800aad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aad6:	40d3      	lsrs	r3, r2
 800aad8:	4a39      	ldr	r2, [pc, #228]	; (800abc0 <HAL_RCC_ClockConfig+0x14c>)
 800aada:	5cd3      	ldrb	r3, [r2, r3]
 800aadc:	40d8      	lsrs	r0, r3
 800aade:	4b39      	ldr	r3, [pc, #228]	; (800abc4 <HAL_RCC_ClockConfig+0x150>)
 800aae0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800aae2:	4b39      	ldr	r3, [pc, #228]	; (800abc8 <HAL_RCC_ClockConfig+0x154>)
 800aae4:	6818      	ldr	r0, [r3, #0]
 800aae6:	f7fd ff97 	bl	8008a18 <HAL_InitTick>
  return HAL_OK;
 800aaea:	2000      	movs	r0, #0
 800aaec:	e7c8      	b.n	800aa80 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaee:	6813      	ldr	r3, [r2, #0]
 800aaf0:	f023 0307 	bic.w	r3, r3, #7
 800aaf4:	430b      	orrs	r3, r1
 800aaf6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaf8:	6813      	ldr	r3, [r2, #0]
 800aafa:	f003 0307 	and.w	r3, r3, #7
 800aafe:	428b      	cmp	r3, r1
 800ab00:	d1bd      	bne.n	800aa7e <HAL_RCC_ClockConfig+0xa>
 800ab02:	e7c5      	b.n	800aa90 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab04:	492d      	ldr	r1, [pc, #180]	; (800abbc <HAL_RCC_ClockConfig+0x148>)
 800ab06:	68a0      	ldr	r0, [r4, #8]
 800ab08:	684b      	ldr	r3, [r1, #4]
 800ab0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab0e:	4303      	orrs	r3, r0
 800ab10:	604b      	str	r3, [r1, #4]
 800ab12:	e7c0      	b.n	800aa96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab14:	6862      	ldr	r2, [r4, #4]
 800ab16:	4e29      	ldr	r6, [pc, #164]	; (800abbc <HAL_RCC_ClockConfig+0x148>)
 800ab18:	2a01      	cmp	r2, #1
 800ab1a:	d126      	bne.n	800ab6a <HAL_RCC_ClockConfig+0xf6>
 800ab1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab20:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab24:	6831      	ldr	r1, [r6, #0]
 800ab26:	fa93 f3a3 	rbit	r3, r3
 800ab2a:	fab3 f383 	clz	r3, r3
 800ab2e:	f003 031f 	and.w	r3, r3, #31
 800ab32:	fa02 f303 	lsl.w	r3, r2, r3
 800ab36:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab38:	d0a1      	beq.n	800aa7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab3a:	6873      	ldr	r3, [r6, #4]
 800ab3c:	f023 0303 	bic.w	r3, r3, #3
 800ab40:	431a      	orrs	r2, r3
 800ab42:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800ab44:	f7fd ffaa 	bl	8008a9c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab48:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800ab4c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab4e:	6873      	ldr	r3, [r6, #4]
 800ab50:	6862      	ldr	r2, [r4, #4]
 800ab52:	f003 030c 	and.w	r3, r3, #12
 800ab56:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800ab5a:	d09e      	beq.n	800aa9a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab5c:	f7fd ff9e 	bl	8008a9c <HAL_GetTick>
 800ab60:	1bc0      	subs	r0, r0, r7
 800ab62:	4540      	cmp	r0, r8
 800ab64:	d9f3      	bls.n	800ab4e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800ab66:	2003      	movs	r0, #3
 800ab68:	e78a      	b.n	800aa80 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab6a:	2a02      	cmp	r2, #2
 800ab6c:	bf0c      	ite	eq
 800ab6e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800ab72:	2302      	movne	r3, #2
 800ab74:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab78:	6830      	ldr	r0, [r6, #0]
 800ab7a:	fa93 f3a3 	rbit	r3, r3
 800ab7e:	fab3 f383 	clz	r3, r3
 800ab82:	f003 031f 	and.w	r3, r3, #31
 800ab86:	2101      	movs	r1, #1
 800ab88:	fa01 f303 	lsl.w	r3, r1, r3
 800ab8c:	4203      	tst	r3, r0
 800ab8e:	e7d3      	b.n	800ab38 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab90:	6813      	ldr	r3, [r2, #0]
 800ab92:	f023 0307 	bic.w	r3, r3, #7
 800ab96:	432b      	orrs	r3, r5
 800ab98:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab9a:	6813      	ldr	r3, [r2, #0]
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	42ab      	cmp	r3, r5
 800aba2:	f47f af6c 	bne.w	800aa7e <HAL_RCC_ClockConfig+0xa>
 800aba6:	e77e      	b.n	800aaa6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aba8:	686b      	ldr	r3, [r5, #4]
 800abaa:	68e1      	ldr	r1, [r4, #12]
 800abac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800abb0:	430b      	orrs	r3, r1
 800abb2:	606b      	str	r3, [r5, #4]
 800abb4:	e77c      	b.n	800aab0 <HAL_RCC_ClockConfig+0x3c>
 800abb6:	bf00      	nop
 800abb8:	40022000 	.word	0x40022000
 800abbc:	40021000 	.word	0x40021000
 800abc0:	08014c02 	.word	0x08014c02
 800abc4:	20000008 	.word	0x20000008
 800abc8:	20000010 	.word	0x20000010

0800abcc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800abcc:	6803      	ldr	r3, [r0, #0]
{
 800abce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abd2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800abd4:	03d8      	lsls	r0, r3, #15
 800abd6:	d520      	bpl.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x4e>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800abd8:	4d68      	ldr	r5, [pc, #416]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800abda:	69eb      	ldr	r3, [r5, #28]
 800abdc:	00d9      	lsls	r1, r3, #3
 800abde:	d473      	bmi.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abe0:	69eb      	ldr	r3, [r5, #28]
 800abe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abe6:	61eb      	str	r3, [r5, #28]
 800abe8:	69eb      	ldr	r3, [r5, #28]
 800abea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abee:	9301      	str	r3, [sp, #4]
 800abf0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800abf2:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abf4:	4f62      	ldr	r7, [pc, #392]	; (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	05da      	lsls	r2, r3, #23
 800abfa:	d567      	bpl.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x100>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800abfc:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800abfe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800ac02:	d177      	bne.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800ac04:	6a2b      	ldr	r3, [r5, #32]
 800ac06:	6862      	ldr	r2, [r4, #4]
 800ac08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ac10:	b11e      	cbz	r6, 800ac1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac12:	69eb      	ldr	r3, [r5, #28]
 800ac14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac18:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	07d9      	lsls	r1, r3, #31
 800ac1e:	d506      	bpl.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ac20:	4956      	ldr	r1, [pc, #344]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ac22:	68a0      	ldr	r0, [r4, #8]
 800ac24:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ac26:	f022 0203 	bic.w	r2, r2, #3
 800ac2a:	4302      	orrs	r2, r0
 800ac2c:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ac2e:	079a      	lsls	r2, r3, #30
 800ac30:	d506      	bpl.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ac32:	4952      	ldr	r1, [pc, #328]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ac34:	68e0      	ldr	r0, [r4, #12]
 800ac36:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ac38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ac3c:	4302      	orrs	r2, r0
 800ac3e:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ac40:	075f      	lsls	r7, r3, #29
 800ac42:	d506      	bpl.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ac44:	494d      	ldr	r1, [pc, #308]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ac46:	6920      	ldr	r0, [r4, #16]
 800ac48:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ac4a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800ac4e:	4302      	orrs	r2, r0
 800ac50:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac52:	069e      	lsls	r6, r3, #26
 800ac54:	d506      	bpl.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac56:	4949      	ldr	r1, [pc, #292]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ac58:	6960      	ldr	r0, [r4, #20]
 800ac5a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ac5c:	f022 0210 	bic.w	r2, r2, #16
 800ac60:	4302      	orrs	r2, r0
 800ac62:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac64:	039d      	lsls	r5, r3, #14
 800ac66:	d506      	bpl.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800ac68:	4944      	ldr	r1, [pc, #272]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ac6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ac6c:	684a      	ldr	r2, [r1, #4]
 800ac6e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800ac72:	4302      	orrs	r2, r0
 800ac74:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac76:	0658      	lsls	r0, r3, #25
 800ac78:	d506      	bpl.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac7a:	4940      	ldr	r1, [pc, #256]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ac7c:	69a0      	ldr	r0, [r4, #24]
 800ac7e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ac80:	f022 0220 	bic.w	r2, r2, #32
 800ac84:	4302      	orrs	r2, r0
 800ac86:	630a      	str	r2, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800ac88:	0619      	lsls	r1, r3, #24
 800ac8a:	d506      	bpl.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800ac8c:	493b      	ldr	r1, [pc, #236]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ac8e:	69e0      	ldr	r0, [r4, #28]
 800ac90:	684a      	ldr	r2, [r1, #4]
 800ac92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ac96:	4302      	orrs	r2, r0
 800ac98:	604a      	str	r2, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800ac9a:	051a      	lsls	r2, r3, #20
 800ac9c:	d506      	bpl.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800ac9e:	4937      	ldr	r1, [pc, #220]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800aca0:	6a20      	ldr	r0, [r4, #32]
 800aca2:	684a      	ldr	r2, [r1, #4]
 800aca4:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800aca8:	4302      	orrs	r2, r0
 800acaa:	604a      	str	r2, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800acac:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800acb0:	bf1f      	itttt	ne
 800acb2:	4a32      	ldrne	r2, [pc, #200]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800acb4:	6a61      	ldrne	r1, [r4, #36]	; 0x24
 800acb6:	6b13      	ldrne	r3, [r2, #48]	; 0x30
 800acb8:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 800acbc:	bf1d      	ittte	ne
 800acbe:	430b      	orrne	r3, r1
 800acc0:	6313      	strne	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800acc2:	2000      	movne	r0, #0
 800acc4:	4618      	moveq	r0, r3
 800acc6:	e012      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x122>
  FlagStatus       pwrclkchanged = RESET;
 800acc8:	2600      	movs	r6, #0
 800acca:	e793      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acd2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800acd4:	f7fd fee2 	bl	8008a9c <HAL_GetTick>
 800acd8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	05db      	lsls	r3, r3, #23
 800acde:	d48d      	bmi.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ace0:	f7fd fedc 	bl	8008a9c <HAL_GetTick>
 800ace4:	eba0 0008 	sub.w	r0, r0, r8
 800ace8:	2864      	cmp	r0, #100	; 0x64
 800acea:	d9f6      	bls.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x10e>
          return HAL_TIMEOUT;
 800acec:	2003      	movs	r0, #3
}
 800acee:	b003      	add	sp, #12
 800acf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800acf4:	6862      	ldr	r2, [r4, #4]
 800acf6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d082      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acfe:	6a29      	ldr	r1, [r5, #32]
 800ad00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad04:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800ad08:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800ad0c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ad84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800ad10:	fab2 f282 	clz	r2, r2
 800ad14:	4462      	add	r2, ip
 800ad16:	0092      	lsls	r2, r2, #2
 800ad18:	2701      	movs	r7, #1
 800ad1a:	6017      	str	r7, [r2, #0]
 800ad1c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ad20:	fab3 f383 	clz	r3, r3
 800ad24:	4463      	add	r3, ip
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800ad2c:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800ad2e:	07c8      	lsls	r0, r1, #31
 800ad30:	f57f af68 	bpl.w	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800ad34:	f7fd feb2 	bl	8008a9c <HAL_GetTick>
 800ad38:	f04f 0802 	mov.w	r8, #2
 800ad3c:	4681      	mov	r9, r0
 800ad3e:	fa98 f3a8 	rbit	r3, r8
 800ad42:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad46:	b1a3      	cbz	r3, 800ad72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800ad48:	6a2a      	ldr	r2, [r5, #32]
 800ad4a:	fa98 f3a8 	rbit	r3, r8
 800ad4e:	fab3 f383 	clz	r3, r3
 800ad52:	f003 031f 	and.w	r3, r3, #31
 800ad56:	fa07 f303 	lsl.w	r3, r7, r3
 800ad5a:	4213      	tst	r3, r2
 800ad5c:	f47f af52 	bne.w	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad60:	f7fd fe9c 	bl	8008a9c <HAL_GetTick>
 800ad64:	f242 7310 	movw	r3, #10000	; 0x2710
 800ad68:	eba0 0009 	sub.w	r0, r0, r9
 800ad6c:	4298      	cmp	r0, r3
 800ad6e:	d9e6      	bls.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800ad70:	e7bc      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x120>
 800ad72:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ad78:	e7e7      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800ad7a:	bf00      	nop
 800ad7c:	40021000 	.word	0x40021000
 800ad80:	40007000 	.word	0x40007000
 800ad84:	10908100 	.word	0x10908100

0800ad88 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800ad88:	6803      	ldr	r3, [r0, #0]
 800ad8a:	689a      	ldr	r2, [r3, #8]
 800ad8c:	04d2      	lsls	r2, r2, #19
{
 800ad8e:	b510      	push	{r4, lr}
 800ad90:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800ad92:	d50a      	bpl.n	800adaa <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	05d9      	lsls	r1, r3, #23
 800ad98:	d507      	bpl.n	800adaa <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ad9a:	f7f7 f893 	bl	8001ec4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ad9e:	6822      	ldr	r2, [r4, #0]
 800ada0:	68d3      	ldr	r3, [r2, #12]
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	f463 73c0 	orn	r3, r3, #384	; 0x180
 800ada8:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	689a      	ldr	r2, [r3, #8]
 800adae:	0492      	lsls	r2, r2, #18
 800adb0:	d50b      	bpl.n	800adca <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	059b      	lsls	r3, r3, #22
 800adb6:	d508      	bpl.n	800adca <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800adb8:	4620      	mov	r0, r4
 800adba:	f7f7 f85f 	bl	8001e7c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800adbe:	6822      	ldr	r2, [r4, #0]
 800adc0:	68d3      	ldr	r3, [r2, #12]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f463 7320 	orn	r3, r3, #640	; 0x280
 800adc8:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800adca:	4b03      	ldr	r3, [pc, #12]	; (800add8 <HAL_RTC_AlarmIRQHandler+0x50>)
 800adcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800add0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800add2:	2301      	movs	r3, #1
 800add4:	7763      	strb	r3, [r4, #29]
}
 800add6:	bd10      	pop	{r4, pc}
 800add8:	40010400 	.word	0x40010400

0800addc <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800addc:	6802      	ldr	r2, [r0, #0]
{
 800adde:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ade0:	68d3      	ldr	r3, [r2, #12]
 800ade2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ade6:	60d3      	str	r3, [r2, #12]
{
 800ade8:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800adea:	f7fd fe57 	bl	8008a9c <HAL_GetTick>
 800adee:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	069b      	lsls	r3, r3, #26
 800adf6:	d501      	bpl.n	800adfc <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800adf8:	2000      	movs	r0, #0
}
 800adfa:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800adfc:	f7fd fe4e 	bl	8008a9c <HAL_GetTick>
 800ae00:	1b40      	subs	r0, r0, r5
 800ae02:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ae06:	d9f3      	bls.n	800adf0 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800ae08:	2003      	movs	r0, #3
 800ae0a:	e7f6      	b.n	800adfa <HAL_RTC_WaitForSynchro+0x1e>

0800ae0c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae0c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ae0e:	6803      	ldr	r3, [r0, #0]
 800ae10:	68da      	ldr	r2, [r3, #12]
 800ae12:	0652      	lsls	r2, r2, #25
{
 800ae14:	4604      	mov	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ae16:	d501      	bpl.n	800ae1c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800ae18:	2000      	movs	r0, #0
}
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ae1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae20:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800ae22:	f7fd fe3b 	bl	8008a9c <HAL_GetTick>
 800ae26:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	065b      	lsls	r3, r3, #25
 800ae2e:	d4f3      	bmi.n	800ae18 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae30:	f7fd fe34 	bl	8008a9c <HAL_GetTick>
 800ae34:	1b40      	subs	r0, r0, r5
 800ae36:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ae3a:	d9f5      	bls.n	800ae28 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800ae3c:	2003      	movs	r0, #3
 800ae3e:	e7ec      	b.n	800ae1a <RTC_EnterInitMode+0xe>

0800ae40 <HAL_RTC_Init>:
{
 800ae40:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800ae42:	4604      	mov	r4, r0
 800ae44:	b1b8      	cbz	r0, 800ae76 <HAL_RTC_Init+0x36>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ae46:	7f43      	ldrb	r3, [r0, #29]
 800ae48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae4c:	b913      	cbnz	r3, 800ae54 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800ae4e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800ae50:	f7fd f9f4 	bl	800823c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae54:	2302      	movs	r3, #2
 800ae56:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	22ca      	movs	r2, #202	; 0xca
 800ae5c:	625a      	str	r2, [r3, #36]	; 0x24
 800ae5e:	2253      	movs	r2, #83	; 0x53
 800ae60:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ae62:	4620      	mov	r0, r4
 800ae64:	f7ff ffd2 	bl	800ae0c <RTC_EnterInitMode>
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	b128      	cbz	r0, 800ae7a <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae6e:	22ff      	movs	r2, #255	; 0xff
 800ae70:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ae72:	2304      	movs	r3, #4
 800ae74:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800ae76:	2501      	movs	r5, #1
 800ae78:	e02e      	b.n	800aed8 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ae7a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ae7c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ae7e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800ae82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae86:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ae88:	6862      	ldr	r2, [r4, #4]
 800ae8a:	6899      	ldr	r1, [r3, #8]
 800ae8c:	4302      	orrs	r2, r0
 800ae8e:	6960      	ldr	r0, [r4, #20]
 800ae90:	4302      	orrs	r2, r0
 800ae92:	430a      	orrs	r2, r1
 800ae94:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ae96:	68e2      	ldr	r2, [r4, #12]
 800ae98:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ae9a:	691a      	ldr	r2, [r3, #16]
 800ae9c:	68a1      	ldr	r1, [r4, #8]
 800ae9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aea2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800aea4:	68da      	ldr	r2, [r3, #12]
 800aea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aeaa:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	069b      	lsls	r3, r3, #26
 800aeb0:	d405      	bmi.n	800aebe <HAL_RTC_Init+0x7e>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7ff ff92 	bl	800addc <HAL_RTC_WaitForSynchro>
 800aeb8:	b108      	cbz	r0, 800aebe <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	e7d7      	b.n	800ae6e <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800aebe:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800aec0:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800aec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aec4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aec8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800aeca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aecc:	430a      	orrs	r2, r1
 800aece:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aed0:	22ff      	movs	r2, #255	; 0xff
 800aed2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800aed4:	2301      	movs	r3, #1
 800aed6:	7763      	strb	r3, [r4, #29]
}
 800aed8:	4628      	mov	r0, r5
 800aeda:	bd38      	pop	{r3, r4, r5, pc}

0800aedc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800aedc:	2300      	movs	r3, #0

  while (Value >= 10U)
 800aede:	2809      	cmp	r0, #9
 800aee0:	d803      	bhi.n	800aeea <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800aee2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800aee6:	b2c0      	uxtb	r0, r0
 800aee8:	4770      	bx	lr
    Value -= 10U;
 800aeea:	380a      	subs	r0, #10
    bcdhigh++;
 800aeec:	3301      	adds	r3, #1
    Value -= 10U;
 800aeee:	b2c0      	uxtb	r0, r0
 800aef0:	e7f5      	b.n	800aede <RTC_ByteToBcd2+0x2>

0800aef2 <HAL_RTC_SetTime>:
{
 800aef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800aef6:	7f03      	ldrb	r3, [r0, #28]
 800aef8:	2b01      	cmp	r3, #1
{
 800aefa:	4605      	mov	r5, r0
 800aefc:	460e      	mov	r6, r1
 800aefe:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 800af02:	d02e      	beq.n	800af62 <HAL_RTC_SetTime+0x70>
 800af04:	2301      	movs	r3, #1
 800af06:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800af08:	7747      	strb	r7, [r0, #29]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800af0a:	6801      	ldr	r1, [r0, #0]
 800af0c:	7874      	ldrb	r4, [r6, #1]
 800af0e:	7830      	ldrb	r0, [r6, #0]
 800af10:	78b7      	ldrb	r7, [r6, #2]
  if (Format == RTC_FORMAT_BIN)
 800af12:	bb4a      	cbnz	r2, 800af68 <HAL_RTC_SetTime+0x76>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800af14:	688a      	ldr	r2, [r1, #8]
 800af16:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 800af1a:	bf08      	it	eq
 800af1c:	70f2      	strbeq	r2, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800af1e:	f7ff ffdd 	bl	800aedc <RTC_ByteToBcd2>
 800af22:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800af24:	4620      	mov	r0, r4
 800af26:	f7ff ffd9 	bl	800aedc <RTC_ByteToBcd2>
 800af2a:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800af2c:	4638      	mov	r0, r7
 800af2e:	f7ff ffd5 	bl	800aedc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800af32:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800af34:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800af38:	ea42 4308 	orr.w	r3, r2, r8, lsl #16
 800af3c:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af40:	23ca      	movs	r3, #202	; 0xca
 800af42:	624b      	str	r3, [r1, #36]	; 0x24
 800af44:	2353      	movs	r3, #83	; 0x53
 800af46:	624b      	str	r3, [r1, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800af48:	4628      	mov	r0, r5
 800af4a:	f7ff ff5f 	bl	800ae0c <RTC_EnterInitMode>
 800af4e:	682a      	ldr	r2, [r5, #0]
 800af50:	4607      	mov	r7, r0
 800af52:	b1b0      	cbz	r0, 800af82 <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af54:	23ff      	movs	r3, #255	; 0xff
 800af56:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800af58:	2304      	movs	r3, #4
 800af5a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800af5c:	2300      	movs	r3, #0
 800af5e:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 800af60:	2701      	movs	r7, #1
}
 800af62:	4638      	mov	r0, r7
 800af64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800af68:	688a      	ldr	r2, [r1, #8]
 800af6a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 800af6e:	bf08      	it	eq
 800af70:	70f2      	strbeq	r2, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800af72:	0224      	lsls	r4, r4, #8
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800af74:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800af76:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800af7a:	433c      	orrs	r4, r7
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800af7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800af80:	e7de      	b.n	800af40 <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800af82:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800af86:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800af8a:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800af8c:	6893      	ldr	r3, [r2, #8]
 800af8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af92:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800af94:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 800af98:	6891      	ldr	r1, [r2, #8]
 800af9a:	4303      	orrs	r3, r0
 800af9c:	430b      	orrs	r3, r1
 800af9e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800afa0:	68d3      	ldr	r3, [r2, #12]
 800afa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afa6:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800afa8:	6893      	ldr	r3, [r2, #8]
 800afaa:	069b      	lsls	r3, r3, #26
 800afac:	d40a      	bmi.n	800afc4 <HAL_RTC_SetTime+0xd2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800afae:	4628      	mov	r0, r5
 800afb0:	f7ff ff14 	bl	800addc <HAL_RTC_WaitForSynchro>
 800afb4:	b130      	cbz	r0, 800afc4 <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	22ff      	movs	r2, #255	; 0xff
 800afba:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800afbc:	2304      	movs	r3, #4
 800afbe:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 800afc0:	772f      	strb	r7, [r5, #28]
 800afc2:	e7cd      	b.n	800af60 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	22ff      	movs	r2, #255	; 0xff
 800afc8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800afca:	2301      	movs	r3, #1
 800afcc:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800afce:	2300      	movs	r3, #0
 800afd0:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 800afd2:	e7c6      	b.n	800af62 <HAL_RTC_SetTime+0x70>

0800afd4 <HAL_RTC_SetDate>:
{
 800afd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800afd6:	7f03      	ldrb	r3, [r0, #28]
 800afd8:	2b01      	cmp	r3, #1
{
 800afda:	4604      	mov	r4, r0
 800afdc:	f04f 0602 	mov.w	r6, #2
  __HAL_LOCK(hrtc);
 800afe0:	d031      	beq.n	800b046 <HAL_RTC_SetDate+0x72>
 800afe2:	2301      	movs	r3, #1
 800afe4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800afe6:	7746      	strb	r6, [r0, #29]
                  ((uint32_t)sDate->WeekDay << 13U));
 800afe8:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800afea:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800afec:	784b      	ldrb	r3, [r1, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800afee:	788f      	ldrb	r7, [r1, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 800aff0:	036d      	lsls	r5, r5, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aff2:	2a00      	cmp	r2, #0
 800aff4:	d148      	bne.n	800b088 <HAL_RTC_SetDate+0xb4>
 800aff6:	06da      	lsls	r2, r3, #27
 800aff8:	d503      	bpl.n	800b002 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800affa:	f023 0310 	bic.w	r3, r3, #16
 800affe:	330a      	adds	r3, #10
 800b000:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b002:	f7ff ff6b 	bl	800aedc <RTC_ByteToBcd2>
 800b006:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b008:	7848      	ldrb	r0, [r1, #1]
 800b00a:	f7ff ff67 	bl	800aedc <RTC_ByteToBcd2>
 800b00e:	4601      	mov	r1, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b010:	4638      	mov	r0, r7
 800b012:	f7ff ff63 	bl	800aedc <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b016:	ea40 0205 	orr.w	r2, r0, r5
 800b01a:	ea42 4306 	orr.w	r3, r2, r6, lsl #16
 800b01e:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	22ca      	movs	r2, #202	; 0xca
 800b026:	625a      	str	r2, [r3, #36]	; 0x24
 800b028:	2253      	movs	r2, #83	; 0x53
 800b02a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b02c:	4620      	mov	r0, r4
 800b02e:	f7ff feed 	bl	800ae0c <RTC_EnterInitMode>
 800b032:	6822      	ldr	r2, [r4, #0]
 800b034:	4606      	mov	r6, r0
 800b036:	b140      	cbz	r0, 800b04a <HAL_RTC_SetDate+0x76>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b038:	23ff      	movs	r3, #255	; 0xff
 800b03a:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b03c:	2304      	movs	r3, #4
 800b03e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800b040:	2300      	movs	r3, #0
 800b042:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800b044:	2601      	movs	r6, #1
}
 800b046:	4630      	mov	r0, r6
 800b048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b04a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800b04e:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800b052:	6055      	str	r5, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b054:	68d3      	ldr	r3, [r2, #12]
 800b056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b05a:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b05c:	6893      	ldr	r3, [r2, #8]
 800b05e:	069b      	lsls	r3, r3, #26
 800b060:	d40a      	bmi.n	800b078 <HAL_RTC_SetDate+0xa4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b062:	4620      	mov	r0, r4
 800b064:	f7ff feba 	bl	800addc <HAL_RTC_WaitForSynchro>
 800b068:	b130      	cbz	r0, 800b078 <HAL_RTC_SetDate+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	22ff      	movs	r2, #255	; 0xff
 800b06e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b070:	2304      	movs	r3, #4
 800b072:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800b074:	7726      	strb	r6, [r4, #28]
 800b076:	e7e5      	b.n	800b044 <HAL_RTC_SetDate+0x70>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	22ff      	movs	r2, #255	; 0xff
 800b07c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800b07e:	2301      	movs	r3, #1
 800b080:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800b082:	2300      	movs	r3, #0
 800b084:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 800b086:	e7de      	b.n	800b046 <HAL_RTC_SetDate+0x72>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b088:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800b08c:	433d      	orrs	r5, r7
 800b08e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800b092:	e7c6      	b.n	800b022 <HAL_RTC_SetDate+0x4e>

0800b094 <HAL_RTC_SetAlarm_IT>:
{
 800b094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hrtc);
 800b098:	7f03      	ldrb	r3, [r0, #28]
 800b09a:	2b01      	cmp	r3, #1
{
 800b09c:	4604      	mov	r4, r0
 800b09e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800b0a2:	f000 8085 	beq.w	800b1b0 <HAL_RTC_SetAlarm_IT+0x11c>
 800b0a6:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b0a8:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hrtc);
 800b0aa:	7723      	strb	r3, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0ac:	7760      	strb	r0, [r4, #29]
  if (Format == RTC_FORMAT_BIN)
 800b0ae:	7808      	ldrb	r0, [r1, #0]
 800b0b0:	f891 9001 	ldrb.w	r9, [r1, #1]
 800b0b4:	f891 b002 	ldrb.w	fp, [r1, #2]
 800b0b8:	f891 8020 	ldrb.w	r8, [r1, #32]
 800b0bc:	69ce      	ldr	r6, [r1, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b0be:	68bb      	ldr	r3, [r7, #8]
  if (Format == RTC_FORMAT_BIN)
 800b0c0:	2a00      	cmp	r2, #0
 800b0c2:	d156      	bne.n	800b172 <HAL_RTC_SetAlarm_IT+0xde>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b0c4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b0c8:	bf08      	it	eq
 800b0ca:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b0cc:	f7ff ff06 	bl	800aedc <RTC_ByteToBcd2>
 800b0d0:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b0d2:	4648      	mov	r0, r9
 800b0d4:	f7ff ff02 	bl	800aedc <RTC_ByteToBcd2>
 800b0d8:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b0da:	4658      	mov	r0, fp
 800b0dc:	f7ff fefe 	bl	800aedc <RTC_ByteToBcd2>
 800b0e0:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	f7ff fefa 	bl	800aedc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b0e8:	694b      	ldr	r3, [r1, #20]
 800b0ea:	ea46 0c03 	orr.w	ip, r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b0ee:	78ce      	ldrb	r6, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b0f0:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 800b0f4:	ea4c 0202 	orr.w	r2, ip, r2
 800b0f8:	ea42 460a 	orr.w	r6, r2, sl, lsl #16
 800b0fc:	ea46 2309 	orr.w	r3, r6, r9, lsl #8
 800b100:	ea43 6500 	orr.w	r5, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b104:	698b      	ldr	r3, [r1, #24]
 800b106:	684e      	ldr	r6, [r1, #4]
 800b108:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b10a:	23ca      	movs	r3, #202	; 0xca
 800b10c:	627b      	str	r3, [r7, #36]	; 0x24
 800b10e:	2353      	movs	r3, #83	; 0x53
 800b110:	627b      	str	r3, [r7, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800b112:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b118:	68bb      	ldr	r3, [r7, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800b11a:	d14b      	bne.n	800b1b4 <HAL_RTC_SetAlarm_IT+0x120>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b11c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b120:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	f463 73c0 	orn	r3, r3, #384	; 0x180
 800b12a:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 800b12c:	f7fd fcb6 	bl	8008a9c <HAL_GetTick>
 800b130:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	68df      	ldr	r7, [r3, #12]
 800b136:	f017 0701 	ands.w	r7, r7, #1
 800b13a:	d02c      	beq.n	800b196 <HAL_RTC_SetAlarm_IT+0x102>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b13c:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b13e:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b140:	689a      	ldr	r2, [r3, #8]
 800b142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b146:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800b148:	689a      	ldr	r2, [r3, #8]
 800b14a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b14e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b150:	4b29      	ldr	r3, [pc, #164]	; (800b1f8 <HAL_RTC_SetAlarm_IT+0x164>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b158:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800b15a:	689a      	ldr	r2, [r3, #8]
 800b15c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b160:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	22ff      	movs	r2, #255	; 0xff
 800b166:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800b168:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800b16a:	2301      	movs	r3, #1
 800b16c:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 800b16e:	7720      	strb	r0, [r4, #28]
  return HAL_OK;
 800b170:	e01e      	b.n	800b1b0 <HAL_RTC_SetAlarm_IT+0x11c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b172:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b176:	bf08      	it	eq
 800b178:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b17a:	694b      	ldr	r3, [r1, #20]
 800b17c:	431e      	orrs	r6, r3
 800b17e:	ea46 060b 	orr.w	r6, r6, fp
 800b182:	ea46 4500 	orr.w	r5, r6, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b186:	78c8      	ldrb	r0, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b188:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 800b18c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800b190:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 800b194:	e7b6      	b.n	800b104 <HAL_RTC_SetAlarm_IT+0x70>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b196:	f7fd fc81 	bl	8008a9c <HAL_GetTick>
 800b19a:	eba0 0008 	sub.w	r0, r0, r8
 800b19e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b1a2:	d9c6      	bls.n	800b132 <HAL_RTC_SetAlarm_IT+0x9e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b1a8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1aa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b1ac:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800b1ae:	7727      	strb	r7, [r4, #28]
}
 800b1b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b1b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1b8:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	f463 7320 	orn	r3, r3, #640	; 0x280
 800b1c2:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 800b1c4:	f7fd fc6a 	bl	8008a9c <HAL_GetTick>
 800b1c8:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	68df      	ldr	r7, [r3, #12]
 800b1ce:	f017 0702 	ands.w	r7, r7, #2
 800b1d2:	d009      	beq.n	800b1e8 <HAL_RTC_SetAlarm_IT+0x154>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b1d4:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b1d6:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b1d8:	689a      	ldr	r2, [r3, #8]
 800b1da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1de:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b1e6:	e7b2      	b.n	800b14e <HAL_RTC_SetAlarm_IT+0xba>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b1e8:	f7fd fc58 	bl	8008a9c <HAL_GetTick>
 800b1ec:	eba0 0008 	sub.w	r0, r0, r8
 800b1f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b1f4:	d9e9      	bls.n	800b1ca <HAL_RTC_SetAlarm_IT+0x136>
 800b1f6:	e7d5      	b.n	800b1a4 <HAL_RTC_SetAlarm_IT+0x110>
 800b1f8:	40010400 	.word	0x40010400

0800b1fc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800b1fc:	0903      	lsrs	r3, r0, #4
 800b1fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 800b202:	f000 000f 	and.w	r0, r0, #15
 800b206:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800b20a:	b2c0      	uxtb	r0, r0
 800b20c:	4770      	bx	lr

0800b20e <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b20e:	6803      	ldr	r3, [r0, #0]
 800b210:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b212:	6048      	str	r0, [r1, #4]
{
 800b214:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b216:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b218:	681c      	ldr	r4, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b21a:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b21e:	f3c4 4506 	ubfx	r5, r4, #16, #7
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800b222:	f3c4 2606 	ubfx	r6, r4, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b226:	6088      	str	r0, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800b228:	f005 0340 	and.w	r3, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b22c:	f3c4 4005 	ubfx	r0, r4, #16, #6
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b230:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b234:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800b236:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b238:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800b23a:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 800b23c:	b952      	cbnz	r2, 800b254 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b23e:	f7ff ffdd 	bl	800b1fc <RTC_Bcd2ToByte>
 800b242:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b244:	4630      	mov	r0, r6
 800b246:	f7ff ffd9 	bl	800b1fc <RTC_Bcd2ToByte>
 800b24a:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b24c:	4620      	mov	r0, r4
 800b24e:	f7ff ffd5 	bl	800b1fc <RTC_Bcd2ToByte>
 800b252:	7088      	strb	r0, [r1, #2]
}
 800b254:	2000      	movs	r0, #0
 800b256:	bd70      	pop	{r4, r5, r6, pc}

0800b258 <HAL_RTC_GetDate>:
{
 800b258:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b25a:	6803      	ldr	r3, [r0, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b25e:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b262:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b266:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800b26a:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b26e:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b270:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b272:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800b274:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800b276:	b952      	cbnz	r2, 800b28e <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b278:	f7ff ffc0 	bl	800b1fc <RTC_Bcd2ToByte>
 800b27c:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b27e:	4628      	mov	r0, r5
 800b280:	f7ff ffbc 	bl	800b1fc <RTC_Bcd2ToByte>
 800b284:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b286:	4620      	mov	r0, r4
 800b288:	f7ff ffb8 	bl	800b1fc <RTC_Bcd2ToByte>
 800b28c:	7088      	strb	r0, [r1, #2]
}
 800b28e:	2000      	movs	r0, #0
 800b290:	bd38      	pop	{r3, r4, r5, pc}

0800b292 <HAL_RTC_GetAlarm>:
    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800b292:	6800      	ldr	r0, [r0, #0]
  if (Alarm == RTC_ALARM_A)
 800b294:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    sAlarm->Alarm = RTC_ALARM_B;
 800b298:	bf15      	itete	ne
 800b29a:	f44f 7200 	movne.w	r2, #512	; 0x200
    sAlarm->Alarm = RTC_ALARM_A;
 800b29e:	624a      	streq	r2, [r1, #36]	; 0x24
    sAlarm->Alarm = RTC_ALARM_B;
 800b2a0:	624a      	strne	r2, [r1, #36]	; 0x24
    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800b2a2:	69c2      	ldreq	r2, [r0, #28]
    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800b2a4:	bf18      	it	ne
 800b2a6:	6a02      	ldrne	r2, [r0, #32]
{
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800b2aa:	bf0c      	ite	eq
 800b2ac:	6c44      	ldreq	r4, [r0, #68]	; 0x44
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800b2ae:	6c84      	ldrne	r4, [r0, #72]	; 0x48
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800b2b0:	f3c2 4507 	ubfx	r5, r2, #16, #8
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800b2b4:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 800b2b8:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800b2bc:	f3c2 4005 	ubfx	r0, r2, #16, #6
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800b2c0:	f3c2 2706 	ubfx	r7, r2, #8, #7
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 800b2c4:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 800b2c8:	70cd      	strb	r5, [r1, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800b2ca:	604c      	str	r4, [r1, #4]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800b2cc:	f002 4580 	and.w	r5, r2, #1073741824	; 0x40000000
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800b2d0:	f3c2 6405 	ubfx	r4, r2, #24, #6
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800b2d4:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800b2d8:	7008      	strb	r0, [r1, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800b2da:	704f      	strb	r7, [r1, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 800b2dc:	708e      	strb	r6, [r1, #2]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800b2de:	f881 4020 	strb.w	r4, [r1, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800b2e2:	61cd      	str	r5, [r1, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800b2e4:	614a      	str	r2, [r1, #20]
  if (Format == RTC_FORMAT_BIN)
 800b2e6:	b97b      	cbnz	r3, 800b308 <HAL_RTC_GetAlarm+0x76>
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800b2e8:	f7ff ff88 	bl	800b1fc <RTC_Bcd2ToByte>
 800b2ec:	7008      	strb	r0, [r1, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	f7ff ff84 	bl	800b1fc <RTC_Bcd2ToByte>
 800b2f4:	7048      	strb	r0, [r1, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7ff ff80 	bl	800b1fc <RTC_Bcd2ToByte>
 800b2fc:	7088      	strb	r0, [r1, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7ff ff7c 	bl	800b1fc <RTC_Bcd2ToByte>
 800b304:	f881 0020 	strb.w	r0, [r1, #32]
}
 800b308:	2000      	movs	r0, #0
 800b30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b30c <SDADC_EnterInitMode>:
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800b30c:	6802      	ldr	r2, [r0, #0]
{
 800b30e:	b538      	push	{r3, r4, r5, lr}
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800b310:	6813      	ldr	r3, [r2, #0]
 800b312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b316:	6013      	str	r3, [r2, #0]
{
 800b318:	4604      	mov	r4, r0

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 800b31a:	f7fd fbbf 	bl	8008a9c <HAL_GetTick>
 800b31e:	4605      	mov	r5, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	da01      	bge.n	800b32c <SDADC_EnterInitMode+0x20>
      return HAL_TIMEOUT;
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 800b328:	2000      	movs	r0, #0
}
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 800b32c:	f7fd fbb6 	bl	8008a9c <HAL_GetTick>
 800b330:	1b40      	subs	r0, r0, r5
 800b332:	28c8      	cmp	r0, #200	; 0xc8
 800b334:	d9f4      	bls.n	800b320 <SDADC_EnterInitMode+0x14>
      return HAL_TIMEOUT;
 800b336:	2003      	movs	r0, #3
 800b338:	e7f7      	b.n	800b32a <SDADC_EnterInitMode+0x1e>

0800b33a <SDADC_ExitInitMode.isra.0>:
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800b33a:	6803      	ldr	r3, [r0, #0]
 800b33c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b340:	6003      	str	r3, [r0, #0]
}
 800b342:	4770      	bx	lr

0800b344 <SDADC_InjConvStart>:
static HAL_StatusTypeDef SDADC_InjConvStart(SDADC_HandleTypeDef* hsdadc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Initialize number of injected conversions remaining */
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800b344:	6a03      	ldr	r3, [r0, #32]
{
 800b346:	b510      	push	{r4, lr}
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800b348:	6243      	str	r3, [r0, #36]	; 0x24

  /* Check injected trigger */
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 800b34a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800b34c:	4604      	mov	r4, r0
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 800b34e:	b973      	cbnz	r3, 800b36e <SDADC_InjConvStart+0x2a>
  {
    /* Set JSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 800b350:	6802      	ldr	r2, [r0, #0]
 800b352:	6853      	ldr	r3, [r2, #4]
 800b354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b358:	6053      	str	r3, [r2, #4]
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 800b35a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b35e:	2b01      	cmp	r3, #1
 800b360:	bf0c      	ite	eq
 800b362:	2304      	moveq	r3, #4
 800b364:	2305      	movne	r3, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 800b366:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800b36a:	2000      	movs	r0, #0
 800b36c:	e006      	b.n	800b37c <SDADC_InjConvStart+0x38>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b36e:	f7ff ffcd 	bl	800b30c <SDADC_EnterInitMode>
 800b372:	b120      	cbz	r0, 800b37e <SDADC_InjConvStart+0x3a>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b374:	23ff      	movs	r3, #255	; 0xff
 800b376:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b37a:	2003      	movs	r0, #3
  }
  /* Return function status */
  return status;
}
 800b37c:	bd10      	pop	{r4, pc}
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800b37e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800b380:	6820      	ldr	r0, [r4, #0]
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800b382:	2b01      	cmp	r3, #1
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800b384:	bf0d      	iteet	eq
 800b386:	6803      	ldreq	r3, [r0, #0]
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 800b388:	6843      	ldrne	r3, [r0, #4]
 800b38a:	6b22      	ldrne	r2, [r4, #48]	; 0x30
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800b38c:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 800b390:	bf16      	itet	ne
 800b392:	4313      	orrne	r3, r2
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800b394:	6003      	streq	r3, [r0, #0]
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 800b396:	6043      	strne	r3, [r0, #4]
      SDADC_ExitInitMode(hsdadc);
 800b398:	f7ff ffcf 	bl	800b33a <SDADC_ExitInitMode.isra.0>
  if(status == HAL_OK)
 800b39c:	e7dd      	b.n	800b35a <SDADC_InjConvStart+0x16>
	...

0800b3a0 <HAL_SDADC_Init>:
{
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	2301      	movs	r3, #1
  if(hsdadc == NULL)
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d03e      	beq.n	800b428 <HAL_SDADC_Init+0x88>
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 800b3aa:	2200      	movs	r2, #0
  hsdadc->InjConvRemaining    = 1U;
 800b3ac:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 800b3b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 800b3b4:	e9c0 320c 	strd	r3, r2, [r0, #48]	; 0x30
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 800b3b8:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 800b3bc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 800b3c0:	6382      	str	r2, [r0, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 800b3c2:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_SDADC_MspInit(hsdadc);
 800b3c4:	f7fc ff5a 	bl	800827c <HAL_SDADC_MspInit>
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 800b3c8:	6823      	ldr	r3, [r4, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800b3ca:	68e0      	ldr	r0, [r4, #12]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800b3d2:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800b3d4:	6862      	ldr	r2, [r4, #4]
 800b3d6:	6819      	ldr	r1, [r3, #0]
 800b3d8:	4302      	orrs	r2, r0
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 800b3de:	685a      	ldr	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 800b3e0:	68a1      	ldr	r1, [r4, #8]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 800b3e2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b3e6:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	605a      	str	r2, [r3, #4]
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <HAL_SDADC_Init+0x8c>)
 800b3f0:	6922      	ldr	r2, [r4, #16]
 800b3f2:	6819      	ldr	r1, [r3, #0]
 800b3f4:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800b3f8:	4291      	cmp	r1, r2
 800b3fa:	d009      	beq.n	800b410 <HAL_SDADC_Init+0x70>
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 800b3fc:	6819      	ldr	r1, [r3, #0]
 800b3fe:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800b402:	6019      	str	r1, [r3, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 800b404:	6819      	ldr	r1, [r3, #0]
 800b406:	430a      	orrs	r2, r1
 800b408:	601a      	str	r2, [r3, #0]
    HAL_Delay(2U);
 800b40a:	2002      	movs	r0, #2
 800b40c:	f7fd fb4c 	bl	8008aa8 <HAL_Delay>
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 800b410:	6822      	ldr	r2, [r4, #0]
 800b412:	6853      	ldr	r3, [r2, #4]
 800b414:	f043 0301 	orr.w	r3, r3, #1
 800b418:	6053      	str	r3, [r2, #4]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 800b41a:	6893      	ldr	r3, [r2, #8]
 800b41c:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800b420:	d1fb      	bne.n	800b41a <HAL_SDADC_Init+0x7a>
  hsdadc->State = HAL_SDADC_STATE_READY;
 800b422:	2201      	movs	r2, #1
 800b424:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800b428:	4618      	mov	r0, r3
}
 800b42a:	bd10      	pop	{r4, pc}
 800b42c:	40016000 	.word	0x40016000

0800b430 <HAL_SDADC_PrepareChannelConfig>:
{
 800b430:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800b432:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b436:	2b01      	cmp	r3, #1
{
 800b438:	4606      	mov	r6, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	4615      	mov	r5, r2
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800b43e:	d117      	bne.n	800b470 <HAL_SDADC_PrepareChannelConfig+0x40>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b440:	f7ff ff64 	bl	800b30c <SDADC_EnterInitMode>
 800b444:	4601      	mov	r1, r0
 800b446:	b128      	cbz	r0, 800b454 <HAL_SDADC_PrepareChannelConfig+0x24>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b448:	23ff      	movs	r3, #255	; 0xff
 800b44a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b44e:	2103      	movs	r1, #3
}
 800b450:	4608      	mov	r0, r1
 800b452:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800b454:	e9d5 3200 	ldrd	r3, r2, [r5]
 800b458:	4313      	orrs	r3, r2
                                             ConfParamStruct->Gain | \
 800b45a:	68aa      	ldr	r2, [r5, #8]
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 800b45c:	6830      	ldr	r0, [r6, #0]
                                             ConfParamStruct->Gain | \
 800b45e:	4313      	orrs	r3, r2
                       (uint32_t)(ConfIndex << 2UL));
 800b460:	00a4      	lsls	r4, r4, #2
                                             ConfParamStruct->CommonMode | \
 800b462:	68ea      	ldr	r2, [r5, #12]
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 800b464:	3420      	adds	r4, #32
                                             ConfParamStruct->CommonMode | \
 800b466:	4313      	orrs	r3, r2
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800b468:	5103      	str	r3, [r0, r4]
      SDADC_ExitInitMode(hsdadc);
 800b46a:	f7ff ff66 	bl	800b33a <SDADC_ExitInitMode.isra.0>
 800b46e:	e7ef      	b.n	800b450 <HAL_SDADC_PrepareChannelConfig+0x20>
    status = HAL_ERROR;
 800b470:	2101      	movs	r1, #1
 800b472:	e7ed      	b.n	800b450 <HAL_SDADC_PrepareChannelConfig+0x20>

0800b474 <HAL_SDADC_AssociateChannelConfig>:
{
 800b474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800b476:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b47a:	2b01      	cmp	r3, #1
{
 800b47c:	4606      	mov	r6, r0
 800b47e:	460c      	mov	r4, r1
 800b480:	4617      	mov	r7, r2
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800b482:	d120      	bne.n	800b4c6 <HAL_SDADC_AssociateChannelConfig+0x52>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b484:	f7ff ff42 	bl	800b30c <SDADC_EnterInitMode>
 800b488:	4605      	mov	r5, r0
 800b48a:	b128      	cbz	r0, 800b498 <HAL_SDADC_AssociateChannelConfig+0x24>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b48c:	23ff      	movs	r3, #255	; 0xff
 800b48e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b492:	2503      	movs	r5, #3
}
 800b494:	4628      	mov	r0, r5
 800b496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Channel != SDADC_CHANNEL_8)
 800b498:	4b0c      	ldr	r3, [pc, #48]	; (800b4cc <HAL_SDADC_AssociateChannelConfig+0x58>)
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 800b49a:	6830      	ldr	r0, [r6, #0]
      if(Channel != SDADC_CHANNEL_8)
 800b49c:	429c      	cmp	r4, r3
 800b49e:	d010      	beq.n	800b4c2 <HAL_SDADC_AssociateChannelConfig+0x4e>
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 800b4a0:	0ba1      	lsrs	r1, r4, #14
 800b4a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b4a4:	f001 041c 	and.w	r4, r1, #28
 800b4a8:	2203      	movs	r2, #3
 800b4aa:	40a2      	lsls	r2, r4
 800b4ac:	ea23 0302 	bic.w	r3, r3, r2
 800b4b0:	6403      	str	r3, [r0, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 800b4b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b4b4:	fa07 f404 	lsl.w	r4, r7, r4
 800b4b8:	4314      	orrs	r4, r2
 800b4ba:	6404      	str	r4, [r0, #64]	; 0x40
      SDADC_ExitInitMode(hsdadc);
 800b4bc:	f7ff ff3d 	bl	800b33a <SDADC_ExitInitMode.isra.0>
 800b4c0:	e7e8      	b.n	800b494 <HAL_SDADC_AssociateChannelConfig+0x20>
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 800b4c2:	6447      	str	r7, [r0, #68]	; 0x44
 800b4c4:	e7fa      	b.n	800b4bc <HAL_SDADC_AssociateChannelConfig+0x48>
    status = HAL_ERROR;
 800b4c6:	2501      	movs	r5, #1
 800b4c8:	e7e4      	b.n	800b494 <HAL_SDADC_AssociateChannelConfig+0x20>
 800b4ca:	bf00      	nop
 800b4cc:	00080100 	.word	0x00080100

0800b4d0 <HAL_SDADC_InjectedConfigChannel>:
{
 800b4d0:	b510      	push	{r4, lr}
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 800b4d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2bfd      	cmp	r3, #253	; 0xfd
 800b4dc:	d817      	bhi.n	800b50e <HAL_SDADC_InjectedConfigChannel+0x3e>
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 800b4de:	6803      	ldr	r3, [r0, #0]
 800b4e0:	b289      	uxth	r1, r1
 800b4e2:	6159      	str	r1, [r3, #20]
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 800b4e4:	685c      	ldr	r4, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 800b4e6:	2a01      	cmp	r2, #1
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 800b4e8:	bf0c      	ite	eq
 800b4ea:	f044 0420 	orreq.w	r4, r4, #32
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 800b4ee:	f024 0420 	bicne.w	r4, r4, #32
 800b4f2:	605c      	str	r4, [r3, #4]
    hsdadc->InjectedContMode = ContinuousMode;
 800b4f4:	61c2      	str	r2, [r0, #28]
 800b4f6:	2309      	movs	r3, #9
  uint32_t nbChannels = 0UL;
 800b4f8:	2200      	movs	r2, #0
    if((tmp & 0x00000001UL) != 0UL)
 800b4fa:	07cc      	lsls	r4, r1, #31
      nbChannels++;
 800b4fc:	bf48      	it	mi
 800b4fe:	3201      	addmi	r2, #1
  for(i = 0UL ; i < 9UL ; i++)
 800b500:	3b01      	subs	r3, #1
    tmp = (uint32_t) (tmp >> 1UL);
 800b502:	ea4f 0151 	mov.w	r1, r1, lsr #1
  for(i = 0UL ; i < 9UL ; i++)
 800b506:	d1f8      	bne.n	800b4fa <HAL_SDADC_InjectedConfigChannel+0x2a>
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 800b508:	6202      	str	r2, [r0, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800b50a:	4618      	mov	r0, r3
}
 800b50c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800b50e:	2001      	movs	r0, #1
 800b510:	e7fc      	b.n	800b50c <HAL_SDADC_InjectedConfigChannel+0x3c>
	...

0800b514 <HAL_SDADC_SelectInjectedTrigger>:
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 800b514:	6802      	ldr	r2, [r0, #0]
 800b516:	4b07      	ldr	r3, [pc, #28]	; (800b534 <HAL_SDADC_SelectInjectedTrigger+0x20>)
 800b518:	429a      	cmp	r2, r3
 800b51a:	d101      	bne.n	800b520 <HAL_SDADC_SelectInjectedTrigger+0xc>
 800b51c:	2901      	cmp	r1, #1
 800b51e:	d007      	beq.n	800b530 <HAL_SDADC_SelectInjectedTrigger+0x1c>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 800b520:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800b524:	3b01      	subs	r3, #1
 800b526:	2b02      	cmp	r3, #2
 800b528:	d802      	bhi.n	800b530 <HAL_SDADC_SelectInjectedTrigger+0x1c>
    hsdadc->InjectedTrigger = Trigger;
 800b52a:	62c1      	str	r1, [r0, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 800b52c:	2000      	movs	r0, #0
 800b52e:	4770      	bx	lr
    status = HAL_ERROR;
 800b530:	2001      	movs	r0, #1
}
 800b532:	4770      	bx	lr
 800b534:	40016000 	.word	0x40016000

0800b538 <HAL_SDADC_SelectInjectedExtTrigger>:
{
 800b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b53a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b53e:	2b01      	cmp	r3, #1
{
 800b540:	4605      	mov	r5, r0
 800b542:	460f      	mov	r7, r1
 800b544:	4616      	mov	r6, r2
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b546:	d115      	bne.n	800b574 <HAL_SDADC_SelectInjectedExtTrigger+0x3c>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b548:	f7ff fee0 	bl	800b30c <SDADC_EnterInitMode>
 800b54c:	4604      	mov	r4, r0
 800b54e:	b128      	cbz	r0, 800b55c <HAL_SDADC_SelectInjectedExtTrigger+0x24>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b550:	23ff      	movs	r3, #255	; 0xff
 800b552:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b556:	2403      	movs	r4, #3
}
 800b558:	4620      	mov	r0, r4
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTSEL);
 800b55c:	6828      	ldr	r0, [r5, #0]
 800b55e:	6843      	ldr	r3, [r0, #4]
 800b560:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b564:	6043      	str	r3, [r0, #4]
      hsdadc->Instance->CR2 |= InjectedExtTrigger;
 800b566:	6843      	ldr	r3, [r0, #4]
 800b568:	433b      	orrs	r3, r7
 800b56a:	6043      	str	r3, [r0, #4]
      hsdadc->ExtTriggerEdge = ExtTriggerEdge;
 800b56c:	632e      	str	r6, [r5, #48]	; 0x30
      SDADC_ExitInitMode(hsdadc);
 800b56e:	f7ff fee4 	bl	800b33a <SDADC_ExitInitMode.isra.0>
 800b572:	e7f1      	b.n	800b558 <HAL_SDADC_SelectInjectedExtTrigger+0x20>
    status = HAL_ERROR;
 800b574:	2401      	movs	r4, #1
 800b576:	e7ef      	b.n	800b558 <HAL_SDADC_SelectInjectedExtTrigger+0x20>

0800b578 <HAL_SDADC_SelectInjectedDelay>:
{
 800b578:	b538      	push	{r3, r4, r5, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b57a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b57e:	2b01      	cmp	r3, #1
{
 800b580:	4604      	mov	r4, r0
 800b582:	460d      	mov	r5, r1
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b584:	d114      	bne.n	800b5b0 <HAL_SDADC_SelectInjectedDelay+0x38>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b586:	f7ff fec1 	bl	800b30c <SDADC_EnterInitMode>
 800b58a:	4602      	mov	r2, r0
 800b58c:	b128      	cbz	r0, 800b59a <HAL_SDADC_SelectInjectedDelay+0x22>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b58e:	23ff      	movs	r3, #255	; 0xff
 800b590:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b594:	2203      	movs	r2, #3
}
 800b596:	4610      	mov	r0, r2
 800b598:	bd38      	pop	{r3, r4, r5, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 800b59a:	6820      	ldr	r0, [r4, #0]
 800b59c:	6843      	ldr	r3, [r0, #4]
 800b59e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5a2:	6043      	str	r3, [r0, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 800b5a4:	6843      	ldr	r3, [r0, #4]
 800b5a6:	432b      	orrs	r3, r5
 800b5a8:	6043      	str	r3, [r0, #4]
      SDADC_ExitInitMode(hsdadc);
 800b5aa:	f7ff fec6 	bl	800b33a <SDADC_ExitInitMode.isra.0>
 800b5ae:	e7f2      	b.n	800b596 <HAL_SDADC_SelectInjectedDelay+0x1e>
    status = HAL_ERROR;
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	e7f0      	b.n	800b596 <HAL_SDADC_SelectInjectedDelay+0x1e>

0800b5b4 <HAL_SDADC_CalibrationStart>:
{
 800b5b4:	b538      	push	{r3, r4, r5, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b5b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b5ba:	2b01      	cmp	r3, #1
{
 800b5bc:	4604      	mov	r4, r0
 800b5be:	460d      	mov	r5, r1
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b5c0:	d11c      	bne.n	800b5fc <HAL_SDADC_CalibrationStart+0x48>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b5c2:	f7ff fea3 	bl	800b30c <SDADC_EnterInitMode>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	b128      	cbz	r0, 800b5d6 <HAL_SDADC_CalibrationStart+0x22>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b5ca:	23ff      	movs	r3, #255	; 0xff
 800b5cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b5d0:	2203      	movs	r2, #3
}
 800b5d2:	4610      	mov	r0, r2
 800b5d4:	bd38      	pop	{r3, r4, r5, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 800b5d6:	6820      	ldr	r0, [r4, #0]
 800b5d8:	6843      	ldr	r3, [r0, #4]
 800b5da:	f023 0306 	bic.w	r3, r3, #6
 800b5de:	6043      	str	r3, [r0, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 800b5e0:	6843      	ldr	r3, [r0, #4]
 800b5e2:	432b      	orrs	r3, r5
 800b5e4:	6043      	str	r3, [r0, #4]
      SDADC_ExitInitMode(hsdadc);
 800b5e6:	f7ff fea8 	bl	800b33a <SDADC_ExitInitMode.isra.0>
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 800b5ea:	6821      	ldr	r1, [r4, #0]
 800b5ec:	684b      	ldr	r3, [r1, #4]
 800b5ee:	f043 0310 	orr.w	r3, r3, #16
 800b5f2:	604b      	str	r3, [r1, #4]
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800b5fa:	e7ea      	b.n	800b5d2 <HAL_SDADC_CalibrationStart+0x1e>
    status = HAL_ERROR;
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	e7e8      	b.n	800b5d2 <HAL_SDADC_CalibrationStart+0x1e>

0800b600 <HAL_SDADC_PollForCalibEvent>:
{
 800b600:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800b602:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b606:	2b02      	cmp	r3, #2
{
 800b608:	4604      	mov	r4, r0
 800b60a:	460d      	mov	r5, r1
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800b60c:	d11a      	bne.n	800b644 <HAL_SDADC_PollForCalibEvent+0x44>
    tickstart = HAL_GetTick();  
 800b60e:	f7fd fa45 	bl	8008a9c <HAL_GetTick>
 800b612:	4606      	mov	r6, r0
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	689a      	ldr	r2, [r3, #8]
 800b618:	07d2      	lsls	r2, r2, #31
 800b61a:	d508      	bpl.n	800b62e <HAL_SDADC_PollForCalibEvent+0x2e>
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	f042 0201 	orr.w	r2, r2, #1
 800b622:	60da      	str	r2, [r3, #12]
    hsdadc->State = HAL_SDADC_STATE_READY;
 800b624:	2301      	movs	r3, #1
 800b626:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800b62a:	2000      	movs	r0, #0
}
 800b62c:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 800b62e:	1c69      	adds	r1, r5, #1
 800b630:	d0f1      	beq.n	800b616 <HAL_SDADC_PollForCalibEvent+0x16>
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 800b632:	f7fd fa33 	bl	8008a9c <HAL_GetTick>
 800b636:	1b80      	subs	r0, r0, r6
 800b638:	42a8      	cmp	r0, r5
 800b63a:	d801      	bhi.n	800b640 <HAL_SDADC_PollForCalibEvent+0x40>
 800b63c:	2d00      	cmp	r5, #0
 800b63e:	d1e9      	bne.n	800b614 <HAL_SDADC_PollForCalibEvent+0x14>
          return HAL_TIMEOUT;
 800b640:	2003      	movs	r0, #3
 800b642:	e7f3      	b.n	800b62c <HAL_SDADC_PollForCalibEvent+0x2c>
    return HAL_ERROR;
 800b644:	2001      	movs	r0, #1
 800b646:	e7f1      	b.n	800b62c <HAL_SDADC_PollForCalibEvent+0x2c>

0800b648 <HAL_SDADC_InjectedStart_DMA>:
{
 800b648:	b558      	push	{r3, r4, r6, lr}
 800b64a:	460e      	mov	r6, r1
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 800b64c:	6801      	ldr	r1, [r0, #0]
{
 800b64e:	4613      	mov	r3, r2
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 800b650:	680a      	ldr	r2, [r1, #0]
 800b652:	0392      	lsls	r2, r2, #14
{
 800b654:	4604      	mov	r4, r0
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 800b656:	d428      	bmi.n	800b6aa <HAL_SDADC_InjectedStart_DMA+0x62>
  else if((hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800b658:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b65a:	b952      	cbnz	r2, 800b672 <HAL_SDADC_InjectedStart_DMA+0x2a>
 800b65c:	69c2      	ldr	r2, [r0, #28]
 800b65e:	b942      	cbnz	r2, 800b672 <HAL_SDADC_InjectedStart_DMA+0x2a>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 800b660:	6942      	ldr	r2, [r0, #20]
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800b662:	6990      	ldr	r0, [r2, #24]
 800b664:	b910      	cbnz	r0, 800b66c <HAL_SDADC_InjectedStart_DMA+0x24>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 800b666:	6a20      	ldr	r0, [r4, #32]
 800b668:	4298      	cmp	r0, r3
 800b66a:	d31e      	bcc.n	800b6aa <HAL_SDADC_InjectedStart_DMA+0x62>
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800b66c:	6992      	ldr	r2, [r2, #24]
 800b66e:	2a20      	cmp	r2, #32
 800b670:	d01b      	beq.n	800b6aa <HAL_SDADC_InjectedStart_DMA+0x62>
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800b672:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800b676:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800b67a:	2a01      	cmp	r2, #1
 800b67c:	d115      	bne.n	800b6aa <HAL_SDADC_InjectedStart_DMA+0x62>
    hsdadc->hdma->XferCpltCallback = SDADC_DMAInjectedConvCplt;
 800b67e:	6960      	ldr	r0, [r4, #20]
 800b680:	4a0d      	ldr	r2, [pc, #52]	; (800b6b8 <HAL_SDADC_InjectedStart_DMA+0x70>)
 800b682:	6282      	str	r2, [r0, #40]	; 0x28
    hsdadc->hdma->XferErrorCallback = SDADC_DMAError;
 800b684:	4a0d      	ldr	r2, [pc, #52]	; (800b6bc <HAL_SDADC_InjectedStart_DMA+0x74>)
 800b686:	6302      	str	r2, [r0, #48]	; 0x30
    if(hsdadc->hdma->Init.Mode == DMA_CIRCULAR)
 800b688:	6982      	ldr	r2, [r0, #24]
 800b68a:	2a20      	cmp	r2, #32
      hsdadc->hdma->XferHalfCpltCallback = SDADC_DMAInjectedHalfConvCplt;
 800b68c:	bf04      	itt	eq
 800b68e:	4a0c      	ldreq	r2, [pc, #48]	; (800b6c0 <HAL_SDADC_InjectedStart_DMA+0x78>)
 800b690:	62c2      	streq	r2, [r0, #44]	; 0x2c
    hsdadc->Instance->CR1 |= SDADC_CR1_JDMAEN;
 800b692:	680a      	ldr	r2, [r1, #0]
 800b694:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b698:	f841 2b60 	str.w	r2, [r1], #96
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->JDATAR, \
 800b69c:	4632      	mov	r2, r6
 800b69e:	f7fd fe2a 	bl	80092f6 <HAL_DMA_Start_IT>
 800b6a2:	b120      	cbz	r0, 800b6ae <HAL_SDADC_InjectedStart_DMA+0x66>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b6a4:	23ff      	movs	r3, #255	; 0xff
 800b6a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b6aa:	2001      	movs	r0, #1
 800b6ac:	bd58      	pop	{r3, r4, r6, pc}
      status = SDADC_InjConvStart(hsdadc);
 800b6ae:	4620      	mov	r0, r4
}
 800b6b0:	e8bd 4058 	ldmia.w	sp!, {r3, r4, r6, lr}
      status = SDADC_InjConvStart(hsdadc);
 800b6b4:	f7ff be46 	b.w	800b344 <SDADC_InjConvStart>
 800b6b8:	0800b6d3 	.word	0x0800b6d3
 800b6bc:	0800b6df 	.word	0x0800b6df
 800b6c0:	0800b6c7 	.word	0x0800b6c7

0800b6c4 <HAL_SDADC_InjectedConvHalfCpltCallback>:
 800b6c4:	4770      	bx	lr

0800b6c6 <SDADC_DMAInjectedHalfConvCplt>:
{
 800b6c6:	b508      	push	{r3, lr}
  HAL_SDADC_InjectedConvHalfCpltCallback(hsdadc);
 800b6c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b6ca:	f7ff fffb 	bl	800b6c4 <HAL_SDADC_InjectedConvHalfCpltCallback>
}
 800b6ce:	bd08      	pop	{r3, pc}

0800b6d0 <HAL_SDADC_InjectedConvCpltCallback>:
 800b6d0:	4770      	bx	lr

0800b6d2 <SDADC_DMAInjectedConvCplt>:
{
 800b6d2:	b508      	push	{r3, lr}
  HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 800b6d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b6d6:	f7ff fffb 	bl	800b6d0 <HAL_SDADC_InjectedConvCpltCallback>
}
 800b6da:	bd08      	pop	{r3, pc}

0800b6dc <HAL_SDADC_ErrorCallback>:
 800b6dc:	4770      	bx	lr

0800b6de <SDADC_DMAError>:
{
 800b6de:	b508      	push	{r3, lr}
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800b6e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hsdadc->ErrorCode = SDADC_ERROR_DMA;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_SDADC_ErrorCallback(hsdadc);
 800b6e6:	f7ff fff9 	bl	800b6dc <HAL_SDADC_ErrorCallback>
}
 800b6ea:	bd08      	pop	{r3, pc}

0800b6ec <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800b6ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6f0:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b6f2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800b6f4:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800b6f6:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b6fe:	f7fd f9cd 	bl	8008a9c <HAL_GetTick>
 800b702:	44b8      	add	r8, r7
 800b704:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 800b708:	f7fd f9c8 	bl	8008a9c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b70c:	4b29      	ldr	r3, [pc, #164]	; (800b7b4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b70e:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2223      	movs	r2, #35	; 0x23
 800b716:	4353      	muls	r3, r2
 800b718:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 800b71a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b71c:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 800b71e:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 800b720:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800b722:	6893      	ldr	r3, [r2, #8]
 800b724:	4033      	ands	r3, r6
 800b726:	d101      	bne.n	800b72c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
    }
  }

  return HAL_OK;
 800b728:	4618      	mov	r0, r3
 800b72a:	e038      	b.n	800b79e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b72c:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg8 = *ptmpreg8;
 800b730:	bf01      	itttt	eq
 800b732:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 800b736:	b2db      	uxtbeq	r3, r3
 800b738:	f88d 3003 	strbeq.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800b73c:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 800b740:	1c7b      	adds	r3, r7, #1
 800b742:	d0ee      	beq.n	800b722 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b744:	f7fd f9aa 	bl	8008a9c <HAL_GetTick>
 800b748:	eba0 0008 	sub.w	r0, r0, r8
 800b74c:	42a0      	cmp	r0, r4
 800b74e:	d329      	bcc.n	800b7a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b750:	682b      	ldr	r3, [r5, #0]
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b758:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b75a:	686a      	ldr	r2, [r5, #4]
 800b75c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b760:	d10a      	bne.n	800b778 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
 800b762:	68aa      	ldr	r2, [r5, #8]
 800b764:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b768:	d002      	beq.n	800b770 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b76a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b76e:	d103      	bne.n	800b778 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
          __HAL_SPI_DISABLE(hspi);
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b776:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b778:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b77a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b77e:	d107      	bne.n	800b790 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          SPI_RESET_CRC(hspi);
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b78e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b790:	2301      	movs	r3, #1
 800b792:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b796:	2300      	movs	r3, #0
 800b798:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800b79c:	2003      	movs	r0, #3
}
 800b79e:	b003      	add	sp, #12
 800b7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(count == 0U)
 800b7a4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800b7a6:	2b00      	cmp	r3, #0
      count--;
 800b7a8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800b7aa:	bf08      	it	eq
 800b7ac:	2400      	moveq	r4, #0
      count--;
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	e7b5      	b.n	800b71e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 800b7b2:	bf00      	nop
 800b7b4:	20000008 	.word	0x20000008

0800b7b8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800b7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ba:	460e      	mov	r6, r1
 800b7bc:	4617      	mov	r7, r2
 800b7be:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b7c0:	f7fd f96c 	bl	8008a9c <HAL_GetTick>
 800b7c4:	4437      	add	r7, r6
 800b7c6:	1a3c      	subs	r4, r7, r0
  tmp_tickstart = HAL_GetTick();
 800b7c8:	f7fd f968 	bl	8008a9c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b7cc:	4b22      	ldr	r3, [pc, #136]	; (800b858 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 800b7d4:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b7d6:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b7d8:	682a      	ldr	r2, [r5, #0]
      count--;
 800b7da:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b7dc:	6893      	ldr	r3, [r2, #8]
 800b7de:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800b7e2:	d101      	bne.n	800b7e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
  return HAL_OK;
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	e02d      	b.n	800b844 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 800b7e8:	1c73      	adds	r3, r6, #1
 800b7ea:	d0f7      	beq.n	800b7dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b7ec:	f7fd f956 	bl	8008a9c <HAL_GetTick>
 800b7f0:	1bc0      	subs	r0, r0, r7
 800b7f2:	42a0      	cmp	r0, r4
 800b7f4:	d328      	bcc.n	800b848 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7f6:	682b      	ldr	r3, [r5, #0]
 800b7f8:	685a      	ldr	r2, [r3, #4]
 800b7fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b7fe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b800:	686a      	ldr	r2, [r5, #4]
 800b802:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b806:	d10a      	bne.n	800b81e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 800b808:	68aa      	ldr	r2, [r5, #8]
 800b80a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b80e:	d002      	beq.n	800b816 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b810:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b814:	d103      	bne.n	800b81e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b81c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b81e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b820:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b824:	d107      	bne.n	800b836 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b834:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b836:	2301      	movs	r3, #1
 800b838:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b83c:	2300      	movs	r3, #0
 800b83e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800b842:	2003      	movs	r0, #3
}
 800b844:	b003      	add	sp, #12
 800b846:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 800b848:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800b84a:	2b00      	cmp	r3, #0
      count--;
 800b84c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800b84e:	bf08      	it	eq
 800b850:	2400      	moveq	r4, #0
      count--;
 800b852:	3b01      	subs	r3, #1
 800b854:	e7c0      	b.n	800b7d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 800b856:	bf00      	nop
 800b858:	20000008 	.word	0x20000008

0800b85c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b85c:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b85e:	6842      	ldr	r2, [r0, #4]
 800b860:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800b864:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b866:	4604      	mov	r4, r0
 800b868:	460e      	mov	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b86a:	d10b      	bne.n	800b884 <SPI_EndRxTransaction+0x28>
 800b86c:	6882      	ldr	r2, [r0, #8]
 800b86e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b872:	d002      	beq.n	800b87a <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b874:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b878:	d104      	bne.n	800b884 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b87a:	6820      	ldr	r0, [r4, #0]
 800b87c:	6802      	ldr	r2, [r0, #0]
 800b87e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b882:	6002      	str	r2, [r0, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b884:	461a      	mov	r2, r3
 800b886:	4631      	mov	r1, r6
 800b888:	4620      	mov	r0, r4
 800b88a:	9301      	str	r3, [sp, #4]
 800b88c:	f7ff ff94 	bl	800b7b8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800b890:	9b01      	ldr	r3, [sp, #4]
 800b892:	4605      	mov	r5, r0
 800b894:	b128      	cbz	r0, 800b8a2 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b896:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b898:	f043 0320 	orr.w	r3, r3, #32
 800b89c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800b89e:	2503      	movs	r5, #3
 800b8a0:	e012      	b.n	800b8c8 <SPI_EndRxTransaction+0x6c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8a2:	6862      	ldr	r2, [r4, #4]
 800b8a4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b8a8:	d10e      	bne.n	800b8c8 <SPI_EndRxTransaction+0x6c>
 800b8aa:	68a2      	ldr	r2, [r4, #8]
 800b8ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b8b0:	d002      	beq.n	800b8b8 <SPI_EndRxTransaction+0x5c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b8b6:	d107      	bne.n	800b8c8 <SPI_EndRxTransaction+0x6c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8b8:	4632      	mov	r2, r6
 800b8ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f7ff ff14 	bl	800b6ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d1e6      	bne.n	800b896 <SPI_EndRxTransaction+0x3a>
    }
  }
  return HAL_OK;
}
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	b002      	add	sp, #8
 800b8cc:	bd70      	pop	{r4, r5, r6, pc}

0800b8ce <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b8ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8d0:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8d2:	9201      	str	r2, [sp, #4]
{
 800b8d4:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8d6:	460a      	mov	r2, r1
 800b8d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800b8dc:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8de:	f7ff ff05 	bl	800b6ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800b8e2:	9b01      	ldr	r3, [sp, #4]
 800b8e4:	b128      	cbz	r0, 800b8f2 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b8e8:	f043 0320 	orr.w	r3, r3, #32
 800b8ec:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b8ee:	2003      	movs	r0, #3
 800b8f0:	e010      	b.n	800b914 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	f7ff ff5d 	bl	800b7b8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	2800      	cmp	r0, #0
 800b902:	d1f0      	bne.n	800b8e6 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b904:	462a      	mov	r2, r5
 800b906:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7ff feee 	bl	800b6ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800b910:	2800      	cmp	r0, #0
 800b912:	d1e8      	bne.n	800b8e6 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 800b914:	b003      	add	sp, #12
 800b916:	bd30      	pop	{r4, r5, pc}

0800b918 <HAL_SPI_Init>:
{
 800b918:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800b91a:	4604      	mov	r4, r0
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d063      	beq.n	800b9e8 <HAL_SPI_Init+0xd0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b920:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b922:	2b00      	cmp	r3, #0
 800b924:	d15c      	bne.n	800b9e0 <HAL_SPI_Init+0xc8>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b926:	6842      	ldr	r2, [r0, #4]
 800b928:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b92c:	d000      	beq.n	800b930 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b92e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b930:	2300      	movs	r3, #0
 800b932:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b934:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b938:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b93c:	b923      	cbnz	r3, 800b948 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800b93e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800b942:	4620      	mov	r0, r4
 800b944:	f7fc fd70 	bl	8008428 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800b948:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b94a:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b94c:	2302      	movs	r3, #2
 800b94e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800b952:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b954:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800b958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b95c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b95e:	f04f 0300 	mov.w	r3, #0
 800b962:	d843      	bhi.n	800b9ec <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b964:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b968:	d000      	beq.n	800b96c <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b96a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	68a6      	ldr	r6, [r4, #8]
 800b970:	69a1      	ldr	r1, [r4, #24]
 800b972:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 800b976:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800b97a:	4333      	orrs	r3, r6
 800b97c:	6926      	ldr	r6, [r4, #16]
 800b97e:	f006 0602 	and.w	r6, r6, #2
 800b982:	4333      	orrs	r3, r6
 800b984:	6966      	ldr	r6, [r4, #20]
 800b986:	f006 0601 	and.w	r6, r6, #1
 800b98a:	4333      	orrs	r3, r6
 800b98c:	f401 7600 	and.w	r6, r1, #512	; 0x200
 800b990:	4333      	orrs	r3, r6
 800b992:	69e6      	ldr	r6, [r4, #28]
 800b994:	f006 0638 	and.w	r6, r6, #56	; 0x38
 800b998:	4333      	orrs	r3, r6
 800b99a:	6a26      	ldr	r6, [r4, #32]
 800b99c:	f006 0680 	and.w	r6, r6, #128	; 0x80
 800b9a0:	4333      	orrs	r3, r6
 800b9a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9a4:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 800b9a8:	4333      	orrs	r3, r6
 800b9aa:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b9ac:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800b9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9b0:	f006 0608 	and.w	r6, r6, #8
 800b9b4:	f003 0310 	and.w	r3, r3, #16
 800b9b8:	4333      	orrs	r3, r6
 800b9ba:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 800b9be:	0c09      	lsrs	r1, r1, #16
 800b9c0:	4318      	orrs	r0, r3
 800b9c2:	f001 0104 	and.w	r1, r1, #4
 800b9c6:	4301      	orrs	r1, r0
 800b9c8:	430d      	orrs	r5, r1
 800b9ca:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b9cc:	69d3      	ldr	r3, [r2, #28]
 800b9ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9d2:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b9d4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800b9d6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b9d8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b9da:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800b9de:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b9e0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b9e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9e6:	e7a3      	b.n	800b930 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	e7f8      	b.n	800b9de <HAL_SPI_Init+0xc6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b9ec:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b9ee:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 800b9f2:	e7b9      	b.n	800b968 <HAL_SPI_Init+0x50>

0800b9f4 <HAL_SPI_Transmit>:
{
 800b9f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9f8:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800b9fa:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800b9fe:	2b01      	cmp	r3, #1
{
 800ba00:	4604      	mov	r4, r0
 800ba02:	460d      	mov	r5, r1
 800ba04:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800ba06:	f000 80bc 	beq.w	800bb82 <HAL_SPI_Transmit+0x18e>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800ba10:	f7fd f844 	bl	8008a9c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ba14:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800ba18:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800ba1a:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800ba1c:	b2d8      	uxtb	r0, r3
 800ba1e:	f040 80ae 	bne.w	800bb7e <HAL_SPI_Transmit+0x18a>
  if ((pData == NULL) || (Size == 0U))
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	d063      	beq.n	800baee <HAL_SPI_Transmit+0xfa>
 800ba26:	f1b8 0f00 	cmp.w	r8, #0
 800ba2a:	d060      	beq.n	800baee <HAL_SPI_Transmit+0xfa>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba32:	2300      	movs	r3, #0
 800ba34:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800ba36:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 800ba3a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ba3e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ba40:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ba44:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba48:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800ba4a:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ba4c:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800ba52:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba56:	d107      	bne.n	800ba68 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 800ba58:	6833      	ldr	r3, [r6, #0]
 800ba5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba5e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800ba60:	6833      	ldr	r3, [r6, #0]
 800ba62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba66:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba68:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba6a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba6c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800ba6e:	bf5e      	ittt	pl
 800ba70:	6833      	ldrpl	r3, [r6, #0]
 800ba72:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800ba76:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba78:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba7c:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba7e:	d942      	bls.n	800bb06 <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba80:	b113      	cbz	r3, 800ba88 <HAL_SPI_Transmit+0x94>
 800ba82:	f1b8 0f01 	cmp.w	r8, #1
 800ba86:	d107      	bne.n	800ba98 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba88:	f835 3b02 	ldrh.w	r3, [r5], #2
 800ba8c:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba8e:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ba90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ba92:	3b01      	subs	r3, #1
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ba98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	b9a3      	cbnz	r3, 800bac8 <HAL_SPI_Transmit+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba9e:	464a      	mov	r2, r9
 800baa0:	4639      	mov	r1, r7
 800baa2:	4620      	mov	r0, r4
 800baa4:	f7ff ff13 	bl	800b8ce <SPI_EndRxTxTransaction>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d165      	bne.n	800bb78 <HAL_SPI_Transmit+0x184>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800baac:	68a3      	ldr	r3, [r4, #8]
 800baae:	b933      	cbnz	r3, 800babe <HAL_SPI_Transmit+0xca>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bab0:	9301      	str	r3, [sp, #4]
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	9201      	str	r2, [sp, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	9301      	str	r3, [sp, #4]
 800babc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800babe:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800bac0:	3800      	subs	r0, #0
 800bac2:	bf18      	it	ne
 800bac4:	2001      	movne	r0, #1
error:
 800bac6:	e012      	b.n	800baee <HAL_SPI_Transmit+0xfa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bac8:	6822      	ldr	r2, [r4, #0]
 800baca:	6893      	ldr	r3, [r2, #8]
 800bacc:	079d      	lsls	r5, r3, #30
 800bace:	d505      	bpl.n	800badc <HAL_SPI_Transmit+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bad2:	f833 1b02 	ldrh.w	r1, [r3], #2
 800bad6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bad8:	63a3      	str	r3, [r4, #56]	; 0x38
 800bada:	e7d9      	b.n	800ba90 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800badc:	f7fc ffde 	bl	8008a9c <HAL_GetTick>
 800bae0:	eba0 0009 	sub.w	r0, r0, r9
 800bae4:	42b8      	cmp	r0, r7
 800bae6:	d30b      	bcc.n	800bb00 <HAL_SPI_Transmit+0x10c>
 800bae8:	1c78      	adds	r0, r7, #1
 800baea:	d0d5      	beq.n	800ba98 <HAL_SPI_Transmit+0xa4>
          errorcode = HAL_TIMEOUT;
 800baec:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800baee:	2301      	movs	r3, #1
 800baf0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800baf4:	2300      	movs	r3, #0
 800baf6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800bafa:	b003      	add	sp, #12
 800bafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb00:	2f00      	cmp	r7, #0
 800bb02:	d1c9      	bne.n	800ba98 <HAL_SPI_Transmit+0xa4>
 800bb04:	e7f2      	b.n	800baec <HAL_SPI_Transmit+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb06:	b113      	cbz	r3, 800bb0e <HAL_SPI_Transmit+0x11a>
 800bb08:	f1b8 0f01 	cmp.w	r8, #1
 800bb0c:	d113      	bne.n	800bb36 <HAL_SPI_Transmit+0x142>
      if (hspi->TxXferCount > 1U)
 800bb0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d906      	bls.n	800bb24 <HAL_SPI_Transmit+0x130>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb16:	f835 3b02 	ldrh.w	r3, [r5], #2
 800bb1a:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb1c:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bb1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bb20:	3b02      	subs	r3, #2
 800bb22:	e006      	b.n	800bb32 <HAL_SPI_Transmit+0x13e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb24:	782b      	ldrb	r3, [r5, #0]
 800bb26:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 800bb28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800bb2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bb30:	3b01      	subs	r3, #1
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800bb36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d0af      	beq.n	800ba9e <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb3e:	6822      	ldr	r2, [r4, #0]
 800bb40:	6893      	ldr	r3, [r2, #8]
 800bb42:	0799      	lsls	r1, r3, #30
 800bb44:	d50c      	bpl.n	800bb60 <HAL_SPI_Transmit+0x16c>
        if (hspi->TxXferCount > 1U)
 800bb46:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800bb4a:	b289      	uxth	r1, r1
 800bb4c:	2901      	cmp	r1, #1
 800bb4e:	d904      	bls.n	800bb5a <HAL_SPI_Transmit+0x166>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb50:	f833 1b02 	ldrh.w	r1, [r3], #2
 800bb54:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb56:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb58:	e7e1      	b.n	800bb1e <HAL_SPI_Transmit+0x12a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800bb5e:	e7e3      	b.n	800bb28 <HAL_SPI_Transmit+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb60:	f7fc ff9c 	bl	8008a9c <HAL_GetTick>
 800bb64:	eba0 0009 	sub.w	r0, r0, r9
 800bb68:	42b8      	cmp	r0, r7
 800bb6a:	d302      	bcc.n	800bb72 <HAL_SPI_Transmit+0x17e>
 800bb6c:	1c7b      	adds	r3, r7, #1
 800bb6e:	d0e2      	beq.n	800bb36 <HAL_SPI_Transmit+0x142>
 800bb70:	e7bc      	b.n	800baec <HAL_SPI_Transmit+0xf8>
 800bb72:	2f00      	cmp	r7, #0
 800bb74:	d1df      	bne.n	800bb36 <HAL_SPI_Transmit+0x142>
 800bb76:	e7b9      	b.n	800baec <HAL_SPI_Transmit+0xf8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb78:	2320      	movs	r3, #32
 800bb7a:	6623      	str	r3, [r4, #96]	; 0x60
 800bb7c:	e796      	b.n	800baac <HAL_SPI_Transmit+0xb8>
    errorcode = HAL_BUSY;
 800bb7e:	2002      	movs	r0, #2
 800bb80:	e7b5      	b.n	800baee <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800bb82:	2002      	movs	r0, #2
 800bb84:	e7b9      	b.n	800bafa <HAL_SPI_Transmit+0x106>

0800bb86 <HAL_SPI_TransmitReceive>:
{
 800bb86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb8a:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800bb8c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800bb90:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 800bb94:	2b01      	cmp	r3, #1
{
 800bb96:	4604      	mov	r4, r0
 800bb98:	460d      	mov	r5, r1
 800bb9a:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800bb9c:	f000 811d 	beq.w	800bdda <HAL_SPI_TransmitReceive+0x254>
 800bba0:	2301      	movs	r3, #1
 800bba2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800bba6:	f7fc ff79 	bl	8008a9c <HAL_GetTick>
  tmp_state           = hspi->State;
 800bbaa:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800bbae:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bbb0:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 800bbb2:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800bbb4:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bbb6:	d00a      	beq.n	800bbce <HAL_SPI_TransmitReceive+0x48>
 800bbb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbbc:	f040 810b 	bne.w	800bdd6 <HAL_SPI_TransmitReceive+0x250>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bbc0:	68a2      	ldr	r2, [r4, #8]
 800bbc2:	2a00      	cmp	r2, #0
 800bbc4:	f040 8107 	bne.w	800bdd6 <HAL_SPI_TransmitReceive+0x250>
 800bbc8:	2904      	cmp	r1, #4
 800bbca:	f040 8104 	bne.w	800bdd6 <HAL_SPI_TransmitReceive+0x250>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bbce:	2d00      	cmp	r5, #0
 800bbd0:	d047      	beq.n	800bc62 <HAL_SPI_TransmitReceive+0xdc>
 800bbd2:	2e00      	cmp	r6, #0
 800bbd4:	d045      	beq.n	800bc62 <HAL_SPI_TransmitReceive+0xdc>
 800bbd6:	2f00      	cmp	r7, #0
 800bbd8:	d043      	beq.n	800bc62 <HAL_SPI_TransmitReceive+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bbda:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bbde:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bbe0:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bbe2:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bbe4:	bf1c      	itt	ne
 800bbe6:	2205      	movne	r2, #5
 800bbe8:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bbec:	6826      	ldr	r6, [r4, #0]
  hspi->RxXferSize  = Size;
 800bbee:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	6622      	str	r2, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bbf6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->RxXferCount = Size;
 800bbfa:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800bbfe:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bc00:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc04:	63a5      	str	r5, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc06:	6872      	ldr	r2, [r6, #4]
  hspi->TxXferSize  = Size;
 800bc08:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bc0a:	d801      	bhi.n	800bc10 <HAL_SPI_TransmitReceive+0x8a>
 800bc0c:	2f01      	cmp	r7, #1
 800bc0e:	d02a      	beq.n	800bc66 <HAL_SPI_TransmitReceive+0xe0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc14:	6072      	str	r2, [r6, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc16:	6832      	ldr	r2, [r6, #0]
 800bc18:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800bc1a:	bf5e      	ittt	pl
 800bc1c:	6832      	ldrpl	r2, [r6, #0]
 800bc1e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800bc22:	6032      	strpl	r2, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc24:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bc28:	d958      	bls.n	800bcdc <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc2a:	b10b      	cbz	r3, 800bc30 <HAL_SPI_TransmitReceive+0xaa>
 800bc2c:	2f01      	cmp	r7, #1
 800bc2e:	d107      	bne.n	800bc40 <HAL_SPI_TransmitReceive+0xba>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc30:	f835 3b02 	ldrh.w	r3, [r5], #2
 800bc34:	60f3      	str	r3, [r6, #12]
      hspi->TxXferCount--;
 800bc36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc38:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800bc40:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	b98b      	cbnz	r3, 800bc6c <HAL_SPI_TransmitReceive+0xe6>
 800bc48:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	b96b      	cbnz	r3, 800bc6c <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc50:	464a      	mov	r2, r9
 800bc52:	4641      	mov	r1, r8
 800bc54:	4620      	mov	r0, r4
 800bc56:	f7ff fe3a 	bl	800b8ce <SPI_EndRxTxTransaction>
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d036      	beq.n	800bccc <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc5e:	2320      	movs	r3, #32
 800bc60:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bc62:	2001      	movs	r0, #1
 800bc64:	e032      	b.n	800bccc <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bc6a:	e7d3      	b.n	800bc14 <HAL_SPI_TransmitReceive+0x8e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bc6c:	6821      	ldr	r1, [r4, #0]
 800bc6e:	688b      	ldr	r3, [r1, #8]
 800bc70:	079a      	lsls	r2, r3, #30
 800bc72:	d50d      	bpl.n	800bc90 <HAL_SPI_TransmitReceive+0x10a>
 800bc74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	b153      	cbz	r3, 800bc90 <HAL_SPI_TransmitReceive+0x10a>
 800bc7a:	b14d      	cbz	r5, 800bc90 <HAL_SPI_TransmitReceive+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bc7e:	f833 2b02 	ldrh.w	r2, [r3], #2
 800bc82:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc84:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800bc86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800bc8e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc90:	688a      	ldr	r2, [r1, #8]
 800bc92:	f012 0201 	ands.w	r2, r2, #1
 800bc96:	d00f      	beq.n	800bcb8 <HAL_SPI_TransmitReceive+0x132>
 800bc98:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	b15b      	cbz	r3, 800bcb8 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bca2:	68c9      	ldr	r1, [r1, #12]
 800bca4:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bca8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800bcaa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800bcb6:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bcb8:	f7fc fef0 	bl	8008a9c <HAL_GetTick>
 800bcbc:	eba0 0009 	sub.w	r0, r0, r9
 800bcc0:	4540      	cmp	r0, r8
 800bcc2:	d3be      	bcc.n	800bc42 <HAL_SPI_TransmitReceive+0xbc>
 800bcc4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bcc8:	d0bb      	beq.n	800bc42 <HAL_SPI_TransmitReceive+0xbc>
        errorcode = HAL_TIMEOUT;
 800bcca:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800bccc:	2301      	movs	r3, #1
 800bcce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800bcd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcdc:	b10b      	cbz	r3, 800bce2 <HAL_SPI_TransmitReceive+0x15c>
 800bcde:	2f01      	cmp	r7, #1
 800bce0:	d10b      	bne.n	800bcfa <HAL_SPI_TransmitReceive+0x174>
      if (hspi->TxXferCount > 1U)
 800bce2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d909      	bls.n	800bcfe <HAL_SPI_TransmitReceive+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcea:	f835 3b02 	ldrh.w	r3, [r5], #2
 800bcee:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount -= 2U;
 800bcf0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcf2:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bcf4:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800bcfa:	2501      	movs	r5, #1
 800bcfc:	e049      	b.n	800bd92 <HAL_SPI_TransmitReceive+0x20c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bcfe:	782b      	ldrb	r3, [r5, #0]
 800bd00:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr++;
 800bd02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd04:	3301      	adds	r3, #1
 800bd06:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800bd08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	e7f3      	b.n	800bcf6 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	6893      	ldr	r3, [r2, #8]
 800bd12:	079b      	lsls	r3, r3, #30
 800bd14:	d511      	bpl.n	800bd3a <HAL_SPI_TransmitReceive+0x1b4>
 800bd16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	b173      	cbz	r3, 800bd3a <HAL_SPI_TransmitReceive+0x1b4>
 800bd1c:	b16d      	cbz	r5, 800bd3a <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 800bd1e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800bd22:	b289      	uxth	r1, r1
 800bd24:	2901      	cmp	r1, #1
 800bd26:	d93e      	bls.n	800bda6 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd28:	f833 1b02 	ldrh.w	r1, [r3], #2
 800bd2c:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd2e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bd30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bd32:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800bd38:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd3a:	6822      	ldr	r2, [r4, #0]
 800bd3c:	6893      	ldr	r3, [r2, #8]
 800bd3e:	f013 0301 	ands.w	r3, r3, #1
 800bd42:	d01d      	beq.n	800bd80 <HAL_SPI_TransmitReceive+0x1fa>
 800bd44:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800bd48:	b289      	uxth	r1, r1
 800bd4a:	b1c9      	cbz	r1, 800bd80 <HAL_SPI_TransmitReceive+0x1fa>
        if (hspi->RxXferCount > 1U)
 800bd4c:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd50:	6c21      	ldr	r1, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 800bd52:	b280      	uxth	r0, r0
 800bd54:	2801      	cmp	r0, #1
 800bd56:	d92e      	bls.n	800bdb6 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd58:	68d0      	ldr	r0, [r2, #12]
 800bd5a:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd5e:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800bd60:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800bd64:	3902      	subs	r1, #2
 800bd66:	b289      	uxth	r1, r1
 800bd68:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800bd6c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800bd70:	b289      	uxth	r1, r1
 800bd72:	2901      	cmp	r1, #1
 800bd74:	d803      	bhi.n	800bd7e <HAL_SPI_TransmitReceive+0x1f8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bd76:	6851      	ldr	r1, [r2, #4]
 800bd78:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800bd7c:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 800bd7e:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bd80:	f7fc fe8c 	bl	8008a9c <HAL_GetTick>
 800bd84:	eba0 0009 	sub.w	r0, r0, r9
 800bd88:	4540      	cmp	r0, r8
 800bd8a:	d320      	bcc.n	800bdce <HAL_SPI_TransmitReceive+0x248>
 800bd8c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bd90:	d19b      	bne.n	800bcca <HAL_SPI_TransmitReceive+0x144>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1b9      	bne.n	800bd0e <HAL_SPI_TransmitReceive+0x188>
 800bd9a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1b4      	bne.n	800bd0e <HAL_SPI_TransmitReceive+0x188>
 800bda4:	e754      	b.n	800bc50 <HAL_SPI_TransmitReceive+0xca>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800bdaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bdac:	3301      	adds	r3, #1
 800bdae:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800bdb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	e7be      	b.n	800bd34 <HAL_SPI_TransmitReceive+0x1ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bdb6:	7b12      	ldrb	r2, [r2, #12]
 800bdb8:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 800bdba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bdbc:	3201      	adds	r2, #1
 800bdbe:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800bdc0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800bdc4:	3a01      	subs	r2, #1
 800bdc6:	b292      	uxth	r2, r2
 800bdc8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 800bdcc:	e7d7      	b.n	800bd7e <HAL_SPI_TransmitReceive+0x1f8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bdce:	f1b8 0f00 	cmp.w	r8, #0
 800bdd2:	d1de      	bne.n	800bd92 <HAL_SPI_TransmitReceive+0x20c>
 800bdd4:	e779      	b.n	800bcca <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_BUSY;
 800bdd6:	2002      	movs	r0, #2
 800bdd8:	e778      	b.n	800bccc <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 800bdda:	2002      	movs	r0, #2
 800bddc:	e77c      	b.n	800bcd8 <HAL_SPI_TransmitReceive+0x152>

0800bdde <HAL_SPI_Receive>:
{
 800bdde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bde2:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bde4:	6843      	ldr	r3, [r0, #4]
 800bde6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800bdea:	4604      	mov	r4, r0
 800bdec:	4689      	mov	r9, r1
 800bdee:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bdf0:	d10c      	bne.n	800be0c <HAL_SPI_Receive+0x2e>
 800bdf2:	6883      	ldr	r3, [r0, #8]
 800bdf4:	b953      	cbnz	r3, 800be0c <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bdf6:	2304      	movs	r3, #4
 800bdf8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	9600      	str	r6, [sp, #0]
 800be00:	460a      	mov	r2, r1
 800be02:	f7ff fec0 	bl	800bb86 <HAL_SPI_TransmitReceive>
}
 800be06:	b003      	add	sp, #12
 800be08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800be0c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800be10:	2b01      	cmp	r3, #1
 800be12:	f000 809a 	beq.w	800bf4a <HAL_SPI_Receive+0x16c>
 800be16:	2301      	movs	r3, #1
 800be18:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800be1c:	f7fc fe3e 	bl	8008a9c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800be20:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800be24:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800be26:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800be28:	b2d8      	uxtb	r0, r3
 800be2a:	f040 808c 	bne.w	800bf46 <HAL_SPI_Receive+0x168>
  if ((pData == NULL) || (Size == 0U))
 800be2e:	f1b9 0f00 	cmp.w	r9, #0
 800be32:	d06f      	beq.n	800bf14 <HAL_SPI_Receive+0x136>
 800be34:	2f00      	cmp	r7, #0
 800be36:	d06d      	beq.n	800bf14 <HAL_SPI_Receive+0x136>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be38:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800be3a:	2304      	movs	r3, #4
 800be3c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->TxISR       = NULL;
 800be40:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be44:	6625      	str	r5, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800be46:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800be48:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 800be4c:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800be4e:	87e5      	strh	r5, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be50:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be52:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be54:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800be56:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be5a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be5e:	bf8c      	ite	hi
 800be60:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be64:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
  hspi->RxXferSize  = Size;
 800be68:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be6c:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be6e:	68a3      	ldr	r3, [r4, #8]
 800be70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be74:	d107      	bne.n	800be86 <HAL_SPI_Receive+0xa8>
    __HAL_SPI_DISABLE(hspi);
 800be76:	682b      	ldr	r3, [r5, #0]
 800be78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be7c:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 800be7e:	682b      	ldr	r3, [r5, #0]
 800be80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be84:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be86:	682b      	ldr	r3, [r5, #0]
 800be88:	065f      	lsls	r7, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800be8a:	bf5e      	ittt	pl
 800be8c:	682b      	ldrpl	r3, [r5, #0]
 800be8e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800be92:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800be94:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800be98:	d923      	bls.n	800bee2 <HAL_SPI_Receive+0x104>
    while (hspi->RxXferCount > 0U)
 800be9a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	b323      	cbz	r3, 800beec <HAL_SPI_Receive+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	07d2      	lsls	r2, r2, #31
 800bea8:	d53e      	bpl.n	800bf28 <HAL_SPI_Receive+0x14a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800beaa:	68da      	ldr	r2, [r3, #12]
 800beac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800beae:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800beb2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800beb4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800beb8:	3b01      	subs	r3, #1
 800beba:	b29b      	uxth	r3, r3
 800bebc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800bec0:	e7eb      	b.n	800be9a <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	689a      	ldr	r2, [r3, #8]
 800bec6:	07d0      	lsls	r0, r2, #31
 800bec8:	d51b      	bpl.n	800bf02 <HAL_SPI_Receive+0x124>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800beca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800becc:	7b1b      	ldrb	r3, [r3, #12]
 800bece:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bed2:	3301      	adds	r3, #1
 800bed4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800bed6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800beda:	3b01      	subs	r3, #1
 800bedc:	b29b      	uxth	r3, r3
 800bede:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800bee2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1ea      	bne.n	800bec2 <HAL_SPI_Receive+0xe4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800beec:	4642      	mov	r2, r8
 800beee:	4631      	mov	r1, r6
 800bef0:	4620      	mov	r0, r4
 800bef2:	f7ff fcb3 	bl	800b85c <SPI_EndRxTransaction>
 800bef6:	bb18      	cbnz	r0, 800bf40 <HAL_SPI_Receive+0x162>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bef8:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800befa:	3800      	subs	r0, #0
 800befc:	bf18      	it	ne
 800befe:	2001      	movne	r0, #1
error :
 800bf00:	e008      	b.n	800bf14 <HAL_SPI_Receive+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf02:	f7fc fdcb 	bl	8008a9c <HAL_GetTick>
 800bf06:	eba0 0008 	sub.w	r0, r0, r8
 800bf0a:	42b0      	cmp	r0, r6
 800bf0c:	d309      	bcc.n	800bf22 <HAL_SPI_Receive+0x144>
 800bf0e:	1c71      	adds	r1, r6, #1
 800bf10:	d0e7      	beq.n	800bee2 <HAL_SPI_Receive+0x104>
          errorcode = HAL_TIMEOUT;
 800bf12:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800bf14:	2301      	movs	r3, #1
 800bf16:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800bf20:	e771      	b.n	800be06 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	d1dd      	bne.n	800bee2 <HAL_SPI_Receive+0x104>
 800bf26:	e7f4      	b.n	800bf12 <HAL_SPI_Receive+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf28:	f7fc fdb8 	bl	8008a9c <HAL_GetTick>
 800bf2c:	eba0 0008 	sub.w	r0, r0, r8
 800bf30:	42b0      	cmp	r0, r6
 800bf32:	d302      	bcc.n	800bf3a <HAL_SPI_Receive+0x15c>
 800bf34:	1c73      	adds	r3, r6, #1
 800bf36:	d0b0      	beq.n	800be9a <HAL_SPI_Receive+0xbc>
 800bf38:	e7eb      	b.n	800bf12 <HAL_SPI_Receive+0x134>
 800bf3a:	2e00      	cmp	r6, #0
 800bf3c:	d1ad      	bne.n	800be9a <HAL_SPI_Receive+0xbc>
 800bf3e:	e7e8      	b.n	800bf12 <HAL_SPI_Receive+0x134>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bf40:	2320      	movs	r3, #32
 800bf42:	6623      	str	r3, [r4, #96]	; 0x60
 800bf44:	e7d8      	b.n	800bef8 <HAL_SPI_Receive+0x11a>
    errorcode = HAL_BUSY;
 800bf46:	2002      	movs	r0, #2
 800bf48:	e7e4      	b.n	800bf14 <HAL_SPI_Receive+0x136>
  __HAL_LOCK(hspi);
 800bf4a:	2002      	movs	r0, #2
 800bf4c:	e75b      	b.n	800be06 <HAL_SPI_Receive+0x28>
	...

0800bf50 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf50:	6a03      	ldr	r3, [r0, #32]
 800bf52:	f023 0301 	bic.w	r3, r3, #1
 800bf56:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf58:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf5a:	6842      	ldr	r2, [r0, #4]
{
 800bf5c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf5e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf62:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800bf66:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf68:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800bf6a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800bf6e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf70:	4d12      	ldr	r5, [pc, #72]	; (800bfbc <TIM_OC1_SetConfig+0x6c>)
 800bf72:	42a8      	cmp	r0, r5
 800bf74:	d006      	beq.n	800bf84 <TIM_OC1_SetConfig+0x34>
 800bf76:	4e12      	ldr	r6, [pc, #72]	; (800bfc0 <TIM_OC1_SetConfig+0x70>)
 800bf78:	42b0      	cmp	r0, r6
 800bf7a:	d003      	beq.n	800bf84 <TIM_OC1_SetConfig+0x34>
 800bf7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800bf80:	42b0      	cmp	r0, r6
 800bf82:	d114      	bne.n	800bfae <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf84:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf86:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800bf8a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf8c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf8e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf92:	d006      	beq.n	800bfa2 <TIM_OC1_SetConfig+0x52>
 800bf94:	4d0a      	ldr	r5, [pc, #40]	; (800bfc0 <TIM_OC1_SetConfig+0x70>)
 800bf96:	42a8      	cmp	r0, r5
 800bf98:	d003      	beq.n	800bfa2 <TIM_OC1_SetConfig+0x52>
 800bf9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bf9e:	42a8      	cmp	r0, r5
 800bfa0:	d105      	bne.n	800bfae <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfa2:	f422 7540 	bic.w	r5, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bfa6:	e9d1 2605 	ldrd	r2, r6, [r1, #20]
 800bfaa:	4332      	orrs	r2, r6
 800bfac:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bfb0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800bfb2:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800bfb4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfb6:	6203      	str	r3, [r0, #32]
}
 800bfb8:	bd70      	pop	{r4, r5, r6, pc}
 800bfba:	bf00      	nop
 800bfbc:	40014000 	.word	0x40014000
 800bfc0:	40014400 	.word	0x40014400

0800bfc4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800bfc4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d128      	bne.n	800c01e <HAL_TIM_Base_Start+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800bfcc:	2302      	movs	r3, #2
 800bfce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfd2:	6803      	ldr	r3, [r0, #0]
 800bfd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfd8:	d016      	beq.n	800c008 <HAL_TIM_Base_Start+0x44>
 800bfda:	4a12      	ldr	r2, [pc, #72]	; (800c024 <HAL_TIM_Base_Start+0x60>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d013      	beq.n	800c008 <HAL_TIM_Base_Start+0x44>
 800bfe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d00f      	beq.n	800c008 <HAL_TIM_Base_Start+0x44>
 800bfe8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d00b      	beq.n	800c008 <HAL_TIM_Base_Start+0x44>
 800bff0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d007      	beq.n	800c008 <HAL_TIM_Base_Start+0x44>
 800bff8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d003      	beq.n	800c008 <HAL_TIM_Base_Start+0x44>
 800c000:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800c004:	4293      	cmp	r3, r2
 800c006:	d104      	bne.n	800c012 <HAL_TIM_Base_Start+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c008:	689a      	ldr	r2, [r3, #8]
 800c00a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c00e:	2a06      	cmp	r2, #6
 800c010:	d003      	beq.n	800c01a <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	f042 0201 	orr.w	r2, r2, #1
 800c018:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c01a:	2000      	movs	r0, #0
}
 800c01c:	4770      	bx	lr
    return HAL_ERROR;
 800c01e:	2001      	movs	r0, #1
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	40000400 	.word	0x40000400

0800c028 <HAL_TIM_OC_MspInit>:
 800c028:	4770      	bx	lr

0800c02a <HAL_TIM_PWM_MspInit>:
 800c02a:	4770      	bx	lr

0800c02c <HAL_TIM_IC_MspInit>:
 800c02c:	4770      	bx	lr

0800c02e <HAL_TIM_Encoder_Start>:
{
 800c02e:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c030:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c034:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c038:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c03c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c040:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c042:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c044:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c046:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 800c048:	b9c9      	cbnz	r1, 800c07e <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c04a:	2a01      	cmp	r2, #1
 800c04c:	d146      	bne.n	800c0dc <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c04e:	2d01      	cmp	r5, #1
 800c050:	d146      	bne.n	800c0e0 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c052:	2302      	movs	r3, #2
 800c054:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c058:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c05c:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c05e:	6a1a      	ldr	r2, [r3, #32]
 800c060:	f022 0201 	bic.w	r2, r2, #1
 800c064:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c066:	6a1a      	ldr	r2, [r3, #32]
 800c068:	f042 0201 	orr.w	r2, r2, #1
 800c06c:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800c06e:	6802      	ldr	r2, [r0, #0]
 800c070:	6813      	ldr	r3, [r2, #0]
 800c072:	f043 0301 	orr.w	r3, r3, #1
 800c076:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 800c07e:	2904      	cmp	r1, #4
 800c080:	d111      	bne.n	800c0a6 <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c082:	2b01      	cmp	r3, #1
 800c084:	d12a      	bne.n	800c0dc <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c086:	2c01      	cmp	r4, #1
 800c088:	d1f7      	bne.n	800c07a <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c08a:	2302      	movs	r3, #2
 800c08c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c090:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c094:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800c096:	6a1a      	ldr	r2, [r3, #32]
 800c098:	f022 0210 	bic.w	r2, r2, #16
 800c09c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c09e:	6a1a      	ldr	r2, [r3, #32]
 800c0a0:	f042 0210 	orr.w	r2, r2, #16
 800c0a4:	e7e2      	b.n	800c06c <HAL_TIM_Encoder_Start+0x3e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0a6:	2a01      	cmp	r2, #1
 800c0a8:	d118      	bne.n	800c0dc <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d118      	bne.n	800c0e0 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0ae:	2d01      	cmp	r5, #1
 800c0b0:	d1e3      	bne.n	800c07a <HAL_TIM_Encoder_Start+0x4c>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c0b2:	2c01      	cmp	r4, #1
 800c0b4:	d1e1      	bne.n	800c07a <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0bc:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0c0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0c4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c0c8:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800c0ca:	6a1a      	ldr	r2, [r3, #32]
 800c0cc:	f022 0201 	bic.w	r2, r2, #1
 800c0d0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0d2:	6a1a      	ldr	r2, [r3, #32]
 800c0d4:	f042 0201 	orr.w	r2, r2, #1
 800c0d8:	621a      	str	r2, [r3, #32]
 800c0da:	e7dc      	b.n	800c096 <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e7cc      	b.n	800c07a <HAL_TIM_Encoder_Start+0x4c>
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	e7ca      	b.n	800c07a <HAL_TIM_Encoder_Start+0x4c>

0800c0e4 <HAL_TIM_PeriodElapsedCallback>:
 800c0e4:	4770      	bx	lr

0800c0e6 <HAL_TIM_OC_DelayElapsedCallback>:
 800c0e6:	4770      	bx	lr

0800c0e8 <TIM_DMACaptureCplt>:
{
 800c0e8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c0ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c0ee:	4282      	cmp	r2, r0
 800c0f0:	d10d      	bne.n	800c10e <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c0f6:	6992      	ldr	r2, [r2, #24]
 800c0f8:	b91a      	cbnz	r2, 800c102 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800c102:	4620      	mov	r0, r4
 800c104:	f7f5 fbee 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c108:	2300      	movs	r3, #0
 800c10a:	7723      	strb	r3, [r4, #28]
}
 800c10c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c10e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c110:	4283      	cmp	r3, r0
 800c112:	d10a      	bne.n	800c12a <TIM_DMACaptureCplt+0x42>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c114:	2202      	movs	r2, #2
 800c116:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1f1      	bne.n	800c102 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c11e:	2301      	movs	r3, #1
 800c120:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c124:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c128:	e7eb      	b.n	800c102 <TIM_DMACaptureCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c12a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c12c:	4283      	cmp	r3, r0
 800c12e:	d10a      	bne.n	800c146 <TIM_DMACaptureCplt+0x5e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c130:	2204      	movs	r2, #4
 800c132:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1e3      	bne.n	800c102 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c13a:	2301      	movs	r3, #1
 800c13c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c140:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c144:	e7dd      	b.n	800c102 <TIM_DMACaptureCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c146:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c148:	4283      	cmp	r3, r0
 800c14a:	d1da      	bne.n	800c102 <TIM_DMACaptureCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c14c:	2208      	movs	r2, #8
 800c14e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1d5      	bne.n	800c102 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c156:	2301      	movs	r3, #1
 800c158:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c15c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800c160:	e7cf      	b.n	800c102 <TIM_DMACaptureCplt+0x1a>

0800c162 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800c162:	4770      	bx	lr

0800c164 <TIM_DMACaptureHalfCplt>:
{
 800c164:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c166:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c16a:	4283      	cmp	r3, r0
 800c16c:	d107      	bne.n	800c17e <TIM_DMACaptureHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c16e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c170:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c172:	4620      	mov	r0, r4
 800c174:	f7ff fff5 	bl	800c162 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c178:	2300      	movs	r3, #0
 800c17a:	7723      	strb	r3, [r4, #28]
}
 800c17c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c17e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c180:	4283      	cmp	r3, r0
 800c182:	d101      	bne.n	800c188 <TIM_DMACaptureHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c184:	2302      	movs	r3, #2
 800c186:	e7f3      	b.n	800c170 <TIM_DMACaptureHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c188:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c18a:	4283      	cmp	r3, r0
 800c18c:	d101      	bne.n	800c192 <TIM_DMACaptureHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c18e:	2304      	movs	r3, #4
 800c190:	e7ee      	b.n	800c170 <TIM_DMACaptureHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c192:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c194:	4283      	cmp	r3, r0
 800c196:	d1ec      	bne.n	800c172 <TIM_DMACaptureHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c198:	2308      	movs	r3, #8
 800c19a:	e7e9      	b.n	800c170 <TIM_DMACaptureHalfCplt+0xc>

0800c19c <HAL_TIM_PWM_PulseFinishedCallback>:
 800c19c:	4770      	bx	lr

0800c19e <HAL_TIM_TriggerCallback>:
 800c19e:	4770      	bx	lr

0800c1a0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c1a0:	6803      	ldr	r3, [r0, #0]
 800c1a2:	691a      	ldr	r2, [r3, #16]
 800c1a4:	0791      	lsls	r1, r2, #30
{
 800c1a6:	b510      	push	{r4, lr}
 800c1a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c1aa:	d50e      	bpl.n	800c1ca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	0792      	lsls	r2, r2, #30
 800c1b0:	d50b      	bpl.n	800c1ca <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c1b2:	f06f 0202 	mvn.w	r2, #2
 800c1b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	079b      	lsls	r3, r3, #30
 800c1c0:	d077      	beq.n	800c2b2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800c1c2:	f7f5 fb8f 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c1ca:	6823      	ldr	r3, [r4, #0]
 800c1cc:	691a      	ldr	r2, [r3, #16]
 800c1ce:	0750      	lsls	r0, r2, #29
 800c1d0:	d510      	bpl.n	800c1f4 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c1d2:	68da      	ldr	r2, [r3, #12]
 800c1d4:	0751      	lsls	r1, r2, #29
 800c1d6:	d50d      	bpl.n	800c1f4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c1d8:	f06f 0204 	mvn.w	r2, #4
 800c1dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c1de:	2202      	movs	r2, #2
 800c1e0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800c1e8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1ea:	d068      	beq.n	800c2be <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800c1ec:	f7f5 fb7a 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1f4:	6823      	ldr	r3, [r4, #0]
 800c1f6:	691a      	ldr	r2, [r3, #16]
 800c1f8:	0712      	lsls	r2, r2, #28
 800c1fa:	d50f      	bpl.n	800c21c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1fc:	68da      	ldr	r2, [r3, #12]
 800c1fe:	0710      	lsls	r0, r2, #28
 800c200:	d50c      	bpl.n	800c21c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c202:	f06f 0208 	mvn.w	r2, #8
 800c206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c208:	2204      	movs	r2, #4
 800c20a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c20c:	69db      	ldr	r3, [r3, #28]
 800c20e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800c210:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c212:	d05a      	beq.n	800c2ca <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c214:	f7f5 fb66 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c218:	2300      	movs	r3, #0
 800c21a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	691a      	ldr	r2, [r3, #16]
 800c220:	06d2      	lsls	r2, r2, #27
 800c222:	d510      	bpl.n	800c246 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c224:	68da      	ldr	r2, [r3, #12]
 800c226:	06d0      	lsls	r0, r2, #27
 800c228:	d50d      	bpl.n	800c246 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c22a:	f06f 0210 	mvn.w	r2, #16
 800c22e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c230:	2208      	movs	r2, #8
 800c232:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c234:	69db      	ldr	r3, [r3, #28]
 800c236:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800c23a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c23c:	d04b      	beq.n	800c2d6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800c23e:	f7f5 fb51 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c242:	2300      	movs	r3, #0
 800c244:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	691a      	ldr	r2, [r3, #16]
 800c24a:	07d1      	lsls	r1, r2, #31
 800c24c:	d508      	bpl.n	800c260 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c24e:	68da      	ldr	r2, [r3, #12]
 800c250:	07d2      	lsls	r2, r2, #31
 800c252:	d505      	bpl.n	800c260 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c254:	f06f 0201 	mvn.w	r2, #1
 800c258:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c25a:	4620      	mov	r0, r4
 800c25c:	f7ff ff42 	bl	800c0e4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c260:	6823      	ldr	r3, [r4, #0]
 800c262:	691a      	ldr	r2, [r3, #16]
 800c264:	0610      	lsls	r0, r2, #24
 800c266:	d508      	bpl.n	800c27a <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c268:	68da      	ldr	r2, [r3, #12]
 800c26a:	0611      	lsls	r1, r2, #24
 800c26c:	d505      	bpl.n	800c27a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c26e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c272:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c274:	4620      	mov	r0, r4
 800c276:	f000 fe50 	bl	800cf1a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	691a      	ldr	r2, [r3, #16]
 800c27e:	0652      	lsls	r2, r2, #25
 800c280:	d508      	bpl.n	800c294 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c282:	68da      	ldr	r2, [r3, #12]
 800c284:	0650      	lsls	r0, r2, #25
 800c286:	d505      	bpl.n	800c294 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c28c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c28e:	4620      	mov	r0, r4
 800c290:	f7ff ff85 	bl	800c19e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	691a      	ldr	r2, [r3, #16]
 800c298:	0691      	lsls	r1, r2, #26
 800c29a:	d522      	bpl.n	800c2e2 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	0692      	lsls	r2, r2, #26
 800c2a0:	d51f      	bpl.n	800c2e2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2a2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c2a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2a8:	611a      	str	r2, [r3, #16]
}
 800c2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c2ae:	f000 be33 	b.w	800cf18 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2b2:	f7ff ff18 	bl	800c0e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f7ff ff70 	bl	800c19c <HAL_TIM_PWM_PulseFinishedCallback>
 800c2bc:	e783      	b.n	800c1c6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2be:	f7ff ff12 	bl	800c0e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f7ff ff6a 	bl	800c19c <HAL_TIM_PWM_PulseFinishedCallback>
 800c2c8:	e792      	b.n	800c1f0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2ca:	f7ff ff0c 	bl	800c0e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f7ff ff64 	bl	800c19c <HAL_TIM_PWM_PulseFinishedCallback>
 800c2d4:	e7a0      	b.n	800c218 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2d6:	f7ff ff06 	bl	800c0e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f7ff ff5e 	bl	800c19c <HAL_TIM_PWM_PulseFinishedCallback>
 800c2e0:	e7af      	b.n	800c242 <HAL_TIM_IRQHandler+0xa2>
}
 800c2e2:	bd10      	pop	{r4, pc}

0800c2e4 <HAL_TIM_ErrorCallback>:
 800c2e4:	4770      	bx	lr

0800c2e6 <TIM_DMAError>:
{
 800c2e6:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ec:	4283      	cmp	r3, r0
 800c2ee:	d109      	bne.n	800c304 <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c2f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f7ff fff3 	bl	800c2e4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2fe:	2300      	movs	r3, #0
 800c300:	7723      	strb	r3, [r4, #28]
}
 800c302:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c304:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c306:	4283      	cmp	r3, r0
 800c308:	d105      	bne.n	800c316 <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c30a:	2302      	movs	r3, #2
 800c30c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c30e:	2301      	movs	r3, #1
 800c310:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c314:	e7f0      	b.n	800c2f8 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c318:	4283      	cmp	r3, r0
 800c31a:	f04f 0301 	mov.w	r3, #1
 800c31e:	d104      	bne.n	800c32a <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c320:	2204      	movs	r2, #4
 800c322:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c324:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c328:	e7e6      	b.n	800c2f8 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c32a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c32c:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c32e:	bf03      	ittte	eq
 800c330:	2208      	moveq	r2, #8
 800c332:	7722      	strbeq	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c334:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->State = HAL_TIM_STATE_READY;
 800c338:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 800c33c:	e7dc      	b.n	800c2f8 <TIM_DMAError+0x12>
	...

0800c340 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c340:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800c344:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c346:	d00e      	beq.n	800c366 <TIM_Base_SetConfig+0x26>
 800c348:	4a2c      	ldr	r2, [pc, #176]	; (800c3fc <TIM_Base_SetConfig+0xbc>)
 800c34a:	4290      	cmp	r0, r2
 800c34c:	d00b      	beq.n	800c366 <TIM_Base_SetConfig+0x26>
 800c34e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c352:	4290      	cmp	r0, r2
 800c354:	d007      	beq.n	800c366 <TIM_Base_SetConfig+0x26>
 800c356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c35a:	4290      	cmp	r0, r2
 800c35c:	d003      	beq.n	800c366 <TIM_Base_SetConfig+0x26>
 800c35e:	f502 32a8 	add.w	r2, r2, #86016	; 0x15000
 800c362:	4290      	cmp	r0, r2
 800c364:	d112      	bne.n	800c38c <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 800c366:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c36c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 800c370:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c374:	d025      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c376:	4a21      	ldr	r2, [pc, #132]	; (800c3fc <TIM_Base_SetConfig+0xbc>)
 800c378:	4290      	cmp	r0, r2
 800c37a:	d022      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c37c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c380:	4290      	cmp	r0, r2
 800c382:	d01e      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c388:	4290      	cmp	r0, r2
 800c38a:	d01a      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c38c:	4a1c      	ldr	r2, [pc, #112]	; (800c400 <TIM_Base_SetConfig+0xc0>)
 800c38e:	4290      	cmp	r0, r2
 800c390:	d017      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c396:	4290      	cmp	r0, r2
 800c398:	d013      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c39a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c39e:	4290      	cmp	r0, r2
 800c3a0:	d00f      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c3a2:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800c3a6:	4290      	cmp	r0, r2
 800c3a8:	d00b      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c3aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c3ae:	4290      	cmp	r0, r2
 800c3b0:	d007      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c3b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c3b6:	4290      	cmp	r0, r2
 800c3b8:	d003      	beq.n	800c3c2 <TIM_Base_SetConfig+0x82>
 800c3ba:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800c3be:	4290      	cmp	r0, r2
 800c3c0:	d103      	bne.n	800c3ca <TIM_Base_SetConfig+0x8a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3c2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3ca:	694a      	ldr	r2, [r1, #20]
 800c3cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c3d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3d4:	688b      	ldr	r3, [r1, #8]
 800c3d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c3d8:	680b      	ldr	r3, [r1, #0]
 800c3da:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3dc:	4b09      	ldr	r3, [pc, #36]	; (800c404 <TIM_Base_SetConfig+0xc4>)
 800c3de:	4298      	cmp	r0, r3
 800c3e0:	d007      	beq.n	800c3f2 <TIM_Base_SetConfig+0xb2>
 800c3e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3e6:	4298      	cmp	r0, r3
 800c3e8:	d003      	beq.n	800c3f2 <TIM_Base_SetConfig+0xb2>
 800c3ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3ee:	4298      	cmp	r0, r3
 800c3f0:	d101      	bne.n	800c3f6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
 800c3f2:	690b      	ldr	r3, [r1, #16]
 800c3f4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	6143      	str	r3, [r0, #20]
}
 800c3fa:	4770      	bx	lr
 800c3fc:	40000400 	.word	0x40000400
 800c400:	40001800 	.word	0x40001800
 800c404:	40014000 	.word	0x40014000

0800c408 <HAL_TIM_Base_Init>:
{
 800c408:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c40a:	4604      	mov	r4, r0
 800c40c:	b330      	cbz	r0, 800c45c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c40e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c412:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c416:	b91b      	cbnz	r3, 800c420 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c418:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c41c:	f7fc f84e 	bl	80084bc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c420:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c422:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c424:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c428:	1d21      	adds	r1, r4, #4
 800c42a:	f7ff ff89 	bl	800c340 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c42e:	2301      	movs	r3, #1
 800c430:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c434:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c436:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c43a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c43e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c442:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c446:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c44a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c44e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c452:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c45a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c45c:	2001      	movs	r0, #1
 800c45e:	e7fc      	b.n	800c45a <HAL_TIM_Base_Init+0x52>

0800c460 <HAL_TIM_OC_Init>:
{
 800c460:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c462:	4604      	mov	r4, r0
 800c464:	b330      	cbz	r0, 800c4b4 <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c466:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c46a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c46e:	b91b      	cbnz	r3, 800c478 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c470:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800c474:	f7ff fdd8 	bl	800c028 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c478:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c47a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c47c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c480:	1d21      	adds	r1, r4, #4
 800c482:	f7ff ff5d 	bl	800c340 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c486:	2301      	movs	r3, #1
 800c488:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c48c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c48e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c492:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c496:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c49a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c49e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c4a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4a6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c4aa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c4ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c4b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	e7fc      	b.n	800c4b2 <HAL_TIM_OC_Init+0x52>

0800c4b8 <HAL_TIM_PWM_Init>:
{
 800c4b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	b330      	cbz	r0, 800c50c <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c4be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c4c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c4c6:	b91b      	cbnz	r3, 800c4d0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c4c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c4cc:	f7ff fdad 	bl	800c02a <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4d2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4d8:	1d21      	adds	r1, r4, #4
 800c4da:	f7ff ff31 	bl	800c340 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c4e4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c4ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c4ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c4f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c4fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c502:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c506:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c50a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c50c:	2001      	movs	r0, #1
 800c50e:	e7fc      	b.n	800c50a <HAL_TIM_PWM_Init+0x52>

0800c510 <HAL_TIM_IC_Init>:
{
 800c510:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c512:	4604      	mov	r4, r0
 800c514:	b330      	cbz	r0, 800c564 <HAL_TIM_IC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c516:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c51a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c51e:	b91b      	cbnz	r3, 800c528 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c520:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800c524:	f7ff fd82 	bl	800c02c <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c528:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c52a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c52c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c530:	1d21      	adds	r1, r4, #4
 800c532:	f7ff ff05 	bl	800c340 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c536:	2301      	movs	r3, #1
 800c538:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c53c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c53e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c542:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c546:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c54a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c54e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c556:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c55a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c55e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c562:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c564:	2001      	movs	r0, #1
 800c566:	e7fc      	b.n	800c562 <HAL_TIM_IC_Init+0x52>

0800c568 <HAL_TIM_Encoder_Init>:
{
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	460d      	mov	r5, r1
  if (htim == NULL)
 800c56c:	4604      	mov	r4, r0
 800c56e:	2800      	cmp	r0, #0
 800c570:	d04d      	beq.n	800c60e <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c572:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c576:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c57a:	b91b      	cbnz	r3, 800c584 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800c57c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800c580:	f7fc f8bc 	bl	80086fc <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c584:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800c586:	2302      	movs	r3, #2
 800c588:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c58c:	f851 0b04 	ldr.w	r0, [r1], #4
 800c590:	6883      	ldr	r3, [r0, #8]
 800c592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c596:	f023 0307 	bic.w	r3, r3, #7
 800c59a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c59c:	f7ff fed0 	bl	800c340 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800c5a0:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800c5a2:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 800c5a4:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800c5a6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5a8:	68a9      	ldr	r1, [r5, #8]
  tmpccer = htim->Instance->CCER;
 800c5aa:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800c5ac:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5ae:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c5b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5b4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c5b8:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5bc:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c5be:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5c2:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c5c4:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5c6:	011b      	lsls	r3, r3, #4
 800c5c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c5cc:	68e9      	ldr	r1, [r5, #12]
 800c5ce:	430b      	orrs	r3, r1
 800c5d0:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c5d2:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5d6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800c5da:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5dc:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c5de:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5e2:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 800c5e4:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5e6:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800c5ea:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5ec:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5ee:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800c5f0:	6207      	str	r7, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5f2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c5f6:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5fc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c600:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800c608:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800c60e:	2001      	movs	r0, #1
 800c610:	e7fc      	b.n	800c60c <HAL_TIM_Encoder_Init+0xa4>
	...

0800c614 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c614:	6a03      	ldr	r3, [r0, #32]
 800c616:	f023 0310 	bic.w	r3, r3, #16
 800c61a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c61c:	6a03      	ldr	r3, [r0, #32]
{
 800c61e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800c620:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c622:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c624:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c626:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c62a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c62e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800c630:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c634:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c638:	4d0b      	ldr	r5, [pc, #44]	; (800c668 <TIM_OC2_SetConfig+0x54>)
 800c63a:	42a8      	cmp	r0, r5
 800c63c:	d007      	beq.n	800c64e <TIM_OC2_SetConfig+0x3a>
 800c63e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c642:	42a8      	cmp	r0, r5
 800c644:	d003      	beq.n	800c64e <TIM_OC2_SetConfig+0x3a>
 800c646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c64a:	42a8      	cmp	r0, r5
 800c64c:	d106      	bne.n	800c65c <TIM_OC2_SetConfig+0x48>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c64e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c652:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c656:	4335      	orrs	r5, r6
 800c658:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800c65c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c65e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c660:	684a      	ldr	r2, [r1, #4]
 800c662:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800c664:	6203      	str	r3, [r0, #32]
}
 800c666:	bd70      	pop	{r4, r5, r6, pc}
 800c668:	40014000 	.word	0x40014000

0800c66c <HAL_TIM_OC_ConfigChannel>:
{
 800c66c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800c66e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c672:	2b01      	cmp	r3, #1
{
 800c674:	4605      	mov	r5, r0
 800c676:	460e      	mov	r6, r1
  __HAL_LOCK(htim);
 800c678:	d045      	beq.n	800c706 <HAL_TIM_OC_ConfigChannel+0x9a>
 800c67a:	2001      	movs	r0, #1
  switch (Channel)
 800c67c:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800c67e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 800c682:	d029      	beq.n	800c6d8 <HAL_TIM_OC_ConfigChannel+0x6c>
 800c684:	d806      	bhi.n	800c694 <HAL_TIM_OC_ConfigChannel+0x28>
 800c686:	b1f2      	cbz	r2, 800c6c6 <HAL_TIM_OC_ConfigChannel+0x5a>
 800c688:	2a04      	cmp	r2, #4
 800c68a:	d021      	beq.n	800c6d0 <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_UNLOCK(htim);
 800c68c:	2300      	movs	r3, #0
 800c68e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800c692:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800c694:	2a0c      	cmp	r2, #12
 800c696:	d1f9      	bne.n	800c68c <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c698:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c69a:	6834      	ldr	r4, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c69c:	6a1a      	ldr	r2, [r3, #32]
 800c69e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c6a2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800c6a4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800c6a6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800c6a8:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6aa:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6ae:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6b2:	68b4      	ldr	r4, [r6, #8]
  TIMx->CR2 = tmpcr2;
 800c6b4:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800c6b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  TIMx->CCMR2 = tmpccmrx;
 800c6ba:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800c6bc:	6871      	ldr	r1, [r6, #4]
 800c6be:	6419      	str	r1, [r3, #64]	; 0x40
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6c0:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 800c6c4:	e01d      	b.n	800c702 <HAL_TIM_OC_ConfigChannel+0x96>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c6c6:	6828      	ldr	r0, [r5, #0]
 800c6c8:	f7ff fc42 	bl	800bf50 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800c6cc:	2000      	movs	r0, #0
}
 800c6ce:	e7dd      	b.n	800c68c <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c6d0:	6828      	ldr	r0, [r5, #0]
 800c6d2:	f7ff ff9f 	bl	800c614 <TIM_OC2_SetConfig>
      break;
 800c6d6:	e7f9      	b.n	800c6cc <HAL_TIM_OC_ConfigChannel+0x60>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6d8:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 800c6da:	6834      	ldr	r4, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6dc:	6a1a      	ldr	r2, [r3, #32]
 800c6de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c6e2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800c6e4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800c6e6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800c6e8:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6ea:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c6ee:	4321      	orrs	r1, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c6f0:	68b4      	ldr	r4, [r6, #8]
  TIMx->CR2 = tmpcr2;
 800c6f2:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 800c6f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 800c6f8:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800c6fa:	6871      	ldr	r1, [r6, #4]
 800c6fc:	63d9      	str	r1, [r3, #60]	; 0x3c
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c6fe:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  TIMx->CCER = tmpccer;
 800c702:	621a      	str	r2, [r3, #32]
 800c704:	e7e2      	b.n	800c6cc <HAL_TIM_OC_ConfigChannel+0x60>
  __HAL_LOCK(htim);
 800c706:	2002      	movs	r0, #2
 800c708:	e7c3      	b.n	800c692 <HAL_TIM_OC_ConfigChannel+0x26>

0800c70a <HAL_TIM_PWM_ConfigChannel>:
{
 800c70a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800c70c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c710:	2b01      	cmp	r3, #1
{
 800c712:	4606      	mov	r6, r0
 800c714:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800c716:	d078      	beq.n	800c80a <HAL_TIM_PWM_ConfigChannel+0x100>
 800c718:	2001      	movs	r0, #1
  switch (Channel)
 800c71a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800c71c:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
  switch (Channel)
 800c720:	d050      	beq.n	800c7c4 <HAL_TIM_PWM_ConfigChannel+0xba>
 800c722:	d806      	bhi.n	800c732 <HAL_TIM_PWM_ConfigChannel+0x28>
 800c724:	b35a      	cbz	r2, 800c77e <HAL_TIM_PWM_ConfigChannel+0x74>
 800c726:	2a04      	cmp	r2, #4
 800c728:	d03b      	beq.n	800c7a2 <HAL_TIM_PWM_ConfigChannel+0x98>
  __HAL_UNLOCK(htim);
 800c72a:	2300      	movs	r3, #0
 800c72c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
}
 800c730:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800c732:	2a0c      	cmp	r2, #12
 800c734:	d1f9      	bne.n	800c72a <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c736:	6833      	ldr	r3, [r6, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c738:	682c      	ldr	r4, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c73a:	6a1a      	ldr	r2, [r3, #32]
 800c73c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c740:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800c742:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800c744:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800c746:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c748:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c74c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c750:	68ac      	ldr	r4, [r5, #8]
  TIMx->CR2 = tmpcr2;
 800c752:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800c754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  TIMx->CCMR2 = tmpccmrx;
 800c758:	61d9      	str	r1, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c75a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 800c75e:	6869      	ldr	r1, [r5, #4]
 800c760:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800c762:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c764:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c766:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c76c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c76e:	69da      	ldr	r2, [r3, #28]
 800c770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c776:	69da      	ldr	r2, [r3, #28]
 800c778:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c77c:	e043      	b.n	800c806 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c77e:	6830      	ldr	r0, [r6, #0]
 800c780:	f7ff fbe6 	bl	800bf50 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c784:	6833      	ldr	r3, [r6, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c786:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c788:	699a      	ldr	r2, [r3, #24]
 800c78a:	f042 0208 	orr.w	r2, r2, #8
 800c78e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c790:	699a      	ldr	r2, [r3, #24]
 800c792:	f022 0204 	bic.w	r2, r2, #4
 800c796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c798:	699a      	ldr	r2, [r3, #24]
 800c79a:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c79c:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800c79e:	2000      	movs	r0, #0
      break;
 800c7a0:	e7c3      	b.n	800c72a <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7a2:	6830      	ldr	r0, [r6, #0]
 800c7a4:	f7ff ff36 	bl	800c614 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7a8:	6833      	ldr	r3, [r6, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c7aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7ac:	699a      	ldr	r2, [r3, #24]
 800c7ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c7b4:	699a      	ldr	r2, [r3, #24]
 800c7b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c7bc:	699a      	ldr	r2, [r3, #24]
 800c7be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c7c2:	e7eb      	b.n	800c79c <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7c4:	6833      	ldr	r3, [r6, #0]
  tmpccmrx |= OC_Config->OCMode;
 800c7c6:	682c      	ldr	r4, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7c8:	6a1a      	ldr	r2, [r3, #32]
 800c7ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7ce:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800c7d0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800c7d2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800c7d4:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7d6:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c7da:	4321      	orrs	r1, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7dc:	68ac      	ldr	r4, [r5, #8]
  TIMx->CR2 = tmpcr2;
 800c7de:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 800c7e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 800c7e4:	61d9      	str	r1, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7e6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 800c7ea:	6869      	ldr	r1, [r5, #4]
 800c7ec:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800c7ee:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c7f0:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c7f2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c7f4:	f042 0208 	orr.w	r2, r2, #8
 800c7f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c7fa:	69da      	ldr	r2, [r3, #28]
 800c7fc:	f022 0204 	bic.w	r2, r2, #4
 800c800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c802:	69da      	ldr	r2, [r3, #28]
 800c804:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c806:	61da      	str	r2, [r3, #28]
 800c808:	e7c9      	b.n	800c79e <HAL_TIM_PWM_ConfigChannel+0x94>
  __HAL_LOCK(htim);
 800c80a:	2002      	movs	r0, #2
 800c80c:	e790      	b.n	800c730 <HAL_TIM_PWM_ConfigChannel+0x26>
	...

0800c810 <TIM_TI1_SetConfig>:
{
 800c810:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c812:	6a04      	ldr	r4, [r0, #32]
 800c814:	f024 0401 	bic.w	r4, r4, #1
 800c818:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c81a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpccmr1 = TIMx->CCMR1;
 800c81e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800c820:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c822:	d025      	beq.n	800c870 <TIM_TI1_SetConfig+0x60>
 800c824:	4e14      	ldr	r6, [pc, #80]	; (800c878 <TIM_TI1_SetConfig+0x68>)
 800c826:	42b0      	cmp	r0, r6
 800c828:	d022      	beq.n	800c870 <TIM_TI1_SetConfig+0x60>
 800c82a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c82e:	42b0      	cmp	r0, r6
 800c830:	d01e      	beq.n	800c870 <TIM_TI1_SetConfig+0x60>
 800c832:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c836:	42b0      	cmp	r0, r6
 800c838:	d01a      	beq.n	800c870 <TIM_TI1_SetConfig+0x60>
 800c83a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800c83e:	42b0      	cmp	r0, r6
 800c840:	d016      	beq.n	800c870 <TIM_TI1_SetConfig+0x60>
 800c842:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800c846:	42b0      	cmp	r0, r6
 800c848:	d012      	beq.n	800c870 <TIM_TI1_SetConfig+0x60>
 800c84a:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 800c84e:	42b0      	cmp	r0, r6
 800c850:	d00e      	beq.n	800c870 <TIM_TI1_SetConfig+0x60>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c852:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c856:	011b      	lsls	r3, r3, #4
 800c858:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c85a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c85e:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c860:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c864:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c868:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 800c86a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800c86c:	6201      	str	r1, [r0, #32]
}
 800c86e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c870:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800c874:	4322      	orrs	r2, r4
 800c876:	e7ee      	b.n	800c856 <TIM_TI1_SetConfig+0x46>
 800c878:	40000400 	.word	0x40000400

0800c87c <HAL_TIM_IC_ConfigChannel>:
{
 800c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800c87e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c882:	2b01      	cmp	r3, #1
{
 800c884:	4605      	mov	r5, r0
 800c886:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 800c888:	f000 8089 	beq.w	800c99e <HAL_TIM_IC_ConfigChannel+0x122>
 800c88c:	2001      	movs	r0, #1
 800c88e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800c892:	b99a      	cbnz	r2, 800c8bc <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI1_SetConfig(htim->Instance,
 800c894:	68cb      	ldr	r3, [r1, #12]
 800c896:	6828      	ldr	r0, [r5, #0]
 800c898:	e9d1 1200 	ldrd	r1, r2, [r1]
 800c89c:	f7ff ffb8 	bl	800c810 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c8a0:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c8a2:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c8a4:	699a      	ldr	r2, [r3, #24]
 800c8a6:	f022 020c 	bic.w	r2, r2, #12
 800c8aa:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c8ac:	699a      	ldr	r2, [r3, #24]
 800c8ae:	430a      	orrs	r2, r1
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c8b0:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800c8b2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800c8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800c8bc:	2a04      	cmp	r2, #4
 800c8be:	d123      	bne.n	800c908 <HAL_TIM_IC_ConfigChannel+0x8c>
    TIM_TI2_SetConfig(htim->Instance,
 800c8c0:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8c2:	6a1e      	ldr	r6, [r3, #32]
 800c8c4:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance,
 800c8c8:	e9d1 2700 	ldrd	r2, r7, [r1]
 800c8cc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8ce:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8d0:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 800c8d2:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c8d4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c8d8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c8dc:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8de:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c8e2:	b289      	uxth	r1, r1
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c8e4:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c8e6:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c8e8:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8ec:	f026 00a0 	bic.w	r0, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c8f0:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800c8f2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8f4:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c8f6:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c8f8:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c8fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c8fe:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c900:	699a      	ldr	r2, [r3, #24]
 800c902:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c906:	e7d3      	b.n	800c8b0 <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_3)
 800c908:	2a08      	cmp	r2, #8
 800c90a:	d122      	bne.n	800c952 <HAL_TIM_IC_ConfigChannel+0xd6>
    TIM_TI3_SetConfig(htim->Instance,
 800c90c:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c90e:	6a1e      	ldr	r6, [r3, #32]
 800c910:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800c914:	e9d1 2000 	ldrd	r2, r0, [r1]
 800c918:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c91a:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c91c:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 800c91e:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c920:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800c924:	4338      	orrs	r0, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c926:	0109      	lsls	r1, r1, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c928:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c92c:	b2c9      	uxtb	r1, r1
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c92e:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c930:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c932:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c936:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c93a:	4302      	orrs	r2, r0
  TIMx->CCMR2 = tmpccmr2;
 800c93c:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 800c93e:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c940:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c942:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c944:	f022 020c 	bic.w	r2, r2, #12
 800c948:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c94a:	69da      	ldr	r2, [r3, #28]
 800c94c:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c94e:	61da      	str	r2, [r3, #28]
 800c950:	e7af      	b.n	800c8b2 <HAL_TIM_IC_ConfigChannel+0x36>
  else if (Channel == TIM_CHANNEL_4)
 800c952:	2a0c      	cmp	r2, #12
 800c954:	d1ae      	bne.n	800c8b4 <HAL_TIM_IC_ConfigChannel+0x38>
    TIM_TI4_SetConfig(htim->Instance,
 800c956:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c958:	6a1e      	ldr	r6, [r3, #32]
 800c95a:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800c95e:	e9d1 2700 	ldrd	r2, r7, [r1]
 800c962:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c964:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c966:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 800c968:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c96a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c96e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c972:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c974:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c978:	b289      	uxth	r1, r1
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c97a:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c97c:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c97e:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c982:	f426 4020 	bic.w	r0, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c986:	4302      	orrs	r2, r0
  TIMx->CCMR2 = tmpccmr2;
 800c988:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c98a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c98c:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c98e:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c990:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c994:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c996:	69da      	ldr	r2, [r3, #28]
 800c998:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c99c:	e7d7      	b.n	800c94e <HAL_TIM_IC_ConfigChannel+0xd2>
  __HAL_LOCK(htim);
 800c99e:	2002      	movs	r0, #2
 800c9a0:	e78b      	b.n	800c8ba <HAL_TIM_IC_ConfigChannel+0x3e>

0800c9a2 <TIM_ETR_SetConfig>:
{
 800c9a2:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 800c9a4:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9a6:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9a8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9ac:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800c9b0:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 800c9b2:	6083      	str	r3, [r0, #8]
}
 800c9b4:	bd10      	pop	{r4, pc}

0800c9b6 <HAL_TIM_ConfigClockSource>:
{
 800c9b6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800c9b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c9bc:	2b01      	cmp	r3, #1
{
 800c9be:	4604      	mov	r4, r0
 800c9c0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800c9c4:	f000 8091 	beq.w	800caea <HAL_TIM_ConfigClockSource+0x134>
 800c9c8:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800c9ce:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800c9d2:	6800      	ldr	r0, [r0, #0]
 800c9d4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800c9de:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800c9e0:	680b      	ldr	r3, [r1, #0]
 800c9e2:	2b60      	cmp	r3, #96	; 0x60
 800c9e4:	d052      	beq.n	800ca8c <HAL_TIM_ConfigClockSource+0xd6>
 800c9e6:	d833      	bhi.n	800ca50 <HAL_TIM_ConfigClockSource+0x9a>
 800c9e8:	2b40      	cmp	r3, #64	; 0x40
 800c9ea:	d067      	beq.n	800cabc <HAL_TIM_ConfigClockSource+0x106>
 800c9ec:	d816      	bhi.n	800ca1c <HAL_TIM_ConfigClockSource+0x66>
 800c9ee:	2b20      	cmp	r3, #32
 800c9f0:	d00d      	beq.n	800ca0e <HAL_TIM_ConfigClockSource+0x58>
 800c9f2:	d80a      	bhi.n	800ca0a <HAL_TIM_ConfigClockSource+0x54>
 800c9f4:	f033 0110 	bics.w	r1, r3, #16
 800c9f8:	d009      	beq.n	800ca0e <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ca00:	2300      	movs	r3, #0
 800ca02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ca06:	4610      	mov	r0, r2
 800ca08:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800ca0a:	2b30      	cmp	r3, #48	; 0x30
 800ca0c:	d1f5      	bne.n	800c9fa <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 800ca0e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca14:	4313      	orrs	r3, r2
 800ca16:	f043 0307 	orr.w	r3, r3, #7
 800ca1a:	e017      	b.n	800ca4c <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 800ca1c:	2b50      	cmp	r3, #80	; 0x50
 800ca1e:	d1ec      	bne.n	800c9fa <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca20:	684a      	ldr	r2, [r1, #4]
 800ca22:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800ca24:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca26:	6a05      	ldr	r5, [r0, #32]
 800ca28:	f025 0501 	bic.w	r5, r5, #1
 800ca2c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca2e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca30:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca38:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800ca3c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800ca3e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800ca40:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ca42:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca48:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800ca4c:	6083      	str	r3, [r0, #8]
 800ca4e:	e011      	b.n	800ca74 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800ca50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca54:	d00e      	beq.n	800ca74 <HAL_TIM_ConfigClockSource+0xbe>
 800ca56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca5a:	d00d      	beq.n	800ca78 <HAL_TIM_ConfigClockSource+0xc2>
 800ca5c:	2b70      	cmp	r3, #112	; 0x70
 800ca5e:	d1cc      	bne.n	800c9fa <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800ca60:	68cb      	ldr	r3, [r1, #12]
 800ca62:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ca66:	f7ff ff9c 	bl	800c9a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ca6a:	6822      	ldr	r2, [r4, #0]
 800ca6c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca72:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ca74:	2200      	movs	r2, #0
 800ca76:	e7c0      	b.n	800c9fa <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800ca78:	68cb      	ldr	r3, [r1, #12]
 800ca7a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ca7e:	f7ff ff90 	bl	800c9a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca82:	6822      	ldr	r2, [r4, #0]
 800ca84:	6893      	ldr	r3, [r2, #8]
 800ca86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca8a:	e7f2      	b.n	800ca72 <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca8c:	684d      	ldr	r5, [r1, #4]
 800ca8e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca90:	6a01      	ldr	r1, [r0, #32]
 800ca92:	f021 0110 	bic.w	r1, r1, #16
 800ca96:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca98:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800ca9a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca9c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800caa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800caa4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800caa8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800caac:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800caae:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800cab0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cab6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800caba:	e7c7      	b.n	800ca4c <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cabc:	684a      	ldr	r2, [r1, #4]
 800cabe:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800cac0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cac2:	6a05      	ldr	r5, [r0, #32]
 800cac4:	f025 0501 	bic.w	r5, r5, #1
 800cac8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800caca:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cacc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cad4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800cad8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800cada:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800cadc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800cade:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cae4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800cae8:	e7b0      	b.n	800ca4c <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800caea:	461a      	mov	r2, r3
 800caec:	e78b      	b.n	800ca06 <HAL_TIM_ConfigClockSource+0x50>

0800caee <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800caee:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800caf0:	f001 011f 	and.w	r1, r1, #31
{
 800caf4:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800caf6:	2401      	movs	r4, #1
 800caf8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800cafa:	ea23 0304 	bic.w	r3, r3, r4
 800cafe:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb00:	6a03      	ldr	r3, [r0, #32]
 800cb02:	408a      	lsls	r2, r1
 800cb04:	431a      	orrs	r2, r3
 800cb06:	6202      	str	r2, [r0, #32]
}
 800cb08:	bd10      	pop	{r4, pc}
	...

0800cb0c <HAL_TIM_OC_Start>:
{
 800cb0c:	b510      	push	{r4, lr}
 800cb0e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb10:	b929      	cbnz	r1, 800cb1e <HAL_TIM_OC_Start+0x12>
 800cb12:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d01d      	beq.n	800cb56 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 800cb1a:	2001      	movs	r0, #1
}
 800cb1c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb1e:	2904      	cmp	r1, #4
 800cb20:	d107      	bne.n	800cb32 <HAL_TIM_OC_Start+0x26>
 800cb22:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d1f7      	bne.n	800cb1a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800cb30:	e014      	b.n	800cb5c <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb32:	2908      	cmp	r1, #8
 800cb34:	d107      	bne.n	800cb46 <HAL_TIM_OC_Start+0x3a>
 800cb36:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d1ed      	bne.n	800cb1a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb3e:	2302      	movs	r3, #2
 800cb40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800cb44:	e00a      	b.n	800cb5c <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d1e5      	bne.n	800cb1a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb4e:	2302      	movs	r3, #2
 800cb50:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800cb54:	e002      	b.n	800cb5c <HAL_TIM_OC_Start+0x50>
 800cb56:	2302      	movs	r3, #2
 800cb58:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	6820      	ldr	r0, [r4, #0]
 800cb60:	f7ff ffc5 	bl	800caee <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	4a1a      	ldr	r2, [pc, #104]	; (800cbd0 <HAL_TIM_OC_Start+0xc4>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d007      	beq.n	800cb7c <HAL_TIM_OC_Start+0x70>
 800cb6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d003      	beq.n	800cb7c <HAL_TIM_OC_Start+0x70>
 800cb74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d103      	bne.n	800cb84 <HAL_TIM_OC_Start+0x78>
    __HAL_TIM_MOE_ENABLE(htim);
 800cb7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb82:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb88:	d016      	beq.n	800cbb8 <HAL_TIM_OC_Start+0xac>
 800cb8a:	4a12      	ldr	r2, [pc, #72]	; (800cbd4 <HAL_TIM_OC_Start+0xc8>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d013      	beq.n	800cbb8 <HAL_TIM_OC_Start+0xac>
 800cb90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d00f      	beq.n	800cbb8 <HAL_TIM_OC_Start+0xac>
 800cb98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d00b      	beq.n	800cbb8 <HAL_TIM_OC_Start+0xac>
 800cba0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d007      	beq.n	800cbb8 <HAL_TIM_OC_Start+0xac>
 800cba8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d003      	beq.n	800cbb8 <HAL_TIM_OC_Start+0xac>
 800cbb0:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d104      	bne.n	800cbc2 <HAL_TIM_OC_Start+0xb6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbbe:	2a06      	cmp	r2, #6
 800cbc0:	d003      	beq.n	800cbca <HAL_TIM_OC_Start+0xbe>
    __HAL_TIM_ENABLE(htim);
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	f042 0201 	orr.w	r2, r2, #1
 800cbc8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800cbca:	2000      	movs	r0, #0
 800cbcc:	e7a6      	b.n	800cb1c <HAL_TIM_OC_Start+0x10>
 800cbce:	bf00      	nop
 800cbd0:	40014000 	.word	0x40014000
 800cbd4:	40000400 	.word	0x40000400

0800cbd8 <HAL_TIM_PWM_Start>:
 800cbd8:	f7ff bf98 	b.w	800cb0c <HAL_TIM_OC_Start>

0800cbdc <HAL_TIM_IC_Start_IT>:
{
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	d13f      	bne.n	800cc64 <HAL_TIM_IC_Start_IT+0x88>
 800cbe4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cbe8:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cbec:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800cbee:	2b01      	cmp	r3, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cbf0:	b2c0      	uxtb	r0, r0
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800cbf2:	d16e      	bne.n	800ccd2 <HAL_TIM_IC_Start_IT+0xf6>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800cbf4:	2801      	cmp	r0, #1
 800cbf6:	d16c      	bne.n	800ccd2 <HAL_TIM_IC_Start_IT+0xf6>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	2900      	cmp	r1, #0
 800cbfc:	d148      	bne.n	800cc90 <HAL_TIM_IC_Start_IT+0xb4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cbfe:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cc08:	68d3      	ldr	r3, [r2, #12]
 800cc0a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cc0e:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc10:	6820      	ldr	r0, [r4, #0]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f7ff ff6b 	bl	800caee <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc1e:	d016      	beq.n	800cc4e <HAL_TIM_IC_Start_IT+0x72>
 800cc20:	4a2d      	ldr	r2, [pc, #180]	; (800ccd8 <HAL_TIM_IC_Start_IT+0xfc>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d013      	beq.n	800cc4e <HAL_TIM_IC_Start_IT+0x72>
 800cc26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d00f      	beq.n	800cc4e <HAL_TIM_IC_Start_IT+0x72>
 800cc2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d00b      	beq.n	800cc4e <HAL_TIM_IC_Start_IT+0x72>
 800cc36:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d007      	beq.n	800cc4e <HAL_TIM_IC_Start_IT+0x72>
 800cc3e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d003      	beq.n	800cc4e <HAL_TIM_IC_Start_IT+0x72>
 800cc46:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d104      	bne.n	800cc58 <HAL_TIM_IC_Start_IT+0x7c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc4e:	689a      	ldr	r2, [r3, #8]
 800cc50:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc54:	2a06      	cmp	r2, #6
 800cc56:	d003      	beq.n	800cc60 <HAL_TIM_IC_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	f042 0201 	orr.w	r2, r2, #1
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	2000      	movs	r0, #0
 800cc62:	e037      	b.n	800ccd4 <HAL_TIM_IC_Start_IT+0xf8>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cc64:	2904      	cmp	r1, #4
 800cc66:	d105      	bne.n	800cc74 <HAL_TIM_IC_Start_IT+0x98>
 800cc68:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cc6c:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cc70:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cc72:	e7bc      	b.n	800cbee <HAL_TIM_IC_Start_IT+0x12>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cc74:	2908      	cmp	r1, #8
 800cc76:	bf0b      	itete	eq
 800cc78:	f890 3040 	ldrbeq.w	r3, [r0, #64]	; 0x40
 800cc7c:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cc80:	f890 0046 	ldrbeq.w	r0, [r0, #70]	; 0x46
 800cc84:	f894 0047 	ldrbne.w	r0, [r4, #71]	; 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cc88:	bf0c      	ite	eq
 800cc8a:	b2db      	uxtbeq	r3, r3
 800cc8c:	b2db      	uxtbne	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cc8e:	e7ae      	b.n	800cbee <HAL_TIM_IC_Start_IT+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc90:	2904      	cmp	r1, #4
 800cc92:	d108      	bne.n	800cca6 <HAL_TIM_IC_Start_IT+0xca>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cc94:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc96:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cc9e:	68d3      	ldr	r3, [r2, #12]
 800cca0:	f043 0304 	orr.w	r3, r3, #4
 800cca4:	e7b3      	b.n	800cc0e <HAL_TIM_IC_Start_IT+0x32>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cca6:	2908      	cmp	r1, #8
 800cca8:	d108      	bne.n	800ccbc <HAL_TIM_IC_Start_IT+0xe0>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ccaa:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccb0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ccb4:	68d3      	ldr	r3, [r2, #12]
 800ccb6:	f043 0308 	orr.w	r3, r3, #8
 800ccba:	e7a8      	b.n	800cc0e <HAL_TIM_IC_Start_IT+0x32>
  switch (Channel)
 800ccbc:	290c      	cmp	r1, #12
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccc2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  switch (Channel)
 800ccc6:	d105      	bne.n	800ccd4 <HAL_TIM_IC_Start_IT+0xf8>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ccc8:	6822      	ldr	r2, [r4, #0]
 800ccca:	68d3      	ldr	r3, [r2, #12]
 800cccc:	f043 0310 	orr.w	r3, r3, #16
 800ccd0:	e79d      	b.n	800cc0e <HAL_TIM_IC_Start_IT+0x32>
    return HAL_ERROR;
 800ccd2:	2001      	movs	r0, #1
}
 800ccd4:	bd10      	pop	{r4, pc}
 800ccd6:	bf00      	nop
 800ccd8:	40000400 	.word	0x40000400

0800ccdc <HAL_TIM_IC_Start_DMA>:
{
 800ccdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cce0:	4605      	mov	r5, r0
 800cce2:	4617      	mov	r7, r2
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cce4:	4688      	mov	r8, r1
 800cce6:	b989      	cbnz	r1, 800cd0c <HAL_TIM_IC_Start_DMA+0x30>
 800cce8:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ccec:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ccf0:	b2f6      	uxtb	r6, r6
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800ccf2:	2e02      	cmp	r6, #2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ccf4:	b2c4      	uxtb	r4, r0
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800ccf6:	f000 80cb 	beq.w	800ce90 <HAL_TIM_IC_Start_DMA+0x1b4>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800ccfa:	2c02      	cmp	r4, #2
 800ccfc:	d002      	beq.n	800cd04 <HAL_TIM_IC_Start_DMA+0x28>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800ccfe:	2e01      	cmp	r6, #1
 800cd00:	d01a      	beq.n	800cd38 <HAL_TIM_IC_Start_DMA+0x5c>
    return HAL_ERROR;
 800cd02:	2401      	movs	r4, #1
}
 800cd04:	4620      	mov	r0, r4
 800cd06:	b002      	add	sp, #8
 800cd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cd0c:	2904      	cmp	r1, #4
 800cd0e:	d105      	bne.n	800cd1c <HAL_TIM_IC_Start_DMA+0x40>
 800cd10:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cd14:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cd18:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cd1a:	e7ea      	b.n	800ccf2 <HAL_TIM_IC_Start_DMA+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cd1c:	2908      	cmp	r1, #8
 800cd1e:	bf0b      	itete	eq
 800cd20:	f890 6040 	ldrbeq.w	r6, [r0, #64]	; 0x40
 800cd24:	f895 6041 	ldrbne.w	r6, [r5, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cd28:	f890 0046 	ldrbeq.w	r0, [r0, #70]	; 0x46
 800cd2c:	f895 0047 	ldrbne.w	r0, [r5, #71]	; 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cd30:	bf0c      	ite	eq
 800cd32:	b2f6      	uxtbeq	r6, r6
 800cd34:	b2f6      	uxtbne	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cd36:	e7dc      	b.n	800ccf2 <HAL_TIM_IC_Start_DMA+0x16>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800cd38:	2c01      	cmp	r4, #1
 800cd3a:	d1e2      	bne.n	800cd02 <HAL_TIM_IC_Start_DMA+0x26>
    if ((pData == NULL) && (Length > 0U))
 800cd3c:	b90f      	cbnz	r7, 800cd42 <HAL_TIM_IC_Start_DMA+0x66>
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1df      	bne.n	800cd02 <HAL_TIM_IC_Start_DMA+0x26>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd42:	2202      	movs	r2, #2
 800cd44:	f1b8 0f00 	cmp.w	r8, #0
 800cd48:	d13a      	bne.n	800cdc0 <HAL_TIM_IC_Start_DMA+0xe4>
 800cd4a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd4e:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cd52:	4641      	mov	r1, r8
 800cd54:	6828      	ldr	r0, [r5, #0]
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f7ff fec8 	bl	800caee <TIM_CCxChannelCmd>
  switch (Channel)
 800cd5e:	f1b8 0f08 	cmp.w	r8, #8
 800cd62:	6829      	ldr	r1, [r5, #0]
 800cd64:	9b01      	ldr	r3, [sp, #4]
 800cd66:	d07f      	beq.n	800ce68 <HAL_TIM_IC_Start_DMA+0x18c>
 800cd68:	d83e      	bhi.n	800cde8 <HAL_TIM_IC_Start_DMA+0x10c>
 800cd6a:	f1b8 0f00 	cmp.w	r8, #0
 800cd6e:	d052      	beq.n	800ce16 <HAL_TIM_IC_Start_DMA+0x13a>
 800cd70:	f1b8 0f04 	cmp.w	r8, #4
 800cd74:	d064      	beq.n	800ce40 <HAL_TIM_IC_Start_DMA+0x164>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd76:	682b      	ldr	r3, [r5, #0]
 800cd78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd7c:	d016      	beq.n	800cdac <HAL_TIM_IC_Start_DMA+0xd0>
 800cd7e:	4a45      	ldr	r2, [pc, #276]	; (800ce94 <HAL_TIM_IC_Start_DMA+0x1b8>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d013      	beq.n	800cdac <HAL_TIM_IC_Start_DMA+0xd0>
 800cd84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d00f      	beq.n	800cdac <HAL_TIM_IC_Start_DMA+0xd0>
 800cd8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d00b      	beq.n	800cdac <HAL_TIM_IC_Start_DMA+0xd0>
 800cd94:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d007      	beq.n	800cdac <HAL_TIM_IC_Start_DMA+0xd0>
 800cd9c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d003      	beq.n	800cdac <HAL_TIM_IC_Start_DMA+0xd0>
 800cda4:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d104      	bne.n	800cdb6 <HAL_TIM_IC_Start_DMA+0xda>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdac:	689a      	ldr	r2, [r3, #8]
 800cdae:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdb2:	2a06      	cmp	r2, #6
 800cdb4:	d0a6      	beq.n	800cd04 <HAL_TIM_IC_Start_DMA+0x28>
    __HAL_TIM_ENABLE(htim);
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	f042 0201 	orr.w	r2, r2, #1
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	e7a1      	b.n	800cd04 <HAL_TIM_IC_Start_DMA+0x28>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdc0:	f1b8 0f04 	cmp.w	r8, #4
 800cdc4:	d104      	bne.n	800cdd0 <HAL_TIM_IC_Start_DMA+0xf4>
 800cdc6:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdca:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
 800cdce:	e7c0      	b.n	800cd52 <HAL_TIM_IC_Start_DMA+0x76>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdd0:	f1b8 0f08 	cmp.w	r8, #8
 800cdd4:	bf0b      	itete	eq
 800cdd6:	f885 2040 	strbeq.w	r2, [r5, #64]	; 0x40
 800cdda:	f885 2041 	strbne.w	r2, [r5, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdde:	f885 2046 	strbeq.w	r2, [r5, #70]	; 0x46
 800cde2:	f885 2047 	strbne.w	r2, [r5, #71]	; 0x47
 800cde6:	e7b4      	b.n	800cd52 <HAL_TIM_IC_Start_DMA+0x76>
  switch (Channel)
 800cde8:	f1b8 0f0c 	cmp.w	r8, #12
 800cdec:	d1c3      	bne.n	800cd76 <HAL_TIM_IC_Start_DMA+0x9a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800cdee:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800cdf0:	4a29      	ldr	r2, [pc, #164]	; (800ce98 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800cdf2:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cdf4:	4a29      	ldr	r2, [pc, #164]	; (800ce9c <HAL_TIM_IC_Start_DMA+0x1c0>)
 800cdf6:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800cdf8:	4a29      	ldr	r2, [pc, #164]	; (800cea0 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800cdfa:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800cdfc:	3140      	adds	r1, #64	; 0x40
 800cdfe:	463a      	mov	r2, r7
 800ce00:	f7fc fa79 	bl	80092f6 <HAL_DMA_Start_IT>
 800ce04:	4604      	mov	r4, r0
 800ce06:	2800      	cmp	r0, #0
 800ce08:	f47f af7b 	bne.w	800cd02 <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ce0c:	682a      	ldr	r2, [r5, #0]
 800ce0e:	68d3      	ldr	r3, [r2, #12]
 800ce10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ce14:	e012      	b.n	800ce3c <HAL_TIM_IC_Start_DMA+0x160>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ce16:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ce18:	4a1f      	ldr	r2, [pc, #124]	; (800ce98 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800ce1a:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ce1c:	4a1f      	ldr	r2, [pc, #124]	; (800ce9c <HAL_TIM_IC_Start_DMA+0x1c0>)
 800ce1e:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ce20:	4a1f      	ldr	r2, [pc, #124]	; (800cea0 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800ce22:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800ce24:	3134      	adds	r1, #52	; 0x34
 800ce26:	463a      	mov	r2, r7
 800ce28:	f7fc fa65 	bl	80092f6 <HAL_DMA_Start_IT>
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f47f af67 	bne.w	800cd02 <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ce34:	682a      	ldr	r2, [r5, #0]
 800ce36:	68d3      	ldr	r3, [r2, #12]
 800ce38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ce3c:	60d3      	str	r3, [r2, #12]
      break;
 800ce3e:	e79a      	b.n	800cd76 <HAL_TIM_IC_Start_DMA+0x9a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800ce40:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ce42:	4a15      	ldr	r2, [pc, #84]	; (800ce98 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800ce44:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ce46:	4a15      	ldr	r2, [pc, #84]	; (800ce9c <HAL_TIM_IC_Start_DMA+0x1c0>)
 800ce48:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ce4a:	4a15      	ldr	r2, [pc, #84]	; (800cea0 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800ce4c:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800ce4e:	3138      	adds	r1, #56	; 0x38
 800ce50:	463a      	mov	r2, r7
 800ce52:	f7fc fa50 	bl	80092f6 <HAL_DMA_Start_IT>
 800ce56:	4604      	mov	r4, r0
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	f47f af52 	bne.w	800cd02 <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ce5e:	682a      	ldr	r2, [r5, #0]
 800ce60:	68d3      	ldr	r3, [r2, #12]
 800ce62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce66:	e7e9      	b.n	800ce3c <HAL_TIM_IC_Start_DMA+0x160>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800ce68:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800ce6a:	4a0b      	ldr	r2, [pc, #44]	; (800ce98 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800ce6c:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ce6e:	4a0b      	ldr	r2, [pc, #44]	; (800ce9c <HAL_TIM_IC_Start_DMA+0x1c0>)
 800ce70:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ce72:	4a0b      	ldr	r2, [pc, #44]	; (800cea0 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800ce74:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800ce76:	313c      	adds	r1, #60	; 0x3c
 800ce78:	463a      	mov	r2, r7
 800ce7a:	f7fc fa3c 	bl	80092f6 <HAL_DMA_Start_IT>
 800ce7e:	4604      	mov	r4, r0
 800ce80:	2800      	cmp	r0, #0
 800ce82:	f47f af3e 	bne.w	800cd02 <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ce86:	682a      	ldr	r2, [r5, #0]
 800ce88:	68d3      	ldr	r3, [r2, #12]
 800ce8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ce8e:	e7d5      	b.n	800ce3c <HAL_TIM_IC_Start_DMA+0x160>
    return HAL_BUSY;
 800ce90:	4634      	mov	r4, r6
 800ce92:	e737      	b.n	800cd04 <HAL_TIM_IC_Start_DMA+0x28>
 800ce94:	40000400 	.word	0x40000400
 800ce98:	0800c0e9 	.word	0x0800c0e9
 800ce9c:	0800c165 	.word	0x0800c165
 800cea0:	0800c2e7 	.word	0x0800c2e7

0800cea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cea4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cea6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	f04f 0302 	mov.w	r3, #2
 800ceb0:	d02e      	beq.n	800cf10 <HAL_TIMEx_MasterConfigSynchronization+0x6c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ceb6:	6803      	ldr	r3, [r0, #0]
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ceb8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800ceba:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800cebc:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800cebe:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cec2:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800cec8:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ceca:	d016      	beq.n	800cefa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cecc:	4c11      	ldr	r4, [pc, #68]	; (800cf14 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800cece:	42a3      	cmp	r3, r4
 800ced0:	d013      	beq.n	800cefa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ced2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ced6:	42a3      	cmp	r3, r4
 800ced8:	d00f      	beq.n	800cefa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ceda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cede:	42a3      	cmp	r3, r4
 800cee0:	d00b      	beq.n	800cefa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cee2:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800cee6:	42a3      	cmp	r3, r4
 800cee8:	d007      	beq.n	800cefa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ceea:	f504 3494 	add.w	r4, r4, #75776	; 0x12800
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	d003      	beq.n	800cefa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cef2:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800cef6:	42a3      	cmp	r3, r4
 800cef8:	d104      	bne.n	800cf04 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cefa:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cefc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf00:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf04:	2301      	movs	r3, #1
 800cf06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800cf10:	4618      	mov	r0, r3

  return HAL_OK;
}
 800cf12:	bd30      	pop	{r4, r5, pc}
 800cf14:	40000400 	.word	0x40000400

0800cf18 <HAL_TIMEx_CommutCallback>:
 800cf18:	4770      	bx	lr

0800cf1a <HAL_TIMEx_BreakCallback>:
 800cf1a:	4770      	bx	lr

0800cf1c <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cf1c:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cf1e:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800cf22:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800cf26:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	4770      	bx	lr

0800cf2e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cf2e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800cf32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf36:	045b      	lsls	r3, r3, #17
 800cf38:	0c5b      	lsrs	r3, r3, #17
 800cf3a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800cf3e:	2000      	movs	r0, #0
 800cf40:	4770      	bx	lr

0800cf42 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cf42:	b084      	sub	sp, #16
 800cf44:	b510      	push	{r4, lr}
 800cf46:	ac03      	add	r4, sp, #12
 800cf48:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800cf4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cf50:	2301      	movs	r3, #1
 800cf52:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 800cf56:	2300      	movs	r3, #0
 800cf58:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800cf5c:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 800cf5e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800cf62:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	4770      	bx	lr
	...

0800cf6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cf6e:	f891 e000 	ldrb.w	lr, [r1]

  /* initialize Endpoint */
  switch (ep->type)
 800cf72:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cf74:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 800cf78:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800cf7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cf80:	0412      	lsls	r2, r2, #16
 800cf82:	4673      	mov	r3, lr
 800cf84:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 800cf86:	2d03      	cmp	r5, #3
 800cf88:	d84c      	bhi.n	800d024 <USB_ActivateEndpoint+0xb8>
 800cf8a:	e8df f005 	tbb	[pc, r5]
 800cf8e:	4802      	.short	0x4802
 800cf90:	4446      	.short	0x4446
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cf92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 800cf96:	462c      	mov	r4, r5
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800cf98:	f248 0780 	movw	r7, #32896	; 0x8080
 800cf9c:	433a      	orrs	r2, r7
 800cf9e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cfa2:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 800cfa6:	f8df c26c 	ldr.w	ip, [pc, #620]	; 800d214 <USB_ActivateEndpoint+0x2a8>
 800cfaa:	b2b6      	uxth	r6, r6
 800cfac:	ea06 060c 	and.w	r6, r6, ip
 800cfb0:	ea46 060e 	orr.w	r6, r6, lr
 800cfb4:	433e      	orrs	r6, r7
 800cfb6:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]

  if (ep->doublebuffer == 0U)
 800cfba:	7b0a      	ldrb	r2, [r1, #12]
 800cfbc:	eb00 1e0e 	add.w	lr, r0, lr, lsl #4
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	d17c      	bne.n	800d0be <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cfc4:	88ca      	ldrh	r2, [r1, #6]
    if (ep->is_in != 0U)
 800cfc6:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cfc8:	0852      	lsrs	r2, r2, #1
 800cfca:	0052      	lsls	r2, r2, #1
    if (ep->is_in != 0U)
 800cfcc:	b366      	cbz	r6, 800d028 <USB_ActivateEndpoint+0xbc>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cfce:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800cfd2:	fa1e fe81 	uxtah	lr, lr, r1
 800cfd6:	f8ae 2400 	strh.w	r2, [lr, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cfda:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800cfde:	0656      	lsls	r6, r2, #25
 800cfe0:	d50a      	bpl.n	800cff8 <USB_ActivateEndpoint+0x8c>
 800cfe2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800cfe6:	b292      	uxth	r2, r2
 800cfe8:	ea02 020c 	and.w	r2, r2, ip
 800cfec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cff0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800cff4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cff8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800cffc:	4983      	ldr	r1, [pc, #524]	; (800d20c <USB_ActivateEndpoint+0x2a0>)
 800cffe:	b292      	uxth	r2, r2
      if (ep->type != EP_TYPE_ISOC)
 800d000:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d002:	ea02 0201 	and.w	r2, r2, r1
      if (ep->type != EP_TYPE_ISOC)
 800d006:	d001      	beq.n	800d00c <USB_ActivateEndpoint+0xa0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d008:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d00c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d010:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d014:	e0b1      	b.n	800d17a <USB_ActivateEndpoint+0x20e>
      wEpRegVal |= USB_EP_INTERRUPT;
 800d016:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800d01a:	2400      	movs	r4, #0
      break;
 800d01c:	e7bc      	b.n	800cf98 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d01e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 800d022:	e7fa      	b.n	800d01a <USB_ActivateEndpoint+0xae>
  switch (ep->type)
 800d024:	2401      	movs	r4, #1
 800d026:	e7b7      	b.n	800cf98 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d028:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d02c:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d02e:	fa1e f585 	uxtah	r5, lr, r5
 800d032:	f8a5 2408 	strh.w	r2, [r5, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d036:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800d03a:	fa1e fe82 	uxtah	lr, lr, r2
 800d03e:	bb69      	cbnz	r1, 800d09c <USB_ActivateEndpoint+0x130>
 800d040:	f8be 240c 	ldrh.w	r2, [lr, #1036]	; 0x40c
 800d044:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d048:	0412      	lsls	r2, r2, #16
 800d04a:	0c12      	lsrs	r2, r2, #16
 800d04c:	f8ae 240c 	strh.w	r2, [lr, #1036]	; 0x40c
 800d050:	f8be 240c 	ldrh.w	r2, [lr, #1036]	; 0x40c
 800d054:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d058:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d05c:	b292      	uxth	r2, r2
 800d05e:	f8ae 240c 	strh.w	r2, [lr, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d062:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d066:	0457      	lsls	r7, r2, #17
 800d068:	d50d      	bpl.n	800d086 <USB_ActivateEndpoint+0x11a>
 800d06a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d06e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d072:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d076:	0412      	lsls	r2, r2, #16
 800d078:	0c12      	lsrs	r2, r2, #16
 800d07a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d07e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d082:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d086:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d08a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d08e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d092:	0412      	lsls	r2, r2, #16
 800d094:	0c12      	lsrs	r2, r2, #16
 800d096:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800d09a:	e7b7      	b.n	800d00c <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d09c:	293e      	cmp	r1, #62	; 0x3e
 800d09e:	d805      	bhi.n	800d0ac <USB_ActivateEndpoint+0x140>
 800d0a0:	084a      	lsrs	r2, r1, #1
 800d0a2:	07c9      	lsls	r1, r1, #31
 800d0a4:	bf48      	it	mi
 800d0a6:	3201      	addmi	r2, #1
 800d0a8:	0292      	lsls	r2, r2, #10
 800d0aa:	e7d7      	b.n	800d05c <USB_ActivateEndpoint+0xf0>
 800d0ac:	094d      	lsrs	r5, r1, #5
 800d0ae:	06ca      	lsls	r2, r1, #27
 800d0b0:	4a57      	ldr	r2, [pc, #348]	; (800d210 <USB_ActivateEndpoint+0x2a4>)
 800d0b2:	bf08      	it	eq
 800d0b4:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800d0b8:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800d0bc:	e7ce      	b.n	800d05c <USB_ActivateEndpoint+0xf0>
    if (ep->type == EP_TYPE_BULK)
 800d0be:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d0c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 800d0c4:	d15d      	bne.n	800d182 <USB_ActivateEndpoint+0x216>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d0c6:	b292      	uxth	r2, r2
 800d0c8:	ea02 020c 	and.w	r2, r2, ip
 800d0cc:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800d0d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d0d4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d0d8:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800d0dc:	890a      	ldrh	r2, [r1, #8]
 800d0de:	fa1e f686 	uxtah	r6, lr, r6
 800d0e2:	0852      	lsrs	r2, r2, #1
 800d0e4:	0052      	lsls	r2, r2, #1
 800d0e6:	f8a6 2400 	strh.w	r2, [r6, #1024]	; 0x400
 800d0ea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800d0ee:	fa1e fe82 	uxtah	lr, lr, r2
 800d0f2:	894a      	ldrh	r2, [r1, #10]
 800d0f4:	0852      	lsrs	r2, r2, #1
 800d0f6:	0052      	lsls	r2, r2, #1
 800d0f8:	f8ae 2408 	strh.w	r2, [lr, #1032]	; 0x408
    if (ep->is_in == 0U)
 800d0fc:	784a      	ldrb	r2, [r1, #1]
 800d0fe:	2a00      	cmp	r2, #0
 800d100:	d147      	bne.n	800d192 <USB_ActivateEndpoint+0x226>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d102:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d106:	0456      	lsls	r6, r2, #17
 800d108:	d50d      	bpl.n	800d126 <USB_ActivateEndpoint+0x1ba>
 800d10a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d10e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d112:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d116:	0412      	lsls	r2, r2, #16
 800d118:	0c12      	lsrs	r2, r2, #16
 800d11a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d11e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d122:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d126:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d12a:	0655      	lsls	r5, r2, #25
 800d12c:	d50d      	bpl.n	800d14a <USB_ActivateEndpoint+0x1de>
 800d12e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d132:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d136:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d13a:	0412      	lsls	r2, r2, #16
 800d13c:	0c12      	lsrs	r2, r2, #16
 800d13e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d142:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d146:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d14a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d14e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d152:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d156:	0412      	lsls	r2, r2, #16
 800d158:	0c12      	lsrs	r2, r2, #16
 800d15a:	f248 0180 	movw	r1, #32896	; 0x8080
 800d15e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800d162:	430a      	orrs	r2, r1
 800d164:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d168:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d16c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d174:	0412      	lsls	r2, r2, #16
 800d176:	0c12      	lsrs	r2, r2, #16
 800d178:	430a      	orrs	r2, r1
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d17a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }

  return ret;
}
 800d17e:	4620      	mov	r0, r4
 800d180:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d182:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800d186:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d18a:	0412      	lsls	r2, r2, #16
 800d18c:	0c12      	lsrs	r2, r2, #16
 800d18e:	433a      	orrs	r2, r7
 800d190:	e7a0      	b.n	800d0d4 <USB_ActivateEndpoint+0x168>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d192:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d196:	0451      	lsls	r1, r2, #17
 800d198:	d50d      	bpl.n	800d1b6 <USB_ActivateEndpoint+0x24a>
 800d19a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d19e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d1a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d1a6:	0412      	lsls	r2, r2, #16
 800d1a8:	0c12      	lsrs	r2, r2, #16
 800d1aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d1ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d1b2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d1b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d1ba:	0652      	lsls	r2, r2, #25
 800d1bc:	d50d      	bpl.n	800d1da <USB_ActivateEndpoint+0x26e>
 800d1be:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d1c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d1c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d1ca:	0412      	lsls	r2, r2, #16
 800d1cc:	0c12      	lsrs	r2, r2, #16
 800d1ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1d2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d1d6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d1da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d1de:	490b      	ldr	r1, [pc, #44]	; (800d20c <USB_ActivateEndpoint+0x2a0>)
 800d1e0:	b292      	uxth	r2, r2
 800d1e2:	400a      	ands	r2, r1
      if (ep->type != EP_TYPE_ISOC)
 800d1e4:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d1e6:	bf18      	it	ne
 800d1e8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d1ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d1f4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d1f8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d1fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d200:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d204:	0412      	lsls	r2, r2, #16
 800d206:	0c12      	lsrs	r2, r2, #16
 800d208:	e700      	b.n	800d00c <USB_ActivateEndpoint+0xa0>
 800d20a:	bf00      	nop
 800d20c:	ffff8fbf 	.word	0xffff8fbf
 800d210:	ffff8000 	.word	0xffff8000
 800d214:	ffff8f8f 	.word	0xffff8f8f

0800d218 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 800d218:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d21a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 800d21c:	7b09      	ldrb	r1, [r1, #12]
 800d21e:	bbd9      	cbnz	r1, 800d298 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 800d220:	b30a      	cbz	r2, 800d266 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d222:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d226:	0651      	lsls	r1, r2, #25
 800d228:	d50d      	bpl.n	800d246 <USB_DeactivateEndpoint+0x2e>
 800d22a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d22e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d232:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d236:	0412      	lsls	r2, r2, #16
 800d238:	0c12      	lsrs	r2, r2, #16
 800d23a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d23e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d242:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d246:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d24a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d24e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d252:	0412      	lsls	r2, r2, #16
 800d254:	0c12      	lsrs	r2, r2, #16
 800d256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d25a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d25e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }

  return HAL_OK;
}
 800d262:	2000      	movs	r0, #0
 800d264:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d266:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d26a:	0452      	lsls	r2, r2, #17
 800d26c:	d50d      	bpl.n	800d28a <USB_DeactivateEndpoint+0x72>
 800d26e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d272:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d276:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d27a:	0412      	lsls	r2, r2, #16
 800d27c:	0c12      	lsrs	r2, r2, #16
 800d27e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d286:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d28a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d28e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d292:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d296:	e7dc      	b.n	800d252 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800d298:	2a00      	cmp	r2, #0
 800d29a:	d148      	bne.n	800d32e <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d29c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d2a0:	0451      	lsls	r1, r2, #17
 800d2a2:	d50d      	bpl.n	800d2c0 <USB_DeactivateEndpoint+0xa8>
 800d2a4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d2a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d2ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d2b0:	0412      	lsls	r2, r2, #16
 800d2b2:	0c12      	lsrs	r2, r2, #16
 800d2b4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d2b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d2bc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d2c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d2c4:	0652      	lsls	r2, r2, #25
 800d2c6:	d50d      	bpl.n	800d2e4 <USB_DeactivateEndpoint+0xcc>
 800d2c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d2cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d2d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d2d4:	0412      	lsls	r2, r2, #16
 800d2d6:	0c12      	lsrs	r2, r2, #16
 800d2d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d2e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800d2e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d2e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d2ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d2f0:	0412      	lsls	r2, r2, #16
 800d2f2:	0c12      	lsrs	r2, r2, #16
 800d2f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2f8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d2fc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d300:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d304:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d308:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d30c:	0412      	lsls	r2, r2, #16
 800d30e:	0c12      	lsrs	r2, r2, #16
 800d310:	f248 0180 	movw	r1, #32896	; 0x8080
 800d314:	430a      	orrs	r2, r1
 800d316:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d31a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d31e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d326:	0412      	lsls	r2, r2, #16
 800d328:	0c12      	lsrs	r2, r2, #16
 800d32a:	430a      	orrs	r2, r1
 800d32c:	e797      	b.n	800d25e <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d32e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d332:	0451      	lsls	r1, r2, #17
 800d334:	d50d      	bpl.n	800d352 <USB_DeactivateEndpoint+0x13a>
 800d336:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d33a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d33e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d342:	0412      	lsls	r2, r2, #16
 800d344:	0c12      	lsrs	r2, r2, #16
 800d346:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d34a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d34e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d352:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d356:	0652      	lsls	r2, r2, #25
 800d358:	d50d      	bpl.n	800d376 <USB_DeactivateEndpoint+0x15e>
 800d35a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d35e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d362:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d366:	0412      	lsls	r2, r2, #16
 800d368:	0c12      	lsrs	r2, r2, #16
 800d36a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d36e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d372:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800d376:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d37a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d37e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d382:	0412      	lsls	r2, r2, #16
 800d384:	0c12      	lsrs	r2, r2, #16
 800d386:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d38a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d38e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d392:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d396:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d39a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d39e:	0412      	lsls	r2, r2, #16
 800d3a0:	0c12      	lsrs	r2, r2, #16
 800d3a2:	f248 0180 	movw	r1, #32896	; 0x8080
 800d3a6:	430a      	orrs	r2, r1
 800d3a8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d3ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d3b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d3b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d3b8:	e7b5      	b.n	800d326 <USB_DeactivateEndpoint+0x10e>

0800d3ba <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800d3ba:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d3bc:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800d3be:	b18b      	cbz	r3, 800d3e4 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d3c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d3c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3cc:	041b      	lsls	r3, r3, #16
 800d3ce:	0c1b      	lsrs	r3, r3, #16
 800d3d0:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d3d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d3e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d3e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3f0:	041b      	lsls	r3, r3, #16
 800d3f2:	0c1b      	lsrs	r3, r3, #16
 800d3f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d3f8:	e7ec      	b.n	800d3d4 <USB_EPSetStall+0x1a>

0800d3fa <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800d3fa:	7b0b      	ldrb	r3, [r1, #12]
 800d3fc:	bb3b      	cbnz	r3, 800d44e <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800d3fe:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d400:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800d402:	b333      	cbz	r3, 800d452 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d404:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d408:	065b      	lsls	r3, r3, #25
 800d40a:	d50d      	bpl.n	800d428 <USB_EPClearStall+0x2e>
 800d40c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d418:	041b      	lsls	r3, r3, #16
 800d41a:	0c1b      	lsrs	r3, r3, #16
 800d41c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d420:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d424:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800d428:	78cb      	ldrb	r3, [r1, #3]
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d00f      	beq.n	800d44e <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d42e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d43a:	041b      	lsls	r3, r3, #16
 800d43c:	0c1b      	lsrs	r3, r3, #16
 800d43e:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d44a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800d44e:	2000      	movs	r0, #0
 800d450:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d452:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d456:	045b      	lsls	r3, r3, #17
 800d458:	d50d      	bpl.n	800d476 <USB_EPClearStall+0x7c>
 800d45a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d45e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d466:	041b      	lsls	r3, r3, #16
 800d468:	0c1b      	lsrs	r3, r3, #16
 800d46a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d46e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d472:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d476:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d47a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d47e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d482:	041b      	lsls	r3, r3, #16
 800d484:	0c1b      	lsrs	r3, r3, #16
 800d486:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800d48a:	e7da      	b.n	800d442 <USB_EPClearStall+0x48>

0800d48c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800d48c:	b911      	cbnz	r1, 800d494 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d48e:	2380      	movs	r3, #128	; 0x80
 800d490:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800d494:	2000      	movs	r0, #0
 800d496:	4770      	bx	lr

0800d498 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800d498:	2000      	movs	r0, #0
 800d49a:	4770      	bx	lr

0800d49c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d49c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800d4a0:	b280      	uxth	r0, r0
 800d4a2:	4770      	bx	lr

0800d4a4 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d4a4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d4a8:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d4aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d4ae:	085b      	lsrs	r3, r3, #1
 800d4b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d100      	bne.n	800d4ba <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800d4b8:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d4ba:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800d4be:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 800d4c2:	e7f7      	b.n	800d4b4 <USB_WritePMA+0x10>

0800d4c4 <USB_EPStartXfer>:
{
 800d4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c8:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800d4ca:	7849      	ldrb	r1, [r1, #1]
    if (ep->doublebuffer == 0U)
 800d4cc:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 800d4ce:	2901      	cmp	r1, #1
{
 800d4d0:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800d4d2:	f040 811e 	bne.w	800d712 <USB_EPStartXfer+0x24e>
    if (ep->xfer_len > ep->maxpacket)
 800d4d6:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800d4da:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d4dc:	6961      	ldr	r1, [r4, #20]
 800d4de:	4576      	cmp	r6, lr
 800d4e0:	bf28      	it	cs
 800d4e2:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 800d4e4:	bb12      	cbnz	r2, 800d52c <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d4e6:	b2b6      	uxth	r6, r6
 800d4e8:	88e2      	ldrh	r2, [r4, #6]
 800d4ea:	4633      	mov	r3, r6
 800d4ec:	f7ff ffda 	bl	800d4a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d4f0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d4f4:	7823      	ldrb	r3, [r4, #0]
 800d4f6:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800d4fa:	fa11 f282 	uxtah	r2, r1, r2
 800d4fe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800d502:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d504:	7822      	ldrb	r2, [r4, #0]
 800d506:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d50a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d50e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d512:	041b      	lsls	r3, r3, #16
 800d514:	0c1b      	lsrs	r3, r3, #16
 800d516:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d51a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d522:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800d526:	2000      	movs	r0, #0
}
 800d528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 800d52c:	78e2      	ldrb	r2, [r4, #3]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d52e:	f894 c000 	ldrb.w	ip, [r4]
        if (ep->xfer_len_db > ep->maxpacket)
 800d532:	6a23      	ldr	r3, [r4, #32]
      if (ep->type == EP_TYPE_BULK)
 800d534:	2a02      	cmp	r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d536:	ea4f 170c 	mov.w	r7, ip, lsl #4
      if (ep->type == EP_TYPE_BULK)
 800d53a:	f040 80d4 	bne.w	800d6e6 <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 800d53e:	459e      	cmp	lr, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d540:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800d544:	f080 80b9 	bcs.w	800d6ba <USB_EPStartXfer+0x1f6>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d548:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d54c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d550:	0412      	lsls	r2, r2, #16
 800d552:	0c12      	lsrs	r2, r2, #16
 800d554:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800d558:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d55c:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d560:	f830 802c 	ldrh.w	r8, [r0, ip, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d564:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 800d568:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d56a:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 800d56e:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d570:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d572:	d052      	beq.n	800d61a <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d574:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 800d578:	fa1c f282 	uxtah	r2, ip, r2
 800d57c:	53d3      	strh	r3, [r2, r7]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d57e:	8962      	ldrh	r2, [r4, #10]
 800d580:	f7ff ff90 	bl	800d4a4 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800d584:	6a22      	ldr	r2, [r4, #32]
 800d586:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800d588:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d58a:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800d58c:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800d58e:	bf8c      	ite	hi
 800d590:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800d592:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 800d594:	4431      	add	r1, r6
 800d596:	bf88      	it	hi
 800d598:	4632      	movhi	r2, r6
 800d59a:	6223      	str	r3, [r4, #32]
 800d59c:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d59e:	b293      	uxth	r3, r2
 800d5a0:	bb70      	cbnz	r0, 800d600 <USB_EPStartXfer+0x13c>
 800d5a2:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800d5a6:	7820      	ldrb	r0, [r4, #0]
 800d5a8:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800d5ac:	fa17 f686 	uxtah	r6, r7, r6
 800d5b0:	eb06 1600 	add.w	r6, r6, r0, lsl #4
 800d5b4:	b96a      	cbnz	r2, 800d5d2 <USB_EPStartXfer+0x10e>
 800d5b6:	8832      	ldrh	r2, [r6, #0]
 800d5b8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d5bc:	0412      	lsls	r2, r2, #16
 800d5be:	0c12      	lsrs	r2, r2, #16
 800d5c0:	8032      	strh	r2, [r6, #0]
 800d5c2:	8832      	ldrh	r2, [r6, #0]
 800d5c4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d5c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d5cc:	b292      	uxth	r2, r2
 800d5ce:	8032      	strh	r2, [r6, #0]
 800d5d0:	e008      	b.n	800d5e4 <USB_EPStartXfer+0x120>
 800d5d2:	2a3e      	cmp	r2, #62	; 0x3e
 800d5d4:	d80b      	bhi.n	800d5ee <USB_EPStartXfer+0x12a>
 800d5d6:	0850      	lsrs	r0, r2, #1
 800d5d8:	07d7      	lsls	r7, r2, #31
 800d5da:	bf48      	it	mi
 800d5dc:	3001      	addmi	r0, #1
 800d5de:	0280      	lsls	r0, r0, #10
 800d5e0:	b280      	uxth	r0, r0
 800d5e2:	8030      	strh	r0, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5e4:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5e6:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5e8:	f7ff ff5c 	bl	800d4a4 <USB_WritePMA>
 800d5ec:	e78a      	b.n	800d504 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d5ee:	0950      	lsrs	r0, r2, #5
 800d5f0:	06d2      	lsls	r2, r2, #27
 800d5f2:	4aad      	ldr	r2, [pc, #692]	; (800d8a8 <USB_EPStartXfer+0x3e4>)
 800d5f4:	bf08      	it	eq
 800d5f6:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800d5fa:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800d5fe:	e7e5      	b.n	800d5cc <USB_EPStartXfer+0x108>
 800d600:	2801      	cmp	r0, #1
 800d602:	d1ef      	bne.n	800d5e4 <USB_EPStartXfer+0x120>
 800d604:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d608:	7820      	ldrb	r0, [r4, #0]
 800d60a:	f205 4604 	addw	r6, r5, #1028	; 0x404
 800d60e:	fa16 f282 	uxtah	r2, r6, r2
 800d612:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800d616:	8013      	strh	r3, [r2, #0]
 800d618:	e7e4      	b.n	800d5e4 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d61a:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800d61e:	fa1c f282 	uxtah	r2, ip, r2
 800d622:	53d3      	strh	r3, [r2, r7]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d624:	8922      	ldrh	r2, [r4, #8]
 800d626:	f7ff ff3d 	bl	800d4a4 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800d62a:	6a22      	ldr	r2, [r4, #32]
 800d62c:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800d62e:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d630:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800d632:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800d634:	bf8c      	ite	hi
 800d636:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800d638:	4643      	movls	r3, r8
            ep->xfer_buff += len;
 800d63a:	4431      	add	r1, r6
 800d63c:	bf88      	it	hi
 800d63e:	4632      	movhi	r2, r6
 800d640:	6223      	str	r3, [r4, #32]
 800d642:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d644:	b293      	uxth	r3, r2
 800d646:	bb58      	cbnz	r0, 800d6a0 <USB_EPStartXfer+0x1dc>
 800d648:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800d64c:	7820      	ldrb	r0, [r4, #0]
 800d64e:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 800d652:	fa17 f686 	uxtah	r6, r7, r6
 800d656:	eb06 1600 	add.w	r6, r6, r0, lsl #4
 800d65a:	b96a      	cbnz	r2, 800d678 <USB_EPStartXfer+0x1b4>
 800d65c:	8832      	ldrh	r2, [r6, #0]
 800d65e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d662:	0412      	lsls	r2, r2, #16
 800d664:	0c12      	lsrs	r2, r2, #16
 800d666:	8032      	strh	r2, [r6, #0]
 800d668:	8832      	ldrh	r2, [r6, #0]
 800d66a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d66e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d672:	b292      	uxth	r2, r2
 800d674:	8032      	strh	r2, [r6, #0]
 800d676:	e008      	b.n	800d68a <USB_EPStartXfer+0x1c6>
 800d678:	2a3e      	cmp	r2, #62	; 0x3e
 800d67a:	d808      	bhi.n	800d68e <USB_EPStartXfer+0x1ca>
 800d67c:	0850      	lsrs	r0, r2, #1
 800d67e:	07d7      	lsls	r7, r2, #31
 800d680:	bf48      	it	mi
 800d682:	3001      	addmi	r0, #1
 800d684:	0280      	lsls	r0, r0, #10
 800d686:	b280      	uxth	r0, r0
 800d688:	8030      	strh	r0, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d68a:	8962      	ldrh	r2, [r4, #10]
 800d68c:	e7ab      	b.n	800d5e6 <USB_EPStartXfer+0x122>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d68e:	0950      	lsrs	r0, r2, #5
 800d690:	06d2      	lsls	r2, r2, #27
 800d692:	4a85      	ldr	r2, [pc, #532]	; (800d8a8 <USB_EPStartXfer+0x3e4>)
 800d694:	bf08      	it	eq
 800d696:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800d69a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800d69e:	e7e8      	b.n	800d672 <USB_EPStartXfer+0x1ae>
 800d6a0:	2801      	cmp	r0, #1
 800d6a2:	d1f2      	bne.n	800d68a <USB_EPStartXfer+0x1c6>
 800d6a4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d6a8:	7820      	ldrb	r0, [r4, #0]
 800d6aa:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 800d6ae:	fa16 f282 	uxtah	r2, r6, r2
 800d6b2:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800d6b6:	8013      	strh	r3, [r2, #0]
 800d6b8:	e7e7      	b.n	800d68a <USB_EPStartXfer+0x1c6>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d6ba:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800d6be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d6c2:	0412      	lsls	r2, r2, #16
 800d6c4:	0c12      	lsrs	r2, r2, #16
 800d6c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d6ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d6ce:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d6d2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800d6d6:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800d6da:	fa16 f282 	uxtah	r2, r6, r2
 800d6de:	b29b      	uxth	r3, r3
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d6e0:	53d3      	strh	r3, [r2, r7]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d6e2:	8922      	ldrh	r2, [r4, #8]
 800d6e4:	e780      	b.n	800d5e8 <USB_EPStartXfer+0x124>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d6e6:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        ep->xfer_len_db -= len;
 800d6ea:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d6ec:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 800d6f0:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d6f2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d6f6:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d6f8:	d006      	beq.n	800d708 <USB_EPStartXfer+0x244>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d6fa:	f200 460c 	addw	r6, r0, #1036	; 0x40c
 800d6fe:	fa16 f282 	uxtah	r2, r6, r2
 800d702:	53d3      	strh	r3, [r2, r7]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d704:	8962      	ldrh	r2, [r4, #10]
 800d706:	e76f      	b.n	800d5e8 <USB_EPStartXfer+0x124>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d708:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800d70c:	fa16 f282 	uxtah	r2, r6, r2
 800d710:	e7e6      	b.n	800d6e0 <USB_EPStartXfer+0x21c>
    if (ep->doublebuffer == 0U)
 800d712:	b9f2      	cbnz	r2, 800d752 <USB_EPStartXfer+0x28e>
      if (ep->xfer_len > ep->maxpacket)
 800d714:	69a3      	ldr	r3, [r4, #24]
 800d716:	6921      	ldr	r1, [r4, #16]
 800d718:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800d71a:	bf88      	it	hi
 800d71c:	1a5a      	subhi	r2, r3, r1
 800d71e:	61a2      	str	r2, [r4, #24]
 800d720:	bf88      	it	hi
 800d722:	460b      	movhi	r3, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d724:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800d728:	7822      	ldrb	r2, [r4, #0]
 800d72a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800d72e:	fa10 f181 	uxtah	r1, r0, r1
 800d732:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 80c1 	beq.w	800d8be <USB_EPStartXfer+0x3fa>
 800d73c:	2b3e      	cmp	r3, #62	; 0x3e
 800d73e:	f200 80cc 	bhi.w	800d8da <USB_EPStartXfer+0x416>
 800d742:	085a      	lsrs	r2, r3, #1
 800d744:	07d8      	lsls	r0, r3, #31
 800d746:	bf48      	it	mi
 800d748:	3201      	addmi	r2, #1
 800d74a:	0292      	lsls	r2, r2, #10
 800d74c:	b292      	uxth	r2, r2
 800d74e:	800a      	strh	r2, [r1, #0]
 800d750:	e04a      	b.n	800d7e8 <USB_EPStartXfer+0x324>
      if (ep->type == EP_TYPE_BULK)
 800d752:	78e3      	ldrb	r3, [r4, #3]
 800d754:	2b02      	cmp	r3, #2
 800d756:	d17b      	bne.n	800d850 <USB_EPStartXfer+0x38c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d758:	bb61      	cbnz	r1, 800d7b4 <USB_EPStartXfer+0x2f0>
 800d75a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800d75e:	7823      	ldrb	r3, [r4, #0]
 800d760:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800d764:	fa12 f181 	uxtah	r1, r2, r1
 800d768:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800d76c:	6923      	ldr	r3, [r4, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d146      	bne.n	800d800 <USB_EPStartXfer+0x33c>
 800d772:	880a      	ldrh	r2, [r1, #0]
 800d774:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d778:	0412      	lsls	r2, r2, #16
 800d77a:	0c12      	lsrs	r2, r2, #16
 800d77c:	800a      	strh	r2, [r1, #0]
 800d77e:	880a      	ldrh	r2, [r1, #0]
 800d780:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d784:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d788:	b292      	uxth	r2, r2
 800d78a:	800a      	strh	r2, [r1, #0]
 800d78c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800d790:	7822      	ldrb	r2, [r4, #0]
 800d792:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800d796:	fa10 f181 	uxtah	r1, r0, r1
 800d79a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d03f      	beq.n	800d822 <USB_EPStartXfer+0x35e>
 800d7a2:	2b3e      	cmp	r3, #62	; 0x3e
 800d7a4:	d84b      	bhi.n	800d83e <USB_EPStartXfer+0x37a>
 800d7a6:	085a      	lsrs	r2, r3, #1
 800d7a8:	07d8      	lsls	r0, r3, #31
 800d7aa:	bf48      	it	mi
 800d7ac:	3201      	addmi	r2, #1
 800d7ae:	0292      	lsls	r2, r2, #10
 800d7b0:	b292      	uxth	r2, r2
 800d7b2:	800a      	strh	r2, [r1, #0]
        if (ep->xfer_count != 0U)
 800d7b4:	69e3      	ldr	r3, [r4, #28]
 800d7b6:	b1bb      	cbz	r3, 800d7e8 <USB_EPStartXfer+0x324>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d7b8:	7822      	ldrb	r2, [r4, #0]
 800d7ba:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d7be:	f244 0340 	movw	r3, #16448	; 0x4040
 800d7c2:	ea03 0001 	and.w	r0, r3, r1
 800d7c6:	438b      	bics	r3, r1
 800d7c8:	d000      	beq.n	800d7cc <USB_EPStartXfer+0x308>
 800d7ca:	b968      	cbnz	r0, 800d7e8 <USB_EPStartXfer+0x324>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800d7cc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d7d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7d8:	041b      	lsls	r3, r3, #16
 800d7da:	0c1b      	lsrs	r3, r3, #16
 800d7dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d7e4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7e8:	7822      	ldrb	r2, [r4, #0]
 800d7ea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d7ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7f6:	041b      	lsls	r3, r3, #16
 800d7f8:	0c1b      	lsrs	r3, r3, #16
 800d7fa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800d7fe:	e68c      	b.n	800d51a <USB_EPStartXfer+0x56>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d800:	2b3e      	cmp	r3, #62	; 0x3e
 800d802:	d805      	bhi.n	800d810 <USB_EPStartXfer+0x34c>
 800d804:	085a      	lsrs	r2, r3, #1
 800d806:	07df      	lsls	r7, r3, #31
 800d808:	bf48      	it	mi
 800d80a:	3201      	addmi	r2, #1
 800d80c:	0292      	lsls	r2, r2, #10
 800d80e:	e7bb      	b.n	800d788 <USB_EPStartXfer+0x2c4>
 800d810:	0958      	lsrs	r0, r3, #5
 800d812:	4a25      	ldr	r2, [pc, #148]	; (800d8a8 <USB_EPStartXfer+0x3e4>)
 800d814:	06de      	lsls	r6, r3, #27
 800d816:	bf08      	it	eq
 800d818:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800d81c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800d820:	e7b2      	b.n	800d788 <USB_EPStartXfer+0x2c4>
 800d822:	880b      	ldrh	r3, [r1, #0]
 800d824:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d828:	041b      	lsls	r3, r3, #16
 800d82a:	0c1b      	lsrs	r3, r3, #16
 800d82c:	800b      	strh	r3, [r1, #0]
 800d82e:	880b      	ldrh	r3, [r1, #0]
 800d830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d838:	b29b      	uxth	r3, r3
 800d83a:	800b      	strh	r3, [r1, #0]
 800d83c:	e7ba      	b.n	800d7b4 <USB_EPStartXfer+0x2f0>
 800d83e:	095a      	lsrs	r2, r3, #5
 800d840:	06db      	lsls	r3, r3, #27
 800d842:	4b19      	ldr	r3, [pc, #100]	; (800d8a8 <USB_EPStartXfer+0x3e4>)
 800d844:	bf08      	it	eq
 800d846:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800d84a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800d84e:	e7f3      	b.n	800d838 <USB_EPStartXfer+0x374>
      else if (ep->type == EP_TYPE_ISOC)
 800d850:	2b01      	cmp	r3, #1
 800d852:	d14b      	bne.n	800d8ec <USB_EPStartXfer+0x428>
        if (ep->xfer_len > ep->maxpacket)
 800d854:	69a3      	ldr	r3, [r4, #24]
 800d856:	6922      	ldr	r2, [r4, #16]
 800d858:	4293      	cmp	r3, r2
          ep->xfer_len -= len;
 800d85a:	bf8a      	itet	hi
 800d85c:	1a98      	subhi	r0, r3, r2
          ep->xfer_len = 0U;
 800d85e:	2000      	movls	r0, #0
 800d860:	4613      	movhi	r3, r2
 800d862:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d864:	2900      	cmp	r1, #0
 800d866:	d1bf      	bne.n	800d7e8 <USB_EPStartXfer+0x324>
 800d868:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800d86c:	7822      	ldrb	r2, [r4, #0]
 800d86e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800d872:	fa10 f181 	uxtah	r1, r0, r1
 800d876:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d87a:	b96b      	cbnz	r3, 800d898 <USB_EPStartXfer+0x3d4>
 800d87c:	880a      	ldrh	r2, [r1, #0]
 800d87e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d882:	0412      	lsls	r2, r2, #16
 800d884:	0c12      	lsrs	r2, r2, #16
 800d886:	800a      	strh	r2, [r1, #0]
 800d888:	880a      	ldrh	r2, [r1, #0]
 800d88a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d88e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d892:	b292      	uxth	r2, r2
 800d894:	800a      	strh	r2, [r1, #0]
 800d896:	e745      	b.n	800d724 <USB_EPStartXfer+0x260>
 800d898:	2b3e      	cmp	r3, #62	; 0x3e
 800d89a:	d807      	bhi.n	800d8ac <USB_EPStartXfer+0x3e8>
 800d89c:	085a      	lsrs	r2, r3, #1
 800d89e:	07df      	lsls	r7, r3, #31
 800d8a0:	bf48      	it	mi
 800d8a2:	3201      	addmi	r2, #1
 800d8a4:	0292      	lsls	r2, r2, #10
 800d8a6:	e7f4      	b.n	800d892 <USB_EPStartXfer+0x3ce>
 800d8a8:	ffff8000 	.word	0xffff8000
 800d8ac:	0958      	lsrs	r0, r3, #5
 800d8ae:	4a10      	ldr	r2, [pc, #64]	; (800d8f0 <USB_EPStartXfer+0x42c>)
 800d8b0:	06de      	lsls	r6, r3, #27
 800d8b2:	bf08      	it	eq
 800d8b4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800d8b8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800d8bc:	e7e9      	b.n	800d892 <USB_EPStartXfer+0x3ce>
 800d8be:	880b      	ldrh	r3, [r1, #0]
 800d8c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d8c4:	041b      	lsls	r3, r3, #16
 800d8c6:	0c1b      	lsrs	r3, r3, #16
 800d8c8:	800b      	strh	r3, [r1, #0]
 800d8ca:	880b      	ldrh	r3, [r1, #0]
 800d8cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	800b      	strh	r3, [r1, #0]
 800d8d8:	e786      	b.n	800d7e8 <USB_EPStartXfer+0x324>
 800d8da:	095a      	lsrs	r2, r3, #5
 800d8dc:	06db      	lsls	r3, r3, #27
 800d8de:	4b04      	ldr	r3, [pc, #16]	; (800d8f0 <USB_EPStartXfer+0x42c>)
 800d8e0:	bf08      	it	eq
 800d8e2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800d8e6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800d8ea:	e7f3      	b.n	800d8d4 <USB_EPStartXfer+0x410>
        return HAL_ERROR;
 800d8ec:	2001      	movs	r0, #1
 800d8ee:	e61b      	b.n	800d528 <USB_EPStartXfer+0x64>
 800d8f0:	ffff8000 	.word	0xffff8000

0800d8f4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d8f4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 800d8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d8fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d8fe:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 800d900:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d902:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 800d904:	462e      	mov	r6, r5
 800d906:	3402      	adds	r4, #2
 800d908:	b936      	cbnz	r6, 800d918 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800d90a:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800d90c:	bf44      	itt	mi
 800d90e:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d912:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800d916:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 800d918:	f837 0b04 	ldrh.w	r0, [r7], #4
 800d91c:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d91e:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800d922:	0a00      	lsrs	r0, r0, #8
 800d924:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 800d928:	3e01      	subs	r6, #1
 800d92a:	e7ec      	b.n	800d906 <USB_ReadPMA+0x12>

0800d92c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d92c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800d930:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d932:	b16b      	cbz	r3, 800d950 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d934:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d938:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800d93c:	28ff      	cmp	r0, #255	; 0xff
 800d93e:	d007      	beq.n	800d950 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800d946:	4621      	mov	r1, r4
 800d948:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800d94a:	23ff      	movs	r3, #255	; 0xff
 800d94c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800d950:	2000      	movs	r0, #0
 800d952:	bd10      	pop	{r4, pc}

0800d954 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d954:	2343      	movs	r3, #67	; 0x43
 800d956:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800d958:	4800      	ldr	r0, [pc, #0]	; (800d95c <USBD_CDC_GetFSCfgDesc+0x8>)
 800d95a:	4770      	bx	lr
 800d95c:	2000004c 	.word	0x2000004c

0800d960 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d960:	2343      	movs	r3, #67	; 0x43
 800d962:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800d964:	4800      	ldr	r0, [pc, #0]	; (800d968 <USBD_CDC_GetHSCfgDesc+0x8>)
 800d966:	4770      	bx	lr
 800d968:	20000090 	.word	0x20000090

0800d96c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d96c:	2343      	movs	r3, #67	; 0x43
 800d96e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800d970:	4800      	ldr	r0, [pc, #0]	; (800d974 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800d972:	4770      	bx	lr
 800d974:	200000e0 	.word	0x200000e0

0800d978 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d978:	230a      	movs	r3, #10
 800d97a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800d97c:	4800      	ldr	r0, [pc, #0]	; (800d980 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800d97e:	4770      	bx	lr
 800d980:	200000d4 	.word	0x200000d4

0800d984 <USBD_CDC_DataOut>:
{
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d988:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d98c:	f000 fee6 	bl	800e75c <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800d990:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d994:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800d998:	b14b      	cbz	r3, 800d9ae <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d99a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800d99e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800d9a8:	4798      	blx	r3
    return USBD_OK;
 800d9aa:	2000      	movs	r0, #0
}
 800d9ac:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800d9ae:	2002      	movs	r0, #2
 800d9b0:	e7fc      	b.n	800d9ac <USBD_CDC_DataOut+0x28>

0800d9b2 <USBD_CDC_DataIn>:
{
 800d9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9b4:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 800d9b8:	b1d6      	cbz	r6, 800d9f0 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d9ba:	2214      	movs	r2, #20
 800d9bc:	fb02 0201 	mla	r2, r2, r1, r0
 800d9c0:	69d4      	ldr	r4, [r2, #28]
 800d9c2:	b18c      	cbz	r4, 800d9e8 <USBD_CDC_DataIn+0x36>
 800d9c4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800d9c8:	2728      	movs	r7, #40	; 0x28
 800d9ca:	fb07 3501 	mla	r5, r7, r1, r3
 800d9ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d9d0:	fbb4 f5f3 	udiv	r5, r4, r3
 800d9d4:	fb03 4415 	mls	r4, r3, r5, r4
 800d9d8:	b934      	cbnz	r4, 800d9e8 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800d9da:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d9dc:	4623      	mov	r3, r4
 800d9de:	4622      	mov	r2, r4
 800d9e0:	f000 feaa 	bl	800e738 <USBD_LL_Transmit>
    return USBD_OK;
 800d9e4:	4620      	mov	r0, r4
}
 800d9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800d9ee:	e7fa      	b.n	800d9e6 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 800d9f0:	2002      	movs	r0, #2
 800d9f2:	e7f8      	b.n	800d9e6 <USBD_CDC_DataIn+0x34>

0800d9f4 <USBD_CDC_Setup>:
{
 800d9f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9f8:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d9fa:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800d9fe:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da02:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 800da06:	4605      	mov	r5, r0
 800da08:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 800da0a:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800da0e:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da12:	d028      	beq.n	800da66 <USBD_CDC_Setup+0x72>
 800da14:	2c20      	cmp	r4, #32
 800da16:	d142      	bne.n	800da9e <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 800da18:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da1a:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 800da1c:	b1e4      	cbz	r4, 800da58 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 800da1e:	0612      	lsls	r2, r2, #24
 800da20:	d511      	bpl.n	800da46 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da22:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800da26:	4639      	mov	r1, r7
 800da28:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800da2c:	4618      	mov	r0, r3
 800da2e:	4622      	mov	r2, r4
 800da30:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800da32:	88f2      	ldrh	r2, [r6, #6]
 800da34:	4639      	mov	r1, r7
 800da36:	4628      	mov	r0, r5
 800da38:	f000 fc48 	bl	800e2cc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800da3c:	4644      	mov	r4, r8
}
 800da3e:	4620      	mov	r0, r4
 800da40:	b003      	add	sp, #12
 800da42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 800da46:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800da4a:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800da4e:	4622      	mov	r2, r4
 800da50:	4639      	mov	r1, r7
 800da52:	f000 fc50 	bl	800e2f6 <USBD_CtlPrepareRx>
 800da56:	e7f1      	b.n	800da3c <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da58:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800da5c:	4618      	mov	r0, r3
 800da5e:	6895      	ldr	r5, [r2, #8]
 800da60:	4622      	mov	r2, r4
 800da62:	47a8      	blx	r5
 800da64:	e7eb      	b.n	800da3e <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800da66:	784b      	ldrb	r3, [r1, #1]
 800da68:	2b0a      	cmp	r3, #10
 800da6a:	d00c      	beq.n	800da86 <USBD_CDC_Setup+0x92>
 800da6c:	2b0b      	cmp	r3, #11
 800da6e:	d012      	beq.n	800da96 <USBD_CDC_Setup+0xa2>
 800da70:	b9ab      	cbnz	r3, 800da9e <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800da76:	2b03      	cmp	r3, #3
 800da78:	d111      	bne.n	800da9e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800da7a:	2202      	movs	r2, #2
 800da7c:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800da80:	f000 fc24 	bl	800e2cc <USBD_CtlSendData>
 800da84:	e7db      	b.n	800da3e <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d107      	bne.n	800da9e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800da8e:	2201      	movs	r2, #1
 800da90:	f10d 0105 	add.w	r1, sp, #5
 800da94:	e7f4      	b.n	800da80 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800da96:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d0cf      	beq.n	800da3e <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 800da9e:	4631      	mov	r1, r6
 800daa0:	4628      	mov	r0, r5
 800daa2:	f000 fbec 	bl	800e27e <USBD_CtlError>
          ret = USBD_FAIL;
 800daa6:	2402      	movs	r4, #2
          break;
 800daa8:	e7c9      	b.n	800da3e <USBD_CDC_Setup+0x4a>

0800daaa <USBD_CDC_DeInit>:
{
 800daaa:	b538      	push	{r3, r4, r5, lr}
 800daac:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800daae:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dab0:	2181      	movs	r1, #129	; 0x81
 800dab2:	f000 fe0a 	bl	800e6ca <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dab6:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dab8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800daba:	4620      	mov	r0, r4
 800dabc:	f000 fe05 	bl	800e6ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dac0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dac4:	2182      	movs	r1, #130	; 0x82
 800dac6:	4620      	mov	r0, r4
 800dac8:	f000 fdff 	bl	800e6ca <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800dacc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dad0:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800dad2:	b14b      	cbz	r3, 800dae8 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dad4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800dadc:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800dae0:	f000 fe44 	bl	800e76c <USBD_static_free>
    pdev->pClassData = NULL;
 800dae4:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800dae8:	2000      	movs	r0, #0
 800daea:	bd38      	pop	{r3, r4, r5, pc}

0800daec <USBD_CDC_Init>:
{
 800daec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daf0:	7c03      	ldrb	r3, [r0, #16]
{
 800daf2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daf4:	bbbb      	cbnz	r3, 800db66 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800daf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dafa:	2202      	movs	r2, #2
 800dafc:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dafe:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800db00:	f000 fdd7 	bl	800e6b2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800db04:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800db06:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800db0a:	4629      	mov	r1, r5
 800db0c:	2202      	movs	r2, #2
 800db0e:	4620      	mov	r0, r4
 800db10:	f000 fdcf 	bl	800e6b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800db14:	2701      	movs	r7, #1
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800db16:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800db1a:	2308      	movs	r3, #8
 800db1c:	2203      	movs	r2, #3
 800db1e:	2182      	movs	r1, #130	; 0x82
 800db20:	4620      	mov	r0, r4
 800db22:	f000 fdc6 	bl	800e6b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800db26:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800db28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800db2c:	f000 fe1a 	bl	800e764 <USBD_static_malloc>
 800db30:	4605      	mov	r5, r0
 800db32:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800db36:	b340      	cbz	r0, 800db8a <USBD_CDC_Init+0x9e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800db38:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hcdc->TxState = 0U;
 800db3c:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4798      	blx	r3
    hcdc->TxState = 0U;
 800db44:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800db48:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db4c:	7c26      	ldrb	r6, [r4, #16]
 800db4e:	b99e      	cbnz	r6, 800db78 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db50:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800db54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db58:	4639      	mov	r1, r7
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 fdf5 	bl	800e74a <USBD_LL_PrepareReceive>
}
 800db60:	4630      	mov	r0, r6
 800db62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800db66:	2340      	movs	r3, #64	; 0x40
 800db68:	2202      	movs	r2, #2
 800db6a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800db6c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800db6e:	f000 fda0 	bl	800e6b2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800db72:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800db74:	2340      	movs	r3, #64	; 0x40
 800db76:	e7c8      	b.n	800db0a <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db78:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800db7c:	2340      	movs	r3, #64	; 0x40
 800db7e:	4639      	mov	r1, r7
 800db80:	4620      	mov	r0, r4
 800db82:	f000 fde2 	bl	800e74a <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800db86:	4646      	mov	r6, r8
 800db88:	e7ea      	b.n	800db60 <USBD_CDC_Init+0x74>
    ret = 1U;
 800db8a:	463e      	mov	r6, r7
 800db8c:	e7e8      	b.n	800db60 <USBD_CDC_Init+0x74>

0800db8e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800db8e:	b119      	cbz	r1, 800db98 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800db90:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800db94:	2000      	movs	r0, #0
 800db96:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800db98:	2002      	movs	r0, #2
  }

  return ret;
}
 800db9a:	4770      	bx	lr

0800db9c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800db9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800dba0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800dba2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dba6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800dbaa:	4770      	bx	lr

0800dbac <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800dbac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 800dbb0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800dbb2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800dbb6:	4770      	bx	lr

0800dbb8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800dbb8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800dbbc:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800dbbe:	b182      	cbz	r2, 800dbe2 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 800dbc0:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	b974      	cbnz	r4, 800dbe6 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800dbc8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dbcc:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800dbd0:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800dbd2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	2181      	movs	r1, #129	; 0x81
 800dbda:	f000 fdad 	bl	800e738 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800dbde:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800dbe0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800dbe2:	2002      	movs	r0, #2
 800dbe4:	e7fc      	b.n	800dbe0 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	e7fa      	b.n	800dbe0 <USBD_CDC_TransmitPacket+0x28>

0800dbea <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800dbea:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800dbee:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800dbf0:	b182      	cbz	r2, 800dc14 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbf2:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800dbf4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbf8:	b934      	cbnz	r4, 800dc08 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800dbfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbfe:	2101      	movs	r1, #1
 800dc00:	f000 fda3 	bl	800e74a <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800dc04:	4620      	mov	r0, r4
 800dc06:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800dc08:	2340      	movs	r3, #64	; 0x40
 800dc0a:	2101      	movs	r1, #1
 800dc0c:	f000 fd9d 	bl	800e74a <USBD_LL_PrepareReceive>
    return USBD_OK;
 800dc10:	2400      	movs	r4, #0
 800dc12:	e7f7      	b.n	800dc04 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800dc14:	2402      	movs	r4, #2
 800dc16:	e7f5      	b.n	800dc04 <USBD_CDC_ReceivePacket+0x1a>

0800dc18 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dc18:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dc1a:	b180      	cbz	r0, 800dc3e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800dc1c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dc20:	b113      	cbz	r3, 800dc28 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dc28:	b109      	cbz	r1, 800dc2e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800dc2a:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800dc34:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800dc36:	f000 fcf1 	bl	800e61c <USBD_LL_Init>

  return USBD_OK;
 800dc3a:	2000      	movs	r0, #0
}
 800dc3c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800dc3e:	2002      	movs	r0, #2
 800dc40:	e7fc      	b.n	800dc3c <USBD_Init+0x24>

0800dc42 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800dc42:	b119      	cbz	r1, 800dc4c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800dc44:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800dc48:	2000      	movs	r0, #0
 800dc4a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800dc4c:	2002      	movs	r0, #2
  }

  return status;
}
 800dc4e:	4770      	bx	lr

0800dc50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dc50:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800dc52:	f000 fd25 	bl	800e6a0 <USBD_LL_Start>

  return USBD_OK;
}
 800dc56:	2000      	movs	r0, #0
 800dc58:	bd08      	pop	{r3, pc}

0800dc5a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800dc5a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800dc5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dc60:	b90b      	cbnz	r3, 800dc66 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dc62:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800dc64:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4798      	blx	r3
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d0fa      	beq.n	800dc64 <USBD_SetClassConfig+0xa>
 800dc6e:	e7f8      	b.n	800dc62 <USBD_SetClassConfig+0x8>

0800dc70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800dc70:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800dc72:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	4798      	blx	r3

  return USBD_OK;
}
 800dc7a:	2000      	movs	r0, #0
 800dc7c:	bd08      	pop	{r3, pc}

0800dc7e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dc7e:	b538      	push	{r3, r4, r5, lr}
 800dc80:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dc82:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800dc86:	4628      	mov	r0, r5
 800dc88:	f000 fae5 	bl	800e256 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dc8c:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800dc8e:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800dc92:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800dc96:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800dc9a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800dc9e:	f001 031f 	and.w	r3, r1, #31
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d008      	beq.n	800dcb8 <USBD_LL_SetupStage+0x3a>
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d00b      	beq.n	800dcc2 <USBD_LL_SetupStage+0x44>
 800dcaa:	b97b      	cbnz	r3, 800dccc <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800dcac:	4629      	mov	r1, r5
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 f8fc 	bl	800deac <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800dcb8:	4629      	mov	r1, r5
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f000 fa1e 	bl	800e0fc <USBD_StdItfReq>
      break;
 800dcc0:	e7f8      	b.n	800dcb4 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	f000 fa3d 	bl	800e144 <USBD_StdEPReq>
      break;
 800dcca:	e7f3      	b.n	800dcb4 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dccc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f000 fd03 	bl	800e6dc <USBD_LL_StallEP>
      break;
 800dcd6:	e7ed      	b.n	800dcb4 <USBD_LL_SetupStage+0x36>

0800dcd8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800dcde:	460d      	mov	r5, r1
 800dce0:	bb39      	cbnz	r1, 800dd32 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dce2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800dce6:	2b03      	cmp	r3, #3
 800dce8:	d11c      	bne.n	800dd24 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dcea:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 800dcee:	4296      	cmp	r6, r2
 800dcf0:	d90b      	bls.n	800dd0a <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800dcf2:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 800dcf4:	42b2      	cmp	r2, r6
        pep->rem_length -= pep->maxpacket;
 800dcf6:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800dcfa:	bf8c      	ite	hi
 800dcfc:	b2b2      	uxthhi	r2, r6
 800dcfe:	b292      	uxthls	r2, r2
 800dd00:	4639      	mov	r1, r7
 800dd02:	f000 fb05 	bl	800e310 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800dd06:	4628      	mov	r0, r5
 800dd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800dd0a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	b123      	cbz	r3, 800dd1c <USBD_LL_DataOutStage+0x44>
 800dd12:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dd16:	2a03      	cmp	r2, #3
 800dd18:	d100      	bne.n	800dd1c <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800dd1a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f000 faff 	bl	800e320 <USBD_CtlSendStatus>
 800dd22:	e7f0      	b.n	800dd06 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800dd24:	2b05      	cmp	r3, #5
 800dd26:	d1ee      	bne.n	800dd06 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 800dd28:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800dd2c:	f000 fcd6 	bl	800e6dc <USBD_LL_StallEP>
 800dd30:	e7e9      	b.n	800dd06 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800dd32:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dd36:	699b      	ldr	r3, [r3, #24]
 800dd38:	b133      	cbz	r3, 800dd48 <USBD_LL_DataOutStage+0x70>
 800dd3a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dd3e:	2a03      	cmp	r2, #3
 800dd40:	d102      	bne.n	800dd48 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800dd42:	4798      	blx	r3
  return USBD_OK;
 800dd44:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 800dd46:	e7de      	b.n	800dd06 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 800dd48:	2502      	movs	r5, #2
 800dd4a:	e7dc      	b.n	800dd06 <USBD_LL_DataOutStage+0x2e>

0800dd4c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800dd52:	460d      	mov	r5, r1
 800dd54:	2900      	cmp	r1, #0
 800dd56:	d147      	bne.n	800dde8 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd58:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d13c      	bne.n	800ddda <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd60:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800dd64:	429e      	cmp	r6, r3
 800dd66:	d914      	bls.n	800dd92 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800dd68:	1af3      	subs	r3, r6, r3
 800dd6a:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	4639      	mov	r1, r7
 800dd70:	f000 fab9 	bl	800e2e6 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd74:	462b      	mov	r3, r5
 800dd76:	462a      	mov	r2, r5
 800dd78:	4629      	mov	r1, r5
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f000 fce5 	bl	800e74a <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800dd80:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d102      	bne.n	800dd8e <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800dd8e:	4628      	mov	r0, r5
 800dd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800dd92:	69c2      	ldr	r2, [r0, #28]
 800dd94:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd98:	fb03 2616 	mls	r6, r3, r6, r2
 800dd9c:	b95e      	cbnz	r6, 800ddb6 <USBD_LL_DataInStage+0x6a>
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d809      	bhi.n	800ddb6 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800dda2:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d205      	bcs.n	800ddb6 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ddaa:	460a      	mov	r2, r1
 800ddac:	f000 fa9b 	bl	800e2e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ddb0:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800ddb4:	e7de      	b.n	800dd74 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ddb6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	b12b      	cbz	r3, 800ddca <USBD_LL_DataInStage+0x7e>
 800ddbe:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800ddc2:	2a03      	cmp	r2, #3
 800ddc4:	d101      	bne.n	800ddca <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800ddca:	2180      	movs	r1, #128	; 0x80
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f000 fc85 	bl	800e6dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 faaf 	bl	800e336 <USBD_CtlReceiveStatus>
 800ddd8:	e7d2      	b.n	800dd80 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ddda:	f033 0304 	bics.w	r3, r3, #4
 800ddde:	d1cf      	bne.n	800dd80 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800dde0:	2180      	movs	r1, #128	; 0x80
 800dde2:	f000 fc7b 	bl	800e6dc <USBD_LL_StallEP>
 800dde6:	e7cb      	b.n	800dd80 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 800dde8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ddec:	695b      	ldr	r3, [r3, #20]
 800ddee:	b133      	cbz	r3, 800ddfe <USBD_LL_DataInStage+0xb2>
 800ddf0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ddf4:	2a03      	cmp	r2, #3
 800ddf6:	d102      	bne.n	800ddfe <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800ddf8:	4798      	blx	r3
  return USBD_OK;
 800ddfa:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 800ddfc:	e7c7      	b.n	800dd8e <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 800ddfe:	2502      	movs	r5, #2
 800de00:	e7c5      	b.n	800dd8e <USBD_LL_DataInStage+0x42>

0800de02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de02:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de04:	2200      	movs	r2, #0
{
 800de06:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de08:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800de0a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800de0c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de0e:	2340      	movs	r3, #64	; 0x40
 800de10:	f000 fc4f 	bl	800e6b2 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de14:	4633      	mov	r3, r6
 800de16:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800de18:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800de1c:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de20:	2200      	movs	r2, #0
 800de22:	4620      	mov	r0, r4
 800de24:	f000 fc45 	bl	800e6b2 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800de28:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800de2c:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800de2e:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800de30:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de32:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de36:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800de3a:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800de3c:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800de40:	b123      	cbz	r3, 800de4c <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800de42:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800de46:	4620      	mov	r0, r4
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800de4c:	2000      	movs	r0, #0
 800de4e:	bd70      	pop	{r4, r5, r6, pc}

0800de50 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800de50:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800de52:	2000      	movs	r0, #0
 800de54:	4770      	bx	lr

0800de56 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800de56:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800de5a:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800de5e:	2304      	movs	r3, #4
 800de60:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800de64:	2000      	movs	r0, #0
 800de66:	4770      	bx	lr

0800de68 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800de68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800de6c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800de6e:	bf04      	itt	eq
 800de70:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800de74:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800de78:	2000      	movs	r0, #0
 800de7a:	4770      	bx	lr

0800de7c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800de7c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de7e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800de82:	2a03      	cmp	r2, #3
 800de84:	d104      	bne.n	800de90 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800de86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800de8a:	69db      	ldr	r3, [r3, #28]
 800de8c:	b103      	cbz	r3, 800de90 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800de8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800de90:	2000      	movs	r0, #0
 800de92:	bd08      	pop	{r3, pc}

0800de94 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800de94:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800de96:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800de98:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800de9a:	f000 fc1f 	bl	800e6dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800de9e:	4620      	mov	r0, r4
 800dea0:	2100      	movs	r1, #0
}
 800dea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800dea6:	f000 bc19 	b.w	800e6dc <USBD_LL_StallEP>
	...

0800deac <USBD_StdDevReq>:
{
 800deac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deae:	780b      	ldrb	r3, [r1, #0]
 800deb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deb4:	2b20      	cmp	r3, #32
{
 800deb6:	4604      	mov	r4, r0
 800deb8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deba:	d012      	beq.n	800dee2 <USBD_StdDevReq+0x36>
 800debc:	2b40      	cmp	r3, #64	; 0x40
 800debe:	d010      	beq.n	800dee2 <USBD_StdDevReq+0x36>
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d151      	bne.n	800df68 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 800dec4:	784b      	ldrb	r3, [r1, #1]
 800dec6:	2b09      	cmp	r3, #9
 800dec8:	d84e      	bhi.n	800df68 <USBD_StdDevReq+0xbc>
 800deca:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dece:	00ee      	.short	0x00ee
 800ded0:	004d0109 	.word	0x004d0109
 800ded4:	004d0102 	.word	0x004d0102
 800ded8:	00130087 	.word	0x00130087
 800dedc:	00d6004d 	.word	0x00d6004d
 800dee0:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 800dee2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800dee6:	4629      	mov	r1, r5
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	4620      	mov	r0, r4
 800deec:	4798      	blx	r3
}
 800deee:	2000      	movs	r0, #0
 800def0:	b003      	add	sp, #12
 800def2:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800def4:	2300      	movs	r3, #0
 800def6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800defa:	884b      	ldrh	r3, [r1, #2]
 800defc:	0a1a      	lsrs	r2, r3, #8
 800defe:	3a01      	subs	r2, #1
 800df00:	2a06      	cmp	r2, #6
 800df02:	d831      	bhi.n	800df68 <USBD_StdDevReq+0xbc>
 800df04:	e8df f002 	tbb	[pc, r2]
 800df08:	30231604 	.word	0x30231604
 800df0c:	4830      	.short	0x4830
 800df0e:	52          	.byte	0x52
 800df0f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df10:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800df14:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800df16:	7c20      	ldrb	r0, [r4, #16]
 800df18:	f10d 0106 	add.w	r1, sp, #6
 800df1c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800df1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800df22:	2a00      	cmp	r2, #0
 800df24:	d056      	beq.n	800dfd4 <USBD_StdDevReq+0x128>
 800df26:	88eb      	ldrh	r3, [r5, #6]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d14a      	bne.n	800dfc2 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800df2c:	4620      	mov	r0, r4
 800df2e:	f000 f9f7 	bl	800e320 <USBD_CtlSendStatus>
 800df32:	e7dc      	b.n	800deee <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df34:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800df36:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df3a:	b932      	cbnz	r2, 800df4a <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800df3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800df3e:	f10d 0006 	add.w	r0, sp, #6
 800df42:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df44:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df46:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800df48:	e7e9      	b.n	800df1e <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800df4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4c:	e7f7      	b.n	800df3e <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	2b05      	cmp	r3, #5
 800df52:	d809      	bhi.n	800df68 <USBD_StdDevReq+0xbc>
 800df54:	e8df f003 	tbb	[pc, r3]
 800df58:	14100c03 	.word	0x14100c03
 800df5c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df5e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800df62:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800df64:	2b00      	cmp	r3, #0
 800df66:	d1d6      	bne.n	800df16 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 800df68:	4620      	mov	r0, r4
 800df6a:	f7ff ff93 	bl	800de94 <USBD_CtlError.constprop.0>
        break;
 800df6e:	e7be      	b.n	800deee <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800df70:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	e7f5      	b.n	800df64 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800df78:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	e7f1      	b.n	800df64 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800df80:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800df84:	691b      	ldr	r3, [r3, #16]
 800df86:	e7ed      	b.n	800df64 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800df88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800df8c:	695b      	ldr	r3, [r3, #20]
 800df8e:	e7e9      	b.n	800df64 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800df90:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800df94:	699b      	ldr	r3, [r3, #24]
 800df96:	e7e5      	b.n	800df64 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df98:	7c03      	ldrb	r3, [r0, #16]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1e4      	bne.n	800df68 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800df9e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dfa2:	f10d 0006 	add.w	r0, sp, #6
 800dfa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa8:	4798      	blx	r3
  if (err != 0U)
 800dfaa:	e7b8      	b.n	800df1e <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfac:	7c03      	ldrb	r3, [r0, #16]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1da      	bne.n	800df68 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dfb2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dfb6:	f10d 0006 	add.w	r0, sp, #6
 800dfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfbc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dfbe:	2307      	movs	r3, #7
 800dfc0:	e7c1      	b.n	800df46 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	bf28      	it	cs
 800dfc6:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dfc8:	4601      	mov	r1, r0
 800dfca:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800dfcc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dfd0:	f000 f97c 	bl	800e2cc <USBD_CtlSendData>
    if (req->wLength == 0U)
 800dfd4:	88eb      	ldrh	r3, [r5, #6]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d189      	bne.n	800deee <USBD_StdDevReq+0x42>
 800dfda:	e7a7      	b.n	800df2c <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dfdc:	888b      	ldrh	r3, [r1, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1c2      	bne.n	800df68 <USBD_StdDevReq+0xbc>
 800dfe2:	88cb      	ldrh	r3, [r1, #6]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1bf      	bne.n	800df68 <USBD_StdDevReq+0xbc>
 800dfe8:	884d      	ldrh	r5, [r1, #2]
 800dfea:	2d7f      	cmp	r5, #127	; 0x7f
 800dfec:	d8bc      	bhi.n	800df68 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d0b8      	beq.n	800df68 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dff6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800dff8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dffc:	f000 fb93 	bl	800e726 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e000:	4620      	mov	r0, r4
 800e002:	f000 f98d 	bl	800e320 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800e006:	b11d      	cbz	r5, 800e010 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e008:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e00a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800e00e:	e76e      	b.n	800deee <USBD_StdDevReq+0x42>
 800e010:	2301      	movs	r3, #1
 800e012:	e7fa      	b.n	800e00a <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 800e014:	7889      	ldrb	r1, [r1, #2]
 800e016:	4d38      	ldr	r5, [pc, #224]	; (800e0f8 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e018:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800e01a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e01c:	d8a4      	bhi.n	800df68 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800e01e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e022:	2b02      	cmp	r3, #2
 800e024:	d008      	beq.n	800e038 <USBD_StdDevReq+0x18c>
 800e026:	2b03      	cmp	r3, #3
 800e028:	d015      	beq.n	800e056 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800e02a:	f7ff ff33 	bl	800de94 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e02e:	7829      	ldrb	r1, [r5, #0]
 800e030:	4620      	mov	r0, r4
 800e032:	f7ff fe1d 	bl	800dc70 <USBD_ClrClassConfig>
        break;
 800e036:	e75a      	b.n	800deee <USBD_StdDevReq+0x42>
        if (cfgidx)
 800e038:	2900      	cmp	r1, #0
 800e03a:	f43f af77 	beq.w	800df2c <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800e03e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e040:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800e042:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e044:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e048:	4620      	mov	r0, r4
 800e04a:	f7ff fe06 	bl	800dc5a <USBD_SetClassConfig>
 800e04e:	2802      	cmp	r0, #2
 800e050:	f47f af6c 	bne.w	800df2c <USBD_StdDevReq+0x80>
 800e054:	e788      	b.n	800df68 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 800e056:	b931      	cbnz	r1, 800e066 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e058:	2302      	movs	r3, #2
 800e05a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800e05e:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e060:	f7ff fe06 	bl	800dc70 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e064:	e762      	b.n	800df2c <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 800e066:	6841      	ldr	r1, [r0, #4]
 800e068:	2901      	cmp	r1, #1
 800e06a:	f43f af5f 	beq.w	800df2c <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e06e:	b2c9      	uxtb	r1, r1
 800e070:	f7ff fdfe 	bl	800dc70 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e074:	7829      	ldrb	r1, [r5, #0]
 800e076:	6061      	str	r1, [r4, #4]
 800e078:	e7e6      	b.n	800e048 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800e07a:	88ca      	ldrh	r2, [r1, #6]
 800e07c:	2a01      	cmp	r2, #1
 800e07e:	f47f af73 	bne.w	800df68 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800e082:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e086:	2b02      	cmp	r3, #2
 800e088:	d80a      	bhi.n	800e0a0 <USBD_StdDevReq+0x1f4>
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f43f af6c 	beq.w	800df68 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 800e090:	4601      	mov	r1, r0
 800e092:	2300      	movs	r3, #0
 800e094:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e098:	4620      	mov	r0, r4
 800e09a:	f000 f917 	bl	800e2cc <USBD_CtlSendData>
      break;
 800e09e:	e726      	b.n	800deee <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	f47f af61 	bne.w	800df68 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e0a6:	1d01      	adds	r1, r0, #4
 800e0a8:	e7f6      	b.n	800e098 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800e0aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	f63f af59 	bhi.w	800df68 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800e0b6:	88ca      	ldrh	r2, [r1, #6]
 800e0b8:	2a02      	cmp	r2, #2
 800e0ba:	f47f af55 	bne.w	800df68 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 800e0be:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e0c2:	4601      	mov	r1, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	bf14      	ite	ne
 800e0c8:	4613      	movne	r3, r2
 800e0ca:	2300      	moveq	r3, #0
 800e0cc:	f841 3f0c 	str.w	r3, [r1, #12]!
 800e0d0:	e7e2      	b.n	800e098 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0d2:	884b      	ldrh	r3, [r1, #2]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	f47f af0a 	bne.w	800deee <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800e0da:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800e0de:	e725      	b.n	800df2c <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800e0e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	2b02      	cmp	r3, #2
 800e0e8:	f63f af3e 	bhi.w	800df68 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0ec:	884b      	ldrh	r3, [r1, #2]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	f47f aefd 	bne.w	800deee <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e7f0      	b.n	800e0da <USBD_StdDevReq+0x22e>
 800e0f8:	200027a0 	.word	0x200027a0

0800e0fc <USBD_StdItfReq>:
{
 800e0fc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0fe:	780b      	ldrb	r3, [r1, #0]
 800e100:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800e104:	2a40      	cmp	r2, #64	; 0x40
{
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e10a:	d001      	beq.n	800e110 <USBD_StdItfReq+0x14>
 800e10c:	065b      	lsls	r3, r3, #25
 800e10e:	d415      	bmi.n	800e13c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800e110:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e114:	3b01      	subs	r3, #1
 800e116:	2b02      	cmp	r3, #2
 800e118:	d810      	bhi.n	800e13c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e11a:	792b      	ldrb	r3, [r5, #4]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d80d      	bhi.n	800e13c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e120:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800e124:	4629      	mov	r1, r5
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	4620      	mov	r0, r4
 800e12a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e12c:	88eb      	ldrh	r3, [r5, #6]
 800e12e:	b91b      	cbnz	r3, 800e138 <USBD_StdItfReq+0x3c>
 800e130:	b910      	cbnz	r0, 800e138 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800e132:	4620      	mov	r0, r4
 800e134:	f000 f8f4 	bl	800e320 <USBD_CtlSendStatus>
}
 800e138:	2000      	movs	r0, #0
 800e13a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800e13c:	4620      	mov	r0, r4
 800e13e:	f7ff fea9 	bl	800de94 <USBD_CtlError.constprop.0>
          break;
 800e142:	e7f9      	b.n	800e138 <USBD_StdItfReq+0x3c>

0800e144 <USBD_StdEPReq>:
{
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	780a      	ldrb	r2, [r1, #0]
 800e148:	f002 0260 	and.w	r2, r2, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e14c:	2a20      	cmp	r2, #32
{
 800e14e:	4604      	mov	r4, r0
 800e150:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e152:	d028      	beq.n	800e1a6 <USBD_StdEPReq+0x62>
 800e154:	2a40      	cmp	r2, #64	; 0x40
 800e156:	d026      	beq.n	800e1a6 <USBD_StdEPReq+0x62>
 800e158:	bb9a      	cbnz	r2, 800e1c2 <USBD_StdEPReq+0x7e>
      switch (req->bRequest)
 800e15a:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800e15c:	888d      	ldrh	r5, [r1, #4]
 800e15e:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 800e160:	2a01      	cmp	r2, #1
 800e162:	d03e      	beq.n	800e1e2 <USBD_StdEPReq+0x9e>
 800e164:	2a03      	cmp	r2, #3
 800e166:	d026      	beq.n	800e1b6 <USBD_StdEPReq+0x72>
 800e168:	bb5a      	cbnz	r2, 800e1c2 <USBD_StdEPReq+0x7e>
          switch (pdev->dev_state)
 800e16a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d04e      	beq.n	800e210 <USBD_StdEPReq+0xcc>
 800e172:	2b03      	cmp	r3, #3
 800e174:	d125      	bne.n	800e1c2 <USBD_StdEPReq+0x7e>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e176:	f001 030f 	and.w	r3, r1, #15
 800e17a:	2214      	movs	r2, #20
              if ((ep_addr & 0x80U) == 0x80U)
 800e17c:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e180:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800e184:	d053      	beq.n	800e22e <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e186:	699b      	ldr	r3, [r3, #24]
 800e188:	b1db      	cbz	r3, 800e1c2 <USBD_StdEPReq+0x7e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e18a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e18e:	3501      	adds	r5, #1
 800e190:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e194:	eb00 0585 	add.w	r5, r0, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e198:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800e19c:	d153      	bne.n	800e246 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 800e19e:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e1a0:	2202      	movs	r2, #2
 800e1a2:	4629      	mov	r1, r5
 800e1a4:	e03f      	b.n	800e226 <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 800e1a6:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6892      	ldr	r2, [r2, #8]
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	4790      	blx	r2
}
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 800e1b6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e1ba:	2a02      	cmp	r2, #2
 800e1bc:	d01f      	beq.n	800e1fe <USBD_StdEPReq+0xba>
 800e1be:	2a03      	cmp	r2, #3
 800e1c0:	d003      	beq.n	800e1ca <USBD_StdEPReq+0x86>
              USBD_CtlError(pdev, req);
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f7ff fe66 	bl	800de94 <USBD_CtlError.constprop.0>
              break;
 800e1c8:	e7f3      	b.n	800e1b2 <USBD_StdEPReq+0x6e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1ca:	885a      	ldrh	r2, [r3, #2]
 800e1cc:	b92a      	cbnz	r2, 800e1da <USBD_StdEPReq+0x96>
                if ((ep_addr != 0x00U) &&
 800e1ce:	064a      	lsls	r2, r1, #25
 800e1d0:	d003      	beq.n	800e1da <USBD_StdEPReq+0x96>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1d2:	88db      	ldrh	r3, [r3, #6]
 800e1d4:	b90b      	cbnz	r3, 800e1da <USBD_StdEPReq+0x96>
                  USBD_LL_StallEP(pdev, ep_addr);
 800e1d6:	f000 fa81 	bl	800e6dc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f000 f8a0 	bl	800e320 <USBD_CtlSendStatus>
              break;
 800e1e0:	e7e7      	b.n	800e1b2 <USBD_StdEPReq+0x6e>
          switch (pdev->dev_state)
 800e1e2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e1e6:	2a02      	cmp	r2, #2
 800e1e8:	d009      	beq.n	800e1fe <USBD_StdEPReq+0xba>
 800e1ea:	2a03      	cmp	r2, #3
 800e1ec:	d1e9      	bne.n	800e1c2 <USBD_StdEPReq+0x7e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1ee:	885b      	ldrh	r3, [r3, #2]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d1de      	bne.n	800e1b2 <USBD_StdEPReq+0x6e>
                if ((ep_addr & 0x7FU) != 0x00U)
 800e1f4:	064d      	lsls	r5, r1, #25
 800e1f6:	d0f0      	beq.n	800e1da <USBD_StdEPReq+0x96>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800e1f8:	f000 fa79 	bl	800e6ee <USBD_LL_ClearStallEP>
 800e1fc:	e7ed      	b.n	800e1da <USBD_StdEPReq+0x96>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1fe:	064b      	lsls	r3, r1, #25
 800e200:	d0df      	beq.n	800e1c2 <USBD_StdEPReq+0x7e>
                USBD_LL_StallEP(pdev, ep_addr);
 800e202:	f000 fa6b 	bl	800e6dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800e206:	2180      	movs	r1, #128	; 0x80
 800e208:	4620      	mov	r0, r4
 800e20a:	f000 fa67 	bl	800e6dc <USBD_LL_StallEP>
 800e20e:	e7d0      	b.n	800e1b2 <USBD_StdEPReq+0x6e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e210:	064a      	lsls	r2, r1, #25
 800e212:	d1d6      	bne.n	800e1c2 <USBD_StdEPReq+0x7e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e214:	062b      	lsls	r3, r5, #24
 800e216:	bf4c      	ite	mi
 800e218:	f100 0114 	addmi.w	r1, r0, #20
 800e21c:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800e220:	2300      	movs	r3, #0
 800e222:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e224:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e226:	4620      	mov	r0, r4
 800e228:	f000 f850 	bl	800e2cc <USBD_CtlSendData>
              break;
 800e22c:	e7c1      	b.n	800e1b2 <USBD_StdEPReq+0x6e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e22e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e232:	2b00      	cmp	r3, #0
 800e234:	d0c5      	beq.n	800e1c2 <USBD_StdEPReq+0x7e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e236:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e23a:	2314      	movs	r3, #20
 800e23c:	fb03 0505 	mla	r5, r3, r5, r0
 800e240:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800e244:	e7a8      	b.n	800e198 <USBD_StdEPReq+0x54>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800e246:	4620      	mov	r0, r4
 800e248:	f000 fa5a 	bl	800e700 <USBD_LL_IsStallEP>
 800e24c:	b108      	cbz	r0, 800e252 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 800e24e:	2301      	movs	r3, #1
 800e250:	e7a5      	b.n	800e19e <USBD_StdEPReq+0x5a>
                pep->status = 0x0000U;
 800e252:	6028      	str	r0, [r5, #0]
 800e254:	e7a4      	b.n	800e1a0 <USBD_StdEPReq+0x5c>

0800e256 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800e256:	780b      	ldrb	r3, [r1, #0]
 800e258:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e25a:	784b      	ldrb	r3, [r1, #1]
 800e25c:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e25e:	78ca      	ldrb	r2, [r1, #3]
 800e260:	788b      	ldrb	r3, [r1, #2]
 800e262:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e266:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e268:	794a      	ldrb	r2, [r1, #5]
 800e26a:	790b      	ldrb	r3, [r1, #4]
 800e26c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e270:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e272:	79ca      	ldrb	r2, [r1, #7]
 800e274:	798b      	ldrb	r3, [r1, #6]
 800e276:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e27a:	80c3      	strh	r3, [r0, #6]
}
 800e27c:	4770      	bx	lr

0800e27e <USBD_CtlError>:
{
 800e27e:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 800e280:	2180      	movs	r1, #128	; 0x80
{
 800e282:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800e284:	f000 fa2a 	bl	800e6dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e288:	4620      	mov	r0, r4
 800e28a:	2100      	movs	r1, #0
}
 800e28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800e290:	f000 ba24 	b.w	800e6dc <USBD_LL_StallEP>

0800e294 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e294:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800e296:	b188      	cbz	r0, 800e2bc <USBD_GetString+0x28>
 800e298:	2400      	movs	r4, #0
 800e29a:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800e29c:	4623      	mov	r3, r4
 800e29e:	3401      	adds	r4, #1
 800e2a0:	5d05      	ldrb	r5, [r0, r4]
 800e2a2:	2d00      	cmp	r5, #0
 800e2a4:	d1fa      	bne.n	800e29c <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	005b      	lsls	r3, r3, #1
 800e2ac:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e2ae:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e2b0:	2303      	movs	r3, #3
 800e2b2:	704b      	strb	r3, [r1, #1]
 800e2b4:	2302      	movs	r3, #2
    while (*desc != '\0')
 800e2b6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800e2ba:	b904      	cbnz	r4, 800e2be <USBD_GetString+0x2a>
}
 800e2bc:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800e2be:	1c5a      	adds	r2, r3, #1
 800e2c0:	b2d2      	uxtb	r2, r2
 800e2c2:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800e2c4:	3302      	adds	r3, #2
 800e2c6:	548d      	strb	r5, [r1, r2]
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	e7f4      	b.n	800e2b6 <USBD_GetString+0x22>

0800e2cc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e2cc:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e2ce:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e2d0:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length   = len;
 800e2d2:	e9c0 2207 	strd	r2, r2, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e2d6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e2da:	460a      	mov	r2, r1
 800e2dc:	2100      	movs	r1, #0
 800e2de:	f000 fa2b 	bl	800e738 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	bd10      	pop	{r4, pc}

0800e2e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e2e6:	b508      	push	{r3, lr}
 800e2e8:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e2ea:	460a      	mov	r2, r1
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	f000 fa23 	bl	800e738 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	bd08      	pop	{r3, pc}

0800e2f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e2f6:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e2f8:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2fa:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length   = len;
 800e2fc:	e9c0 2257 	strd	r2, r2, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e300:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e304:	460a      	mov	r2, r1
 800e306:	2100      	movs	r1, #0
 800e308:	f000 fa1f 	bl	800e74a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e30c:	2000      	movs	r0, #0
 800e30e:	bd10      	pop	{r4, pc}

0800e310 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e310:	b508      	push	{r3, lr}
 800e312:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e314:	460a      	mov	r2, r1
 800e316:	2100      	movs	r1, #0
 800e318:	f000 fa17 	bl	800e74a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e31c:	2000      	movs	r0, #0
 800e31e:	bd08      	pop	{r3, pc}

0800e320 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e320:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e322:	2304      	movs	r3, #4
 800e324:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e328:	2300      	movs	r3, #0
 800e32a:	461a      	mov	r2, r3
 800e32c:	4619      	mov	r1, r3
 800e32e:	f000 fa03 	bl	800e738 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e332:	2000      	movs	r0, #0
 800e334:	bd08      	pop	{r3, pc}

0800e336 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e336:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e338:	2305      	movs	r3, #5
 800e33a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e33e:	2300      	movs	r3, #0
 800e340:	461a      	mov	r2, r3
 800e342:	4619      	mov	r1, r3
 800e344:	f000 fa01 	bl	800e74a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e348:	2000      	movs	r0, #0
 800e34a:	bd08      	pop	{r3, pc}

0800e34c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e34c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e34e:	490f      	ldr	r1, [pc, #60]	; (800e38c <MX_USB_DEVICE_Init+0x40>)
 800e350:	480f      	ldr	r0, [pc, #60]	; (800e390 <MX_USB_DEVICE_Init+0x44>)
 800e352:	2200      	movs	r2, #0
 800e354:	f7ff fc60 	bl	800dc18 <USBD_Init>
 800e358:	b108      	cbz	r0, 800e35e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800e35a:	f7f9 f827 	bl	80073ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e35e:	490d      	ldr	r1, [pc, #52]	; (800e394 <MX_USB_DEVICE_Init+0x48>)
 800e360:	480b      	ldr	r0, [pc, #44]	; (800e390 <MX_USB_DEVICE_Init+0x44>)
 800e362:	f7ff fc6e 	bl	800dc42 <USBD_RegisterClass>
 800e366:	b108      	cbz	r0, 800e36c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800e368:	f7f9 f820 	bl	80073ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e36c:	490a      	ldr	r1, [pc, #40]	; (800e398 <MX_USB_DEVICE_Init+0x4c>)
 800e36e:	4808      	ldr	r0, [pc, #32]	; (800e390 <MX_USB_DEVICE_Init+0x44>)
 800e370:	f7ff fc0d 	bl	800db8e <USBD_CDC_RegisterInterface>
 800e374:	b108      	cbz	r0, 800e37a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800e376:	f7f9 f819 	bl	80073ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e37a:	4805      	ldr	r0, [pc, #20]	; (800e390 <MX_USB_DEVICE_Init+0x44>)
 800e37c:	f7ff fc68 	bl	800dc50 <USBD_Start>
 800e380:	b118      	cbz	r0, 800e38a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800e386:	f7f9 b811 	b.w	80073ac <Error_Handler>
}
 800e38a:	bd08      	pop	{r3, pc}
 800e38c:	20000134 	.word	0x20000134
 800e390:	200027a4 	.word	0x200027a4
 800e394:	20000014 	.word	0x20000014
 800e398:	20000124 	.word	0x20000124

0800e39c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800e39c:	2000      	movs	r0, #0
 800e39e:	4770      	bx	lr

0800e3a0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	4770      	bx	lr

0800e3a4 <CDC_Init_FS>:
{
 800e3a4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e3a6:	4c06      	ldr	r4, [pc, #24]	; (800e3c0 <CDC_Init_FS+0x1c>)
 800e3a8:	4906      	ldr	r1, [pc, #24]	; (800e3c4 <CDC_Init_FS+0x20>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f7ff fbf5 	bl	800db9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e3b2:	4905      	ldr	r1, [pc, #20]	; (800e3c8 <CDC_Init_FS+0x24>)
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	f7ff fbf9 	bl	800dbac <USBD_CDC_SetRxBuffer>
}
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	bd10      	pop	{r4, pc}
 800e3be:	bf00      	nop
 800e3c0:	200027a4 	.word	0x200027a4
 800e3c4:	20002e50 	.word	0x20002e50
 800e3c8:	20002a68 	.word	0x20002a68

0800e3cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e3cc:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e3ce:	4c09      	ldr	r4, [pc, #36]	; (800e3f4 <CDC_Transmit_FS+0x28>)
 800e3d0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800e3d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 800e3d8:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 800e3da:	b943      	cbnz	r3, 800e3ee <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e3dc:	4601      	mov	r1, r0
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f7ff fbdc 	bl	800db9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e3e4:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800e3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e3ea:	f7ff bbe5 	b.w	800dbb8 <USBD_CDC_TransmitPacket>
}
 800e3ee:	2001      	movs	r0, #1
 800e3f0:	bd10      	pop	{r4, pc}
 800e3f2:	bf00      	nop
 800e3f4:	200027a4 	.word	0x200027a4

0800e3f8 <CDC_Receive_FS>:
{
 800e3f8:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e3fa:	4e08      	ldr	r6, [pc, #32]	; (800e41c <CDC_Receive_FS+0x24>)
{
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e400:	4601      	mov	r1, r0
 800e402:	4630      	mov	r0, r6
 800e404:	f7ff fbd2 	bl	800dbac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e408:	4630      	mov	r0, r6
 800e40a:	f7ff fbee 	bl	800dbea <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 800e40e:	4620      	mov	r0, r4
 800e410:	6829      	ldr	r1, [r5, #0]
 800e412:	f7f3 fde9 	bl	8001fe8 <CDC_ReceiveCallback>
}
 800e416:	2000      	movs	r0, #0
 800e418:	bd70      	pop	{r4, r5, r6, pc}
 800e41a:	bf00      	nop
 800e41c:	200027a4 	.word	0x200027a4

0800e420 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e420:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800e422:	4801      	ldr	r0, [pc, #4]	; (800e428 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800e424:	800b      	strh	r3, [r1, #0]
}
 800e426:	4770      	bx	lr
 800e428:	20000150 	.word	0x20000150

0800e42c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e42c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800e42e:	4801      	ldr	r0, [pc, #4]	; (800e434 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800e430:	800b      	strh	r3, [r1, #0]
}
 800e432:	4770      	bx	lr
 800e434:	20000164 	.word	0x20000164

0800e438 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e438:	2300      	movs	r3, #0
 800e43a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800e43c:	1c4d      	adds	r5, r1, #1
 800e43e:	461e      	mov	r6, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 800e440:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800e442:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800e446:	bf34      	ite	cc
 800e448:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e44a:	3437      	addcs	r4, #55	; 0x37
 800e44c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800e450:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800e454:	3301      	adds	r3, #1
 800e456:	b2dc      	uxtb	r4, r3
 800e458:	42a2      	cmp	r2, r4
    value = value << 4;
 800e45a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800e45e:	d8ef      	bhi.n	800e440 <IntToUnicode+0x8>
  }
}
 800e460:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e464 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800e464:	231a      	movs	r3, #26
{
 800e466:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800e468:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e46a:	4b0a      	ldr	r3, [pc, #40]	; (800e494 <USBD_FS_SerialStrDescriptor+0x30>)
 800e46c:	f8d3 07ac 	ldr.w	r0, [r3, #1964]	; 0x7ac
  deviceserial0 += deviceserial2;
 800e470:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
  if (deviceserial0 != 0)
 800e474:	1880      	adds	r0, r0, r2
 800e476:	d00a      	beq.n	800e48e <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e478:	f8d3 47b0 	ldr.w	r4, [r3, #1968]	; 0x7b0
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e47c:	4906      	ldr	r1, [pc, #24]	; (800e498 <USBD_FS_SerialStrDescriptor+0x34>)
 800e47e:	2208      	movs	r2, #8
 800e480:	f7ff ffda 	bl	800e438 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e484:	2204      	movs	r2, #4
 800e486:	3110      	adds	r1, #16
 800e488:	4620      	mov	r0, r4
 800e48a:	f7ff ffd5 	bl	800e438 <IntToUnicode>
}
 800e48e:	4803      	ldr	r0, [pc, #12]	; (800e49c <USBD_FS_SerialStrDescriptor+0x38>)
 800e490:	bd10      	pop	{r4, pc}
 800e492:	bf00      	nop
 800e494:	1ffff000 	.word	0x1ffff000
 800e498:	2000016a 	.word	0x2000016a
 800e49c:	20000168 	.word	0x20000168

0800e4a0 <USBD_FS_ManufacturerStrDescriptor>:
{
 800e4a0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e4a2:	4c04      	ldr	r4, [pc, #16]	; (800e4b4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800e4a4:	4804      	ldr	r0, [pc, #16]	; (800e4b8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 800e4a6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	f7ff fef3 	bl	800e294 <USBD_GetString>
}
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	bd10      	pop	{r4, pc}
 800e4b2:	bf00      	nop
 800e4b4:	20003238 	.word	0x20003238
 800e4b8:	08014c32 	.word	0x08014c32

0800e4bc <USBD_FS_ProductStrDescriptor>:
{
 800e4bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4be:	4c04      	ldr	r4, [pc, #16]	; (800e4d0 <USBD_FS_ProductStrDescriptor+0x14>)
 800e4c0:	4804      	ldr	r0, [pc, #16]	; (800e4d4 <USBD_FS_ProductStrDescriptor+0x18>)
{
 800e4c2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	f7ff fee5 	bl	800e294 <USBD_GetString>
}
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	bd10      	pop	{r4, pc}
 800e4ce:	bf00      	nop
 800e4d0:	20003238 	.word	0x20003238
 800e4d4:	08014c45 	.word	0x08014c45

0800e4d8 <USBD_FS_ConfigStrDescriptor>:
{
 800e4d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e4da:	4c04      	ldr	r4, [pc, #16]	; (800e4ec <USBD_FS_ConfigStrDescriptor+0x14>)
 800e4dc:	4804      	ldr	r0, [pc, #16]	; (800e4f0 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 800e4de:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e4e0:	4621      	mov	r1, r4
 800e4e2:	f7ff fed7 	bl	800e294 <USBD_GetString>
}
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	bd10      	pop	{r4, pc}
 800e4ea:	bf00      	nop
 800e4ec:	20003238 	.word	0x20003238
 800e4f0:	08014c5b 	.word	0x08014c5b

0800e4f4 <USBD_FS_InterfaceStrDescriptor>:
{
 800e4f4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4f6:	4c04      	ldr	r4, [pc, #16]	; (800e508 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800e4f8:	4804      	ldr	r0, [pc, #16]	; (800e50c <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 800e4fa:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4fc:	4621      	mov	r1, r4
 800e4fe:	f7ff fec9 	bl	800e294 <USBD_GetString>
}
 800e502:	4620      	mov	r0, r4
 800e504:	bd10      	pop	{r4, pc}
 800e506:	bf00      	nop
 800e508:	20003238 	.word	0x20003238
 800e50c:	08014c66 	.word	0x08014c66

0800e510 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800e510:	2803      	cmp	r0, #3
 800e512:	bf9a      	itte	ls
 800e514:	4b01      	ldrls	r3, [pc, #4]	; (800e51c <USBD_Get_USB_Status+0xc>)
 800e516:	5c18      	ldrbls	r0, [r3, r0]
{
 800e518:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800e51a:	4770      	bx	lr
 800e51c:	08014c74 	.word	0x08014c74

0800e520 <HAL_PCD_MspInit>:
{
 800e520:	b510      	push	{r4, lr}
 800e522:	4604      	mov	r4, r0
 800e524:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e526:	2214      	movs	r2, #20
 800e528:	2100      	movs	r1, #0
 800e52a:	a803      	add	r0, sp, #12
 800e52c:	f000 f976 	bl	800e81c <memset>
  if(pcdHandle->Instance==USB)
 800e530:	6822      	ldr	r2, [r4, #0]
 800e532:	4b17      	ldr	r3, [pc, #92]	; (800e590 <HAL_PCD_MspInit+0x70>)
 800e534:	429a      	cmp	r2, r3
 800e536:	d128      	bne.n	800e58a <HAL_PCD_MspInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e538:	4c16      	ldr	r4, [pc, #88]	; (800e594 <HAL_PCD_MspInit+0x74>)
 800e53a:	6963      	ldr	r3, [r4, #20]
 800e53c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e540:	6163      	str	r3, [r4, #20]
 800e542:	6963      	ldr	r3, [r4, #20]
 800e544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e548:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e54a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e54e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e550:	2302      	movs	r3, #2
 800e552:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800e556:	2103      	movs	r1, #3
 800e558:	230e      	movs	r3, #14
 800e55a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e55e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e562:	a903      	add	r1, sp, #12
 800e564:	f7fb f86a 	bl	800963c <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 800e568:	69e3      	ldr	r3, [r4, #28]
 800e56a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e56e:	61e3      	str	r3, [r4, #28]
 800e570:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e572:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800e574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e578:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e57a:	204b      	movs	r0, #75	; 0x4b
 800e57c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800e57e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e580:	f7fa fdb2 	bl	80090e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e584:	204b      	movs	r0, #75	; 0x4b
 800e586:	f7fa fde1 	bl	800914c <HAL_NVIC_EnableIRQ>
}
 800e58a:	b008      	add	sp, #32
 800e58c:	bd10      	pop	{r4, pc}
 800e58e:	bf00      	nop
 800e590:	40005c00 	.word	0x40005c00
 800e594:	40021000 	.word	0x40021000

0800e598 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e598:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800e59c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e5a0:	f7ff bb6d 	b.w	800dc7e <USBD_LL_SetupStage>

0800e5a4 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e5a4:	2328      	movs	r3, #40	; 0x28
 800e5a6:	fb03 0301 	mla	r3, r3, r1, r0
 800e5aa:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e5ae:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800e5b2:	f7ff bb91 	b.w	800dcd8 <USBD_LL_DataOutStage>

0800e5b6 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e5b6:	2328      	movs	r3, #40	; 0x28
 800e5b8:	fb03 0301 	mla	r3, r3, r1, r0
 800e5bc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e5c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5c2:	f7ff bbc3 	b.w	800dd4c <USBD_LL_DataInStage>

0800e5c6 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e5c6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e5ca:	f7ff bc57 	b.w	800de7c <USBD_LL_SOF>

0800e5ce <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e5ce:	6883      	ldr	r3, [r0, #8]
 800e5d0:	2b02      	cmp	r3, #2
{
 800e5d2:	b510      	push	{r4, lr}
 800e5d4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e5d6:	d001      	beq.n	800e5dc <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800e5d8:	f7f8 fee8 	bl	80073ac <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5dc:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	f7ff fc35 	bl	800de50 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5e6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800e5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5ee:	f7ff bc08 	b.w	800de02 <USBD_LL_Reset>
	...

0800e5f4 <HAL_PCD_SuspendCallback>:
{
 800e5f4:	b510      	push	{r4, lr}
 800e5f6:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5f8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e5fc:	f7ff fc2b 	bl	800de56 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800e600:	69a3      	ldr	r3, [r4, #24]
 800e602:	b123      	cbz	r3, 800e60e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e604:	4a02      	ldr	r2, [pc, #8]	; (800e610 <HAL_PCD_SuspendCallback+0x1c>)
 800e606:	6913      	ldr	r3, [r2, #16]
 800e608:	f043 0306 	orr.w	r3, r3, #6
 800e60c:	6113      	str	r3, [r2, #16]
}
 800e60e:	bd10      	pop	{r4, pc}
 800e610:	e000ed00 	.word	0xe000ed00

0800e614 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e614:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e618:	f7ff bc26 	b.w	800de68 <USBD_LL_Resume>

0800e61c <USBD_LL_Init>:
{
 800e61c:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e61e:	4a1e      	ldr	r2, [pc, #120]	; (800e698 <USBD_LL_Init+0x7c>)
{
 800e620:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800e622:	481e      	ldr	r0, [pc, #120]	; (800e69c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e624:	2308      	movs	r3, #8
 800e626:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e62a:	2302      	movs	r3, #2
  hpcd_USB_FS.pData = pdev;
 800e62c:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e630:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e632:	6103      	str	r3, [r0, #16]
  pdev->pData = &hpcd_USB_FS;
 800e634:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e638:	2300      	movs	r3, #0
 800e63a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e63c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e63e:	f7fb f8d5 	bl	80097ec <HAL_PCD_Init>
 800e642:	b108      	cbz	r0, 800e648 <USBD_LL_Init+0x2c>
    Error_Handler( );
 800e644:	f7f8 feb2 	bl	80073ac <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e648:	2200      	movs	r2, #0
 800e64a:	4611      	mov	r1, r2
 800e64c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e650:	2318      	movs	r3, #24
 800e652:	f7fb ff22 	bl	800a49a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e656:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e65a:	2358      	movs	r3, #88	; 0x58
 800e65c:	2200      	movs	r2, #0
 800e65e:	2180      	movs	r1, #128	; 0x80
 800e660:	f7fb ff1b 	bl	800a49a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e664:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e668:	23c0      	movs	r3, #192	; 0xc0
 800e66a:	2200      	movs	r2, #0
 800e66c:	2181      	movs	r1, #129	; 0x81
 800e66e:	f7fb ff14 	bl	800a49a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e672:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e676:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e67a:	2200      	movs	r2, #0
 800e67c:	2101      	movs	r1, #1
 800e67e:	f7fb ff0c 	bl	800a49a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e682:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e68a:	2200      	movs	r2, #0
 800e68c:	2182      	movs	r1, #130	; 0x82
 800e68e:	f7fb ff04 	bl	800a49a <HAL_PCDEx_PMAConfig>
}
 800e692:	2000      	movs	r0, #0
 800e694:	bd10      	pop	{r4, pc}
 800e696:	bf00      	nop
 800e698:	40005c00 	.word	0x40005c00
 800e69c:	20003438 	.word	0x20003438

0800e6a0 <USBD_LL_Start>:
{
 800e6a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e6a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e6a6:	f7fb f8f8 	bl	800989a <HAL_PCD_Start>
}
 800e6aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6ae:	f7ff bf2f 	b.w	800e510 <USBD_Get_USB_Status>

0800e6b2 <USBD_LL_OpenEP>:
{
 800e6b2:	b510      	push	{r4, lr}
 800e6b4:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e6b6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 800e6ba:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e6bc:	4623      	mov	r3, r4
 800e6be:	f7fb fde3 	bl	800a288 <HAL_PCD_EP_Open>
}
 800e6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6c6:	f7ff bf23 	b.w	800e510 <USBD_Get_USB_Status>

0800e6ca <USBD_LL_CloseEP>:
{
 800e6ca:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6cc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e6d0:	f7fb fe10 	bl	800a2f4 <HAL_PCD_EP_Close>
}
 800e6d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6d8:	f7ff bf1a 	b.w	800e510 <USBD_Get_USB_Status>

0800e6dc <USBD_LL_StallEP>:
{
 800e6dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e6e2:	f7fb fe72 	bl	800a3ca <HAL_PCD_EP_SetStall>
}
 800e6e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6ea:	f7ff bf11 	b.w	800e510 <USBD_Get_USB_Status>

0800e6ee <USBD_LL_ClearStallEP>:
{
 800e6ee:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e6f0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e6f4:	f7fb fe9b 	bl	800a42e <HAL_PCD_EP_ClrStall>
}
 800e6f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6fc:	f7ff bf08 	b.w	800e510 <USBD_Get_USB_Status>

0800e700 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800e700:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e704:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800e708:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e70c:	bf1d      	ittte	ne
 800e70e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800e712:	fb01 2102 	mlane	r1, r1, r2, r2
 800e716:	185b      	addne	r3, r3, r1
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e718:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e71c:	bf14      	ite	ne
 800e71e:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e720:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 800e724:	4770      	bx	lr

0800e726 <USBD_LL_SetUSBAddress>:
{
 800e726:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e728:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e72c:	f7fb f8ce 	bl	80098cc <HAL_PCD_SetAddress>
}
 800e730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e734:	f7ff beec 	b.w	800e510 <USBD_Get_USB_Status>

0800e738 <USBD_LL_Transmit>:
{
 800e738:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e73a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e73e:	f7fb fe24 	bl	800a38a <HAL_PCD_EP_Transmit>
}
 800e742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e746:	f7ff bee3 	b.w	800e510 <USBD_Get_USB_Status>

0800e74a <USBD_LL_PrepareReceive>:
{
 800e74a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e74c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e750:	f7fb fdfd 	bl	800a34e <HAL_PCD_EP_Receive>
}
 800e754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e758:	f7ff beda 	b.w	800e510 <USBD_Get_USB_Status>

0800e75c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e75c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e760:	f7fb be0b 	b.w	800a37a <HAL_PCD_EP_GetRxCount>

0800e764 <USBD_static_malloc>:
}
 800e764:	4800      	ldr	r0, [pc, #0]	; (800e768 <USBD_static_malloc+0x4>)
 800e766:	4770      	bx	lr
 800e768:	20003724 	.word	0x20003724

0800e76c <USBD_static_free>:
}
 800e76c:	4770      	bx	lr

0800e76e <HAL_PCDEx_SetConnectionState>:
}
 800e76e:	4770      	bx	lr

0800e770 <atoff>:
 800e770:	2100      	movs	r1, #0
 800e772:	f001 bb0f 	b.w	800fd94 <strtof>
	...

0800e778 <__errno>:
 800e778:	4b01      	ldr	r3, [pc, #4]	; (800e780 <__errno+0x8>)
 800e77a:	6818      	ldr	r0, [r3, #0]
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	20000184 	.word	0x20000184

0800e784 <__libc_init_array>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	4d0d      	ldr	r5, [pc, #52]	; (800e7bc <__libc_init_array+0x38>)
 800e788:	4c0d      	ldr	r4, [pc, #52]	; (800e7c0 <__libc_init_array+0x3c>)
 800e78a:	1b64      	subs	r4, r4, r5
 800e78c:	10a4      	asrs	r4, r4, #2
 800e78e:	2600      	movs	r6, #0
 800e790:	42a6      	cmp	r6, r4
 800e792:	d109      	bne.n	800e7a8 <__libc_init_array+0x24>
 800e794:	4d0b      	ldr	r5, [pc, #44]	; (800e7c4 <__libc_init_array+0x40>)
 800e796:	4c0c      	ldr	r4, [pc, #48]	; (800e7c8 <__libc_init_array+0x44>)
 800e798:	f004 fa5a 	bl	8012c50 <_init>
 800e79c:	1b64      	subs	r4, r4, r5
 800e79e:	10a4      	asrs	r4, r4, #2
 800e7a0:	2600      	movs	r6, #0
 800e7a2:	42a6      	cmp	r6, r4
 800e7a4:	d105      	bne.n	800e7b2 <__libc_init_array+0x2e>
 800e7a6:	bd70      	pop	{r4, r5, r6, pc}
 800e7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7ac:	4798      	blx	r3
 800e7ae:	3601      	adds	r6, #1
 800e7b0:	e7ee      	b.n	800e790 <__libc_init_array+0xc>
 800e7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7b6:	4798      	blx	r3
 800e7b8:	3601      	adds	r6, #1
 800e7ba:	e7f2      	b.n	800e7a2 <__libc_init_array+0x1e>
 800e7bc:	08015114 	.word	0x08015114
 800e7c0:	08015114 	.word	0x08015114
 800e7c4:	08015114 	.word	0x08015114
 800e7c8:	08015118 	.word	0x08015118

0800e7cc <memcpy>:
 800e7cc:	440a      	add	r2, r1
 800e7ce:	4291      	cmp	r1, r2
 800e7d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7d4:	d100      	bne.n	800e7d8 <memcpy+0xc>
 800e7d6:	4770      	bx	lr
 800e7d8:	b510      	push	{r4, lr}
 800e7da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7e2:	4291      	cmp	r1, r2
 800e7e4:	d1f9      	bne.n	800e7da <memcpy+0xe>
 800e7e6:	bd10      	pop	{r4, pc}

0800e7e8 <memmove>:
 800e7e8:	4288      	cmp	r0, r1
 800e7ea:	b510      	push	{r4, lr}
 800e7ec:	eb01 0402 	add.w	r4, r1, r2
 800e7f0:	d902      	bls.n	800e7f8 <memmove+0x10>
 800e7f2:	4284      	cmp	r4, r0
 800e7f4:	4623      	mov	r3, r4
 800e7f6:	d807      	bhi.n	800e808 <memmove+0x20>
 800e7f8:	1e43      	subs	r3, r0, #1
 800e7fa:	42a1      	cmp	r1, r4
 800e7fc:	d008      	beq.n	800e810 <memmove+0x28>
 800e7fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e802:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e806:	e7f8      	b.n	800e7fa <memmove+0x12>
 800e808:	4402      	add	r2, r0
 800e80a:	4601      	mov	r1, r0
 800e80c:	428a      	cmp	r2, r1
 800e80e:	d100      	bne.n	800e812 <memmove+0x2a>
 800e810:	bd10      	pop	{r4, pc}
 800e812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e81a:	e7f7      	b.n	800e80c <memmove+0x24>

0800e81c <memset>:
 800e81c:	4402      	add	r2, r0
 800e81e:	4603      	mov	r3, r0
 800e820:	4293      	cmp	r3, r2
 800e822:	d100      	bne.n	800e826 <memset+0xa>
 800e824:	4770      	bx	lr
 800e826:	f803 1b01 	strb.w	r1, [r3], #1
 800e82a:	e7f9      	b.n	800e820 <memset+0x4>

0800e82c <__cvt>:
 800e82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e830:	ec55 4b10 	vmov	r4, r5, d0
 800e834:	2d00      	cmp	r5, #0
 800e836:	460e      	mov	r6, r1
 800e838:	4619      	mov	r1, r3
 800e83a:	462b      	mov	r3, r5
 800e83c:	bfbb      	ittet	lt
 800e83e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e842:	461d      	movlt	r5, r3
 800e844:	2300      	movge	r3, #0
 800e846:	232d      	movlt	r3, #45	; 0x2d
 800e848:	700b      	strb	r3, [r1, #0]
 800e84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e84c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e850:	4691      	mov	r9, r2
 800e852:	f023 0820 	bic.w	r8, r3, #32
 800e856:	bfbc      	itt	lt
 800e858:	4622      	movlt	r2, r4
 800e85a:	4614      	movlt	r4, r2
 800e85c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e860:	d005      	beq.n	800e86e <__cvt+0x42>
 800e862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e866:	d100      	bne.n	800e86a <__cvt+0x3e>
 800e868:	3601      	adds	r6, #1
 800e86a:	2102      	movs	r1, #2
 800e86c:	e000      	b.n	800e870 <__cvt+0x44>
 800e86e:	2103      	movs	r1, #3
 800e870:	ab03      	add	r3, sp, #12
 800e872:	9301      	str	r3, [sp, #4]
 800e874:	ab02      	add	r3, sp, #8
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	ec45 4b10 	vmov	d0, r4, r5
 800e87c:	4653      	mov	r3, sl
 800e87e:	4632      	mov	r2, r6
 800e880:	f001 fb72 	bl	800ff68 <_dtoa_r>
 800e884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e888:	4607      	mov	r7, r0
 800e88a:	d102      	bne.n	800e892 <__cvt+0x66>
 800e88c:	f019 0f01 	tst.w	r9, #1
 800e890:	d022      	beq.n	800e8d8 <__cvt+0xac>
 800e892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e896:	eb07 0906 	add.w	r9, r7, r6
 800e89a:	d110      	bne.n	800e8be <__cvt+0x92>
 800e89c:	783b      	ldrb	r3, [r7, #0]
 800e89e:	2b30      	cmp	r3, #48	; 0x30
 800e8a0:	d10a      	bne.n	800e8b8 <__cvt+0x8c>
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	f7f2 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8ae:	b918      	cbnz	r0, 800e8b8 <__cvt+0x8c>
 800e8b0:	f1c6 0601 	rsb	r6, r6, #1
 800e8b4:	f8ca 6000 	str.w	r6, [sl]
 800e8b8:	f8da 3000 	ldr.w	r3, [sl]
 800e8bc:	4499      	add	r9, r3
 800e8be:	2200      	movs	r2, #0
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	f7f2 f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8ca:	b108      	cbz	r0, 800e8d0 <__cvt+0xa4>
 800e8cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800e8d0:	2230      	movs	r2, #48	; 0x30
 800e8d2:	9b03      	ldr	r3, [sp, #12]
 800e8d4:	454b      	cmp	r3, r9
 800e8d6:	d307      	bcc.n	800e8e8 <__cvt+0xbc>
 800e8d8:	9b03      	ldr	r3, [sp, #12]
 800e8da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8dc:	1bdb      	subs	r3, r3, r7
 800e8de:	4638      	mov	r0, r7
 800e8e0:	6013      	str	r3, [r2, #0]
 800e8e2:	b004      	add	sp, #16
 800e8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8e8:	1c59      	adds	r1, r3, #1
 800e8ea:	9103      	str	r1, [sp, #12]
 800e8ec:	701a      	strb	r2, [r3, #0]
 800e8ee:	e7f0      	b.n	800e8d2 <__cvt+0xa6>

0800e8f0 <__exponent>:
 800e8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2900      	cmp	r1, #0
 800e8f6:	bfb8      	it	lt
 800e8f8:	4249      	neglt	r1, r1
 800e8fa:	f803 2b02 	strb.w	r2, [r3], #2
 800e8fe:	bfb4      	ite	lt
 800e900:	222d      	movlt	r2, #45	; 0x2d
 800e902:	222b      	movge	r2, #43	; 0x2b
 800e904:	2909      	cmp	r1, #9
 800e906:	7042      	strb	r2, [r0, #1]
 800e908:	dd2a      	ble.n	800e960 <__exponent+0x70>
 800e90a:	f10d 0407 	add.w	r4, sp, #7
 800e90e:	46a4      	mov	ip, r4
 800e910:	270a      	movs	r7, #10
 800e912:	46a6      	mov	lr, r4
 800e914:	460a      	mov	r2, r1
 800e916:	fb91 f6f7 	sdiv	r6, r1, r7
 800e91a:	fb07 1516 	mls	r5, r7, r6, r1
 800e91e:	3530      	adds	r5, #48	; 0x30
 800e920:	2a63      	cmp	r2, #99	; 0x63
 800e922:	f104 34ff 	add.w	r4, r4, #4294967295
 800e926:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e92a:	4631      	mov	r1, r6
 800e92c:	dcf1      	bgt.n	800e912 <__exponent+0x22>
 800e92e:	3130      	adds	r1, #48	; 0x30
 800e930:	f1ae 0502 	sub.w	r5, lr, #2
 800e934:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e938:	1c44      	adds	r4, r0, #1
 800e93a:	4629      	mov	r1, r5
 800e93c:	4561      	cmp	r1, ip
 800e93e:	d30a      	bcc.n	800e956 <__exponent+0x66>
 800e940:	f10d 0209 	add.w	r2, sp, #9
 800e944:	eba2 020e 	sub.w	r2, r2, lr
 800e948:	4565      	cmp	r5, ip
 800e94a:	bf88      	it	hi
 800e94c:	2200      	movhi	r2, #0
 800e94e:	4413      	add	r3, r2
 800e950:	1a18      	subs	r0, r3, r0
 800e952:	b003      	add	sp, #12
 800e954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e95a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e95e:	e7ed      	b.n	800e93c <__exponent+0x4c>
 800e960:	2330      	movs	r3, #48	; 0x30
 800e962:	3130      	adds	r1, #48	; 0x30
 800e964:	7083      	strb	r3, [r0, #2]
 800e966:	70c1      	strb	r1, [r0, #3]
 800e968:	1d03      	adds	r3, r0, #4
 800e96a:	e7f1      	b.n	800e950 <__exponent+0x60>

0800e96c <_printf_float>:
 800e96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e970:	ed2d 8b02 	vpush	{d8}
 800e974:	b08d      	sub	sp, #52	; 0x34
 800e976:	460c      	mov	r4, r1
 800e978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e97c:	4616      	mov	r6, r2
 800e97e:	461f      	mov	r7, r3
 800e980:	4605      	mov	r5, r0
 800e982:	f002 fc4f 	bl	8011224 <_localeconv_r>
 800e986:	f8d0 a000 	ldr.w	sl, [r0]
 800e98a:	4650      	mov	r0, sl
 800e98c:	f7f1 fc20 	bl	80001d0 <strlen>
 800e990:	2300      	movs	r3, #0
 800e992:	930a      	str	r3, [sp, #40]	; 0x28
 800e994:	6823      	ldr	r3, [r4, #0]
 800e996:	9305      	str	r3, [sp, #20]
 800e998:	f8d8 3000 	ldr.w	r3, [r8]
 800e99c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e9a0:	3307      	adds	r3, #7
 800e9a2:	f023 0307 	bic.w	r3, r3, #7
 800e9a6:	f103 0208 	add.w	r2, r3, #8
 800e9aa:	f8c8 2000 	str.w	r2, [r8]
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e9b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e9ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e9be:	9307      	str	r3, [sp, #28]
 800e9c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800e9c4:	ee08 0a10 	vmov	s16, r0
 800e9c8:	4b9f      	ldr	r3, [pc, #636]	; (800ec48 <_printf_float+0x2dc>)
 800e9ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d2:	f7f2 f8ab 	bl	8000b2c <__aeabi_dcmpun>
 800e9d6:	bb88      	cbnz	r0, 800ea3c <_printf_float+0xd0>
 800e9d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9dc:	4b9a      	ldr	r3, [pc, #616]	; (800ec48 <_printf_float+0x2dc>)
 800e9de:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e2:	f7f2 f885 	bl	8000af0 <__aeabi_dcmple>
 800e9e6:	bb48      	cbnz	r0, 800ea3c <_printf_float+0xd0>
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	4640      	mov	r0, r8
 800e9ee:	4649      	mov	r1, r9
 800e9f0:	f7f2 f874 	bl	8000adc <__aeabi_dcmplt>
 800e9f4:	b110      	cbz	r0, 800e9fc <_printf_float+0x90>
 800e9f6:	232d      	movs	r3, #45	; 0x2d
 800e9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9fc:	4b93      	ldr	r3, [pc, #588]	; (800ec4c <_printf_float+0x2e0>)
 800e9fe:	4894      	ldr	r0, [pc, #592]	; (800ec50 <_printf_float+0x2e4>)
 800ea00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ea04:	bf94      	ite	ls
 800ea06:	4698      	movls	r8, r3
 800ea08:	4680      	movhi	r8, r0
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	6123      	str	r3, [r4, #16]
 800ea0e:	9b05      	ldr	r3, [sp, #20]
 800ea10:	f023 0204 	bic.w	r2, r3, #4
 800ea14:	6022      	str	r2, [r4, #0]
 800ea16:	f04f 0900 	mov.w	r9, #0
 800ea1a:	9700      	str	r7, [sp, #0]
 800ea1c:	4633      	mov	r3, r6
 800ea1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ea20:	4621      	mov	r1, r4
 800ea22:	4628      	mov	r0, r5
 800ea24:	f000 f9d8 	bl	800edd8 <_printf_common>
 800ea28:	3001      	adds	r0, #1
 800ea2a:	f040 8090 	bne.w	800eb4e <_printf_float+0x1e2>
 800ea2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea32:	b00d      	add	sp, #52	; 0x34
 800ea34:	ecbd 8b02 	vpop	{d8}
 800ea38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3c:	4642      	mov	r2, r8
 800ea3e:	464b      	mov	r3, r9
 800ea40:	4640      	mov	r0, r8
 800ea42:	4649      	mov	r1, r9
 800ea44:	f7f2 f872 	bl	8000b2c <__aeabi_dcmpun>
 800ea48:	b140      	cbz	r0, 800ea5c <_printf_float+0xf0>
 800ea4a:	464b      	mov	r3, r9
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	bfbc      	itt	lt
 800ea50:	232d      	movlt	r3, #45	; 0x2d
 800ea52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ea56:	487f      	ldr	r0, [pc, #508]	; (800ec54 <_printf_float+0x2e8>)
 800ea58:	4b7f      	ldr	r3, [pc, #508]	; (800ec58 <_printf_float+0x2ec>)
 800ea5a:	e7d1      	b.n	800ea00 <_printf_float+0x94>
 800ea5c:	6863      	ldr	r3, [r4, #4]
 800ea5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ea62:	9206      	str	r2, [sp, #24]
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	d13f      	bne.n	800eae8 <_printf_float+0x17c>
 800ea68:	2306      	movs	r3, #6
 800ea6a:	6063      	str	r3, [r4, #4]
 800ea6c:	9b05      	ldr	r3, [sp, #20]
 800ea6e:	6861      	ldr	r1, [r4, #4]
 800ea70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ea74:	2300      	movs	r3, #0
 800ea76:	9303      	str	r3, [sp, #12]
 800ea78:	ab0a      	add	r3, sp, #40	; 0x28
 800ea7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ea7e:	ab09      	add	r3, sp, #36	; 0x24
 800ea80:	ec49 8b10 	vmov	d0, r8, r9
 800ea84:	9300      	str	r3, [sp, #0]
 800ea86:	6022      	str	r2, [r4, #0]
 800ea88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	f7ff fecd 	bl	800e82c <__cvt>
 800ea92:	9b06      	ldr	r3, [sp, #24]
 800ea94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea96:	2b47      	cmp	r3, #71	; 0x47
 800ea98:	4680      	mov	r8, r0
 800ea9a:	d108      	bne.n	800eaae <_printf_float+0x142>
 800ea9c:	1cc8      	adds	r0, r1, #3
 800ea9e:	db02      	blt.n	800eaa6 <_printf_float+0x13a>
 800eaa0:	6863      	ldr	r3, [r4, #4]
 800eaa2:	4299      	cmp	r1, r3
 800eaa4:	dd41      	ble.n	800eb2a <_printf_float+0x1be>
 800eaa6:	f1ab 0b02 	sub.w	fp, fp, #2
 800eaaa:	fa5f fb8b 	uxtb.w	fp, fp
 800eaae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eab2:	d820      	bhi.n	800eaf6 <_printf_float+0x18a>
 800eab4:	3901      	subs	r1, #1
 800eab6:	465a      	mov	r2, fp
 800eab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eabc:	9109      	str	r1, [sp, #36]	; 0x24
 800eabe:	f7ff ff17 	bl	800e8f0 <__exponent>
 800eac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eac4:	1813      	adds	r3, r2, r0
 800eac6:	2a01      	cmp	r2, #1
 800eac8:	4681      	mov	r9, r0
 800eaca:	6123      	str	r3, [r4, #16]
 800eacc:	dc02      	bgt.n	800ead4 <_printf_float+0x168>
 800eace:	6822      	ldr	r2, [r4, #0]
 800ead0:	07d2      	lsls	r2, r2, #31
 800ead2:	d501      	bpl.n	800ead8 <_printf_float+0x16c>
 800ead4:	3301      	adds	r3, #1
 800ead6:	6123      	str	r3, [r4, #16]
 800ead8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d09c      	beq.n	800ea1a <_printf_float+0xae>
 800eae0:	232d      	movs	r3, #45	; 0x2d
 800eae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eae6:	e798      	b.n	800ea1a <_printf_float+0xae>
 800eae8:	9a06      	ldr	r2, [sp, #24]
 800eaea:	2a47      	cmp	r2, #71	; 0x47
 800eaec:	d1be      	bne.n	800ea6c <_printf_float+0x100>
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d1bc      	bne.n	800ea6c <_printf_float+0x100>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e7b9      	b.n	800ea6a <_printf_float+0xfe>
 800eaf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eafa:	d118      	bne.n	800eb2e <_printf_float+0x1c2>
 800eafc:	2900      	cmp	r1, #0
 800eafe:	6863      	ldr	r3, [r4, #4]
 800eb00:	dd0b      	ble.n	800eb1a <_printf_float+0x1ae>
 800eb02:	6121      	str	r1, [r4, #16]
 800eb04:	b913      	cbnz	r3, 800eb0c <_printf_float+0x1a0>
 800eb06:	6822      	ldr	r2, [r4, #0]
 800eb08:	07d0      	lsls	r0, r2, #31
 800eb0a:	d502      	bpl.n	800eb12 <_printf_float+0x1a6>
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	440b      	add	r3, r1
 800eb10:	6123      	str	r3, [r4, #16]
 800eb12:	65a1      	str	r1, [r4, #88]	; 0x58
 800eb14:	f04f 0900 	mov.w	r9, #0
 800eb18:	e7de      	b.n	800ead8 <_printf_float+0x16c>
 800eb1a:	b913      	cbnz	r3, 800eb22 <_printf_float+0x1b6>
 800eb1c:	6822      	ldr	r2, [r4, #0]
 800eb1e:	07d2      	lsls	r2, r2, #31
 800eb20:	d501      	bpl.n	800eb26 <_printf_float+0x1ba>
 800eb22:	3302      	adds	r3, #2
 800eb24:	e7f4      	b.n	800eb10 <_printf_float+0x1a4>
 800eb26:	2301      	movs	r3, #1
 800eb28:	e7f2      	b.n	800eb10 <_printf_float+0x1a4>
 800eb2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb30:	4299      	cmp	r1, r3
 800eb32:	db05      	blt.n	800eb40 <_printf_float+0x1d4>
 800eb34:	6823      	ldr	r3, [r4, #0]
 800eb36:	6121      	str	r1, [r4, #16]
 800eb38:	07d8      	lsls	r0, r3, #31
 800eb3a:	d5ea      	bpl.n	800eb12 <_printf_float+0x1a6>
 800eb3c:	1c4b      	adds	r3, r1, #1
 800eb3e:	e7e7      	b.n	800eb10 <_printf_float+0x1a4>
 800eb40:	2900      	cmp	r1, #0
 800eb42:	bfd4      	ite	le
 800eb44:	f1c1 0202 	rsble	r2, r1, #2
 800eb48:	2201      	movgt	r2, #1
 800eb4a:	4413      	add	r3, r2
 800eb4c:	e7e0      	b.n	800eb10 <_printf_float+0x1a4>
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	055a      	lsls	r2, r3, #21
 800eb52:	d407      	bmi.n	800eb64 <_printf_float+0x1f8>
 800eb54:	6923      	ldr	r3, [r4, #16]
 800eb56:	4642      	mov	r2, r8
 800eb58:	4631      	mov	r1, r6
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	47b8      	blx	r7
 800eb5e:	3001      	adds	r0, #1
 800eb60:	d12c      	bne.n	800ebbc <_printf_float+0x250>
 800eb62:	e764      	b.n	800ea2e <_printf_float+0xc2>
 800eb64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb68:	f240 80e0 	bls.w	800ed2c <_printf_float+0x3c0>
 800eb6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb70:	2200      	movs	r2, #0
 800eb72:	2300      	movs	r3, #0
 800eb74:	f7f1 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d034      	beq.n	800ebe6 <_printf_float+0x27a>
 800eb7c:	4a37      	ldr	r2, [pc, #220]	; (800ec5c <_printf_float+0x2f0>)
 800eb7e:	2301      	movs	r3, #1
 800eb80:	4631      	mov	r1, r6
 800eb82:	4628      	mov	r0, r5
 800eb84:	47b8      	blx	r7
 800eb86:	3001      	adds	r0, #1
 800eb88:	f43f af51 	beq.w	800ea2e <_printf_float+0xc2>
 800eb8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb90:	429a      	cmp	r2, r3
 800eb92:	db02      	blt.n	800eb9a <_printf_float+0x22e>
 800eb94:	6823      	ldr	r3, [r4, #0]
 800eb96:	07d8      	lsls	r0, r3, #31
 800eb98:	d510      	bpl.n	800ebbc <_printf_float+0x250>
 800eb9a:	ee18 3a10 	vmov	r3, s16
 800eb9e:	4652      	mov	r2, sl
 800eba0:	4631      	mov	r1, r6
 800eba2:	4628      	mov	r0, r5
 800eba4:	47b8      	blx	r7
 800eba6:	3001      	adds	r0, #1
 800eba8:	f43f af41 	beq.w	800ea2e <_printf_float+0xc2>
 800ebac:	f04f 0800 	mov.w	r8, #0
 800ebb0:	f104 091a 	add.w	r9, r4, #26
 800ebb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	4543      	cmp	r3, r8
 800ebba:	dc09      	bgt.n	800ebd0 <_printf_float+0x264>
 800ebbc:	6823      	ldr	r3, [r4, #0]
 800ebbe:	079b      	lsls	r3, r3, #30
 800ebc0:	f100 8105 	bmi.w	800edce <_printf_float+0x462>
 800ebc4:	68e0      	ldr	r0, [r4, #12]
 800ebc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebc8:	4298      	cmp	r0, r3
 800ebca:	bfb8      	it	lt
 800ebcc:	4618      	movlt	r0, r3
 800ebce:	e730      	b.n	800ea32 <_printf_float+0xc6>
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	464a      	mov	r2, r9
 800ebd4:	4631      	mov	r1, r6
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	47b8      	blx	r7
 800ebda:	3001      	adds	r0, #1
 800ebdc:	f43f af27 	beq.w	800ea2e <_printf_float+0xc2>
 800ebe0:	f108 0801 	add.w	r8, r8, #1
 800ebe4:	e7e6      	b.n	800ebb4 <_printf_float+0x248>
 800ebe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	dc39      	bgt.n	800ec60 <_printf_float+0x2f4>
 800ebec:	4a1b      	ldr	r2, [pc, #108]	; (800ec5c <_printf_float+0x2f0>)
 800ebee:	2301      	movs	r3, #1
 800ebf0:	4631      	mov	r1, r6
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	47b8      	blx	r7
 800ebf6:	3001      	adds	r0, #1
 800ebf8:	f43f af19 	beq.w	800ea2e <_printf_float+0xc2>
 800ebfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec00:	4313      	orrs	r3, r2
 800ec02:	d102      	bne.n	800ec0a <_printf_float+0x29e>
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	07d9      	lsls	r1, r3, #31
 800ec08:	d5d8      	bpl.n	800ebbc <_printf_float+0x250>
 800ec0a:	ee18 3a10 	vmov	r3, s16
 800ec0e:	4652      	mov	r2, sl
 800ec10:	4631      	mov	r1, r6
 800ec12:	4628      	mov	r0, r5
 800ec14:	47b8      	blx	r7
 800ec16:	3001      	adds	r0, #1
 800ec18:	f43f af09 	beq.w	800ea2e <_printf_float+0xc2>
 800ec1c:	f04f 0900 	mov.w	r9, #0
 800ec20:	f104 0a1a 	add.w	sl, r4, #26
 800ec24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec26:	425b      	negs	r3, r3
 800ec28:	454b      	cmp	r3, r9
 800ec2a:	dc01      	bgt.n	800ec30 <_printf_float+0x2c4>
 800ec2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec2e:	e792      	b.n	800eb56 <_printf_float+0x1ea>
 800ec30:	2301      	movs	r3, #1
 800ec32:	4652      	mov	r2, sl
 800ec34:	4631      	mov	r1, r6
 800ec36:	4628      	mov	r0, r5
 800ec38:	47b8      	blx	r7
 800ec3a:	3001      	adds	r0, #1
 800ec3c:	f43f aef7 	beq.w	800ea2e <_printf_float+0xc2>
 800ec40:	f109 0901 	add.w	r9, r9, #1
 800ec44:	e7ee      	b.n	800ec24 <_printf_float+0x2b8>
 800ec46:	bf00      	nop
 800ec48:	7fefffff 	.word	0x7fefffff
 800ec4c:	08014c7c 	.word	0x08014c7c
 800ec50:	08014c80 	.word	0x08014c80
 800ec54:	08014c88 	.word	0x08014c88
 800ec58:	08014c84 	.word	0x08014c84
 800ec5c:	0801307e 	.word	0x0801307e
 800ec60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec64:	429a      	cmp	r2, r3
 800ec66:	bfa8      	it	ge
 800ec68:	461a      	movge	r2, r3
 800ec6a:	2a00      	cmp	r2, #0
 800ec6c:	4691      	mov	r9, r2
 800ec6e:	dc37      	bgt.n	800ece0 <_printf_float+0x374>
 800ec70:	f04f 0b00 	mov.w	fp, #0
 800ec74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec78:	f104 021a 	add.w	r2, r4, #26
 800ec7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec7e:	9305      	str	r3, [sp, #20]
 800ec80:	eba3 0309 	sub.w	r3, r3, r9
 800ec84:	455b      	cmp	r3, fp
 800ec86:	dc33      	bgt.n	800ecf0 <_printf_float+0x384>
 800ec88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	db3b      	blt.n	800ed08 <_printf_float+0x39c>
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	07da      	lsls	r2, r3, #31
 800ec94:	d438      	bmi.n	800ed08 <_printf_float+0x39c>
 800ec96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec98:	9a05      	ldr	r2, [sp, #20]
 800ec9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec9c:	1a9a      	subs	r2, r3, r2
 800ec9e:	eba3 0901 	sub.w	r9, r3, r1
 800eca2:	4591      	cmp	r9, r2
 800eca4:	bfa8      	it	ge
 800eca6:	4691      	movge	r9, r2
 800eca8:	f1b9 0f00 	cmp.w	r9, #0
 800ecac:	dc35      	bgt.n	800ed1a <_printf_float+0x3ae>
 800ecae:	f04f 0800 	mov.w	r8, #0
 800ecb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ecb6:	f104 0a1a 	add.w	sl, r4, #26
 800ecba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecbe:	1a9b      	subs	r3, r3, r2
 800ecc0:	eba3 0309 	sub.w	r3, r3, r9
 800ecc4:	4543      	cmp	r3, r8
 800ecc6:	f77f af79 	ble.w	800ebbc <_printf_float+0x250>
 800ecca:	2301      	movs	r3, #1
 800eccc:	4652      	mov	r2, sl
 800ecce:	4631      	mov	r1, r6
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	47b8      	blx	r7
 800ecd4:	3001      	adds	r0, #1
 800ecd6:	f43f aeaa 	beq.w	800ea2e <_printf_float+0xc2>
 800ecda:	f108 0801 	add.w	r8, r8, #1
 800ecde:	e7ec      	b.n	800ecba <_printf_float+0x34e>
 800ece0:	4613      	mov	r3, r2
 800ece2:	4631      	mov	r1, r6
 800ece4:	4642      	mov	r2, r8
 800ece6:	4628      	mov	r0, r5
 800ece8:	47b8      	blx	r7
 800ecea:	3001      	adds	r0, #1
 800ecec:	d1c0      	bne.n	800ec70 <_printf_float+0x304>
 800ecee:	e69e      	b.n	800ea2e <_printf_float+0xc2>
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	4631      	mov	r1, r6
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	9205      	str	r2, [sp, #20]
 800ecf8:	47b8      	blx	r7
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	f43f ae97 	beq.w	800ea2e <_printf_float+0xc2>
 800ed00:	9a05      	ldr	r2, [sp, #20]
 800ed02:	f10b 0b01 	add.w	fp, fp, #1
 800ed06:	e7b9      	b.n	800ec7c <_printf_float+0x310>
 800ed08:	ee18 3a10 	vmov	r3, s16
 800ed0c:	4652      	mov	r2, sl
 800ed0e:	4631      	mov	r1, r6
 800ed10:	4628      	mov	r0, r5
 800ed12:	47b8      	blx	r7
 800ed14:	3001      	adds	r0, #1
 800ed16:	d1be      	bne.n	800ec96 <_printf_float+0x32a>
 800ed18:	e689      	b.n	800ea2e <_printf_float+0xc2>
 800ed1a:	9a05      	ldr	r2, [sp, #20]
 800ed1c:	464b      	mov	r3, r9
 800ed1e:	4442      	add	r2, r8
 800ed20:	4631      	mov	r1, r6
 800ed22:	4628      	mov	r0, r5
 800ed24:	47b8      	blx	r7
 800ed26:	3001      	adds	r0, #1
 800ed28:	d1c1      	bne.n	800ecae <_printf_float+0x342>
 800ed2a:	e680      	b.n	800ea2e <_printf_float+0xc2>
 800ed2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed2e:	2a01      	cmp	r2, #1
 800ed30:	dc01      	bgt.n	800ed36 <_printf_float+0x3ca>
 800ed32:	07db      	lsls	r3, r3, #31
 800ed34:	d538      	bpl.n	800eda8 <_printf_float+0x43c>
 800ed36:	2301      	movs	r3, #1
 800ed38:	4642      	mov	r2, r8
 800ed3a:	4631      	mov	r1, r6
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	47b8      	blx	r7
 800ed40:	3001      	adds	r0, #1
 800ed42:	f43f ae74 	beq.w	800ea2e <_printf_float+0xc2>
 800ed46:	ee18 3a10 	vmov	r3, s16
 800ed4a:	4652      	mov	r2, sl
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	4628      	mov	r0, r5
 800ed50:	47b8      	blx	r7
 800ed52:	3001      	adds	r0, #1
 800ed54:	f43f ae6b 	beq.w	800ea2e <_printf_float+0xc2>
 800ed58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2300      	movs	r3, #0
 800ed60:	f7f1 feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed64:	b9d8      	cbnz	r0, 800ed9e <_printf_float+0x432>
 800ed66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed68:	f108 0201 	add.w	r2, r8, #1
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	4631      	mov	r1, r6
 800ed70:	4628      	mov	r0, r5
 800ed72:	47b8      	blx	r7
 800ed74:	3001      	adds	r0, #1
 800ed76:	d10e      	bne.n	800ed96 <_printf_float+0x42a>
 800ed78:	e659      	b.n	800ea2e <_printf_float+0xc2>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	4652      	mov	r2, sl
 800ed7e:	4631      	mov	r1, r6
 800ed80:	4628      	mov	r0, r5
 800ed82:	47b8      	blx	r7
 800ed84:	3001      	adds	r0, #1
 800ed86:	f43f ae52 	beq.w	800ea2e <_printf_float+0xc2>
 800ed8a:	f108 0801 	add.w	r8, r8, #1
 800ed8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed90:	3b01      	subs	r3, #1
 800ed92:	4543      	cmp	r3, r8
 800ed94:	dcf1      	bgt.n	800ed7a <_printf_float+0x40e>
 800ed96:	464b      	mov	r3, r9
 800ed98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed9c:	e6dc      	b.n	800eb58 <_printf_float+0x1ec>
 800ed9e:	f04f 0800 	mov.w	r8, #0
 800eda2:	f104 0a1a 	add.w	sl, r4, #26
 800eda6:	e7f2      	b.n	800ed8e <_printf_float+0x422>
 800eda8:	2301      	movs	r3, #1
 800edaa:	4642      	mov	r2, r8
 800edac:	e7df      	b.n	800ed6e <_printf_float+0x402>
 800edae:	2301      	movs	r3, #1
 800edb0:	464a      	mov	r2, r9
 800edb2:	4631      	mov	r1, r6
 800edb4:	4628      	mov	r0, r5
 800edb6:	47b8      	blx	r7
 800edb8:	3001      	adds	r0, #1
 800edba:	f43f ae38 	beq.w	800ea2e <_printf_float+0xc2>
 800edbe:	f108 0801 	add.w	r8, r8, #1
 800edc2:	68e3      	ldr	r3, [r4, #12]
 800edc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edc6:	1a5b      	subs	r3, r3, r1
 800edc8:	4543      	cmp	r3, r8
 800edca:	dcf0      	bgt.n	800edae <_printf_float+0x442>
 800edcc:	e6fa      	b.n	800ebc4 <_printf_float+0x258>
 800edce:	f04f 0800 	mov.w	r8, #0
 800edd2:	f104 0919 	add.w	r9, r4, #25
 800edd6:	e7f4      	b.n	800edc2 <_printf_float+0x456>

0800edd8 <_printf_common>:
 800edd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eddc:	4616      	mov	r6, r2
 800edde:	4699      	mov	r9, r3
 800ede0:	688a      	ldr	r2, [r1, #8]
 800ede2:	690b      	ldr	r3, [r1, #16]
 800ede4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ede8:	4293      	cmp	r3, r2
 800edea:	bfb8      	it	lt
 800edec:	4613      	movlt	r3, r2
 800edee:	6033      	str	r3, [r6, #0]
 800edf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800edf4:	4607      	mov	r7, r0
 800edf6:	460c      	mov	r4, r1
 800edf8:	b10a      	cbz	r2, 800edfe <_printf_common+0x26>
 800edfa:	3301      	adds	r3, #1
 800edfc:	6033      	str	r3, [r6, #0]
 800edfe:	6823      	ldr	r3, [r4, #0]
 800ee00:	0699      	lsls	r1, r3, #26
 800ee02:	bf42      	ittt	mi
 800ee04:	6833      	ldrmi	r3, [r6, #0]
 800ee06:	3302      	addmi	r3, #2
 800ee08:	6033      	strmi	r3, [r6, #0]
 800ee0a:	6825      	ldr	r5, [r4, #0]
 800ee0c:	f015 0506 	ands.w	r5, r5, #6
 800ee10:	d106      	bne.n	800ee20 <_printf_common+0x48>
 800ee12:	f104 0a19 	add.w	sl, r4, #25
 800ee16:	68e3      	ldr	r3, [r4, #12]
 800ee18:	6832      	ldr	r2, [r6, #0]
 800ee1a:	1a9b      	subs	r3, r3, r2
 800ee1c:	42ab      	cmp	r3, r5
 800ee1e:	dc26      	bgt.n	800ee6e <_printf_common+0x96>
 800ee20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee24:	1e13      	subs	r3, r2, #0
 800ee26:	6822      	ldr	r2, [r4, #0]
 800ee28:	bf18      	it	ne
 800ee2a:	2301      	movne	r3, #1
 800ee2c:	0692      	lsls	r2, r2, #26
 800ee2e:	d42b      	bmi.n	800ee88 <_printf_common+0xb0>
 800ee30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee34:	4649      	mov	r1, r9
 800ee36:	4638      	mov	r0, r7
 800ee38:	47c0      	blx	r8
 800ee3a:	3001      	adds	r0, #1
 800ee3c:	d01e      	beq.n	800ee7c <_printf_common+0xa4>
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	68e5      	ldr	r5, [r4, #12]
 800ee42:	6832      	ldr	r2, [r6, #0]
 800ee44:	f003 0306 	and.w	r3, r3, #6
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	bf08      	it	eq
 800ee4c:	1aad      	subeq	r5, r5, r2
 800ee4e:	68a3      	ldr	r3, [r4, #8]
 800ee50:	6922      	ldr	r2, [r4, #16]
 800ee52:	bf0c      	ite	eq
 800ee54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee58:	2500      	movne	r5, #0
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	bfc4      	itt	gt
 800ee5e:	1a9b      	subgt	r3, r3, r2
 800ee60:	18ed      	addgt	r5, r5, r3
 800ee62:	2600      	movs	r6, #0
 800ee64:	341a      	adds	r4, #26
 800ee66:	42b5      	cmp	r5, r6
 800ee68:	d11a      	bne.n	800eea0 <_printf_common+0xc8>
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	e008      	b.n	800ee80 <_printf_common+0xa8>
 800ee6e:	2301      	movs	r3, #1
 800ee70:	4652      	mov	r2, sl
 800ee72:	4649      	mov	r1, r9
 800ee74:	4638      	mov	r0, r7
 800ee76:	47c0      	blx	r8
 800ee78:	3001      	adds	r0, #1
 800ee7a:	d103      	bne.n	800ee84 <_printf_common+0xac>
 800ee7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee84:	3501      	adds	r5, #1
 800ee86:	e7c6      	b.n	800ee16 <_printf_common+0x3e>
 800ee88:	18e1      	adds	r1, r4, r3
 800ee8a:	1c5a      	adds	r2, r3, #1
 800ee8c:	2030      	movs	r0, #48	; 0x30
 800ee8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee92:	4422      	add	r2, r4
 800ee94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee9c:	3302      	adds	r3, #2
 800ee9e:	e7c7      	b.n	800ee30 <_printf_common+0x58>
 800eea0:	2301      	movs	r3, #1
 800eea2:	4622      	mov	r2, r4
 800eea4:	4649      	mov	r1, r9
 800eea6:	4638      	mov	r0, r7
 800eea8:	47c0      	blx	r8
 800eeaa:	3001      	adds	r0, #1
 800eeac:	d0e6      	beq.n	800ee7c <_printf_common+0xa4>
 800eeae:	3601      	adds	r6, #1
 800eeb0:	e7d9      	b.n	800ee66 <_printf_common+0x8e>
	...

0800eeb4 <_printf_i>:
 800eeb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb8:	7e0f      	ldrb	r7, [r1, #24]
 800eeba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eebc:	2f78      	cmp	r7, #120	; 0x78
 800eebe:	4691      	mov	r9, r2
 800eec0:	4680      	mov	r8, r0
 800eec2:	460c      	mov	r4, r1
 800eec4:	469a      	mov	sl, r3
 800eec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eeca:	d807      	bhi.n	800eedc <_printf_i+0x28>
 800eecc:	2f62      	cmp	r7, #98	; 0x62
 800eece:	d80a      	bhi.n	800eee6 <_printf_i+0x32>
 800eed0:	2f00      	cmp	r7, #0
 800eed2:	f000 80d8 	beq.w	800f086 <_printf_i+0x1d2>
 800eed6:	2f58      	cmp	r7, #88	; 0x58
 800eed8:	f000 80a3 	beq.w	800f022 <_printf_i+0x16e>
 800eedc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eee4:	e03a      	b.n	800ef5c <_printf_i+0xa8>
 800eee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eeea:	2b15      	cmp	r3, #21
 800eeec:	d8f6      	bhi.n	800eedc <_printf_i+0x28>
 800eeee:	a101      	add	r1, pc, #4	; (adr r1, 800eef4 <_printf_i+0x40>)
 800eef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eef4:	0800ef4d 	.word	0x0800ef4d
 800eef8:	0800ef61 	.word	0x0800ef61
 800eefc:	0800eedd 	.word	0x0800eedd
 800ef00:	0800eedd 	.word	0x0800eedd
 800ef04:	0800eedd 	.word	0x0800eedd
 800ef08:	0800eedd 	.word	0x0800eedd
 800ef0c:	0800ef61 	.word	0x0800ef61
 800ef10:	0800eedd 	.word	0x0800eedd
 800ef14:	0800eedd 	.word	0x0800eedd
 800ef18:	0800eedd 	.word	0x0800eedd
 800ef1c:	0800eedd 	.word	0x0800eedd
 800ef20:	0800f06d 	.word	0x0800f06d
 800ef24:	0800ef91 	.word	0x0800ef91
 800ef28:	0800f04f 	.word	0x0800f04f
 800ef2c:	0800eedd 	.word	0x0800eedd
 800ef30:	0800eedd 	.word	0x0800eedd
 800ef34:	0800f08f 	.word	0x0800f08f
 800ef38:	0800eedd 	.word	0x0800eedd
 800ef3c:	0800ef91 	.word	0x0800ef91
 800ef40:	0800eedd 	.word	0x0800eedd
 800ef44:	0800eedd 	.word	0x0800eedd
 800ef48:	0800f057 	.word	0x0800f057
 800ef4c:	682b      	ldr	r3, [r5, #0]
 800ef4e:	1d1a      	adds	r2, r3, #4
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	602a      	str	r2, [r5, #0]
 800ef54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e0a3      	b.n	800f0a8 <_printf_i+0x1f4>
 800ef60:	6820      	ldr	r0, [r4, #0]
 800ef62:	6829      	ldr	r1, [r5, #0]
 800ef64:	0606      	lsls	r6, r0, #24
 800ef66:	f101 0304 	add.w	r3, r1, #4
 800ef6a:	d50a      	bpl.n	800ef82 <_printf_i+0xce>
 800ef6c:	680e      	ldr	r6, [r1, #0]
 800ef6e:	602b      	str	r3, [r5, #0]
 800ef70:	2e00      	cmp	r6, #0
 800ef72:	da03      	bge.n	800ef7c <_printf_i+0xc8>
 800ef74:	232d      	movs	r3, #45	; 0x2d
 800ef76:	4276      	negs	r6, r6
 800ef78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef7c:	485e      	ldr	r0, [pc, #376]	; (800f0f8 <_printf_i+0x244>)
 800ef7e:	230a      	movs	r3, #10
 800ef80:	e019      	b.n	800efb6 <_printf_i+0x102>
 800ef82:	680e      	ldr	r6, [r1, #0]
 800ef84:	602b      	str	r3, [r5, #0]
 800ef86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef8a:	bf18      	it	ne
 800ef8c:	b236      	sxthne	r6, r6
 800ef8e:	e7ef      	b.n	800ef70 <_printf_i+0xbc>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	6820      	ldr	r0, [r4, #0]
 800ef94:	1d19      	adds	r1, r3, #4
 800ef96:	6029      	str	r1, [r5, #0]
 800ef98:	0601      	lsls	r1, r0, #24
 800ef9a:	d501      	bpl.n	800efa0 <_printf_i+0xec>
 800ef9c:	681e      	ldr	r6, [r3, #0]
 800ef9e:	e002      	b.n	800efa6 <_printf_i+0xf2>
 800efa0:	0646      	lsls	r6, r0, #25
 800efa2:	d5fb      	bpl.n	800ef9c <_printf_i+0xe8>
 800efa4:	881e      	ldrh	r6, [r3, #0]
 800efa6:	4854      	ldr	r0, [pc, #336]	; (800f0f8 <_printf_i+0x244>)
 800efa8:	2f6f      	cmp	r7, #111	; 0x6f
 800efaa:	bf0c      	ite	eq
 800efac:	2308      	moveq	r3, #8
 800efae:	230a      	movne	r3, #10
 800efb0:	2100      	movs	r1, #0
 800efb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efb6:	6865      	ldr	r5, [r4, #4]
 800efb8:	60a5      	str	r5, [r4, #8]
 800efba:	2d00      	cmp	r5, #0
 800efbc:	bfa2      	ittt	ge
 800efbe:	6821      	ldrge	r1, [r4, #0]
 800efc0:	f021 0104 	bicge.w	r1, r1, #4
 800efc4:	6021      	strge	r1, [r4, #0]
 800efc6:	b90e      	cbnz	r6, 800efcc <_printf_i+0x118>
 800efc8:	2d00      	cmp	r5, #0
 800efca:	d04d      	beq.n	800f068 <_printf_i+0x1b4>
 800efcc:	4615      	mov	r5, r2
 800efce:	fbb6 f1f3 	udiv	r1, r6, r3
 800efd2:	fb03 6711 	mls	r7, r3, r1, r6
 800efd6:	5dc7      	ldrb	r7, [r0, r7]
 800efd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800efdc:	4637      	mov	r7, r6
 800efde:	42bb      	cmp	r3, r7
 800efe0:	460e      	mov	r6, r1
 800efe2:	d9f4      	bls.n	800efce <_printf_i+0x11a>
 800efe4:	2b08      	cmp	r3, #8
 800efe6:	d10b      	bne.n	800f000 <_printf_i+0x14c>
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	07de      	lsls	r6, r3, #31
 800efec:	d508      	bpl.n	800f000 <_printf_i+0x14c>
 800efee:	6923      	ldr	r3, [r4, #16]
 800eff0:	6861      	ldr	r1, [r4, #4]
 800eff2:	4299      	cmp	r1, r3
 800eff4:	bfde      	ittt	le
 800eff6:	2330      	movle	r3, #48	; 0x30
 800eff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800effc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f000:	1b52      	subs	r2, r2, r5
 800f002:	6122      	str	r2, [r4, #16]
 800f004:	f8cd a000 	str.w	sl, [sp]
 800f008:	464b      	mov	r3, r9
 800f00a:	aa03      	add	r2, sp, #12
 800f00c:	4621      	mov	r1, r4
 800f00e:	4640      	mov	r0, r8
 800f010:	f7ff fee2 	bl	800edd8 <_printf_common>
 800f014:	3001      	adds	r0, #1
 800f016:	d14c      	bne.n	800f0b2 <_printf_i+0x1fe>
 800f018:	f04f 30ff 	mov.w	r0, #4294967295
 800f01c:	b004      	add	sp, #16
 800f01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f022:	4835      	ldr	r0, [pc, #212]	; (800f0f8 <_printf_i+0x244>)
 800f024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f028:	6829      	ldr	r1, [r5, #0]
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f030:	6029      	str	r1, [r5, #0]
 800f032:	061d      	lsls	r5, r3, #24
 800f034:	d514      	bpl.n	800f060 <_printf_i+0x1ac>
 800f036:	07df      	lsls	r7, r3, #31
 800f038:	bf44      	itt	mi
 800f03a:	f043 0320 	orrmi.w	r3, r3, #32
 800f03e:	6023      	strmi	r3, [r4, #0]
 800f040:	b91e      	cbnz	r6, 800f04a <_printf_i+0x196>
 800f042:	6823      	ldr	r3, [r4, #0]
 800f044:	f023 0320 	bic.w	r3, r3, #32
 800f048:	6023      	str	r3, [r4, #0]
 800f04a:	2310      	movs	r3, #16
 800f04c:	e7b0      	b.n	800efb0 <_printf_i+0xfc>
 800f04e:	6823      	ldr	r3, [r4, #0]
 800f050:	f043 0320 	orr.w	r3, r3, #32
 800f054:	6023      	str	r3, [r4, #0]
 800f056:	2378      	movs	r3, #120	; 0x78
 800f058:	4828      	ldr	r0, [pc, #160]	; (800f0fc <_printf_i+0x248>)
 800f05a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f05e:	e7e3      	b.n	800f028 <_printf_i+0x174>
 800f060:	0659      	lsls	r1, r3, #25
 800f062:	bf48      	it	mi
 800f064:	b2b6      	uxthmi	r6, r6
 800f066:	e7e6      	b.n	800f036 <_printf_i+0x182>
 800f068:	4615      	mov	r5, r2
 800f06a:	e7bb      	b.n	800efe4 <_printf_i+0x130>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	6826      	ldr	r6, [r4, #0]
 800f070:	6961      	ldr	r1, [r4, #20]
 800f072:	1d18      	adds	r0, r3, #4
 800f074:	6028      	str	r0, [r5, #0]
 800f076:	0635      	lsls	r5, r6, #24
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	d501      	bpl.n	800f080 <_printf_i+0x1cc>
 800f07c:	6019      	str	r1, [r3, #0]
 800f07e:	e002      	b.n	800f086 <_printf_i+0x1d2>
 800f080:	0670      	lsls	r0, r6, #25
 800f082:	d5fb      	bpl.n	800f07c <_printf_i+0x1c8>
 800f084:	8019      	strh	r1, [r3, #0]
 800f086:	2300      	movs	r3, #0
 800f088:	6123      	str	r3, [r4, #16]
 800f08a:	4615      	mov	r5, r2
 800f08c:	e7ba      	b.n	800f004 <_printf_i+0x150>
 800f08e:	682b      	ldr	r3, [r5, #0]
 800f090:	1d1a      	adds	r2, r3, #4
 800f092:	602a      	str	r2, [r5, #0]
 800f094:	681d      	ldr	r5, [r3, #0]
 800f096:	6862      	ldr	r2, [r4, #4]
 800f098:	2100      	movs	r1, #0
 800f09a:	4628      	mov	r0, r5
 800f09c:	f7f1 f8a0 	bl	80001e0 <memchr>
 800f0a0:	b108      	cbz	r0, 800f0a6 <_printf_i+0x1f2>
 800f0a2:	1b40      	subs	r0, r0, r5
 800f0a4:	6060      	str	r0, [r4, #4]
 800f0a6:	6863      	ldr	r3, [r4, #4]
 800f0a8:	6123      	str	r3, [r4, #16]
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0b0:	e7a8      	b.n	800f004 <_printf_i+0x150>
 800f0b2:	6923      	ldr	r3, [r4, #16]
 800f0b4:	462a      	mov	r2, r5
 800f0b6:	4649      	mov	r1, r9
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	47d0      	blx	sl
 800f0bc:	3001      	adds	r0, #1
 800f0be:	d0ab      	beq.n	800f018 <_printf_i+0x164>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	079b      	lsls	r3, r3, #30
 800f0c4:	d413      	bmi.n	800f0ee <_printf_i+0x23a>
 800f0c6:	68e0      	ldr	r0, [r4, #12]
 800f0c8:	9b03      	ldr	r3, [sp, #12]
 800f0ca:	4298      	cmp	r0, r3
 800f0cc:	bfb8      	it	lt
 800f0ce:	4618      	movlt	r0, r3
 800f0d0:	e7a4      	b.n	800f01c <_printf_i+0x168>
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	4632      	mov	r2, r6
 800f0d6:	4649      	mov	r1, r9
 800f0d8:	4640      	mov	r0, r8
 800f0da:	47d0      	blx	sl
 800f0dc:	3001      	adds	r0, #1
 800f0de:	d09b      	beq.n	800f018 <_printf_i+0x164>
 800f0e0:	3501      	adds	r5, #1
 800f0e2:	68e3      	ldr	r3, [r4, #12]
 800f0e4:	9903      	ldr	r1, [sp, #12]
 800f0e6:	1a5b      	subs	r3, r3, r1
 800f0e8:	42ab      	cmp	r3, r5
 800f0ea:	dcf2      	bgt.n	800f0d2 <_printf_i+0x21e>
 800f0ec:	e7eb      	b.n	800f0c6 <_printf_i+0x212>
 800f0ee:	2500      	movs	r5, #0
 800f0f0:	f104 0619 	add.w	r6, r4, #25
 800f0f4:	e7f5      	b.n	800f0e2 <_printf_i+0x22e>
 800f0f6:	bf00      	nop
 800f0f8:	08014c8c 	.word	0x08014c8c
 800f0fc:	08014c9d 	.word	0x08014c9d

0800f100 <siprintf>:
 800f100:	b40e      	push	{r1, r2, r3}
 800f102:	b500      	push	{lr}
 800f104:	b09c      	sub	sp, #112	; 0x70
 800f106:	ab1d      	add	r3, sp, #116	; 0x74
 800f108:	9002      	str	r0, [sp, #8]
 800f10a:	9006      	str	r0, [sp, #24]
 800f10c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f110:	4809      	ldr	r0, [pc, #36]	; (800f138 <siprintf+0x38>)
 800f112:	9107      	str	r1, [sp, #28]
 800f114:	9104      	str	r1, [sp, #16]
 800f116:	4909      	ldr	r1, [pc, #36]	; (800f13c <siprintf+0x3c>)
 800f118:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11c:	9105      	str	r1, [sp, #20]
 800f11e:	6800      	ldr	r0, [r0, #0]
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	a902      	add	r1, sp, #8
 800f124:	f002 feb0 	bl	8011e88 <_svfiprintf_r>
 800f128:	9b02      	ldr	r3, [sp, #8]
 800f12a:	2200      	movs	r2, #0
 800f12c:	701a      	strb	r2, [r3, #0]
 800f12e:	b01c      	add	sp, #112	; 0x70
 800f130:	f85d eb04 	ldr.w	lr, [sp], #4
 800f134:	b003      	add	sp, #12
 800f136:	4770      	bx	lr
 800f138:	20000184 	.word	0x20000184
 800f13c:	ffff0208 	.word	0xffff0208

0800f140 <strcpy>:
 800f140:	4603      	mov	r3, r0
 800f142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f146:	f803 2b01 	strb.w	r2, [r3], #1
 800f14a:	2a00      	cmp	r2, #0
 800f14c:	d1f9      	bne.n	800f142 <strcpy+0x2>
 800f14e:	4770      	bx	lr

0800f150 <sulp>:
 800f150:	b570      	push	{r4, r5, r6, lr}
 800f152:	4604      	mov	r4, r0
 800f154:	460d      	mov	r5, r1
 800f156:	ec45 4b10 	vmov	d0, r4, r5
 800f15a:	4616      	mov	r6, r2
 800f15c:	f002 fbf2 	bl	8011944 <__ulp>
 800f160:	ec51 0b10 	vmov	r0, r1, d0
 800f164:	b17e      	cbz	r6, 800f186 <sulp+0x36>
 800f166:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f16a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f16e:	2b00      	cmp	r3, #0
 800f170:	dd09      	ble.n	800f186 <sulp+0x36>
 800f172:	051b      	lsls	r3, r3, #20
 800f174:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f178:	2400      	movs	r4, #0
 800f17a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f17e:	4622      	mov	r2, r4
 800f180:	462b      	mov	r3, r5
 800f182:	f7f1 fa39 	bl	80005f8 <__aeabi_dmul>
 800f186:	bd70      	pop	{r4, r5, r6, pc}

0800f188 <_strtod_l>:
 800f188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f18c:	ed2d 8b02 	vpush	{d8}
 800f190:	b09d      	sub	sp, #116	; 0x74
 800f192:	461f      	mov	r7, r3
 800f194:	2300      	movs	r3, #0
 800f196:	9318      	str	r3, [sp, #96]	; 0x60
 800f198:	4ba2      	ldr	r3, [pc, #648]	; (800f424 <_strtod_l+0x29c>)
 800f19a:	9213      	str	r2, [sp, #76]	; 0x4c
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	9305      	str	r3, [sp, #20]
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	4688      	mov	r8, r1
 800f1a6:	f7f1 f813 	bl	80001d0 <strlen>
 800f1aa:	f04f 0a00 	mov.w	sl, #0
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	f04f 0b00 	mov.w	fp, #0
 800f1b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f1b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	2a2b      	cmp	r2, #43	; 0x2b
 800f1be:	d04e      	beq.n	800f25e <_strtod_l+0xd6>
 800f1c0:	d83b      	bhi.n	800f23a <_strtod_l+0xb2>
 800f1c2:	2a0d      	cmp	r2, #13
 800f1c4:	d834      	bhi.n	800f230 <_strtod_l+0xa8>
 800f1c6:	2a08      	cmp	r2, #8
 800f1c8:	d834      	bhi.n	800f234 <_strtod_l+0xac>
 800f1ca:	2a00      	cmp	r2, #0
 800f1cc:	d03e      	beq.n	800f24c <_strtod_l+0xc4>
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	930a      	str	r3, [sp, #40]	; 0x28
 800f1d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f1d4:	7833      	ldrb	r3, [r6, #0]
 800f1d6:	2b30      	cmp	r3, #48	; 0x30
 800f1d8:	f040 80b0 	bne.w	800f33c <_strtod_l+0x1b4>
 800f1dc:	7873      	ldrb	r3, [r6, #1]
 800f1de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f1e2:	2b58      	cmp	r3, #88	; 0x58
 800f1e4:	d168      	bne.n	800f2b8 <_strtod_l+0x130>
 800f1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1e8:	9301      	str	r3, [sp, #4]
 800f1ea:	ab18      	add	r3, sp, #96	; 0x60
 800f1ec:	9702      	str	r7, [sp, #8]
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	4a8d      	ldr	r2, [pc, #564]	; (800f428 <_strtod_l+0x2a0>)
 800f1f2:	ab19      	add	r3, sp, #100	; 0x64
 800f1f4:	a917      	add	r1, sp, #92	; 0x5c
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f001 fd0c 	bl	8010c14 <__gethex>
 800f1fc:	f010 0707 	ands.w	r7, r0, #7
 800f200:	4605      	mov	r5, r0
 800f202:	d005      	beq.n	800f210 <_strtod_l+0x88>
 800f204:	2f06      	cmp	r7, #6
 800f206:	d12c      	bne.n	800f262 <_strtod_l+0xda>
 800f208:	3601      	adds	r6, #1
 800f20a:	2300      	movs	r3, #0
 800f20c:	9617      	str	r6, [sp, #92]	; 0x5c
 800f20e:	930a      	str	r3, [sp, #40]	; 0x28
 800f210:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f212:	2b00      	cmp	r3, #0
 800f214:	f040 8590 	bne.w	800fd38 <_strtod_l+0xbb0>
 800f218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f21a:	b1eb      	cbz	r3, 800f258 <_strtod_l+0xd0>
 800f21c:	4652      	mov	r2, sl
 800f21e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f222:	ec43 2b10 	vmov	d0, r2, r3
 800f226:	b01d      	add	sp, #116	; 0x74
 800f228:	ecbd 8b02 	vpop	{d8}
 800f22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f230:	2a20      	cmp	r2, #32
 800f232:	d1cc      	bne.n	800f1ce <_strtod_l+0x46>
 800f234:	3301      	adds	r3, #1
 800f236:	9317      	str	r3, [sp, #92]	; 0x5c
 800f238:	e7be      	b.n	800f1b8 <_strtod_l+0x30>
 800f23a:	2a2d      	cmp	r2, #45	; 0x2d
 800f23c:	d1c7      	bne.n	800f1ce <_strtod_l+0x46>
 800f23e:	2201      	movs	r2, #1
 800f240:	920a      	str	r2, [sp, #40]	; 0x28
 800f242:	1c5a      	adds	r2, r3, #1
 800f244:	9217      	str	r2, [sp, #92]	; 0x5c
 800f246:	785b      	ldrb	r3, [r3, #1]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d1c2      	bne.n	800f1d2 <_strtod_l+0x4a>
 800f24c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f24e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f252:	2b00      	cmp	r3, #0
 800f254:	f040 856e 	bne.w	800fd34 <_strtod_l+0xbac>
 800f258:	4652      	mov	r2, sl
 800f25a:	465b      	mov	r3, fp
 800f25c:	e7e1      	b.n	800f222 <_strtod_l+0x9a>
 800f25e:	2200      	movs	r2, #0
 800f260:	e7ee      	b.n	800f240 <_strtod_l+0xb8>
 800f262:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f264:	b13a      	cbz	r2, 800f276 <_strtod_l+0xee>
 800f266:	2135      	movs	r1, #53	; 0x35
 800f268:	a81a      	add	r0, sp, #104	; 0x68
 800f26a:	f002 fc76 	bl	8011b5a <__copybits>
 800f26e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f270:	4620      	mov	r0, r4
 800f272:	f002 f835 	bl	80112e0 <_Bfree>
 800f276:	3f01      	subs	r7, #1
 800f278:	2f04      	cmp	r7, #4
 800f27a:	d806      	bhi.n	800f28a <_strtod_l+0x102>
 800f27c:	e8df f007 	tbb	[pc, r7]
 800f280:	1714030a 	.word	0x1714030a
 800f284:	0a          	.byte	0x0a
 800f285:	00          	.byte	0x00
 800f286:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f28a:	0728      	lsls	r0, r5, #28
 800f28c:	d5c0      	bpl.n	800f210 <_strtod_l+0x88>
 800f28e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f292:	e7bd      	b.n	800f210 <_strtod_l+0x88>
 800f294:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f298:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f29a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f29e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f2a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f2a6:	e7f0      	b.n	800f28a <_strtod_l+0x102>
 800f2a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f42c <_strtod_l+0x2a4>
 800f2ac:	e7ed      	b.n	800f28a <_strtod_l+0x102>
 800f2ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f2b2:	f04f 3aff 	mov.w	sl, #4294967295
 800f2b6:	e7e8      	b.n	800f28a <_strtod_l+0x102>
 800f2b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f2ba:	1c5a      	adds	r2, r3, #1
 800f2bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800f2be:	785b      	ldrb	r3, [r3, #1]
 800f2c0:	2b30      	cmp	r3, #48	; 0x30
 800f2c2:	d0f9      	beq.n	800f2b8 <_strtod_l+0x130>
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d0a3      	beq.n	800f210 <_strtod_l+0x88>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	f04f 0900 	mov.w	r9, #0
 800f2ce:	9304      	str	r3, [sp, #16]
 800f2d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f2d2:	9308      	str	r3, [sp, #32]
 800f2d4:	f8cd 901c 	str.w	r9, [sp, #28]
 800f2d8:	464f      	mov	r7, r9
 800f2da:	220a      	movs	r2, #10
 800f2dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f2de:	7806      	ldrb	r6, [r0, #0]
 800f2e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f2e4:	b2d9      	uxtb	r1, r3
 800f2e6:	2909      	cmp	r1, #9
 800f2e8:	d92a      	bls.n	800f340 <_strtod_l+0x1b8>
 800f2ea:	9905      	ldr	r1, [sp, #20]
 800f2ec:	462a      	mov	r2, r5
 800f2ee:	f002 fee9 	bl	80120c4 <strncmp>
 800f2f2:	b398      	cbz	r0, 800f35c <_strtod_l+0x1d4>
 800f2f4:	2000      	movs	r0, #0
 800f2f6:	4632      	mov	r2, r6
 800f2f8:	463d      	mov	r5, r7
 800f2fa:	9005      	str	r0, [sp, #20]
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2a65      	cmp	r2, #101	; 0x65
 800f300:	d001      	beq.n	800f306 <_strtod_l+0x17e>
 800f302:	2a45      	cmp	r2, #69	; 0x45
 800f304:	d118      	bne.n	800f338 <_strtod_l+0x1b0>
 800f306:	b91d      	cbnz	r5, 800f310 <_strtod_l+0x188>
 800f308:	9a04      	ldr	r2, [sp, #16]
 800f30a:	4302      	orrs	r2, r0
 800f30c:	d09e      	beq.n	800f24c <_strtod_l+0xc4>
 800f30e:	2500      	movs	r5, #0
 800f310:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f314:	f108 0201 	add.w	r2, r8, #1
 800f318:	9217      	str	r2, [sp, #92]	; 0x5c
 800f31a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f31e:	2a2b      	cmp	r2, #43	; 0x2b
 800f320:	d075      	beq.n	800f40e <_strtod_l+0x286>
 800f322:	2a2d      	cmp	r2, #45	; 0x2d
 800f324:	d07b      	beq.n	800f41e <_strtod_l+0x296>
 800f326:	f04f 0c00 	mov.w	ip, #0
 800f32a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f32e:	2909      	cmp	r1, #9
 800f330:	f240 8082 	bls.w	800f438 <_strtod_l+0x2b0>
 800f334:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f338:	2600      	movs	r6, #0
 800f33a:	e09d      	b.n	800f478 <_strtod_l+0x2f0>
 800f33c:	2300      	movs	r3, #0
 800f33e:	e7c4      	b.n	800f2ca <_strtod_l+0x142>
 800f340:	2f08      	cmp	r7, #8
 800f342:	bfd8      	it	le
 800f344:	9907      	ldrle	r1, [sp, #28]
 800f346:	f100 0001 	add.w	r0, r0, #1
 800f34a:	bfda      	itte	le
 800f34c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f350:	9307      	strle	r3, [sp, #28]
 800f352:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f356:	3701      	adds	r7, #1
 800f358:	9017      	str	r0, [sp, #92]	; 0x5c
 800f35a:	e7bf      	b.n	800f2dc <_strtod_l+0x154>
 800f35c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f35e:	195a      	adds	r2, r3, r5
 800f360:	9217      	str	r2, [sp, #92]	; 0x5c
 800f362:	5d5a      	ldrb	r2, [r3, r5]
 800f364:	2f00      	cmp	r7, #0
 800f366:	d037      	beq.n	800f3d8 <_strtod_l+0x250>
 800f368:	9005      	str	r0, [sp, #20]
 800f36a:	463d      	mov	r5, r7
 800f36c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f370:	2b09      	cmp	r3, #9
 800f372:	d912      	bls.n	800f39a <_strtod_l+0x212>
 800f374:	2301      	movs	r3, #1
 800f376:	e7c2      	b.n	800f2fe <_strtod_l+0x176>
 800f378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f37a:	1c5a      	adds	r2, r3, #1
 800f37c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f37e:	785a      	ldrb	r2, [r3, #1]
 800f380:	3001      	adds	r0, #1
 800f382:	2a30      	cmp	r2, #48	; 0x30
 800f384:	d0f8      	beq.n	800f378 <_strtod_l+0x1f0>
 800f386:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f38a:	2b08      	cmp	r3, #8
 800f38c:	f200 84d9 	bhi.w	800fd42 <_strtod_l+0xbba>
 800f390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f392:	9005      	str	r0, [sp, #20]
 800f394:	2000      	movs	r0, #0
 800f396:	9308      	str	r3, [sp, #32]
 800f398:	4605      	mov	r5, r0
 800f39a:	3a30      	subs	r2, #48	; 0x30
 800f39c:	f100 0301 	add.w	r3, r0, #1
 800f3a0:	d014      	beq.n	800f3cc <_strtod_l+0x244>
 800f3a2:	9905      	ldr	r1, [sp, #20]
 800f3a4:	4419      	add	r1, r3
 800f3a6:	9105      	str	r1, [sp, #20]
 800f3a8:	462b      	mov	r3, r5
 800f3aa:	eb00 0e05 	add.w	lr, r0, r5
 800f3ae:	210a      	movs	r1, #10
 800f3b0:	4573      	cmp	r3, lr
 800f3b2:	d113      	bne.n	800f3dc <_strtod_l+0x254>
 800f3b4:	182b      	adds	r3, r5, r0
 800f3b6:	2b08      	cmp	r3, #8
 800f3b8:	f105 0501 	add.w	r5, r5, #1
 800f3bc:	4405      	add	r5, r0
 800f3be:	dc1c      	bgt.n	800f3fa <_strtod_l+0x272>
 800f3c0:	9907      	ldr	r1, [sp, #28]
 800f3c2:	230a      	movs	r3, #10
 800f3c4:	fb03 2301 	mla	r3, r3, r1, r2
 800f3c8:	9307      	str	r3, [sp, #28]
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f3ce:	1c51      	adds	r1, r2, #1
 800f3d0:	9117      	str	r1, [sp, #92]	; 0x5c
 800f3d2:	7852      	ldrb	r2, [r2, #1]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	e7c9      	b.n	800f36c <_strtod_l+0x1e4>
 800f3d8:	4638      	mov	r0, r7
 800f3da:	e7d2      	b.n	800f382 <_strtod_l+0x1fa>
 800f3dc:	2b08      	cmp	r3, #8
 800f3de:	dc04      	bgt.n	800f3ea <_strtod_l+0x262>
 800f3e0:	9e07      	ldr	r6, [sp, #28]
 800f3e2:	434e      	muls	r6, r1
 800f3e4:	9607      	str	r6, [sp, #28]
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	e7e2      	b.n	800f3b0 <_strtod_l+0x228>
 800f3ea:	f103 0c01 	add.w	ip, r3, #1
 800f3ee:	f1bc 0f10 	cmp.w	ip, #16
 800f3f2:	bfd8      	it	le
 800f3f4:	fb01 f909 	mulle.w	r9, r1, r9
 800f3f8:	e7f5      	b.n	800f3e6 <_strtod_l+0x25e>
 800f3fa:	2d10      	cmp	r5, #16
 800f3fc:	bfdc      	itt	le
 800f3fe:	230a      	movle	r3, #10
 800f400:	fb03 2909 	mlale	r9, r3, r9, r2
 800f404:	e7e1      	b.n	800f3ca <_strtod_l+0x242>
 800f406:	2300      	movs	r3, #0
 800f408:	9305      	str	r3, [sp, #20]
 800f40a:	2301      	movs	r3, #1
 800f40c:	e77c      	b.n	800f308 <_strtod_l+0x180>
 800f40e:	f04f 0c00 	mov.w	ip, #0
 800f412:	f108 0202 	add.w	r2, r8, #2
 800f416:	9217      	str	r2, [sp, #92]	; 0x5c
 800f418:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f41c:	e785      	b.n	800f32a <_strtod_l+0x1a2>
 800f41e:	f04f 0c01 	mov.w	ip, #1
 800f422:	e7f6      	b.n	800f412 <_strtod_l+0x28a>
 800f424:	08014df4 	.word	0x08014df4
 800f428:	08014cb0 	.word	0x08014cb0
 800f42c:	7ff00000 	.word	0x7ff00000
 800f430:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f432:	1c51      	adds	r1, r2, #1
 800f434:	9117      	str	r1, [sp, #92]	; 0x5c
 800f436:	7852      	ldrb	r2, [r2, #1]
 800f438:	2a30      	cmp	r2, #48	; 0x30
 800f43a:	d0f9      	beq.n	800f430 <_strtod_l+0x2a8>
 800f43c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f440:	2908      	cmp	r1, #8
 800f442:	f63f af79 	bhi.w	800f338 <_strtod_l+0x1b0>
 800f446:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f44a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f44c:	9206      	str	r2, [sp, #24]
 800f44e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f450:	1c51      	adds	r1, r2, #1
 800f452:	9117      	str	r1, [sp, #92]	; 0x5c
 800f454:	7852      	ldrb	r2, [r2, #1]
 800f456:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f45a:	2e09      	cmp	r6, #9
 800f45c:	d937      	bls.n	800f4ce <_strtod_l+0x346>
 800f45e:	9e06      	ldr	r6, [sp, #24]
 800f460:	1b89      	subs	r1, r1, r6
 800f462:	2908      	cmp	r1, #8
 800f464:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f468:	dc02      	bgt.n	800f470 <_strtod_l+0x2e8>
 800f46a:	4576      	cmp	r6, lr
 800f46c:	bfa8      	it	ge
 800f46e:	4676      	movge	r6, lr
 800f470:	f1bc 0f00 	cmp.w	ip, #0
 800f474:	d000      	beq.n	800f478 <_strtod_l+0x2f0>
 800f476:	4276      	negs	r6, r6
 800f478:	2d00      	cmp	r5, #0
 800f47a:	d14d      	bne.n	800f518 <_strtod_l+0x390>
 800f47c:	9904      	ldr	r1, [sp, #16]
 800f47e:	4301      	orrs	r1, r0
 800f480:	f47f aec6 	bne.w	800f210 <_strtod_l+0x88>
 800f484:	2b00      	cmp	r3, #0
 800f486:	f47f aee1 	bne.w	800f24c <_strtod_l+0xc4>
 800f48a:	2a69      	cmp	r2, #105	; 0x69
 800f48c:	d027      	beq.n	800f4de <_strtod_l+0x356>
 800f48e:	dc24      	bgt.n	800f4da <_strtod_l+0x352>
 800f490:	2a49      	cmp	r2, #73	; 0x49
 800f492:	d024      	beq.n	800f4de <_strtod_l+0x356>
 800f494:	2a4e      	cmp	r2, #78	; 0x4e
 800f496:	f47f aed9 	bne.w	800f24c <_strtod_l+0xc4>
 800f49a:	499f      	ldr	r1, [pc, #636]	; (800f718 <_strtod_l+0x590>)
 800f49c:	a817      	add	r0, sp, #92	; 0x5c
 800f49e:	f001 fe11 	bl	80110c4 <__match>
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	f43f aed2 	beq.w	800f24c <_strtod_l+0xc4>
 800f4a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	2b28      	cmp	r3, #40	; 0x28
 800f4ae:	d12d      	bne.n	800f50c <_strtod_l+0x384>
 800f4b0:	499a      	ldr	r1, [pc, #616]	; (800f71c <_strtod_l+0x594>)
 800f4b2:	aa1a      	add	r2, sp, #104	; 0x68
 800f4b4:	a817      	add	r0, sp, #92	; 0x5c
 800f4b6:	f001 fe19 	bl	80110ec <__hexnan>
 800f4ba:	2805      	cmp	r0, #5
 800f4bc:	d126      	bne.n	800f50c <_strtod_l+0x384>
 800f4be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f4c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f4c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f4cc:	e6a0      	b.n	800f210 <_strtod_l+0x88>
 800f4ce:	210a      	movs	r1, #10
 800f4d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f4d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f4d8:	e7b9      	b.n	800f44e <_strtod_l+0x2c6>
 800f4da:	2a6e      	cmp	r2, #110	; 0x6e
 800f4dc:	e7db      	b.n	800f496 <_strtod_l+0x30e>
 800f4de:	4990      	ldr	r1, [pc, #576]	; (800f720 <_strtod_l+0x598>)
 800f4e0:	a817      	add	r0, sp, #92	; 0x5c
 800f4e2:	f001 fdef 	bl	80110c4 <__match>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	f43f aeb0 	beq.w	800f24c <_strtod_l+0xc4>
 800f4ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f4ee:	498d      	ldr	r1, [pc, #564]	; (800f724 <_strtod_l+0x59c>)
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	a817      	add	r0, sp, #92	; 0x5c
 800f4f4:	9317      	str	r3, [sp, #92]	; 0x5c
 800f4f6:	f001 fde5 	bl	80110c4 <__match>
 800f4fa:	b910      	cbnz	r0, 800f502 <_strtod_l+0x37a>
 800f4fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f4fe:	3301      	adds	r3, #1
 800f500:	9317      	str	r3, [sp, #92]	; 0x5c
 800f502:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f734 <_strtod_l+0x5ac>
 800f506:	f04f 0a00 	mov.w	sl, #0
 800f50a:	e681      	b.n	800f210 <_strtod_l+0x88>
 800f50c:	4886      	ldr	r0, [pc, #536]	; (800f728 <_strtod_l+0x5a0>)
 800f50e:	f002 fdbb 	bl	8012088 <nan>
 800f512:	ec5b ab10 	vmov	sl, fp, d0
 800f516:	e67b      	b.n	800f210 <_strtod_l+0x88>
 800f518:	9b05      	ldr	r3, [sp, #20]
 800f51a:	9807      	ldr	r0, [sp, #28]
 800f51c:	1af3      	subs	r3, r6, r3
 800f51e:	2f00      	cmp	r7, #0
 800f520:	bf08      	it	eq
 800f522:	462f      	moveq	r7, r5
 800f524:	2d10      	cmp	r5, #16
 800f526:	9306      	str	r3, [sp, #24]
 800f528:	46a8      	mov	r8, r5
 800f52a:	bfa8      	it	ge
 800f52c:	f04f 0810 	movge.w	r8, #16
 800f530:	f7f0 ffe8 	bl	8000504 <__aeabi_ui2d>
 800f534:	2d09      	cmp	r5, #9
 800f536:	4682      	mov	sl, r0
 800f538:	468b      	mov	fp, r1
 800f53a:	dd13      	ble.n	800f564 <_strtod_l+0x3dc>
 800f53c:	4b7b      	ldr	r3, [pc, #492]	; (800f72c <_strtod_l+0x5a4>)
 800f53e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f542:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f546:	f7f1 f857 	bl	80005f8 <__aeabi_dmul>
 800f54a:	4682      	mov	sl, r0
 800f54c:	4648      	mov	r0, r9
 800f54e:	468b      	mov	fp, r1
 800f550:	f7f0 ffd8 	bl	8000504 <__aeabi_ui2d>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	4650      	mov	r0, sl
 800f55a:	4659      	mov	r1, fp
 800f55c:	f7f0 fe96 	bl	800028c <__adddf3>
 800f560:	4682      	mov	sl, r0
 800f562:	468b      	mov	fp, r1
 800f564:	2d0f      	cmp	r5, #15
 800f566:	dc38      	bgt.n	800f5da <_strtod_l+0x452>
 800f568:	9b06      	ldr	r3, [sp, #24]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f43f ae50 	beq.w	800f210 <_strtod_l+0x88>
 800f570:	dd24      	ble.n	800f5bc <_strtod_l+0x434>
 800f572:	2b16      	cmp	r3, #22
 800f574:	dc0b      	bgt.n	800f58e <_strtod_l+0x406>
 800f576:	496d      	ldr	r1, [pc, #436]	; (800f72c <_strtod_l+0x5a4>)
 800f578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f57c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f580:	4652      	mov	r2, sl
 800f582:	465b      	mov	r3, fp
 800f584:	f7f1 f838 	bl	80005f8 <__aeabi_dmul>
 800f588:	4682      	mov	sl, r0
 800f58a:	468b      	mov	fp, r1
 800f58c:	e640      	b.n	800f210 <_strtod_l+0x88>
 800f58e:	9a06      	ldr	r2, [sp, #24]
 800f590:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f594:	4293      	cmp	r3, r2
 800f596:	db20      	blt.n	800f5da <_strtod_l+0x452>
 800f598:	4c64      	ldr	r4, [pc, #400]	; (800f72c <_strtod_l+0x5a4>)
 800f59a:	f1c5 050f 	rsb	r5, r5, #15
 800f59e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f5a2:	4652      	mov	r2, sl
 800f5a4:	465b      	mov	r3, fp
 800f5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5aa:	f7f1 f825 	bl	80005f8 <__aeabi_dmul>
 800f5ae:	9b06      	ldr	r3, [sp, #24]
 800f5b0:	1b5d      	subs	r5, r3, r5
 800f5b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f5b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f5ba:	e7e3      	b.n	800f584 <_strtod_l+0x3fc>
 800f5bc:	9b06      	ldr	r3, [sp, #24]
 800f5be:	3316      	adds	r3, #22
 800f5c0:	db0b      	blt.n	800f5da <_strtod_l+0x452>
 800f5c2:	9b05      	ldr	r3, [sp, #20]
 800f5c4:	1b9e      	subs	r6, r3, r6
 800f5c6:	4b59      	ldr	r3, [pc, #356]	; (800f72c <_strtod_l+0x5a4>)
 800f5c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f5cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f5d0:	4650      	mov	r0, sl
 800f5d2:	4659      	mov	r1, fp
 800f5d4:	f7f1 f93a 	bl	800084c <__aeabi_ddiv>
 800f5d8:	e7d6      	b.n	800f588 <_strtod_l+0x400>
 800f5da:	9b06      	ldr	r3, [sp, #24]
 800f5dc:	eba5 0808 	sub.w	r8, r5, r8
 800f5e0:	4498      	add	r8, r3
 800f5e2:	f1b8 0f00 	cmp.w	r8, #0
 800f5e6:	dd74      	ble.n	800f6d2 <_strtod_l+0x54a>
 800f5e8:	f018 030f 	ands.w	r3, r8, #15
 800f5ec:	d00a      	beq.n	800f604 <_strtod_l+0x47c>
 800f5ee:	494f      	ldr	r1, [pc, #316]	; (800f72c <_strtod_l+0x5a4>)
 800f5f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f5f4:	4652      	mov	r2, sl
 800f5f6:	465b      	mov	r3, fp
 800f5f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5fc:	f7f0 fffc 	bl	80005f8 <__aeabi_dmul>
 800f600:	4682      	mov	sl, r0
 800f602:	468b      	mov	fp, r1
 800f604:	f038 080f 	bics.w	r8, r8, #15
 800f608:	d04f      	beq.n	800f6aa <_strtod_l+0x522>
 800f60a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f60e:	dd22      	ble.n	800f656 <_strtod_l+0x4ce>
 800f610:	2500      	movs	r5, #0
 800f612:	462e      	mov	r6, r5
 800f614:	9507      	str	r5, [sp, #28]
 800f616:	9505      	str	r5, [sp, #20]
 800f618:	2322      	movs	r3, #34	; 0x22
 800f61a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f734 <_strtod_l+0x5ac>
 800f61e:	6023      	str	r3, [r4, #0]
 800f620:	f04f 0a00 	mov.w	sl, #0
 800f624:	9b07      	ldr	r3, [sp, #28]
 800f626:	2b00      	cmp	r3, #0
 800f628:	f43f adf2 	beq.w	800f210 <_strtod_l+0x88>
 800f62c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f62e:	4620      	mov	r0, r4
 800f630:	f001 fe56 	bl	80112e0 <_Bfree>
 800f634:	9905      	ldr	r1, [sp, #20]
 800f636:	4620      	mov	r0, r4
 800f638:	f001 fe52 	bl	80112e0 <_Bfree>
 800f63c:	4631      	mov	r1, r6
 800f63e:	4620      	mov	r0, r4
 800f640:	f001 fe4e 	bl	80112e0 <_Bfree>
 800f644:	9907      	ldr	r1, [sp, #28]
 800f646:	4620      	mov	r0, r4
 800f648:	f001 fe4a 	bl	80112e0 <_Bfree>
 800f64c:	4629      	mov	r1, r5
 800f64e:	4620      	mov	r0, r4
 800f650:	f001 fe46 	bl	80112e0 <_Bfree>
 800f654:	e5dc      	b.n	800f210 <_strtod_l+0x88>
 800f656:	4b36      	ldr	r3, [pc, #216]	; (800f730 <_strtod_l+0x5a8>)
 800f658:	9304      	str	r3, [sp, #16]
 800f65a:	2300      	movs	r3, #0
 800f65c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f660:	4650      	mov	r0, sl
 800f662:	4659      	mov	r1, fp
 800f664:	4699      	mov	r9, r3
 800f666:	f1b8 0f01 	cmp.w	r8, #1
 800f66a:	dc21      	bgt.n	800f6b0 <_strtod_l+0x528>
 800f66c:	b10b      	cbz	r3, 800f672 <_strtod_l+0x4ea>
 800f66e:	4682      	mov	sl, r0
 800f670:	468b      	mov	fp, r1
 800f672:	4b2f      	ldr	r3, [pc, #188]	; (800f730 <_strtod_l+0x5a8>)
 800f674:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f678:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f67c:	4652      	mov	r2, sl
 800f67e:	465b      	mov	r3, fp
 800f680:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f684:	f7f0 ffb8 	bl	80005f8 <__aeabi_dmul>
 800f688:	4b2a      	ldr	r3, [pc, #168]	; (800f734 <_strtod_l+0x5ac>)
 800f68a:	460a      	mov	r2, r1
 800f68c:	400b      	ands	r3, r1
 800f68e:	492a      	ldr	r1, [pc, #168]	; (800f738 <_strtod_l+0x5b0>)
 800f690:	428b      	cmp	r3, r1
 800f692:	4682      	mov	sl, r0
 800f694:	d8bc      	bhi.n	800f610 <_strtod_l+0x488>
 800f696:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f69a:	428b      	cmp	r3, r1
 800f69c:	bf86      	itte	hi
 800f69e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f73c <_strtod_l+0x5b4>
 800f6a2:	f04f 3aff 	movhi.w	sl, #4294967295
 800f6a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	9304      	str	r3, [sp, #16]
 800f6ae:	e084      	b.n	800f7ba <_strtod_l+0x632>
 800f6b0:	f018 0f01 	tst.w	r8, #1
 800f6b4:	d005      	beq.n	800f6c2 <_strtod_l+0x53a>
 800f6b6:	9b04      	ldr	r3, [sp, #16]
 800f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6bc:	f7f0 ff9c 	bl	80005f8 <__aeabi_dmul>
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	9a04      	ldr	r2, [sp, #16]
 800f6c4:	3208      	adds	r2, #8
 800f6c6:	f109 0901 	add.w	r9, r9, #1
 800f6ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f6ce:	9204      	str	r2, [sp, #16]
 800f6d0:	e7c9      	b.n	800f666 <_strtod_l+0x4de>
 800f6d2:	d0ea      	beq.n	800f6aa <_strtod_l+0x522>
 800f6d4:	f1c8 0800 	rsb	r8, r8, #0
 800f6d8:	f018 020f 	ands.w	r2, r8, #15
 800f6dc:	d00a      	beq.n	800f6f4 <_strtod_l+0x56c>
 800f6de:	4b13      	ldr	r3, [pc, #76]	; (800f72c <_strtod_l+0x5a4>)
 800f6e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6e4:	4650      	mov	r0, sl
 800f6e6:	4659      	mov	r1, fp
 800f6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ec:	f7f1 f8ae 	bl	800084c <__aeabi_ddiv>
 800f6f0:	4682      	mov	sl, r0
 800f6f2:	468b      	mov	fp, r1
 800f6f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f6f8:	d0d7      	beq.n	800f6aa <_strtod_l+0x522>
 800f6fa:	f1b8 0f1f 	cmp.w	r8, #31
 800f6fe:	dd1f      	ble.n	800f740 <_strtod_l+0x5b8>
 800f700:	2500      	movs	r5, #0
 800f702:	462e      	mov	r6, r5
 800f704:	9507      	str	r5, [sp, #28]
 800f706:	9505      	str	r5, [sp, #20]
 800f708:	2322      	movs	r3, #34	; 0x22
 800f70a:	f04f 0a00 	mov.w	sl, #0
 800f70e:	f04f 0b00 	mov.w	fp, #0
 800f712:	6023      	str	r3, [r4, #0]
 800f714:	e786      	b.n	800f624 <_strtod_l+0x49c>
 800f716:	bf00      	nop
 800f718:	08014c89 	.word	0x08014c89
 800f71c:	08014cc4 	.word	0x08014cc4
 800f720:	08014c81 	.word	0x08014c81
 800f724:	08014d03 	.word	0x08014d03
 800f728:	08014fb0 	.word	0x08014fb0
 800f72c:	08014e90 	.word	0x08014e90
 800f730:	08014e68 	.word	0x08014e68
 800f734:	7ff00000 	.word	0x7ff00000
 800f738:	7ca00000 	.word	0x7ca00000
 800f73c:	7fefffff 	.word	0x7fefffff
 800f740:	f018 0310 	ands.w	r3, r8, #16
 800f744:	bf18      	it	ne
 800f746:	236a      	movne	r3, #106	; 0x6a
 800f748:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800faf8 <_strtod_l+0x970>
 800f74c:	9304      	str	r3, [sp, #16]
 800f74e:	4650      	mov	r0, sl
 800f750:	4659      	mov	r1, fp
 800f752:	2300      	movs	r3, #0
 800f754:	f018 0f01 	tst.w	r8, #1
 800f758:	d004      	beq.n	800f764 <_strtod_l+0x5dc>
 800f75a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f75e:	f7f0 ff4b 	bl	80005f8 <__aeabi_dmul>
 800f762:	2301      	movs	r3, #1
 800f764:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f768:	f109 0908 	add.w	r9, r9, #8
 800f76c:	d1f2      	bne.n	800f754 <_strtod_l+0x5cc>
 800f76e:	b10b      	cbz	r3, 800f774 <_strtod_l+0x5ec>
 800f770:	4682      	mov	sl, r0
 800f772:	468b      	mov	fp, r1
 800f774:	9b04      	ldr	r3, [sp, #16]
 800f776:	b1c3      	cbz	r3, 800f7aa <_strtod_l+0x622>
 800f778:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f77c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f780:	2b00      	cmp	r3, #0
 800f782:	4659      	mov	r1, fp
 800f784:	dd11      	ble.n	800f7aa <_strtod_l+0x622>
 800f786:	2b1f      	cmp	r3, #31
 800f788:	f340 8124 	ble.w	800f9d4 <_strtod_l+0x84c>
 800f78c:	2b34      	cmp	r3, #52	; 0x34
 800f78e:	bfde      	ittt	le
 800f790:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f794:	f04f 33ff 	movle.w	r3, #4294967295
 800f798:	fa03 f202 	lslle.w	r2, r3, r2
 800f79c:	f04f 0a00 	mov.w	sl, #0
 800f7a0:	bfcc      	ite	gt
 800f7a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f7a6:	ea02 0b01 	andle.w	fp, r2, r1
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	4650      	mov	r0, sl
 800f7b0:	4659      	mov	r1, fp
 800f7b2:	f7f1 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d1a2      	bne.n	800f700 <_strtod_l+0x578>
 800f7ba:	9b07      	ldr	r3, [sp, #28]
 800f7bc:	9300      	str	r3, [sp, #0]
 800f7be:	9908      	ldr	r1, [sp, #32]
 800f7c0:	462b      	mov	r3, r5
 800f7c2:	463a      	mov	r2, r7
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	f001 fdf3 	bl	80113b0 <__s2b>
 800f7ca:	9007      	str	r0, [sp, #28]
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	f43f af1f 	beq.w	800f610 <_strtod_l+0x488>
 800f7d2:	9b05      	ldr	r3, [sp, #20]
 800f7d4:	1b9e      	subs	r6, r3, r6
 800f7d6:	9b06      	ldr	r3, [sp, #24]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	bfb4      	ite	lt
 800f7dc:	4633      	movlt	r3, r6
 800f7de:	2300      	movge	r3, #0
 800f7e0:	930c      	str	r3, [sp, #48]	; 0x30
 800f7e2:	9b06      	ldr	r3, [sp, #24]
 800f7e4:	2500      	movs	r5, #0
 800f7e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f7ea:	9312      	str	r3, [sp, #72]	; 0x48
 800f7ec:	462e      	mov	r6, r5
 800f7ee:	9b07      	ldr	r3, [sp, #28]
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	6859      	ldr	r1, [r3, #4]
 800f7f4:	f001 fd34 	bl	8011260 <_Balloc>
 800f7f8:	9005      	str	r0, [sp, #20]
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	f43f af0c 	beq.w	800f618 <_strtod_l+0x490>
 800f800:	9b07      	ldr	r3, [sp, #28]
 800f802:	691a      	ldr	r2, [r3, #16]
 800f804:	3202      	adds	r2, #2
 800f806:	f103 010c 	add.w	r1, r3, #12
 800f80a:	0092      	lsls	r2, r2, #2
 800f80c:	300c      	adds	r0, #12
 800f80e:	f7fe ffdd 	bl	800e7cc <memcpy>
 800f812:	ec4b ab10 	vmov	d0, sl, fp
 800f816:	aa1a      	add	r2, sp, #104	; 0x68
 800f818:	a919      	add	r1, sp, #100	; 0x64
 800f81a:	4620      	mov	r0, r4
 800f81c:	f002 f90e 	bl	8011a3c <__d2b>
 800f820:	ec4b ab18 	vmov	d8, sl, fp
 800f824:	9018      	str	r0, [sp, #96]	; 0x60
 800f826:	2800      	cmp	r0, #0
 800f828:	f43f aef6 	beq.w	800f618 <_strtod_l+0x490>
 800f82c:	2101      	movs	r1, #1
 800f82e:	4620      	mov	r0, r4
 800f830:	f001 fe58 	bl	80114e4 <__i2b>
 800f834:	4606      	mov	r6, r0
 800f836:	2800      	cmp	r0, #0
 800f838:	f43f aeee 	beq.w	800f618 <_strtod_l+0x490>
 800f83c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f83e:	9904      	ldr	r1, [sp, #16]
 800f840:	2b00      	cmp	r3, #0
 800f842:	bfab      	itete	ge
 800f844:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f846:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f848:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f84a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f84e:	bfac      	ite	ge
 800f850:	eb03 0902 	addge.w	r9, r3, r2
 800f854:	1ad7      	sublt	r7, r2, r3
 800f856:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f858:	eba3 0801 	sub.w	r8, r3, r1
 800f85c:	4490      	add	r8, r2
 800f85e:	4ba1      	ldr	r3, [pc, #644]	; (800fae4 <_strtod_l+0x95c>)
 800f860:	f108 38ff 	add.w	r8, r8, #4294967295
 800f864:	4598      	cmp	r8, r3
 800f866:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f86a:	f280 80c7 	bge.w	800f9fc <_strtod_l+0x874>
 800f86e:	eba3 0308 	sub.w	r3, r3, r8
 800f872:	2b1f      	cmp	r3, #31
 800f874:	eba2 0203 	sub.w	r2, r2, r3
 800f878:	f04f 0101 	mov.w	r1, #1
 800f87c:	f300 80b1 	bgt.w	800f9e2 <_strtod_l+0x85a>
 800f880:	fa01 f303 	lsl.w	r3, r1, r3
 800f884:	930d      	str	r3, [sp, #52]	; 0x34
 800f886:	2300      	movs	r3, #0
 800f888:	9308      	str	r3, [sp, #32]
 800f88a:	eb09 0802 	add.w	r8, r9, r2
 800f88e:	9b04      	ldr	r3, [sp, #16]
 800f890:	45c1      	cmp	r9, r8
 800f892:	4417      	add	r7, r2
 800f894:	441f      	add	r7, r3
 800f896:	464b      	mov	r3, r9
 800f898:	bfa8      	it	ge
 800f89a:	4643      	movge	r3, r8
 800f89c:	42bb      	cmp	r3, r7
 800f89e:	bfa8      	it	ge
 800f8a0:	463b      	movge	r3, r7
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	bfc2      	ittt	gt
 800f8a6:	eba8 0803 	subgt.w	r8, r8, r3
 800f8aa:	1aff      	subgt	r7, r7, r3
 800f8ac:	eba9 0903 	subgt.w	r9, r9, r3
 800f8b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	dd17      	ble.n	800f8e6 <_strtod_l+0x75e>
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f001 fed2 	bl	8011664 <__pow5mult>
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	f43f aea8 	beq.w	800f618 <_strtod_l+0x490>
 800f8c8:	4601      	mov	r1, r0
 800f8ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	f001 fe1f 	bl	8011510 <__multiply>
 800f8d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	f43f ae9f 	beq.w	800f618 <_strtod_l+0x490>
 800f8da:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f001 fcff 	bl	80112e0 <_Bfree>
 800f8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8e4:	9318      	str	r3, [sp, #96]	; 0x60
 800f8e6:	f1b8 0f00 	cmp.w	r8, #0
 800f8ea:	f300 808c 	bgt.w	800fa06 <_strtod_l+0x87e>
 800f8ee:	9b06      	ldr	r3, [sp, #24]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	dd08      	ble.n	800f906 <_strtod_l+0x77e>
 800f8f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f8f6:	9905      	ldr	r1, [sp, #20]
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f001 feb3 	bl	8011664 <__pow5mult>
 800f8fe:	9005      	str	r0, [sp, #20]
 800f900:	2800      	cmp	r0, #0
 800f902:	f43f ae89 	beq.w	800f618 <_strtod_l+0x490>
 800f906:	2f00      	cmp	r7, #0
 800f908:	dd08      	ble.n	800f91c <_strtod_l+0x794>
 800f90a:	9905      	ldr	r1, [sp, #20]
 800f90c:	463a      	mov	r2, r7
 800f90e:	4620      	mov	r0, r4
 800f910:	f001 ff02 	bl	8011718 <__lshift>
 800f914:	9005      	str	r0, [sp, #20]
 800f916:	2800      	cmp	r0, #0
 800f918:	f43f ae7e 	beq.w	800f618 <_strtod_l+0x490>
 800f91c:	f1b9 0f00 	cmp.w	r9, #0
 800f920:	dd08      	ble.n	800f934 <_strtod_l+0x7ac>
 800f922:	4631      	mov	r1, r6
 800f924:	464a      	mov	r2, r9
 800f926:	4620      	mov	r0, r4
 800f928:	f001 fef6 	bl	8011718 <__lshift>
 800f92c:	4606      	mov	r6, r0
 800f92e:	2800      	cmp	r0, #0
 800f930:	f43f ae72 	beq.w	800f618 <_strtod_l+0x490>
 800f934:	9a05      	ldr	r2, [sp, #20]
 800f936:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f938:	4620      	mov	r0, r4
 800f93a:	f001 ff79 	bl	8011830 <__mdiff>
 800f93e:	4605      	mov	r5, r0
 800f940:	2800      	cmp	r0, #0
 800f942:	f43f ae69 	beq.w	800f618 <_strtod_l+0x490>
 800f946:	68c3      	ldr	r3, [r0, #12]
 800f948:	930b      	str	r3, [sp, #44]	; 0x2c
 800f94a:	2300      	movs	r3, #0
 800f94c:	60c3      	str	r3, [r0, #12]
 800f94e:	4631      	mov	r1, r6
 800f950:	f001 ff52 	bl	80117f8 <__mcmp>
 800f954:	2800      	cmp	r0, #0
 800f956:	da60      	bge.n	800fa1a <_strtod_l+0x892>
 800f958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f95a:	ea53 030a 	orrs.w	r3, r3, sl
 800f95e:	f040 8082 	bne.w	800fa66 <_strtod_l+0x8de>
 800f962:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f966:	2b00      	cmp	r3, #0
 800f968:	d17d      	bne.n	800fa66 <_strtod_l+0x8de>
 800f96a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f96e:	0d1b      	lsrs	r3, r3, #20
 800f970:	051b      	lsls	r3, r3, #20
 800f972:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f976:	d976      	bls.n	800fa66 <_strtod_l+0x8de>
 800f978:	696b      	ldr	r3, [r5, #20]
 800f97a:	b913      	cbnz	r3, 800f982 <_strtod_l+0x7fa>
 800f97c:	692b      	ldr	r3, [r5, #16]
 800f97e:	2b01      	cmp	r3, #1
 800f980:	dd71      	ble.n	800fa66 <_strtod_l+0x8de>
 800f982:	4629      	mov	r1, r5
 800f984:	2201      	movs	r2, #1
 800f986:	4620      	mov	r0, r4
 800f988:	f001 fec6 	bl	8011718 <__lshift>
 800f98c:	4631      	mov	r1, r6
 800f98e:	4605      	mov	r5, r0
 800f990:	f001 ff32 	bl	80117f8 <__mcmp>
 800f994:	2800      	cmp	r0, #0
 800f996:	dd66      	ble.n	800fa66 <_strtod_l+0x8de>
 800f998:	9904      	ldr	r1, [sp, #16]
 800f99a:	4a53      	ldr	r2, [pc, #332]	; (800fae8 <_strtod_l+0x960>)
 800f99c:	465b      	mov	r3, fp
 800f99e:	2900      	cmp	r1, #0
 800f9a0:	f000 8081 	beq.w	800faa6 <_strtod_l+0x91e>
 800f9a4:	ea02 010b 	and.w	r1, r2, fp
 800f9a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f9ac:	dc7b      	bgt.n	800faa6 <_strtod_l+0x91e>
 800f9ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f9b2:	f77f aea9 	ble.w	800f708 <_strtod_l+0x580>
 800f9b6:	4b4d      	ldr	r3, [pc, #308]	; (800faec <_strtod_l+0x964>)
 800f9b8:	4650      	mov	r0, sl
 800f9ba:	4659      	mov	r1, fp
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f7f0 fe1b 	bl	80005f8 <__aeabi_dmul>
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	4303      	orrs	r3, r0
 800f9c6:	bf08      	it	eq
 800f9c8:	2322      	moveq	r3, #34	; 0x22
 800f9ca:	4682      	mov	sl, r0
 800f9cc:	468b      	mov	fp, r1
 800f9ce:	bf08      	it	eq
 800f9d0:	6023      	streq	r3, [r4, #0]
 800f9d2:	e62b      	b.n	800f62c <_strtod_l+0x4a4>
 800f9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f9dc:	ea03 0a0a 	and.w	sl, r3, sl
 800f9e0:	e6e3      	b.n	800f7aa <_strtod_l+0x622>
 800f9e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f9e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f9ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f9ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f9f2:	fa01 f308 	lsl.w	r3, r1, r8
 800f9f6:	9308      	str	r3, [sp, #32]
 800f9f8:	910d      	str	r1, [sp, #52]	; 0x34
 800f9fa:	e746      	b.n	800f88a <_strtod_l+0x702>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	9308      	str	r3, [sp, #32]
 800fa00:	2301      	movs	r3, #1
 800fa02:	930d      	str	r3, [sp, #52]	; 0x34
 800fa04:	e741      	b.n	800f88a <_strtod_l+0x702>
 800fa06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa08:	4642      	mov	r2, r8
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f001 fe84 	bl	8011718 <__lshift>
 800fa10:	9018      	str	r0, [sp, #96]	; 0x60
 800fa12:	2800      	cmp	r0, #0
 800fa14:	f47f af6b 	bne.w	800f8ee <_strtod_l+0x766>
 800fa18:	e5fe      	b.n	800f618 <_strtod_l+0x490>
 800fa1a:	465f      	mov	r7, fp
 800fa1c:	d16e      	bne.n	800fafc <_strtod_l+0x974>
 800fa1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa24:	b342      	cbz	r2, 800fa78 <_strtod_l+0x8f0>
 800fa26:	4a32      	ldr	r2, [pc, #200]	; (800faf0 <_strtod_l+0x968>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d128      	bne.n	800fa7e <_strtod_l+0x8f6>
 800fa2c:	9b04      	ldr	r3, [sp, #16]
 800fa2e:	4651      	mov	r1, sl
 800fa30:	b1eb      	cbz	r3, 800fa6e <_strtod_l+0x8e6>
 800fa32:	4b2d      	ldr	r3, [pc, #180]	; (800fae8 <_strtod_l+0x960>)
 800fa34:	403b      	ands	r3, r7
 800fa36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3e:	d819      	bhi.n	800fa74 <_strtod_l+0x8ec>
 800fa40:	0d1b      	lsrs	r3, r3, #20
 800fa42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fa46:	fa02 f303 	lsl.w	r3, r2, r3
 800fa4a:	4299      	cmp	r1, r3
 800fa4c:	d117      	bne.n	800fa7e <_strtod_l+0x8f6>
 800fa4e:	4b29      	ldr	r3, [pc, #164]	; (800faf4 <_strtod_l+0x96c>)
 800fa50:	429f      	cmp	r7, r3
 800fa52:	d102      	bne.n	800fa5a <_strtod_l+0x8d2>
 800fa54:	3101      	adds	r1, #1
 800fa56:	f43f addf 	beq.w	800f618 <_strtod_l+0x490>
 800fa5a:	4b23      	ldr	r3, [pc, #140]	; (800fae8 <_strtod_l+0x960>)
 800fa5c:	403b      	ands	r3, r7
 800fa5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fa62:	f04f 0a00 	mov.w	sl, #0
 800fa66:	9b04      	ldr	r3, [sp, #16]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1a4      	bne.n	800f9b6 <_strtod_l+0x82e>
 800fa6c:	e5de      	b.n	800f62c <_strtod_l+0x4a4>
 800fa6e:	f04f 33ff 	mov.w	r3, #4294967295
 800fa72:	e7ea      	b.n	800fa4a <_strtod_l+0x8c2>
 800fa74:	4613      	mov	r3, r2
 800fa76:	e7e8      	b.n	800fa4a <_strtod_l+0x8c2>
 800fa78:	ea53 030a 	orrs.w	r3, r3, sl
 800fa7c:	d08c      	beq.n	800f998 <_strtod_l+0x810>
 800fa7e:	9b08      	ldr	r3, [sp, #32]
 800fa80:	b1db      	cbz	r3, 800faba <_strtod_l+0x932>
 800fa82:	423b      	tst	r3, r7
 800fa84:	d0ef      	beq.n	800fa66 <_strtod_l+0x8de>
 800fa86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa88:	9a04      	ldr	r2, [sp, #16]
 800fa8a:	4650      	mov	r0, sl
 800fa8c:	4659      	mov	r1, fp
 800fa8e:	b1c3      	cbz	r3, 800fac2 <_strtod_l+0x93a>
 800fa90:	f7ff fb5e 	bl	800f150 <sulp>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	ec51 0b18 	vmov	r0, r1, d8
 800fa9c:	f7f0 fbf6 	bl	800028c <__adddf3>
 800faa0:	4682      	mov	sl, r0
 800faa2:	468b      	mov	fp, r1
 800faa4:	e7df      	b.n	800fa66 <_strtod_l+0x8de>
 800faa6:	4013      	ands	r3, r2
 800faa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800faac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fab0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fab4:	f04f 3aff 	mov.w	sl, #4294967295
 800fab8:	e7d5      	b.n	800fa66 <_strtod_l+0x8de>
 800faba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fabc:	ea13 0f0a 	tst.w	r3, sl
 800fac0:	e7e0      	b.n	800fa84 <_strtod_l+0x8fc>
 800fac2:	f7ff fb45 	bl	800f150 <sulp>
 800fac6:	4602      	mov	r2, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	ec51 0b18 	vmov	r0, r1, d8
 800face:	f7f0 fbdb 	bl	8000288 <__aeabi_dsub>
 800fad2:	2200      	movs	r2, #0
 800fad4:	2300      	movs	r3, #0
 800fad6:	4682      	mov	sl, r0
 800fad8:	468b      	mov	fp, r1
 800fada:	f7f0 fff5 	bl	8000ac8 <__aeabi_dcmpeq>
 800fade:	2800      	cmp	r0, #0
 800fae0:	d0c1      	beq.n	800fa66 <_strtod_l+0x8de>
 800fae2:	e611      	b.n	800f708 <_strtod_l+0x580>
 800fae4:	fffffc02 	.word	0xfffffc02
 800fae8:	7ff00000 	.word	0x7ff00000
 800faec:	39500000 	.word	0x39500000
 800faf0:	000fffff 	.word	0x000fffff
 800faf4:	7fefffff 	.word	0x7fefffff
 800faf8:	08014cd8 	.word	0x08014cd8
 800fafc:	4631      	mov	r1, r6
 800fafe:	4628      	mov	r0, r5
 800fb00:	f001 fff8 	bl	8011af4 <__ratio>
 800fb04:	ec59 8b10 	vmov	r8, r9, d0
 800fb08:	ee10 0a10 	vmov	r0, s0
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb12:	4649      	mov	r1, r9
 800fb14:	f7f0 ffec 	bl	8000af0 <__aeabi_dcmple>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d07a      	beq.n	800fc12 <_strtod_l+0xa8a>
 800fb1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d04a      	beq.n	800fbb8 <_strtod_l+0xa30>
 800fb22:	4b95      	ldr	r3, [pc, #596]	; (800fd78 <_strtod_l+0xbf0>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fb2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fd78 <_strtod_l+0xbf0>
 800fb2e:	f04f 0800 	mov.w	r8, #0
 800fb32:	4b92      	ldr	r3, [pc, #584]	; (800fd7c <_strtod_l+0xbf4>)
 800fb34:	403b      	ands	r3, r7
 800fb36:	930d      	str	r3, [sp, #52]	; 0x34
 800fb38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb3a:	4b91      	ldr	r3, [pc, #580]	; (800fd80 <_strtod_l+0xbf8>)
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	f040 80b0 	bne.w	800fca2 <_strtod_l+0xb1a>
 800fb42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb46:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fb4a:	ec4b ab10 	vmov	d0, sl, fp
 800fb4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fb52:	f001 fef7 	bl	8011944 <__ulp>
 800fb56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb5a:	ec53 2b10 	vmov	r2, r3, d0
 800fb5e:	f7f0 fd4b 	bl	80005f8 <__aeabi_dmul>
 800fb62:	4652      	mov	r2, sl
 800fb64:	465b      	mov	r3, fp
 800fb66:	f7f0 fb91 	bl	800028c <__adddf3>
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4983      	ldr	r1, [pc, #524]	; (800fd7c <_strtod_l+0xbf4>)
 800fb6e:	4a85      	ldr	r2, [pc, #532]	; (800fd84 <_strtod_l+0xbfc>)
 800fb70:	4019      	ands	r1, r3
 800fb72:	4291      	cmp	r1, r2
 800fb74:	4682      	mov	sl, r0
 800fb76:	d960      	bls.n	800fc3a <_strtod_l+0xab2>
 800fb78:	ee18 3a90 	vmov	r3, s17
 800fb7c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d104      	bne.n	800fb8e <_strtod_l+0xa06>
 800fb84:	ee18 3a10 	vmov	r3, s16
 800fb88:	3301      	adds	r3, #1
 800fb8a:	f43f ad45 	beq.w	800f618 <_strtod_l+0x490>
 800fb8e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fd90 <_strtod_l+0xc08>
 800fb92:	f04f 3aff 	mov.w	sl, #4294967295
 800fb96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f001 fba1 	bl	80112e0 <_Bfree>
 800fb9e:	9905      	ldr	r1, [sp, #20]
 800fba0:	4620      	mov	r0, r4
 800fba2:	f001 fb9d 	bl	80112e0 <_Bfree>
 800fba6:	4631      	mov	r1, r6
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f001 fb99 	bl	80112e0 <_Bfree>
 800fbae:	4629      	mov	r1, r5
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f001 fb95 	bl	80112e0 <_Bfree>
 800fbb6:	e61a      	b.n	800f7ee <_strtod_l+0x666>
 800fbb8:	f1ba 0f00 	cmp.w	sl, #0
 800fbbc:	d11b      	bne.n	800fbf6 <_strtod_l+0xa6e>
 800fbbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbc2:	b9f3      	cbnz	r3, 800fc02 <_strtod_l+0xa7a>
 800fbc4:	4b6c      	ldr	r3, [pc, #432]	; (800fd78 <_strtod_l+0xbf0>)
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	4640      	mov	r0, r8
 800fbca:	4649      	mov	r1, r9
 800fbcc:	f7f0 ff86 	bl	8000adc <__aeabi_dcmplt>
 800fbd0:	b9d0      	cbnz	r0, 800fc08 <_strtod_l+0xa80>
 800fbd2:	4640      	mov	r0, r8
 800fbd4:	4649      	mov	r1, r9
 800fbd6:	4b6c      	ldr	r3, [pc, #432]	; (800fd88 <_strtod_l+0xc00>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f7f0 fd0d 	bl	80005f8 <__aeabi_dmul>
 800fbde:	4680      	mov	r8, r0
 800fbe0:	4689      	mov	r9, r1
 800fbe2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fbe6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800fbea:	9315      	str	r3, [sp, #84]	; 0x54
 800fbec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fbf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fbf4:	e79d      	b.n	800fb32 <_strtod_l+0x9aa>
 800fbf6:	f1ba 0f01 	cmp.w	sl, #1
 800fbfa:	d102      	bne.n	800fc02 <_strtod_l+0xa7a>
 800fbfc:	2f00      	cmp	r7, #0
 800fbfe:	f43f ad83 	beq.w	800f708 <_strtod_l+0x580>
 800fc02:	4b62      	ldr	r3, [pc, #392]	; (800fd8c <_strtod_l+0xc04>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	e78e      	b.n	800fb26 <_strtod_l+0x99e>
 800fc08:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fd88 <_strtod_l+0xc00>
 800fc0c:	f04f 0800 	mov.w	r8, #0
 800fc10:	e7e7      	b.n	800fbe2 <_strtod_l+0xa5a>
 800fc12:	4b5d      	ldr	r3, [pc, #372]	; (800fd88 <_strtod_l+0xc00>)
 800fc14:	4640      	mov	r0, r8
 800fc16:	4649      	mov	r1, r9
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f7f0 fced 	bl	80005f8 <__aeabi_dmul>
 800fc1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc20:	4680      	mov	r8, r0
 800fc22:	4689      	mov	r9, r1
 800fc24:	b933      	cbnz	r3, 800fc34 <_strtod_l+0xaac>
 800fc26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc2a:	900e      	str	r0, [sp, #56]	; 0x38
 800fc2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fc32:	e7dd      	b.n	800fbf0 <_strtod_l+0xa68>
 800fc34:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800fc38:	e7f9      	b.n	800fc2e <_strtod_l+0xaa6>
 800fc3a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fc3e:	9b04      	ldr	r3, [sp, #16]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d1a8      	bne.n	800fb96 <_strtod_l+0xa0e>
 800fc44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fc48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc4a:	0d1b      	lsrs	r3, r3, #20
 800fc4c:	051b      	lsls	r3, r3, #20
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d1a1      	bne.n	800fb96 <_strtod_l+0xa0e>
 800fc52:	4640      	mov	r0, r8
 800fc54:	4649      	mov	r1, r9
 800fc56:	f7f1 f817 	bl	8000c88 <__aeabi_d2lz>
 800fc5a:	f7f0 fc9f 	bl	800059c <__aeabi_l2d>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	460b      	mov	r3, r1
 800fc62:	4640      	mov	r0, r8
 800fc64:	4649      	mov	r1, r9
 800fc66:	f7f0 fb0f 	bl	8000288 <__aeabi_dsub>
 800fc6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc70:	ea43 030a 	orr.w	r3, r3, sl
 800fc74:	4313      	orrs	r3, r2
 800fc76:	4680      	mov	r8, r0
 800fc78:	4689      	mov	r9, r1
 800fc7a:	d055      	beq.n	800fd28 <_strtod_l+0xba0>
 800fc7c:	a336      	add	r3, pc, #216	; (adr r3, 800fd58 <_strtod_l+0xbd0>)
 800fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc82:	f7f0 ff2b 	bl	8000adc <__aeabi_dcmplt>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	f47f acd0 	bne.w	800f62c <_strtod_l+0x4a4>
 800fc8c:	a334      	add	r3, pc, #208	; (adr r3, 800fd60 <_strtod_l+0xbd8>)
 800fc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc92:	4640      	mov	r0, r8
 800fc94:	4649      	mov	r1, r9
 800fc96:	f7f0 ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	f43f af7b 	beq.w	800fb96 <_strtod_l+0xa0e>
 800fca0:	e4c4      	b.n	800f62c <_strtod_l+0x4a4>
 800fca2:	9b04      	ldr	r3, [sp, #16]
 800fca4:	b333      	cbz	r3, 800fcf4 <_strtod_l+0xb6c>
 800fca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fca8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fcac:	d822      	bhi.n	800fcf4 <_strtod_l+0xb6c>
 800fcae:	a32e      	add	r3, pc, #184	; (adr r3, 800fd68 <_strtod_l+0xbe0>)
 800fcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb4:	4640      	mov	r0, r8
 800fcb6:	4649      	mov	r1, r9
 800fcb8:	f7f0 ff1a 	bl	8000af0 <__aeabi_dcmple>
 800fcbc:	b1a0      	cbz	r0, 800fce8 <_strtod_l+0xb60>
 800fcbe:	4649      	mov	r1, r9
 800fcc0:	4640      	mov	r0, r8
 800fcc2:	f7f0 ff71 	bl	8000ba8 <__aeabi_d2uiz>
 800fcc6:	2801      	cmp	r0, #1
 800fcc8:	bf38      	it	cc
 800fcca:	2001      	movcc	r0, #1
 800fccc:	f7f0 fc1a 	bl	8000504 <__aeabi_ui2d>
 800fcd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcd2:	4680      	mov	r8, r0
 800fcd4:	4689      	mov	r9, r1
 800fcd6:	bb23      	cbnz	r3, 800fd22 <_strtod_l+0xb9a>
 800fcd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fcdc:	9010      	str	r0, [sp, #64]	; 0x40
 800fcde:	9311      	str	r3, [sp, #68]	; 0x44
 800fce0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fce4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fcec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fcf0:	1a9b      	subs	r3, r3, r2
 800fcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800fcf4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fcf8:	eeb0 0a48 	vmov.f32	s0, s16
 800fcfc:	eef0 0a68 	vmov.f32	s1, s17
 800fd00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd04:	f001 fe1e 	bl	8011944 <__ulp>
 800fd08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fd0c:	ec53 2b10 	vmov	r2, r3, d0
 800fd10:	f7f0 fc72 	bl	80005f8 <__aeabi_dmul>
 800fd14:	ec53 2b18 	vmov	r2, r3, d8
 800fd18:	f7f0 fab8 	bl	800028c <__adddf3>
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	468b      	mov	fp, r1
 800fd20:	e78d      	b.n	800fc3e <_strtod_l+0xab6>
 800fd22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fd26:	e7db      	b.n	800fce0 <_strtod_l+0xb58>
 800fd28:	a311      	add	r3, pc, #68	; (adr r3, 800fd70 <_strtod_l+0xbe8>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	f7f0 fed5 	bl	8000adc <__aeabi_dcmplt>
 800fd32:	e7b2      	b.n	800fc9a <_strtod_l+0xb12>
 800fd34:	2300      	movs	r3, #0
 800fd36:	930a      	str	r3, [sp, #40]	; 0x28
 800fd38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fd3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd3c:	6013      	str	r3, [r2, #0]
 800fd3e:	f7ff ba6b 	b.w	800f218 <_strtod_l+0x90>
 800fd42:	2a65      	cmp	r2, #101	; 0x65
 800fd44:	f43f ab5f 	beq.w	800f406 <_strtod_l+0x27e>
 800fd48:	2a45      	cmp	r2, #69	; 0x45
 800fd4a:	f43f ab5c 	beq.w	800f406 <_strtod_l+0x27e>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	f7ff bb94 	b.w	800f47c <_strtod_l+0x2f4>
 800fd54:	f3af 8000 	nop.w
 800fd58:	94a03595 	.word	0x94a03595
 800fd5c:	3fdfffff 	.word	0x3fdfffff
 800fd60:	35afe535 	.word	0x35afe535
 800fd64:	3fe00000 	.word	0x3fe00000
 800fd68:	ffc00000 	.word	0xffc00000
 800fd6c:	41dfffff 	.word	0x41dfffff
 800fd70:	94a03595 	.word	0x94a03595
 800fd74:	3fcfffff 	.word	0x3fcfffff
 800fd78:	3ff00000 	.word	0x3ff00000
 800fd7c:	7ff00000 	.word	0x7ff00000
 800fd80:	7fe00000 	.word	0x7fe00000
 800fd84:	7c9fffff 	.word	0x7c9fffff
 800fd88:	3fe00000 	.word	0x3fe00000
 800fd8c:	bff00000 	.word	0xbff00000
 800fd90:	7fefffff 	.word	0x7fefffff

0800fd94 <strtof>:
 800fd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd98:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800fe48 <strtof+0xb4>
 800fd9c:	4b26      	ldr	r3, [pc, #152]	; (800fe38 <strtof+0xa4>)
 800fd9e:	460a      	mov	r2, r1
 800fda0:	ed2d 8b02 	vpush	{d8}
 800fda4:	4601      	mov	r1, r0
 800fda6:	f8d8 0000 	ldr.w	r0, [r8]
 800fdaa:	f7ff f9ed 	bl	800f188 <_strtod_l>
 800fdae:	ec55 4b10 	vmov	r4, r5, d0
 800fdb2:	ee10 2a10 	vmov	r2, s0
 800fdb6:	ee10 0a10 	vmov	r0, s0
 800fdba:	462b      	mov	r3, r5
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	f7f0 feb5 	bl	8000b2c <__aeabi_dcmpun>
 800fdc2:	b190      	cbz	r0, 800fdea <strtof+0x56>
 800fdc4:	2d00      	cmp	r5, #0
 800fdc6:	481d      	ldr	r0, [pc, #116]	; (800fe3c <strtof+0xa8>)
 800fdc8:	da09      	bge.n	800fdde <strtof+0x4a>
 800fdca:	f002 f975 	bl	80120b8 <nanf>
 800fdce:	eeb1 8a40 	vneg.f32	s16, s0
 800fdd2:	eeb0 0a48 	vmov.f32	s0, s16
 800fdd6:	ecbd 8b02 	vpop	{d8}
 800fdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdde:	ecbd 8b02 	vpop	{d8}
 800fde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fde6:	f002 b967 	b.w	80120b8 <nanf>
 800fdea:	4620      	mov	r0, r4
 800fdec:	4629      	mov	r1, r5
 800fdee:	f7f0 fefb 	bl	8000be8 <__aeabi_d2f>
 800fdf2:	ee08 0a10 	vmov	s16, r0
 800fdf6:	eddf 7a12 	vldr	s15, [pc, #72]	; 800fe40 <strtof+0xac>
 800fdfa:	eeb0 7ac8 	vabs.f32	s14, s16
 800fdfe:	eeb4 7a67 	vcmp.f32	s14, s15
 800fe02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe06:	dde4      	ble.n	800fdd2 <strtof+0x3e>
 800fe08:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800fe0c:	4b0d      	ldr	r3, [pc, #52]	; (800fe44 <strtof+0xb0>)
 800fe0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe12:	4620      	mov	r0, r4
 800fe14:	4639      	mov	r1, r7
 800fe16:	f7f0 fe89 	bl	8000b2c <__aeabi_dcmpun>
 800fe1a:	b940      	cbnz	r0, 800fe2e <strtof+0x9a>
 800fe1c:	4b09      	ldr	r3, [pc, #36]	; (800fe44 <strtof+0xb0>)
 800fe1e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe22:	4620      	mov	r0, r4
 800fe24:	4639      	mov	r1, r7
 800fe26:	f7f0 fe63 	bl	8000af0 <__aeabi_dcmple>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d0d1      	beq.n	800fdd2 <strtof+0x3e>
 800fe2e:	f8d8 3000 	ldr.w	r3, [r8]
 800fe32:	2222      	movs	r2, #34	; 0x22
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	e7cc      	b.n	800fdd2 <strtof+0x3e>
 800fe38:	200001ec 	.word	0x200001ec
 800fe3c:	08014fb0 	.word	0x08014fb0
 800fe40:	7f7fffff 	.word	0x7f7fffff
 800fe44:	7fefffff 	.word	0x7fefffff
 800fe48:	20000184 	.word	0x20000184

0800fe4c <quorem>:
 800fe4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe50:	6903      	ldr	r3, [r0, #16]
 800fe52:	690c      	ldr	r4, [r1, #16]
 800fe54:	42a3      	cmp	r3, r4
 800fe56:	4607      	mov	r7, r0
 800fe58:	f2c0 8081 	blt.w	800ff5e <quorem+0x112>
 800fe5c:	3c01      	subs	r4, #1
 800fe5e:	f101 0814 	add.w	r8, r1, #20
 800fe62:	f100 0514 	add.w	r5, r0, #20
 800fe66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe6a:	9301      	str	r3, [sp, #4]
 800fe6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe74:	3301      	adds	r3, #1
 800fe76:	429a      	cmp	r2, r3
 800fe78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fe7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe80:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe84:	d331      	bcc.n	800feea <quorem+0x9e>
 800fe86:	f04f 0e00 	mov.w	lr, #0
 800fe8a:	4640      	mov	r0, r8
 800fe8c:	46ac      	mov	ip, r5
 800fe8e:	46f2      	mov	sl, lr
 800fe90:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe94:	b293      	uxth	r3, r2
 800fe96:	fb06 e303 	mla	r3, r6, r3, lr
 800fe9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	ebaa 0303 	sub.w	r3, sl, r3
 800fea4:	f8dc a000 	ldr.w	sl, [ip]
 800fea8:	0c12      	lsrs	r2, r2, #16
 800feaa:	fa13 f38a 	uxtah	r3, r3, sl
 800feae:	fb06 e202 	mla	r2, r6, r2, lr
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	9b00      	ldr	r3, [sp, #0]
 800feb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800feba:	b292      	uxth	r2, r2
 800febc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fec0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fec4:	f8bd 3000 	ldrh.w	r3, [sp]
 800fec8:	4581      	cmp	r9, r0
 800feca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fece:	f84c 3b04 	str.w	r3, [ip], #4
 800fed2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fed6:	d2db      	bcs.n	800fe90 <quorem+0x44>
 800fed8:	f855 300b 	ldr.w	r3, [r5, fp]
 800fedc:	b92b      	cbnz	r3, 800feea <quorem+0x9e>
 800fede:	9b01      	ldr	r3, [sp, #4]
 800fee0:	3b04      	subs	r3, #4
 800fee2:	429d      	cmp	r5, r3
 800fee4:	461a      	mov	r2, r3
 800fee6:	d32e      	bcc.n	800ff46 <quorem+0xfa>
 800fee8:	613c      	str	r4, [r7, #16]
 800feea:	4638      	mov	r0, r7
 800feec:	f001 fc84 	bl	80117f8 <__mcmp>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	db24      	blt.n	800ff3e <quorem+0xf2>
 800fef4:	3601      	adds	r6, #1
 800fef6:	4628      	mov	r0, r5
 800fef8:	f04f 0c00 	mov.w	ip, #0
 800fefc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ff00:	f8d0 e000 	ldr.w	lr, [r0]
 800ff04:	b293      	uxth	r3, r2
 800ff06:	ebac 0303 	sub.w	r3, ip, r3
 800ff0a:	0c12      	lsrs	r2, r2, #16
 800ff0c:	fa13 f38e 	uxtah	r3, r3, lr
 800ff10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ff14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff1e:	45c1      	cmp	r9, r8
 800ff20:	f840 3b04 	str.w	r3, [r0], #4
 800ff24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ff28:	d2e8      	bcs.n	800fefc <quorem+0xb0>
 800ff2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff32:	b922      	cbnz	r2, 800ff3e <quorem+0xf2>
 800ff34:	3b04      	subs	r3, #4
 800ff36:	429d      	cmp	r5, r3
 800ff38:	461a      	mov	r2, r3
 800ff3a:	d30a      	bcc.n	800ff52 <quorem+0x106>
 800ff3c:	613c      	str	r4, [r7, #16]
 800ff3e:	4630      	mov	r0, r6
 800ff40:	b003      	add	sp, #12
 800ff42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff46:	6812      	ldr	r2, [r2, #0]
 800ff48:	3b04      	subs	r3, #4
 800ff4a:	2a00      	cmp	r2, #0
 800ff4c:	d1cc      	bne.n	800fee8 <quorem+0x9c>
 800ff4e:	3c01      	subs	r4, #1
 800ff50:	e7c7      	b.n	800fee2 <quorem+0x96>
 800ff52:	6812      	ldr	r2, [r2, #0]
 800ff54:	3b04      	subs	r3, #4
 800ff56:	2a00      	cmp	r2, #0
 800ff58:	d1f0      	bne.n	800ff3c <quorem+0xf0>
 800ff5a:	3c01      	subs	r4, #1
 800ff5c:	e7eb      	b.n	800ff36 <quorem+0xea>
 800ff5e:	2000      	movs	r0, #0
 800ff60:	e7ee      	b.n	800ff40 <quorem+0xf4>
 800ff62:	0000      	movs	r0, r0
 800ff64:	0000      	movs	r0, r0
	...

0800ff68 <_dtoa_r>:
 800ff68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	ed2d 8b04 	vpush	{d8-d9}
 800ff70:	ec57 6b10 	vmov	r6, r7, d0
 800ff74:	b093      	sub	sp, #76	; 0x4c
 800ff76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ff78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ff7c:	9106      	str	r1, [sp, #24]
 800ff7e:	ee10 aa10 	vmov	sl, s0
 800ff82:	4604      	mov	r4, r0
 800ff84:	9209      	str	r2, [sp, #36]	; 0x24
 800ff86:	930c      	str	r3, [sp, #48]	; 0x30
 800ff88:	46bb      	mov	fp, r7
 800ff8a:	b975      	cbnz	r5, 800ffaa <_dtoa_r+0x42>
 800ff8c:	2010      	movs	r0, #16
 800ff8e:	f001 f94d 	bl	801122c <malloc>
 800ff92:	4602      	mov	r2, r0
 800ff94:	6260      	str	r0, [r4, #36]	; 0x24
 800ff96:	b920      	cbnz	r0, 800ffa2 <_dtoa_r+0x3a>
 800ff98:	4ba7      	ldr	r3, [pc, #668]	; (8010238 <_dtoa_r+0x2d0>)
 800ff9a:	21ea      	movs	r1, #234	; 0xea
 800ff9c:	48a7      	ldr	r0, [pc, #668]	; (801023c <_dtoa_r+0x2d4>)
 800ff9e:	f002 f8b3 	bl	8012108 <__assert_func>
 800ffa2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ffa6:	6005      	str	r5, [r0, #0]
 800ffa8:	60c5      	str	r5, [r0, #12]
 800ffaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffac:	6819      	ldr	r1, [r3, #0]
 800ffae:	b151      	cbz	r1, 800ffc6 <_dtoa_r+0x5e>
 800ffb0:	685a      	ldr	r2, [r3, #4]
 800ffb2:	604a      	str	r2, [r1, #4]
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	4093      	lsls	r3, r2
 800ffb8:	608b      	str	r3, [r1, #8]
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f001 f990 	bl	80112e0 <_Bfree>
 800ffc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	601a      	str	r2, [r3, #0]
 800ffc6:	1e3b      	subs	r3, r7, #0
 800ffc8:	bfaa      	itet	ge
 800ffca:	2300      	movge	r3, #0
 800ffcc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ffd0:	f8c8 3000 	strge.w	r3, [r8]
 800ffd4:	4b9a      	ldr	r3, [pc, #616]	; (8010240 <_dtoa_r+0x2d8>)
 800ffd6:	bfbc      	itt	lt
 800ffd8:	2201      	movlt	r2, #1
 800ffda:	f8c8 2000 	strlt.w	r2, [r8]
 800ffde:	ea33 030b 	bics.w	r3, r3, fp
 800ffe2:	d11b      	bne.n	801001c <_dtoa_r+0xb4>
 800ffe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffe6:	f242 730f 	movw	r3, #9999	; 0x270f
 800ffea:	6013      	str	r3, [r2, #0]
 800ffec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fff0:	4333      	orrs	r3, r6
 800fff2:	f000 8592 	beq.w	8010b1a <_dtoa_r+0xbb2>
 800fff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fff8:	b963      	cbnz	r3, 8010014 <_dtoa_r+0xac>
 800fffa:	4b92      	ldr	r3, [pc, #584]	; (8010244 <_dtoa_r+0x2dc>)
 800fffc:	e022      	b.n	8010044 <_dtoa_r+0xdc>
 800fffe:	4b92      	ldr	r3, [pc, #584]	; (8010248 <_dtoa_r+0x2e0>)
 8010000:	9301      	str	r3, [sp, #4]
 8010002:	3308      	adds	r3, #8
 8010004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010006:	6013      	str	r3, [r2, #0]
 8010008:	9801      	ldr	r0, [sp, #4]
 801000a:	b013      	add	sp, #76	; 0x4c
 801000c:	ecbd 8b04 	vpop	{d8-d9}
 8010010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010014:	4b8b      	ldr	r3, [pc, #556]	; (8010244 <_dtoa_r+0x2dc>)
 8010016:	9301      	str	r3, [sp, #4]
 8010018:	3303      	adds	r3, #3
 801001a:	e7f3      	b.n	8010004 <_dtoa_r+0x9c>
 801001c:	2200      	movs	r2, #0
 801001e:	2300      	movs	r3, #0
 8010020:	4650      	mov	r0, sl
 8010022:	4659      	mov	r1, fp
 8010024:	f7f0 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 8010028:	ec4b ab19 	vmov	d9, sl, fp
 801002c:	4680      	mov	r8, r0
 801002e:	b158      	cbz	r0, 8010048 <_dtoa_r+0xe0>
 8010030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010032:	2301      	movs	r3, #1
 8010034:	6013      	str	r3, [r2, #0]
 8010036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010038:	2b00      	cmp	r3, #0
 801003a:	f000 856b 	beq.w	8010b14 <_dtoa_r+0xbac>
 801003e:	4883      	ldr	r0, [pc, #524]	; (801024c <_dtoa_r+0x2e4>)
 8010040:	6018      	str	r0, [r3, #0]
 8010042:	1e43      	subs	r3, r0, #1
 8010044:	9301      	str	r3, [sp, #4]
 8010046:	e7df      	b.n	8010008 <_dtoa_r+0xa0>
 8010048:	ec4b ab10 	vmov	d0, sl, fp
 801004c:	aa10      	add	r2, sp, #64	; 0x40
 801004e:	a911      	add	r1, sp, #68	; 0x44
 8010050:	4620      	mov	r0, r4
 8010052:	f001 fcf3 	bl	8011a3c <__d2b>
 8010056:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801005a:	ee08 0a10 	vmov	s16, r0
 801005e:	2d00      	cmp	r5, #0
 8010060:	f000 8084 	beq.w	801016c <_dtoa_r+0x204>
 8010064:	ee19 3a90 	vmov	r3, s19
 8010068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801006c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010070:	4656      	mov	r6, sl
 8010072:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801007a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801007e:	4b74      	ldr	r3, [pc, #464]	; (8010250 <_dtoa_r+0x2e8>)
 8010080:	2200      	movs	r2, #0
 8010082:	4630      	mov	r0, r6
 8010084:	4639      	mov	r1, r7
 8010086:	f7f0 f8ff 	bl	8000288 <__aeabi_dsub>
 801008a:	a365      	add	r3, pc, #404	; (adr r3, 8010220 <_dtoa_r+0x2b8>)
 801008c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010090:	f7f0 fab2 	bl	80005f8 <__aeabi_dmul>
 8010094:	a364      	add	r3, pc, #400	; (adr r3, 8010228 <_dtoa_r+0x2c0>)
 8010096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009a:	f7f0 f8f7 	bl	800028c <__adddf3>
 801009e:	4606      	mov	r6, r0
 80100a0:	4628      	mov	r0, r5
 80100a2:	460f      	mov	r7, r1
 80100a4:	f7f0 fa3e 	bl	8000524 <__aeabi_i2d>
 80100a8:	a361      	add	r3, pc, #388	; (adr r3, 8010230 <_dtoa_r+0x2c8>)
 80100aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ae:	f7f0 faa3 	bl	80005f8 <__aeabi_dmul>
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	4630      	mov	r0, r6
 80100b8:	4639      	mov	r1, r7
 80100ba:	f7f0 f8e7 	bl	800028c <__adddf3>
 80100be:	4606      	mov	r6, r0
 80100c0:	460f      	mov	r7, r1
 80100c2:	f7f0 fd49 	bl	8000b58 <__aeabi_d2iz>
 80100c6:	2200      	movs	r2, #0
 80100c8:	9000      	str	r0, [sp, #0]
 80100ca:	2300      	movs	r3, #0
 80100cc:	4630      	mov	r0, r6
 80100ce:	4639      	mov	r1, r7
 80100d0:	f7f0 fd04 	bl	8000adc <__aeabi_dcmplt>
 80100d4:	b150      	cbz	r0, 80100ec <_dtoa_r+0x184>
 80100d6:	9800      	ldr	r0, [sp, #0]
 80100d8:	f7f0 fa24 	bl	8000524 <__aeabi_i2d>
 80100dc:	4632      	mov	r2, r6
 80100de:	463b      	mov	r3, r7
 80100e0:	f7f0 fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80100e4:	b910      	cbnz	r0, 80100ec <_dtoa_r+0x184>
 80100e6:	9b00      	ldr	r3, [sp, #0]
 80100e8:	3b01      	subs	r3, #1
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	9b00      	ldr	r3, [sp, #0]
 80100ee:	2b16      	cmp	r3, #22
 80100f0:	d85a      	bhi.n	80101a8 <_dtoa_r+0x240>
 80100f2:	9a00      	ldr	r2, [sp, #0]
 80100f4:	4b57      	ldr	r3, [pc, #348]	; (8010254 <_dtoa_r+0x2ec>)
 80100f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fe:	ec51 0b19 	vmov	r0, r1, d9
 8010102:	f7f0 fceb 	bl	8000adc <__aeabi_dcmplt>
 8010106:	2800      	cmp	r0, #0
 8010108:	d050      	beq.n	80101ac <_dtoa_r+0x244>
 801010a:	9b00      	ldr	r3, [sp, #0]
 801010c:	3b01      	subs	r3, #1
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	2300      	movs	r3, #0
 8010112:	930b      	str	r3, [sp, #44]	; 0x2c
 8010114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010116:	1b5d      	subs	r5, r3, r5
 8010118:	1e6b      	subs	r3, r5, #1
 801011a:	9305      	str	r3, [sp, #20]
 801011c:	bf45      	ittet	mi
 801011e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010122:	9304      	strmi	r3, [sp, #16]
 8010124:	2300      	movpl	r3, #0
 8010126:	2300      	movmi	r3, #0
 8010128:	bf4c      	ite	mi
 801012a:	9305      	strmi	r3, [sp, #20]
 801012c:	9304      	strpl	r3, [sp, #16]
 801012e:	9b00      	ldr	r3, [sp, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	db3d      	blt.n	80101b0 <_dtoa_r+0x248>
 8010134:	9b05      	ldr	r3, [sp, #20]
 8010136:	9a00      	ldr	r2, [sp, #0]
 8010138:	920a      	str	r2, [sp, #40]	; 0x28
 801013a:	4413      	add	r3, r2
 801013c:	9305      	str	r3, [sp, #20]
 801013e:	2300      	movs	r3, #0
 8010140:	9307      	str	r3, [sp, #28]
 8010142:	9b06      	ldr	r3, [sp, #24]
 8010144:	2b09      	cmp	r3, #9
 8010146:	f200 8089 	bhi.w	801025c <_dtoa_r+0x2f4>
 801014a:	2b05      	cmp	r3, #5
 801014c:	bfc4      	itt	gt
 801014e:	3b04      	subgt	r3, #4
 8010150:	9306      	strgt	r3, [sp, #24]
 8010152:	9b06      	ldr	r3, [sp, #24]
 8010154:	f1a3 0302 	sub.w	r3, r3, #2
 8010158:	bfcc      	ite	gt
 801015a:	2500      	movgt	r5, #0
 801015c:	2501      	movle	r5, #1
 801015e:	2b03      	cmp	r3, #3
 8010160:	f200 8087 	bhi.w	8010272 <_dtoa_r+0x30a>
 8010164:	e8df f003 	tbb	[pc, r3]
 8010168:	59383a2d 	.word	0x59383a2d
 801016c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010170:	441d      	add	r5, r3
 8010172:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010176:	2b20      	cmp	r3, #32
 8010178:	bfc1      	itttt	gt
 801017a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801017e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010182:	fa0b f303 	lslgt.w	r3, fp, r3
 8010186:	fa26 f000 	lsrgt.w	r0, r6, r0
 801018a:	bfda      	itte	le
 801018c:	f1c3 0320 	rsble	r3, r3, #32
 8010190:	fa06 f003 	lslle.w	r0, r6, r3
 8010194:	4318      	orrgt	r0, r3
 8010196:	f7f0 f9b5 	bl	8000504 <__aeabi_ui2d>
 801019a:	2301      	movs	r3, #1
 801019c:	4606      	mov	r6, r0
 801019e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80101a2:	3d01      	subs	r5, #1
 80101a4:	930e      	str	r3, [sp, #56]	; 0x38
 80101a6:	e76a      	b.n	801007e <_dtoa_r+0x116>
 80101a8:	2301      	movs	r3, #1
 80101aa:	e7b2      	b.n	8010112 <_dtoa_r+0x1aa>
 80101ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80101ae:	e7b1      	b.n	8010114 <_dtoa_r+0x1ac>
 80101b0:	9b04      	ldr	r3, [sp, #16]
 80101b2:	9a00      	ldr	r2, [sp, #0]
 80101b4:	1a9b      	subs	r3, r3, r2
 80101b6:	9304      	str	r3, [sp, #16]
 80101b8:	4253      	negs	r3, r2
 80101ba:	9307      	str	r3, [sp, #28]
 80101bc:	2300      	movs	r3, #0
 80101be:	930a      	str	r3, [sp, #40]	; 0x28
 80101c0:	e7bf      	b.n	8010142 <_dtoa_r+0x1da>
 80101c2:	2300      	movs	r3, #0
 80101c4:	9308      	str	r3, [sp, #32]
 80101c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	dc55      	bgt.n	8010278 <_dtoa_r+0x310>
 80101cc:	2301      	movs	r3, #1
 80101ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80101d2:	461a      	mov	r2, r3
 80101d4:	9209      	str	r2, [sp, #36]	; 0x24
 80101d6:	e00c      	b.n	80101f2 <_dtoa_r+0x28a>
 80101d8:	2301      	movs	r3, #1
 80101da:	e7f3      	b.n	80101c4 <_dtoa_r+0x25c>
 80101dc:	2300      	movs	r3, #0
 80101de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101e0:	9308      	str	r3, [sp, #32]
 80101e2:	9b00      	ldr	r3, [sp, #0]
 80101e4:	4413      	add	r3, r2
 80101e6:	9302      	str	r3, [sp, #8]
 80101e8:	3301      	adds	r3, #1
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	9303      	str	r3, [sp, #12]
 80101ee:	bfb8      	it	lt
 80101f0:	2301      	movlt	r3, #1
 80101f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80101f4:	2200      	movs	r2, #0
 80101f6:	6042      	str	r2, [r0, #4]
 80101f8:	2204      	movs	r2, #4
 80101fa:	f102 0614 	add.w	r6, r2, #20
 80101fe:	429e      	cmp	r6, r3
 8010200:	6841      	ldr	r1, [r0, #4]
 8010202:	d93d      	bls.n	8010280 <_dtoa_r+0x318>
 8010204:	4620      	mov	r0, r4
 8010206:	f001 f82b 	bl	8011260 <_Balloc>
 801020a:	9001      	str	r0, [sp, #4]
 801020c:	2800      	cmp	r0, #0
 801020e:	d13b      	bne.n	8010288 <_dtoa_r+0x320>
 8010210:	4b11      	ldr	r3, [pc, #68]	; (8010258 <_dtoa_r+0x2f0>)
 8010212:	4602      	mov	r2, r0
 8010214:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010218:	e6c0      	b.n	800ff9c <_dtoa_r+0x34>
 801021a:	2301      	movs	r3, #1
 801021c:	e7df      	b.n	80101de <_dtoa_r+0x276>
 801021e:	bf00      	nop
 8010220:	636f4361 	.word	0x636f4361
 8010224:	3fd287a7 	.word	0x3fd287a7
 8010228:	8b60c8b3 	.word	0x8b60c8b3
 801022c:	3fc68a28 	.word	0x3fc68a28
 8010230:	509f79fb 	.word	0x509f79fb
 8010234:	3fd34413 	.word	0x3fd34413
 8010238:	08014d0d 	.word	0x08014d0d
 801023c:	08014d24 	.word	0x08014d24
 8010240:	7ff00000 	.word	0x7ff00000
 8010244:	08014d09 	.word	0x08014d09
 8010248:	08014d00 	.word	0x08014d00
 801024c:	0801307f 	.word	0x0801307f
 8010250:	3ff80000 	.word	0x3ff80000
 8010254:	08014e90 	.word	0x08014e90
 8010258:	08014d7f 	.word	0x08014d7f
 801025c:	2501      	movs	r5, #1
 801025e:	2300      	movs	r3, #0
 8010260:	9306      	str	r3, [sp, #24]
 8010262:	9508      	str	r5, [sp, #32]
 8010264:	f04f 33ff 	mov.w	r3, #4294967295
 8010268:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801026c:	2200      	movs	r2, #0
 801026e:	2312      	movs	r3, #18
 8010270:	e7b0      	b.n	80101d4 <_dtoa_r+0x26c>
 8010272:	2301      	movs	r3, #1
 8010274:	9308      	str	r3, [sp, #32]
 8010276:	e7f5      	b.n	8010264 <_dtoa_r+0x2fc>
 8010278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801027a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801027e:	e7b8      	b.n	80101f2 <_dtoa_r+0x28a>
 8010280:	3101      	adds	r1, #1
 8010282:	6041      	str	r1, [r0, #4]
 8010284:	0052      	lsls	r2, r2, #1
 8010286:	e7b8      	b.n	80101fa <_dtoa_r+0x292>
 8010288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801028a:	9a01      	ldr	r2, [sp, #4]
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	9b03      	ldr	r3, [sp, #12]
 8010290:	2b0e      	cmp	r3, #14
 8010292:	f200 809d 	bhi.w	80103d0 <_dtoa_r+0x468>
 8010296:	2d00      	cmp	r5, #0
 8010298:	f000 809a 	beq.w	80103d0 <_dtoa_r+0x468>
 801029c:	9b00      	ldr	r3, [sp, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	dd32      	ble.n	8010308 <_dtoa_r+0x3a0>
 80102a2:	4ab7      	ldr	r2, [pc, #732]	; (8010580 <_dtoa_r+0x618>)
 80102a4:	f003 030f 	and.w	r3, r3, #15
 80102a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80102ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102b0:	9b00      	ldr	r3, [sp, #0]
 80102b2:	05d8      	lsls	r0, r3, #23
 80102b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80102b8:	d516      	bpl.n	80102e8 <_dtoa_r+0x380>
 80102ba:	4bb2      	ldr	r3, [pc, #712]	; (8010584 <_dtoa_r+0x61c>)
 80102bc:	ec51 0b19 	vmov	r0, r1, d9
 80102c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80102c4:	f7f0 fac2 	bl	800084c <__aeabi_ddiv>
 80102c8:	f007 070f 	and.w	r7, r7, #15
 80102cc:	4682      	mov	sl, r0
 80102ce:	468b      	mov	fp, r1
 80102d0:	2503      	movs	r5, #3
 80102d2:	4eac      	ldr	r6, [pc, #688]	; (8010584 <_dtoa_r+0x61c>)
 80102d4:	b957      	cbnz	r7, 80102ec <_dtoa_r+0x384>
 80102d6:	4642      	mov	r2, r8
 80102d8:	464b      	mov	r3, r9
 80102da:	4650      	mov	r0, sl
 80102dc:	4659      	mov	r1, fp
 80102de:	f7f0 fab5 	bl	800084c <__aeabi_ddiv>
 80102e2:	4682      	mov	sl, r0
 80102e4:	468b      	mov	fp, r1
 80102e6:	e028      	b.n	801033a <_dtoa_r+0x3d2>
 80102e8:	2502      	movs	r5, #2
 80102ea:	e7f2      	b.n	80102d2 <_dtoa_r+0x36a>
 80102ec:	07f9      	lsls	r1, r7, #31
 80102ee:	d508      	bpl.n	8010302 <_dtoa_r+0x39a>
 80102f0:	4640      	mov	r0, r8
 80102f2:	4649      	mov	r1, r9
 80102f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80102f8:	f7f0 f97e 	bl	80005f8 <__aeabi_dmul>
 80102fc:	3501      	adds	r5, #1
 80102fe:	4680      	mov	r8, r0
 8010300:	4689      	mov	r9, r1
 8010302:	107f      	asrs	r7, r7, #1
 8010304:	3608      	adds	r6, #8
 8010306:	e7e5      	b.n	80102d4 <_dtoa_r+0x36c>
 8010308:	f000 809b 	beq.w	8010442 <_dtoa_r+0x4da>
 801030c:	9b00      	ldr	r3, [sp, #0]
 801030e:	4f9d      	ldr	r7, [pc, #628]	; (8010584 <_dtoa_r+0x61c>)
 8010310:	425e      	negs	r6, r3
 8010312:	4b9b      	ldr	r3, [pc, #620]	; (8010580 <_dtoa_r+0x618>)
 8010314:	f006 020f 	and.w	r2, r6, #15
 8010318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	ec51 0b19 	vmov	r0, r1, d9
 8010324:	f7f0 f968 	bl	80005f8 <__aeabi_dmul>
 8010328:	1136      	asrs	r6, r6, #4
 801032a:	4682      	mov	sl, r0
 801032c:	468b      	mov	fp, r1
 801032e:	2300      	movs	r3, #0
 8010330:	2502      	movs	r5, #2
 8010332:	2e00      	cmp	r6, #0
 8010334:	d17a      	bne.n	801042c <_dtoa_r+0x4c4>
 8010336:	2b00      	cmp	r3, #0
 8010338:	d1d3      	bne.n	80102e2 <_dtoa_r+0x37a>
 801033a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801033c:	2b00      	cmp	r3, #0
 801033e:	f000 8082 	beq.w	8010446 <_dtoa_r+0x4de>
 8010342:	4b91      	ldr	r3, [pc, #580]	; (8010588 <_dtoa_r+0x620>)
 8010344:	2200      	movs	r2, #0
 8010346:	4650      	mov	r0, sl
 8010348:	4659      	mov	r1, fp
 801034a:	f7f0 fbc7 	bl	8000adc <__aeabi_dcmplt>
 801034e:	2800      	cmp	r0, #0
 8010350:	d079      	beq.n	8010446 <_dtoa_r+0x4de>
 8010352:	9b03      	ldr	r3, [sp, #12]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d076      	beq.n	8010446 <_dtoa_r+0x4de>
 8010358:	9b02      	ldr	r3, [sp, #8]
 801035a:	2b00      	cmp	r3, #0
 801035c:	dd36      	ble.n	80103cc <_dtoa_r+0x464>
 801035e:	9b00      	ldr	r3, [sp, #0]
 8010360:	4650      	mov	r0, sl
 8010362:	4659      	mov	r1, fp
 8010364:	1e5f      	subs	r7, r3, #1
 8010366:	2200      	movs	r2, #0
 8010368:	4b88      	ldr	r3, [pc, #544]	; (801058c <_dtoa_r+0x624>)
 801036a:	f7f0 f945 	bl	80005f8 <__aeabi_dmul>
 801036e:	9e02      	ldr	r6, [sp, #8]
 8010370:	4682      	mov	sl, r0
 8010372:	468b      	mov	fp, r1
 8010374:	3501      	adds	r5, #1
 8010376:	4628      	mov	r0, r5
 8010378:	f7f0 f8d4 	bl	8000524 <__aeabi_i2d>
 801037c:	4652      	mov	r2, sl
 801037e:	465b      	mov	r3, fp
 8010380:	f7f0 f93a 	bl	80005f8 <__aeabi_dmul>
 8010384:	4b82      	ldr	r3, [pc, #520]	; (8010590 <_dtoa_r+0x628>)
 8010386:	2200      	movs	r2, #0
 8010388:	f7ef ff80 	bl	800028c <__adddf3>
 801038c:	46d0      	mov	r8, sl
 801038e:	46d9      	mov	r9, fp
 8010390:	4682      	mov	sl, r0
 8010392:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010396:	2e00      	cmp	r6, #0
 8010398:	d158      	bne.n	801044c <_dtoa_r+0x4e4>
 801039a:	4b7e      	ldr	r3, [pc, #504]	; (8010594 <_dtoa_r+0x62c>)
 801039c:	2200      	movs	r2, #0
 801039e:	4640      	mov	r0, r8
 80103a0:	4649      	mov	r1, r9
 80103a2:	f7ef ff71 	bl	8000288 <__aeabi_dsub>
 80103a6:	4652      	mov	r2, sl
 80103a8:	465b      	mov	r3, fp
 80103aa:	4680      	mov	r8, r0
 80103ac:	4689      	mov	r9, r1
 80103ae:	f7f0 fbb3 	bl	8000b18 <__aeabi_dcmpgt>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	f040 8295 	bne.w	80108e2 <_dtoa_r+0x97a>
 80103b8:	4652      	mov	r2, sl
 80103ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80103be:	4640      	mov	r0, r8
 80103c0:	4649      	mov	r1, r9
 80103c2:	f7f0 fb8b 	bl	8000adc <__aeabi_dcmplt>
 80103c6:	2800      	cmp	r0, #0
 80103c8:	f040 8289 	bne.w	80108de <_dtoa_r+0x976>
 80103cc:	ec5b ab19 	vmov	sl, fp, d9
 80103d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f2c0 8148 	blt.w	8010668 <_dtoa_r+0x700>
 80103d8:	9a00      	ldr	r2, [sp, #0]
 80103da:	2a0e      	cmp	r2, #14
 80103dc:	f300 8144 	bgt.w	8010668 <_dtoa_r+0x700>
 80103e0:	4b67      	ldr	r3, [pc, #412]	; (8010580 <_dtoa_r+0x618>)
 80103e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80103ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f280 80d5 	bge.w	801059c <_dtoa_r+0x634>
 80103f2:	9b03      	ldr	r3, [sp, #12]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f300 80d1 	bgt.w	801059c <_dtoa_r+0x634>
 80103fa:	f040 826f 	bne.w	80108dc <_dtoa_r+0x974>
 80103fe:	4b65      	ldr	r3, [pc, #404]	; (8010594 <_dtoa_r+0x62c>)
 8010400:	2200      	movs	r2, #0
 8010402:	4640      	mov	r0, r8
 8010404:	4649      	mov	r1, r9
 8010406:	f7f0 f8f7 	bl	80005f8 <__aeabi_dmul>
 801040a:	4652      	mov	r2, sl
 801040c:	465b      	mov	r3, fp
 801040e:	f7f0 fb79 	bl	8000b04 <__aeabi_dcmpge>
 8010412:	9e03      	ldr	r6, [sp, #12]
 8010414:	4637      	mov	r7, r6
 8010416:	2800      	cmp	r0, #0
 8010418:	f040 8245 	bne.w	80108a6 <_dtoa_r+0x93e>
 801041c:	9d01      	ldr	r5, [sp, #4]
 801041e:	2331      	movs	r3, #49	; 0x31
 8010420:	f805 3b01 	strb.w	r3, [r5], #1
 8010424:	9b00      	ldr	r3, [sp, #0]
 8010426:	3301      	adds	r3, #1
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	e240      	b.n	80108ae <_dtoa_r+0x946>
 801042c:	07f2      	lsls	r2, r6, #31
 801042e:	d505      	bpl.n	801043c <_dtoa_r+0x4d4>
 8010430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010434:	f7f0 f8e0 	bl	80005f8 <__aeabi_dmul>
 8010438:	3501      	adds	r5, #1
 801043a:	2301      	movs	r3, #1
 801043c:	1076      	asrs	r6, r6, #1
 801043e:	3708      	adds	r7, #8
 8010440:	e777      	b.n	8010332 <_dtoa_r+0x3ca>
 8010442:	2502      	movs	r5, #2
 8010444:	e779      	b.n	801033a <_dtoa_r+0x3d2>
 8010446:	9f00      	ldr	r7, [sp, #0]
 8010448:	9e03      	ldr	r6, [sp, #12]
 801044a:	e794      	b.n	8010376 <_dtoa_r+0x40e>
 801044c:	9901      	ldr	r1, [sp, #4]
 801044e:	4b4c      	ldr	r3, [pc, #304]	; (8010580 <_dtoa_r+0x618>)
 8010450:	4431      	add	r1, r6
 8010452:	910d      	str	r1, [sp, #52]	; 0x34
 8010454:	9908      	ldr	r1, [sp, #32]
 8010456:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801045a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801045e:	2900      	cmp	r1, #0
 8010460:	d043      	beq.n	80104ea <_dtoa_r+0x582>
 8010462:	494d      	ldr	r1, [pc, #308]	; (8010598 <_dtoa_r+0x630>)
 8010464:	2000      	movs	r0, #0
 8010466:	f7f0 f9f1 	bl	800084c <__aeabi_ddiv>
 801046a:	4652      	mov	r2, sl
 801046c:	465b      	mov	r3, fp
 801046e:	f7ef ff0b 	bl	8000288 <__aeabi_dsub>
 8010472:	9d01      	ldr	r5, [sp, #4]
 8010474:	4682      	mov	sl, r0
 8010476:	468b      	mov	fp, r1
 8010478:	4649      	mov	r1, r9
 801047a:	4640      	mov	r0, r8
 801047c:	f7f0 fb6c 	bl	8000b58 <__aeabi_d2iz>
 8010480:	4606      	mov	r6, r0
 8010482:	f7f0 f84f 	bl	8000524 <__aeabi_i2d>
 8010486:	4602      	mov	r2, r0
 8010488:	460b      	mov	r3, r1
 801048a:	4640      	mov	r0, r8
 801048c:	4649      	mov	r1, r9
 801048e:	f7ef fefb 	bl	8000288 <__aeabi_dsub>
 8010492:	3630      	adds	r6, #48	; 0x30
 8010494:	f805 6b01 	strb.w	r6, [r5], #1
 8010498:	4652      	mov	r2, sl
 801049a:	465b      	mov	r3, fp
 801049c:	4680      	mov	r8, r0
 801049e:	4689      	mov	r9, r1
 80104a0:	f7f0 fb1c 	bl	8000adc <__aeabi_dcmplt>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d163      	bne.n	8010570 <_dtoa_r+0x608>
 80104a8:	4642      	mov	r2, r8
 80104aa:	464b      	mov	r3, r9
 80104ac:	4936      	ldr	r1, [pc, #216]	; (8010588 <_dtoa_r+0x620>)
 80104ae:	2000      	movs	r0, #0
 80104b0:	f7ef feea 	bl	8000288 <__aeabi_dsub>
 80104b4:	4652      	mov	r2, sl
 80104b6:	465b      	mov	r3, fp
 80104b8:	f7f0 fb10 	bl	8000adc <__aeabi_dcmplt>
 80104bc:	2800      	cmp	r0, #0
 80104be:	f040 80b5 	bne.w	801062c <_dtoa_r+0x6c4>
 80104c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104c4:	429d      	cmp	r5, r3
 80104c6:	d081      	beq.n	80103cc <_dtoa_r+0x464>
 80104c8:	4b30      	ldr	r3, [pc, #192]	; (801058c <_dtoa_r+0x624>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	4650      	mov	r0, sl
 80104ce:	4659      	mov	r1, fp
 80104d0:	f7f0 f892 	bl	80005f8 <__aeabi_dmul>
 80104d4:	4b2d      	ldr	r3, [pc, #180]	; (801058c <_dtoa_r+0x624>)
 80104d6:	4682      	mov	sl, r0
 80104d8:	468b      	mov	fp, r1
 80104da:	4640      	mov	r0, r8
 80104dc:	4649      	mov	r1, r9
 80104de:	2200      	movs	r2, #0
 80104e0:	f7f0 f88a 	bl	80005f8 <__aeabi_dmul>
 80104e4:	4680      	mov	r8, r0
 80104e6:	4689      	mov	r9, r1
 80104e8:	e7c6      	b.n	8010478 <_dtoa_r+0x510>
 80104ea:	4650      	mov	r0, sl
 80104ec:	4659      	mov	r1, fp
 80104ee:	f7f0 f883 	bl	80005f8 <__aeabi_dmul>
 80104f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104f4:	9d01      	ldr	r5, [sp, #4]
 80104f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80104f8:	4682      	mov	sl, r0
 80104fa:	468b      	mov	fp, r1
 80104fc:	4649      	mov	r1, r9
 80104fe:	4640      	mov	r0, r8
 8010500:	f7f0 fb2a 	bl	8000b58 <__aeabi_d2iz>
 8010504:	4606      	mov	r6, r0
 8010506:	f7f0 f80d 	bl	8000524 <__aeabi_i2d>
 801050a:	3630      	adds	r6, #48	; 0x30
 801050c:	4602      	mov	r2, r0
 801050e:	460b      	mov	r3, r1
 8010510:	4640      	mov	r0, r8
 8010512:	4649      	mov	r1, r9
 8010514:	f7ef feb8 	bl	8000288 <__aeabi_dsub>
 8010518:	f805 6b01 	strb.w	r6, [r5], #1
 801051c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801051e:	429d      	cmp	r5, r3
 8010520:	4680      	mov	r8, r0
 8010522:	4689      	mov	r9, r1
 8010524:	f04f 0200 	mov.w	r2, #0
 8010528:	d124      	bne.n	8010574 <_dtoa_r+0x60c>
 801052a:	4b1b      	ldr	r3, [pc, #108]	; (8010598 <_dtoa_r+0x630>)
 801052c:	4650      	mov	r0, sl
 801052e:	4659      	mov	r1, fp
 8010530:	f7ef feac 	bl	800028c <__adddf3>
 8010534:	4602      	mov	r2, r0
 8010536:	460b      	mov	r3, r1
 8010538:	4640      	mov	r0, r8
 801053a:	4649      	mov	r1, r9
 801053c:	f7f0 faec 	bl	8000b18 <__aeabi_dcmpgt>
 8010540:	2800      	cmp	r0, #0
 8010542:	d173      	bne.n	801062c <_dtoa_r+0x6c4>
 8010544:	4652      	mov	r2, sl
 8010546:	465b      	mov	r3, fp
 8010548:	4913      	ldr	r1, [pc, #76]	; (8010598 <_dtoa_r+0x630>)
 801054a:	2000      	movs	r0, #0
 801054c:	f7ef fe9c 	bl	8000288 <__aeabi_dsub>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	4640      	mov	r0, r8
 8010556:	4649      	mov	r1, r9
 8010558:	f7f0 fac0 	bl	8000adc <__aeabi_dcmplt>
 801055c:	2800      	cmp	r0, #0
 801055e:	f43f af35 	beq.w	80103cc <_dtoa_r+0x464>
 8010562:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010564:	1e6b      	subs	r3, r5, #1
 8010566:	930f      	str	r3, [sp, #60]	; 0x3c
 8010568:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801056c:	2b30      	cmp	r3, #48	; 0x30
 801056e:	d0f8      	beq.n	8010562 <_dtoa_r+0x5fa>
 8010570:	9700      	str	r7, [sp, #0]
 8010572:	e049      	b.n	8010608 <_dtoa_r+0x6a0>
 8010574:	4b05      	ldr	r3, [pc, #20]	; (801058c <_dtoa_r+0x624>)
 8010576:	f7f0 f83f 	bl	80005f8 <__aeabi_dmul>
 801057a:	4680      	mov	r8, r0
 801057c:	4689      	mov	r9, r1
 801057e:	e7bd      	b.n	80104fc <_dtoa_r+0x594>
 8010580:	08014e90 	.word	0x08014e90
 8010584:	08014e68 	.word	0x08014e68
 8010588:	3ff00000 	.word	0x3ff00000
 801058c:	40240000 	.word	0x40240000
 8010590:	401c0000 	.word	0x401c0000
 8010594:	40140000 	.word	0x40140000
 8010598:	3fe00000 	.word	0x3fe00000
 801059c:	9d01      	ldr	r5, [sp, #4]
 801059e:	4656      	mov	r6, sl
 80105a0:	465f      	mov	r7, fp
 80105a2:	4642      	mov	r2, r8
 80105a4:	464b      	mov	r3, r9
 80105a6:	4630      	mov	r0, r6
 80105a8:	4639      	mov	r1, r7
 80105aa:	f7f0 f94f 	bl	800084c <__aeabi_ddiv>
 80105ae:	f7f0 fad3 	bl	8000b58 <__aeabi_d2iz>
 80105b2:	4682      	mov	sl, r0
 80105b4:	f7ef ffb6 	bl	8000524 <__aeabi_i2d>
 80105b8:	4642      	mov	r2, r8
 80105ba:	464b      	mov	r3, r9
 80105bc:	f7f0 f81c 	bl	80005f8 <__aeabi_dmul>
 80105c0:	4602      	mov	r2, r0
 80105c2:	460b      	mov	r3, r1
 80105c4:	4630      	mov	r0, r6
 80105c6:	4639      	mov	r1, r7
 80105c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80105cc:	f7ef fe5c 	bl	8000288 <__aeabi_dsub>
 80105d0:	f805 6b01 	strb.w	r6, [r5], #1
 80105d4:	9e01      	ldr	r6, [sp, #4]
 80105d6:	9f03      	ldr	r7, [sp, #12]
 80105d8:	1bae      	subs	r6, r5, r6
 80105da:	42b7      	cmp	r7, r6
 80105dc:	4602      	mov	r2, r0
 80105de:	460b      	mov	r3, r1
 80105e0:	d135      	bne.n	801064e <_dtoa_r+0x6e6>
 80105e2:	f7ef fe53 	bl	800028c <__adddf3>
 80105e6:	4642      	mov	r2, r8
 80105e8:	464b      	mov	r3, r9
 80105ea:	4606      	mov	r6, r0
 80105ec:	460f      	mov	r7, r1
 80105ee:	f7f0 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80105f2:	b9d0      	cbnz	r0, 801062a <_dtoa_r+0x6c2>
 80105f4:	4642      	mov	r2, r8
 80105f6:	464b      	mov	r3, r9
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f7f0 fa64 	bl	8000ac8 <__aeabi_dcmpeq>
 8010600:	b110      	cbz	r0, 8010608 <_dtoa_r+0x6a0>
 8010602:	f01a 0f01 	tst.w	sl, #1
 8010606:	d110      	bne.n	801062a <_dtoa_r+0x6c2>
 8010608:	4620      	mov	r0, r4
 801060a:	ee18 1a10 	vmov	r1, s16
 801060e:	f000 fe67 	bl	80112e0 <_Bfree>
 8010612:	2300      	movs	r3, #0
 8010614:	9800      	ldr	r0, [sp, #0]
 8010616:	702b      	strb	r3, [r5, #0]
 8010618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801061a:	3001      	adds	r0, #1
 801061c:	6018      	str	r0, [r3, #0]
 801061e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010620:	2b00      	cmp	r3, #0
 8010622:	f43f acf1 	beq.w	8010008 <_dtoa_r+0xa0>
 8010626:	601d      	str	r5, [r3, #0]
 8010628:	e4ee      	b.n	8010008 <_dtoa_r+0xa0>
 801062a:	9f00      	ldr	r7, [sp, #0]
 801062c:	462b      	mov	r3, r5
 801062e:	461d      	mov	r5, r3
 8010630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010634:	2a39      	cmp	r2, #57	; 0x39
 8010636:	d106      	bne.n	8010646 <_dtoa_r+0x6de>
 8010638:	9a01      	ldr	r2, [sp, #4]
 801063a:	429a      	cmp	r2, r3
 801063c:	d1f7      	bne.n	801062e <_dtoa_r+0x6c6>
 801063e:	9901      	ldr	r1, [sp, #4]
 8010640:	2230      	movs	r2, #48	; 0x30
 8010642:	3701      	adds	r7, #1
 8010644:	700a      	strb	r2, [r1, #0]
 8010646:	781a      	ldrb	r2, [r3, #0]
 8010648:	3201      	adds	r2, #1
 801064a:	701a      	strb	r2, [r3, #0]
 801064c:	e790      	b.n	8010570 <_dtoa_r+0x608>
 801064e:	4ba6      	ldr	r3, [pc, #664]	; (80108e8 <_dtoa_r+0x980>)
 8010650:	2200      	movs	r2, #0
 8010652:	f7ef ffd1 	bl	80005f8 <__aeabi_dmul>
 8010656:	2200      	movs	r2, #0
 8010658:	2300      	movs	r3, #0
 801065a:	4606      	mov	r6, r0
 801065c:	460f      	mov	r7, r1
 801065e:	f7f0 fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 8010662:	2800      	cmp	r0, #0
 8010664:	d09d      	beq.n	80105a2 <_dtoa_r+0x63a>
 8010666:	e7cf      	b.n	8010608 <_dtoa_r+0x6a0>
 8010668:	9a08      	ldr	r2, [sp, #32]
 801066a:	2a00      	cmp	r2, #0
 801066c:	f000 80d7 	beq.w	801081e <_dtoa_r+0x8b6>
 8010670:	9a06      	ldr	r2, [sp, #24]
 8010672:	2a01      	cmp	r2, #1
 8010674:	f300 80ba 	bgt.w	80107ec <_dtoa_r+0x884>
 8010678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801067a:	2a00      	cmp	r2, #0
 801067c:	f000 80b2 	beq.w	80107e4 <_dtoa_r+0x87c>
 8010680:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010684:	9e07      	ldr	r6, [sp, #28]
 8010686:	9d04      	ldr	r5, [sp, #16]
 8010688:	9a04      	ldr	r2, [sp, #16]
 801068a:	441a      	add	r2, r3
 801068c:	9204      	str	r2, [sp, #16]
 801068e:	9a05      	ldr	r2, [sp, #20]
 8010690:	2101      	movs	r1, #1
 8010692:	441a      	add	r2, r3
 8010694:	4620      	mov	r0, r4
 8010696:	9205      	str	r2, [sp, #20]
 8010698:	f000 ff24 	bl	80114e4 <__i2b>
 801069c:	4607      	mov	r7, r0
 801069e:	2d00      	cmp	r5, #0
 80106a0:	dd0c      	ble.n	80106bc <_dtoa_r+0x754>
 80106a2:	9b05      	ldr	r3, [sp, #20]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	dd09      	ble.n	80106bc <_dtoa_r+0x754>
 80106a8:	42ab      	cmp	r3, r5
 80106aa:	9a04      	ldr	r2, [sp, #16]
 80106ac:	bfa8      	it	ge
 80106ae:	462b      	movge	r3, r5
 80106b0:	1ad2      	subs	r2, r2, r3
 80106b2:	9204      	str	r2, [sp, #16]
 80106b4:	9a05      	ldr	r2, [sp, #20]
 80106b6:	1aed      	subs	r5, r5, r3
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	9305      	str	r3, [sp, #20]
 80106bc:	9b07      	ldr	r3, [sp, #28]
 80106be:	b31b      	cbz	r3, 8010708 <_dtoa_r+0x7a0>
 80106c0:	9b08      	ldr	r3, [sp, #32]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f000 80af 	beq.w	8010826 <_dtoa_r+0x8be>
 80106c8:	2e00      	cmp	r6, #0
 80106ca:	dd13      	ble.n	80106f4 <_dtoa_r+0x78c>
 80106cc:	4639      	mov	r1, r7
 80106ce:	4632      	mov	r2, r6
 80106d0:	4620      	mov	r0, r4
 80106d2:	f000 ffc7 	bl	8011664 <__pow5mult>
 80106d6:	ee18 2a10 	vmov	r2, s16
 80106da:	4601      	mov	r1, r0
 80106dc:	4607      	mov	r7, r0
 80106de:	4620      	mov	r0, r4
 80106e0:	f000 ff16 	bl	8011510 <__multiply>
 80106e4:	ee18 1a10 	vmov	r1, s16
 80106e8:	4680      	mov	r8, r0
 80106ea:	4620      	mov	r0, r4
 80106ec:	f000 fdf8 	bl	80112e0 <_Bfree>
 80106f0:	ee08 8a10 	vmov	s16, r8
 80106f4:	9b07      	ldr	r3, [sp, #28]
 80106f6:	1b9a      	subs	r2, r3, r6
 80106f8:	d006      	beq.n	8010708 <_dtoa_r+0x7a0>
 80106fa:	ee18 1a10 	vmov	r1, s16
 80106fe:	4620      	mov	r0, r4
 8010700:	f000 ffb0 	bl	8011664 <__pow5mult>
 8010704:	ee08 0a10 	vmov	s16, r0
 8010708:	2101      	movs	r1, #1
 801070a:	4620      	mov	r0, r4
 801070c:	f000 feea 	bl	80114e4 <__i2b>
 8010710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010712:	2b00      	cmp	r3, #0
 8010714:	4606      	mov	r6, r0
 8010716:	f340 8088 	ble.w	801082a <_dtoa_r+0x8c2>
 801071a:	461a      	mov	r2, r3
 801071c:	4601      	mov	r1, r0
 801071e:	4620      	mov	r0, r4
 8010720:	f000 ffa0 	bl	8011664 <__pow5mult>
 8010724:	9b06      	ldr	r3, [sp, #24]
 8010726:	2b01      	cmp	r3, #1
 8010728:	4606      	mov	r6, r0
 801072a:	f340 8081 	ble.w	8010830 <_dtoa_r+0x8c8>
 801072e:	f04f 0800 	mov.w	r8, #0
 8010732:	6933      	ldr	r3, [r6, #16]
 8010734:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010738:	6918      	ldr	r0, [r3, #16]
 801073a:	f000 fe83 	bl	8011444 <__hi0bits>
 801073e:	f1c0 0020 	rsb	r0, r0, #32
 8010742:	9b05      	ldr	r3, [sp, #20]
 8010744:	4418      	add	r0, r3
 8010746:	f010 001f 	ands.w	r0, r0, #31
 801074a:	f000 8092 	beq.w	8010872 <_dtoa_r+0x90a>
 801074e:	f1c0 0320 	rsb	r3, r0, #32
 8010752:	2b04      	cmp	r3, #4
 8010754:	f340 808a 	ble.w	801086c <_dtoa_r+0x904>
 8010758:	f1c0 001c 	rsb	r0, r0, #28
 801075c:	9b04      	ldr	r3, [sp, #16]
 801075e:	4403      	add	r3, r0
 8010760:	9304      	str	r3, [sp, #16]
 8010762:	9b05      	ldr	r3, [sp, #20]
 8010764:	4403      	add	r3, r0
 8010766:	4405      	add	r5, r0
 8010768:	9305      	str	r3, [sp, #20]
 801076a:	9b04      	ldr	r3, [sp, #16]
 801076c:	2b00      	cmp	r3, #0
 801076e:	dd07      	ble.n	8010780 <_dtoa_r+0x818>
 8010770:	ee18 1a10 	vmov	r1, s16
 8010774:	461a      	mov	r2, r3
 8010776:	4620      	mov	r0, r4
 8010778:	f000 ffce 	bl	8011718 <__lshift>
 801077c:	ee08 0a10 	vmov	s16, r0
 8010780:	9b05      	ldr	r3, [sp, #20]
 8010782:	2b00      	cmp	r3, #0
 8010784:	dd05      	ble.n	8010792 <_dtoa_r+0x82a>
 8010786:	4631      	mov	r1, r6
 8010788:	461a      	mov	r2, r3
 801078a:	4620      	mov	r0, r4
 801078c:	f000 ffc4 	bl	8011718 <__lshift>
 8010790:	4606      	mov	r6, r0
 8010792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010794:	2b00      	cmp	r3, #0
 8010796:	d06e      	beq.n	8010876 <_dtoa_r+0x90e>
 8010798:	ee18 0a10 	vmov	r0, s16
 801079c:	4631      	mov	r1, r6
 801079e:	f001 f82b 	bl	80117f8 <__mcmp>
 80107a2:	2800      	cmp	r0, #0
 80107a4:	da67      	bge.n	8010876 <_dtoa_r+0x90e>
 80107a6:	9b00      	ldr	r3, [sp, #0]
 80107a8:	3b01      	subs	r3, #1
 80107aa:	ee18 1a10 	vmov	r1, s16
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	220a      	movs	r2, #10
 80107b2:	2300      	movs	r3, #0
 80107b4:	4620      	mov	r0, r4
 80107b6:	f000 fdb5 	bl	8011324 <__multadd>
 80107ba:	9b08      	ldr	r3, [sp, #32]
 80107bc:	ee08 0a10 	vmov	s16, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f000 81b1 	beq.w	8010b28 <_dtoa_r+0xbc0>
 80107c6:	2300      	movs	r3, #0
 80107c8:	4639      	mov	r1, r7
 80107ca:	220a      	movs	r2, #10
 80107cc:	4620      	mov	r0, r4
 80107ce:	f000 fda9 	bl	8011324 <__multadd>
 80107d2:	9b02      	ldr	r3, [sp, #8]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	4607      	mov	r7, r0
 80107d8:	f300 808e 	bgt.w	80108f8 <_dtoa_r+0x990>
 80107dc:	9b06      	ldr	r3, [sp, #24]
 80107de:	2b02      	cmp	r3, #2
 80107e0:	dc51      	bgt.n	8010886 <_dtoa_r+0x91e>
 80107e2:	e089      	b.n	80108f8 <_dtoa_r+0x990>
 80107e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80107e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80107ea:	e74b      	b.n	8010684 <_dtoa_r+0x71c>
 80107ec:	9b03      	ldr	r3, [sp, #12]
 80107ee:	1e5e      	subs	r6, r3, #1
 80107f0:	9b07      	ldr	r3, [sp, #28]
 80107f2:	42b3      	cmp	r3, r6
 80107f4:	bfbf      	itttt	lt
 80107f6:	9b07      	ldrlt	r3, [sp, #28]
 80107f8:	9607      	strlt	r6, [sp, #28]
 80107fa:	1af2      	sublt	r2, r6, r3
 80107fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80107fe:	bfb6      	itet	lt
 8010800:	189b      	addlt	r3, r3, r2
 8010802:	1b9e      	subge	r6, r3, r6
 8010804:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010806:	9b03      	ldr	r3, [sp, #12]
 8010808:	bfb8      	it	lt
 801080a:	2600      	movlt	r6, #0
 801080c:	2b00      	cmp	r3, #0
 801080e:	bfb7      	itett	lt
 8010810:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010814:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010818:	1a9d      	sublt	r5, r3, r2
 801081a:	2300      	movlt	r3, #0
 801081c:	e734      	b.n	8010688 <_dtoa_r+0x720>
 801081e:	9e07      	ldr	r6, [sp, #28]
 8010820:	9d04      	ldr	r5, [sp, #16]
 8010822:	9f08      	ldr	r7, [sp, #32]
 8010824:	e73b      	b.n	801069e <_dtoa_r+0x736>
 8010826:	9a07      	ldr	r2, [sp, #28]
 8010828:	e767      	b.n	80106fa <_dtoa_r+0x792>
 801082a:	9b06      	ldr	r3, [sp, #24]
 801082c:	2b01      	cmp	r3, #1
 801082e:	dc18      	bgt.n	8010862 <_dtoa_r+0x8fa>
 8010830:	f1ba 0f00 	cmp.w	sl, #0
 8010834:	d115      	bne.n	8010862 <_dtoa_r+0x8fa>
 8010836:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801083a:	b993      	cbnz	r3, 8010862 <_dtoa_r+0x8fa>
 801083c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010840:	0d1b      	lsrs	r3, r3, #20
 8010842:	051b      	lsls	r3, r3, #20
 8010844:	b183      	cbz	r3, 8010868 <_dtoa_r+0x900>
 8010846:	9b04      	ldr	r3, [sp, #16]
 8010848:	3301      	adds	r3, #1
 801084a:	9304      	str	r3, [sp, #16]
 801084c:	9b05      	ldr	r3, [sp, #20]
 801084e:	3301      	adds	r3, #1
 8010850:	9305      	str	r3, [sp, #20]
 8010852:	f04f 0801 	mov.w	r8, #1
 8010856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010858:	2b00      	cmp	r3, #0
 801085a:	f47f af6a 	bne.w	8010732 <_dtoa_r+0x7ca>
 801085e:	2001      	movs	r0, #1
 8010860:	e76f      	b.n	8010742 <_dtoa_r+0x7da>
 8010862:	f04f 0800 	mov.w	r8, #0
 8010866:	e7f6      	b.n	8010856 <_dtoa_r+0x8ee>
 8010868:	4698      	mov	r8, r3
 801086a:	e7f4      	b.n	8010856 <_dtoa_r+0x8ee>
 801086c:	f43f af7d 	beq.w	801076a <_dtoa_r+0x802>
 8010870:	4618      	mov	r0, r3
 8010872:	301c      	adds	r0, #28
 8010874:	e772      	b.n	801075c <_dtoa_r+0x7f4>
 8010876:	9b03      	ldr	r3, [sp, #12]
 8010878:	2b00      	cmp	r3, #0
 801087a:	dc37      	bgt.n	80108ec <_dtoa_r+0x984>
 801087c:	9b06      	ldr	r3, [sp, #24]
 801087e:	2b02      	cmp	r3, #2
 8010880:	dd34      	ble.n	80108ec <_dtoa_r+0x984>
 8010882:	9b03      	ldr	r3, [sp, #12]
 8010884:	9302      	str	r3, [sp, #8]
 8010886:	9b02      	ldr	r3, [sp, #8]
 8010888:	b96b      	cbnz	r3, 80108a6 <_dtoa_r+0x93e>
 801088a:	4631      	mov	r1, r6
 801088c:	2205      	movs	r2, #5
 801088e:	4620      	mov	r0, r4
 8010890:	f000 fd48 	bl	8011324 <__multadd>
 8010894:	4601      	mov	r1, r0
 8010896:	4606      	mov	r6, r0
 8010898:	ee18 0a10 	vmov	r0, s16
 801089c:	f000 ffac 	bl	80117f8 <__mcmp>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	f73f adbb 	bgt.w	801041c <_dtoa_r+0x4b4>
 80108a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108a8:	9d01      	ldr	r5, [sp, #4]
 80108aa:	43db      	mvns	r3, r3
 80108ac:	9300      	str	r3, [sp, #0]
 80108ae:	f04f 0800 	mov.w	r8, #0
 80108b2:	4631      	mov	r1, r6
 80108b4:	4620      	mov	r0, r4
 80108b6:	f000 fd13 	bl	80112e0 <_Bfree>
 80108ba:	2f00      	cmp	r7, #0
 80108bc:	f43f aea4 	beq.w	8010608 <_dtoa_r+0x6a0>
 80108c0:	f1b8 0f00 	cmp.w	r8, #0
 80108c4:	d005      	beq.n	80108d2 <_dtoa_r+0x96a>
 80108c6:	45b8      	cmp	r8, r7
 80108c8:	d003      	beq.n	80108d2 <_dtoa_r+0x96a>
 80108ca:	4641      	mov	r1, r8
 80108cc:	4620      	mov	r0, r4
 80108ce:	f000 fd07 	bl	80112e0 <_Bfree>
 80108d2:	4639      	mov	r1, r7
 80108d4:	4620      	mov	r0, r4
 80108d6:	f000 fd03 	bl	80112e0 <_Bfree>
 80108da:	e695      	b.n	8010608 <_dtoa_r+0x6a0>
 80108dc:	2600      	movs	r6, #0
 80108de:	4637      	mov	r7, r6
 80108e0:	e7e1      	b.n	80108a6 <_dtoa_r+0x93e>
 80108e2:	9700      	str	r7, [sp, #0]
 80108e4:	4637      	mov	r7, r6
 80108e6:	e599      	b.n	801041c <_dtoa_r+0x4b4>
 80108e8:	40240000 	.word	0x40240000
 80108ec:	9b08      	ldr	r3, [sp, #32]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	f000 80ca 	beq.w	8010a88 <_dtoa_r+0xb20>
 80108f4:	9b03      	ldr	r3, [sp, #12]
 80108f6:	9302      	str	r3, [sp, #8]
 80108f8:	2d00      	cmp	r5, #0
 80108fa:	dd05      	ble.n	8010908 <_dtoa_r+0x9a0>
 80108fc:	4639      	mov	r1, r7
 80108fe:	462a      	mov	r2, r5
 8010900:	4620      	mov	r0, r4
 8010902:	f000 ff09 	bl	8011718 <__lshift>
 8010906:	4607      	mov	r7, r0
 8010908:	f1b8 0f00 	cmp.w	r8, #0
 801090c:	d05b      	beq.n	80109c6 <_dtoa_r+0xa5e>
 801090e:	6879      	ldr	r1, [r7, #4]
 8010910:	4620      	mov	r0, r4
 8010912:	f000 fca5 	bl	8011260 <_Balloc>
 8010916:	4605      	mov	r5, r0
 8010918:	b928      	cbnz	r0, 8010926 <_dtoa_r+0x9be>
 801091a:	4b87      	ldr	r3, [pc, #540]	; (8010b38 <_dtoa_r+0xbd0>)
 801091c:	4602      	mov	r2, r0
 801091e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010922:	f7ff bb3b 	b.w	800ff9c <_dtoa_r+0x34>
 8010926:	693a      	ldr	r2, [r7, #16]
 8010928:	3202      	adds	r2, #2
 801092a:	0092      	lsls	r2, r2, #2
 801092c:	f107 010c 	add.w	r1, r7, #12
 8010930:	300c      	adds	r0, #12
 8010932:	f7fd ff4b 	bl	800e7cc <memcpy>
 8010936:	2201      	movs	r2, #1
 8010938:	4629      	mov	r1, r5
 801093a:	4620      	mov	r0, r4
 801093c:	f000 feec 	bl	8011718 <__lshift>
 8010940:	9b01      	ldr	r3, [sp, #4]
 8010942:	f103 0901 	add.w	r9, r3, #1
 8010946:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801094a:	4413      	add	r3, r2
 801094c:	9305      	str	r3, [sp, #20]
 801094e:	f00a 0301 	and.w	r3, sl, #1
 8010952:	46b8      	mov	r8, r7
 8010954:	9304      	str	r3, [sp, #16]
 8010956:	4607      	mov	r7, r0
 8010958:	4631      	mov	r1, r6
 801095a:	ee18 0a10 	vmov	r0, s16
 801095e:	f7ff fa75 	bl	800fe4c <quorem>
 8010962:	4641      	mov	r1, r8
 8010964:	9002      	str	r0, [sp, #8]
 8010966:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801096a:	ee18 0a10 	vmov	r0, s16
 801096e:	f000 ff43 	bl	80117f8 <__mcmp>
 8010972:	463a      	mov	r2, r7
 8010974:	9003      	str	r0, [sp, #12]
 8010976:	4631      	mov	r1, r6
 8010978:	4620      	mov	r0, r4
 801097a:	f000 ff59 	bl	8011830 <__mdiff>
 801097e:	68c2      	ldr	r2, [r0, #12]
 8010980:	f109 3bff 	add.w	fp, r9, #4294967295
 8010984:	4605      	mov	r5, r0
 8010986:	bb02      	cbnz	r2, 80109ca <_dtoa_r+0xa62>
 8010988:	4601      	mov	r1, r0
 801098a:	ee18 0a10 	vmov	r0, s16
 801098e:	f000 ff33 	bl	80117f8 <__mcmp>
 8010992:	4602      	mov	r2, r0
 8010994:	4629      	mov	r1, r5
 8010996:	4620      	mov	r0, r4
 8010998:	9207      	str	r2, [sp, #28]
 801099a:	f000 fca1 	bl	80112e0 <_Bfree>
 801099e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80109a2:	ea43 0102 	orr.w	r1, r3, r2
 80109a6:	9b04      	ldr	r3, [sp, #16]
 80109a8:	430b      	orrs	r3, r1
 80109aa:	464d      	mov	r5, r9
 80109ac:	d10f      	bne.n	80109ce <_dtoa_r+0xa66>
 80109ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80109b2:	d02a      	beq.n	8010a0a <_dtoa_r+0xaa2>
 80109b4:	9b03      	ldr	r3, [sp, #12]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	dd02      	ble.n	80109c0 <_dtoa_r+0xa58>
 80109ba:	9b02      	ldr	r3, [sp, #8]
 80109bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80109c0:	f88b a000 	strb.w	sl, [fp]
 80109c4:	e775      	b.n	80108b2 <_dtoa_r+0x94a>
 80109c6:	4638      	mov	r0, r7
 80109c8:	e7ba      	b.n	8010940 <_dtoa_r+0x9d8>
 80109ca:	2201      	movs	r2, #1
 80109cc:	e7e2      	b.n	8010994 <_dtoa_r+0xa2c>
 80109ce:	9b03      	ldr	r3, [sp, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	db04      	blt.n	80109de <_dtoa_r+0xa76>
 80109d4:	9906      	ldr	r1, [sp, #24]
 80109d6:	430b      	orrs	r3, r1
 80109d8:	9904      	ldr	r1, [sp, #16]
 80109da:	430b      	orrs	r3, r1
 80109dc:	d122      	bne.n	8010a24 <_dtoa_r+0xabc>
 80109de:	2a00      	cmp	r2, #0
 80109e0:	ddee      	ble.n	80109c0 <_dtoa_r+0xa58>
 80109e2:	ee18 1a10 	vmov	r1, s16
 80109e6:	2201      	movs	r2, #1
 80109e8:	4620      	mov	r0, r4
 80109ea:	f000 fe95 	bl	8011718 <__lshift>
 80109ee:	4631      	mov	r1, r6
 80109f0:	ee08 0a10 	vmov	s16, r0
 80109f4:	f000 ff00 	bl	80117f8 <__mcmp>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	dc03      	bgt.n	8010a04 <_dtoa_r+0xa9c>
 80109fc:	d1e0      	bne.n	80109c0 <_dtoa_r+0xa58>
 80109fe:	f01a 0f01 	tst.w	sl, #1
 8010a02:	d0dd      	beq.n	80109c0 <_dtoa_r+0xa58>
 8010a04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010a08:	d1d7      	bne.n	80109ba <_dtoa_r+0xa52>
 8010a0a:	2339      	movs	r3, #57	; 0x39
 8010a0c:	f88b 3000 	strb.w	r3, [fp]
 8010a10:	462b      	mov	r3, r5
 8010a12:	461d      	mov	r5, r3
 8010a14:	3b01      	subs	r3, #1
 8010a16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010a1a:	2a39      	cmp	r2, #57	; 0x39
 8010a1c:	d071      	beq.n	8010b02 <_dtoa_r+0xb9a>
 8010a1e:	3201      	adds	r2, #1
 8010a20:	701a      	strb	r2, [r3, #0]
 8010a22:	e746      	b.n	80108b2 <_dtoa_r+0x94a>
 8010a24:	2a00      	cmp	r2, #0
 8010a26:	dd07      	ble.n	8010a38 <_dtoa_r+0xad0>
 8010a28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010a2c:	d0ed      	beq.n	8010a0a <_dtoa_r+0xaa2>
 8010a2e:	f10a 0301 	add.w	r3, sl, #1
 8010a32:	f88b 3000 	strb.w	r3, [fp]
 8010a36:	e73c      	b.n	80108b2 <_dtoa_r+0x94a>
 8010a38:	9b05      	ldr	r3, [sp, #20]
 8010a3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010a3e:	4599      	cmp	r9, r3
 8010a40:	d047      	beq.n	8010ad2 <_dtoa_r+0xb6a>
 8010a42:	ee18 1a10 	vmov	r1, s16
 8010a46:	2300      	movs	r3, #0
 8010a48:	220a      	movs	r2, #10
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	f000 fc6a 	bl	8011324 <__multadd>
 8010a50:	45b8      	cmp	r8, r7
 8010a52:	ee08 0a10 	vmov	s16, r0
 8010a56:	f04f 0300 	mov.w	r3, #0
 8010a5a:	f04f 020a 	mov.w	r2, #10
 8010a5e:	4641      	mov	r1, r8
 8010a60:	4620      	mov	r0, r4
 8010a62:	d106      	bne.n	8010a72 <_dtoa_r+0xb0a>
 8010a64:	f000 fc5e 	bl	8011324 <__multadd>
 8010a68:	4680      	mov	r8, r0
 8010a6a:	4607      	mov	r7, r0
 8010a6c:	f109 0901 	add.w	r9, r9, #1
 8010a70:	e772      	b.n	8010958 <_dtoa_r+0x9f0>
 8010a72:	f000 fc57 	bl	8011324 <__multadd>
 8010a76:	4639      	mov	r1, r7
 8010a78:	4680      	mov	r8, r0
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	220a      	movs	r2, #10
 8010a7e:	4620      	mov	r0, r4
 8010a80:	f000 fc50 	bl	8011324 <__multadd>
 8010a84:	4607      	mov	r7, r0
 8010a86:	e7f1      	b.n	8010a6c <_dtoa_r+0xb04>
 8010a88:	9b03      	ldr	r3, [sp, #12]
 8010a8a:	9302      	str	r3, [sp, #8]
 8010a8c:	9d01      	ldr	r5, [sp, #4]
 8010a8e:	ee18 0a10 	vmov	r0, s16
 8010a92:	4631      	mov	r1, r6
 8010a94:	f7ff f9da 	bl	800fe4c <quorem>
 8010a98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010a9c:	9b01      	ldr	r3, [sp, #4]
 8010a9e:	f805 ab01 	strb.w	sl, [r5], #1
 8010aa2:	1aea      	subs	r2, r5, r3
 8010aa4:	9b02      	ldr	r3, [sp, #8]
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	dd09      	ble.n	8010abe <_dtoa_r+0xb56>
 8010aaa:	ee18 1a10 	vmov	r1, s16
 8010aae:	2300      	movs	r3, #0
 8010ab0:	220a      	movs	r2, #10
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f000 fc36 	bl	8011324 <__multadd>
 8010ab8:	ee08 0a10 	vmov	s16, r0
 8010abc:	e7e7      	b.n	8010a8e <_dtoa_r+0xb26>
 8010abe:	9b02      	ldr	r3, [sp, #8]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	bfc8      	it	gt
 8010ac4:	461d      	movgt	r5, r3
 8010ac6:	9b01      	ldr	r3, [sp, #4]
 8010ac8:	bfd8      	it	le
 8010aca:	2501      	movle	r5, #1
 8010acc:	441d      	add	r5, r3
 8010ace:	f04f 0800 	mov.w	r8, #0
 8010ad2:	ee18 1a10 	vmov	r1, s16
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f000 fe1d 	bl	8011718 <__lshift>
 8010ade:	4631      	mov	r1, r6
 8010ae0:	ee08 0a10 	vmov	s16, r0
 8010ae4:	f000 fe88 	bl	80117f8 <__mcmp>
 8010ae8:	2800      	cmp	r0, #0
 8010aea:	dc91      	bgt.n	8010a10 <_dtoa_r+0xaa8>
 8010aec:	d102      	bne.n	8010af4 <_dtoa_r+0xb8c>
 8010aee:	f01a 0f01 	tst.w	sl, #1
 8010af2:	d18d      	bne.n	8010a10 <_dtoa_r+0xaa8>
 8010af4:	462b      	mov	r3, r5
 8010af6:	461d      	mov	r5, r3
 8010af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010afc:	2a30      	cmp	r2, #48	; 0x30
 8010afe:	d0fa      	beq.n	8010af6 <_dtoa_r+0xb8e>
 8010b00:	e6d7      	b.n	80108b2 <_dtoa_r+0x94a>
 8010b02:	9a01      	ldr	r2, [sp, #4]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d184      	bne.n	8010a12 <_dtoa_r+0xaaa>
 8010b08:	9b00      	ldr	r3, [sp, #0]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	9300      	str	r3, [sp, #0]
 8010b0e:	2331      	movs	r3, #49	; 0x31
 8010b10:	7013      	strb	r3, [r2, #0]
 8010b12:	e6ce      	b.n	80108b2 <_dtoa_r+0x94a>
 8010b14:	4b09      	ldr	r3, [pc, #36]	; (8010b3c <_dtoa_r+0xbd4>)
 8010b16:	f7ff ba95 	b.w	8010044 <_dtoa_r+0xdc>
 8010b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f47f aa6e 	bne.w	800fffe <_dtoa_r+0x96>
 8010b22:	4b07      	ldr	r3, [pc, #28]	; (8010b40 <_dtoa_r+0xbd8>)
 8010b24:	f7ff ba8e 	b.w	8010044 <_dtoa_r+0xdc>
 8010b28:	9b02      	ldr	r3, [sp, #8]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	dcae      	bgt.n	8010a8c <_dtoa_r+0xb24>
 8010b2e:	9b06      	ldr	r3, [sp, #24]
 8010b30:	2b02      	cmp	r3, #2
 8010b32:	f73f aea8 	bgt.w	8010886 <_dtoa_r+0x91e>
 8010b36:	e7a9      	b.n	8010a8c <_dtoa_r+0xb24>
 8010b38:	08014d7f 	.word	0x08014d7f
 8010b3c:	0801307e 	.word	0x0801307e
 8010b40:	08014d00 	.word	0x08014d00

08010b44 <rshift>:
 8010b44:	6903      	ldr	r3, [r0, #16]
 8010b46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010b4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010b52:	f100 0414 	add.w	r4, r0, #20
 8010b56:	dd45      	ble.n	8010be4 <rshift+0xa0>
 8010b58:	f011 011f 	ands.w	r1, r1, #31
 8010b5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010b60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010b64:	d10c      	bne.n	8010b80 <rshift+0x3c>
 8010b66:	f100 0710 	add.w	r7, r0, #16
 8010b6a:	4629      	mov	r1, r5
 8010b6c:	42b1      	cmp	r1, r6
 8010b6e:	d334      	bcc.n	8010bda <rshift+0x96>
 8010b70:	1a9b      	subs	r3, r3, r2
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	1eea      	subs	r2, r5, #3
 8010b76:	4296      	cmp	r6, r2
 8010b78:	bf38      	it	cc
 8010b7a:	2300      	movcc	r3, #0
 8010b7c:	4423      	add	r3, r4
 8010b7e:	e015      	b.n	8010bac <rshift+0x68>
 8010b80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010b84:	f1c1 0820 	rsb	r8, r1, #32
 8010b88:	40cf      	lsrs	r7, r1
 8010b8a:	f105 0e04 	add.w	lr, r5, #4
 8010b8e:	46a1      	mov	r9, r4
 8010b90:	4576      	cmp	r6, lr
 8010b92:	46f4      	mov	ip, lr
 8010b94:	d815      	bhi.n	8010bc2 <rshift+0x7e>
 8010b96:	1a9a      	subs	r2, r3, r2
 8010b98:	0092      	lsls	r2, r2, #2
 8010b9a:	3a04      	subs	r2, #4
 8010b9c:	3501      	adds	r5, #1
 8010b9e:	42ae      	cmp	r6, r5
 8010ba0:	bf38      	it	cc
 8010ba2:	2200      	movcc	r2, #0
 8010ba4:	18a3      	adds	r3, r4, r2
 8010ba6:	50a7      	str	r7, [r4, r2]
 8010ba8:	b107      	cbz	r7, 8010bac <rshift+0x68>
 8010baa:	3304      	adds	r3, #4
 8010bac:	1b1a      	subs	r2, r3, r4
 8010bae:	42a3      	cmp	r3, r4
 8010bb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010bb4:	bf08      	it	eq
 8010bb6:	2300      	moveq	r3, #0
 8010bb8:	6102      	str	r2, [r0, #16]
 8010bba:	bf08      	it	eq
 8010bbc:	6143      	streq	r3, [r0, #20]
 8010bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bc2:	f8dc c000 	ldr.w	ip, [ip]
 8010bc6:	fa0c fc08 	lsl.w	ip, ip, r8
 8010bca:	ea4c 0707 	orr.w	r7, ip, r7
 8010bce:	f849 7b04 	str.w	r7, [r9], #4
 8010bd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010bd6:	40cf      	lsrs	r7, r1
 8010bd8:	e7da      	b.n	8010b90 <rshift+0x4c>
 8010bda:	f851 cb04 	ldr.w	ip, [r1], #4
 8010bde:	f847 cf04 	str.w	ip, [r7, #4]!
 8010be2:	e7c3      	b.n	8010b6c <rshift+0x28>
 8010be4:	4623      	mov	r3, r4
 8010be6:	e7e1      	b.n	8010bac <rshift+0x68>

08010be8 <__hexdig_fun>:
 8010be8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010bec:	2b09      	cmp	r3, #9
 8010bee:	d802      	bhi.n	8010bf6 <__hexdig_fun+0xe>
 8010bf0:	3820      	subs	r0, #32
 8010bf2:	b2c0      	uxtb	r0, r0
 8010bf4:	4770      	bx	lr
 8010bf6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010bfa:	2b05      	cmp	r3, #5
 8010bfc:	d801      	bhi.n	8010c02 <__hexdig_fun+0x1a>
 8010bfe:	3847      	subs	r0, #71	; 0x47
 8010c00:	e7f7      	b.n	8010bf2 <__hexdig_fun+0xa>
 8010c02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010c06:	2b05      	cmp	r3, #5
 8010c08:	d801      	bhi.n	8010c0e <__hexdig_fun+0x26>
 8010c0a:	3827      	subs	r0, #39	; 0x27
 8010c0c:	e7f1      	b.n	8010bf2 <__hexdig_fun+0xa>
 8010c0e:	2000      	movs	r0, #0
 8010c10:	4770      	bx	lr
	...

08010c14 <__gethex>:
 8010c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c18:	ed2d 8b02 	vpush	{d8}
 8010c1c:	b089      	sub	sp, #36	; 0x24
 8010c1e:	ee08 0a10 	vmov	s16, r0
 8010c22:	9304      	str	r3, [sp, #16]
 8010c24:	4bb4      	ldr	r3, [pc, #720]	; (8010ef8 <__gethex+0x2e4>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	9301      	str	r3, [sp, #4]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	468b      	mov	fp, r1
 8010c2e:	4690      	mov	r8, r2
 8010c30:	f7ef face 	bl	80001d0 <strlen>
 8010c34:	9b01      	ldr	r3, [sp, #4]
 8010c36:	f8db 2000 	ldr.w	r2, [fp]
 8010c3a:	4403      	add	r3, r0
 8010c3c:	4682      	mov	sl, r0
 8010c3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010c42:	9305      	str	r3, [sp, #20]
 8010c44:	1c93      	adds	r3, r2, #2
 8010c46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010c4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010c4e:	32fe      	adds	r2, #254	; 0xfe
 8010c50:	18d1      	adds	r1, r2, r3
 8010c52:	461f      	mov	r7, r3
 8010c54:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010c58:	9100      	str	r1, [sp, #0]
 8010c5a:	2830      	cmp	r0, #48	; 0x30
 8010c5c:	d0f8      	beq.n	8010c50 <__gethex+0x3c>
 8010c5e:	f7ff ffc3 	bl	8010be8 <__hexdig_fun>
 8010c62:	4604      	mov	r4, r0
 8010c64:	2800      	cmp	r0, #0
 8010c66:	d13a      	bne.n	8010cde <__gethex+0xca>
 8010c68:	9901      	ldr	r1, [sp, #4]
 8010c6a:	4652      	mov	r2, sl
 8010c6c:	4638      	mov	r0, r7
 8010c6e:	f001 fa29 	bl	80120c4 <strncmp>
 8010c72:	4605      	mov	r5, r0
 8010c74:	2800      	cmp	r0, #0
 8010c76:	d168      	bne.n	8010d4a <__gethex+0x136>
 8010c78:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010c7c:	eb07 060a 	add.w	r6, r7, sl
 8010c80:	f7ff ffb2 	bl	8010be8 <__hexdig_fun>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d062      	beq.n	8010d4e <__gethex+0x13a>
 8010c88:	4633      	mov	r3, r6
 8010c8a:	7818      	ldrb	r0, [r3, #0]
 8010c8c:	2830      	cmp	r0, #48	; 0x30
 8010c8e:	461f      	mov	r7, r3
 8010c90:	f103 0301 	add.w	r3, r3, #1
 8010c94:	d0f9      	beq.n	8010c8a <__gethex+0x76>
 8010c96:	f7ff ffa7 	bl	8010be8 <__hexdig_fun>
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	fab0 f480 	clz	r4, r0
 8010ca0:	0964      	lsrs	r4, r4, #5
 8010ca2:	4635      	mov	r5, r6
 8010ca4:	9300      	str	r3, [sp, #0]
 8010ca6:	463a      	mov	r2, r7
 8010ca8:	4616      	mov	r6, r2
 8010caa:	3201      	adds	r2, #1
 8010cac:	7830      	ldrb	r0, [r6, #0]
 8010cae:	f7ff ff9b 	bl	8010be8 <__hexdig_fun>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d1f8      	bne.n	8010ca8 <__gethex+0x94>
 8010cb6:	9901      	ldr	r1, [sp, #4]
 8010cb8:	4652      	mov	r2, sl
 8010cba:	4630      	mov	r0, r6
 8010cbc:	f001 fa02 	bl	80120c4 <strncmp>
 8010cc0:	b980      	cbnz	r0, 8010ce4 <__gethex+0xd0>
 8010cc2:	b94d      	cbnz	r5, 8010cd8 <__gethex+0xc4>
 8010cc4:	eb06 050a 	add.w	r5, r6, sl
 8010cc8:	462a      	mov	r2, r5
 8010cca:	4616      	mov	r6, r2
 8010ccc:	3201      	adds	r2, #1
 8010cce:	7830      	ldrb	r0, [r6, #0]
 8010cd0:	f7ff ff8a 	bl	8010be8 <__hexdig_fun>
 8010cd4:	2800      	cmp	r0, #0
 8010cd6:	d1f8      	bne.n	8010cca <__gethex+0xb6>
 8010cd8:	1bad      	subs	r5, r5, r6
 8010cda:	00ad      	lsls	r5, r5, #2
 8010cdc:	e004      	b.n	8010ce8 <__gethex+0xd4>
 8010cde:	2400      	movs	r4, #0
 8010ce0:	4625      	mov	r5, r4
 8010ce2:	e7e0      	b.n	8010ca6 <__gethex+0x92>
 8010ce4:	2d00      	cmp	r5, #0
 8010ce6:	d1f7      	bne.n	8010cd8 <__gethex+0xc4>
 8010ce8:	7833      	ldrb	r3, [r6, #0]
 8010cea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010cee:	2b50      	cmp	r3, #80	; 0x50
 8010cf0:	d13b      	bne.n	8010d6a <__gethex+0x156>
 8010cf2:	7873      	ldrb	r3, [r6, #1]
 8010cf4:	2b2b      	cmp	r3, #43	; 0x2b
 8010cf6:	d02c      	beq.n	8010d52 <__gethex+0x13e>
 8010cf8:	2b2d      	cmp	r3, #45	; 0x2d
 8010cfa:	d02e      	beq.n	8010d5a <__gethex+0x146>
 8010cfc:	1c71      	adds	r1, r6, #1
 8010cfe:	f04f 0900 	mov.w	r9, #0
 8010d02:	7808      	ldrb	r0, [r1, #0]
 8010d04:	f7ff ff70 	bl	8010be8 <__hexdig_fun>
 8010d08:	1e43      	subs	r3, r0, #1
 8010d0a:	b2db      	uxtb	r3, r3
 8010d0c:	2b18      	cmp	r3, #24
 8010d0e:	d82c      	bhi.n	8010d6a <__gethex+0x156>
 8010d10:	f1a0 0210 	sub.w	r2, r0, #16
 8010d14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010d18:	f7ff ff66 	bl	8010be8 <__hexdig_fun>
 8010d1c:	1e43      	subs	r3, r0, #1
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	2b18      	cmp	r3, #24
 8010d22:	d91d      	bls.n	8010d60 <__gethex+0x14c>
 8010d24:	f1b9 0f00 	cmp.w	r9, #0
 8010d28:	d000      	beq.n	8010d2c <__gethex+0x118>
 8010d2a:	4252      	negs	r2, r2
 8010d2c:	4415      	add	r5, r2
 8010d2e:	f8cb 1000 	str.w	r1, [fp]
 8010d32:	b1e4      	cbz	r4, 8010d6e <__gethex+0x15a>
 8010d34:	9b00      	ldr	r3, [sp, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	bf14      	ite	ne
 8010d3a:	2700      	movne	r7, #0
 8010d3c:	2706      	moveq	r7, #6
 8010d3e:	4638      	mov	r0, r7
 8010d40:	b009      	add	sp, #36	; 0x24
 8010d42:	ecbd 8b02 	vpop	{d8}
 8010d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4a:	463e      	mov	r6, r7
 8010d4c:	4625      	mov	r5, r4
 8010d4e:	2401      	movs	r4, #1
 8010d50:	e7ca      	b.n	8010ce8 <__gethex+0xd4>
 8010d52:	f04f 0900 	mov.w	r9, #0
 8010d56:	1cb1      	adds	r1, r6, #2
 8010d58:	e7d3      	b.n	8010d02 <__gethex+0xee>
 8010d5a:	f04f 0901 	mov.w	r9, #1
 8010d5e:	e7fa      	b.n	8010d56 <__gethex+0x142>
 8010d60:	230a      	movs	r3, #10
 8010d62:	fb03 0202 	mla	r2, r3, r2, r0
 8010d66:	3a10      	subs	r2, #16
 8010d68:	e7d4      	b.n	8010d14 <__gethex+0x100>
 8010d6a:	4631      	mov	r1, r6
 8010d6c:	e7df      	b.n	8010d2e <__gethex+0x11a>
 8010d6e:	1bf3      	subs	r3, r6, r7
 8010d70:	3b01      	subs	r3, #1
 8010d72:	4621      	mov	r1, r4
 8010d74:	2b07      	cmp	r3, #7
 8010d76:	dc0b      	bgt.n	8010d90 <__gethex+0x17c>
 8010d78:	ee18 0a10 	vmov	r0, s16
 8010d7c:	f000 fa70 	bl	8011260 <_Balloc>
 8010d80:	4604      	mov	r4, r0
 8010d82:	b940      	cbnz	r0, 8010d96 <__gethex+0x182>
 8010d84:	4b5d      	ldr	r3, [pc, #372]	; (8010efc <__gethex+0x2e8>)
 8010d86:	4602      	mov	r2, r0
 8010d88:	21de      	movs	r1, #222	; 0xde
 8010d8a:	485d      	ldr	r0, [pc, #372]	; (8010f00 <__gethex+0x2ec>)
 8010d8c:	f001 f9bc 	bl	8012108 <__assert_func>
 8010d90:	3101      	adds	r1, #1
 8010d92:	105b      	asrs	r3, r3, #1
 8010d94:	e7ee      	b.n	8010d74 <__gethex+0x160>
 8010d96:	f100 0914 	add.w	r9, r0, #20
 8010d9a:	f04f 0b00 	mov.w	fp, #0
 8010d9e:	f1ca 0301 	rsb	r3, sl, #1
 8010da2:	f8cd 9008 	str.w	r9, [sp, #8]
 8010da6:	f8cd b000 	str.w	fp, [sp]
 8010daa:	9306      	str	r3, [sp, #24]
 8010dac:	42b7      	cmp	r7, r6
 8010dae:	d340      	bcc.n	8010e32 <__gethex+0x21e>
 8010db0:	9802      	ldr	r0, [sp, #8]
 8010db2:	9b00      	ldr	r3, [sp, #0]
 8010db4:	f840 3b04 	str.w	r3, [r0], #4
 8010db8:	eba0 0009 	sub.w	r0, r0, r9
 8010dbc:	1080      	asrs	r0, r0, #2
 8010dbe:	0146      	lsls	r6, r0, #5
 8010dc0:	6120      	str	r0, [r4, #16]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 fb3e 	bl	8011444 <__hi0bits>
 8010dc8:	1a30      	subs	r0, r6, r0
 8010dca:	f8d8 6000 	ldr.w	r6, [r8]
 8010dce:	42b0      	cmp	r0, r6
 8010dd0:	dd63      	ble.n	8010e9a <__gethex+0x286>
 8010dd2:	1b87      	subs	r7, r0, r6
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	f000 fee2 	bl	8011ba0 <__any_on>
 8010ddc:	4682      	mov	sl, r0
 8010dde:	b1a8      	cbz	r0, 8010e0c <__gethex+0x1f8>
 8010de0:	1e7b      	subs	r3, r7, #1
 8010de2:	1159      	asrs	r1, r3, #5
 8010de4:	f003 021f 	and.w	r2, r3, #31
 8010de8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010dec:	f04f 0a01 	mov.w	sl, #1
 8010df0:	fa0a f202 	lsl.w	r2, sl, r2
 8010df4:	420a      	tst	r2, r1
 8010df6:	d009      	beq.n	8010e0c <__gethex+0x1f8>
 8010df8:	4553      	cmp	r3, sl
 8010dfa:	dd05      	ble.n	8010e08 <__gethex+0x1f4>
 8010dfc:	1eb9      	subs	r1, r7, #2
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f000 fece 	bl	8011ba0 <__any_on>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	d145      	bne.n	8010e94 <__gethex+0x280>
 8010e08:	f04f 0a02 	mov.w	sl, #2
 8010e0c:	4639      	mov	r1, r7
 8010e0e:	4620      	mov	r0, r4
 8010e10:	f7ff fe98 	bl	8010b44 <rshift>
 8010e14:	443d      	add	r5, r7
 8010e16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e1a:	42ab      	cmp	r3, r5
 8010e1c:	da4c      	bge.n	8010eb8 <__gethex+0x2a4>
 8010e1e:	ee18 0a10 	vmov	r0, s16
 8010e22:	4621      	mov	r1, r4
 8010e24:	f000 fa5c 	bl	80112e0 <_Bfree>
 8010e28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	6013      	str	r3, [r2, #0]
 8010e2e:	27a3      	movs	r7, #163	; 0xa3
 8010e30:	e785      	b.n	8010d3e <__gethex+0x12a>
 8010e32:	1e73      	subs	r3, r6, #1
 8010e34:	9a05      	ldr	r2, [sp, #20]
 8010e36:	9303      	str	r3, [sp, #12]
 8010e38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d019      	beq.n	8010e74 <__gethex+0x260>
 8010e40:	f1bb 0f20 	cmp.w	fp, #32
 8010e44:	d107      	bne.n	8010e56 <__gethex+0x242>
 8010e46:	9b02      	ldr	r3, [sp, #8]
 8010e48:	9a00      	ldr	r2, [sp, #0]
 8010e4a:	f843 2b04 	str.w	r2, [r3], #4
 8010e4e:	9302      	str	r3, [sp, #8]
 8010e50:	2300      	movs	r3, #0
 8010e52:	9300      	str	r3, [sp, #0]
 8010e54:	469b      	mov	fp, r3
 8010e56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010e5a:	f7ff fec5 	bl	8010be8 <__hexdig_fun>
 8010e5e:	9b00      	ldr	r3, [sp, #0]
 8010e60:	f000 000f 	and.w	r0, r0, #15
 8010e64:	fa00 f00b 	lsl.w	r0, r0, fp
 8010e68:	4303      	orrs	r3, r0
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	f10b 0b04 	add.w	fp, fp, #4
 8010e70:	9b03      	ldr	r3, [sp, #12]
 8010e72:	e00d      	b.n	8010e90 <__gethex+0x27c>
 8010e74:	9b03      	ldr	r3, [sp, #12]
 8010e76:	9a06      	ldr	r2, [sp, #24]
 8010e78:	4413      	add	r3, r2
 8010e7a:	42bb      	cmp	r3, r7
 8010e7c:	d3e0      	bcc.n	8010e40 <__gethex+0x22c>
 8010e7e:	4618      	mov	r0, r3
 8010e80:	9901      	ldr	r1, [sp, #4]
 8010e82:	9307      	str	r3, [sp, #28]
 8010e84:	4652      	mov	r2, sl
 8010e86:	f001 f91d 	bl	80120c4 <strncmp>
 8010e8a:	9b07      	ldr	r3, [sp, #28]
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d1d7      	bne.n	8010e40 <__gethex+0x22c>
 8010e90:	461e      	mov	r6, r3
 8010e92:	e78b      	b.n	8010dac <__gethex+0x198>
 8010e94:	f04f 0a03 	mov.w	sl, #3
 8010e98:	e7b8      	b.n	8010e0c <__gethex+0x1f8>
 8010e9a:	da0a      	bge.n	8010eb2 <__gethex+0x29e>
 8010e9c:	1a37      	subs	r7, r6, r0
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	ee18 0a10 	vmov	r0, s16
 8010ea4:	463a      	mov	r2, r7
 8010ea6:	f000 fc37 	bl	8011718 <__lshift>
 8010eaa:	1bed      	subs	r5, r5, r7
 8010eac:	4604      	mov	r4, r0
 8010eae:	f100 0914 	add.w	r9, r0, #20
 8010eb2:	f04f 0a00 	mov.w	sl, #0
 8010eb6:	e7ae      	b.n	8010e16 <__gethex+0x202>
 8010eb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010ebc:	42a8      	cmp	r0, r5
 8010ebe:	dd72      	ble.n	8010fa6 <__gethex+0x392>
 8010ec0:	1b45      	subs	r5, r0, r5
 8010ec2:	42ae      	cmp	r6, r5
 8010ec4:	dc36      	bgt.n	8010f34 <__gethex+0x320>
 8010ec6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010eca:	2b02      	cmp	r3, #2
 8010ecc:	d02a      	beq.n	8010f24 <__gethex+0x310>
 8010ece:	2b03      	cmp	r3, #3
 8010ed0:	d02c      	beq.n	8010f2c <__gethex+0x318>
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d11c      	bne.n	8010f10 <__gethex+0x2fc>
 8010ed6:	42ae      	cmp	r6, r5
 8010ed8:	d11a      	bne.n	8010f10 <__gethex+0x2fc>
 8010eda:	2e01      	cmp	r6, #1
 8010edc:	d112      	bne.n	8010f04 <__gethex+0x2f0>
 8010ede:	9a04      	ldr	r2, [sp, #16]
 8010ee0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010ee4:	6013      	str	r3, [r2, #0]
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	6123      	str	r3, [r4, #16]
 8010eea:	f8c9 3000 	str.w	r3, [r9]
 8010eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ef0:	2762      	movs	r7, #98	; 0x62
 8010ef2:	601c      	str	r4, [r3, #0]
 8010ef4:	e723      	b.n	8010d3e <__gethex+0x12a>
 8010ef6:	bf00      	nop
 8010ef8:	08014df4 	.word	0x08014df4
 8010efc:	08014d7f 	.word	0x08014d7f
 8010f00:	08014d90 	.word	0x08014d90
 8010f04:	1e71      	subs	r1, r6, #1
 8010f06:	4620      	mov	r0, r4
 8010f08:	f000 fe4a 	bl	8011ba0 <__any_on>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	d1e6      	bne.n	8010ede <__gethex+0x2ca>
 8010f10:	ee18 0a10 	vmov	r0, s16
 8010f14:	4621      	mov	r1, r4
 8010f16:	f000 f9e3 	bl	80112e0 <_Bfree>
 8010f1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	6013      	str	r3, [r2, #0]
 8010f20:	2750      	movs	r7, #80	; 0x50
 8010f22:	e70c      	b.n	8010d3e <__gethex+0x12a>
 8010f24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d1f2      	bne.n	8010f10 <__gethex+0x2fc>
 8010f2a:	e7d8      	b.n	8010ede <__gethex+0x2ca>
 8010f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d1d5      	bne.n	8010ede <__gethex+0x2ca>
 8010f32:	e7ed      	b.n	8010f10 <__gethex+0x2fc>
 8010f34:	1e6f      	subs	r7, r5, #1
 8010f36:	f1ba 0f00 	cmp.w	sl, #0
 8010f3a:	d131      	bne.n	8010fa0 <__gethex+0x38c>
 8010f3c:	b127      	cbz	r7, 8010f48 <__gethex+0x334>
 8010f3e:	4639      	mov	r1, r7
 8010f40:	4620      	mov	r0, r4
 8010f42:	f000 fe2d 	bl	8011ba0 <__any_on>
 8010f46:	4682      	mov	sl, r0
 8010f48:	117b      	asrs	r3, r7, #5
 8010f4a:	2101      	movs	r1, #1
 8010f4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010f50:	f007 071f 	and.w	r7, r7, #31
 8010f54:	fa01 f707 	lsl.w	r7, r1, r7
 8010f58:	421f      	tst	r7, r3
 8010f5a:	4629      	mov	r1, r5
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	bf18      	it	ne
 8010f60:	f04a 0a02 	orrne.w	sl, sl, #2
 8010f64:	1b76      	subs	r6, r6, r5
 8010f66:	f7ff fded 	bl	8010b44 <rshift>
 8010f6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010f6e:	2702      	movs	r7, #2
 8010f70:	f1ba 0f00 	cmp.w	sl, #0
 8010f74:	d048      	beq.n	8011008 <__gethex+0x3f4>
 8010f76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f7a:	2b02      	cmp	r3, #2
 8010f7c:	d015      	beq.n	8010faa <__gethex+0x396>
 8010f7e:	2b03      	cmp	r3, #3
 8010f80:	d017      	beq.n	8010fb2 <__gethex+0x39e>
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d109      	bne.n	8010f9a <__gethex+0x386>
 8010f86:	f01a 0f02 	tst.w	sl, #2
 8010f8a:	d006      	beq.n	8010f9a <__gethex+0x386>
 8010f8c:	f8d9 0000 	ldr.w	r0, [r9]
 8010f90:	ea4a 0a00 	orr.w	sl, sl, r0
 8010f94:	f01a 0f01 	tst.w	sl, #1
 8010f98:	d10e      	bne.n	8010fb8 <__gethex+0x3a4>
 8010f9a:	f047 0710 	orr.w	r7, r7, #16
 8010f9e:	e033      	b.n	8011008 <__gethex+0x3f4>
 8010fa0:	f04f 0a01 	mov.w	sl, #1
 8010fa4:	e7d0      	b.n	8010f48 <__gethex+0x334>
 8010fa6:	2701      	movs	r7, #1
 8010fa8:	e7e2      	b.n	8010f70 <__gethex+0x35c>
 8010faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010fac:	f1c3 0301 	rsb	r3, r3, #1
 8010fb0:	9315      	str	r3, [sp, #84]	; 0x54
 8010fb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d0f0      	beq.n	8010f9a <__gethex+0x386>
 8010fb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010fbc:	f104 0314 	add.w	r3, r4, #20
 8010fc0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010fc4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010fc8:	f04f 0c00 	mov.w	ip, #0
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fd2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010fd6:	d01c      	beq.n	8011012 <__gethex+0x3fe>
 8010fd8:	3201      	adds	r2, #1
 8010fda:	6002      	str	r2, [r0, #0]
 8010fdc:	2f02      	cmp	r7, #2
 8010fde:	f104 0314 	add.w	r3, r4, #20
 8010fe2:	d13f      	bne.n	8011064 <__gethex+0x450>
 8010fe4:	f8d8 2000 	ldr.w	r2, [r8]
 8010fe8:	3a01      	subs	r2, #1
 8010fea:	42b2      	cmp	r2, r6
 8010fec:	d10a      	bne.n	8011004 <__gethex+0x3f0>
 8010fee:	1171      	asrs	r1, r6, #5
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ff6:	f006 061f 	and.w	r6, r6, #31
 8010ffa:	fa02 f606 	lsl.w	r6, r2, r6
 8010ffe:	421e      	tst	r6, r3
 8011000:	bf18      	it	ne
 8011002:	4617      	movne	r7, r2
 8011004:	f047 0720 	orr.w	r7, r7, #32
 8011008:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801100a:	601c      	str	r4, [r3, #0]
 801100c:	9b04      	ldr	r3, [sp, #16]
 801100e:	601d      	str	r5, [r3, #0]
 8011010:	e695      	b.n	8010d3e <__gethex+0x12a>
 8011012:	4299      	cmp	r1, r3
 8011014:	f843 cc04 	str.w	ip, [r3, #-4]
 8011018:	d8d8      	bhi.n	8010fcc <__gethex+0x3b8>
 801101a:	68a3      	ldr	r3, [r4, #8]
 801101c:	459b      	cmp	fp, r3
 801101e:	db19      	blt.n	8011054 <__gethex+0x440>
 8011020:	6861      	ldr	r1, [r4, #4]
 8011022:	ee18 0a10 	vmov	r0, s16
 8011026:	3101      	adds	r1, #1
 8011028:	f000 f91a 	bl	8011260 <_Balloc>
 801102c:	4681      	mov	r9, r0
 801102e:	b918      	cbnz	r0, 8011038 <__gethex+0x424>
 8011030:	4b1a      	ldr	r3, [pc, #104]	; (801109c <__gethex+0x488>)
 8011032:	4602      	mov	r2, r0
 8011034:	2184      	movs	r1, #132	; 0x84
 8011036:	e6a8      	b.n	8010d8a <__gethex+0x176>
 8011038:	6922      	ldr	r2, [r4, #16]
 801103a:	3202      	adds	r2, #2
 801103c:	f104 010c 	add.w	r1, r4, #12
 8011040:	0092      	lsls	r2, r2, #2
 8011042:	300c      	adds	r0, #12
 8011044:	f7fd fbc2 	bl	800e7cc <memcpy>
 8011048:	4621      	mov	r1, r4
 801104a:	ee18 0a10 	vmov	r0, s16
 801104e:	f000 f947 	bl	80112e0 <_Bfree>
 8011052:	464c      	mov	r4, r9
 8011054:	6923      	ldr	r3, [r4, #16]
 8011056:	1c5a      	adds	r2, r3, #1
 8011058:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801105c:	6122      	str	r2, [r4, #16]
 801105e:	2201      	movs	r2, #1
 8011060:	615a      	str	r2, [r3, #20]
 8011062:	e7bb      	b.n	8010fdc <__gethex+0x3c8>
 8011064:	6922      	ldr	r2, [r4, #16]
 8011066:	455a      	cmp	r2, fp
 8011068:	dd0b      	ble.n	8011082 <__gethex+0x46e>
 801106a:	2101      	movs	r1, #1
 801106c:	4620      	mov	r0, r4
 801106e:	f7ff fd69 	bl	8010b44 <rshift>
 8011072:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011076:	3501      	adds	r5, #1
 8011078:	42ab      	cmp	r3, r5
 801107a:	f6ff aed0 	blt.w	8010e1e <__gethex+0x20a>
 801107e:	2701      	movs	r7, #1
 8011080:	e7c0      	b.n	8011004 <__gethex+0x3f0>
 8011082:	f016 061f 	ands.w	r6, r6, #31
 8011086:	d0fa      	beq.n	801107e <__gethex+0x46a>
 8011088:	4453      	add	r3, sl
 801108a:	f1c6 0620 	rsb	r6, r6, #32
 801108e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011092:	f000 f9d7 	bl	8011444 <__hi0bits>
 8011096:	42b0      	cmp	r0, r6
 8011098:	dbe7      	blt.n	801106a <__gethex+0x456>
 801109a:	e7f0      	b.n	801107e <__gethex+0x46a>
 801109c:	08014d7f 	.word	0x08014d7f

080110a0 <L_shift>:
 80110a0:	f1c2 0208 	rsb	r2, r2, #8
 80110a4:	0092      	lsls	r2, r2, #2
 80110a6:	b570      	push	{r4, r5, r6, lr}
 80110a8:	f1c2 0620 	rsb	r6, r2, #32
 80110ac:	6843      	ldr	r3, [r0, #4]
 80110ae:	6804      	ldr	r4, [r0, #0]
 80110b0:	fa03 f506 	lsl.w	r5, r3, r6
 80110b4:	432c      	orrs	r4, r5
 80110b6:	40d3      	lsrs	r3, r2
 80110b8:	6004      	str	r4, [r0, #0]
 80110ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80110be:	4288      	cmp	r0, r1
 80110c0:	d3f4      	bcc.n	80110ac <L_shift+0xc>
 80110c2:	bd70      	pop	{r4, r5, r6, pc}

080110c4 <__match>:
 80110c4:	b530      	push	{r4, r5, lr}
 80110c6:	6803      	ldr	r3, [r0, #0]
 80110c8:	3301      	adds	r3, #1
 80110ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110ce:	b914      	cbnz	r4, 80110d6 <__match+0x12>
 80110d0:	6003      	str	r3, [r0, #0]
 80110d2:	2001      	movs	r0, #1
 80110d4:	bd30      	pop	{r4, r5, pc}
 80110d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80110de:	2d19      	cmp	r5, #25
 80110e0:	bf98      	it	ls
 80110e2:	3220      	addls	r2, #32
 80110e4:	42a2      	cmp	r2, r4
 80110e6:	d0f0      	beq.n	80110ca <__match+0x6>
 80110e8:	2000      	movs	r0, #0
 80110ea:	e7f3      	b.n	80110d4 <__match+0x10>

080110ec <__hexnan>:
 80110ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f0:	680b      	ldr	r3, [r1, #0]
 80110f2:	115e      	asrs	r6, r3, #5
 80110f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80110f8:	f013 031f 	ands.w	r3, r3, #31
 80110fc:	b087      	sub	sp, #28
 80110fe:	bf18      	it	ne
 8011100:	3604      	addne	r6, #4
 8011102:	2500      	movs	r5, #0
 8011104:	1f37      	subs	r7, r6, #4
 8011106:	4690      	mov	r8, r2
 8011108:	6802      	ldr	r2, [r0, #0]
 801110a:	9301      	str	r3, [sp, #4]
 801110c:	4682      	mov	sl, r0
 801110e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011112:	46b9      	mov	r9, r7
 8011114:	463c      	mov	r4, r7
 8011116:	9502      	str	r5, [sp, #8]
 8011118:	46ab      	mov	fp, r5
 801111a:	7851      	ldrb	r1, [r2, #1]
 801111c:	1c53      	adds	r3, r2, #1
 801111e:	9303      	str	r3, [sp, #12]
 8011120:	b341      	cbz	r1, 8011174 <__hexnan+0x88>
 8011122:	4608      	mov	r0, r1
 8011124:	9205      	str	r2, [sp, #20]
 8011126:	9104      	str	r1, [sp, #16]
 8011128:	f7ff fd5e 	bl	8010be8 <__hexdig_fun>
 801112c:	2800      	cmp	r0, #0
 801112e:	d14f      	bne.n	80111d0 <__hexnan+0xe4>
 8011130:	9904      	ldr	r1, [sp, #16]
 8011132:	9a05      	ldr	r2, [sp, #20]
 8011134:	2920      	cmp	r1, #32
 8011136:	d818      	bhi.n	801116a <__hexnan+0x7e>
 8011138:	9b02      	ldr	r3, [sp, #8]
 801113a:	459b      	cmp	fp, r3
 801113c:	dd13      	ble.n	8011166 <__hexnan+0x7a>
 801113e:	454c      	cmp	r4, r9
 8011140:	d206      	bcs.n	8011150 <__hexnan+0x64>
 8011142:	2d07      	cmp	r5, #7
 8011144:	dc04      	bgt.n	8011150 <__hexnan+0x64>
 8011146:	462a      	mov	r2, r5
 8011148:	4649      	mov	r1, r9
 801114a:	4620      	mov	r0, r4
 801114c:	f7ff ffa8 	bl	80110a0 <L_shift>
 8011150:	4544      	cmp	r4, r8
 8011152:	d950      	bls.n	80111f6 <__hexnan+0x10a>
 8011154:	2300      	movs	r3, #0
 8011156:	f1a4 0904 	sub.w	r9, r4, #4
 801115a:	f844 3c04 	str.w	r3, [r4, #-4]
 801115e:	f8cd b008 	str.w	fp, [sp, #8]
 8011162:	464c      	mov	r4, r9
 8011164:	461d      	mov	r5, r3
 8011166:	9a03      	ldr	r2, [sp, #12]
 8011168:	e7d7      	b.n	801111a <__hexnan+0x2e>
 801116a:	2929      	cmp	r1, #41	; 0x29
 801116c:	d156      	bne.n	801121c <__hexnan+0x130>
 801116e:	3202      	adds	r2, #2
 8011170:	f8ca 2000 	str.w	r2, [sl]
 8011174:	f1bb 0f00 	cmp.w	fp, #0
 8011178:	d050      	beq.n	801121c <__hexnan+0x130>
 801117a:	454c      	cmp	r4, r9
 801117c:	d206      	bcs.n	801118c <__hexnan+0xa0>
 801117e:	2d07      	cmp	r5, #7
 8011180:	dc04      	bgt.n	801118c <__hexnan+0xa0>
 8011182:	462a      	mov	r2, r5
 8011184:	4649      	mov	r1, r9
 8011186:	4620      	mov	r0, r4
 8011188:	f7ff ff8a 	bl	80110a0 <L_shift>
 801118c:	4544      	cmp	r4, r8
 801118e:	d934      	bls.n	80111fa <__hexnan+0x10e>
 8011190:	f1a8 0204 	sub.w	r2, r8, #4
 8011194:	4623      	mov	r3, r4
 8011196:	f853 1b04 	ldr.w	r1, [r3], #4
 801119a:	f842 1f04 	str.w	r1, [r2, #4]!
 801119e:	429f      	cmp	r7, r3
 80111a0:	d2f9      	bcs.n	8011196 <__hexnan+0xaa>
 80111a2:	1b3b      	subs	r3, r7, r4
 80111a4:	f023 0303 	bic.w	r3, r3, #3
 80111a8:	3304      	adds	r3, #4
 80111aa:	3401      	adds	r4, #1
 80111ac:	3e03      	subs	r6, #3
 80111ae:	42b4      	cmp	r4, r6
 80111b0:	bf88      	it	hi
 80111b2:	2304      	movhi	r3, #4
 80111b4:	4443      	add	r3, r8
 80111b6:	2200      	movs	r2, #0
 80111b8:	f843 2b04 	str.w	r2, [r3], #4
 80111bc:	429f      	cmp	r7, r3
 80111be:	d2fb      	bcs.n	80111b8 <__hexnan+0xcc>
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	b91b      	cbnz	r3, 80111cc <__hexnan+0xe0>
 80111c4:	4547      	cmp	r7, r8
 80111c6:	d127      	bne.n	8011218 <__hexnan+0x12c>
 80111c8:	2301      	movs	r3, #1
 80111ca:	603b      	str	r3, [r7, #0]
 80111cc:	2005      	movs	r0, #5
 80111ce:	e026      	b.n	801121e <__hexnan+0x132>
 80111d0:	3501      	adds	r5, #1
 80111d2:	2d08      	cmp	r5, #8
 80111d4:	f10b 0b01 	add.w	fp, fp, #1
 80111d8:	dd06      	ble.n	80111e8 <__hexnan+0xfc>
 80111da:	4544      	cmp	r4, r8
 80111dc:	d9c3      	bls.n	8011166 <__hexnan+0x7a>
 80111de:	2300      	movs	r3, #0
 80111e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80111e4:	2501      	movs	r5, #1
 80111e6:	3c04      	subs	r4, #4
 80111e8:	6822      	ldr	r2, [r4, #0]
 80111ea:	f000 000f 	and.w	r0, r0, #15
 80111ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80111f2:	6022      	str	r2, [r4, #0]
 80111f4:	e7b7      	b.n	8011166 <__hexnan+0x7a>
 80111f6:	2508      	movs	r5, #8
 80111f8:	e7b5      	b.n	8011166 <__hexnan+0x7a>
 80111fa:	9b01      	ldr	r3, [sp, #4]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d0df      	beq.n	80111c0 <__hexnan+0xd4>
 8011200:	f04f 32ff 	mov.w	r2, #4294967295
 8011204:	f1c3 0320 	rsb	r3, r3, #32
 8011208:	fa22 f303 	lsr.w	r3, r2, r3
 801120c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011210:	401a      	ands	r2, r3
 8011212:	f846 2c04 	str.w	r2, [r6, #-4]
 8011216:	e7d3      	b.n	80111c0 <__hexnan+0xd4>
 8011218:	3f04      	subs	r7, #4
 801121a:	e7d1      	b.n	80111c0 <__hexnan+0xd4>
 801121c:	2004      	movs	r0, #4
 801121e:	b007      	add	sp, #28
 8011220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011224 <_localeconv_r>:
 8011224:	4800      	ldr	r0, [pc, #0]	; (8011228 <_localeconv_r+0x4>)
 8011226:	4770      	bx	lr
 8011228:	200002dc 	.word	0x200002dc

0801122c <malloc>:
 801122c:	4b02      	ldr	r3, [pc, #8]	; (8011238 <malloc+0xc>)
 801122e:	4601      	mov	r1, r0
 8011230:	6818      	ldr	r0, [r3, #0]
 8011232:	f000 bd59 	b.w	8011ce8 <_malloc_r>
 8011236:	bf00      	nop
 8011238:	20000184 	.word	0x20000184

0801123c <__ascii_mbtowc>:
 801123c:	b082      	sub	sp, #8
 801123e:	b901      	cbnz	r1, 8011242 <__ascii_mbtowc+0x6>
 8011240:	a901      	add	r1, sp, #4
 8011242:	b142      	cbz	r2, 8011256 <__ascii_mbtowc+0x1a>
 8011244:	b14b      	cbz	r3, 801125a <__ascii_mbtowc+0x1e>
 8011246:	7813      	ldrb	r3, [r2, #0]
 8011248:	600b      	str	r3, [r1, #0]
 801124a:	7812      	ldrb	r2, [r2, #0]
 801124c:	1e10      	subs	r0, r2, #0
 801124e:	bf18      	it	ne
 8011250:	2001      	movne	r0, #1
 8011252:	b002      	add	sp, #8
 8011254:	4770      	bx	lr
 8011256:	4610      	mov	r0, r2
 8011258:	e7fb      	b.n	8011252 <__ascii_mbtowc+0x16>
 801125a:	f06f 0001 	mvn.w	r0, #1
 801125e:	e7f8      	b.n	8011252 <__ascii_mbtowc+0x16>

08011260 <_Balloc>:
 8011260:	b570      	push	{r4, r5, r6, lr}
 8011262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011264:	4604      	mov	r4, r0
 8011266:	460d      	mov	r5, r1
 8011268:	b976      	cbnz	r6, 8011288 <_Balloc+0x28>
 801126a:	2010      	movs	r0, #16
 801126c:	f7ff ffde 	bl	801122c <malloc>
 8011270:	4602      	mov	r2, r0
 8011272:	6260      	str	r0, [r4, #36]	; 0x24
 8011274:	b920      	cbnz	r0, 8011280 <_Balloc+0x20>
 8011276:	4b18      	ldr	r3, [pc, #96]	; (80112d8 <_Balloc+0x78>)
 8011278:	4818      	ldr	r0, [pc, #96]	; (80112dc <_Balloc+0x7c>)
 801127a:	2166      	movs	r1, #102	; 0x66
 801127c:	f000 ff44 	bl	8012108 <__assert_func>
 8011280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011284:	6006      	str	r6, [r0, #0]
 8011286:	60c6      	str	r6, [r0, #12]
 8011288:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801128a:	68f3      	ldr	r3, [r6, #12]
 801128c:	b183      	cbz	r3, 80112b0 <_Balloc+0x50>
 801128e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011296:	b9b8      	cbnz	r0, 80112c8 <_Balloc+0x68>
 8011298:	2101      	movs	r1, #1
 801129a:	fa01 f605 	lsl.w	r6, r1, r5
 801129e:	1d72      	adds	r2, r6, #5
 80112a0:	0092      	lsls	r2, r2, #2
 80112a2:	4620      	mov	r0, r4
 80112a4:	f000 fc9d 	bl	8011be2 <_calloc_r>
 80112a8:	b160      	cbz	r0, 80112c4 <_Balloc+0x64>
 80112aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80112ae:	e00e      	b.n	80112ce <_Balloc+0x6e>
 80112b0:	2221      	movs	r2, #33	; 0x21
 80112b2:	2104      	movs	r1, #4
 80112b4:	4620      	mov	r0, r4
 80112b6:	f000 fc94 	bl	8011be2 <_calloc_r>
 80112ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112bc:	60f0      	str	r0, [r6, #12]
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d1e4      	bne.n	801128e <_Balloc+0x2e>
 80112c4:	2000      	movs	r0, #0
 80112c6:	bd70      	pop	{r4, r5, r6, pc}
 80112c8:	6802      	ldr	r2, [r0, #0]
 80112ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112ce:	2300      	movs	r3, #0
 80112d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112d4:	e7f7      	b.n	80112c6 <_Balloc+0x66>
 80112d6:	bf00      	nop
 80112d8:	08014d0d 	.word	0x08014d0d
 80112dc:	08014e06 	.word	0x08014e06

080112e0 <_Bfree>:
 80112e0:	b570      	push	{r4, r5, r6, lr}
 80112e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80112e4:	4605      	mov	r5, r0
 80112e6:	460c      	mov	r4, r1
 80112e8:	b976      	cbnz	r6, 8011308 <_Bfree+0x28>
 80112ea:	2010      	movs	r0, #16
 80112ec:	f7ff ff9e 	bl	801122c <malloc>
 80112f0:	4602      	mov	r2, r0
 80112f2:	6268      	str	r0, [r5, #36]	; 0x24
 80112f4:	b920      	cbnz	r0, 8011300 <_Bfree+0x20>
 80112f6:	4b09      	ldr	r3, [pc, #36]	; (801131c <_Bfree+0x3c>)
 80112f8:	4809      	ldr	r0, [pc, #36]	; (8011320 <_Bfree+0x40>)
 80112fa:	218a      	movs	r1, #138	; 0x8a
 80112fc:	f000 ff04 	bl	8012108 <__assert_func>
 8011300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011304:	6006      	str	r6, [r0, #0]
 8011306:	60c6      	str	r6, [r0, #12]
 8011308:	b13c      	cbz	r4, 801131a <_Bfree+0x3a>
 801130a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801130c:	6862      	ldr	r2, [r4, #4]
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011314:	6021      	str	r1, [r4, #0]
 8011316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801131a:	bd70      	pop	{r4, r5, r6, pc}
 801131c:	08014d0d 	.word	0x08014d0d
 8011320:	08014e06 	.word	0x08014e06

08011324 <__multadd>:
 8011324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011328:	690d      	ldr	r5, [r1, #16]
 801132a:	4607      	mov	r7, r0
 801132c:	460c      	mov	r4, r1
 801132e:	461e      	mov	r6, r3
 8011330:	f101 0c14 	add.w	ip, r1, #20
 8011334:	2000      	movs	r0, #0
 8011336:	f8dc 3000 	ldr.w	r3, [ip]
 801133a:	b299      	uxth	r1, r3
 801133c:	fb02 6101 	mla	r1, r2, r1, r6
 8011340:	0c1e      	lsrs	r6, r3, #16
 8011342:	0c0b      	lsrs	r3, r1, #16
 8011344:	fb02 3306 	mla	r3, r2, r6, r3
 8011348:	b289      	uxth	r1, r1
 801134a:	3001      	adds	r0, #1
 801134c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011350:	4285      	cmp	r5, r0
 8011352:	f84c 1b04 	str.w	r1, [ip], #4
 8011356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801135a:	dcec      	bgt.n	8011336 <__multadd+0x12>
 801135c:	b30e      	cbz	r6, 80113a2 <__multadd+0x7e>
 801135e:	68a3      	ldr	r3, [r4, #8]
 8011360:	42ab      	cmp	r3, r5
 8011362:	dc19      	bgt.n	8011398 <__multadd+0x74>
 8011364:	6861      	ldr	r1, [r4, #4]
 8011366:	4638      	mov	r0, r7
 8011368:	3101      	adds	r1, #1
 801136a:	f7ff ff79 	bl	8011260 <_Balloc>
 801136e:	4680      	mov	r8, r0
 8011370:	b928      	cbnz	r0, 801137e <__multadd+0x5a>
 8011372:	4602      	mov	r2, r0
 8011374:	4b0c      	ldr	r3, [pc, #48]	; (80113a8 <__multadd+0x84>)
 8011376:	480d      	ldr	r0, [pc, #52]	; (80113ac <__multadd+0x88>)
 8011378:	21b5      	movs	r1, #181	; 0xb5
 801137a:	f000 fec5 	bl	8012108 <__assert_func>
 801137e:	6922      	ldr	r2, [r4, #16]
 8011380:	3202      	adds	r2, #2
 8011382:	f104 010c 	add.w	r1, r4, #12
 8011386:	0092      	lsls	r2, r2, #2
 8011388:	300c      	adds	r0, #12
 801138a:	f7fd fa1f 	bl	800e7cc <memcpy>
 801138e:	4621      	mov	r1, r4
 8011390:	4638      	mov	r0, r7
 8011392:	f7ff ffa5 	bl	80112e0 <_Bfree>
 8011396:	4644      	mov	r4, r8
 8011398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801139c:	3501      	adds	r5, #1
 801139e:	615e      	str	r6, [r3, #20]
 80113a0:	6125      	str	r5, [r4, #16]
 80113a2:	4620      	mov	r0, r4
 80113a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113a8:	08014d7f 	.word	0x08014d7f
 80113ac:	08014e06 	.word	0x08014e06

080113b0 <__s2b>:
 80113b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113b4:	460c      	mov	r4, r1
 80113b6:	4615      	mov	r5, r2
 80113b8:	461f      	mov	r7, r3
 80113ba:	2209      	movs	r2, #9
 80113bc:	3308      	adds	r3, #8
 80113be:	4606      	mov	r6, r0
 80113c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80113c4:	2100      	movs	r1, #0
 80113c6:	2201      	movs	r2, #1
 80113c8:	429a      	cmp	r2, r3
 80113ca:	db09      	blt.n	80113e0 <__s2b+0x30>
 80113cc:	4630      	mov	r0, r6
 80113ce:	f7ff ff47 	bl	8011260 <_Balloc>
 80113d2:	b940      	cbnz	r0, 80113e6 <__s2b+0x36>
 80113d4:	4602      	mov	r2, r0
 80113d6:	4b19      	ldr	r3, [pc, #100]	; (801143c <__s2b+0x8c>)
 80113d8:	4819      	ldr	r0, [pc, #100]	; (8011440 <__s2b+0x90>)
 80113da:	21ce      	movs	r1, #206	; 0xce
 80113dc:	f000 fe94 	bl	8012108 <__assert_func>
 80113e0:	0052      	lsls	r2, r2, #1
 80113e2:	3101      	adds	r1, #1
 80113e4:	e7f0      	b.n	80113c8 <__s2b+0x18>
 80113e6:	9b08      	ldr	r3, [sp, #32]
 80113e8:	6143      	str	r3, [r0, #20]
 80113ea:	2d09      	cmp	r5, #9
 80113ec:	f04f 0301 	mov.w	r3, #1
 80113f0:	6103      	str	r3, [r0, #16]
 80113f2:	dd16      	ble.n	8011422 <__s2b+0x72>
 80113f4:	f104 0909 	add.w	r9, r4, #9
 80113f8:	46c8      	mov	r8, r9
 80113fa:	442c      	add	r4, r5
 80113fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011400:	4601      	mov	r1, r0
 8011402:	3b30      	subs	r3, #48	; 0x30
 8011404:	220a      	movs	r2, #10
 8011406:	4630      	mov	r0, r6
 8011408:	f7ff ff8c 	bl	8011324 <__multadd>
 801140c:	45a0      	cmp	r8, r4
 801140e:	d1f5      	bne.n	80113fc <__s2b+0x4c>
 8011410:	f1a5 0408 	sub.w	r4, r5, #8
 8011414:	444c      	add	r4, r9
 8011416:	1b2d      	subs	r5, r5, r4
 8011418:	1963      	adds	r3, r4, r5
 801141a:	42bb      	cmp	r3, r7
 801141c:	db04      	blt.n	8011428 <__s2b+0x78>
 801141e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011422:	340a      	adds	r4, #10
 8011424:	2509      	movs	r5, #9
 8011426:	e7f6      	b.n	8011416 <__s2b+0x66>
 8011428:	f814 3b01 	ldrb.w	r3, [r4], #1
 801142c:	4601      	mov	r1, r0
 801142e:	3b30      	subs	r3, #48	; 0x30
 8011430:	220a      	movs	r2, #10
 8011432:	4630      	mov	r0, r6
 8011434:	f7ff ff76 	bl	8011324 <__multadd>
 8011438:	e7ee      	b.n	8011418 <__s2b+0x68>
 801143a:	bf00      	nop
 801143c:	08014d7f 	.word	0x08014d7f
 8011440:	08014e06 	.word	0x08014e06

08011444 <__hi0bits>:
 8011444:	0c03      	lsrs	r3, r0, #16
 8011446:	041b      	lsls	r3, r3, #16
 8011448:	b9d3      	cbnz	r3, 8011480 <__hi0bits+0x3c>
 801144a:	0400      	lsls	r0, r0, #16
 801144c:	2310      	movs	r3, #16
 801144e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011452:	bf04      	itt	eq
 8011454:	0200      	lsleq	r0, r0, #8
 8011456:	3308      	addeq	r3, #8
 8011458:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801145c:	bf04      	itt	eq
 801145e:	0100      	lsleq	r0, r0, #4
 8011460:	3304      	addeq	r3, #4
 8011462:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011466:	bf04      	itt	eq
 8011468:	0080      	lsleq	r0, r0, #2
 801146a:	3302      	addeq	r3, #2
 801146c:	2800      	cmp	r0, #0
 801146e:	db05      	blt.n	801147c <__hi0bits+0x38>
 8011470:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011474:	f103 0301 	add.w	r3, r3, #1
 8011478:	bf08      	it	eq
 801147a:	2320      	moveq	r3, #32
 801147c:	4618      	mov	r0, r3
 801147e:	4770      	bx	lr
 8011480:	2300      	movs	r3, #0
 8011482:	e7e4      	b.n	801144e <__hi0bits+0xa>

08011484 <__lo0bits>:
 8011484:	6803      	ldr	r3, [r0, #0]
 8011486:	f013 0207 	ands.w	r2, r3, #7
 801148a:	4601      	mov	r1, r0
 801148c:	d00b      	beq.n	80114a6 <__lo0bits+0x22>
 801148e:	07da      	lsls	r2, r3, #31
 8011490:	d423      	bmi.n	80114da <__lo0bits+0x56>
 8011492:	0798      	lsls	r0, r3, #30
 8011494:	bf49      	itett	mi
 8011496:	085b      	lsrmi	r3, r3, #1
 8011498:	089b      	lsrpl	r3, r3, #2
 801149a:	2001      	movmi	r0, #1
 801149c:	600b      	strmi	r3, [r1, #0]
 801149e:	bf5c      	itt	pl
 80114a0:	600b      	strpl	r3, [r1, #0]
 80114a2:	2002      	movpl	r0, #2
 80114a4:	4770      	bx	lr
 80114a6:	b298      	uxth	r0, r3
 80114a8:	b9a8      	cbnz	r0, 80114d6 <__lo0bits+0x52>
 80114aa:	0c1b      	lsrs	r3, r3, #16
 80114ac:	2010      	movs	r0, #16
 80114ae:	b2da      	uxtb	r2, r3
 80114b0:	b90a      	cbnz	r2, 80114b6 <__lo0bits+0x32>
 80114b2:	3008      	adds	r0, #8
 80114b4:	0a1b      	lsrs	r3, r3, #8
 80114b6:	071a      	lsls	r2, r3, #28
 80114b8:	bf04      	itt	eq
 80114ba:	091b      	lsreq	r3, r3, #4
 80114bc:	3004      	addeq	r0, #4
 80114be:	079a      	lsls	r2, r3, #30
 80114c0:	bf04      	itt	eq
 80114c2:	089b      	lsreq	r3, r3, #2
 80114c4:	3002      	addeq	r0, #2
 80114c6:	07da      	lsls	r2, r3, #31
 80114c8:	d403      	bmi.n	80114d2 <__lo0bits+0x4e>
 80114ca:	085b      	lsrs	r3, r3, #1
 80114cc:	f100 0001 	add.w	r0, r0, #1
 80114d0:	d005      	beq.n	80114de <__lo0bits+0x5a>
 80114d2:	600b      	str	r3, [r1, #0]
 80114d4:	4770      	bx	lr
 80114d6:	4610      	mov	r0, r2
 80114d8:	e7e9      	b.n	80114ae <__lo0bits+0x2a>
 80114da:	2000      	movs	r0, #0
 80114dc:	4770      	bx	lr
 80114de:	2020      	movs	r0, #32
 80114e0:	4770      	bx	lr
	...

080114e4 <__i2b>:
 80114e4:	b510      	push	{r4, lr}
 80114e6:	460c      	mov	r4, r1
 80114e8:	2101      	movs	r1, #1
 80114ea:	f7ff feb9 	bl	8011260 <_Balloc>
 80114ee:	4602      	mov	r2, r0
 80114f0:	b928      	cbnz	r0, 80114fe <__i2b+0x1a>
 80114f2:	4b05      	ldr	r3, [pc, #20]	; (8011508 <__i2b+0x24>)
 80114f4:	4805      	ldr	r0, [pc, #20]	; (801150c <__i2b+0x28>)
 80114f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80114fa:	f000 fe05 	bl	8012108 <__assert_func>
 80114fe:	2301      	movs	r3, #1
 8011500:	6144      	str	r4, [r0, #20]
 8011502:	6103      	str	r3, [r0, #16]
 8011504:	bd10      	pop	{r4, pc}
 8011506:	bf00      	nop
 8011508:	08014d7f 	.word	0x08014d7f
 801150c:	08014e06 	.word	0x08014e06

08011510 <__multiply>:
 8011510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011514:	4691      	mov	r9, r2
 8011516:	690a      	ldr	r2, [r1, #16]
 8011518:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801151c:	429a      	cmp	r2, r3
 801151e:	bfb8      	it	lt
 8011520:	460b      	movlt	r3, r1
 8011522:	460c      	mov	r4, r1
 8011524:	bfbc      	itt	lt
 8011526:	464c      	movlt	r4, r9
 8011528:	4699      	movlt	r9, r3
 801152a:	6927      	ldr	r7, [r4, #16]
 801152c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011530:	68a3      	ldr	r3, [r4, #8]
 8011532:	6861      	ldr	r1, [r4, #4]
 8011534:	eb07 060a 	add.w	r6, r7, sl
 8011538:	42b3      	cmp	r3, r6
 801153a:	b085      	sub	sp, #20
 801153c:	bfb8      	it	lt
 801153e:	3101      	addlt	r1, #1
 8011540:	f7ff fe8e 	bl	8011260 <_Balloc>
 8011544:	b930      	cbnz	r0, 8011554 <__multiply+0x44>
 8011546:	4602      	mov	r2, r0
 8011548:	4b44      	ldr	r3, [pc, #272]	; (801165c <__multiply+0x14c>)
 801154a:	4845      	ldr	r0, [pc, #276]	; (8011660 <__multiply+0x150>)
 801154c:	f240 115d 	movw	r1, #349	; 0x15d
 8011550:	f000 fdda 	bl	8012108 <__assert_func>
 8011554:	f100 0514 	add.w	r5, r0, #20
 8011558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801155c:	462b      	mov	r3, r5
 801155e:	2200      	movs	r2, #0
 8011560:	4543      	cmp	r3, r8
 8011562:	d321      	bcc.n	80115a8 <__multiply+0x98>
 8011564:	f104 0314 	add.w	r3, r4, #20
 8011568:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801156c:	f109 0314 	add.w	r3, r9, #20
 8011570:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011574:	9202      	str	r2, [sp, #8]
 8011576:	1b3a      	subs	r2, r7, r4
 8011578:	3a15      	subs	r2, #21
 801157a:	f022 0203 	bic.w	r2, r2, #3
 801157e:	3204      	adds	r2, #4
 8011580:	f104 0115 	add.w	r1, r4, #21
 8011584:	428f      	cmp	r7, r1
 8011586:	bf38      	it	cc
 8011588:	2204      	movcc	r2, #4
 801158a:	9201      	str	r2, [sp, #4]
 801158c:	9a02      	ldr	r2, [sp, #8]
 801158e:	9303      	str	r3, [sp, #12]
 8011590:	429a      	cmp	r2, r3
 8011592:	d80c      	bhi.n	80115ae <__multiply+0x9e>
 8011594:	2e00      	cmp	r6, #0
 8011596:	dd03      	ble.n	80115a0 <__multiply+0x90>
 8011598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801159c:	2b00      	cmp	r3, #0
 801159e:	d05a      	beq.n	8011656 <__multiply+0x146>
 80115a0:	6106      	str	r6, [r0, #16]
 80115a2:	b005      	add	sp, #20
 80115a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115a8:	f843 2b04 	str.w	r2, [r3], #4
 80115ac:	e7d8      	b.n	8011560 <__multiply+0x50>
 80115ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80115b2:	f1ba 0f00 	cmp.w	sl, #0
 80115b6:	d024      	beq.n	8011602 <__multiply+0xf2>
 80115b8:	f104 0e14 	add.w	lr, r4, #20
 80115bc:	46a9      	mov	r9, r5
 80115be:	f04f 0c00 	mov.w	ip, #0
 80115c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80115c6:	f8d9 1000 	ldr.w	r1, [r9]
 80115ca:	fa1f fb82 	uxth.w	fp, r2
 80115ce:	b289      	uxth	r1, r1
 80115d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80115d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80115d8:	f8d9 2000 	ldr.w	r2, [r9]
 80115dc:	4461      	add	r1, ip
 80115de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80115e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80115e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80115ea:	b289      	uxth	r1, r1
 80115ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80115f0:	4577      	cmp	r7, lr
 80115f2:	f849 1b04 	str.w	r1, [r9], #4
 80115f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80115fa:	d8e2      	bhi.n	80115c2 <__multiply+0xb2>
 80115fc:	9a01      	ldr	r2, [sp, #4]
 80115fe:	f845 c002 	str.w	ip, [r5, r2]
 8011602:	9a03      	ldr	r2, [sp, #12]
 8011604:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011608:	3304      	adds	r3, #4
 801160a:	f1b9 0f00 	cmp.w	r9, #0
 801160e:	d020      	beq.n	8011652 <__multiply+0x142>
 8011610:	6829      	ldr	r1, [r5, #0]
 8011612:	f104 0c14 	add.w	ip, r4, #20
 8011616:	46ae      	mov	lr, r5
 8011618:	f04f 0a00 	mov.w	sl, #0
 801161c:	f8bc b000 	ldrh.w	fp, [ip]
 8011620:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011624:	fb09 220b 	mla	r2, r9, fp, r2
 8011628:	4492      	add	sl, r2
 801162a:	b289      	uxth	r1, r1
 801162c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011630:	f84e 1b04 	str.w	r1, [lr], #4
 8011634:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011638:	f8be 1000 	ldrh.w	r1, [lr]
 801163c:	0c12      	lsrs	r2, r2, #16
 801163e:	fb09 1102 	mla	r1, r9, r2, r1
 8011642:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011646:	4567      	cmp	r7, ip
 8011648:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801164c:	d8e6      	bhi.n	801161c <__multiply+0x10c>
 801164e:	9a01      	ldr	r2, [sp, #4]
 8011650:	50a9      	str	r1, [r5, r2]
 8011652:	3504      	adds	r5, #4
 8011654:	e79a      	b.n	801158c <__multiply+0x7c>
 8011656:	3e01      	subs	r6, #1
 8011658:	e79c      	b.n	8011594 <__multiply+0x84>
 801165a:	bf00      	nop
 801165c:	08014d7f 	.word	0x08014d7f
 8011660:	08014e06 	.word	0x08014e06

08011664 <__pow5mult>:
 8011664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011668:	4615      	mov	r5, r2
 801166a:	f012 0203 	ands.w	r2, r2, #3
 801166e:	4606      	mov	r6, r0
 8011670:	460f      	mov	r7, r1
 8011672:	d007      	beq.n	8011684 <__pow5mult+0x20>
 8011674:	4c25      	ldr	r4, [pc, #148]	; (801170c <__pow5mult+0xa8>)
 8011676:	3a01      	subs	r2, #1
 8011678:	2300      	movs	r3, #0
 801167a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801167e:	f7ff fe51 	bl	8011324 <__multadd>
 8011682:	4607      	mov	r7, r0
 8011684:	10ad      	asrs	r5, r5, #2
 8011686:	d03d      	beq.n	8011704 <__pow5mult+0xa0>
 8011688:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801168a:	b97c      	cbnz	r4, 80116ac <__pow5mult+0x48>
 801168c:	2010      	movs	r0, #16
 801168e:	f7ff fdcd 	bl	801122c <malloc>
 8011692:	4602      	mov	r2, r0
 8011694:	6270      	str	r0, [r6, #36]	; 0x24
 8011696:	b928      	cbnz	r0, 80116a4 <__pow5mult+0x40>
 8011698:	4b1d      	ldr	r3, [pc, #116]	; (8011710 <__pow5mult+0xac>)
 801169a:	481e      	ldr	r0, [pc, #120]	; (8011714 <__pow5mult+0xb0>)
 801169c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80116a0:	f000 fd32 	bl	8012108 <__assert_func>
 80116a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80116a8:	6004      	str	r4, [r0, #0]
 80116aa:	60c4      	str	r4, [r0, #12]
 80116ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80116b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80116b4:	b94c      	cbnz	r4, 80116ca <__pow5mult+0x66>
 80116b6:	f240 2171 	movw	r1, #625	; 0x271
 80116ba:	4630      	mov	r0, r6
 80116bc:	f7ff ff12 	bl	80114e4 <__i2b>
 80116c0:	2300      	movs	r3, #0
 80116c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80116c6:	4604      	mov	r4, r0
 80116c8:	6003      	str	r3, [r0, #0]
 80116ca:	f04f 0900 	mov.w	r9, #0
 80116ce:	07eb      	lsls	r3, r5, #31
 80116d0:	d50a      	bpl.n	80116e8 <__pow5mult+0x84>
 80116d2:	4639      	mov	r1, r7
 80116d4:	4622      	mov	r2, r4
 80116d6:	4630      	mov	r0, r6
 80116d8:	f7ff ff1a 	bl	8011510 <__multiply>
 80116dc:	4639      	mov	r1, r7
 80116de:	4680      	mov	r8, r0
 80116e0:	4630      	mov	r0, r6
 80116e2:	f7ff fdfd 	bl	80112e0 <_Bfree>
 80116e6:	4647      	mov	r7, r8
 80116e8:	106d      	asrs	r5, r5, #1
 80116ea:	d00b      	beq.n	8011704 <__pow5mult+0xa0>
 80116ec:	6820      	ldr	r0, [r4, #0]
 80116ee:	b938      	cbnz	r0, 8011700 <__pow5mult+0x9c>
 80116f0:	4622      	mov	r2, r4
 80116f2:	4621      	mov	r1, r4
 80116f4:	4630      	mov	r0, r6
 80116f6:	f7ff ff0b 	bl	8011510 <__multiply>
 80116fa:	6020      	str	r0, [r4, #0]
 80116fc:	f8c0 9000 	str.w	r9, [r0]
 8011700:	4604      	mov	r4, r0
 8011702:	e7e4      	b.n	80116ce <__pow5mult+0x6a>
 8011704:	4638      	mov	r0, r7
 8011706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801170a:	bf00      	nop
 801170c:	08014f58 	.word	0x08014f58
 8011710:	08014d0d 	.word	0x08014d0d
 8011714:	08014e06 	.word	0x08014e06

08011718 <__lshift>:
 8011718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801171c:	460c      	mov	r4, r1
 801171e:	6849      	ldr	r1, [r1, #4]
 8011720:	6923      	ldr	r3, [r4, #16]
 8011722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011726:	68a3      	ldr	r3, [r4, #8]
 8011728:	4607      	mov	r7, r0
 801172a:	4691      	mov	r9, r2
 801172c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011730:	f108 0601 	add.w	r6, r8, #1
 8011734:	42b3      	cmp	r3, r6
 8011736:	db0b      	blt.n	8011750 <__lshift+0x38>
 8011738:	4638      	mov	r0, r7
 801173a:	f7ff fd91 	bl	8011260 <_Balloc>
 801173e:	4605      	mov	r5, r0
 8011740:	b948      	cbnz	r0, 8011756 <__lshift+0x3e>
 8011742:	4602      	mov	r2, r0
 8011744:	4b2a      	ldr	r3, [pc, #168]	; (80117f0 <__lshift+0xd8>)
 8011746:	482b      	ldr	r0, [pc, #172]	; (80117f4 <__lshift+0xdc>)
 8011748:	f240 11d9 	movw	r1, #473	; 0x1d9
 801174c:	f000 fcdc 	bl	8012108 <__assert_func>
 8011750:	3101      	adds	r1, #1
 8011752:	005b      	lsls	r3, r3, #1
 8011754:	e7ee      	b.n	8011734 <__lshift+0x1c>
 8011756:	2300      	movs	r3, #0
 8011758:	f100 0114 	add.w	r1, r0, #20
 801175c:	f100 0210 	add.w	r2, r0, #16
 8011760:	4618      	mov	r0, r3
 8011762:	4553      	cmp	r3, sl
 8011764:	db37      	blt.n	80117d6 <__lshift+0xbe>
 8011766:	6920      	ldr	r0, [r4, #16]
 8011768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801176c:	f104 0314 	add.w	r3, r4, #20
 8011770:	f019 091f 	ands.w	r9, r9, #31
 8011774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011778:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801177c:	d02f      	beq.n	80117de <__lshift+0xc6>
 801177e:	f1c9 0e20 	rsb	lr, r9, #32
 8011782:	468a      	mov	sl, r1
 8011784:	f04f 0c00 	mov.w	ip, #0
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	fa02 f209 	lsl.w	r2, r2, r9
 801178e:	ea42 020c 	orr.w	r2, r2, ip
 8011792:	f84a 2b04 	str.w	r2, [sl], #4
 8011796:	f853 2b04 	ldr.w	r2, [r3], #4
 801179a:	4298      	cmp	r0, r3
 801179c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80117a0:	d8f2      	bhi.n	8011788 <__lshift+0x70>
 80117a2:	1b03      	subs	r3, r0, r4
 80117a4:	3b15      	subs	r3, #21
 80117a6:	f023 0303 	bic.w	r3, r3, #3
 80117aa:	3304      	adds	r3, #4
 80117ac:	f104 0215 	add.w	r2, r4, #21
 80117b0:	4290      	cmp	r0, r2
 80117b2:	bf38      	it	cc
 80117b4:	2304      	movcc	r3, #4
 80117b6:	f841 c003 	str.w	ip, [r1, r3]
 80117ba:	f1bc 0f00 	cmp.w	ip, #0
 80117be:	d001      	beq.n	80117c4 <__lshift+0xac>
 80117c0:	f108 0602 	add.w	r6, r8, #2
 80117c4:	3e01      	subs	r6, #1
 80117c6:	4638      	mov	r0, r7
 80117c8:	612e      	str	r6, [r5, #16]
 80117ca:	4621      	mov	r1, r4
 80117cc:	f7ff fd88 	bl	80112e0 <_Bfree>
 80117d0:	4628      	mov	r0, r5
 80117d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80117da:	3301      	adds	r3, #1
 80117dc:	e7c1      	b.n	8011762 <__lshift+0x4a>
 80117de:	3904      	subs	r1, #4
 80117e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80117e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80117e8:	4298      	cmp	r0, r3
 80117ea:	d8f9      	bhi.n	80117e0 <__lshift+0xc8>
 80117ec:	e7ea      	b.n	80117c4 <__lshift+0xac>
 80117ee:	bf00      	nop
 80117f0:	08014d7f 	.word	0x08014d7f
 80117f4:	08014e06 	.word	0x08014e06

080117f8 <__mcmp>:
 80117f8:	b530      	push	{r4, r5, lr}
 80117fa:	6902      	ldr	r2, [r0, #16]
 80117fc:	690c      	ldr	r4, [r1, #16]
 80117fe:	1b12      	subs	r2, r2, r4
 8011800:	d10e      	bne.n	8011820 <__mcmp+0x28>
 8011802:	f100 0314 	add.w	r3, r0, #20
 8011806:	3114      	adds	r1, #20
 8011808:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801180c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011810:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011814:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011818:	42a5      	cmp	r5, r4
 801181a:	d003      	beq.n	8011824 <__mcmp+0x2c>
 801181c:	d305      	bcc.n	801182a <__mcmp+0x32>
 801181e:	2201      	movs	r2, #1
 8011820:	4610      	mov	r0, r2
 8011822:	bd30      	pop	{r4, r5, pc}
 8011824:	4283      	cmp	r3, r0
 8011826:	d3f3      	bcc.n	8011810 <__mcmp+0x18>
 8011828:	e7fa      	b.n	8011820 <__mcmp+0x28>
 801182a:	f04f 32ff 	mov.w	r2, #4294967295
 801182e:	e7f7      	b.n	8011820 <__mcmp+0x28>

08011830 <__mdiff>:
 8011830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011834:	460c      	mov	r4, r1
 8011836:	4606      	mov	r6, r0
 8011838:	4611      	mov	r1, r2
 801183a:	4620      	mov	r0, r4
 801183c:	4690      	mov	r8, r2
 801183e:	f7ff ffdb 	bl	80117f8 <__mcmp>
 8011842:	1e05      	subs	r5, r0, #0
 8011844:	d110      	bne.n	8011868 <__mdiff+0x38>
 8011846:	4629      	mov	r1, r5
 8011848:	4630      	mov	r0, r6
 801184a:	f7ff fd09 	bl	8011260 <_Balloc>
 801184e:	b930      	cbnz	r0, 801185e <__mdiff+0x2e>
 8011850:	4b3a      	ldr	r3, [pc, #232]	; (801193c <__mdiff+0x10c>)
 8011852:	4602      	mov	r2, r0
 8011854:	f240 2132 	movw	r1, #562	; 0x232
 8011858:	4839      	ldr	r0, [pc, #228]	; (8011940 <__mdiff+0x110>)
 801185a:	f000 fc55 	bl	8012108 <__assert_func>
 801185e:	2301      	movs	r3, #1
 8011860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011868:	bfa4      	itt	ge
 801186a:	4643      	movge	r3, r8
 801186c:	46a0      	movge	r8, r4
 801186e:	4630      	mov	r0, r6
 8011870:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011874:	bfa6      	itte	ge
 8011876:	461c      	movge	r4, r3
 8011878:	2500      	movge	r5, #0
 801187a:	2501      	movlt	r5, #1
 801187c:	f7ff fcf0 	bl	8011260 <_Balloc>
 8011880:	b920      	cbnz	r0, 801188c <__mdiff+0x5c>
 8011882:	4b2e      	ldr	r3, [pc, #184]	; (801193c <__mdiff+0x10c>)
 8011884:	4602      	mov	r2, r0
 8011886:	f44f 7110 	mov.w	r1, #576	; 0x240
 801188a:	e7e5      	b.n	8011858 <__mdiff+0x28>
 801188c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011890:	6926      	ldr	r6, [r4, #16]
 8011892:	60c5      	str	r5, [r0, #12]
 8011894:	f104 0914 	add.w	r9, r4, #20
 8011898:	f108 0514 	add.w	r5, r8, #20
 801189c:	f100 0e14 	add.w	lr, r0, #20
 80118a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80118a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80118a8:	f108 0210 	add.w	r2, r8, #16
 80118ac:	46f2      	mov	sl, lr
 80118ae:	2100      	movs	r1, #0
 80118b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80118b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80118b8:	fa1f f883 	uxth.w	r8, r3
 80118bc:	fa11 f18b 	uxtah	r1, r1, fp
 80118c0:	0c1b      	lsrs	r3, r3, #16
 80118c2:	eba1 0808 	sub.w	r8, r1, r8
 80118c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80118ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80118ce:	fa1f f888 	uxth.w	r8, r8
 80118d2:	1419      	asrs	r1, r3, #16
 80118d4:	454e      	cmp	r6, r9
 80118d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80118da:	f84a 3b04 	str.w	r3, [sl], #4
 80118de:	d8e7      	bhi.n	80118b0 <__mdiff+0x80>
 80118e0:	1b33      	subs	r3, r6, r4
 80118e2:	3b15      	subs	r3, #21
 80118e4:	f023 0303 	bic.w	r3, r3, #3
 80118e8:	3304      	adds	r3, #4
 80118ea:	3415      	adds	r4, #21
 80118ec:	42a6      	cmp	r6, r4
 80118ee:	bf38      	it	cc
 80118f0:	2304      	movcc	r3, #4
 80118f2:	441d      	add	r5, r3
 80118f4:	4473      	add	r3, lr
 80118f6:	469e      	mov	lr, r3
 80118f8:	462e      	mov	r6, r5
 80118fa:	4566      	cmp	r6, ip
 80118fc:	d30e      	bcc.n	801191c <__mdiff+0xec>
 80118fe:	f10c 0203 	add.w	r2, ip, #3
 8011902:	1b52      	subs	r2, r2, r5
 8011904:	f022 0203 	bic.w	r2, r2, #3
 8011908:	3d03      	subs	r5, #3
 801190a:	45ac      	cmp	ip, r5
 801190c:	bf38      	it	cc
 801190e:	2200      	movcc	r2, #0
 8011910:	441a      	add	r2, r3
 8011912:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011916:	b17b      	cbz	r3, 8011938 <__mdiff+0x108>
 8011918:	6107      	str	r7, [r0, #16]
 801191a:	e7a3      	b.n	8011864 <__mdiff+0x34>
 801191c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011920:	fa11 f288 	uxtah	r2, r1, r8
 8011924:	1414      	asrs	r4, r2, #16
 8011926:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801192a:	b292      	uxth	r2, r2
 801192c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011930:	f84e 2b04 	str.w	r2, [lr], #4
 8011934:	1421      	asrs	r1, r4, #16
 8011936:	e7e0      	b.n	80118fa <__mdiff+0xca>
 8011938:	3f01      	subs	r7, #1
 801193a:	e7ea      	b.n	8011912 <__mdiff+0xe2>
 801193c:	08014d7f 	.word	0x08014d7f
 8011940:	08014e06 	.word	0x08014e06

08011944 <__ulp>:
 8011944:	b082      	sub	sp, #8
 8011946:	ed8d 0b00 	vstr	d0, [sp]
 801194a:	9b01      	ldr	r3, [sp, #4]
 801194c:	4912      	ldr	r1, [pc, #72]	; (8011998 <__ulp+0x54>)
 801194e:	4019      	ands	r1, r3
 8011950:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011954:	2900      	cmp	r1, #0
 8011956:	dd05      	ble.n	8011964 <__ulp+0x20>
 8011958:	2200      	movs	r2, #0
 801195a:	460b      	mov	r3, r1
 801195c:	ec43 2b10 	vmov	d0, r2, r3
 8011960:	b002      	add	sp, #8
 8011962:	4770      	bx	lr
 8011964:	4249      	negs	r1, r1
 8011966:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801196a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801196e:	f04f 0200 	mov.w	r2, #0
 8011972:	f04f 0300 	mov.w	r3, #0
 8011976:	da04      	bge.n	8011982 <__ulp+0x3e>
 8011978:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801197c:	fa41 f300 	asr.w	r3, r1, r0
 8011980:	e7ec      	b.n	801195c <__ulp+0x18>
 8011982:	f1a0 0114 	sub.w	r1, r0, #20
 8011986:	291e      	cmp	r1, #30
 8011988:	bfda      	itte	le
 801198a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801198e:	fa20 f101 	lsrle.w	r1, r0, r1
 8011992:	2101      	movgt	r1, #1
 8011994:	460a      	mov	r2, r1
 8011996:	e7e1      	b.n	801195c <__ulp+0x18>
 8011998:	7ff00000 	.word	0x7ff00000

0801199c <__b2d>:
 801199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801199e:	6905      	ldr	r5, [r0, #16]
 80119a0:	f100 0714 	add.w	r7, r0, #20
 80119a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80119a8:	1f2e      	subs	r6, r5, #4
 80119aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80119ae:	4620      	mov	r0, r4
 80119b0:	f7ff fd48 	bl	8011444 <__hi0bits>
 80119b4:	f1c0 0320 	rsb	r3, r0, #32
 80119b8:	280a      	cmp	r0, #10
 80119ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011a38 <__b2d+0x9c>
 80119be:	600b      	str	r3, [r1, #0]
 80119c0:	dc14      	bgt.n	80119ec <__b2d+0x50>
 80119c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80119c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80119ca:	42b7      	cmp	r7, r6
 80119cc:	ea41 030c 	orr.w	r3, r1, ip
 80119d0:	bf34      	ite	cc
 80119d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80119d6:	2100      	movcs	r1, #0
 80119d8:	3015      	adds	r0, #21
 80119da:	fa04 f000 	lsl.w	r0, r4, r0
 80119de:	fa21 f10e 	lsr.w	r1, r1, lr
 80119e2:	ea40 0201 	orr.w	r2, r0, r1
 80119e6:	ec43 2b10 	vmov	d0, r2, r3
 80119ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ec:	42b7      	cmp	r7, r6
 80119ee:	bf3a      	itte	cc
 80119f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80119f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80119f8:	2100      	movcs	r1, #0
 80119fa:	380b      	subs	r0, #11
 80119fc:	d017      	beq.n	8011a2e <__b2d+0x92>
 80119fe:	f1c0 0c20 	rsb	ip, r0, #32
 8011a02:	fa04 f500 	lsl.w	r5, r4, r0
 8011a06:	42be      	cmp	r6, r7
 8011a08:	fa21 f40c 	lsr.w	r4, r1, ip
 8011a0c:	ea45 0504 	orr.w	r5, r5, r4
 8011a10:	bf8c      	ite	hi
 8011a12:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011a16:	2400      	movls	r4, #0
 8011a18:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011a1c:	fa01 f000 	lsl.w	r0, r1, r0
 8011a20:	fa24 f40c 	lsr.w	r4, r4, ip
 8011a24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011a28:	ea40 0204 	orr.w	r2, r0, r4
 8011a2c:	e7db      	b.n	80119e6 <__b2d+0x4a>
 8011a2e:	ea44 030c 	orr.w	r3, r4, ip
 8011a32:	460a      	mov	r2, r1
 8011a34:	e7d7      	b.n	80119e6 <__b2d+0x4a>
 8011a36:	bf00      	nop
 8011a38:	3ff00000 	.word	0x3ff00000

08011a3c <__d2b>:
 8011a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a40:	4689      	mov	r9, r1
 8011a42:	2101      	movs	r1, #1
 8011a44:	ec57 6b10 	vmov	r6, r7, d0
 8011a48:	4690      	mov	r8, r2
 8011a4a:	f7ff fc09 	bl	8011260 <_Balloc>
 8011a4e:	4604      	mov	r4, r0
 8011a50:	b930      	cbnz	r0, 8011a60 <__d2b+0x24>
 8011a52:	4602      	mov	r2, r0
 8011a54:	4b25      	ldr	r3, [pc, #148]	; (8011aec <__d2b+0xb0>)
 8011a56:	4826      	ldr	r0, [pc, #152]	; (8011af0 <__d2b+0xb4>)
 8011a58:	f240 310a 	movw	r1, #778	; 0x30a
 8011a5c:	f000 fb54 	bl	8012108 <__assert_func>
 8011a60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011a64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a68:	bb35      	cbnz	r5, 8011ab8 <__d2b+0x7c>
 8011a6a:	2e00      	cmp	r6, #0
 8011a6c:	9301      	str	r3, [sp, #4]
 8011a6e:	d028      	beq.n	8011ac2 <__d2b+0x86>
 8011a70:	4668      	mov	r0, sp
 8011a72:	9600      	str	r6, [sp, #0]
 8011a74:	f7ff fd06 	bl	8011484 <__lo0bits>
 8011a78:	9900      	ldr	r1, [sp, #0]
 8011a7a:	b300      	cbz	r0, 8011abe <__d2b+0x82>
 8011a7c:	9a01      	ldr	r2, [sp, #4]
 8011a7e:	f1c0 0320 	rsb	r3, r0, #32
 8011a82:	fa02 f303 	lsl.w	r3, r2, r3
 8011a86:	430b      	orrs	r3, r1
 8011a88:	40c2      	lsrs	r2, r0
 8011a8a:	6163      	str	r3, [r4, #20]
 8011a8c:	9201      	str	r2, [sp, #4]
 8011a8e:	9b01      	ldr	r3, [sp, #4]
 8011a90:	61a3      	str	r3, [r4, #24]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	bf14      	ite	ne
 8011a96:	2202      	movne	r2, #2
 8011a98:	2201      	moveq	r2, #1
 8011a9a:	6122      	str	r2, [r4, #16]
 8011a9c:	b1d5      	cbz	r5, 8011ad4 <__d2b+0x98>
 8011a9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011aa2:	4405      	add	r5, r0
 8011aa4:	f8c9 5000 	str.w	r5, [r9]
 8011aa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011aac:	f8c8 0000 	str.w	r0, [r8]
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	b003      	add	sp, #12
 8011ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011abc:	e7d5      	b.n	8011a6a <__d2b+0x2e>
 8011abe:	6161      	str	r1, [r4, #20]
 8011ac0:	e7e5      	b.n	8011a8e <__d2b+0x52>
 8011ac2:	a801      	add	r0, sp, #4
 8011ac4:	f7ff fcde 	bl	8011484 <__lo0bits>
 8011ac8:	9b01      	ldr	r3, [sp, #4]
 8011aca:	6163      	str	r3, [r4, #20]
 8011acc:	2201      	movs	r2, #1
 8011ace:	6122      	str	r2, [r4, #16]
 8011ad0:	3020      	adds	r0, #32
 8011ad2:	e7e3      	b.n	8011a9c <__d2b+0x60>
 8011ad4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ad8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011adc:	f8c9 0000 	str.w	r0, [r9]
 8011ae0:	6918      	ldr	r0, [r3, #16]
 8011ae2:	f7ff fcaf 	bl	8011444 <__hi0bits>
 8011ae6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011aea:	e7df      	b.n	8011aac <__d2b+0x70>
 8011aec:	08014d7f 	.word	0x08014d7f
 8011af0:	08014e06 	.word	0x08014e06

08011af4 <__ratio>:
 8011af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af8:	4688      	mov	r8, r1
 8011afa:	4669      	mov	r1, sp
 8011afc:	4681      	mov	r9, r0
 8011afe:	f7ff ff4d 	bl	801199c <__b2d>
 8011b02:	a901      	add	r1, sp, #4
 8011b04:	4640      	mov	r0, r8
 8011b06:	ec55 4b10 	vmov	r4, r5, d0
 8011b0a:	f7ff ff47 	bl	801199c <__b2d>
 8011b0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011b12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011b16:	eba3 0c02 	sub.w	ip, r3, r2
 8011b1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b1e:	1a9b      	subs	r3, r3, r2
 8011b20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011b24:	ec51 0b10 	vmov	r0, r1, d0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	bfd6      	itet	le
 8011b2c:	460a      	movle	r2, r1
 8011b2e:	462a      	movgt	r2, r5
 8011b30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011b34:	468b      	mov	fp, r1
 8011b36:	462f      	mov	r7, r5
 8011b38:	bfd4      	ite	le
 8011b3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011b3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011b42:	4620      	mov	r0, r4
 8011b44:	ee10 2a10 	vmov	r2, s0
 8011b48:	465b      	mov	r3, fp
 8011b4a:	4639      	mov	r1, r7
 8011b4c:	f7ee fe7e 	bl	800084c <__aeabi_ddiv>
 8011b50:	ec41 0b10 	vmov	d0, r0, r1
 8011b54:	b003      	add	sp, #12
 8011b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b5a <__copybits>:
 8011b5a:	3901      	subs	r1, #1
 8011b5c:	b570      	push	{r4, r5, r6, lr}
 8011b5e:	1149      	asrs	r1, r1, #5
 8011b60:	6914      	ldr	r4, [r2, #16]
 8011b62:	3101      	adds	r1, #1
 8011b64:	f102 0314 	add.w	r3, r2, #20
 8011b68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b70:	1f05      	subs	r5, r0, #4
 8011b72:	42a3      	cmp	r3, r4
 8011b74:	d30c      	bcc.n	8011b90 <__copybits+0x36>
 8011b76:	1aa3      	subs	r3, r4, r2
 8011b78:	3b11      	subs	r3, #17
 8011b7a:	f023 0303 	bic.w	r3, r3, #3
 8011b7e:	3211      	adds	r2, #17
 8011b80:	42a2      	cmp	r2, r4
 8011b82:	bf88      	it	hi
 8011b84:	2300      	movhi	r3, #0
 8011b86:	4418      	add	r0, r3
 8011b88:	2300      	movs	r3, #0
 8011b8a:	4288      	cmp	r0, r1
 8011b8c:	d305      	bcc.n	8011b9a <__copybits+0x40>
 8011b8e:	bd70      	pop	{r4, r5, r6, pc}
 8011b90:	f853 6b04 	ldr.w	r6, [r3], #4
 8011b94:	f845 6f04 	str.w	r6, [r5, #4]!
 8011b98:	e7eb      	b.n	8011b72 <__copybits+0x18>
 8011b9a:	f840 3b04 	str.w	r3, [r0], #4
 8011b9e:	e7f4      	b.n	8011b8a <__copybits+0x30>

08011ba0 <__any_on>:
 8011ba0:	f100 0214 	add.w	r2, r0, #20
 8011ba4:	6900      	ldr	r0, [r0, #16]
 8011ba6:	114b      	asrs	r3, r1, #5
 8011ba8:	4298      	cmp	r0, r3
 8011baa:	b510      	push	{r4, lr}
 8011bac:	db11      	blt.n	8011bd2 <__any_on+0x32>
 8011bae:	dd0a      	ble.n	8011bc6 <__any_on+0x26>
 8011bb0:	f011 011f 	ands.w	r1, r1, #31
 8011bb4:	d007      	beq.n	8011bc6 <__any_on+0x26>
 8011bb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011bba:	fa24 f001 	lsr.w	r0, r4, r1
 8011bbe:	fa00 f101 	lsl.w	r1, r0, r1
 8011bc2:	428c      	cmp	r4, r1
 8011bc4:	d10b      	bne.n	8011bde <__any_on+0x3e>
 8011bc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d803      	bhi.n	8011bd6 <__any_on+0x36>
 8011bce:	2000      	movs	r0, #0
 8011bd0:	bd10      	pop	{r4, pc}
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	e7f7      	b.n	8011bc6 <__any_on+0x26>
 8011bd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011bda:	2900      	cmp	r1, #0
 8011bdc:	d0f5      	beq.n	8011bca <__any_on+0x2a>
 8011bde:	2001      	movs	r0, #1
 8011be0:	e7f6      	b.n	8011bd0 <__any_on+0x30>

08011be2 <_calloc_r>:
 8011be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011be4:	fba1 2402 	umull	r2, r4, r1, r2
 8011be8:	b94c      	cbnz	r4, 8011bfe <_calloc_r+0x1c>
 8011bea:	4611      	mov	r1, r2
 8011bec:	9201      	str	r2, [sp, #4]
 8011bee:	f000 f87b 	bl	8011ce8 <_malloc_r>
 8011bf2:	9a01      	ldr	r2, [sp, #4]
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	b930      	cbnz	r0, 8011c06 <_calloc_r+0x24>
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	b003      	add	sp, #12
 8011bfc:	bd30      	pop	{r4, r5, pc}
 8011bfe:	220c      	movs	r2, #12
 8011c00:	6002      	str	r2, [r0, #0]
 8011c02:	2500      	movs	r5, #0
 8011c04:	e7f8      	b.n	8011bf8 <_calloc_r+0x16>
 8011c06:	4621      	mov	r1, r4
 8011c08:	f7fc fe08 	bl	800e81c <memset>
 8011c0c:	e7f4      	b.n	8011bf8 <_calloc_r+0x16>
	...

08011c10 <_free_r>:
 8011c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c12:	2900      	cmp	r1, #0
 8011c14:	d044      	beq.n	8011ca0 <_free_r+0x90>
 8011c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c1a:	9001      	str	r0, [sp, #4]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f1a1 0404 	sub.w	r4, r1, #4
 8011c22:	bfb8      	it	lt
 8011c24:	18e4      	addlt	r4, r4, r3
 8011c26:	f000 fa9f 	bl	8012168 <__malloc_lock>
 8011c2a:	4a1e      	ldr	r2, [pc, #120]	; (8011ca4 <_free_r+0x94>)
 8011c2c:	9801      	ldr	r0, [sp, #4]
 8011c2e:	6813      	ldr	r3, [r2, #0]
 8011c30:	b933      	cbnz	r3, 8011c40 <_free_r+0x30>
 8011c32:	6063      	str	r3, [r4, #4]
 8011c34:	6014      	str	r4, [r2, #0]
 8011c36:	b003      	add	sp, #12
 8011c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c3c:	f000 ba9a 	b.w	8012174 <__malloc_unlock>
 8011c40:	42a3      	cmp	r3, r4
 8011c42:	d908      	bls.n	8011c56 <_free_r+0x46>
 8011c44:	6825      	ldr	r5, [r4, #0]
 8011c46:	1961      	adds	r1, r4, r5
 8011c48:	428b      	cmp	r3, r1
 8011c4a:	bf01      	itttt	eq
 8011c4c:	6819      	ldreq	r1, [r3, #0]
 8011c4e:	685b      	ldreq	r3, [r3, #4]
 8011c50:	1949      	addeq	r1, r1, r5
 8011c52:	6021      	streq	r1, [r4, #0]
 8011c54:	e7ed      	b.n	8011c32 <_free_r+0x22>
 8011c56:	461a      	mov	r2, r3
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	b10b      	cbz	r3, 8011c60 <_free_r+0x50>
 8011c5c:	42a3      	cmp	r3, r4
 8011c5e:	d9fa      	bls.n	8011c56 <_free_r+0x46>
 8011c60:	6811      	ldr	r1, [r2, #0]
 8011c62:	1855      	adds	r5, r2, r1
 8011c64:	42a5      	cmp	r5, r4
 8011c66:	d10b      	bne.n	8011c80 <_free_r+0x70>
 8011c68:	6824      	ldr	r4, [r4, #0]
 8011c6a:	4421      	add	r1, r4
 8011c6c:	1854      	adds	r4, r2, r1
 8011c6e:	42a3      	cmp	r3, r4
 8011c70:	6011      	str	r1, [r2, #0]
 8011c72:	d1e0      	bne.n	8011c36 <_free_r+0x26>
 8011c74:	681c      	ldr	r4, [r3, #0]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	6053      	str	r3, [r2, #4]
 8011c7a:	4421      	add	r1, r4
 8011c7c:	6011      	str	r1, [r2, #0]
 8011c7e:	e7da      	b.n	8011c36 <_free_r+0x26>
 8011c80:	d902      	bls.n	8011c88 <_free_r+0x78>
 8011c82:	230c      	movs	r3, #12
 8011c84:	6003      	str	r3, [r0, #0]
 8011c86:	e7d6      	b.n	8011c36 <_free_r+0x26>
 8011c88:	6825      	ldr	r5, [r4, #0]
 8011c8a:	1961      	adds	r1, r4, r5
 8011c8c:	428b      	cmp	r3, r1
 8011c8e:	bf04      	itt	eq
 8011c90:	6819      	ldreq	r1, [r3, #0]
 8011c92:	685b      	ldreq	r3, [r3, #4]
 8011c94:	6063      	str	r3, [r4, #4]
 8011c96:	bf04      	itt	eq
 8011c98:	1949      	addeq	r1, r1, r5
 8011c9a:	6021      	streq	r1, [r4, #0]
 8011c9c:	6054      	str	r4, [r2, #4]
 8011c9e:	e7ca      	b.n	8011c36 <_free_r+0x26>
 8011ca0:	b003      	add	sp, #12
 8011ca2:	bd30      	pop	{r4, r5, pc}
 8011ca4:	20003944 	.word	0x20003944

08011ca8 <sbrk_aligned>:
 8011ca8:	b570      	push	{r4, r5, r6, lr}
 8011caa:	4e0e      	ldr	r6, [pc, #56]	; (8011ce4 <sbrk_aligned+0x3c>)
 8011cac:	460c      	mov	r4, r1
 8011cae:	6831      	ldr	r1, [r6, #0]
 8011cb0:	4605      	mov	r5, r0
 8011cb2:	b911      	cbnz	r1, 8011cba <sbrk_aligned+0x12>
 8011cb4:	f000 f9f0 	bl	8012098 <_sbrk_r>
 8011cb8:	6030      	str	r0, [r6, #0]
 8011cba:	4621      	mov	r1, r4
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	f000 f9eb 	bl	8012098 <_sbrk_r>
 8011cc2:	1c43      	adds	r3, r0, #1
 8011cc4:	d00a      	beq.n	8011cdc <sbrk_aligned+0x34>
 8011cc6:	1cc4      	adds	r4, r0, #3
 8011cc8:	f024 0403 	bic.w	r4, r4, #3
 8011ccc:	42a0      	cmp	r0, r4
 8011cce:	d007      	beq.n	8011ce0 <sbrk_aligned+0x38>
 8011cd0:	1a21      	subs	r1, r4, r0
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	f000 f9e0 	bl	8012098 <_sbrk_r>
 8011cd8:	3001      	adds	r0, #1
 8011cda:	d101      	bne.n	8011ce0 <sbrk_aligned+0x38>
 8011cdc:	f04f 34ff 	mov.w	r4, #4294967295
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	bd70      	pop	{r4, r5, r6, pc}
 8011ce4:	20003948 	.word	0x20003948

08011ce8 <_malloc_r>:
 8011ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cec:	1ccd      	adds	r5, r1, #3
 8011cee:	f025 0503 	bic.w	r5, r5, #3
 8011cf2:	3508      	adds	r5, #8
 8011cf4:	2d0c      	cmp	r5, #12
 8011cf6:	bf38      	it	cc
 8011cf8:	250c      	movcc	r5, #12
 8011cfa:	2d00      	cmp	r5, #0
 8011cfc:	4607      	mov	r7, r0
 8011cfe:	db01      	blt.n	8011d04 <_malloc_r+0x1c>
 8011d00:	42a9      	cmp	r1, r5
 8011d02:	d905      	bls.n	8011d10 <_malloc_r+0x28>
 8011d04:	230c      	movs	r3, #12
 8011d06:	603b      	str	r3, [r7, #0]
 8011d08:	2600      	movs	r6, #0
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d10:	4e2e      	ldr	r6, [pc, #184]	; (8011dcc <_malloc_r+0xe4>)
 8011d12:	f000 fa29 	bl	8012168 <__malloc_lock>
 8011d16:	6833      	ldr	r3, [r6, #0]
 8011d18:	461c      	mov	r4, r3
 8011d1a:	bb34      	cbnz	r4, 8011d6a <_malloc_r+0x82>
 8011d1c:	4629      	mov	r1, r5
 8011d1e:	4638      	mov	r0, r7
 8011d20:	f7ff ffc2 	bl	8011ca8 <sbrk_aligned>
 8011d24:	1c43      	adds	r3, r0, #1
 8011d26:	4604      	mov	r4, r0
 8011d28:	d14d      	bne.n	8011dc6 <_malloc_r+0xde>
 8011d2a:	6834      	ldr	r4, [r6, #0]
 8011d2c:	4626      	mov	r6, r4
 8011d2e:	2e00      	cmp	r6, #0
 8011d30:	d140      	bne.n	8011db4 <_malloc_r+0xcc>
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	4631      	mov	r1, r6
 8011d36:	4638      	mov	r0, r7
 8011d38:	eb04 0803 	add.w	r8, r4, r3
 8011d3c:	f000 f9ac 	bl	8012098 <_sbrk_r>
 8011d40:	4580      	cmp	r8, r0
 8011d42:	d13a      	bne.n	8011dba <_malloc_r+0xd2>
 8011d44:	6821      	ldr	r1, [r4, #0]
 8011d46:	3503      	adds	r5, #3
 8011d48:	1a6d      	subs	r5, r5, r1
 8011d4a:	f025 0503 	bic.w	r5, r5, #3
 8011d4e:	3508      	adds	r5, #8
 8011d50:	2d0c      	cmp	r5, #12
 8011d52:	bf38      	it	cc
 8011d54:	250c      	movcc	r5, #12
 8011d56:	4629      	mov	r1, r5
 8011d58:	4638      	mov	r0, r7
 8011d5a:	f7ff ffa5 	bl	8011ca8 <sbrk_aligned>
 8011d5e:	3001      	adds	r0, #1
 8011d60:	d02b      	beq.n	8011dba <_malloc_r+0xd2>
 8011d62:	6823      	ldr	r3, [r4, #0]
 8011d64:	442b      	add	r3, r5
 8011d66:	6023      	str	r3, [r4, #0]
 8011d68:	e00e      	b.n	8011d88 <_malloc_r+0xa0>
 8011d6a:	6822      	ldr	r2, [r4, #0]
 8011d6c:	1b52      	subs	r2, r2, r5
 8011d6e:	d41e      	bmi.n	8011dae <_malloc_r+0xc6>
 8011d70:	2a0b      	cmp	r2, #11
 8011d72:	d916      	bls.n	8011da2 <_malloc_r+0xba>
 8011d74:	1961      	adds	r1, r4, r5
 8011d76:	42a3      	cmp	r3, r4
 8011d78:	6025      	str	r5, [r4, #0]
 8011d7a:	bf18      	it	ne
 8011d7c:	6059      	strne	r1, [r3, #4]
 8011d7e:	6863      	ldr	r3, [r4, #4]
 8011d80:	bf08      	it	eq
 8011d82:	6031      	streq	r1, [r6, #0]
 8011d84:	5162      	str	r2, [r4, r5]
 8011d86:	604b      	str	r3, [r1, #4]
 8011d88:	4638      	mov	r0, r7
 8011d8a:	f104 060b 	add.w	r6, r4, #11
 8011d8e:	f000 f9f1 	bl	8012174 <__malloc_unlock>
 8011d92:	f026 0607 	bic.w	r6, r6, #7
 8011d96:	1d23      	adds	r3, r4, #4
 8011d98:	1af2      	subs	r2, r6, r3
 8011d9a:	d0b6      	beq.n	8011d0a <_malloc_r+0x22>
 8011d9c:	1b9b      	subs	r3, r3, r6
 8011d9e:	50a3      	str	r3, [r4, r2]
 8011da0:	e7b3      	b.n	8011d0a <_malloc_r+0x22>
 8011da2:	6862      	ldr	r2, [r4, #4]
 8011da4:	42a3      	cmp	r3, r4
 8011da6:	bf0c      	ite	eq
 8011da8:	6032      	streq	r2, [r6, #0]
 8011daa:	605a      	strne	r2, [r3, #4]
 8011dac:	e7ec      	b.n	8011d88 <_malloc_r+0xa0>
 8011dae:	4623      	mov	r3, r4
 8011db0:	6864      	ldr	r4, [r4, #4]
 8011db2:	e7b2      	b.n	8011d1a <_malloc_r+0x32>
 8011db4:	4634      	mov	r4, r6
 8011db6:	6876      	ldr	r6, [r6, #4]
 8011db8:	e7b9      	b.n	8011d2e <_malloc_r+0x46>
 8011dba:	230c      	movs	r3, #12
 8011dbc:	603b      	str	r3, [r7, #0]
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	f000 f9d8 	bl	8012174 <__malloc_unlock>
 8011dc4:	e7a1      	b.n	8011d0a <_malloc_r+0x22>
 8011dc6:	6025      	str	r5, [r4, #0]
 8011dc8:	e7de      	b.n	8011d88 <_malloc_r+0xa0>
 8011dca:	bf00      	nop
 8011dcc:	20003944 	.word	0x20003944

08011dd0 <__ssputs_r>:
 8011dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd4:	688e      	ldr	r6, [r1, #8]
 8011dd6:	429e      	cmp	r6, r3
 8011dd8:	4682      	mov	sl, r0
 8011dda:	460c      	mov	r4, r1
 8011ddc:	4690      	mov	r8, r2
 8011dde:	461f      	mov	r7, r3
 8011de0:	d838      	bhi.n	8011e54 <__ssputs_r+0x84>
 8011de2:	898a      	ldrh	r2, [r1, #12]
 8011de4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011de8:	d032      	beq.n	8011e50 <__ssputs_r+0x80>
 8011dea:	6825      	ldr	r5, [r4, #0]
 8011dec:	6909      	ldr	r1, [r1, #16]
 8011dee:	eba5 0901 	sub.w	r9, r5, r1
 8011df2:	6965      	ldr	r5, [r4, #20]
 8011df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011df8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	444b      	add	r3, r9
 8011e00:	106d      	asrs	r5, r5, #1
 8011e02:	429d      	cmp	r5, r3
 8011e04:	bf38      	it	cc
 8011e06:	461d      	movcc	r5, r3
 8011e08:	0553      	lsls	r3, r2, #21
 8011e0a:	d531      	bpl.n	8011e70 <__ssputs_r+0xa0>
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	f7ff ff6b 	bl	8011ce8 <_malloc_r>
 8011e12:	4606      	mov	r6, r0
 8011e14:	b950      	cbnz	r0, 8011e2c <__ssputs_r+0x5c>
 8011e16:	230c      	movs	r3, #12
 8011e18:	f8ca 3000 	str.w	r3, [sl]
 8011e1c:	89a3      	ldrh	r3, [r4, #12]
 8011e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e22:	81a3      	strh	r3, [r4, #12]
 8011e24:	f04f 30ff 	mov.w	r0, #4294967295
 8011e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e2c:	6921      	ldr	r1, [r4, #16]
 8011e2e:	464a      	mov	r2, r9
 8011e30:	f7fc fccc 	bl	800e7cc <memcpy>
 8011e34:	89a3      	ldrh	r3, [r4, #12]
 8011e36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e3e:	81a3      	strh	r3, [r4, #12]
 8011e40:	6126      	str	r6, [r4, #16]
 8011e42:	6165      	str	r5, [r4, #20]
 8011e44:	444e      	add	r6, r9
 8011e46:	eba5 0509 	sub.w	r5, r5, r9
 8011e4a:	6026      	str	r6, [r4, #0]
 8011e4c:	60a5      	str	r5, [r4, #8]
 8011e4e:	463e      	mov	r6, r7
 8011e50:	42be      	cmp	r6, r7
 8011e52:	d900      	bls.n	8011e56 <__ssputs_r+0x86>
 8011e54:	463e      	mov	r6, r7
 8011e56:	6820      	ldr	r0, [r4, #0]
 8011e58:	4632      	mov	r2, r6
 8011e5a:	4641      	mov	r1, r8
 8011e5c:	f7fc fcc4 	bl	800e7e8 <memmove>
 8011e60:	68a3      	ldr	r3, [r4, #8]
 8011e62:	1b9b      	subs	r3, r3, r6
 8011e64:	60a3      	str	r3, [r4, #8]
 8011e66:	6823      	ldr	r3, [r4, #0]
 8011e68:	4433      	add	r3, r6
 8011e6a:	6023      	str	r3, [r4, #0]
 8011e6c:	2000      	movs	r0, #0
 8011e6e:	e7db      	b.n	8011e28 <__ssputs_r+0x58>
 8011e70:	462a      	mov	r2, r5
 8011e72:	f000 f985 	bl	8012180 <_realloc_r>
 8011e76:	4606      	mov	r6, r0
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	d1e1      	bne.n	8011e40 <__ssputs_r+0x70>
 8011e7c:	6921      	ldr	r1, [r4, #16]
 8011e7e:	4650      	mov	r0, sl
 8011e80:	f7ff fec6 	bl	8011c10 <_free_r>
 8011e84:	e7c7      	b.n	8011e16 <__ssputs_r+0x46>
	...

08011e88 <_svfiprintf_r>:
 8011e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8c:	4698      	mov	r8, r3
 8011e8e:	898b      	ldrh	r3, [r1, #12]
 8011e90:	061b      	lsls	r3, r3, #24
 8011e92:	b09d      	sub	sp, #116	; 0x74
 8011e94:	4607      	mov	r7, r0
 8011e96:	460d      	mov	r5, r1
 8011e98:	4614      	mov	r4, r2
 8011e9a:	d50e      	bpl.n	8011eba <_svfiprintf_r+0x32>
 8011e9c:	690b      	ldr	r3, [r1, #16]
 8011e9e:	b963      	cbnz	r3, 8011eba <_svfiprintf_r+0x32>
 8011ea0:	2140      	movs	r1, #64	; 0x40
 8011ea2:	f7ff ff21 	bl	8011ce8 <_malloc_r>
 8011ea6:	6028      	str	r0, [r5, #0]
 8011ea8:	6128      	str	r0, [r5, #16]
 8011eaa:	b920      	cbnz	r0, 8011eb6 <_svfiprintf_r+0x2e>
 8011eac:	230c      	movs	r3, #12
 8011eae:	603b      	str	r3, [r7, #0]
 8011eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8011eb4:	e0d1      	b.n	801205a <_svfiprintf_r+0x1d2>
 8011eb6:	2340      	movs	r3, #64	; 0x40
 8011eb8:	616b      	str	r3, [r5, #20]
 8011eba:	2300      	movs	r3, #0
 8011ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8011ebe:	2320      	movs	r3, #32
 8011ec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ec8:	2330      	movs	r3, #48	; 0x30
 8011eca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012074 <_svfiprintf_r+0x1ec>
 8011ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ed2:	f04f 0901 	mov.w	r9, #1
 8011ed6:	4623      	mov	r3, r4
 8011ed8:	469a      	mov	sl, r3
 8011eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ede:	b10a      	cbz	r2, 8011ee4 <_svfiprintf_r+0x5c>
 8011ee0:	2a25      	cmp	r2, #37	; 0x25
 8011ee2:	d1f9      	bne.n	8011ed8 <_svfiprintf_r+0x50>
 8011ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8011ee8:	d00b      	beq.n	8011f02 <_svfiprintf_r+0x7a>
 8011eea:	465b      	mov	r3, fp
 8011eec:	4622      	mov	r2, r4
 8011eee:	4629      	mov	r1, r5
 8011ef0:	4638      	mov	r0, r7
 8011ef2:	f7ff ff6d 	bl	8011dd0 <__ssputs_r>
 8011ef6:	3001      	adds	r0, #1
 8011ef8:	f000 80aa 	beq.w	8012050 <_svfiprintf_r+0x1c8>
 8011efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011efe:	445a      	add	r2, fp
 8011f00:	9209      	str	r2, [sp, #36]	; 0x24
 8011f02:	f89a 3000 	ldrb.w	r3, [sl]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f000 80a2 	beq.w	8012050 <_svfiprintf_r+0x1c8>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f16:	f10a 0a01 	add.w	sl, sl, #1
 8011f1a:	9304      	str	r3, [sp, #16]
 8011f1c:	9307      	str	r3, [sp, #28]
 8011f1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f22:	931a      	str	r3, [sp, #104]	; 0x68
 8011f24:	4654      	mov	r4, sl
 8011f26:	2205      	movs	r2, #5
 8011f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f2c:	4851      	ldr	r0, [pc, #324]	; (8012074 <_svfiprintf_r+0x1ec>)
 8011f2e:	f7ee f957 	bl	80001e0 <memchr>
 8011f32:	9a04      	ldr	r2, [sp, #16]
 8011f34:	b9d8      	cbnz	r0, 8011f6e <_svfiprintf_r+0xe6>
 8011f36:	06d0      	lsls	r0, r2, #27
 8011f38:	bf44      	itt	mi
 8011f3a:	2320      	movmi	r3, #32
 8011f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f40:	0711      	lsls	r1, r2, #28
 8011f42:	bf44      	itt	mi
 8011f44:	232b      	movmi	r3, #43	; 0x2b
 8011f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8011f50:	d015      	beq.n	8011f7e <_svfiprintf_r+0xf6>
 8011f52:	9a07      	ldr	r2, [sp, #28]
 8011f54:	4654      	mov	r4, sl
 8011f56:	2000      	movs	r0, #0
 8011f58:	f04f 0c0a 	mov.w	ip, #10
 8011f5c:	4621      	mov	r1, r4
 8011f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f62:	3b30      	subs	r3, #48	; 0x30
 8011f64:	2b09      	cmp	r3, #9
 8011f66:	d94e      	bls.n	8012006 <_svfiprintf_r+0x17e>
 8011f68:	b1b0      	cbz	r0, 8011f98 <_svfiprintf_r+0x110>
 8011f6a:	9207      	str	r2, [sp, #28]
 8011f6c:	e014      	b.n	8011f98 <_svfiprintf_r+0x110>
 8011f6e:	eba0 0308 	sub.w	r3, r0, r8
 8011f72:	fa09 f303 	lsl.w	r3, r9, r3
 8011f76:	4313      	orrs	r3, r2
 8011f78:	9304      	str	r3, [sp, #16]
 8011f7a:	46a2      	mov	sl, r4
 8011f7c:	e7d2      	b.n	8011f24 <_svfiprintf_r+0x9c>
 8011f7e:	9b03      	ldr	r3, [sp, #12]
 8011f80:	1d19      	adds	r1, r3, #4
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	9103      	str	r1, [sp, #12]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	bfbb      	ittet	lt
 8011f8a:	425b      	neglt	r3, r3
 8011f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8011f90:	9307      	strge	r3, [sp, #28]
 8011f92:	9307      	strlt	r3, [sp, #28]
 8011f94:	bfb8      	it	lt
 8011f96:	9204      	strlt	r2, [sp, #16]
 8011f98:	7823      	ldrb	r3, [r4, #0]
 8011f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8011f9c:	d10c      	bne.n	8011fb8 <_svfiprintf_r+0x130>
 8011f9e:	7863      	ldrb	r3, [r4, #1]
 8011fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8011fa2:	d135      	bne.n	8012010 <_svfiprintf_r+0x188>
 8011fa4:	9b03      	ldr	r3, [sp, #12]
 8011fa6:	1d1a      	adds	r2, r3, #4
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	9203      	str	r2, [sp, #12]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	bfb8      	it	lt
 8011fb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fb4:	3402      	adds	r4, #2
 8011fb6:	9305      	str	r3, [sp, #20]
 8011fb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012084 <_svfiprintf_r+0x1fc>
 8011fbc:	7821      	ldrb	r1, [r4, #0]
 8011fbe:	2203      	movs	r2, #3
 8011fc0:	4650      	mov	r0, sl
 8011fc2:	f7ee f90d 	bl	80001e0 <memchr>
 8011fc6:	b140      	cbz	r0, 8011fda <_svfiprintf_r+0x152>
 8011fc8:	2340      	movs	r3, #64	; 0x40
 8011fca:	eba0 000a 	sub.w	r0, r0, sl
 8011fce:	fa03 f000 	lsl.w	r0, r3, r0
 8011fd2:	9b04      	ldr	r3, [sp, #16]
 8011fd4:	4303      	orrs	r3, r0
 8011fd6:	3401      	adds	r4, #1
 8011fd8:	9304      	str	r3, [sp, #16]
 8011fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fde:	4826      	ldr	r0, [pc, #152]	; (8012078 <_svfiprintf_r+0x1f0>)
 8011fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fe4:	2206      	movs	r2, #6
 8011fe6:	f7ee f8fb 	bl	80001e0 <memchr>
 8011fea:	2800      	cmp	r0, #0
 8011fec:	d038      	beq.n	8012060 <_svfiprintf_r+0x1d8>
 8011fee:	4b23      	ldr	r3, [pc, #140]	; (801207c <_svfiprintf_r+0x1f4>)
 8011ff0:	bb1b      	cbnz	r3, 801203a <_svfiprintf_r+0x1b2>
 8011ff2:	9b03      	ldr	r3, [sp, #12]
 8011ff4:	3307      	adds	r3, #7
 8011ff6:	f023 0307 	bic.w	r3, r3, #7
 8011ffa:	3308      	adds	r3, #8
 8011ffc:	9303      	str	r3, [sp, #12]
 8011ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012000:	4433      	add	r3, r6
 8012002:	9309      	str	r3, [sp, #36]	; 0x24
 8012004:	e767      	b.n	8011ed6 <_svfiprintf_r+0x4e>
 8012006:	fb0c 3202 	mla	r2, ip, r2, r3
 801200a:	460c      	mov	r4, r1
 801200c:	2001      	movs	r0, #1
 801200e:	e7a5      	b.n	8011f5c <_svfiprintf_r+0xd4>
 8012010:	2300      	movs	r3, #0
 8012012:	3401      	adds	r4, #1
 8012014:	9305      	str	r3, [sp, #20]
 8012016:	4619      	mov	r1, r3
 8012018:	f04f 0c0a 	mov.w	ip, #10
 801201c:	4620      	mov	r0, r4
 801201e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012022:	3a30      	subs	r2, #48	; 0x30
 8012024:	2a09      	cmp	r2, #9
 8012026:	d903      	bls.n	8012030 <_svfiprintf_r+0x1a8>
 8012028:	2b00      	cmp	r3, #0
 801202a:	d0c5      	beq.n	8011fb8 <_svfiprintf_r+0x130>
 801202c:	9105      	str	r1, [sp, #20]
 801202e:	e7c3      	b.n	8011fb8 <_svfiprintf_r+0x130>
 8012030:	fb0c 2101 	mla	r1, ip, r1, r2
 8012034:	4604      	mov	r4, r0
 8012036:	2301      	movs	r3, #1
 8012038:	e7f0      	b.n	801201c <_svfiprintf_r+0x194>
 801203a:	ab03      	add	r3, sp, #12
 801203c:	9300      	str	r3, [sp, #0]
 801203e:	462a      	mov	r2, r5
 8012040:	4b0f      	ldr	r3, [pc, #60]	; (8012080 <_svfiprintf_r+0x1f8>)
 8012042:	a904      	add	r1, sp, #16
 8012044:	4638      	mov	r0, r7
 8012046:	f7fc fc91 	bl	800e96c <_printf_float>
 801204a:	1c42      	adds	r2, r0, #1
 801204c:	4606      	mov	r6, r0
 801204e:	d1d6      	bne.n	8011ffe <_svfiprintf_r+0x176>
 8012050:	89ab      	ldrh	r3, [r5, #12]
 8012052:	065b      	lsls	r3, r3, #25
 8012054:	f53f af2c 	bmi.w	8011eb0 <_svfiprintf_r+0x28>
 8012058:	9809      	ldr	r0, [sp, #36]	; 0x24
 801205a:	b01d      	add	sp, #116	; 0x74
 801205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012060:	ab03      	add	r3, sp, #12
 8012062:	9300      	str	r3, [sp, #0]
 8012064:	462a      	mov	r2, r5
 8012066:	4b06      	ldr	r3, [pc, #24]	; (8012080 <_svfiprintf_r+0x1f8>)
 8012068:	a904      	add	r1, sp, #16
 801206a:	4638      	mov	r0, r7
 801206c:	f7fc ff22 	bl	800eeb4 <_printf_i>
 8012070:	e7eb      	b.n	801204a <_svfiprintf_r+0x1c2>
 8012072:	bf00      	nop
 8012074:	08014f64 	.word	0x08014f64
 8012078:	08014f6e 	.word	0x08014f6e
 801207c:	0800e96d 	.word	0x0800e96d
 8012080:	08011dd1 	.word	0x08011dd1
 8012084:	08014f6a 	.word	0x08014f6a

08012088 <nan>:
 8012088:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012090 <nan+0x8>
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	00000000 	.word	0x00000000
 8012094:	7ff80000 	.word	0x7ff80000

08012098 <_sbrk_r>:
 8012098:	b538      	push	{r3, r4, r5, lr}
 801209a:	4d06      	ldr	r5, [pc, #24]	; (80120b4 <_sbrk_r+0x1c>)
 801209c:	2300      	movs	r3, #0
 801209e:	4604      	mov	r4, r0
 80120a0:	4608      	mov	r0, r1
 80120a2:	602b      	str	r3, [r5, #0]
 80120a4:	f7f6 fc64 	bl	8008970 <_sbrk>
 80120a8:	1c43      	adds	r3, r0, #1
 80120aa:	d102      	bne.n	80120b2 <_sbrk_r+0x1a>
 80120ac:	682b      	ldr	r3, [r5, #0]
 80120ae:	b103      	cbz	r3, 80120b2 <_sbrk_r+0x1a>
 80120b0:	6023      	str	r3, [r4, #0]
 80120b2:	bd38      	pop	{r3, r4, r5, pc}
 80120b4:	2000394c 	.word	0x2000394c

080120b8 <nanf>:
 80120b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80120c0 <nanf+0x8>
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop
 80120c0:	7fc00000 	.word	0x7fc00000

080120c4 <strncmp>:
 80120c4:	b510      	push	{r4, lr}
 80120c6:	b17a      	cbz	r2, 80120e8 <strncmp+0x24>
 80120c8:	4603      	mov	r3, r0
 80120ca:	3901      	subs	r1, #1
 80120cc:	1884      	adds	r4, r0, r2
 80120ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80120d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80120d6:	4290      	cmp	r0, r2
 80120d8:	d101      	bne.n	80120de <strncmp+0x1a>
 80120da:	42a3      	cmp	r3, r4
 80120dc:	d101      	bne.n	80120e2 <strncmp+0x1e>
 80120de:	1a80      	subs	r0, r0, r2
 80120e0:	bd10      	pop	{r4, pc}
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d1f3      	bne.n	80120ce <strncmp+0xa>
 80120e6:	e7fa      	b.n	80120de <strncmp+0x1a>
 80120e8:	4610      	mov	r0, r2
 80120ea:	e7f9      	b.n	80120e0 <strncmp+0x1c>

080120ec <__ascii_wctomb>:
 80120ec:	b149      	cbz	r1, 8012102 <__ascii_wctomb+0x16>
 80120ee:	2aff      	cmp	r2, #255	; 0xff
 80120f0:	bf85      	ittet	hi
 80120f2:	238a      	movhi	r3, #138	; 0x8a
 80120f4:	6003      	strhi	r3, [r0, #0]
 80120f6:	700a      	strbls	r2, [r1, #0]
 80120f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80120fc:	bf98      	it	ls
 80120fe:	2001      	movls	r0, #1
 8012100:	4770      	bx	lr
 8012102:	4608      	mov	r0, r1
 8012104:	4770      	bx	lr
	...

08012108 <__assert_func>:
 8012108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801210a:	4614      	mov	r4, r2
 801210c:	461a      	mov	r2, r3
 801210e:	4b09      	ldr	r3, [pc, #36]	; (8012134 <__assert_func+0x2c>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	4605      	mov	r5, r0
 8012114:	68d8      	ldr	r0, [r3, #12]
 8012116:	b14c      	cbz	r4, 801212c <__assert_func+0x24>
 8012118:	4b07      	ldr	r3, [pc, #28]	; (8012138 <__assert_func+0x30>)
 801211a:	9100      	str	r1, [sp, #0]
 801211c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012120:	4906      	ldr	r1, [pc, #24]	; (801213c <__assert_func+0x34>)
 8012122:	462b      	mov	r3, r5
 8012124:	f000 f80e 	bl	8012144 <fiprintf>
 8012128:	f000 fa72 	bl	8012610 <abort>
 801212c:	4b04      	ldr	r3, [pc, #16]	; (8012140 <__assert_func+0x38>)
 801212e:	461c      	mov	r4, r3
 8012130:	e7f3      	b.n	801211a <__assert_func+0x12>
 8012132:	bf00      	nop
 8012134:	20000184 	.word	0x20000184
 8012138:	08014f75 	.word	0x08014f75
 801213c:	08014f82 	.word	0x08014f82
 8012140:	08014fb0 	.word	0x08014fb0

08012144 <fiprintf>:
 8012144:	b40e      	push	{r1, r2, r3}
 8012146:	b503      	push	{r0, r1, lr}
 8012148:	4601      	mov	r1, r0
 801214a:	ab03      	add	r3, sp, #12
 801214c:	4805      	ldr	r0, [pc, #20]	; (8012164 <fiprintf+0x20>)
 801214e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012152:	6800      	ldr	r0, [r0, #0]
 8012154:	9301      	str	r3, [sp, #4]
 8012156:	f000 f86b 	bl	8012230 <_vfiprintf_r>
 801215a:	b002      	add	sp, #8
 801215c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012160:	b003      	add	sp, #12
 8012162:	4770      	bx	lr
 8012164:	20000184 	.word	0x20000184

08012168 <__malloc_lock>:
 8012168:	4801      	ldr	r0, [pc, #4]	; (8012170 <__malloc_lock+0x8>)
 801216a:	f000 bc11 	b.w	8012990 <__retarget_lock_acquire_recursive>
 801216e:	bf00      	nop
 8012170:	20003950 	.word	0x20003950

08012174 <__malloc_unlock>:
 8012174:	4801      	ldr	r0, [pc, #4]	; (801217c <__malloc_unlock+0x8>)
 8012176:	f000 bc0c 	b.w	8012992 <__retarget_lock_release_recursive>
 801217a:	bf00      	nop
 801217c:	20003950 	.word	0x20003950

08012180 <_realloc_r>:
 8012180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012184:	4680      	mov	r8, r0
 8012186:	4614      	mov	r4, r2
 8012188:	460e      	mov	r6, r1
 801218a:	b921      	cbnz	r1, 8012196 <_realloc_r+0x16>
 801218c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012190:	4611      	mov	r1, r2
 8012192:	f7ff bda9 	b.w	8011ce8 <_malloc_r>
 8012196:	b92a      	cbnz	r2, 80121a4 <_realloc_r+0x24>
 8012198:	f7ff fd3a 	bl	8011c10 <_free_r>
 801219c:	4625      	mov	r5, r4
 801219e:	4628      	mov	r0, r5
 80121a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a4:	f000 fc5c 	bl	8012a60 <_malloc_usable_size_r>
 80121a8:	4284      	cmp	r4, r0
 80121aa:	4607      	mov	r7, r0
 80121ac:	d802      	bhi.n	80121b4 <_realloc_r+0x34>
 80121ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80121b2:	d812      	bhi.n	80121da <_realloc_r+0x5a>
 80121b4:	4621      	mov	r1, r4
 80121b6:	4640      	mov	r0, r8
 80121b8:	f7ff fd96 	bl	8011ce8 <_malloc_r>
 80121bc:	4605      	mov	r5, r0
 80121be:	2800      	cmp	r0, #0
 80121c0:	d0ed      	beq.n	801219e <_realloc_r+0x1e>
 80121c2:	42bc      	cmp	r4, r7
 80121c4:	4622      	mov	r2, r4
 80121c6:	4631      	mov	r1, r6
 80121c8:	bf28      	it	cs
 80121ca:	463a      	movcs	r2, r7
 80121cc:	f7fc fafe 	bl	800e7cc <memcpy>
 80121d0:	4631      	mov	r1, r6
 80121d2:	4640      	mov	r0, r8
 80121d4:	f7ff fd1c 	bl	8011c10 <_free_r>
 80121d8:	e7e1      	b.n	801219e <_realloc_r+0x1e>
 80121da:	4635      	mov	r5, r6
 80121dc:	e7df      	b.n	801219e <_realloc_r+0x1e>

080121de <__sfputc_r>:
 80121de:	6893      	ldr	r3, [r2, #8]
 80121e0:	3b01      	subs	r3, #1
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	b410      	push	{r4}
 80121e6:	6093      	str	r3, [r2, #8]
 80121e8:	da08      	bge.n	80121fc <__sfputc_r+0x1e>
 80121ea:	6994      	ldr	r4, [r2, #24]
 80121ec:	42a3      	cmp	r3, r4
 80121ee:	db01      	blt.n	80121f4 <__sfputc_r+0x16>
 80121f0:	290a      	cmp	r1, #10
 80121f2:	d103      	bne.n	80121fc <__sfputc_r+0x1e>
 80121f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121f8:	f000 b94a 	b.w	8012490 <__swbuf_r>
 80121fc:	6813      	ldr	r3, [r2, #0]
 80121fe:	1c58      	adds	r0, r3, #1
 8012200:	6010      	str	r0, [r2, #0]
 8012202:	7019      	strb	r1, [r3, #0]
 8012204:	4608      	mov	r0, r1
 8012206:	f85d 4b04 	ldr.w	r4, [sp], #4
 801220a:	4770      	bx	lr

0801220c <__sfputs_r>:
 801220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801220e:	4606      	mov	r6, r0
 8012210:	460f      	mov	r7, r1
 8012212:	4614      	mov	r4, r2
 8012214:	18d5      	adds	r5, r2, r3
 8012216:	42ac      	cmp	r4, r5
 8012218:	d101      	bne.n	801221e <__sfputs_r+0x12>
 801221a:	2000      	movs	r0, #0
 801221c:	e007      	b.n	801222e <__sfputs_r+0x22>
 801221e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012222:	463a      	mov	r2, r7
 8012224:	4630      	mov	r0, r6
 8012226:	f7ff ffda 	bl	80121de <__sfputc_r>
 801222a:	1c43      	adds	r3, r0, #1
 801222c:	d1f3      	bne.n	8012216 <__sfputs_r+0xa>
 801222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012230 <_vfiprintf_r>:
 8012230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012234:	460d      	mov	r5, r1
 8012236:	b09d      	sub	sp, #116	; 0x74
 8012238:	4614      	mov	r4, r2
 801223a:	4698      	mov	r8, r3
 801223c:	4606      	mov	r6, r0
 801223e:	b118      	cbz	r0, 8012248 <_vfiprintf_r+0x18>
 8012240:	6983      	ldr	r3, [r0, #24]
 8012242:	b90b      	cbnz	r3, 8012248 <_vfiprintf_r+0x18>
 8012244:	f000 fb06 	bl	8012854 <__sinit>
 8012248:	4b89      	ldr	r3, [pc, #548]	; (8012470 <_vfiprintf_r+0x240>)
 801224a:	429d      	cmp	r5, r3
 801224c:	d11b      	bne.n	8012286 <_vfiprintf_r+0x56>
 801224e:	6875      	ldr	r5, [r6, #4]
 8012250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012252:	07d9      	lsls	r1, r3, #31
 8012254:	d405      	bmi.n	8012262 <_vfiprintf_r+0x32>
 8012256:	89ab      	ldrh	r3, [r5, #12]
 8012258:	059a      	lsls	r2, r3, #22
 801225a:	d402      	bmi.n	8012262 <_vfiprintf_r+0x32>
 801225c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801225e:	f000 fb97 	bl	8012990 <__retarget_lock_acquire_recursive>
 8012262:	89ab      	ldrh	r3, [r5, #12]
 8012264:	071b      	lsls	r3, r3, #28
 8012266:	d501      	bpl.n	801226c <_vfiprintf_r+0x3c>
 8012268:	692b      	ldr	r3, [r5, #16]
 801226a:	b9eb      	cbnz	r3, 80122a8 <_vfiprintf_r+0x78>
 801226c:	4629      	mov	r1, r5
 801226e:	4630      	mov	r0, r6
 8012270:	f000 f960 	bl	8012534 <__swsetup_r>
 8012274:	b1c0      	cbz	r0, 80122a8 <_vfiprintf_r+0x78>
 8012276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012278:	07dc      	lsls	r4, r3, #31
 801227a:	d50e      	bpl.n	801229a <_vfiprintf_r+0x6a>
 801227c:	f04f 30ff 	mov.w	r0, #4294967295
 8012280:	b01d      	add	sp, #116	; 0x74
 8012282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012286:	4b7b      	ldr	r3, [pc, #492]	; (8012474 <_vfiprintf_r+0x244>)
 8012288:	429d      	cmp	r5, r3
 801228a:	d101      	bne.n	8012290 <_vfiprintf_r+0x60>
 801228c:	68b5      	ldr	r5, [r6, #8]
 801228e:	e7df      	b.n	8012250 <_vfiprintf_r+0x20>
 8012290:	4b79      	ldr	r3, [pc, #484]	; (8012478 <_vfiprintf_r+0x248>)
 8012292:	429d      	cmp	r5, r3
 8012294:	bf08      	it	eq
 8012296:	68f5      	ldreq	r5, [r6, #12]
 8012298:	e7da      	b.n	8012250 <_vfiprintf_r+0x20>
 801229a:	89ab      	ldrh	r3, [r5, #12]
 801229c:	0598      	lsls	r0, r3, #22
 801229e:	d4ed      	bmi.n	801227c <_vfiprintf_r+0x4c>
 80122a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122a2:	f000 fb76 	bl	8012992 <__retarget_lock_release_recursive>
 80122a6:	e7e9      	b.n	801227c <_vfiprintf_r+0x4c>
 80122a8:	2300      	movs	r3, #0
 80122aa:	9309      	str	r3, [sp, #36]	; 0x24
 80122ac:	2320      	movs	r3, #32
 80122ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80122b6:	2330      	movs	r3, #48	; 0x30
 80122b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801247c <_vfiprintf_r+0x24c>
 80122bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122c0:	f04f 0901 	mov.w	r9, #1
 80122c4:	4623      	mov	r3, r4
 80122c6:	469a      	mov	sl, r3
 80122c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122cc:	b10a      	cbz	r2, 80122d2 <_vfiprintf_r+0xa2>
 80122ce:	2a25      	cmp	r2, #37	; 0x25
 80122d0:	d1f9      	bne.n	80122c6 <_vfiprintf_r+0x96>
 80122d2:	ebba 0b04 	subs.w	fp, sl, r4
 80122d6:	d00b      	beq.n	80122f0 <_vfiprintf_r+0xc0>
 80122d8:	465b      	mov	r3, fp
 80122da:	4622      	mov	r2, r4
 80122dc:	4629      	mov	r1, r5
 80122de:	4630      	mov	r0, r6
 80122e0:	f7ff ff94 	bl	801220c <__sfputs_r>
 80122e4:	3001      	adds	r0, #1
 80122e6:	f000 80aa 	beq.w	801243e <_vfiprintf_r+0x20e>
 80122ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122ec:	445a      	add	r2, fp
 80122ee:	9209      	str	r2, [sp, #36]	; 0x24
 80122f0:	f89a 3000 	ldrb.w	r3, [sl]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	f000 80a2 	beq.w	801243e <_vfiprintf_r+0x20e>
 80122fa:	2300      	movs	r3, #0
 80122fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012304:	f10a 0a01 	add.w	sl, sl, #1
 8012308:	9304      	str	r3, [sp, #16]
 801230a:	9307      	str	r3, [sp, #28]
 801230c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012310:	931a      	str	r3, [sp, #104]	; 0x68
 8012312:	4654      	mov	r4, sl
 8012314:	2205      	movs	r2, #5
 8012316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801231a:	4858      	ldr	r0, [pc, #352]	; (801247c <_vfiprintf_r+0x24c>)
 801231c:	f7ed ff60 	bl	80001e0 <memchr>
 8012320:	9a04      	ldr	r2, [sp, #16]
 8012322:	b9d8      	cbnz	r0, 801235c <_vfiprintf_r+0x12c>
 8012324:	06d1      	lsls	r1, r2, #27
 8012326:	bf44      	itt	mi
 8012328:	2320      	movmi	r3, #32
 801232a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801232e:	0713      	lsls	r3, r2, #28
 8012330:	bf44      	itt	mi
 8012332:	232b      	movmi	r3, #43	; 0x2b
 8012334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012338:	f89a 3000 	ldrb.w	r3, [sl]
 801233c:	2b2a      	cmp	r3, #42	; 0x2a
 801233e:	d015      	beq.n	801236c <_vfiprintf_r+0x13c>
 8012340:	9a07      	ldr	r2, [sp, #28]
 8012342:	4654      	mov	r4, sl
 8012344:	2000      	movs	r0, #0
 8012346:	f04f 0c0a 	mov.w	ip, #10
 801234a:	4621      	mov	r1, r4
 801234c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012350:	3b30      	subs	r3, #48	; 0x30
 8012352:	2b09      	cmp	r3, #9
 8012354:	d94e      	bls.n	80123f4 <_vfiprintf_r+0x1c4>
 8012356:	b1b0      	cbz	r0, 8012386 <_vfiprintf_r+0x156>
 8012358:	9207      	str	r2, [sp, #28]
 801235a:	e014      	b.n	8012386 <_vfiprintf_r+0x156>
 801235c:	eba0 0308 	sub.w	r3, r0, r8
 8012360:	fa09 f303 	lsl.w	r3, r9, r3
 8012364:	4313      	orrs	r3, r2
 8012366:	9304      	str	r3, [sp, #16]
 8012368:	46a2      	mov	sl, r4
 801236a:	e7d2      	b.n	8012312 <_vfiprintf_r+0xe2>
 801236c:	9b03      	ldr	r3, [sp, #12]
 801236e:	1d19      	adds	r1, r3, #4
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	9103      	str	r1, [sp, #12]
 8012374:	2b00      	cmp	r3, #0
 8012376:	bfbb      	ittet	lt
 8012378:	425b      	neglt	r3, r3
 801237a:	f042 0202 	orrlt.w	r2, r2, #2
 801237e:	9307      	strge	r3, [sp, #28]
 8012380:	9307      	strlt	r3, [sp, #28]
 8012382:	bfb8      	it	lt
 8012384:	9204      	strlt	r2, [sp, #16]
 8012386:	7823      	ldrb	r3, [r4, #0]
 8012388:	2b2e      	cmp	r3, #46	; 0x2e
 801238a:	d10c      	bne.n	80123a6 <_vfiprintf_r+0x176>
 801238c:	7863      	ldrb	r3, [r4, #1]
 801238e:	2b2a      	cmp	r3, #42	; 0x2a
 8012390:	d135      	bne.n	80123fe <_vfiprintf_r+0x1ce>
 8012392:	9b03      	ldr	r3, [sp, #12]
 8012394:	1d1a      	adds	r2, r3, #4
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	9203      	str	r2, [sp, #12]
 801239a:	2b00      	cmp	r3, #0
 801239c:	bfb8      	it	lt
 801239e:	f04f 33ff 	movlt.w	r3, #4294967295
 80123a2:	3402      	adds	r4, #2
 80123a4:	9305      	str	r3, [sp, #20]
 80123a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801248c <_vfiprintf_r+0x25c>
 80123aa:	7821      	ldrb	r1, [r4, #0]
 80123ac:	2203      	movs	r2, #3
 80123ae:	4650      	mov	r0, sl
 80123b0:	f7ed ff16 	bl	80001e0 <memchr>
 80123b4:	b140      	cbz	r0, 80123c8 <_vfiprintf_r+0x198>
 80123b6:	2340      	movs	r3, #64	; 0x40
 80123b8:	eba0 000a 	sub.w	r0, r0, sl
 80123bc:	fa03 f000 	lsl.w	r0, r3, r0
 80123c0:	9b04      	ldr	r3, [sp, #16]
 80123c2:	4303      	orrs	r3, r0
 80123c4:	3401      	adds	r4, #1
 80123c6:	9304      	str	r3, [sp, #16]
 80123c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123cc:	482c      	ldr	r0, [pc, #176]	; (8012480 <_vfiprintf_r+0x250>)
 80123ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123d2:	2206      	movs	r2, #6
 80123d4:	f7ed ff04 	bl	80001e0 <memchr>
 80123d8:	2800      	cmp	r0, #0
 80123da:	d03f      	beq.n	801245c <_vfiprintf_r+0x22c>
 80123dc:	4b29      	ldr	r3, [pc, #164]	; (8012484 <_vfiprintf_r+0x254>)
 80123de:	bb1b      	cbnz	r3, 8012428 <_vfiprintf_r+0x1f8>
 80123e0:	9b03      	ldr	r3, [sp, #12]
 80123e2:	3307      	adds	r3, #7
 80123e4:	f023 0307 	bic.w	r3, r3, #7
 80123e8:	3308      	adds	r3, #8
 80123ea:	9303      	str	r3, [sp, #12]
 80123ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ee:	443b      	add	r3, r7
 80123f0:	9309      	str	r3, [sp, #36]	; 0x24
 80123f2:	e767      	b.n	80122c4 <_vfiprintf_r+0x94>
 80123f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80123f8:	460c      	mov	r4, r1
 80123fa:	2001      	movs	r0, #1
 80123fc:	e7a5      	b.n	801234a <_vfiprintf_r+0x11a>
 80123fe:	2300      	movs	r3, #0
 8012400:	3401      	adds	r4, #1
 8012402:	9305      	str	r3, [sp, #20]
 8012404:	4619      	mov	r1, r3
 8012406:	f04f 0c0a 	mov.w	ip, #10
 801240a:	4620      	mov	r0, r4
 801240c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012410:	3a30      	subs	r2, #48	; 0x30
 8012412:	2a09      	cmp	r2, #9
 8012414:	d903      	bls.n	801241e <_vfiprintf_r+0x1ee>
 8012416:	2b00      	cmp	r3, #0
 8012418:	d0c5      	beq.n	80123a6 <_vfiprintf_r+0x176>
 801241a:	9105      	str	r1, [sp, #20]
 801241c:	e7c3      	b.n	80123a6 <_vfiprintf_r+0x176>
 801241e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012422:	4604      	mov	r4, r0
 8012424:	2301      	movs	r3, #1
 8012426:	e7f0      	b.n	801240a <_vfiprintf_r+0x1da>
 8012428:	ab03      	add	r3, sp, #12
 801242a:	9300      	str	r3, [sp, #0]
 801242c:	462a      	mov	r2, r5
 801242e:	4b16      	ldr	r3, [pc, #88]	; (8012488 <_vfiprintf_r+0x258>)
 8012430:	a904      	add	r1, sp, #16
 8012432:	4630      	mov	r0, r6
 8012434:	f7fc fa9a 	bl	800e96c <_printf_float>
 8012438:	4607      	mov	r7, r0
 801243a:	1c78      	adds	r0, r7, #1
 801243c:	d1d6      	bne.n	80123ec <_vfiprintf_r+0x1bc>
 801243e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012440:	07d9      	lsls	r1, r3, #31
 8012442:	d405      	bmi.n	8012450 <_vfiprintf_r+0x220>
 8012444:	89ab      	ldrh	r3, [r5, #12]
 8012446:	059a      	lsls	r2, r3, #22
 8012448:	d402      	bmi.n	8012450 <_vfiprintf_r+0x220>
 801244a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801244c:	f000 faa1 	bl	8012992 <__retarget_lock_release_recursive>
 8012450:	89ab      	ldrh	r3, [r5, #12]
 8012452:	065b      	lsls	r3, r3, #25
 8012454:	f53f af12 	bmi.w	801227c <_vfiprintf_r+0x4c>
 8012458:	9809      	ldr	r0, [sp, #36]	; 0x24
 801245a:	e711      	b.n	8012280 <_vfiprintf_r+0x50>
 801245c:	ab03      	add	r3, sp, #12
 801245e:	9300      	str	r3, [sp, #0]
 8012460:	462a      	mov	r2, r5
 8012462:	4b09      	ldr	r3, [pc, #36]	; (8012488 <_vfiprintf_r+0x258>)
 8012464:	a904      	add	r1, sp, #16
 8012466:	4630      	mov	r0, r6
 8012468:	f7fc fd24 	bl	800eeb4 <_printf_i>
 801246c:	e7e4      	b.n	8012438 <_vfiprintf_r+0x208>
 801246e:	bf00      	nop
 8012470:	080150d4 	.word	0x080150d4
 8012474:	080150f4 	.word	0x080150f4
 8012478:	080150b4 	.word	0x080150b4
 801247c:	08014f64 	.word	0x08014f64
 8012480:	08014f6e 	.word	0x08014f6e
 8012484:	0800e96d 	.word	0x0800e96d
 8012488:	0801220d 	.word	0x0801220d
 801248c:	08014f6a 	.word	0x08014f6a

08012490 <__swbuf_r>:
 8012490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012492:	460e      	mov	r6, r1
 8012494:	4614      	mov	r4, r2
 8012496:	4605      	mov	r5, r0
 8012498:	b118      	cbz	r0, 80124a2 <__swbuf_r+0x12>
 801249a:	6983      	ldr	r3, [r0, #24]
 801249c:	b90b      	cbnz	r3, 80124a2 <__swbuf_r+0x12>
 801249e:	f000 f9d9 	bl	8012854 <__sinit>
 80124a2:	4b21      	ldr	r3, [pc, #132]	; (8012528 <__swbuf_r+0x98>)
 80124a4:	429c      	cmp	r4, r3
 80124a6:	d12b      	bne.n	8012500 <__swbuf_r+0x70>
 80124a8:	686c      	ldr	r4, [r5, #4]
 80124aa:	69a3      	ldr	r3, [r4, #24]
 80124ac:	60a3      	str	r3, [r4, #8]
 80124ae:	89a3      	ldrh	r3, [r4, #12]
 80124b0:	071a      	lsls	r2, r3, #28
 80124b2:	d52f      	bpl.n	8012514 <__swbuf_r+0x84>
 80124b4:	6923      	ldr	r3, [r4, #16]
 80124b6:	b36b      	cbz	r3, 8012514 <__swbuf_r+0x84>
 80124b8:	6923      	ldr	r3, [r4, #16]
 80124ba:	6820      	ldr	r0, [r4, #0]
 80124bc:	1ac0      	subs	r0, r0, r3
 80124be:	6963      	ldr	r3, [r4, #20]
 80124c0:	b2f6      	uxtb	r6, r6
 80124c2:	4283      	cmp	r3, r0
 80124c4:	4637      	mov	r7, r6
 80124c6:	dc04      	bgt.n	80124d2 <__swbuf_r+0x42>
 80124c8:	4621      	mov	r1, r4
 80124ca:	4628      	mov	r0, r5
 80124cc:	f000 f92e 	bl	801272c <_fflush_r>
 80124d0:	bb30      	cbnz	r0, 8012520 <__swbuf_r+0x90>
 80124d2:	68a3      	ldr	r3, [r4, #8]
 80124d4:	3b01      	subs	r3, #1
 80124d6:	60a3      	str	r3, [r4, #8]
 80124d8:	6823      	ldr	r3, [r4, #0]
 80124da:	1c5a      	adds	r2, r3, #1
 80124dc:	6022      	str	r2, [r4, #0]
 80124de:	701e      	strb	r6, [r3, #0]
 80124e0:	6963      	ldr	r3, [r4, #20]
 80124e2:	3001      	adds	r0, #1
 80124e4:	4283      	cmp	r3, r0
 80124e6:	d004      	beq.n	80124f2 <__swbuf_r+0x62>
 80124e8:	89a3      	ldrh	r3, [r4, #12]
 80124ea:	07db      	lsls	r3, r3, #31
 80124ec:	d506      	bpl.n	80124fc <__swbuf_r+0x6c>
 80124ee:	2e0a      	cmp	r6, #10
 80124f0:	d104      	bne.n	80124fc <__swbuf_r+0x6c>
 80124f2:	4621      	mov	r1, r4
 80124f4:	4628      	mov	r0, r5
 80124f6:	f000 f919 	bl	801272c <_fflush_r>
 80124fa:	b988      	cbnz	r0, 8012520 <__swbuf_r+0x90>
 80124fc:	4638      	mov	r0, r7
 80124fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012500:	4b0a      	ldr	r3, [pc, #40]	; (801252c <__swbuf_r+0x9c>)
 8012502:	429c      	cmp	r4, r3
 8012504:	d101      	bne.n	801250a <__swbuf_r+0x7a>
 8012506:	68ac      	ldr	r4, [r5, #8]
 8012508:	e7cf      	b.n	80124aa <__swbuf_r+0x1a>
 801250a:	4b09      	ldr	r3, [pc, #36]	; (8012530 <__swbuf_r+0xa0>)
 801250c:	429c      	cmp	r4, r3
 801250e:	bf08      	it	eq
 8012510:	68ec      	ldreq	r4, [r5, #12]
 8012512:	e7ca      	b.n	80124aa <__swbuf_r+0x1a>
 8012514:	4621      	mov	r1, r4
 8012516:	4628      	mov	r0, r5
 8012518:	f000 f80c 	bl	8012534 <__swsetup_r>
 801251c:	2800      	cmp	r0, #0
 801251e:	d0cb      	beq.n	80124b8 <__swbuf_r+0x28>
 8012520:	f04f 37ff 	mov.w	r7, #4294967295
 8012524:	e7ea      	b.n	80124fc <__swbuf_r+0x6c>
 8012526:	bf00      	nop
 8012528:	080150d4 	.word	0x080150d4
 801252c:	080150f4 	.word	0x080150f4
 8012530:	080150b4 	.word	0x080150b4

08012534 <__swsetup_r>:
 8012534:	4b32      	ldr	r3, [pc, #200]	; (8012600 <__swsetup_r+0xcc>)
 8012536:	b570      	push	{r4, r5, r6, lr}
 8012538:	681d      	ldr	r5, [r3, #0]
 801253a:	4606      	mov	r6, r0
 801253c:	460c      	mov	r4, r1
 801253e:	b125      	cbz	r5, 801254a <__swsetup_r+0x16>
 8012540:	69ab      	ldr	r3, [r5, #24]
 8012542:	b913      	cbnz	r3, 801254a <__swsetup_r+0x16>
 8012544:	4628      	mov	r0, r5
 8012546:	f000 f985 	bl	8012854 <__sinit>
 801254a:	4b2e      	ldr	r3, [pc, #184]	; (8012604 <__swsetup_r+0xd0>)
 801254c:	429c      	cmp	r4, r3
 801254e:	d10f      	bne.n	8012570 <__swsetup_r+0x3c>
 8012550:	686c      	ldr	r4, [r5, #4]
 8012552:	89a3      	ldrh	r3, [r4, #12]
 8012554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012558:	0719      	lsls	r1, r3, #28
 801255a:	d42c      	bmi.n	80125b6 <__swsetup_r+0x82>
 801255c:	06dd      	lsls	r5, r3, #27
 801255e:	d411      	bmi.n	8012584 <__swsetup_r+0x50>
 8012560:	2309      	movs	r3, #9
 8012562:	6033      	str	r3, [r6, #0]
 8012564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012568:	81a3      	strh	r3, [r4, #12]
 801256a:	f04f 30ff 	mov.w	r0, #4294967295
 801256e:	e03e      	b.n	80125ee <__swsetup_r+0xba>
 8012570:	4b25      	ldr	r3, [pc, #148]	; (8012608 <__swsetup_r+0xd4>)
 8012572:	429c      	cmp	r4, r3
 8012574:	d101      	bne.n	801257a <__swsetup_r+0x46>
 8012576:	68ac      	ldr	r4, [r5, #8]
 8012578:	e7eb      	b.n	8012552 <__swsetup_r+0x1e>
 801257a:	4b24      	ldr	r3, [pc, #144]	; (801260c <__swsetup_r+0xd8>)
 801257c:	429c      	cmp	r4, r3
 801257e:	bf08      	it	eq
 8012580:	68ec      	ldreq	r4, [r5, #12]
 8012582:	e7e6      	b.n	8012552 <__swsetup_r+0x1e>
 8012584:	0758      	lsls	r0, r3, #29
 8012586:	d512      	bpl.n	80125ae <__swsetup_r+0x7a>
 8012588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801258a:	b141      	cbz	r1, 801259e <__swsetup_r+0x6a>
 801258c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012590:	4299      	cmp	r1, r3
 8012592:	d002      	beq.n	801259a <__swsetup_r+0x66>
 8012594:	4630      	mov	r0, r6
 8012596:	f7ff fb3b 	bl	8011c10 <_free_r>
 801259a:	2300      	movs	r3, #0
 801259c:	6363      	str	r3, [r4, #52]	; 0x34
 801259e:	89a3      	ldrh	r3, [r4, #12]
 80125a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80125a4:	81a3      	strh	r3, [r4, #12]
 80125a6:	2300      	movs	r3, #0
 80125a8:	6063      	str	r3, [r4, #4]
 80125aa:	6923      	ldr	r3, [r4, #16]
 80125ac:	6023      	str	r3, [r4, #0]
 80125ae:	89a3      	ldrh	r3, [r4, #12]
 80125b0:	f043 0308 	orr.w	r3, r3, #8
 80125b4:	81a3      	strh	r3, [r4, #12]
 80125b6:	6923      	ldr	r3, [r4, #16]
 80125b8:	b94b      	cbnz	r3, 80125ce <__swsetup_r+0x9a>
 80125ba:	89a3      	ldrh	r3, [r4, #12]
 80125bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80125c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125c4:	d003      	beq.n	80125ce <__swsetup_r+0x9a>
 80125c6:	4621      	mov	r1, r4
 80125c8:	4630      	mov	r0, r6
 80125ca:	f000 fa09 	bl	80129e0 <__smakebuf_r>
 80125ce:	89a0      	ldrh	r0, [r4, #12]
 80125d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80125d4:	f010 0301 	ands.w	r3, r0, #1
 80125d8:	d00a      	beq.n	80125f0 <__swsetup_r+0xbc>
 80125da:	2300      	movs	r3, #0
 80125dc:	60a3      	str	r3, [r4, #8]
 80125de:	6963      	ldr	r3, [r4, #20]
 80125e0:	425b      	negs	r3, r3
 80125e2:	61a3      	str	r3, [r4, #24]
 80125e4:	6923      	ldr	r3, [r4, #16]
 80125e6:	b943      	cbnz	r3, 80125fa <__swsetup_r+0xc6>
 80125e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80125ec:	d1ba      	bne.n	8012564 <__swsetup_r+0x30>
 80125ee:	bd70      	pop	{r4, r5, r6, pc}
 80125f0:	0781      	lsls	r1, r0, #30
 80125f2:	bf58      	it	pl
 80125f4:	6963      	ldrpl	r3, [r4, #20]
 80125f6:	60a3      	str	r3, [r4, #8]
 80125f8:	e7f4      	b.n	80125e4 <__swsetup_r+0xb0>
 80125fa:	2000      	movs	r0, #0
 80125fc:	e7f7      	b.n	80125ee <__swsetup_r+0xba>
 80125fe:	bf00      	nop
 8012600:	20000184 	.word	0x20000184
 8012604:	080150d4 	.word	0x080150d4
 8012608:	080150f4 	.word	0x080150f4
 801260c:	080150b4 	.word	0x080150b4

08012610 <abort>:
 8012610:	b508      	push	{r3, lr}
 8012612:	2006      	movs	r0, #6
 8012614:	f000 fa54 	bl	8012ac0 <raise>
 8012618:	2001      	movs	r0, #1
 801261a:	f7f6 f97b 	bl	8008914 <_exit>
	...

08012620 <__sflush_r>:
 8012620:	898a      	ldrh	r2, [r1, #12]
 8012622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012626:	4605      	mov	r5, r0
 8012628:	0710      	lsls	r0, r2, #28
 801262a:	460c      	mov	r4, r1
 801262c:	d458      	bmi.n	80126e0 <__sflush_r+0xc0>
 801262e:	684b      	ldr	r3, [r1, #4]
 8012630:	2b00      	cmp	r3, #0
 8012632:	dc05      	bgt.n	8012640 <__sflush_r+0x20>
 8012634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012636:	2b00      	cmp	r3, #0
 8012638:	dc02      	bgt.n	8012640 <__sflush_r+0x20>
 801263a:	2000      	movs	r0, #0
 801263c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012642:	2e00      	cmp	r6, #0
 8012644:	d0f9      	beq.n	801263a <__sflush_r+0x1a>
 8012646:	2300      	movs	r3, #0
 8012648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801264c:	682f      	ldr	r7, [r5, #0]
 801264e:	602b      	str	r3, [r5, #0]
 8012650:	d032      	beq.n	80126b8 <__sflush_r+0x98>
 8012652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012654:	89a3      	ldrh	r3, [r4, #12]
 8012656:	075a      	lsls	r2, r3, #29
 8012658:	d505      	bpl.n	8012666 <__sflush_r+0x46>
 801265a:	6863      	ldr	r3, [r4, #4]
 801265c:	1ac0      	subs	r0, r0, r3
 801265e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012660:	b10b      	cbz	r3, 8012666 <__sflush_r+0x46>
 8012662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012664:	1ac0      	subs	r0, r0, r3
 8012666:	2300      	movs	r3, #0
 8012668:	4602      	mov	r2, r0
 801266a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801266c:	6a21      	ldr	r1, [r4, #32]
 801266e:	4628      	mov	r0, r5
 8012670:	47b0      	blx	r6
 8012672:	1c43      	adds	r3, r0, #1
 8012674:	89a3      	ldrh	r3, [r4, #12]
 8012676:	d106      	bne.n	8012686 <__sflush_r+0x66>
 8012678:	6829      	ldr	r1, [r5, #0]
 801267a:	291d      	cmp	r1, #29
 801267c:	d82c      	bhi.n	80126d8 <__sflush_r+0xb8>
 801267e:	4a2a      	ldr	r2, [pc, #168]	; (8012728 <__sflush_r+0x108>)
 8012680:	40ca      	lsrs	r2, r1
 8012682:	07d6      	lsls	r6, r2, #31
 8012684:	d528      	bpl.n	80126d8 <__sflush_r+0xb8>
 8012686:	2200      	movs	r2, #0
 8012688:	6062      	str	r2, [r4, #4]
 801268a:	04d9      	lsls	r1, r3, #19
 801268c:	6922      	ldr	r2, [r4, #16]
 801268e:	6022      	str	r2, [r4, #0]
 8012690:	d504      	bpl.n	801269c <__sflush_r+0x7c>
 8012692:	1c42      	adds	r2, r0, #1
 8012694:	d101      	bne.n	801269a <__sflush_r+0x7a>
 8012696:	682b      	ldr	r3, [r5, #0]
 8012698:	b903      	cbnz	r3, 801269c <__sflush_r+0x7c>
 801269a:	6560      	str	r0, [r4, #84]	; 0x54
 801269c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801269e:	602f      	str	r7, [r5, #0]
 80126a0:	2900      	cmp	r1, #0
 80126a2:	d0ca      	beq.n	801263a <__sflush_r+0x1a>
 80126a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126a8:	4299      	cmp	r1, r3
 80126aa:	d002      	beq.n	80126b2 <__sflush_r+0x92>
 80126ac:	4628      	mov	r0, r5
 80126ae:	f7ff faaf 	bl	8011c10 <_free_r>
 80126b2:	2000      	movs	r0, #0
 80126b4:	6360      	str	r0, [r4, #52]	; 0x34
 80126b6:	e7c1      	b.n	801263c <__sflush_r+0x1c>
 80126b8:	6a21      	ldr	r1, [r4, #32]
 80126ba:	2301      	movs	r3, #1
 80126bc:	4628      	mov	r0, r5
 80126be:	47b0      	blx	r6
 80126c0:	1c41      	adds	r1, r0, #1
 80126c2:	d1c7      	bne.n	8012654 <__sflush_r+0x34>
 80126c4:	682b      	ldr	r3, [r5, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d0c4      	beq.n	8012654 <__sflush_r+0x34>
 80126ca:	2b1d      	cmp	r3, #29
 80126cc:	d001      	beq.n	80126d2 <__sflush_r+0xb2>
 80126ce:	2b16      	cmp	r3, #22
 80126d0:	d101      	bne.n	80126d6 <__sflush_r+0xb6>
 80126d2:	602f      	str	r7, [r5, #0]
 80126d4:	e7b1      	b.n	801263a <__sflush_r+0x1a>
 80126d6:	89a3      	ldrh	r3, [r4, #12]
 80126d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126dc:	81a3      	strh	r3, [r4, #12]
 80126de:	e7ad      	b.n	801263c <__sflush_r+0x1c>
 80126e0:	690f      	ldr	r7, [r1, #16]
 80126e2:	2f00      	cmp	r7, #0
 80126e4:	d0a9      	beq.n	801263a <__sflush_r+0x1a>
 80126e6:	0793      	lsls	r3, r2, #30
 80126e8:	680e      	ldr	r6, [r1, #0]
 80126ea:	bf08      	it	eq
 80126ec:	694b      	ldreq	r3, [r1, #20]
 80126ee:	600f      	str	r7, [r1, #0]
 80126f0:	bf18      	it	ne
 80126f2:	2300      	movne	r3, #0
 80126f4:	eba6 0807 	sub.w	r8, r6, r7
 80126f8:	608b      	str	r3, [r1, #8]
 80126fa:	f1b8 0f00 	cmp.w	r8, #0
 80126fe:	dd9c      	ble.n	801263a <__sflush_r+0x1a>
 8012700:	6a21      	ldr	r1, [r4, #32]
 8012702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012704:	4643      	mov	r3, r8
 8012706:	463a      	mov	r2, r7
 8012708:	4628      	mov	r0, r5
 801270a:	47b0      	blx	r6
 801270c:	2800      	cmp	r0, #0
 801270e:	dc06      	bgt.n	801271e <__sflush_r+0xfe>
 8012710:	89a3      	ldrh	r3, [r4, #12]
 8012712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012716:	81a3      	strh	r3, [r4, #12]
 8012718:	f04f 30ff 	mov.w	r0, #4294967295
 801271c:	e78e      	b.n	801263c <__sflush_r+0x1c>
 801271e:	4407      	add	r7, r0
 8012720:	eba8 0800 	sub.w	r8, r8, r0
 8012724:	e7e9      	b.n	80126fa <__sflush_r+0xda>
 8012726:	bf00      	nop
 8012728:	20400001 	.word	0x20400001

0801272c <_fflush_r>:
 801272c:	b538      	push	{r3, r4, r5, lr}
 801272e:	690b      	ldr	r3, [r1, #16]
 8012730:	4605      	mov	r5, r0
 8012732:	460c      	mov	r4, r1
 8012734:	b913      	cbnz	r3, 801273c <_fflush_r+0x10>
 8012736:	2500      	movs	r5, #0
 8012738:	4628      	mov	r0, r5
 801273a:	bd38      	pop	{r3, r4, r5, pc}
 801273c:	b118      	cbz	r0, 8012746 <_fflush_r+0x1a>
 801273e:	6983      	ldr	r3, [r0, #24]
 8012740:	b90b      	cbnz	r3, 8012746 <_fflush_r+0x1a>
 8012742:	f000 f887 	bl	8012854 <__sinit>
 8012746:	4b14      	ldr	r3, [pc, #80]	; (8012798 <_fflush_r+0x6c>)
 8012748:	429c      	cmp	r4, r3
 801274a:	d11b      	bne.n	8012784 <_fflush_r+0x58>
 801274c:	686c      	ldr	r4, [r5, #4]
 801274e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d0ef      	beq.n	8012736 <_fflush_r+0xa>
 8012756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012758:	07d0      	lsls	r0, r2, #31
 801275a:	d404      	bmi.n	8012766 <_fflush_r+0x3a>
 801275c:	0599      	lsls	r1, r3, #22
 801275e:	d402      	bmi.n	8012766 <_fflush_r+0x3a>
 8012760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012762:	f000 f915 	bl	8012990 <__retarget_lock_acquire_recursive>
 8012766:	4628      	mov	r0, r5
 8012768:	4621      	mov	r1, r4
 801276a:	f7ff ff59 	bl	8012620 <__sflush_r>
 801276e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012770:	07da      	lsls	r2, r3, #31
 8012772:	4605      	mov	r5, r0
 8012774:	d4e0      	bmi.n	8012738 <_fflush_r+0xc>
 8012776:	89a3      	ldrh	r3, [r4, #12]
 8012778:	059b      	lsls	r3, r3, #22
 801277a:	d4dd      	bmi.n	8012738 <_fflush_r+0xc>
 801277c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801277e:	f000 f908 	bl	8012992 <__retarget_lock_release_recursive>
 8012782:	e7d9      	b.n	8012738 <_fflush_r+0xc>
 8012784:	4b05      	ldr	r3, [pc, #20]	; (801279c <_fflush_r+0x70>)
 8012786:	429c      	cmp	r4, r3
 8012788:	d101      	bne.n	801278e <_fflush_r+0x62>
 801278a:	68ac      	ldr	r4, [r5, #8]
 801278c:	e7df      	b.n	801274e <_fflush_r+0x22>
 801278e:	4b04      	ldr	r3, [pc, #16]	; (80127a0 <_fflush_r+0x74>)
 8012790:	429c      	cmp	r4, r3
 8012792:	bf08      	it	eq
 8012794:	68ec      	ldreq	r4, [r5, #12]
 8012796:	e7da      	b.n	801274e <_fflush_r+0x22>
 8012798:	080150d4 	.word	0x080150d4
 801279c:	080150f4 	.word	0x080150f4
 80127a0:	080150b4 	.word	0x080150b4

080127a4 <std>:
 80127a4:	2300      	movs	r3, #0
 80127a6:	b510      	push	{r4, lr}
 80127a8:	4604      	mov	r4, r0
 80127aa:	e9c0 3300 	strd	r3, r3, [r0]
 80127ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80127b2:	6083      	str	r3, [r0, #8]
 80127b4:	8181      	strh	r1, [r0, #12]
 80127b6:	6643      	str	r3, [r0, #100]	; 0x64
 80127b8:	81c2      	strh	r2, [r0, #14]
 80127ba:	6183      	str	r3, [r0, #24]
 80127bc:	4619      	mov	r1, r3
 80127be:	2208      	movs	r2, #8
 80127c0:	305c      	adds	r0, #92	; 0x5c
 80127c2:	f7fc f82b 	bl	800e81c <memset>
 80127c6:	4b05      	ldr	r3, [pc, #20]	; (80127dc <std+0x38>)
 80127c8:	6263      	str	r3, [r4, #36]	; 0x24
 80127ca:	4b05      	ldr	r3, [pc, #20]	; (80127e0 <std+0x3c>)
 80127cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80127ce:	4b05      	ldr	r3, [pc, #20]	; (80127e4 <std+0x40>)
 80127d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80127d2:	4b05      	ldr	r3, [pc, #20]	; (80127e8 <std+0x44>)
 80127d4:	6224      	str	r4, [r4, #32]
 80127d6:	6323      	str	r3, [r4, #48]	; 0x30
 80127d8:	bd10      	pop	{r4, pc}
 80127da:	bf00      	nop
 80127dc:	08012af9 	.word	0x08012af9
 80127e0:	08012b1b 	.word	0x08012b1b
 80127e4:	08012b53 	.word	0x08012b53
 80127e8:	08012b77 	.word	0x08012b77

080127ec <_cleanup_r>:
 80127ec:	4901      	ldr	r1, [pc, #4]	; (80127f4 <_cleanup_r+0x8>)
 80127ee:	f000 b8af 	b.w	8012950 <_fwalk_reent>
 80127f2:	bf00      	nop
 80127f4:	0801272d 	.word	0x0801272d

080127f8 <__sfmoreglue>:
 80127f8:	b570      	push	{r4, r5, r6, lr}
 80127fa:	2268      	movs	r2, #104	; 0x68
 80127fc:	1e4d      	subs	r5, r1, #1
 80127fe:	4355      	muls	r5, r2
 8012800:	460e      	mov	r6, r1
 8012802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012806:	f7ff fa6f 	bl	8011ce8 <_malloc_r>
 801280a:	4604      	mov	r4, r0
 801280c:	b140      	cbz	r0, 8012820 <__sfmoreglue+0x28>
 801280e:	2100      	movs	r1, #0
 8012810:	e9c0 1600 	strd	r1, r6, [r0]
 8012814:	300c      	adds	r0, #12
 8012816:	60a0      	str	r0, [r4, #8]
 8012818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801281c:	f7fb fffe 	bl	800e81c <memset>
 8012820:	4620      	mov	r0, r4
 8012822:	bd70      	pop	{r4, r5, r6, pc}

08012824 <__sfp_lock_acquire>:
 8012824:	4801      	ldr	r0, [pc, #4]	; (801282c <__sfp_lock_acquire+0x8>)
 8012826:	f000 b8b3 	b.w	8012990 <__retarget_lock_acquire_recursive>
 801282a:	bf00      	nop
 801282c:	20003951 	.word	0x20003951

08012830 <__sfp_lock_release>:
 8012830:	4801      	ldr	r0, [pc, #4]	; (8012838 <__sfp_lock_release+0x8>)
 8012832:	f000 b8ae 	b.w	8012992 <__retarget_lock_release_recursive>
 8012836:	bf00      	nop
 8012838:	20003951 	.word	0x20003951

0801283c <__sinit_lock_acquire>:
 801283c:	4801      	ldr	r0, [pc, #4]	; (8012844 <__sinit_lock_acquire+0x8>)
 801283e:	f000 b8a7 	b.w	8012990 <__retarget_lock_acquire_recursive>
 8012842:	bf00      	nop
 8012844:	20003952 	.word	0x20003952

08012848 <__sinit_lock_release>:
 8012848:	4801      	ldr	r0, [pc, #4]	; (8012850 <__sinit_lock_release+0x8>)
 801284a:	f000 b8a2 	b.w	8012992 <__retarget_lock_release_recursive>
 801284e:	bf00      	nop
 8012850:	20003952 	.word	0x20003952

08012854 <__sinit>:
 8012854:	b510      	push	{r4, lr}
 8012856:	4604      	mov	r4, r0
 8012858:	f7ff fff0 	bl	801283c <__sinit_lock_acquire>
 801285c:	69a3      	ldr	r3, [r4, #24]
 801285e:	b11b      	cbz	r3, 8012868 <__sinit+0x14>
 8012860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012864:	f7ff bff0 	b.w	8012848 <__sinit_lock_release>
 8012868:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801286c:	6523      	str	r3, [r4, #80]	; 0x50
 801286e:	4b13      	ldr	r3, [pc, #76]	; (80128bc <__sinit+0x68>)
 8012870:	4a13      	ldr	r2, [pc, #76]	; (80128c0 <__sinit+0x6c>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	62a2      	str	r2, [r4, #40]	; 0x28
 8012876:	42a3      	cmp	r3, r4
 8012878:	bf04      	itt	eq
 801287a:	2301      	moveq	r3, #1
 801287c:	61a3      	streq	r3, [r4, #24]
 801287e:	4620      	mov	r0, r4
 8012880:	f000 f820 	bl	80128c4 <__sfp>
 8012884:	6060      	str	r0, [r4, #4]
 8012886:	4620      	mov	r0, r4
 8012888:	f000 f81c 	bl	80128c4 <__sfp>
 801288c:	60a0      	str	r0, [r4, #8]
 801288e:	4620      	mov	r0, r4
 8012890:	f000 f818 	bl	80128c4 <__sfp>
 8012894:	2200      	movs	r2, #0
 8012896:	60e0      	str	r0, [r4, #12]
 8012898:	2104      	movs	r1, #4
 801289a:	6860      	ldr	r0, [r4, #4]
 801289c:	f7ff ff82 	bl	80127a4 <std>
 80128a0:	68a0      	ldr	r0, [r4, #8]
 80128a2:	2201      	movs	r2, #1
 80128a4:	2109      	movs	r1, #9
 80128a6:	f7ff ff7d 	bl	80127a4 <std>
 80128aa:	68e0      	ldr	r0, [r4, #12]
 80128ac:	2202      	movs	r2, #2
 80128ae:	2112      	movs	r1, #18
 80128b0:	f7ff ff78 	bl	80127a4 <std>
 80128b4:	2301      	movs	r3, #1
 80128b6:	61a3      	str	r3, [r4, #24]
 80128b8:	e7d2      	b.n	8012860 <__sinit+0xc>
 80128ba:	bf00      	nop
 80128bc:	08014c78 	.word	0x08014c78
 80128c0:	080127ed 	.word	0x080127ed

080128c4 <__sfp>:
 80128c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128c6:	4607      	mov	r7, r0
 80128c8:	f7ff ffac 	bl	8012824 <__sfp_lock_acquire>
 80128cc:	4b1e      	ldr	r3, [pc, #120]	; (8012948 <__sfp+0x84>)
 80128ce:	681e      	ldr	r6, [r3, #0]
 80128d0:	69b3      	ldr	r3, [r6, #24]
 80128d2:	b913      	cbnz	r3, 80128da <__sfp+0x16>
 80128d4:	4630      	mov	r0, r6
 80128d6:	f7ff ffbd 	bl	8012854 <__sinit>
 80128da:	3648      	adds	r6, #72	; 0x48
 80128dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80128e0:	3b01      	subs	r3, #1
 80128e2:	d503      	bpl.n	80128ec <__sfp+0x28>
 80128e4:	6833      	ldr	r3, [r6, #0]
 80128e6:	b30b      	cbz	r3, 801292c <__sfp+0x68>
 80128e8:	6836      	ldr	r6, [r6, #0]
 80128ea:	e7f7      	b.n	80128dc <__sfp+0x18>
 80128ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80128f0:	b9d5      	cbnz	r5, 8012928 <__sfp+0x64>
 80128f2:	4b16      	ldr	r3, [pc, #88]	; (801294c <__sfp+0x88>)
 80128f4:	60e3      	str	r3, [r4, #12]
 80128f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80128fa:	6665      	str	r5, [r4, #100]	; 0x64
 80128fc:	f000 f847 	bl	801298e <__retarget_lock_init_recursive>
 8012900:	f7ff ff96 	bl	8012830 <__sfp_lock_release>
 8012904:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012908:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801290c:	6025      	str	r5, [r4, #0]
 801290e:	61a5      	str	r5, [r4, #24]
 8012910:	2208      	movs	r2, #8
 8012912:	4629      	mov	r1, r5
 8012914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012918:	f7fb ff80 	bl	800e81c <memset>
 801291c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012924:	4620      	mov	r0, r4
 8012926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012928:	3468      	adds	r4, #104	; 0x68
 801292a:	e7d9      	b.n	80128e0 <__sfp+0x1c>
 801292c:	2104      	movs	r1, #4
 801292e:	4638      	mov	r0, r7
 8012930:	f7ff ff62 	bl	80127f8 <__sfmoreglue>
 8012934:	4604      	mov	r4, r0
 8012936:	6030      	str	r0, [r6, #0]
 8012938:	2800      	cmp	r0, #0
 801293a:	d1d5      	bne.n	80128e8 <__sfp+0x24>
 801293c:	f7ff ff78 	bl	8012830 <__sfp_lock_release>
 8012940:	230c      	movs	r3, #12
 8012942:	603b      	str	r3, [r7, #0]
 8012944:	e7ee      	b.n	8012924 <__sfp+0x60>
 8012946:	bf00      	nop
 8012948:	08014c78 	.word	0x08014c78
 801294c:	ffff0001 	.word	0xffff0001

08012950 <_fwalk_reent>:
 8012950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012954:	4606      	mov	r6, r0
 8012956:	4688      	mov	r8, r1
 8012958:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801295c:	2700      	movs	r7, #0
 801295e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012962:	f1b9 0901 	subs.w	r9, r9, #1
 8012966:	d505      	bpl.n	8012974 <_fwalk_reent+0x24>
 8012968:	6824      	ldr	r4, [r4, #0]
 801296a:	2c00      	cmp	r4, #0
 801296c:	d1f7      	bne.n	801295e <_fwalk_reent+0xe>
 801296e:	4638      	mov	r0, r7
 8012970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012974:	89ab      	ldrh	r3, [r5, #12]
 8012976:	2b01      	cmp	r3, #1
 8012978:	d907      	bls.n	801298a <_fwalk_reent+0x3a>
 801297a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801297e:	3301      	adds	r3, #1
 8012980:	d003      	beq.n	801298a <_fwalk_reent+0x3a>
 8012982:	4629      	mov	r1, r5
 8012984:	4630      	mov	r0, r6
 8012986:	47c0      	blx	r8
 8012988:	4307      	orrs	r7, r0
 801298a:	3568      	adds	r5, #104	; 0x68
 801298c:	e7e9      	b.n	8012962 <_fwalk_reent+0x12>

0801298e <__retarget_lock_init_recursive>:
 801298e:	4770      	bx	lr

08012990 <__retarget_lock_acquire_recursive>:
 8012990:	4770      	bx	lr

08012992 <__retarget_lock_release_recursive>:
 8012992:	4770      	bx	lr

08012994 <__swhatbuf_r>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	460e      	mov	r6, r1
 8012998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801299c:	2900      	cmp	r1, #0
 801299e:	b096      	sub	sp, #88	; 0x58
 80129a0:	4614      	mov	r4, r2
 80129a2:	461d      	mov	r5, r3
 80129a4:	da08      	bge.n	80129b8 <__swhatbuf_r+0x24>
 80129a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80129aa:	2200      	movs	r2, #0
 80129ac:	602a      	str	r2, [r5, #0]
 80129ae:	061a      	lsls	r2, r3, #24
 80129b0:	d410      	bmi.n	80129d4 <__swhatbuf_r+0x40>
 80129b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129b6:	e00e      	b.n	80129d6 <__swhatbuf_r+0x42>
 80129b8:	466a      	mov	r2, sp
 80129ba:	f000 f903 	bl	8012bc4 <_fstat_r>
 80129be:	2800      	cmp	r0, #0
 80129c0:	dbf1      	blt.n	80129a6 <__swhatbuf_r+0x12>
 80129c2:	9a01      	ldr	r2, [sp, #4]
 80129c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80129c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80129cc:	425a      	negs	r2, r3
 80129ce:	415a      	adcs	r2, r3
 80129d0:	602a      	str	r2, [r5, #0]
 80129d2:	e7ee      	b.n	80129b2 <__swhatbuf_r+0x1e>
 80129d4:	2340      	movs	r3, #64	; 0x40
 80129d6:	2000      	movs	r0, #0
 80129d8:	6023      	str	r3, [r4, #0]
 80129da:	b016      	add	sp, #88	; 0x58
 80129dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080129e0 <__smakebuf_r>:
 80129e0:	898b      	ldrh	r3, [r1, #12]
 80129e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80129e4:	079d      	lsls	r5, r3, #30
 80129e6:	4606      	mov	r6, r0
 80129e8:	460c      	mov	r4, r1
 80129ea:	d507      	bpl.n	80129fc <__smakebuf_r+0x1c>
 80129ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80129f0:	6023      	str	r3, [r4, #0]
 80129f2:	6123      	str	r3, [r4, #16]
 80129f4:	2301      	movs	r3, #1
 80129f6:	6163      	str	r3, [r4, #20]
 80129f8:	b002      	add	sp, #8
 80129fa:	bd70      	pop	{r4, r5, r6, pc}
 80129fc:	ab01      	add	r3, sp, #4
 80129fe:	466a      	mov	r2, sp
 8012a00:	f7ff ffc8 	bl	8012994 <__swhatbuf_r>
 8012a04:	9900      	ldr	r1, [sp, #0]
 8012a06:	4605      	mov	r5, r0
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f7ff f96d 	bl	8011ce8 <_malloc_r>
 8012a0e:	b948      	cbnz	r0, 8012a24 <__smakebuf_r+0x44>
 8012a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a14:	059a      	lsls	r2, r3, #22
 8012a16:	d4ef      	bmi.n	80129f8 <__smakebuf_r+0x18>
 8012a18:	f023 0303 	bic.w	r3, r3, #3
 8012a1c:	f043 0302 	orr.w	r3, r3, #2
 8012a20:	81a3      	strh	r3, [r4, #12]
 8012a22:	e7e3      	b.n	80129ec <__smakebuf_r+0xc>
 8012a24:	4b0d      	ldr	r3, [pc, #52]	; (8012a5c <__smakebuf_r+0x7c>)
 8012a26:	62b3      	str	r3, [r6, #40]	; 0x28
 8012a28:	89a3      	ldrh	r3, [r4, #12]
 8012a2a:	6020      	str	r0, [r4, #0]
 8012a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a30:	81a3      	strh	r3, [r4, #12]
 8012a32:	9b00      	ldr	r3, [sp, #0]
 8012a34:	6163      	str	r3, [r4, #20]
 8012a36:	9b01      	ldr	r3, [sp, #4]
 8012a38:	6120      	str	r0, [r4, #16]
 8012a3a:	b15b      	cbz	r3, 8012a54 <__smakebuf_r+0x74>
 8012a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a40:	4630      	mov	r0, r6
 8012a42:	f000 f8d1 	bl	8012be8 <_isatty_r>
 8012a46:	b128      	cbz	r0, 8012a54 <__smakebuf_r+0x74>
 8012a48:	89a3      	ldrh	r3, [r4, #12]
 8012a4a:	f023 0303 	bic.w	r3, r3, #3
 8012a4e:	f043 0301 	orr.w	r3, r3, #1
 8012a52:	81a3      	strh	r3, [r4, #12]
 8012a54:	89a0      	ldrh	r0, [r4, #12]
 8012a56:	4305      	orrs	r5, r0
 8012a58:	81a5      	strh	r5, [r4, #12]
 8012a5a:	e7cd      	b.n	80129f8 <__smakebuf_r+0x18>
 8012a5c:	080127ed 	.word	0x080127ed

08012a60 <_malloc_usable_size_r>:
 8012a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a64:	1f18      	subs	r0, r3, #4
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	bfbc      	itt	lt
 8012a6a:	580b      	ldrlt	r3, [r1, r0]
 8012a6c:	18c0      	addlt	r0, r0, r3
 8012a6e:	4770      	bx	lr

08012a70 <_raise_r>:
 8012a70:	291f      	cmp	r1, #31
 8012a72:	b538      	push	{r3, r4, r5, lr}
 8012a74:	4604      	mov	r4, r0
 8012a76:	460d      	mov	r5, r1
 8012a78:	d904      	bls.n	8012a84 <_raise_r+0x14>
 8012a7a:	2316      	movs	r3, #22
 8012a7c:	6003      	str	r3, [r0, #0]
 8012a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a82:	bd38      	pop	{r3, r4, r5, pc}
 8012a84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012a86:	b112      	cbz	r2, 8012a8e <_raise_r+0x1e>
 8012a88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a8c:	b94b      	cbnz	r3, 8012aa2 <_raise_r+0x32>
 8012a8e:	4620      	mov	r0, r4
 8012a90:	f000 f830 	bl	8012af4 <_getpid_r>
 8012a94:	462a      	mov	r2, r5
 8012a96:	4601      	mov	r1, r0
 8012a98:	4620      	mov	r0, r4
 8012a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a9e:	f000 b817 	b.w	8012ad0 <_kill_r>
 8012aa2:	2b01      	cmp	r3, #1
 8012aa4:	d00a      	beq.n	8012abc <_raise_r+0x4c>
 8012aa6:	1c59      	adds	r1, r3, #1
 8012aa8:	d103      	bne.n	8012ab2 <_raise_r+0x42>
 8012aaa:	2316      	movs	r3, #22
 8012aac:	6003      	str	r3, [r0, #0]
 8012aae:	2001      	movs	r0, #1
 8012ab0:	e7e7      	b.n	8012a82 <_raise_r+0x12>
 8012ab2:	2400      	movs	r4, #0
 8012ab4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ab8:	4628      	mov	r0, r5
 8012aba:	4798      	blx	r3
 8012abc:	2000      	movs	r0, #0
 8012abe:	e7e0      	b.n	8012a82 <_raise_r+0x12>

08012ac0 <raise>:
 8012ac0:	4b02      	ldr	r3, [pc, #8]	; (8012acc <raise+0xc>)
 8012ac2:	4601      	mov	r1, r0
 8012ac4:	6818      	ldr	r0, [r3, #0]
 8012ac6:	f7ff bfd3 	b.w	8012a70 <_raise_r>
 8012aca:	bf00      	nop
 8012acc:	20000184 	.word	0x20000184

08012ad0 <_kill_r>:
 8012ad0:	b538      	push	{r3, r4, r5, lr}
 8012ad2:	4d07      	ldr	r5, [pc, #28]	; (8012af0 <_kill_r+0x20>)
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	4608      	mov	r0, r1
 8012ada:	4611      	mov	r1, r2
 8012adc:	602b      	str	r3, [r5, #0]
 8012ade:	f7f5 ff11 	bl	8008904 <_kill>
 8012ae2:	1c43      	adds	r3, r0, #1
 8012ae4:	d102      	bne.n	8012aec <_kill_r+0x1c>
 8012ae6:	682b      	ldr	r3, [r5, #0]
 8012ae8:	b103      	cbz	r3, 8012aec <_kill_r+0x1c>
 8012aea:	6023      	str	r3, [r4, #0]
 8012aec:	bd38      	pop	{r3, r4, r5, pc}
 8012aee:	bf00      	nop
 8012af0:	2000394c 	.word	0x2000394c

08012af4 <_getpid_r>:
 8012af4:	f7f5 bf04 	b.w	8008900 <_getpid>

08012af8 <__sread>:
 8012af8:	b510      	push	{r4, lr}
 8012afa:	460c      	mov	r4, r1
 8012afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b00:	f000 f894 	bl	8012c2c <_read_r>
 8012b04:	2800      	cmp	r0, #0
 8012b06:	bfab      	itete	ge
 8012b08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8012b0c:	181b      	addge	r3, r3, r0
 8012b0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b12:	bfac      	ite	ge
 8012b14:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b16:	81a3      	strhlt	r3, [r4, #12]
 8012b18:	bd10      	pop	{r4, pc}

08012b1a <__swrite>:
 8012b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b1e:	461f      	mov	r7, r3
 8012b20:	898b      	ldrh	r3, [r1, #12]
 8012b22:	05db      	lsls	r3, r3, #23
 8012b24:	4605      	mov	r5, r0
 8012b26:	460c      	mov	r4, r1
 8012b28:	4616      	mov	r6, r2
 8012b2a:	d505      	bpl.n	8012b38 <__swrite+0x1e>
 8012b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b30:	2302      	movs	r3, #2
 8012b32:	2200      	movs	r2, #0
 8012b34:	f000 f868 	bl	8012c08 <_lseek_r>
 8012b38:	89a3      	ldrh	r3, [r4, #12]
 8012b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b42:	81a3      	strh	r3, [r4, #12]
 8012b44:	4632      	mov	r2, r6
 8012b46:	463b      	mov	r3, r7
 8012b48:	4628      	mov	r0, r5
 8012b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b4e:	f000 b817 	b.w	8012b80 <_write_r>

08012b52 <__sseek>:
 8012b52:	b510      	push	{r4, lr}
 8012b54:	460c      	mov	r4, r1
 8012b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b5a:	f000 f855 	bl	8012c08 <_lseek_r>
 8012b5e:	1c43      	adds	r3, r0, #1
 8012b60:	89a3      	ldrh	r3, [r4, #12]
 8012b62:	bf15      	itete	ne
 8012b64:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b6e:	81a3      	strheq	r3, [r4, #12]
 8012b70:	bf18      	it	ne
 8012b72:	81a3      	strhne	r3, [r4, #12]
 8012b74:	bd10      	pop	{r4, pc}

08012b76 <__sclose>:
 8012b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b7a:	f000 b813 	b.w	8012ba4 <_close_r>
	...

08012b80 <_write_r>:
 8012b80:	b538      	push	{r3, r4, r5, lr}
 8012b82:	4d07      	ldr	r5, [pc, #28]	; (8012ba0 <_write_r+0x20>)
 8012b84:	4604      	mov	r4, r0
 8012b86:	4608      	mov	r0, r1
 8012b88:	4611      	mov	r1, r2
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	602a      	str	r2, [r5, #0]
 8012b8e:	461a      	mov	r2, r3
 8012b90:	f7f5 fed4 	bl	800893c <_write>
 8012b94:	1c43      	adds	r3, r0, #1
 8012b96:	d102      	bne.n	8012b9e <_write_r+0x1e>
 8012b98:	682b      	ldr	r3, [r5, #0]
 8012b9a:	b103      	cbz	r3, 8012b9e <_write_r+0x1e>
 8012b9c:	6023      	str	r3, [r4, #0]
 8012b9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ba0:	2000394c 	.word	0x2000394c

08012ba4 <_close_r>:
 8012ba4:	b538      	push	{r3, r4, r5, lr}
 8012ba6:	4d06      	ldr	r5, [pc, #24]	; (8012bc0 <_close_r+0x1c>)
 8012ba8:	2300      	movs	r3, #0
 8012baa:	4604      	mov	r4, r0
 8012bac:	4608      	mov	r0, r1
 8012bae:	602b      	str	r3, [r5, #0]
 8012bb0:	f7f5 fed2 	bl	8008958 <_close>
 8012bb4:	1c43      	adds	r3, r0, #1
 8012bb6:	d102      	bne.n	8012bbe <_close_r+0x1a>
 8012bb8:	682b      	ldr	r3, [r5, #0]
 8012bba:	b103      	cbz	r3, 8012bbe <_close_r+0x1a>
 8012bbc:	6023      	str	r3, [r4, #0]
 8012bbe:	bd38      	pop	{r3, r4, r5, pc}
 8012bc0:	2000394c 	.word	0x2000394c

08012bc4 <_fstat_r>:
 8012bc4:	b538      	push	{r3, r4, r5, lr}
 8012bc6:	4d07      	ldr	r5, [pc, #28]	; (8012be4 <_fstat_r+0x20>)
 8012bc8:	2300      	movs	r3, #0
 8012bca:	4604      	mov	r4, r0
 8012bcc:	4608      	mov	r0, r1
 8012bce:	4611      	mov	r1, r2
 8012bd0:	602b      	str	r3, [r5, #0]
 8012bd2:	f7f5 fec4 	bl	800895e <_fstat>
 8012bd6:	1c43      	adds	r3, r0, #1
 8012bd8:	d102      	bne.n	8012be0 <_fstat_r+0x1c>
 8012bda:	682b      	ldr	r3, [r5, #0]
 8012bdc:	b103      	cbz	r3, 8012be0 <_fstat_r+0x1c>
 8012bde:	6023      	str	r3, [r4, #0]
 8012be0:	bd38      	pop	{r3, r4, r5, pc}
 8012be2:	bf00      	nop
 8012be4:	2000394c 	.word	0x2000394c

08012be8 <_isatty_r>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	4d06      	ldr	r5, [pc, #24]	; (8012c04 <_isatty_r+0x1c>)
 8012bec:	2300      	movs	r3, #0
 8012bee:	4604      	mov	r4, r0
 8012bf0:	4608      	mov	r0, r1
 8012bf2:	602b      	str	r3, [r5, #0]
 8012bf4:	f7f5 feb8 	bl	8008968 <_isatty>
 8012bf8:	1c43      	adds	r3, r0, #1
 8012bfa:	d102      	bne.n	8012c02 <_isatty_r+0x1a>
 8012bfc:	682b      	ldr	r3, [r5, #0]
 8012bfe:	b103      	cbz	r3, 8012c02 <_isatty_r+0x1a>
 8012c00:	6023      	str	r3, [r4, #0]
 8012c02:	bd38      	pop	{r3, r4, r5, pc}
 8012c04:	2000394c 	.word	0x2000394c

08012c08 <_lseek_r>:
 8012c08:	b538      	push	{r3, r4, r5, lr}
 8012c0a:	4d07      	ldr	r5, [pc, #28]	; (8012c28 <_lseek_r+0x20>)
 8012c0c:	4604      	mov	r4, r0
 8012c0e:	4608      	mov	r0, r1
 8012c10:	4611      	mov	r1, r2
 8012c12:	2200      	movs	r2, #0
 8012c14:	602a      	str	r2, [r5, #0]
 8012c16:	461a      	mov	r2, r3
 8012c18:	f7f5 fea8 	bl	800896c <_lseek>
 8012c1c:	1c43      	adds	r3, r0, #1
 8012c1e:	d102      	bne.n	8012c26 <_lseek_r+0x1e>
 8012c20:	682b      	ldr	r3, [r5, #0]
 8012c22:	b103      	cbz	r3, 8012c26 <_lseek_r+0x1e>
 8012c24:	6023      	str	r3, [r4, #0]
 8012c26:	bd38      	pop	{r3, r4, r5, pc}
 8012c28:	2000394c 	.word	0x2000394c

08012c2c <_read_r>:
 8012c2c:	b538      	push	{r3, r4, r5, lr}
 8012c2e:	4d07      	ldr	r5, [pc, #28]	; (8012c4c <_read_r+0x20>)
 8012c30:	4604      	mov	r4, r0
 8012c32:	4608      	mov	r0, r1
 8012c34:	4611      	mov	r1, r2
 8012c36:	2200      	movs	r2, #0
 8012c38:	602a      	str	r2, [r5, #0]
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	f7f5 fe70 	bl	8008920 <_read>
 8012c40:	1c43      	adds	r3, r0, #1
 8012c42:	d102      	bne.n	8012c4a <_read_r+0x1e>
 8012c44:	682b      	ldr	r3, [r5, #0]
 8012c46:	b103      	cbz	r3, 8012c4a <_read_r+0x1e>
 8012c48:	6023      	str	r3, [r4, #0]
 8012c4a:	bd38      	pop	{r3, r4, r5, pc}
 8012c4c:	2000394c 	.word	0x2000394c

08012c50 <_init>:
 8012c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c52:	bf00      	nop
 8012c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c56:	bc08      	pop	{r3}
 8012c58:	469e      	mov	lr, r3
 8012c5a:	4770      	bx	lr

08012c5c <_fini>:
 8012c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c5e:	bf00      	nop
 8012c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c62:	bc08      	pop	{r3}
 8012c64:	469e      	mov	lr, r3
 8012c66:	4770      	bx	lr
