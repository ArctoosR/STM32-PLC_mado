
PLC STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d4  08012d58  08012d58  00022d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801522c  0801522c  00030358  2**0
                  CONTENTS
  4 .ARM          00000000  0801522c  0801522c  00030358  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801522c  0801522c  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801522c  0801522c  0002522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015230  08015230  00025230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08015234  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035fc  20000358  0801558c  00030358  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003954  0801558c  00033954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004dbc0  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bfb0  00000000  00000000  0007df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ca22  00000000  00000000  00089ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002068  00000000  00000000  000a6920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000031a8  00000000  00000000  000a8988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032378  00000000  00000000  000abb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005c8fd  00000000  00000000  000ddea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc7bd  00000000  00000000  0013a7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f6f62  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ef0  00000000  00000000  001f6fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012d40 	.word	0x08012d40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	08012d40 	.word	0x08012d40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <STM32_PLC_Analog_Input_Set_Gain>:
}

void STM32_PLC_Analog_Input_Set_Gain(uint8_t sdadc, uint8_t configuration_index, uint8_t gain, bool save_to_flash) {
	/* Select SDADC handler */
	SDADC_HandleTypeDef *hsdadc;
	switch(sdadc){
 8000cf4:	2802      	cmp	r0, #2
void STM32_PLC_Analog_Input_Set_Gain(uint8_t sdadc, uint8_t configuration_index, uint8_t gain, bool save_to_flash) {
 8000cf6:	b570      	push	{r4, r5, r6, lr}
 8000cf8:	460d      	mov	r5, r1
 8000cfa:	4611      	mov	r1, r2
	switch(sdadc){
 8000cfc:	d020      	beq.n	8000d40 <STM32_PLC_Analog_Input_Set_Gain+0x4c>
 8000cfe:	2803      	cmp	r0, #3
 8000d00:	d020      	beq.n	8000d44 <STM32_PLC_Analog_Input_Set_Gain+0x50>
 8000d02:	2801      	cmp	r0, #1
 8000d04:	d11b      	bne.n	8000d3e <STM32_PLC_Analog_Input_Set_Gain+0x4a>
	case 1:
		hsdadc = handler_sdadc1;
 8000d06:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <STM32_PLC_Analog_Input_Set_Gain+0x88>)
		break;
	case 2:
		hsdadc = handler_sdadc2;
		break;
	case 3:
		hsdadc = handler_sdadc3;
 8000d08:	6816      	ldr	r6, [r2, #0]
		return;
	}


	/* Stop SDADC */
	hsdadc->Instance->CR2 &= ~SDADC_CR2_ADON;
 8000d0a:	6834      	ldr	r4, [r6, #0]
 8000d0c:	6862      	ldr	r2, [r4, #4]

	/* Set gain */
	switch(configuration_index){
 8000d0e:	2d01      	cmp	r5, #1
	hsdadc->Instance->CR2 &= ~SDADC_CR2_ADON;
 8000d10:	f022 0201 	bic.w	r2, r2, #1
 8000d14:	6062      	str	r2, [r4, #4]
	switch(configuration_index){
 8000d16:	d017      	beq.n	8000d48 <STM32_PLC_Analog_Input_Set_Gain+0x54>
 8000d18:	2d02      	cmp	r5, #2
 8000d1a:	d022      	beq.n	8000d62 <STM32_PLC_Analog_Input_Set_Gain+0x6e>
 8000d1c:	b955      	cbnz	r5, 8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
	case SDADC_CONF_INDEX_0:
		hsdadc->Instance->CONF0R &=  ~(0b111 << 20); /* Clear */
 8000d1e:	6a22      	ldr	r2, [r4, #32]
 8000d20:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000d24:	6222      	str	r2, [r4, #32]
		hsdadc->Instance->CONF0R |= gain << 20; 	 /* Bits 22:20 GAIN0[2:0]: */
 8000d26:	6a22      	ldr	r2, [r4, #32]
 8000d28:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000d2c:	6222      	str	r2, [r4, #32]
		if(save_to_flash)
 8000d2e:	b10b      	cbz	r3, 8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
			STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0(sdadc, gain);
 8000d30:	f000 fb6c 	bl	800140c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0>
			STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(sdadc, gain);
		break;
	}

	/* Start SDADC */
	hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8000d34:	6832      	ldr	r2, [r6, #0]
 8000d36:	6853      	ldr	r3, [r2, #4]
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]

}
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
		hsdadc = handler_sdadc2;
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <STM32_PLC_Analog_Input_Set_Gain+0x8c>)
 8000d42:	e7e1      	b.n	8000d08 <STM32_PLC_Analog_Input_Set_Gain+0x14>
		hsdadc = handler_sdadc3;
 8000d44:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <STM32_PLC_Analog_Input_Set_Gain+0x90>)
 8000d46:	e7df      	b.n	8000d08 <STM32_PLC_Analog_Input_Set_Gain+0x14>
		hsdadc->Instance->CONF1R &=  ~(0b111 << 20);
 8000d48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d4a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000d4e:	6262      	str	r2, [r4, #36]	; 0x24
		hsdadc->Instance->CONF1R |= gain << 20;
 8000d50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d52:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000d56:	6262      	str	r2, [r4, #36]	; 0x24
		if(save_to_flash)
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0eb      	beq.n	8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
			STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1(sdadc, gain);
 8000d5c:	f000 fb66 	bl	800142c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1>
 8000d60:	e7e8      	b.n	8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
		hsdadc->Instance->CONF2R &=  ~(0b111 << 20);
 8000d62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d64:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000d68:	62a2      	str	r2, [r4, #40]	; 0x28
		hsdadc->Instance->CONF2R |= gain << 20;
 8000d6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d6c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000d70:	62a2      	str	r2, [r4, #40]	; 0x28
		if(save_to_flash)
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0de      	beq.n	8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
			STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(sdadc, gain);
 8000d76:	f000 fb69 	bl	800144c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2>
 8000d7a:	e7db      	b.n	8000d34 <STM32_PLC_Analog_Input_Set_Gain+0x40>
 8000d7c:	200003dc 	.word	0x200003dc
 8000d80:	200003e0 	.word	0x200003e0
 8000d84:	200003e4 	.word	0x200003e4

08000d88 <STM32_PLC_Analog_Input>:
void STM32_PLC_Analog_Input(TIM_HandleTypeDef* htim12, TIM_HandleTypeDef* htim13, SDADC_HandleTypeDef* hsdadc1, SDADC_HandleTypeDef* hsdadc2, SDADC_HandleTypeDef* hsdadc3) {
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	4607      	mov	r7, r0
 8000d8e:	4608      	mov	r0, r1
	if(HAL_TIM_OC_Start(htim13, TIM_CHANNEL_1) != HAL_OK) /* TIM13 Channel 1 is trigger source for SDADC1 */
 8000d90:	2100      	movs	r1, #0
void STM32_PLC_Analog_Input(TIM_HandleTypeDef* htim12, TIM_HandleTypeDef* htim13, SDADC_HandleTypeDef* hsdadc1, SDADC_HandleTypeDef* hsdadc2, SDADC_HandleTypeDef* hsdadc3) {
 8000d92:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8000d94:	4615      	mov	r5, r2
 8000d96:	461c      	mov	r4, r3
	if(HAL_TIM_OC_Start(htim13, TIM_CHANNEL_1) != HAL_OK) /* TIM13 Channel 1 is trigger source for SDADC1 */
 8000d98:	f00b ff30 	bl	800cbfc <HAL_TIM_OC_Start>
 8000d9c:	b108      	cbz	r0, 8000da2 <STM32_PLC_Analog_Input+0x1a>
		Error_Handler();
 8000d9e:	f006 fb7d 	bl	800749c <Error_Handler>
	if(HAL_TIM_OC_Start(htim12, TIM_CHANNEL_1) != HAL_OK) /* TIM12 Channel 1 is trigger source for SDADC2 */
 8000da2:	2100      	movs	r1, #0
 8000da4:	4638      	mov	r0, r7
 8000da6:	f00b ff29 	bl	800cbfc <HAL_TIM_OC_Start>
 8000daa:	b108      	cbz	r0, 8000db0 <STM32_PLC_Analog_Input+0x28>
		Error_Handler();
 8000dac:	f006 fb76 	bl	800749c <Error_Handler>
	if(HAL_TIM_OC_Start(htim12, TIM_CHANNEL_2) != HAL_OK) /* TIM12 Channel 2 is trigger source for SDADC3 */
 8000db0:	2104      	movs	r1, #4
 8000db2:	4638      	mov	r0, r7
 8000db4:	f00b ff22 	bl	800cbfc <HAL_TIM_OC_Start>
 8000db8:	b108      	cbz	r0, 8000dbe <STM32_PLC_Analog_Input+0x36>
		Error_Handler();
 8000dba:	f006 fb6f 	bl	800749c <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc1, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	f00a fc6f 	bl	800b6a4 <HAL_SDADC_CalibrationStart>
 8000dc6:	b108      	cbz	r0, 8000dcc <STM32_PLC_Analog_Input+0x44>
		Error_Handler();
 8000dc8:	f006 fb68 	bl	800749c <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc1, HAL_MAX_DELAY) != HAL_OK)
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f00a fc8d 	bl	800b6f0 <HAL_SDADC_PollForCalibEvent>
 8000dd6:	b108      	cbz	r0, 8000ddc <STM32_PLC_Analog_Input+0x54>
		Error_Handler();
 8000dd8:	f006 fb60 	bl	800749c <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc2, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000ddc:	2104      	movs	r1, #4
 8000dde:	4620      	mov	r0, r4
 8000de0:	f00a fc60 	bl	800b6a4 <HAL_SDADC_CalibrationStart>
 8000de4:	b108      	cbz	r0, 8000dea <STM32_PLC_Analog_Input+0x62>
		Error_Handler();
 8000de6:	f006 fb59 	bl	800749c <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc2, HAL_MAX_DELAY) != HAL_OK)
 8000dea:	f04f 31ff 	mov.w	r1, #4294967295
 8000dee:	4620      	mov	r0, r4
 8000df0:	f00a fc7e 	bl	800b6f0 <HAL_SDADC_PollForCalibEvent>
 8000df4:	b108      	cbz	r0, 8000dfa <STM32_PLC_Analog_Input+0x72>
		Error_Handler();
 8000df6:	f006 fb51 	bl	800749c <Error_Handler>
	if (HAL_SDADC_CalibrationStart(hsdadc3, SDADC_CALIBRATION_SEQ_3) != HAL_OK)
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f00a fc51 	bl	800b6a4 <HAL_SDADC_CalibrationStart>
 8000e02:	b108      	cbz	r0, 8000e08 <STM32_PLC_Analog_Input+0x80>
		Error_Handler();
 8000e04:	f006 fb4a 	bl	800749c <Error_Handler>
	if (HAL_SDADC_PollForCalibEvent(hsdadc3, HAL_MAX_DELAY) != HAL_OK)
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f00a fc6f 	bl	800b6f0 <HAL_SDADC_PollForCalibEvent>
 8000e12:	b108      	cbz	r0, 8000e18 <STM32_PLC_Analog_Input+0x90>
		Error_Handler();
 8000e14:	f006 fb42 	bl	800749c <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc1, (uint32_t*)SDADC1_Single, 9) != HAL_OK)
 8000e18:	4943      	ldr	r1, [pc, #268]	; (8000f28 <STM32_PLC_Analog_Input+0x1a0>)
 8000e1a:	2209      	movs	r2, #9
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f00a fc8b 	bl	800b738 <HAL_SDADC_InjectedStart_DMA>
 8000e22:	b108      	cbz	r0, 8000e28 <STM32_PLC_Analog_Input+0xa0>
		Error_Handler();
 8000e24:	f006 fb3a 	bl	800749c <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc2, (uint32_t*)SDADC2_Single, 3) != HAL_OK)
 8000e28:	4940      	ldr	r1, [pc, #256]	; (8000f2c <STM32_PLC_Analog_Input+0x1a4>)
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f00a fc83 	bl	800b738 <HAL_SDADC_InjectedStart_DMA>
 8000e32:	b108      	cbz	r0, 8000e38 <STM32_PLC_Analog_Input+0xb0>
		Error_Handler();
 8000e34:	f006 fb32 	bl	800749c <Error_Handler>
	if(HAL_SDADC_InjectedStart_DMA(hsdadc3, (uint32_t*)SDADC3_Differential, 5) != HAL_OK)
 8000e38:	493d      	ldr	r1, [pc, #244]	; (8000f30 <STM32_PLC_Analog_Input+0x1a8>)
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f00a fc7b 	bl	800b738 <HAL_SDADC_InjectedStart_DMA>
 8000e42:	b108      	cbz	r0, 8000e48 <STM32_PLC_Analog_Input+0xc0>
		Error_Handler();
 8000e44:	f006 fb2a 	bl	800749c <Error_Handler>
	handler_sdadc1 = hsdadc1;
 8000e48:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <STM32_PLC_Analog_Input+0x1ac>)
 8000e4a:	601d      	str	r5, [r3, #0]
	handler_sdadc2 = hsdadc2;
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <STM32_PLC_Analog_Input+0x1b0>)
 8000e4e:	4d3b      	ldr	r5, [pc, #236]	; (8000f3c <STM32_PLC_Analog_Input+0x1b4>)
 8000e50:	601c      	str	r4, [r3, #0]
	handler_sdadc3 = hsdadc3;
 8000e52:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <STM32_PLC_Analog_Input+0x1b8>)
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8000e54:	f10d 0207 	add.w	r2, sp, #7
 8000e58:	f10d 0106 	add.w	r1, sp, #6
 8000e5c:	f10d 0005 	add.w	r0, sp, #5
	handler_sdadc3 = hsdadc3;
 8000e60:	601e      	str	r6, [r3, #0]
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8000e62:	f000 fb9c 	bl	800159e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>
	STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_0, gain_for_configuration_index_0, false);
 8000e66:	2300      	movs	r3, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000e6e:	4e35      	ldr	r6, [pc, #212]	; (8000f44 <STM32_PLC_Analog_Input+0x1bc>)
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff ff3f 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_1, gain_for_configuration_index_1, false);
 8000e76:	2101      	movs	r1, #1
 8000e78:	4608      	mov	r0, r1
 8000e7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f7ff ff38 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_2, gain_for_configuration_index_2, false);
 8000e84:	2300      	movs	r3, #0
 8000e86:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff ff31 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8000e92:	f10d 0207 	add.w	r2, sp, #7
 8000e96:	f10d 0106 	add.w	r1, sp, #6
 8000e9a:	f10d 0005 	add.w	r0, sp, #5
 8000e9e:	f000 fb9a 	bl	80015d6 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>
	STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_0, gain_for_configuration_index_0, false);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f7ff ff22 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_1, gain_for_configuration_index_1, false);
 8000eb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f7ff ff1b 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_2, gain_for_configuration_index_2, false);
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000ec8:	f7ff ff14 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8000ecc:	f10d 0207 	add.w	r2, sp, #7
 8000ed0:	f10d 0106 	add.w	r1, sp, #6
 8000ed4:	f10d 0005 	add.w	r0, sp, #5
 8000ed8:	f000 fb99 	bl	800160e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>
	STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_0, gain_for_configuration_index_0, false);
 8000edc:	2300      	movs	r3, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f7ff ff05 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_1, gain_for_configuration_index_1, false);
 8000eea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f7ff fefe 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
	STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain_for_configuration_index_2, false);
 8000ef8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000efc:	2300      	movs	r3, #0
 8000efe:	2102      	movs	r1, #2
 8000f00:	2003      	movs	r0, #3
 8000f02:	f7ff fef7 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
 8000f06:	2400      	movs	r4, #0
		STM32_PLC_Flash_Get_Analog_Input_Calibration(i, &scalar, &bias);
 8000f08:	b2e0      	uxtb	r0, r4
 8000f0a:	aa03      	add	r2, sp, #12
 8000f0c:	a902      	add	r1, sp, #8
 8000f0e:	f000 fc07 	bl	8001720 <STM32_PLC_Flash_Get_Analog_Input_Calibration>
	for(uint8_t i = 0; i < 17; i++){
 8000f12:	3401      	adds	r4, #1
float STM32_PLC_Analog_Input_DADC_Get_Calibrated(uint8_t i) {
	return scalar_list[12+i]*((float)STM32_PLC_Analog_Input_DADC_Get_Raw(i)) + bias_list[12+i];
}

void STM32_PLC_Analog_Input_Set_Calibration(uint8_t input_index, float scalar, float bias, bool save_to_flash){
	scalar_list[input_index] = scalar;
 8000f14:	9b02      	ldr	r3, [sp, #8]
 8000f16:	f846 3b04 	str.w	r3, [r6], #4
	for(uint8_t i = 0; i < 17; i++){
 8000f1a:	2c11      	cmp	r4, #17
	bias_list[input_index] = bias;
 8000f1c:	9b03      	ldr	r3, [sp, #12]
 8000f1e:	f845 3b04 	str.w	r3, [r5], #4
	for(uint8_t i = 0; i < 17; i++){
 8000f22:	d1f1      	bne.n	8000f08 <STM32_PLC_Analog_Input+0x180>
}
 8000f24:	b005      	add	sp, #20
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	20000374 	.word	0x20000374
 8000f2c:	20000386 	.word	0x20000386
 8000f30:	2000038c 	.word	0x2000038c
 8000f34:	200003dc 	.word	0x200003dc
 8000f38:	200003e0 	.word	0x200003e0
 8000f3c:	20000398 	.word	0x20000398
 8000f40:	200003e4 	.word	0x200003e4
 8000f44:	200003e8 	.word	0x200003e8

08000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>:
	switch (i) {
 8000f48:	280b      	cmp	r0, #11
 8000f4a:	d834      	bhi.n	8000fb6 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x6e>
 8000f4c:	e8df f000 	tbb	[pc, r0]
 8000f50:	15110d06 	.word	0x15110d06
 8000f54:	25211d19 	.word	0x25211d19
 8000f58:	312f2d29 	.word	0x312f2d29
		value = SDADC1_Single[6];
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f5e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
	return value + 0x8000;
 8000f62:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
}
 8000f66:	b280      	uxth	r0, r0
 8000f68:	4770      	bx	lr
		value = SDADC1_Single[5];
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f6c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
		break;
 8000f70:	e7f7      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[4];
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f74:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
		break;
 8000f78:	e7f3      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[3];
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f7c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
		break;
 8000f80:	e7ef      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[8];
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f84:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
		break;
 8000f88:	e7eb      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[7];
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
 8000f8c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
		break;
 8000f90:	e7e7      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[2];
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
		value = SDADC2_Single[2];
 8000f94:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
		break;
 8000f98:	e7e3      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[1];
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
		value = SDADC2_Single[1];
 8000f9c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
		break;
 8000fa0:	e7df      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC1_Single[0];
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <STM32_PLC_Analog_Input_ADC_Get_Raw+0x74>)
		value = SDADC2_Single[0];
 8000fa4:	f9b3 0000 	ldrsh.w	r0, [r3]
		break;
 8000fa8:	e7db      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
		value = SDADC2_Single[2];
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x78>)
 8000fac:	e7f2      	b.n	8000f94 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x4c>
		value = SDADC2_Single[1];
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x78>)
 8000fb0:	e7f4      	b.n	8000f9c <STM32_PLC_Analog_Input_ADC_Get_Raw+0x54>
		value = SDADC2_Single[0];
 8000fb2:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x78>)
 8000fb4:	e7f6      	b.n	8000fa4 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x5c>
	switch (i) {
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	e7d3      	b.n	8000f62 <STM32_PLC_Analog_Input_ADC_Get_Raw+0x1a>
 8000fba:	bf00      	nop
 8000fbc:	20000374 	.word	0x20000374
 8000fc0:	20000386 	.word	0x20000386

08000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>:
float STM32_PLC_Analog_Input_ADC_Get_Calibrated(uint8_t i) {
 8000fc4:	b508      	push	{r3, lr}
 8000fc6:	4602      	mov	r2, r0
	return scalar_list[i]*((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) + bias_list[i];
 8000fc8:	f7ff ffbe 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <STM32_PLC_Analog_Input_ADC_Get_Calibrated+0x2c>)
 8000fce:	ee07 0a90 	vmov	s15, r0
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated+0x30>)
 8000fd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000fd8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe0:	ed93 7a00 	vldr	s14, [r3]
 8000fe4:	ed92 0a00 	vldr	s0, [r2]
}
 8000fe8:	eea7 0a27 	vfma.f32	s0, s14, s15
 8000fec:	bd08      	pop	{r3, pc}
 8000fee:	bf00      	nop
 8000ff0:	200003e8 	.word	0x200003e8
 8000ff4:	20000398 	.word	0x20000398

08000ff8 <STM32_PLC_Analog_Input_DADC_Get_Raw>:
	switch(i){
 8000ff8:	2804      	cmp	r0, #4
 8000ffa:	d818      	bhi.n	800102e <STM32_PLC_Analog_Input_DADC_Get_Raw+0x36>
 8000ffc:	e8df f000 	tbb	[pc, r0]
 8001000:	0f0b0703 	.word	0x0f0b0703
 8001004:	13          	.byte	0x13
 8001005:	00          	.byte	0x00
		value = SDADC3_Differential[4];
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001008:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
		break;
 800100c:	4770      	bx	lr
		value = SDADC3_Differential[3];
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001010:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
		break;
 8001014:	4770      	bx	lr
		value = SDADC3_Differential[2];
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001018:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
		break;
 800101c:	4770      	bx	lr
		value = SDADC3_Differential[1];
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001020:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
		break;
 8001024:	4770      	bx	lr
		value = SDADC3_Differential[0];
 8001026:	4b03      	ldr	r3, [pc, #12]	; (8001034 <STM32_PLC_Analog_Input_DADC_Get_Raw+0x3c>)
 8001028:	f9b3 0000 	ldrsh.w	r0, [r3]
		break;
 800102c:	4770      	bx	lr
	switch(i){
 800102e:	2000      	movs	r0, #0
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	2000038c 	.word	0x2000038c

08001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>:
float STM32_PLC_Analog_Input_DADC_Get_Calibrated(uint8_t i) {
 8001038:	b508      	push	{r3, lr}
	return scalar_list[12+i]*((float)STM32_PLC_Analog_Input_DADC_Get_Raw(i)) + bias_list[12+i];
 800103a:	f100 020c 	add.w	r2, r0, #12
 800103e:	f7ff ffdb 	bl	8000ff8 <STM32_PLC_Analog_Input_DADC_Get_Raw>
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <STM32_PLC_Analog_Input_DADC_Get_Calibrated+0x2c>)
 8001044:	ee07 0a90 	vmov	s15, r0
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <STM32_PLC_Analog_Input_DADC_Get_Calibrated+0x30>)
 800104a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800104e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001056:	ed93 7a00 	vldr	s14, [r3]
 800105a:	ed92 0a00 	vldr	s0, [r2]
}
 800105e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001062:	bd08      	pop	{r3, pc}
 8001064:	200003e8 	.word	0x200003e8
 8001068:	20000398 	.word	0x20000398

0800106c <STM32_PLC_Analog_Input_Set_Calibration>:
	scalar_list[input_index] = scalar;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <STM32_PLC_Analog_Input_Set_Calibration+0x1c>)
	bias_list[input_index] = bias;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <STM32_PLC_Analog_Input_Set_Calibration+0x20>)
	scalar_list[input_index] = scalar;
 8001070:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	bias_list[input_index] = bias;
 8001074:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	scalar_list[input_index] = scalar;
 8001078:	ed82 0a00 	vstr	s0, [r2]
	bias_list[input_index] = bias;
 800107c:	edc3 0a00 	vstr	s1, [r3]
	if(save_to_flash)
 8001080:	b109      	cbz	r1, 8001086 <STM32_PLC_Analog_Input_Set_Calibration+0x1a>
		STM32_PLC_Flash_Set_Analog_Input_Calibration(input_index, scalar, bias);
 8001082:	f000 ba4f 	b.w	8001524 <STM32_PLC_Flash_Set_Analog_Input_Calibration>
}
 8001086:	4770      	bx	lr
 8001088:	200003e8 	.word	0x200003e8
 800108c:	20000398 	.word	0x20000398

08001090 <STM32_PLC_Analog_Output_Set>:
	STM32_PLC_Analog_Output_Reset();
}

void STM32_PLC_Analog_Output_Set(uint8_t i, uint16_t output) {
	/* Safety */
	if(output > 4095)
 8001090:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001094:	428b      	cmp	r3, r1
 8001096:	bf28      	it	cs
 8001098:	460b      	movcs	r3, r1
		output = 4095;
	switch(i){
 800109a:	2801      	cmp	r0, #1
void STM32_PLC_Analog_Output_Set(uint8_t i, uint16_t output) {
 800109c:	4602      	mov	r2, r0
	switch(i){
 800109e:	d007      	beq.n	80010b0 <STM32_PLC_Analog_Output_Set+0x20>
 80010a0:	2802      	cmp	r0, #2
 80010a2:	d008      	beq.n	80010b6 <STM32_PLC_Analog_Output_Set+0x26>
 80010a4:	b958      	cbnz	r0, 80010be <STM32_PLC_Analog_Output_Set+0x2e>
	case 0:
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, output);
 80010a6:	4601      	mov	r1, r0
		break;
	case 1:
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, output);
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <STM32_PLC_Analog_Output_Set+0x30>)
		break;
	case 2:
		HAL_DAC_SetValue(hanalog2, DAC2_CHANNEL_1, DAC_ALIGN_12B_R, output);
 80010aa:	6800      	ldr	r0, [r0, #0]
 80010ac:	f008 b8fb 	b.w	80092a6 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(hanalog1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, output);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2110      	movs	r1, #16
 80010b4:	e7f8      	b.n	80010a8 <STM32_PLC_Analog_Output_Set+0x18>
		HAL_DAC_SetValue(hanalog2, DAC2_CHANNEL_1, DAC_ALIGN_12B_R, output);
 80010b6:	2200      	movs	r2, #0
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <STM32_PLC_Analog_Output_Set+0x34>)
 80010ba:	4611      	mov	r1, r2
 80010bc:	e7f5      	b.n	80010aa <STM32_PLC_Analog_Output_Set+0x1a>
		break;
	}
}
 80010be:	4770      	bx	lr
 80010c0:	2000042c 	.word	0x2000042c
 80010c4:	20000430 	.word	0x20000430

080010c8 <STM32_PLC_Analog_Output_Reset>:

void STM32_PLC_Analog_Output_Reset() {
 80010c8:	b508      	push	{r3, lr}
	for(uint8_t i = 0; i < 3; i++)
		STM32_PLC_Analog_Output_Set(i, 0);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4608      	mov	r0, r1
 80010ce:	f7ff ffdf 	bl	8001090 <STM32_PLC_Analog_Output_Set>
 80010d2:	2100      	movs	r1, #0
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff ffdb 	bl	8001090 <STM32_PLC_Analog_Output_Set>
}
 80010da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		STM32_PLC_Analog_Output_Set(i, 0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff bfd5 	b.w	8001090 <STM32_PLC_Analog_Output_Set>
	...

080010e8 <STM32_PLC_Analog_Output>:
void STM32_PLC_Analog_Output(DAC_HandleTypeDef* hdac1, DAC_HandleTypeDef* hdac2, TIM_HandleTypeDef* htim6) {
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4604      	mov	r4, r0
	HAL_TIM_Base_Start(htim6);
 80010ec:	4610      	mov	r0, r2
void STM32_PLC_Analog_Output(DAC_HandleTypeDef* hdac1, DAC_HandleTypeDef* hdac2, TIM_HandleTypeDef* htim6) {
 80010ee:	460d      	mov	r5, r1
	HAL_TIM_Base_Start(htim6);
 80010f0:	f00a ffe0 	bl	800c0b4 <HAL_TIM_Base_Start>
	if(HAL_DAC_Start(hdac1, DAC1_CHANNEL_1) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4620      	mov	r0, r4
 80010f8:	f008 f8e7 	bl	80092ca <HAL_DAC_Start>
 80010fc:	b108      	cbz	r0, 8001102 <STM32_PLC_Analog_Output+0x1a>
		Error_Handler();
 80010fe:	f006 f9cd 	bl	800749c <Error_Handler>
	if(HAL_DAC_Start(hdac1, DAC1_CHANNEL_2) != HAL_OK)
 8001102:	2110      	movs	r1, #16
 8001104:	4620      	mov	r0, r4
 8001106:	f008 f8e0 	bl	80092ca <HAL_DAC_Start>
 800110a:	b108      	cbz	r0, 8001110 <STM32_PLC_Analog_Output+0x28>
		Error_Handler();
 800110c:	f006 f9c6 	bl	800749c <Error_Handler>
	if(HAL_DAC_Start(hdac2, DAC2_CHANNEL_1) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4628      	mov	r0, r5
 8001114:	f008 f8d9 	bl	80092ca <HAL_DAC_Start>
 8001118:	b108      	cbz	r0, 800111e <STM32_PLC_Analog_Output+0x36>
		Error_Handler();
 800111a:	f006 f9bf 	bl	800749c <Error_Handler>
	hanalog1 = hdac1;
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <STM32_PLC_Analog_Output+0x48>)
 8001120:	601c      	str	r4, [r3, #0]
	hanalog2 = hdac2;
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <STM32_PLC_Analog_Output+0x4c>)
 8001124:	601d      	str	r5, [r3, #0]
}
 8001126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	STM32_PLC_Analog_Output_Reset();
 800112a:	f7ff bfcd 	b.w	80010c8 <STM32_PLC_Analog_Output_Reset>
 800112e:	bf00      	nop
 8001130:	2000042c 	.word	0x2000042c
 8001134:	20000430 	.word	0x20000430

08001138 <STM32_PLC_CAN>:
static void Create_CAN_Interrupt(CAN_HandleTypeDef *hcan);
static uint8_t rxData[8] = {0};
static uint32_t ID = 0;
static bool is_new_message;

void STM32_PLC_CAN(CAN_HandleTypeDef *hcan) {
 8001138:	b510      	push	{r4, lr}
	can_handler = hcan;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <STM32_PLC_CAN+0x54>)
void STM32_PLC_CAN(CAN_HandleTypeDef *hcan) {
 800113c:	b08a      	sub	sp, #40	; 0x28
	can_handler = hcan;
 800113e:	6018      	str	r0, [r3, #0]
			Error_Handler();
}

static void Create_CAN_Filter(CAN_HandleTypeDef *hcan) {
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001140:	2300      	movs	r3, #0
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001142:	2201      	movs	r2, #1
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001144:	e9cd 3305 	strd	r3, r3, [sp, #20]
	sFilterConfig.FilterIdHigh = 0x0000;
	sFilterConfig.FilterIdLow = 0x0000;
 8001148:	e9cd 3300 	strd	r3, r3, [sp]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800114c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001150:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8001152:	4669      	mov	r1, sp
	sFilterConfig.SlaveStartFilterBank = 14;
 8001154:	230e      	movs	r3, #14
void STM32_PLC_CAN(CAN_HandleTypeDef *hcan) {
 8001156:	4604      	mov	r4, r0
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001158:	9207      	str	r2, [sp, #28]
	sFilterConfig.FilterActivation = ENABLE;
 800115a:	9208      	str	r2, [sp, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800115c:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 800115e:	f007 fdaa 	bl	8008cb6 <HAL_CAN_ConfigFilter>
 8001162:	b108      	cbz	r0, 8001168 <STM32_PLC_CAN+0x30>
		Error_Handler();
 8001164:	f006 f99a 	bl	800749c <Error_Handler>
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8001168:	4620      	mov	r0, r4
 800116a:	f007 fe13 	bl	8008d94 <HAL_CAN_Start>
 800116e:	b108      	cbz	r0, 8001174 <STM32_PLC_CAN+0x3c>
		Error_Handler();
 8001170:	f006 f994 	bl	800749c <Error_Handler>
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001174:	2102      	movs	r1, #2
 8001176:	4620      	mov	r0, r4
 8001178:	f007 ff01 	bl	8008f7e <HAL_CAN_ActivateNotification>
 800117c:	b120      	cbz	r0, 8001188 <STM32_PLC_CAN+0x50>
}
 800117e:	b00a      	add	sp, #40	; 0x28
 8001180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			Error_Handler();
 8001184:	f006 b98a 	b.w	800749c <Error_Handler>
}
 8001188:	b00a      	add	sp, #40	; 0x28
 800118a:	bd10      	pop	{r4, pc}
 800118c:	20000438 	.word	0x20000438

08001190 <STM32_PLC_CAN_Transmit>:
HAL_StatusTypeDef STM32_PLC_CAN_Transmit(uint8_t TxData[], CAN_TxHeaderTypeDef *TxHeader) {
 8001190:	b507      	push	{r0, r1, r2, lr}
 8001192:	4602      	mov	r2, r0
	return HAL_CAN_AddTxMessage(can_handler, TxHeader, TxData, &TxMailbox);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <STM32_PLC_CAN_Transmit+0x14>)
 8001196:	ab01      	add	r3, sp, #4
 8001198:	6800      	ldr	r0, [r0, #0]
 800119a:	f007 fe29 	bl	8008df0 <HAL_CAN_AddTxMessage>
}
 800119e:	b003      	add	sp, #12
 80011a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a4:	20000438 	.word	0x20000438

080011a8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011a8:	b500      	push	{lr}
 80011aa:	b08d      	sub	sp, #52	; 0x34
	CAN_RxHeaderTypeDef rxHeader = {0};
 80011ac:	221c      	movs	r2, #28
 80011ae:	2100      	movs	r1, #0
 80011b0:	a805      	add	r0, sp, #20
 80011b2:	f00d fbab 	bl	800e90c <memset>
	if (HAL_CAN_GetRxMessage(can_handler, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80011ba:	6800      	ldr	r0, [r0, #0]
 80011bc:	aa05      	add	r2, sp, #20
 80011be:	2100      	movs	r1, #0
 80011c0:	f007 fe66 	bl	8008e90 <HAL_CAN_GetRxMessage>
 80011c4:	b108      	cbz	r0, 80011ca <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Error_Handler();
 80011c6:	f006 f969 	bl	800749c <Error_Handler>
	uint8_t send_data_array[20] = {0};
 80011ca:	2100      	movs	r1, #0
 80011cc:	2210      	movs	r2, #16
 80011ce:	a801      	add	r0, sp, #4
 80011d0:	9100      	str	r1, [sp, #0]
 80011d2:	f00d fb9b 	bl	800e90c <memset>
	ID = rxHeader.IDE == CAN_ID_STD ? rxHeader.StdId : rxHeader.ExtId;
 80011d6:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
	send_data_array[index++] = rxHeader.IDE;
 80011da:	9a07      	ldr	r2, [sp, #28]
 80011dc:	f88d 2001 	strb.w	r2, [sp, #1]
	ID = rxHeader.IDE == CAN_ID_STD ? rxHeader.StdId : rxHeader.ExtId;
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	bf18      	it	ne
 80011e4:	460b      	movne	r3, r1
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
	send_data_array[index++] = ID;
 80011e8:	f88d 3005 	strb.w	r3, [sp, #5]
	ID = rxHeader.IDE == CAN_ID_STD ? rxHeader.StdId : rxHeader.ExtId;
 80011ec:	6013      	str	r3, [r2, #0]
	send_data_array[index++] = ID >> 24;
 80011ee:	0e1a      	lsrs	r2, r3, #24
 80011f0:	f88d 2002 	strb.w	r2, [sp, #2]
	send_data_array[index++] = ID >> 16;
 80011f4:	0c1a      	lsrs	r2, r3, #16
 80011f6:	f88d 2003 	strb.w	r2, [sp, #3]
	send_data_array[index++] = ID >> 8;
 80011fa:	0a1a      	lsrs	r2, r3, #8
 80011fc:	f88d 2004 	strb.w	r2, [sp, #4]
		send_data_array[index++] = rxData[i];
 8001200:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
	send_data_array[index++] = rxHeader.DLC;
 8001202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001204:	f88d 3006 	strb.w	r3, [sp, #6]
		send_data_array[index++] = rxData[i];
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	f8cd 3007 	str.w	r3, [sp, #7]
	CDC_Transmit_FS(send_data_array, index);
 800120e:	210f      	movs	r1, #15
		send_data_array[index++] = rxData[i];
 8001210:	6853      	ldr	r3, [r2, #4]
 8001212:	f8cd 300b 	str.w	r3, [sp, #11]
	CDC_Transmit_FS(send_data_array, index);
 8001216:	4668      	mov	r0, sp
 8001218:	f00d f950 	bl	800e4bc <CDC_Transmit_FS>
	HAL_GPIO_TogglePin(LED_CAN_GPIO_Port, LED_CAN_Pin);
 800121c:	4807      	ldr	r0, [pc, #28]	; (800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800121e:	2110      	movs	r1, #16
 8001220:	f008 fb53 	bl	80098ca <HAL_GPIO_TogglePin>
	is_new_message = true;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
}
 800122a:	b00d      	add	sp, #52	; 0x34
 800122c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001230:	20000438 	.word	0x20000438
 8001234:	2000043d 	.word	0x2000043d
 8001238:	20000434 	.word	0x20000434
 800123c:	48000800 	.word	0x48000800
 8001240:	2000043c 	.word	0x2000043c

08001244 <STM32_PLC_Digital_Input_Get>:
 *      Author: Daniel Mårtensson
 */

#include "Functions.h"

bool STM32_PLC_Digital_Input_Get(uint8_t i) {
 8001244:	b508      	push	{r3, lr}
	switch (i) {
 8001246:	2809      	cmp	r0, #9
 8001248:	d826      	bhi.n	8001298 <STM32_PLC_Digital_Input_Get+0x54>
 800124a:	e8df f000 	tbb	[pc, r0]
 800124e:	0d05      	.short	0x0d05
 8001250:	1513110f 	.word	0x1513110f
 8001254:	221e1c19 	.word	0x221e1c19
	case 0:
		return HAL_GPIO_ReadPin(DI0_GPIO_Port, DI0_Pin);
 8001258:	2104      	movs	r1, #4
	case 1:
		return HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <STM32_PLC_Digital_Input_Get+0x58>)
	case 7:
		return HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
	case 8:
		return HAL_GPIO_ReadPin(DI8_GPIO_Port, DI8_Pin);
	case 9:
		return HAL_GPIO_ReadPin(DI9_GPIO_Port, DI9_Pin);
 800125c:	f008 fb2a 	bl	80098b4 <HAL_GPIO_ReadPin>
 8001260:	3800      	subs	r0, #0
 8001262:	bf18      	it	ne
 8001264:	2001      	movne	r0, #1
	default:
		return 0;
	}
}
 8001266:	bd08      	pop	{r3, pc}
		return HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8001268:	2108      	movs	r1, #8
 800126a:	e7f6      	b.n	800125a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 800126c:	2110      	movs	r1, #16
 800126e:	e7f4      	b.n	800125a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 8001270:	2120      	movs	r1, #32
 8001272:	e7f2      	b.n	800125a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI4_GPIO_Port, DI4_Pin);
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	e7f0      	b.n	800125a <STM32_PLC_Digital_Input_Get+0x16>
		return HAL_GPIO_ReadPin(DI5_GPIO_Port, DI5_Pin);
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <STM32_PLC_Digital_Input_Get+0x5c>)
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	e7ed      	b.n	800125c <STM32_PLC_Digital_Input_Get+0x18>
		return HAL_GPIO_ReadPin(DI6_GPIO_Port, DI6_Pin);
 8001280:	2120      	movs	r1, #32
		return HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <STM32_PLC_Digital_Input_Get+0x60>)
 8001284:	e7ea      	b.n	800125c <STM32_PLC_Digital_Input_Get+0x18>
 8001286:	2110      	movs	r1, #16
 8001288:	e7fb      	b.n	8001282 <STM32_PLC_Digital_Input_Get+0x3e>
		return HAL_GPIO_ReadPin(DI8_GPIO_Port, DI8_Pin);
 800128a:	f44f 7100 	mov.w	r1, #512	; 0x200
		return HAL_GPIO_ReadPin(DI9_GPIO_Port, DI9_Pin);
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <STM32_PLC_Digital_Input_Get+0x64>)
 8001290:	e7e4      	b.n	800125c <STM32_PLC_Digital_Input_Get+0x18>
 8001292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001296:	e7fa      	b.n	800128e <STM32_PLC_Digital_Input_Get+0x4a>
	switch (i) {
 8001298:	2000      	movs	r0, #0
 800129a:	e7e4      	b.n	8001266 <STM32_PLC_Digital_Input_Get+0x22>
 800129c:	48001000 	.word	0x48001000
 80012a0:	48000800 	.word	0x48000800
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48001400 	.word	0x48001400

080012ac <STM32_PLC_Encoder>:
static TIM_HandleTypeDef* tim4_handle;
static TIM_HandleTypeDef* tim19_handle;
static TIM_HandleTypeDef* tim3_handle;
static uint16_t pulses_list[3] = {1};

void STM32_PLC_Encoder(TIM_HandleTypeDef* htim4, TIM_HandleTypeDef* htim19, TIM_HandleTypeDef* htim3) {
 80012ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012ae:	460d      	mov	r5, r1
	/* Encoder - Prescaler does not effect encoder */
	if(HAL_TIM_Encoder_Start(htim4, TIM_CHANNEL_ALL) != HAL_OK)
 80012b0:	213c      	movs	r1, #60	; 0x3c
void STM32_PLC_Encoder(TIM_HandleTypeDef* htim4, TIM_HandleTypeDef* htim19, TIM_HandleTypeDef* htim3) {
 80012b2:	4606      	mov	r6, r0
 80012b4:	4614      	mov	r4, r2
	if(HAL_TIM_Encoder_Start(htim4, TIM_CHANNEL_ALL) != HAL_OK)
 80012b6:	f00a ff32 	bl	800c11e <HAL_TIM_Encoder_Start>
 80012ba:	b108      	cbz	r0, 80012c0 <STM32_PLC_Encoder+0x14>
		Error_Handler();
 80012bc:	f006 f8ee 	bl	800749c <Error_Handler>
	if(HAL_TIM_Encoder_Start(htim19, TIM_CHANNEL_ALL) != HAL_OK)
 80012c0:	213c      	movs	r1, #60	; 0x3c
 80012c2:	4628      	mov	r0, r5
 80012c4:	f00a ff2b 	bl	800c11e <HAL_TIM_Encoder_Start>
 80012c8:	b108      	cbz	r0, 80012ce <STM32_PLC_Encoder+0x22>
		Error_Handler();
 80012ca:	f006 f8e7 	bl	800749c <Error_Handler>
	if(HAL_TIM_Encoder_Start(htim3, TIM_CHANNEL_ALL) != HAL_OK)
 80012ce:	213c      	movs	r1, #60	; 0x3c
 80012d0:	4620      	mov	r0, r4
 80012d2:	f00a ff24 	bl	800c11e <HAL_TIM_Encoder_Start>
 80012d6:	b108      	cbz	r0, 80012dc <STM32_PLC_Encoder+0x30>
			Error_Handler();
 80012d8:	f006 f8e0 	bl	800749c <Error_Handler>

	/* Save */
	tim4_handle = htim4;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <STM32_PLC_Encoder+0x5c>)
 80012de:	601e      	str	r6, [r3, #0]
	tim19_handle = htim19;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <STM32_PLC_Encoder+0x60>)
 80012e2:	601d      	str	r5, [r3, #0]
	tim3_handle = htim3;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <STM32_PLC_Encoder+0x64>)
 80012e6:	4d0b      	ldr	r5, [pc, #44]	; (8001314 <STM32_PLC_Encoder+0x68>)
 80012e8:	601c      	str	r4, [r3, #0]
 80012ea:	2400      	movs	r4, #0

	/* Get calibration */
	uint16_t pulses;
	for(uint8_t i = 0; i < 3; i++){
		STM32_PLC_Flash_Get_Encoder_Pulses(i, &pulses);
 80012ec:	b2e0      	uxtb	r0, r4
 80012ee:	f10d 0106 	add.w	r1, sp, #6
	for(uint8_t i = 0; i < 3; i++){
 80012f2:	3401      	adds	r4, #1
		STM32_PLC_Flash_Get_Encoder_Pulses(i, &pulses);
 80012f4:	f000 fa42 	bl	800177c <STM32_PLC_Flash_Get_Encoder_Pulses>
float STM32_PLC_Encoder_Get_Calibrated(uint8_t i){
	return (float)(STM32_PLC_Encoder_Get_Raw(i))/((float)pulses_list[i]);
}

void STM32_PLC_Encoder_Set_Calibration(uint8_t pulses_index, uint16_t pulses, bool save_to_flash){
	pulses_list[pulses_index] = pulses;
 80012f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80012fc:	f825 3b02 	strh.w	r3, [r5], #2
	for(uint8_t i = 0; i < 3; i++){
 8001300:	2c03      	cmp	r4, #3
 8001302:	d1f3      	bne.n	80012ec <STM32_PLC_Encoder+0x40>
}
 8001304:	b002      	add	sp, #8
 8001306:	bd70      	pop	{r4, r5, r6, pc}
 8001308:	20000450 	.word	0x20000450
 800130c:	20000448 	.word	0x20000448
 8001310:	2000044c 	.word	0x2000044c
 8001314:	20000000 	.word	0x20000000

08001318 <STM32_PLC_Encoder_Get_Raw>:
	switch(i){
 8001318:	2801      	cmp	r0, #1
 800131a:	d008      	beq.n	800132e <STM32_PLC_Encoder_Get_Raw+0x16>
 800131c:	2802      	cmp	r0, #2
 800131e:	d008      	beq.n	8001332 <STM32_PLC_Encoder_Get_Raw+0x1a>
 8001320:	b948      	cbnz	r0, 8001336 <STM32_PLC_Encoder_Get_Raw+0x1e>
		return __HAL_TIM_GET_COUNTER(tim4_handle);
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <STM32_PLC_Encoder_Get_Raw+0x24>)
		return __HAL_TIM_GET_COUNTER(tim19_handle);
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800132a:	b200      	sxth	r0, r0
 800132c:	4770      	bx	lr
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <STM32_PLC_Encoder_Get_Raw+0x28>)
 8001330:	e7f8      	b.n	8001324 <STM32_PLC_Encoder_Get_Raw+0xc>
		return __HAL_TIM_GET_COUNTER(tim3_handle);
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <STM32_PLC_Encoder_Get_Raw+0x2c>)
 8001334:	e7f6      	b.n	8001324 <STM32_PLC_Encoder_Get_Raw+0xc>
	switch(i){
 8001336:	2000      	movs	r0, #0
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000450 	.word	0x20000450
 8001340:	20000448 	.word	0x20000448
 8001344:	2000044c 	.word	0x2000044c

08001348 <STM32_PLC_Encoder_Get_Calibrated>:
float STM32_PLC_Encoder_Get_Calibrated(uint8_t i){
 8001348:	b508      	push	{r3, lr}
 800134a:	4602      	mov	r2, r0
	return (float)(STM32_PLC_Encoder_Get_Raw(i))/((float)pulses_list[i]);
 800134c:	f7ff ffe4 	bl	8001318 <STM32_PLC_Encoder_Get_Raw>
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <STM32_PLC_Encoder_Get_Calibrated+0x24>)
 8001352:	ee07 0a90 	vmov	s15, r0
 8001356:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800135a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001366:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800136a:	bd08      	pop	{r3, pc}
 800136c:	20000000 	.word	0x20000000

08001370 <STM32_PLC_Encoder_Set_Calibration>:
	pulses_list[pulses_index] = pulses;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <STM32_PLC_Encoder_Set_Calibration+0x10>)
 8001372:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
	if(save_to_flash)
 8001376:	b10a      	cbz	r2, 800137c <STM32_PLC_Encoder_Set_Calibration+0xc>
		STM32_PLC_Flash_Set_Encoder_Pulses(pulses_index, pulses);
 8001378:	f000 b90a 	b.w	8001590 <STM32_PLC_Flash_Set_Encoder_Pulses>
}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000

08001384 <STM32_PLC_Encoder_Get_Calibration>:

void STM32_PLC_Encoder_Get_Calibration(uint8_t pulses_index, uint16_t *pulses){
	STM32_PLC_Flash_Get_Encoder_Pulses(pulses_index, pulses);
 8001384:	f000 b9fa 	b.w	800177c <STM32_PLC_Flash_Get_Encoder_Pulses>

08001388 <read_flash.constprop.0>:
	*pulses = data[89 + pulses_index];
}


static void read_flash(uint16_t data[], uint8_t length){
	uint32_t address = ADDR_FLASH_PAGE_127;
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <read_flash.constprop.0+0x14>)
	for(uint8_t i = 0; i < length; i++){
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <read_flash.constprop.0+0x18>)
 800138c:	3802      	subs	r0, #2
		data[i] = *(__IO uint16_t*)address;
 800138e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001392:	f820 1f02 	strh.w	r1, [r0, #2]!
	for(uint8_t i = 0; i < length; i++){
 8001396:	4293      	cmp	r3, r2
 8001398:	d1f9      	bne.n	800138e <read_flash.constprop.0+0x6>
		address += 2;
	}
}
 800139a:	4770      	bx	lr
 800139c:	0803f800 	.word	0x0803f800
 80013a0:	0803f8b8 	.word	0x0803f8b8

080013a4 <write_flash>:

static void write_flash(uint16_t value, uint8_t overwrite_index){
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	b0b2      	sub	sp, #200	; 0xc8
 80013a8:	4605      	mov	r5, r0

	/* Create the data */
	uint16_t data[FLASH_LENGTH_DATA];
	read_flash(data, FLASH_LENGTH_DATA);
 80013aa:	a804      	add	r0, sp, #16
static void write_flash(uint16_t value, uint8_t overwrite_index){
 80013ac:	460c      	mov	r4, r1
	read_flash(data, FLASH_LENGTH_DATA);
 80013ae:	f7ff ffeb 	bl	8001388 <read_flash.constprop.0>

	/* Overwrite */
	data[overwrite_index] = value;
 80013b2:	ab32      	add	r3, sp, #200	; 0xc8
 80013b4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80013b8:	f824 5cb8 	strh.w	r5, [r4, #-184]

	/* Unlock */
	HAL_FLASH_Unlock();
 80013bc:	f008 f8b2 	bl	8009524 <HAL_FLASH_Unlock>

	/* Erase */
	FLASH_EraseInitTypeDef eraseInitStruct;
	eraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
	eraseInitStruct.PageAddress = ADDR_FLASH_PAGE_127;
 80013c0:	4a10      	ldr	r2, [pc, #64]	; (8001404 <write_flash+0x60>)
 80013c2:	2300      	movs	r3, #0
 80013c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
	eraseInitStruct.NbPages     = 1;
	uint32_t PageError = 0;
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK)
 80013c8:	4669      	mov	r1, sp
	eraseInitStruct.NbPages     = 1;
 80013ca:	2201      	movs	r2, #1
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK)
 80013cc:	a801      	add	r0, sp, #4
	eraseInitStruct.NbPages     = 1;
 80013ce:	9203      	str	r2, [sp, #12]
	uint32_t PageError = 0;
 80013d0:	9300      	str	r3, [sp, #0]
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &PageError) != HAL_OK)
 80013d2:	f008 f95d 	bl	8009690 <HAL_FLASHEx_Erase>
 80013d6:	b108      	cbz	r0, 80013dc <write_flash+0x38>
		Error_Handler();
 80013d8:	f006 f860 	bl	800749c <Error_Handler>
static void write_flash(uint16_t value, uint8_t overwrite_index){
 80013dc:	4d09      	ldr	r5, [pc, #36]	; (8001404 <write_flash+0x60>)

	/* Write data */
	uint32_t index = 0;
	for(uint8_t i = 0; i < FLASH_LENGTH_DATA; i++){
 80013de:	4e0a      	ldr	r6, [pc, #40]	; (8001408 <write_flash+0x64>)
 80013e0:	ac04      	add	r4, sp, #16
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ADDR_FLASH_PAGE_127 + index, data[i]) != HAL_OK)
 80013e2:	f834 2b02 	ldrh.w	r2, [r4], #2
 80013e6:	2300      	movs	r3, #0
 80013e8:	4629      	mov	r1, r5
 80013ea:	2001      	movs	r0, #1
 80013ec:	f008 f8dc 	bl	80095a8 <HAL_FLASH_Program>
 80013f0:	b108      	cbz	r0, 80013f6 <write_flash+0x52>
			Error_Handler();
 80013f2:	f006 f853 	bl	800749c <Error_Handler>
	for(uint8_t i = 0; i < FLASH_LENGTH_DATA; i++){
 80013f6:	3502      	adds	r5, #2
 80013f8:	42b5      	cmp	r5, r6
 80013fa:	d1f2      	bne.n	80013e2 <write_flash+0x3e>
		index += 2;
	}

	/* Lock */
	HAL_FLASH_Lock();
 80013fc:	f008 f8a4 	bl	8009548 <HAL_FLASH_Lock>
}
 8001400:	b032      	add	sp, #200	; 0xc8
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	0803f800 	.word	0x0803f800
 8001408:	0803f8b8 	.word	0x0803f8b8

0800140c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0>:
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0(uint8_t sdadc, uint8_t gain){
 800140c:	4603      	mov	r3, r0
	switch(sdadc){
 800140e:	2b02      	cmp	r3, #2
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0(uint8_t sdadc, uint8_t gain){
 8001410:	4608      	mov	r0, r1
	switch(sdadc){
 8001412:	d006      	beq.n	8001422 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x16>
 8001414:	2b03      	cmp	r3, #3
 8001416:	d006      	beq.n	8001426 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x1a>
 8001418:	2b01      	cmp	r3, #1
 800141a:	d106      	bne.n	800142a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x1e>
		write_flash(gain, 0);
 800141c:	2100      	movs	r1, #0
		write_flash(gain, 6);
 800141e:	f7ff bfc1 	b.w	80013a4 <write_flash>
		write_flash(gain, 3);
 8001422:	2103      	movs	r1, #3
 8001424:	e7fb      	b.n	800141e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x12>
		write_flash(gain, 6);
 8001426:	2106      	movs	r1, #6
 8001428:	e7f9      	b.n	800141e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_0+0x12>
}
 800142a:	4770      	bx	lr

0800142c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1>:
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1(uint8_t sdadc, uint8_t gain){
 800142c:	4603      	mov	r3, r0
	switch(sdadc){
 800142e:	2b02      	cmp	r3, #2
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1(uint8_t sdadc, uint8_t gain){
 8001430:	4608      	mov	r0, r1
	switch(sdadc){
 8001432:	d006      	beq.n	8001442 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x16>
 8001434:	2b03      	cmp	r3, #3
 8001436:	d006      	beq.n	8001446 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x1a>
 8001438:	2b01      	cmp	r3, #1
 800143a:	d106      	bne.n	800144a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x1e>
		write_flash(gain, 1);
 800143c:	4619      	mov	r1, r3
		write_flash(gain, 7);
 800143e:	f7ff bfb1 	b.w	80013a4 <write_flash>
		write_flash(gain, 4);
 8001442:	2104      	movs	r1, #4
 8001444:	e7fb      	b.n	800143e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x12>
		write_flash(gain, 7);
 8001446:	2107      	movs	r1, #7
 8001448:	e7f9      	b.n	800143e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_1+0x12>
}
 800144a:	4770      	bx	lr

0800144c <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2>:
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(uint8_t sdadc, uint8_t gain){
 800144c:	4603      	mov	r3, r0
	switch(sdadc){
 800144e:	2b02      	cmp	r3, #2
void STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2(uint8_t sdadc, uint8_t gain){
 8001450:	4608      	mov	r0, r1
	switch(sdadc){
 8001452:	d006      	beq.n	8001462 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x16>
 8001454:	2b03      	cmp	r3, #3
 8001456:	d006      	beq.n	8001466 <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x1a>
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x1e>
		write_flash(gain, 2);
 800145c:	2102      	movs	r1, #2
		write_flash(gain, 8);
 800145e:	f7ff bfa1 	b.w	80013a4 <write_flash>
		write_flash(gain, 5);
 8001462:	2105      	movs	r1, #5
 8001464:	e7fb      	b.n	800145e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x12>
		write_flash(gain, 8);
 8001466:	2108      	movs	r1, #8
 8001468:	e7f9      	b.n	800145e <STM32_PLC_Flash_Set_ADC_Gain_For_Configuration_Index_2+0x12>
}
 800146a:	4770      	bx	lr

0800146c <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_0_3>:
	write_flash(prescaler, 9);
 800146c:	2109      	movs	r1, #9
 800146e:	f7ff bf99 	b.w	80013a4 <write_flash>

08001472 <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_4_7>:
	write_flash(prescaler, 10);
 8001472:	210a      	movs	r1, #10
 8001474:	f7ff bf96 	b.w	80013a4 <write_flash>

08001478 <STM32_PLC_Flash_Set_Alarm_Enable>:
void STM32_PLC_Flash_Set_Alarm_Enable(bool alarm_A_enabled, bool alarm_B_enabled){
 8001478:	460b      	mov	r3, r1
	write_flash(enables, 11);
 800147a:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
 800147e:	210b      	movs	r1, #11
 8001480:	f7ff bf90 	b.w	80013a4 <write_flash>

08001484 <STM32_PLC_Flash_Set_LCD_Calibration>:
void STM32_PLC_Flash_Set_LCD_Calibration(float Scale_X, float Scale_Y, float Bias_X, float Bias_Y){
 8001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001486:	ee10 3a10 	vmov	r3, s0
	float_converter.float_number = Scale_X;
 800148a:	4f23      	ldr	r7, [pc, #140]	; (8001518 <STM32_PLC_Flash_Set_LCD_Calibration+0x94>)
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 12);
 800148c:	b2d8      	uxtb	r0, r3
 800148e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001492:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001496:	210c      	movs	r1, #12
void STM32_PLC_Flash_Set_LCD_Calibration(float Scale_X, float Scale_Y, float Bias_X, float Bias_Y){
 8001498:	ee10 6a90 	vmov	r6, s1
 800149c:	ee11 5a10 	vmov	r5, s2
 80014a0:	ee11 4a90 	vmov	r4, s3
	float_converter.float_number = Scale_X;
 80014a4:	ed87 0a00 	vstr	s0, [r7]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 12);
 80014a8:	f7ff ff7c 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 13);
 80014ac:	8878      	ldrh	r0, [r7, #2]
 80014ae:	ba40      	rev16	r0, r0
 80014b0:	210d      	movs	r1, #13
 80014b2:	b280      	uxth	r0, r0
 80014b4:	f7ff ff76 	bl	80013a4 <write_flash>
	float_converter.float_number = Scale_Y;
 80014b8:	603e      	str	r6, [r7, #0]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 14);
 80014ba:	b2f0      	uxtb	r0, r6
 80014bc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80014c0:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
 80014c4:	210e      	movs	r1, #14
 80014c6:	f7ff ff6d 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 15);
 80014ca:	8878      	ldrh	r0, [r7, #2]
 80014cc:	ba40      	rev16	r0, r0
 80014ce:	210f      	movs	r1, #15
 80014d0:	b280      	uxth	r0, r0
 80014d2:	f7ff ff67 	bl	80013a4 <write_flash>
	float_converter.float_number = Bias_X;
 80014d6:	603d      	str	r5, [r7, #0]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 16);
 80014d8:	b2e8      	uxtb	r0, r5
 80014da:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80014de:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80014e2:	2110      	movs	r1, #16
 80014e4:	f7ff ff5e 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 17);
 80014e8:	8878      	ldrh	r0, [r7, #2]
 80014ea:	ba40      	rev16	r0, r0
 80014ec:	2111      	movs	r1, #17
 80014ee:	b280      	uxth	r0, r0
 80014f0:	f7ff ff58 	bl	80013a4 <write_flash>
	float_converter.float_number = Bias_Y;
 80014f4:	603c      	str	r4, [r7, #0]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 18);
 80014f6:	b2e0      	uxtb	r0, r4
 80014f8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80014fc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
 8001500:	2112      	movs	r1, #18
 8001502:	f7ff ff4f 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 19);
 8001506:	8878      	ldrh	r0, [r7, #2]
 8001508:	ba40      	rev16	r0, r0
}
 800150a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 19);
 800150e:	2113      	movs	r1, #19
 8001510:	b280      	uxth	r0, r0
 8001512:	f7ff bf47 	b.w	80013a4 <write_flash>
 8001516:	bf00      	nop
 8001518:	20000454 	.word	0x20000454

0800151c <STM32_PLC_Flash_Set_J1939_This_ECU_Address>:
	write_flash(this_ECU_address, 20);
 800151c:	2114      	movs	r1, #20
 800151e:	f7ff bf41 	b.w	80013a4 <write_flash>
	...

08001524 <STM32_PLC_Flash_Set_Analog_Input_Calibration>:
void STM32_PLC_Flash_Set_Analog_Input_Calibration(uint8_t input_index, float scalar, float bias){
 8001524:	ee10 3a10 	vmov	r3, s0
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 21 + 2*input_index);
 8001528:	0040      	lsls	r0, r0, #1
void STM32_PLC_Flash_Set_Analog_Input_Calibration(uint8_t input_index, float scalar, float bias){
 800152a:	b570      	push	{r4, r5, r6, lr}
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 21 + 2*input_index);
 800152c:	b2c4      	uxtb	r4, r0
	float_converter.float_number = scalar;
 800152e:	4e17      	ldr	r6, [pc, #92]	; (800158c <STM32_PLC_Flash_Set_Analog_Input_Calibration+0x68>)
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 21 + 2*input_index);
 8001530:	f104 0115 	add.w	r1, r4, #21
 8001534:	b2d8      	uxtb	r0, r3
 8001536:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800153a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800153e:	b2c9      	uxtb	r1, r1
void STM32_PLC_Flash_Set_Analog_Input_Calibration(uint8_t input_index, float scalar, float bias){
 8001540:	ee10 5a90 	vmov	r5, s1
	float_converter.float_number = scalar;
 8001544:	ed86 0a00 	vstr	s0, [r6]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 21 + 2*input_index);
 8001548:	f7ff ff2c 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 22 + 2*input_index);
 800154c:	8870      	ldrh	r0, [r6, #2]
 800154e:	f104 0116 	add.w	r1, r4, #22
 8001552:	ba40      	rev16	r0, r0
 8001554:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001558:	b280      	uxth	r0, r0
 800155a:	f7ff ff23 	bl	80013a4 <write_flash>
	float_converter.float_number = bias;
 800155e:	6035      	str	r5, [r6, #0]
	write_flash((float_converter.bytes[0] << 8) | float_converter.bytes[1], 55 + 2*input_index);
 8001560:	f104 0137 	add.w	r1, r4, #55	; 0x37
 8001564:	b2e8      	uxtb	r0, r5
 8001566:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800156a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 800156e:	b2c9      	uxtb	r1, r1
 8001570:	f7ff ff18 	bl	80013a4 <write_flash>
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 56 + 2*input_index);
 8001574:	8870      	ldrh	r0, [r6, #2]
 8001576:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800157a:	ba40      	rev16	r0, r0
}
 800157c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	write_flash((float_converter.bytes[2] << 8) | float_converter.bytes[3], 56 + 2*input_index);
 8001580:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001584:	b280      	uxth	r0, r0
 8001586:	f7ff bf0d 	b.w	80013a4 <write_flash>
 800158a:	bf00      	nop
 800158c:	20000454 	.word	0x20000454

08001590 <STM32_PLC_Flash_Set_Encoder_Pulses>:
void STM32_PLC_Flash_Set_Encoder_Pulses(uint8_t pulses_index, uint16_t pulses){
 8001590:	460b      	mov	r3, r1
	write_flash(pulses, 89 + pulses_index);
 8001592:	f100 0159 	add.w	r1, r0, #89	; 0x59
 8001596:	b2c9      	uxtb	r1, r1
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff bf03 	b.w	80013a4 <write_flash>

0800159e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>:
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 800159e:	b570      	push	{r4, r5, r6, lr}
 80015a0:	b0ae      	sub	sp, #184	; 0xb8
 80015a2:	4606      	mov	r6, r0
	read_flash(data, FLASH_LENGTH_DATA);
 80015a4:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80015a6:	460d      	mov	r5, r1
 80015a8:	4614      	mov	r4, r2
	read_flash(data, FLASH_LENGTH_DATA);
 80015aa:	f7ff feed 	bl	8001388 <read_flash.constprop.0>
	*gain_for_configuration_index_0 = data[0] <= 0x7 ? data[0] : 1;
 80015ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	bf28      	it	cs
 80015b6:	2301      	movcs	r3, #1
 80015b8:	7033      	strb	r3, [r6, #0]
	*gain_for_configuration_index_1 = data[1] <= 0x7 ? data[1] : 1;
 80015ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	bf28      	it	cs
 80015c2:	2301      	movcs	r3, #1
 80015c4:	702b      	strb	r3, [r5, #0]
	*gain_for_configuration_index_2 = data[2] <= 0x7 ? data[2] : 1;
 80015c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	bf28      	it	cs
 80015ce:	2301      	movcs	r3, #1
 80015d0:	7023      	strb	r3, [r4, #0]
}
 80015d2:	b02e      	add	sp, #184	; 0xb8
 80015d4:	bd70      	pop	{r4, r5, r6, pc}

080015d6 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>:
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80015d6:	b570      	push	{r4, r5, r6, lr}
 80015d8:	b0ae      	sub	sp, #184	; 0xb8
 80015da:	4606      	mov	r6, r0
	read_flash(data, FLASH_LENGTH_DATA);
 80015dc:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 80015de:	460d      	mov	r5, r1
 80015e0:	4614      	mov	r4, r2
	read_flash(data, FLASH_LENGTH_DATA);
 80015e2:	f7ff fed1 	bl	8001388 <read_flash.constprop.0>
	*gain_for_configuration_index_0 = data[3] <= 0x7 ? data[3] : 1;
 80015e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	bf28      	it	cs
 80015ee:	2301      	movcs	r3, #1
 80015f0:	7033      	strb	r3, [r6, #0]
	*gain_for_configuration_index_1 = data[4] <= 0x7 ? data[4] : 1;
 80015f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	bf28      	it	cs
 80015fa:	2301      	movcs	r3, #1
 80015fc:	702b      	strb	r3, [r5, #0]
	*gain_for_configuration_index_2 = data[5] <= 0x7 ? data[5] : 1;
 80015fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001602:	2b08      	cmp	r3, #8
 8001604:	bf28      	it	cs
 8001606:	2301      	movcs	r3, #1
 8001608:	7023      	strb	r3, [r4, #0]
}
 800160a:	b02e      	add	sp, #184	; 0xb8
 800160c:	bd70      	pop	{r4, r5, r6, pc}

0800160e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>:
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 800160e:	b570      	push	{r4, r5, r6, lr}
 8001610:	b0ae      	sub	sp, #184	; 0xb8
 8001612:	4606      	mov	r6, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001614:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(uint8_t *gain_for_configuration_index_0, uint8_t *gain_for_configuration_index_1, uint8_t *gain_for_configuration_index_2){
 8001616:	460d      	mov	r5, r1
 8001618:	4614      	mov	r4, r2
	read_flash(data, FLASH_LENGTH_DATA);
 800161a:	f7ff feb5 	bl	8001388 <read_flash.constprop.0>
	*gain_for_configuration_index_0 = data[6] <= 0x7 ? data[6] : 1;
 800161e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001622:	2b08      	cmp	r3, #8
 8001624:	bf28      	it	cs
 8001626:	2301      	movcs	r3, #1
 8001628:	7033      	strb	r3, [r6, #0]
	*gain_for_configuration_index_1 = data[7] <= 0x7 ? data[7] : 1;
 800162a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800162e:	2b08      	cmp	r3, #8
 8001630:	bf28      	it	cs
 8001632:	2301      	movcs	r3, #1
 8001634:	702b      	strb	r3, [r5, #0]
	*gain_for_configuration_index_2 = data[8] <= 0x7 ? data[8] : 1;
 8001636:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800163a:	2b08      	cmp	r3, #8
 800163c:	bf28      	it	cs
 800163e:	2301      	movcs	r3, #1
 8001640:	7023      	strb	r3, [r4, #0]
}
 8001642:	b02e      	add	sp, #184	; 0xb8
 8001644:	bd70      	pop	{r4, r5, r6, pc}

08001646 <STM32_PLC_Flash_Get_PWM_Prescalers>:
void STM32_PLC_Flash_Get_PWM_Prescalers(uint16_t *prescaler_for_PWM_0_3, uint16_t *prescaler_for_PWM_4_7){
 8001646:	b530      	push	{r4, r5, lr}
 8001648:	b0af      	sub	sp, #188	; 0xbc
 800164a:	4605      	mov	r5, r0
	read_flash(data, FLASH_LENGTH_DATA);
 800164c:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_PWM_Prescalers(uint16_t *prescaler_for_PWM_0_3, uint16_t *prescaler_for_PWM_4_7){
 800164e:	460c      	mov	r4, r1
	read_flash(data, FLASH_LENGTH_DATA);
 8001650:	f7ff fe9a 	bl	8001388 <read_flash.constprop.0>
	*prescaler_for_PWM_0_3 = data[9] <= 0xFFFF ? data[9] : 0xFFFF;
 8001654:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8001658:	802b      	strh	r3, [r5, #0]
	*prescaler_for_PWM_4_7 = data[10] <= 0xFFFF ? data[10] : 0xFFFF;
 800165a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800165e:	8023      	strh	r3, [r4, #0]
}
 8001660:	b02f      	add	sp, #188	; 0xbc
 8001662:	bd30      	pop	{r4, r5, pc}

08001664 <STM32_PLC_Flash_Get_Alarm_Enables>:
void STM32_PLC_Flash_Get_Alarm_Enables(bool *alarm_A_enabled, bool *alarm_B_enabled){
 8001664:	b530      	push	{r4, r5, lr}
 8001666:	b0af      	sub	sp, #188	; 0xbc
 8001668:	4605      	mov	r5, r0
	read_flash(data, FLASH_LENGTH_DATA);
 800166a:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_Alarm_Enables(bool *alarm_A_enabled, bool *alarm_B_enabled){
 800166c:	460c      	mov	r4, r1
	read_flash(data, FLASH_LENGTH_DATA);
 800166e:	f7ff fe8b 	bl	8001388 <read_flash.constprop.0>
	uint8_t enables = data[11] <= 0x3 ? data[11] : 0x0;
 8001672:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2300      	movcs	r3, #0
	*alarm_A_enabled = enables >> 1;
 800167c:	f3c3 0240 	ubfx	r2, r3, #1, #1
	*alarm_B_enabled = enables & 0b1;
 8001680:	f003 0301 	and.w	r3, r3, #1
	*alarm_A_enabled = enables >> 1;
 8001684:	702a      	strb	r2, [r5, #0]
	*alarm_B_enabled = enables & 0b1;
 8001686:	7023      	strb	r3, [r4, #0]
}
 8001688:	b02f      	add	sp, #188	; 0xbc
 800168a:	bd30      	pop	{r4, r5, pc}

0800168c <STM32_PLC_Flash_Get_LCD_Calibration>:
void STM32_PLC_Flash_Get_LCD_Calibration(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y){
 800168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001690:	b0ae      	sub	sp, #184	; 0xb8
 8001692:	4680      	mov	r8, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001694:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_LCD_Calibration(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y){
 8001696:	461d      	mov	r5, r3
 8001698:	460f      	mov	r7, r1
 800169a:	4616      	mov	r6, r2
	read_flash(data, FLASH_LENGTH_DATA);
 800169c:	f7ff fe74 	bl	8001388 <read_flash.constprop.0>
	float_converter.bytes[0] = data[12] >> 8;
 80016a0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80016a4:	4c15      	ldr	r4, [pc, #84]	; (80016fc <STM32_PLC_Flash_Get_LCD_Calibration+0x70>)
 80016a6:	ba5b      	rev16	r3, r3
 80016a8:	8023      	strh	r3, [r4, #0]
	float_converter.bytes[2] = data[13] >> 8;
 80016aa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80016ae:	ba5b      	rev16	r3, r3
 80016b0:	8063      	strh	r3, [r4, #2]
	*Scale_X = float_converter.float_number;
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f8c8 3000 	str.w	r3, [r8]
	float_converter.bytes[0] = data[14] >> 8;
 80016b8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80016bc:	ba5b      	rev16	r3, r3
 80016be:	8023      	strh	r3, [r4, #0]
	float_converter.bytes[2] = data[15] >> 8;
 80016c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80016c4:	ba5b      	rev16	r3, r3
 80016c6:	8063      	strh	r3, [r4, #2]
	*Scale_Y = float_converter.float_number;
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	603b      	str	r3, [r7, #0]
	float_converter.bytes[0] = data[16] >> 8;
 80016cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80016d0:	ba5b      	rev16	r3, r3
 80016d2:	8023      	strh	r3, [r4, #0]
	float_converter.bytes[2] = data[17] >> 8;
 80016d4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80016d8:	ba5b      	rev16	r3, r3
 80016da:	8063      	strh	r3, [r4, #2]
	*Bias_X = float_converter.float_number;
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	6033      	str	r3, [r6, #0]
	float_converter.bytes[0] = data[18] >> 8;
 80016e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80016e4:	ba5b      	rev16	r3, r3
 80016e6:	8023      	strh	r3, [r4, #0]
	float_converter.bytes[2] = data[19] >> 8;
 80016e8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80016ec:	ba5b      	rev16	r3, r3
 80016ee:	8063      	strh	r3, [r4, #2]
	*Bias_Y = float_converter.float_number;
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	602b      	str	r3, [r5, #0]
}
 80016f4:	b02e      	add	sp, #184	; 0xb8
 80016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016fa:	bf00      	nop
 80016fc:	20000454 	.word	0x20000454

08001700 <STM32_PLC_Flash_Get_J1939_This_ECU_Address>:
void STM32_PLC_Flash_Get_J1939_This_ECU_Address(uint8_t *this_ECU_address){
 8001700:	b510      	push	{r4, lr}
 8001702:	b0ae      	sub	sp, #184	; 0xb8
 8001704:	4604      	mov	r4, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001706:	4668      	mov	r0, sp
 8001708:	f7ff fe3e 	bl	8001388 <read_flash.constprop.0>
	*this_ECU_address = data[20] <= 0xFF ? data[20] : 0x0;
 800170c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	bf28      	it	cs
 8001716:	2300      	movcs	r3, #0
 8001718:	7023      	strb	r3, [r4, #0]
}
 800171a:	b02e      	add	sp, #184	; 0xb8
 800171c:	bd10      	pop	{r4, pc}
	...

08001720 <STM32_PLC_Flash_Get_Analog_Input_Calibration>:
void STM32_PLC_Flash_Get_Analog_Input_Calibration(uint8_t input_index, float *scalar, float *bias){
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	b0ae      	sub	sp, #184	; 0xb8
 8001724:	4604      	mov	r4, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001726:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_Analog_Input_Calibration(uint8_t input_index, float *scalar, float *bias){
 8001728:	4615      	mov	r5, r2
 800172a:	460e      	mov	r6, r1
	read_flash(data, FLASH_LENGTH_DATA);
 800172c:	f7ff fe2c 	bl	8001388 <read_flash.constprop.0>
	float_converter.bytes[0] = data[21+2*input_index] >> 8;
 8001730:	aa2e      	add	r2, sp, #184	; 0xb8
 8001732:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <STM32_PLC_Flash_Get_Analog_Input_Calibration+0x58>)
 8001738:	f832 2c8e 	ldrh.w	r2, [r2, #-142]
 800173c:	ba52      	rev16	r2, r2
 800173e:	801a      	strh	r2, [r3, #0]
	float_converter.bytes[2] = data[22+2*input_index] >> 8;
 8001740:	aa2e      	add	r2, sp, #184	; 0xb8
 8001742:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001746:	f832 2c8c 	ldrh.w	r2, [r2, #-140]
 800174a:	ba52      	rev16	r2, r2
 800174c:	805a      	strh	r2, [r3, #2]
	*scalar = float_converter.float_number;
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	6032      	str	r2, [r6, #0]
	float_converter.bytes[0] = data[55+2*input_index] >> 8;
 8001752:	aa2e      	add	r2, sp, #184	; 0xb8
 8001754:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001758:	f832 2c4a 	ldrh.w	r2, [r2, #-74]
 800175c:	ba52      	rev16	r2, r2
 800175e:	801a      	strh	r2, [r3, #0]
	float_converter.bytes[2] = data[56+2*input_index] >> 8;
 8001760:	aa2e      	add	r2, sp, #184	; 0xb8
 8001762:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8001766:	f834 2c48 	ldrh.w	r2, [r4, #-72]
 800176a:	ba52      	rev16	r2, r2
 800176c:	805a      	strh	r2, [r3, #2]
	*bias = float_converter.float_number;
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	602b      	str	r3, [r5, #0]
}
 8001772:	b02e      	add	sp, #184	; 0xb8
 8001774:	bd70      	pop	{r4, r5, r6, pc}
 8001776:	bf00      	nop
 8001778:	20000454 	.word	0x20000454

0800177c <STM32_PLC_Flash_Get_Encoder_Pulses>:
void STM32_PLC_Flash_Get_Encoder_Pulses(uint8_t pulses_index, uint16_t *pulses){
 800177c:	b530      	push	{r4, r5, lr}
 800177e:	b0af      	sub	sp, #188	; 0xbc
 8001780:	4604      	mov	r4, r0
	read_flash(data, FLASH_LENGTH_DATA);
 8001782:	4668      	mov	r0, sp
void STM32_PLC_Flash_Get_Encoder_Pulses(uint8_t pulses_index, uint16_t *pulses){
 8001784:	460d      	mov	r5, r1
	read_flash(data, FLASH_LENGTH_DATA);
 8001786:	f7ff fdff 	bl	8001388 <read_flash.constprop.0>
	*pulses = data[89 + pulses_index];
 800178a:	ab2e      	add	r3, sp, #184	; 0xb8
 800178c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8001790:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8001794:	802b      	strh	r3, [r5, #0]
}
 8001796:	b02f      	add	sp, #188	; 0xbc
 8001798:	bd30      	pop	{r4, r5, pc}

0800179a <compute_period>:
	handler_tim15 = htim15;
}

static uint16_t compute_period(uint16_t input_capture[], uint8_t left) {
	/* Find the index - i0 and i1 can never be larger than LENGTH_ARRAY and lower than 0 */
	uint8_t a = 2*LENGTH_ARRAY - left;
 800179a:	f1c1 01c8 	rsb	r1, r1, #200	; 0xc8
	uint8_t i0 = (a - 2) % LENGTH_ARRAY;
 800179e:	b2c9      	uxtb	r1, r1
	uint8_t i1 = (a - 1) % LENGTH_ARRAY;
 80017a0:	2264      	movs	r2, #100	; 0x64
 80017a2:	1e4b      	subs	r3, r1, #1
	uint8_t i0 = (a - 2) % LENGTH_ARRAY;
 80017a4:	3902      	subs	r1, #2
static uint16_t compute_period(uint16_t input_capture[], uint8_t left) {
 80017a6:	b510      	push	{r4, lr}
	uint8_t i1 = (a - 1) % LENGTH_ARRAY;
 80017a8:	fb93 f4f2 	sdiv	r4, r3, r2
 80017ac:	fb02 3314 	mls	r3, r2, r4, r3
	uint8_t i0 = (a - 2) % LENGTH_ARRAY;
 80017b0:	fb91 f4f2 	sdiv	r4, r1, r2
 80017b4:	fb02 1114 	mls	r1, r2, r4, r1

	/* Check absolute value */
	if(input_capture[i1] > input_capture[i0])
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	b2c9      	uxtb	r1, r1
 80017bc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80017c0:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d902      	bls.n	80017ce <compute_period+0x34>
		return input_capture[i1] - input_capture[i0];
 80017c8:	1a98      	subs	r0, r3, r2
	else if(input_capture[i1] < input_capture[i0])
		return input_capture[i1] + 0xFFFF - input_capture[i0];
 80017ca:	b280      	uxth	r0, r0
	else
		return 1;
}
 80017cc:	bd10      	pop	{r4, pc}
	else if(input_capture[i1] < input_capture[i0])
 80017ce:	d202      	bcs.n	80017d6 <compute_period+0x3c>
		return input_capture[i1] + 0xFFFF - input_capture[i0];
 80017d0:	1e58      	subs	r0, r3, #1
 80017d2:	1a80      	subs	r0, r0, r2
 80017d4:	e7f9      	b.n	80017ca <compute_period+0x30>
		return 1;
 80017d6:	2001      	movs	r0, #1
 80017d8:	e7f8      	b.n	80017cc <compute_period+0x32>
	...

080017dc <STM32_PLC_Input_Capture>:
void STM32_PLC_Input_Capture(TIM_HandleTypeDef* htim17, TIM_HandleTypeDef* htim16, TIM_HandleTypeDef* htim15) {
 80017dc:	b570      	push	{r4, r5, r6, lr}
 80017de:	4606      	mov	r6, r0
 80017e0:	460d      	mov	r5, r1
	if(HAL_TIM_IC_Start_IT(htim15, TIM_CHANNEL_2) != HAL_OK)
 80017e2:	4610      	mov	r0, r2
 80017e4:	2104      	movs	r1, #4
void STM32_PLC_Input_Capture(TIM_HandleTypeDef* htim17, TIM_HandleTypeDef* htim16, TIM_HandleTypeDef* htim15) {
 80017e6:	4614      	mov	r4, r2
	if(HAL_TIM_IC_Start_IT(htim15, TIM_CHANNEL_2) != HAL_OK)
 80017e8:	f00b fa70 	bl	800cccc <HAL_TIM_IC_Start_IT>
 80017ec:	b108      	cbz	r0, 80017f2 <STM32_PLC_Input_Capture+0x16>
		Error_Handler();
 80017ee:	f005 fe55 	bl	800749c <Error_Handler>
	if(HAL_TIM_IC_Start_DMA(htim15, TIM_CHANNEL_1, (uint32_t*)input_capture2, LENGTH_ARRAY) != HAL_OK)
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <STM32_PLC_Input_Capture+0x5c>)
 80017f4:	2364      	movs	r3, #100	; 0x64
 80017f6:	2100      	movs	r1, #0
 80017f8:	4620      	mov	r0, r4
 80017fa:	f00b fae7 	bl	800cdcc <HAL_TIM_IC_Start_DMA>
 80017fe:	b108      	cbz	r0, 8001804 <STM32_PLC_Input_Capture+0x28>
		Error_Handler();
 8001800:	f005 fe4c 	bl	800749c <Error_Handler>
	if(HAL_TIM_IC_Start_DMA(htim16, TIM_CHANNEL_1, (uint32_t*)input_capture1, LENGTH_ARRAY) != HAL_OK)
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <STM32_PLC_Input_Capture+0x60>)
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	2100      	movs	r1, #0
 800180a:	4628      	mov	r0, r5
 800180c:	f00b fade 	bl	800cdcc <HAL_TIM_IC_Start_DMA>
 8001810:	b108      	cbz	r0, 8001816 <STM32_PLC_Input_Capture+0x3a>
		Error_Handler();
 8001812:	f005 fe43 	bl	800749c <Error_Handler>
	if(HAL_TIM_IC_Start_DMA(htim17, TIM_CHANNEL_1, (uint32_t*)input_capture0, LENGTH_ARRAY) != HAL_OK)
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <STM32_PLC_Input_Capture+0x64>)
 8001818:	2364      	movs	r3, #100	; 0x64
 800181a:	2100      	movs	r1, #0
 800181c:	4630      	mov	r0, r6
 800181e:	f00b fad5 	bl	800cdcc <HAL_TIM_IC_Start_DMA>
 8001822:	b108      	cbz	r0, 8001828 <STM32_PLC_Input_Capture+0x4c>
		Error_Handler();
 8001824:	f005 fe3a 	bl	800749c <Error_Handler>
	handler_tim17 = htim17;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <STM32_PLC_Input_Capture+0x68>)
 800182a:	601e      	str	r6, [r3, #0]
	handler_tim16 = htim16;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <STM32_PLC_Input_Capture+0x6c>)
 800182e:	601d      	str	r5, [r3, #0]
	handler_tim15 = htim15;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <STM32_PLC_Input_Capture+0x70>)
 8001832:	601c      	str	r4, [r3, #0]
}
 8001834:	bd70      	pop	{r4, r5, r6, pc}
 8001836:	bf00      	nop
 8001838:	200005f8 	.word	0x200005f8
 800183c:	20000530 	.word	0x20000530
 8001840:	20000468 	.word	0x20000468
 8001844:	20000464 	.word	0x20000464
 8001848:	20000460 	.word	0x20000460
 800184c:	2000045c 	.word	0x2000045c

08001850 <STM32_PLC_Input_Capture_Get_Raw>:


uint16_t STM32_PLC_Input_Capture_Get_Raw(uint8_t i){
	switch(i){
 8001850:	2803      	cmp	r0, #3
 8001852:	d823      	bhi.n	800189c <STM32_PLC_Input_Capture_Get_Raw+0x4c>
 8001854:	e8df f000 	tbb	[pc, r0]
 8001858:	1b130b02 	.word	0x1b130b02
	case 0:
		return compute_period(input_capture0, handler_tim17->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <STM32_PLC_Input_Capture_Get_Raw+0x50>)
 800185e:	4811      	ldr	r0, [pc, #68]	; (80018a4 <STM32_PLC_Input_Capture_Get_Raw+0x54>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	b2c9      	uxtb	r1, r1
	case 1:
		return compute_period(input_capture1, handler_tim16->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
	case 2:
		return compute_period(input_capture2, handler_tim15->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
	case 3:
		return compute_period(input_capture3, LENGTH_ARRAY - data_index_for_tim15_channel_2);
 800186a:	f7ff bf96 	b.w	800179a <compute_period>
		return compute_period(input_capture1, handler_tim16->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <STM32_PLC_Input_Capture_Get_Raw+0x58>)
 8001870:	480e      	ldr	r0, [pc, #56]	; (80018ac <STM32_PLC_Input_Capture_Get_Raw+0x5c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	b2c9      	uxtb	r1, r1
 800187c:	e7f5      	b.n	800186a <STM32_PLC_Input_Capture_Get_Raw+0x1a>
		return compute_period(input_capture2, handler_tim15->hdma[TIM_DMA_ID_CC1]->Instance->CNDTR);
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <STM32_PLC_Input_Capture_Get_Raw+0x60>)
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <STM32_PLC_Input_Capture_Get_Raw+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	b2c9      	uxtb	r1, r1
 800188c:	e7ed      	b.n	800186a <STM32_PLC_Input_Capture_Get_Raw+0x1a>
		return compute_period(input_capture3, LENGTH_ARRAY - data_index_for_tim15_channel_2);
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <STM32_PLC_Input_Capture_Get_Raw+0x68>)
 8001890:	480a      	ldr	r0, [pc, #40]	; (80018bc <STM32_PLC_Input_Capture_Get_Raw+0x6c>)
 8001892:	7819      	ldrb	r1, [r3, #0]
 8001894:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 8001898:	b2c9      	uxtb	r1, r1
 800189a:	e7e6      	b.n	800186a <STM32_PLC_Input_Capture_Get_Raw+0x1a>
	default:
		return 0;
	}
}
 800189c:	2000      	movs	r0, #0
 800189e:	4770      	bx	lr
 80018a0:	20000464 	.word	0x20000464
 80018a4:	20000468 	.word	0x20000468
 80018a8:	20000460 	.word	0x20000460
 80018ac:	20000530 	.word	0x20000530
 80018b0:	2000045c 	.word	0x2000045c
 80018b4:	200005f8 	.word	0x200005f8
 80018b8:	20000458 	.word	0x20000458
 80018bc:	200006c0 	.word	0x200006c0

080018c0 <STM32_PLC_Input_Capture_Get_Calibrated>:

float STM32_PLC_Input_Capture_Get_Calibrated(uint8_t i){
 80018c0:	b508      	push	{r3, lr}
	return 1.0f/((float)STM32_PLC_Input_Capture_Get_Raw(i)*0.0001f); /* Converting to Hz */
 80018c2:	f7ff ffc5 	bl	8001850 <STM32_PLC_Input_Capture_Get_Raw>
 80018c6:	ee07 0a90 	vmov	s15, r0
 80018ca:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80018e0 <STM32_PLC_Input_Capture_Get_Calibrated+0x20>
 80018ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d2:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 80018d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018da:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80018de:	bd08      	pop	{r3, pc}
 80018e0:	38d1b717 	.word	0x38d1b717

080018e4 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	/* This is here because channel 2 does not have DMA */
	if(htim->Instance == TIM15){
 80018e4:	6802      	ldr	r2, [r0, #0]
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d110      	bne.n	800190e <HAL_TIM_IC_CaptureCallback+0x2a>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80018ec:	7f03      	ldrb	r3, [r0, #28]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d10d      	bne.n	800190e <HAL_TIM_IC_CaptureCallback+0x2a>
			if(data_index_for_tim15_channel_2 >= LENGTH_ARRAY)
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_TIM_IC_CaptureCallback+0x30>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	2a63      	cmp	r2, #99	; 0x63
				data_index_for_tim15_channel_2 = 0;
 80018f8:	bf84      	itt	hi
 80018fa:	2200      	movhi	r2, #0
 80018fc:	701a      	strbhi	r2, [r3, #0]
			input_capture3[data_index_for_tim15_channel_2++] = htim->Instance->CNT;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001900:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	1c50      	adds	r0, r2, #1
 8001906:	7018      	strb	r0, [r3, #0]
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_TIM_IC_CaptureCallback+0x34>)
 800190a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		}
	}
}
 800190e:	4770      	bx	lr
 8001910:	40014000 	.word	0x40014000
 8001914:	20000458 	.word	0x20000458
 8001918:	200006c0 	.word	0x200006c0

0800191c <STM32_PLC_LCD_Calibrate_Touch>:
	STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame();
	HAL_Delay(2000);
	STM32_PLC_LCD_Calibrate_Touch();
}

void STM32_PLC_LCD_Calibrate_Touch() {
 800191c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		STM32_PLC_Flash_Set_LCD_Calibration(Scale_X, Scale_Y, Bias_X, Bias_Y);
	}
}

bool STM32_PLC_LCD_Is_Pressed(){
	return TSC2046_isPressed();
 800191e:	f005 f873 	bl	8006a08 <TSC2046_isPressed>
	if(STM32_PLC_LCD_Is_Pressed()){
 8001922:	b188      	cbz	r0, 8001948 <STM32_PLC_LCD_Calibrate_Touch+0x2c>
		TSC2046_Calibrate();
 8001924:	f005 f89c 	bl	8006a60 <TSC2046_Calibrate>
}

void STM32_PLC_LCD_Get_Touch_Calibration_Parameters(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y){
	TSC2046_GetTouchCalibrationParameters(Scale_X, Scale_Y, Bias_X, Bias_Y);
 8001928:	ab03      	add	r3, sp, #12
 800192a:	aa02      	add	r2, sp, #8
 800192c:	a901      	add	r1, sp, #4
 800192e:	4668      	mov	r0, sp
 8001930:	f004 ffe8 	bl	8006904 <TSC2046_GetTouchCalibrationParameters>
		STM32_PLC_Flash_Set_LCD_Calibration(Scale_X, Scale_Y, Bias_X, Bias_Y);
 8001934:	eddd 1a03 	vldr	s3, [sp, #12]
 8001938:	ed9d 1a02 	vldr	s2, [sp, #8]
 800193c:	eddd 0a01 	vldr	s1, [sp, #4]
 8001940:	ed9d 0a00 	vldr	s0, [sp]
 8001944:	f7ff fd9e 	bl	8001484 <STM32_PLC_Flash_Set_LCD_Calibration>
}
 8001948:	b005      	add	sp, #20
 800194a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001950 <STM32_PLC_LCD>:
void STM32_PLC_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b085      	sub	sp, #20
	lcd.lcdSpi = lcdSpi;
 8001954:	4c5e      	ldr	r4, [pc, #376]	; (8001ad0 <STM32_PLC_LCD+0x180>)
void STM32_PLC_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001956:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	lcd.LCD_DC_PORT = LCD_DC_PORT;
 8001958:	6126      	str	r6, [r4, #16]
	lcd.LCD_CS_PORT = LCD_CS_PORT;
 800195a:	e9c4 0201 	strd	r0, r2, [r4, #4]
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 800195e:	4630      	mov	r0, r6
	lcd.rotationNum = 1;
 8001960:	4626      	mov	r6, r4
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
	lcd.rotationNum = 1;
 8001964:	2701      	movs	r7, #1
void STM32_PLC_LCD(SPI_HandleTypeDef *lcdSpi, SPI_HandleTypeDef *touchSpi, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *LCD_DC_PORT, uint16_t LCD_DC_PIN, GPIO_TypeDef *TOUCH_CS_PORT, uint16_t TOUCH_CS_PIN) {
 8001966:	460d      	mov	r5, r1
 8001968:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
	lcd.LCD_CS_PIN = LCD_CS_PIN;
 800196c:	81a3      	strh	r3, [r4, #12]
	lcd.LCD_DC_PIN = LCD_DC_PIN;
 800196e:	82a1      	strh	r1, [r4, #20]
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 8001970:	f007 ffa6 	bl	80098c0 <HAL_GPIO_WritePin>
	lcd.rotationNum = 1;
 8001974:	f826 7b34 	strh.w	r7, [r6], #52
	ILI9341_send_command(ILI9341_RESET);                                     /* software reset command */
 8001978:	4638      	mov	r0, r7
 800197a:	f004 fc89 	bl	8006290 <ILI9341_send_command>
	HAL_Delay(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f007 f90a 	bl	8008b98 <HAL_Delay>
	ILI9341_send_command(ILI9341_DISPLAY_OFF);                               /* display off */
 8001984:	2028      	movs	r0, #40	; 0x28
 8001986:	f004 fc83 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_command(ILI9341_POWER1);                                    /* power control */
 800198a:	20c0      	movs	r0, #192	; 0xc0
 800198c:	f004 fc80 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0x26);                                                 /* GVDD = 4.75v */
 8001990:	2026      	movs	r0, #38	; 0x26
 8001992:	f004 fc4b 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_POWER2);                                    /* power control */
 8001996:	20c1      	movs	r0, #193	; 0xc1
 8001998:	f004 fc7a 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0x11);                                                 /* AVDD = VCIx2, VGH = VCIx7, VGL =-VCIx3 */
 800199c:	2011      	movs	r0, #17
 800199e:	f004 fc45 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_VCOM1);                                     /* VCOM control */
 80019a2:	20c5      	movs	r0, #197	; 0xc5
 80019a4:	f004 fc74 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0x35);                                                 /* Set the VCOMH voltage (0x35 = 4.025v) */
 80019a8:	2035      	movs	r0, #53	; 0x35
 80019aa:	f004 fc3f 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x3e);                                                 /* Set the VCOML voltage (0x3E = -0.950v) */
 80019ae:	203e      	movs	r0, #62	; 0x3e
 80019b0:	f004 fc3c 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_VCOM2);                                     /* VCOM control */
 80019b4:	20c7      	movs	r0, #199	; 0xc7
 80019b6:	f004 fc6b 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0xbe);
 80019ba:	20be      	movs	r0, #190	; 0xbe
 80019bc:	f004 fc36 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_MAC);
 80019c0:	2036      	movs	r0, #54	; 0x36
 80019c2:	f004 fc65 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0x48);
 80019c6:	2048      	movs	r0, #72	; 0x48
 80019c8:	f004 fc30 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_PIXEL_FORMAT);
 80019cc:	203a      	movs	r0, #58	; 0x3a
 80019ce:	f004 fc5f 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0x55);
 80019d2:	2055      	movs	r0, #85	; 0x55
 80019d4:	f004 fc2a 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_FRC);
 80019d8:	20b1      	movs	r0, #177	; 0xb1
 80019da:	f004 fc59 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0);
 80019de:	2000      	movs	r0, #0
 80019e0:	f004 fc24 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x1F);
 80019e4:	201f      	movs	r0, #31
 80019e6:	f004 fc21 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_COLUMN_ADDR);                               /* column set */
 80019ea:	202a      	movs	r0, #42	; 0x2a
 80019ec:	f004 fc50 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0x00);                                                 /* x0_HIGH---0 */
 80019f0:	2000      	movs	r0, #0
 80019f2:	f004 fc1b 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* x0_LOW----0 */
 80019f6:	2000      	movs	r0, #0
 80019f8:	f004 fc18 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* x1_HIGH---240 */
 80019fc:	2000      	movs	r0, #0
 80019fe:	f004 fc15 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0xEF);                                                 /* x1_LOW----240 */
 8001a02:	20ef      	movs	r0, #239	; 0xef
 8001a04:	f004 fc12 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_PAGE_ADDR);                                 /* page address set */
 8001a08:	202b      	movs	r0, #43	; 0x2b
 8001a0a:	f004 fc41 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0x00);                                                 /* y0_HIGH---0 */
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f004 fc0c 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* y0_LOW----0 */
 8001a14:	2000      	movs	r0, #0
 8001a16:	f004 fc09 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x01);                                                 /* y1_HIGH---320 */
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	f004 fc06 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x3F);                                                 /* y1_LOW----320 */
 8001a20:	203f      	movs	r0, #63	; 0x3f
 8001a22:	f004 fc03 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_TEARING_OFF);                               /* tearing effect off */
 8001a26:	2034      	movs	r0, #52	; 0x34
 8001a28:	f004 fc32 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_command(ILI9341_Entry_Mode_Set);                            /* entry mode set */
 8001a2c:	20b7      	movs	r0, #183	; 0xb7
 8001a2e:	f004 fc2f 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0x07);
 8001a32:	2007      	movs	r0, #7
 8001a34:	f004 fbfa 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_DFC);                                       /* display function control */
 8001a38:	20b6      	movs	r0, #182	; 0xb6
 8001a3a:	f004 fc29 	bl	8006290 <ILI9341_send_command>
	ILI9341_send_data(0x0a);
 8001a3e:	200a      	movs	r0, #10
 8001a40:	f004 fbf4 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x82);
 8001a44:	2082      	movs	r0, #130	; 0x82
 8001a46:	f004 fbf1 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x27);
 8001a4a:	2027      	movs	r0, #39	; 0x27
 8001a4c:	f004 fbee 	bl	800622c <ILI9341_send_data>
	ILI9341_send_data(0x00);                                                 /* clock divisor */
 8001a50:	2000      	movs	r0, #0
 8001a52:	f004 fbeb 	bl	800622c <ILI9341_send_data>
	ILI9341_send_command(ILI9341_SLEEP_OUT);                                 /* sleep out */
 8001a56:	2011      	movs	r0, #17
 8001a58:	f004 fc1a 	bl	8006290 <ILI9341_send_command>
	HAL_Delay(100);
 8001a5c:	2064      	movs	r0, #100	; 0x64
 8001a5e:	f007 f89b 	bl	8008b98 <HAL_Delay>
	ILI9341_send_command(ILI9341_DISPLAY_ON);                                /* display on */
 8001a62:	2029      	movs	r0, #41	; 0x29
 8001a64:	f004 fc14 	bl	8006290 <ILI9341_send_command>
	HAL_Delay(100);
 8001a68:	2064      	movs	r0, #100	; 0x64
 8001a6a:	f007 f895 	bl	8008b98 <HAL_Delay>
	ILI9341_send_command(ILI9341_GRAM);                                      /* memory write */
 8001a6e:	202c      	movs	r0, #44	; 0x2c
 8001a70:	f004 fc0e 	bl	8006290 <ILI9341_send_command>
	HAL_Delay(5);
 8001a74:	2005      	movs	r0, #5
 8001a76:	f007 f88f 	bl	8008b98 <HAL_Delay>
	lcd.myTS_Calibrate = myTS_Calibrate;
 8001a7a:	221c      	movs	r2, #28
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f00c ff44 	bl	800e90c <memset>
	lcd.localRawTouch = localRawTouch;
 8001a84:	2300      	movs	r3, #0
	lcd.myRawTouchDef = myRawTouchDef;
 8001a86:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
	lcd.TOUCH_CS_PORT = TOUCH_CS_PORT;
 8001a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a8c:	61e3      	str	r3, [r4, #28]
	lcd.TOUCH_CS_PIN = TOUCH_CS_PIN;
 8001a8e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8001a92:	8423      	strh	r3, [r4, #32]
	lcd.CMD_Default = 0x84;
 8001a94:	2384      	movs	r3, #132	; 0x84
	STM32_PLC_Flash_Get_LCD_Calibration(&Scale_X, &Scale_Y, &Bias_X, &Bias_Y);
 8001a96:	aa02      	add	r2, sp, #8
 8001a98:	a901      	add	r1, sp, #4
 8001a9a:	4668      	mov	r0, sp
	lcd.CMD_Default = 0x84;
 8001a9c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	STM32_PLC_Flash_Get_LCD_Calibration(&Scale_X, &Scale_Y, &Bias_X, &Bias_Y);
 8001aa0:	ab03      	add	r3, sp, #12
	lcd.touchSpi = touchSpi;
 8001aa2:	61a5      	str	r5, [r4, #24]
	STM32_PLC_Flash_Get_LCD_Calibration(&Scale_X, &Scale_Y, &Bias_X, &Bias_Y);
 8001aa4:	f7ff fdf2 	bl	800168c <STM32_PLC_Flash_Get_LCD_Calibration>
	TSC2046_SetTouchCalibrationParameters(Scale_X, Scale_Y, Bias_X, Bias_Y);
 8001aa8:	eddd 1a03 	vldr	s3, [sp, #12]
 8001aac:	ed9d 1a02 	vldr	s2, [sp, #8]
 8001ab0:	eddd 0a01 	vldr	s1, [sp, #4]
 8001ab4:	ed9d 0a00 	vldr	s0, [sp]
 8001ab8:	f004 ff32 	bl	8006920 <TSC2046_SetTouchCalibrationParameters>
	STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame();
 8001abc:	f004 fb9e 	bl	80061fc <STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame>
	HAL_Delay(2000);
 8001ac0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ac4:	f007 f868 	bl	8008b98 <HAL_Delay>
	STM32_PLC_LCD_Calibrate_Touch();
 8001ac8:	f7ff ff28 	bl	800191c <STM32_PLC_LCD_Calibrate_Touch>
}
 8001acc:	b005      	add	sp, #20
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	20002728 	.word	0x20002728

08001ad4 <STM32_PLC_LED_Set>:
	}
	STM32_PLC_LED_Set(0);
}

/* Select a program number between 0 and 31 e.g 5-bit. 0 is no program activated */
void STM32_PLC_LED_Set(uint8_t binary_value){
 8001ad4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, binary_value & 0b100);
 8001ad6:	f000 0204 	and.w	r2, r0, #4
void STM32_PLC_LED_Set(uint8_t binary_value){
 8001ada:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, binary_value & 0b100);
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f007 feed 	bl	80098c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, binary_value & 0b010);
 8001ae6:	f004 0202 	and.w	r2, r4, #2
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <STM32_PLC_LED_Set+0x30>)
 8001aec:	2110      	movs	r1, #16
 8001aee:	f007 fee7 	bl	80098c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, binary_value & 0b001);
 8001af2:	f004 0201 	and.w	r2, r4, #1
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <STM32_PLC_LED_Set+0x30>)
}
 8001af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, binary_value & 0b001);
 8001afc:	2120      	movs	r1, #32
 8001afe:	f007 bedf 	b.w	80098c0 <HAL_GPIO_WritePin>
 8001b02:	bf00      	nop
 8001b04:	48000800 	.word	0x48000800

08001b08 <STM32_PLC_LED>:
void STM32_PLC_LED(){
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	2400      	movs	r4, #0
		STM32_PLC_LED_Set(i);
 8001b0c:	b2e0      	uxtb	r0, r4
 8001b0e:	f7ff ffe1 	bl	8001ad4 <STM32_PLC_LED_Set>
	for(uint8_t i = 0; i < 0x7; i++){
 8001b12:	3401      	adds	r4, #1
		HAL_Delay(100);
 8001b14:	2064      	movs	r0, #100	; 0x64
 8001b16:	f007 f83f 	bl	8008b98 <HAL_Delay>
	for(uint8_t i = 0; i < 0x7; i++){
 8001b1a:	2c07      	cmp	r4, #7
 8001b1c:	d1f6      	bne.n	8001b0c <STM32_PLC_LED+0x4>
}
 8001b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	STM32_PLC_LED_Set(0);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff bfd6 	b.w	8001ad4 <STM32_PLC_LED_Set>

08001b28 <STM32_PLC_PWM_Set>:
	/* Reset */
	STM32_PLC_PWM_Reset();
}

void STM32_PLC_PWM_Set(uint8_t i, uint16_t ON_Period) {
	switch (i) {
 8001b28:	2807      	cmp	r0, #7
 8001b2a:	d83c      	bhi.n	8001ba6 <STM32_PLC_PWM_Set+0x7e>
 8001b2c:	e8df f000 	tbb	[pc, r0]
 8001b30:	19120b04 	.word	0x19120b04
 8001b34:	352e2720 	.word	0x352e2720
	case 0:
		PWM_TIM_0_3->Instance->CCR1 = ON_Period;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <STM32_PLC_PWM_Set+0x80>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6359      	str	r1, [r3, #52]	; 0x34
		PWM[0] = ON_Period;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b42:	8019      	strh	r1, [r3, #0]
		break;
 8001b44:	4770      	bx	lr
	case 1:
		PWM_TIM_0_3->Instance->CCR2 = ON_Period;
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <STM32_PLC_PWM_Set+0x80>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6399      	str	r1, [r3, #56]	; 0x38
		PWM[1] = ON_Period;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b50:	8059      	strh	r1, [r3, #2]
		break;
 8001b52:	4770      	bx	lr
	case 2:
		PWM_TIM_0_3->Instance->CCR3 = ON_Period;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <STM32_PLC_PWM_Set+0x80>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	63d9      	str	r1, [r3, #60]	; 0x3c
		PWM[2] = ON_Period;
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b5e:	8099      	strh	r1, [r3, #4]
		break;
 8001b60:	4770      	bx	lr
	case 3:
		PWM_TIM_0_3->Instance->CCR4 = ON_Period;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <STM32_PLC_PWM_Set+0x80>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6419      	str	r1, [r3, #64]	; 0x40
		PWM[3] = ON_Period;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b6c:	80d9      	strh	r1, [r3, #6]
		break;
 8001b6e:	4770      	bx	lr
	case 4:
		PWM_TIM_4_7->Instance->CCR1 = ON_Period;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <STM32_PLC_PWM_Set+0x88>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6359      	str	r1, [r3, #52]	; 0x34
		PWM[4] = ON_Period;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b7a:	8119      	strh	r1, [r3, #8]
		break;
 8001b7c:	4770      	bx	lr
	case 5:
		PWM_TIM_4_7->Instance->CCR2 = ON_Period;
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <STM32_PLC_PWM_Set+0x88>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6399      	str	r1, [r3, #56]	; 0x38
		PWM[5] = ON_Period;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b88:	8159      	strh	r1, [r3, #10]
		break;
 8001b8a:	4770      	bx	lr
	case 6:
		PWM_TIM_4_7->Instance->CCR3 = ON_Period;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <STM32_PLC_PWM_Set+0x88>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	63d9      	str	r1, [r3, #60]	; 0x3c
		PWM[6] = ON_Period;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001b96:	8199      	strh	r1, [r3, #12]
		break;
 8001b98:	4770      	bx	lr
	case 7:
		PWM_TIM_4_7->Instance->CCR4 = ON_Period;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <STM32_PLC_PWM_Set+0x88>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6419      	str	r1, [r3, #64]	; 0x40
		PWM[7] = ON_Period;
 8001ba2:	4b02      	ldr	r3, [pc, #8]	; (8001bac <STM32_PLC_PWM_Set+0x84>)
 8001ba4:	81d9      	strh	r1, [r3, #14]
		break;
	}
}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000798 	.word	0x20000798
 8001bac:	20000788 	.word	0x20000788
 8001bb0:	2000079c 	.word	0x2000079c

08001bb4 <STM32_PLC_PWM_Reset>:

uint16_t STM32_PLC_PWM_Get(uint8_t i) {
	return PWM[i];
}

void STM32_PLC_PWM_Reset() {
 8001bb4:	b508      	push	{r3, lr}
 8001bb6:	2200      	movs	r2, #0
	for(uint8_t i = 0; i < 8; i++)
		STM32_PLC_PWM_Set(i, 0);
 8001bb8:	b2d0      	uxtb	r0, r2
 8001bba:	2100      	movs	r1, #0
	for(uint8_t i = 0; i < 8; i++)
 8001bbc:	3201      	adds	r2, #1
		STM32_PLC_PWM_Set(i, 0);
 8001bbe:	f7ff ffb3 	bl	8001b28 <STM32_PLC_PWM_Set>
	for(uint8_t i = 0; i < 8; i++)
 8001bc2:	2a08      	cmp	r2, #8
 8001bc4:	d1f8      	bne.n	8001bb8 <STM32_PLC_PWM_Reset+0x4>
}
 8001bc6:	bd08      	pop	{r3, pc}

08001bc8 <STM32_PLC_PWM>:
void STM32_PLC_PWM(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim5) {
 8001bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bca:	460c      	mov	r4, r1
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1)  != HAL_OK)
 8001bcc:	2100      	movs	r1, #0
void STM32_PLC_PWM(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim5) {
 8001bce:	4605      	mov	r5, r0
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1)  != HAL_OK)
 8001bd0:	f00b f87a 	bl	800ccc8 <HAL_TIM_PWM_Start>
 8001bd4:	b108      	cbz	r0, 8001bda <STM32_PLC_PWM+0x12>
		Error_Handler();
 8001bd6:	f005 fc61 	bl	800749c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2)  != HAL_OK)
 8001bda:	2104      	movs	r1, #4
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f00b f873 	bl	800ccc8 <HAL_TIM_PWM_Start>
 8001be2:	b108      	cbz	r0, 8001be8 <STM32_PLC_PWM+0x20>
			Error_Handler();
 8001be4:	f005 fc5a 	bl	800749c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3)  != HAL_OK)
 8001be8:	2108      	movs	r1, #8
 8001bea:	4628      	mov	r0, r5
 8001bec:	f00b f86c 	bl	800ccc8 <HAL_TIM_PWM_Start>
 8001bf0:	b108      	cbz	r0, 8001bf6 <STM32_PLC_PWM+0x2e>
			Error_Handler();
 8001bf2:	f005 fc53 	bl	800749c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4)  != HAL_OK)
 8001bf6:	210c      	movs	r1, #12
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f00b f865 	bl	800ccc8 <HAL_TIM_PWM_Start>
 8001bfe:	b108      	cbz	r0, 8001c04 <STM32_PLC_PWM+0x3c>
			Error_Handler();
 8001c00:	f005 fc4c 	bl	800749c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_1)  != HAL_OK)
 8001c04:	2100      	movs	r1, #0
 8001c06:	4620      	mov	r0, r4
 8001c08:	f00b f85e 	bl	800ccc8 <HAL_TIM_PWM_Start>
 8001c0c:	b108      	cbz	r0, 8001c12 <STM32_PLC_PWM+0x4a>
		Error_Handler();
 8001c0e:	f005 fc45 	bl	800749c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_2)  != HAL_OK)
 8001c12:	2104      	movs	r1, #4
 8001c14:	4620      	mov	r0, r4
 8001c16:	f00b f857 	bl	800ccc8 <HAL_TIM_PWM_Start>
 8001c1a:	b108      	cbz	r0, 8001c20 <STM32_PLC_PWM+0x58>
			Error_Handler();
 8001c1c:	f005 fc3e 	bl	800749c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_3)  != HAL_OK)
 8001c20:	2108      	movs	r1, #8
 8001c22:	4620      	mov	r0, r4
 8001c24:	f00b f850 	bl	800ccc8 <HAL_TIM_PWM_Start>
 8001c28:	b108      	cbz	r0, 8001c2e <STM32_PLC_PWM+0x66>
			Error_Handler();
 8001c2a:	f005 fc37 	bl	800749c <Error_Handler>
	if(HAL_TIM_PWM_Start(htim5, TIM_CHANNEL_4)  != HAL_OK)
 8001c2e:	210c      	movs	r1, #12
 8001c30:	4620      	mov	r0, r4
 8001c32:	f00b f849 	bl	800ccc8 <HAL_TIM_PWM_Start>
 8001c36:	b108      	cbz	r0, 8001c3c <STM32_PLC_PWM+0x74>
			Error_Handler();
 8001c38:	f005 fc30 	bl	800749c <Error_Handler>
	PWM_TIM_4_7 = htim2;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <STM32_PLC_PWM+0xa0>)
 8001c3e:	601d      	str	r5, [r3, #0]
	PWM_TIM_0_3 = htim5;
 8001c40:	4d0a      	ldr	r5, [pc, #40]	; (8001c6c <STM32_PLC_PWM+0xa4>)
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 8001c42:	f10d 0106 	add.w	r1, sp, #6
 8001c46:	a801      	add	r0, sp, #4
	PWM_TIM_0_3 = htim5;
 8001c48:	602c      	str	r4, [r5, #0]
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 8001c4a:	f7ff fcfc 	bl	8001646 <STM32_PLC_Flash_Get_PWM_Prescalers>

void STM32_PLC_PWM0_To_PWM3_Set_Prescaler(uint16_t prescaler, bool save_to_flash) {
	PWM_TIM_0_3->Instance->PSC = prescaler;
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
 8001c58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
	STM32_PLC_PWM_Reset();
 8001c5e:	f7ff ffa9 	bl	8001bb4 <STM32_PLC_PWM_Reset>
}
 8001c62:	b003      	add	sp, #12
 8001c64:	bd30      	pop	{r4, r5, pc}
 8001c66:	bf00      	nop
 8001c68:	2000079c 	.word	0x2000079c
 8001c6c:	20000798 	.word	0x20000798

08001c70 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>:
	PWM_TIM_0_3->Instance->PSC = prescaler;
 8001c70:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler+0x10>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	6290      	str	r0, [r2, #40]	; 0x28
	if(save_to_flash)
 8001c78:	b109      	cbz	r1, 8001c7e <STM32_PLC_PWM0_To_PWM3_Set_Prescaler+0xe>
		STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_0_3(prescaler);
 8001c7a:	f7ff bbf7 	b.w	800146c <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_0_3>
}
 8001c7e:	4770      	bx	lr
 8001c80:	20000798 	.word	0x20000798

08001c84 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>:

void STM32_PLC_PWM4_To_PWM7_Set_Prescaler(uint16_t prescaler, bool save_to_flash) {
	PWM_TIM_4_7->Instance->PSC = prescaler;
 8001c84:	4a03      	ldr	r2, [pc, #12]	; (8001c94 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler+0x10>)
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	6290      	str	r0, [r2, #40]	; 0x28
	if(save_to_flash)
 8001c8c:	b109      	cbz	r1, 8001c92 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler+0xe>
		STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_4_7(prescaler);
 8001c8e:	f7ff bbf0 	b.w	8001472 <STM32_PLC_Flash_Set_PWM_Prescaler_For_PWM_4_7>
}
 8001c92:	4770      	bx	lr
 8001c94:	2000079c 	.word	0x2000079c

08001c98 <STM32_PLC_RTC>:
static bool alarm_B_enabled;
static bool alarm_A_is_active;
static bool alarm_B_is_active;

void STM32_PLC_RTC(RTC_HandleTypeDef *hrtc) {
	real_time_clock = hrtc;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <STM32_PLC_RTC+0xc>)

	/* Get alarm enables */
	STM32_PLC_Flash_Get_Alarm_Enables(&alarm_A_enabled, &alarm_B_enabled);
 8001c9a:	4903      	ldr	r1, [pc, #12]	; (8001ca8 <STM32_PLC_RTC+0x10>)
	real_time_clock = hrtc;
 8001c9c:	6018      	str	r0, [r3, #0]
	STM32_PLC_Flash_Get_Alarm_Enables(&alarm_A_enabled, &alarm_B_enabled);
 8001c9e:	4803      	ldr	r0, [pc, #12]	; (8001cac <STM32_PLC_RTC+0x14>)
 8001ca0:	f7ff bce0 	b.w	8001664 <STM32_PLC_Flash_Get_Alarm_Enables>
 8001ca4:	200007a4 	.word	0x200007a4
 8001ca8:	200007a2 	.word	0x200007a2
 8001cac:	200007a0 	.word	0x200007a0

08001cb0 <STM32_PLC_RTC_Get_Date>:
}

void STM32_PLC_RTC_Get_Date(uint8_t *week_day, uint8_t *date, uint8_t *month, uint8_t *year) {
 8001cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cb2:	461d      	mov	r5, r3
	RTC_DateTypeDef sDate = {0};
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <STM32_PLC_RTC_Get_Date+0x34>)
void STM32_PLC_RTC_Get_Date(uint8_t *week_day, uint8_t *date, uint8_t *month, uint8_t *year) {
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	460f      	mov	r7, r1
 8001cba:	4616      	mov	r6, r2
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cbc:	6818      	ldr	r0, [r3, #0]
	RTC_DateTypeDef sDate = {0};
 8001cbe:	2200      	movs	r2, #0
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cc0:	a901      	add	r1, sp, #4
	RTC_DateTypeDef sDate = {0};
 8001cc2:	9201      	str	r2, [sp, #4]
	HAL_RTC_GetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cc4:	f009 fb40 	bl	800b348 <HAL_RTC_GetDate>
	*date = sDate.Date;
 8001cc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ccc:	703b      	strb	r3, [r7, #0]
	*month = sDate.Month;
 8001cce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001cd2:	7033      	strb	r3, [r6, #0]
	*year = sDate.Year;
 8001cd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cd8:	702b      	strb	r3, [r5, #0]
	*week_day = sDate.WeekDay;
 8001cda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001cde:	7023      	strb	r3, [r4, #0]
}
 8001ce0:	b003      	add	sp, #12
 8001ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce4:	200007a4 	.word	0x200007a4

08001ce8 <STM32_PLC_RTC_Set_Date>:

void STM32_PLC_RTC_Set_Date(uint8_t date, uint8_t week_day, uint8_t month, uint8_t year) {
 8001ce8:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
	sDate.Date = date;
	sDate.Month = month;
	sDate.Year = year;
 8001cea:	f88d 3007 	strb.w	r3, [sp, #7]
	sDate.WeekDay = week_day;
	HAL_RTC_SetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <STM32_PLC_RTC_Set_Date+0x24>)
	sDate.Date = date;
 8001cf0:	f88d 0006 	strb.w	r0, [sp, #6]
	sDate.Month = month;
 8001cf4:	f88d 2005 	strb.w	r2, [sp, #5]
	sDate.WeekDay = week_day;
 8001cf8:	f88d 1004 	strb.w	r1, [sp, #4]
	HAL_RTC_SetDate(real_time_clock, &sDate, RTC_FORMAT_BIN);
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	a901      	add	r1, sp, #4
 8001d02:	f009 f9df 	bl	800b0c4 <HAL_RTC_SetDate>
}
 8001d06:	b003      	add	sp, #12
 8001d08:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d0c:	200007a4 	.word	0x200007a4

08001d10 <STM32_PLC_RTC_Get_Time>:

void STM32_PLC_RTC_Get_Time(uint8_t *seconds, uint8_t *minutes, uint8_t *hours) {
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	4606      	mov	r6, r0
 8001d16:	460d      	mov	r5, r1
 8001d18:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2214      	movs	r2, #20
 8001d1e:	a801      	add	r0, sp, #4
 8001d20:	f00c fdf4 	bl	800e90c <memset>
	HAL_RTC_GetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <STM32_PLC_RTC_Get_Time+0x38>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	a901      	add	r1, sp, #4
 8001d2c:	f009 fae7 	bl	800b2fe <HAL_RTC_GetTime>
	*seconds = sTime.Seconds;
 8001d30:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d34:	7033      	strb	r3, [r6, #0]
	*minutes = sTime.Minutes;
 8001d36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001d3a:	702b      	strb	r3, [r5, #0]
	*hours = sTime.Hours;
 8001d3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d40:	7023      	strb	r3, [r4, #0]
}
 8001d42:	b006      	add	sp, #24
 8001d44:	bd70      	pop	{r4, r5, r6, pc}
 8001d46:	bf00      	nop
 8001d48:	200007a4 	.word	0x200007a4

08001d4c <STM32_PLC_RTC_Set_Time>:

void STM32_PLC_RTC_Set_Time(uint8_t seconds, uint8_t minutes, uint8_t hours) {
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	4606      	mov	r6, r0
 8001d52:	460d      	mov	r5, r1
 8001d54:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8001d56:	2100      	movs	r1, #0
 8001d58:	2214      	movs	r2, #20
 8001d5a:	a801      	add	r0, sp, #4
 8001d5c:	f00c fdd6 	bl	800e90c <memset>
	sTime.Seconds = seconds;
	sTime.Minutes = minutes;
	sTime.Hours = hours;
	sTime.TimeFormat = RTC_FORMAT_BIN;
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <STM32_PLC_RTC_Set_Time+0x30>)
	sTime.Seconds = seconds;
 8001d62:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d66:	6818      	ldr	r0, [r3, #0]
	sTime.Minutes = minutes;
 8001d68:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	a901      	add	r1, sp, #4
	sTime.Hours = hours;
 8001d70:	f88d 4004 	strb.w	r4, [sp, #4]
	HAL_RTC_SetTime(real_time_clock, &sTime, RTC_FORMAT_BIN);
 8001d74:	f009 f935 	bl	800afe2 <HAL_RTC_SetTime>
}
 8001d78:	b006      	add	sp, #24
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}
 8001d7c:	200007a4 	.word	0x200007a4

08001d80 <STM32_PLC_RTC_Get_Alarm_A>:

void STM32_PLC_RTC_Get_Alarm_A(uint8_t *date, uint8_t *hours, uint8_t *minutes) {
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	4606      	mov	r6, r0
 8001d86:	460d      	mov	r5, r1
 8001d88:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2228      	movs	r2, #40	; 0x28
 8001d8e:	4668      	mov	r0, sp
 8001d90:	f00c fdbc 	bl	800e90c <memset>
	HAL_RTC_GetAlarm(real_time_clock, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <STM32_PLC_RTC_Get_Alarm_A+0x3c>)
 8001d96:	2300      	movs	r3, #0
 8001d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9c:	4669      	mov	r1, sp
 8001d9e:	6800      	ldr	r0, [r0, #0]
 8001da0:	f009 faef 	bl	800b382 <HAL_RTC_GetAlarm>
	*date = sAlarm.AlarmDateWeekDay;
 8001da4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001da8:	7033      	strb	r3, [r6, #0]
	*hours = sAlarm.AlarmTime.Hours;
 8001daa:	f89d 3000 	ldrb.w	r3, [sp]
 8001dae:	702b      	strb	r3, [r5, #0]
	*minutes = sAlarm.AlarmTime.Minutes;
 8001db0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001db4:	7023      	strb	r3, [r4, #0]
}
 8001db6:	b00a      	add	sp, #40	; 0x28
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
 8001dba:	bf00      	nop
 8001dbc:	200007a4 	.word	0x200007a4

08001dc0 <STM32_PLC_RTC_Get_Alarm_B>:

void STM32_PLC_RTC_Get_Alarm_B(uint8_t *week_day, uint8_t *hours, uint8_t *minutes) {
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	4606      	mov	r6, r0
 8001dc6:	460d      	mov	r5, r1
 8001dc8:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2228      	movs	r2, #40	; 0x28
 8001dce:	4668      	mov	r0, sp
 8001dd0:	f00c fd9c 	bl	800e90c <memset>
	HAL_RTC_GetAlarm(real_time_clock, &sAlarm, RTC_ALARM_B, RTC_FORMAT_BIN);
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <STM32_PLC_RTC_Get_Alarm_B+0x3c>)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ddc:	4669      	mov	r1, sp
 8001dde:	6800      	ldr	r0, [r0, #0]
 8001de0:	f009 facf 	bl	800b382 <HAL_RTC_GetAlarm>
	*week_day = sAlarm.AlarmDateWeekDay;
 8001de4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001de8:	7033      	strb	r3, [r6, #0]
	*hours = sAlarm.AlarmTime.Hours;
 8001dea:	f89d 3000 	ldrb.w	r3, [sp]
 8001dee:	702b      	strb	r3, [r5, #0]
	*minutes = sAlarm.AlarmTime.Minutes;
 8001df0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001df4:	7023      	strb	r3, [r4, #0]
}
 8001df6:	b00a      	add	sp, #40	; 0x28
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200007a4 	.word	0x200007a4

08001e00 <STM32_PLC_RTC_Set_Alarm_A>:

void STM32_PLC_RTC_Set_Alarm_A(uint8_t minutes, uint8_t hours, uint8_t date) {
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	4605      	mov	r5, r0
 8001e06:	460e      	mov	r6, r1
 8001e08:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2224      	movs	r2, #36	; 0x24
 8001e0e:	4668      	mov	r0, sp
 8001e10:	f00c fd7c 	bl	800e90c <memset>
	sAlarm.AlarmTime.TimeFormat = RTC_FORMAT_BIN;
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
	sAlarm.AlarmDateWeekDay = date;
	sAlarm.Alarm = RTC_ALARM_A;
 8001e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e18:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <STM32_PLC_RTC_Set_Alarm_A+0x38>)
	sAlarm.AlarmTime.Hours = hours;
 8001e1c:	f88d 6000 	strb.w	r6, [sp]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e20:	6818      	ldr	r0, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8001e22:	f88d 5001 	strb.w	r5, [sp, #1]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e26:	2200      	movs	r2, #0
 8001e28:	4669      	mov	r1, sp
	sAlarm.AlarmDateWeekDay = date;
 8001e2a:	f88d 4020 	strb.w	r4, [sp, #32]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e2e:	f009 f9a9 	bl	800b184 <HAL_RTC_SetAlarm_IT>
}
 8001e32:	b00a      	add	sp, #40	; 0x28
 8001e34:	bd70      	pop	{r4, r5, r6, pc}
 8001e36:	bf00      	nop
 8001e38:	200007a4 	.word	0x200007a4

08001e3c <STM32_PLC_RTC_Set_Alarm_B>:

void STM32_PLC_RTC_Set_Alarm_B(uint8_t minutes, uint8_t hours, uint8_t week_day) {
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	4605      	mov	r5, r0
 8001e42:	460e      	mov	r6, r1
 8001e44:	4614      	mov	r4, r2
	RTC_AlarmTypeDef sAlarm = {0};
 8001e46:	2100      	movs	r1, #0
 8001e48:	2224      	movs	r2, #36	; 0x24
 8001e4a:	4668      	mov	r0, sp
 8001e4c:	f00c fd5e 	bl	800e90c <memset>
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	sAlarm.AlarmTime.TimeFormat = RTC_FORMAT_BIN;
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e54:	9307      	str	r3, [sp, #28]
	sAlarm.AlarmDateWeekDay = week_day;
	sAlarm.Alarm = RTC_ALARM_B;
 8001e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <STM32_PLC_RTC_Set_Alarm_B+0x3c>)
	sAlarm.AlarmTime.Hours = hours;
 8001e5e:	f88d 6000 	strb.w	r6, [sp]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e62:	6818      	ldr	r0, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8001e64:	f88d 5001 	strb.w	r5, [sp, #1]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4669      	mov	r1, sp
	sAlarm.AlarmDateWeekDay = week_day;
 8001e6c:	f88d 4020 	strb.w	r4, [sp, #32]
	HAL_RTC_SetAlarm_IT(real_time_clock, &sAlarm, RTC_FORMAT_BIN);
 8001e70:	f009 f988 	bl	800b184 <HAL_RTC_SetAlarm_IT>
}
 8001e74:	b00a      	add	sp, #40	; 0x28
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
 8001e78:	200007a4 	.word	0x200007a4

08001e7c <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
	if(alarm_B_enabled){
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_RTCEx_AlarmBEventCallback+0x40>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
 8001e80:	b510      	push	{r4, lr}
	if(alarm_B_enabled){
 8001e82:	b1cb      	cbz	r3, 8001eb8 <HAL_RTCEx_AlarmBEventCallback+0x3c>
		if(!alarm_B_is_active){
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_RTCEx_AlarmBEventCallback+0x44>)
 8001e86:	7818      	ldrb	r0, [r3, #0]
 8001e88:	b9b0      	cbnz	r0, 8001eb8 <HAL_RTCEx_AlarmBEventCallback+0x3c>
			alarm_B_is_active = true;
 8001e8a:	2401      	movs	r4, #1
			STM32_PLC_PWM_Set(0, 0xFFFF);
 8001e8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
			alarm_B_is_active = true;
 8001e90:	701c      	strb	r4, [r3, #0]
			STM32_PLC_PWM_Set(0, 0xFFFF);
 8001e92:	f7ff fe49 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(1, 0xFFFF);
 8001e96:	4620      	mov	r0, r4
 8001e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e9c:	f7ff fe44 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(2, 0xFFFF);
 8001ea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f7ff fe3f 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(3, 0xFFFF);
		}
	}
}
 8001eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			STM32_PLC_PWM_Set(3, 0xFFFF);
 8001eae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f7ff be38 	b.w	8001b28 <STM32_PLC_PWM_Set>
}
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	bf00      	nop
 8001ebc:	200007a2 	.word	0x200007a2
 8001ec0:	200007a3 	.word	0x200007a3

08001ec4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8001ec4:	b508      	push	{r3, lr}
	if(alarm_A_enabled){
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_RTC_AlarmAEventCallback+0x40>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b1d3      	cbz	r3, 8001f02 <HAL_RTC_AlarmAEventCallback+0x3e>
		if(!alarm_A_is_active){
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_RTC_AlarmAEventCallback+0x44>)
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	b9ba      	cbnz	r2, 8001f02 <HAL_RTC_AlarmAEventCallback+0x3e>
			alarm_A_is_active = true;
 8001ed2:	2201      	movs	r2, #1
			STM32_PLC_PWM_Set(4, 0xFFFF);
 8001ed4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ed8:	2004      	movs	r0, #4
			alarm_A_is_active = true;
 8001eda:	701a      	strb	r2, [r3, #0]
			STM32_PLC_PWM_Set(4, 0xFFFF);
 8001edc:	f7ff fe24 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(5, 0xFFFF);
 8001ee0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ee4:	2005      	movs	r0, #5
 8001ee6:	f7ff fe1f 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(6, 0xFFFF);
 8001eea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eee:	2006      	movs	r0, #6
 8001ef0:	f7ff fe1a 	bl	8001b28 <STM32_PLC_PWM_Set>
			STM32_PLC_PWM_Set(7, 0xFFFF);
		}
	}
}
 8001ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			STM32_PLC_PWM_Set(7, 0xFFFF);
 8001ef8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001efc:	2007      	movs	r0, #7
 8001efe:	f7ff be13 	b.w	8001b28 <STM32_PLC_PWM_Set>
}
 8001f02:	bd08      	pop	{r3, pc}
 8001f04:	200007a0 	.word	0x200007a0
 8001f08:	200007a1 	.word	0x200007a1

08001f0c <STM32_PLC_RTC_Deactivate_Alarm_A>:

void STM32_PLC_RTC_Deactivate_Alarm_A(){
 8001f0c:	b510      	push	{r4, lr}
	alarm_A_is_active = false;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <STM32_PLC_RTC_Deactivate_Alarm_A+0x2c>)
 8001f10:	2400      	movs	r4, #0
	STM32_PLC_PWM_Set(4, 0x0);
 8001f12:	4621      	mov	r1, r4
 8001f14:	2004      	movs	r0, #4
	alarm_A_is_active = false;
 8001f16:	701c      	strb	r4, [r3, #0]
	STM32_PLC_PWM_Set(4, 0x0);
 8001f18:	f7ff fe06 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(5, 0x0);
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	2005      	movs	r0, #5
 8001f20:	f7ff fe02 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(6, 0x0);
 8001f24:	4621      	mov	r1, r4
 8001f26:	2006      	movs	r0, #6
 8001f28:	f7ff fdfe 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(7, 0x0);
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	2007      	movs	r0, #7
}
 8001f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	STM32_PLC_PWM_Set(7, 0x0);
 8001f34:	f7ff bdf8 	b.w	8001b28 <STM32_PLC_PWM_Set>
 8001f38:	200007a1 	.word	0x200007a1

08001f3c <STM32_PLC_RTC_Enable_Alarm_A>:

void STM32_PLC_RTC_Enable_Alarm_A(bool enable){
	alarm_A_enabled = enable;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <STM32_PLC_RTC_Enable_Alarm_A+0x1c>)
void STM32_PLC_RTC_Enable_Alarm_A(bool enable){
 8001f3e:	b510      	push	{r4, lr}
	alarm_A_enabled = enable;
 8001f40:	7018      	strb	r0, [r3, #0]
	STM32_PLC_Flash_Set_Alarm_Enable(alarm_A_enabled, alarm_B_enabled);
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <STM32_PLC_RTC_Enable_Alarm_A+0x20>)
void STM32_PLC_RTC_Enable_Alarm_A(bool enable){
 8001f44:	4604      	mov	r4, r0
	STM32_PLC_Flash_Set_Alarm_Enable(alarm_A_enabled, alarm_B_enabled);
 8001f46:	7819      	ldrb	r1, [r3, #0]
 8001f48:	f7ff fa96 	bl	8001478 <STM32_PLC_Flash_Set_Alarm_Enable>
	if(!enable)
 8001f4c:	b91c      	cbnz	r4, 8001f56 <STM32_PLC_RTC_Enable_Alarm_A+0x1a>
		STM32_PLC_RTC_Deactivate_Alarm_A();
}
 8001f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		STM32_PLC_RTC_Deactivate_Alarm_A();
 8001f52:	f7ff bfdb 	b.w	8001f0c <STM32_PLC_RTC_Deactivate_Alarm_A>
}
 8001f56:	bd10      	pop	{r4, pc}
 8001f58:	200007a0 	.word	0x200007a0
 8001f5c:	200007a2 	.word	0x200007a2

08001f60 <STM32_PLC_RTC_Alarm_A_Is_Enabled>:

bool STM32_PLC_RTC_Alarm_A_Is_Enabled(){
	return alarm_A_enabled;
}
 8001f60:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <STM32_PLC_RTC_Alarm_A_Is_Enabled+0x8>)
 8001f62:	7818      	ldrb	r0, [r3, #0]
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200007a0 	.word	0x200007a0

08001f6c <STM32_PLC_RTC_Alarm_A_Is_Activated>:

bool STM32_PLC_RTC_Alarm_A_Is_Activated(){
	return alarm_A_is_active;
}
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <STM32_PLC_RTC_Alarm_A_Is_Activated+0x8>)
 8001f6e:	7818      	ldrb	r0, [r3, #0]
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200007a1 	.word	0x200007a1

08001f78 <STM32_PLC_RTC_Deactivate_Alarm_B>:

void STM32_PLC_RTC_Deactivate_Alarm_B(){
 8001f78:	b510      	push	{r4, lr}
	alarm_B_is_active = false;
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <STM32_PLC_RTC_Deactivate_Alarm_B+0x2c>)
 8001f7c:	2400      	movs	r4, #0
	STM32_PLC_PWM_Set(0, 0x0);
 8001f7e:	4621      	mov	r1, r4
 8001f80:	4620      	mov	r0, r4
	alarm_B_is_active = false;
 8001f82:	701c      	strb	r4, [r3, #0]
	STM32_PLC_PWM_Set(0, 0x0);
 8001f84:	f7ff fdd0 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(1, 0x0);
 8001f88:	4621      	mov	r1, r4
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff fdcc 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(2, 0x0);
 8001f90:	4621      	mov	r1, r4
 8001f92:	2002      	movs	r0, #2
 8001f94:	f7ff fdc8 	bl	8001b28 <STM32_PLC_PWM_Set>
	STM32_PLC_PWM_Set(3, 0x0);
 8001f98:	4621      	mov	r1, r4
 8001f9a:	2003      	movs	r0, #3
}
 8001f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	STM32_PLC_PWM_Set(3, 0x0);
 8001fa0:	f7ff bdc2 	b.w	8001b28 <STM32_PLC_PWM_Set>
 8001fa4:	200007a3 	.word	0x200007a3

08001fa8 <STM32_PLC_RTC_Enable_Alarm_B>:

void STM32_PLC_RTC_Enable_Alarm_B(bool enable){
	alarm_B_enabled = enable;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <STM32_PLC_RTC_Enable_Alarm_B+0x20>)
void STM32_PLC_RTC_Enable_Alarm_B(bool enable){
 8001faa:	b510      	push	{r4, lr}
	alarm_B_enabled = enable;
 8001fac:	7018      	strb	r0, [r3, #0]
	STM32_PLC_Flash_Set_Alarm_Enable(alarm_A_enabled, alarm_B_enabled);
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <STM32_PLC_RTC_Enable_Alarm_B+0x24>)
void STM32_PLC_RTC_Enable_Alarm_B(bool enable){
 8001fb0:	4604      	mov	r4, r0
	STM32_PLC_Flash_Set_Alarm_Enable(alarm_A_enabled, alarm_B_enabled);
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	7818      	ldrb	r0, [r3, #0]
 8001fb6:	f7ff fa5f 	bl	8001478 <STM32_PLC_Flash_Set_Alarm_Enable>
	if(!enable)
 8001fba:	b91c      	cbnz	r4, 8001fc4 <STM32_PLC_RTC_Enable_Alarm_B+0x1c>
		STM32_PLC_RTC_Deactivate_Alarm_B();
}
 8001fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		STM32_PLC_RTC_Deactivate_Alarm_B();
 8001fc0:	f7ff bfda 	b.w	8001f78 <STM32_PLC_RTC_Deactivate_Alarm_B>
}
 8001fc4:	bd10      	pop	{r4, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200007a2 	.word	0x200007a2
 8001fcc:	200007a0 	.word	0x200007a0

08001fd0 <STM32_PLC_RTC_Alarm_B_Is_Enabled>:

bool STM32_PLC_RTC_Alarm_B_Is_Enabled(){
	return alarm_B_enabled;
}
 8001fd0:	4b01      	ldr	r3, [pc, #4]	; (8001fd8 <STM32_PLC_RTC_Alarm_B_Is_Enabled+0x8>)
 8001fd2:	7818      	ldrb	r0, [r3, #0]
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200007a2 	.word	0x200007a2

08001fdc <STM32_PLC_RTC_Alarm_B_Is_Activated>:

bool STM32_PLC_RTC_Alarm_B_Is_Activated(){
	return alarm_B_is_active;
}
 8001fdc:	4b01      	ldr	r3, [pc, #4]	; (8001fe4 <STM32_PLC_RTC_Alarm_B_Is_Activated+0x8>)
 8001fde:	7818      	ldrb	r0, [r3, #0]
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200007a3 	.word	0x200007a3

08001fe8 <CDC_ReceiveCallback>:
 *
 * }
 * is there below
 */

void CDC_ReceiveCallback(uint8_t* receive_buf, uint32_t receive_len){
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	b093      	sub	sp, #76	; 0x4c
 8001fee:	4606      	mov	r6, r0
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4688      	mov	r8, r1
	/* Toggle the USB LED */
	HAL_GPIO_TogglePin(LED_USB_GPIO_Port, LED_USB_Pin);
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	f007 fc66 	bl	80098ca <HAL_GPIO_TogglePin>

	/* Read all bytes as they where packages */
	uint32_t byte_index = 0;
 8001ffe:	2400      	movs	r4, #0
	while(byte_index < receive_len){
 8002000:	4544      	cmp	r4, r8
 8002002:	d303      	bcc.n	800200c <CDC_ReceiveCallback+0x24>
			break;
		default:
			byte_index = receive_len; /* In case if the switch statement did not understand */
		}
	}
}
 8002004:	374c      	adds	r7, #76	; 0x4c
 8002006:	46bd      	mov	sp, r7
 8002008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch(message_type){
 800200c:	5d33      	ldrb	r3, [r6, r4]
 800200e:	3b01      	subs	r3, #1
		uint8_t message_type = receive_buf[byte_index++];
 8002010:	1c65      	adds	r5, r4, #1
		switch(message_type){
 8002012:	2b0c      	cmp	r3, #12
 8002014:	f200 81a7 	bhi.w	8002366 <CDC_ReceiveCallback+0x37e>
 8002018:	e8df f013 	tbh	[pc, r3, lsl #1]
 800201c:	01a5000d 	.word	0x01a5000d
 8002020:	00e00036 	.word	0x00e00036
 8002024:	00e900ce 	.word	0x00e900ce
 8002028:	01310100 	.word	0x01310100
 800202c:	015f0142 	.word	0x015f0142
 8002030:	016f017f 	.word	0x016f017f
 8002034:	0197      	.short	0x0197

static uint32_t read_can_bus_message_from_open_source_logger(uint32_t byte_index, uint8_t *receive_buf){
	/* Create the CAN message */
	CAN_TxHeaderTypeDef TxHeader = {0};
	TxHeader.IDE = receive_buf[byte_index++]; /* CAN_ID_STD or CAN_ID_EXT */
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 8002036:	1932      	adds	r2, r6, r4
	CAN_TxHeaderTypeDef TxHeader = {0};
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = receive_buf[byte_index++]; /* CAN_ID_STD or CAN_ID_EXT */
 800203e:	5d73      	ldrb	r3, [r6, r5]
 8002040:	617b      	str	r3, [r7, #20]
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 8002042:	78d3      	ldrb	r3, [r2, #3]
 8002044:	7891      	ldrb	r1, [r2, #2]
	byte_index += 4;
	/* Give ID to both StdID and ExtId. The IDE variable determine which one we are going to use */
	TxHeader.StdId = ID;
	TxHeader.ExtId = ID;
	TxHeader.DLC = receive_buf[byte_index++];
 8002046:	7995      	ldrb	r5, [r2, #6]
 8002048:	61fd      	str	r5, [r7, #28]
	uint32_t ID = (receive_buf[byte_index] << 24) | (receive_buf[byte_index + 1] << 16) | (receive_buf[byte_index + 2] << 8) | receive_buf[byte_index + 3];
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002050:	7951      	ldrb	r1, [r2, #5]
 8002052:	430b      	orrs	r3, r1
 8002054:	7911      	ldrb	r1, [r2, #4]
 8002056:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	TxHeader.ExtId = ID;
 800205a:	e9c7 3303 	strd	r3, r3, [r7, #12]
	uint8_t data[TxHeader.DLC];
 800205e:	1deb      	adds	r3, r5, #7
 8002060:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
static uint32_t read_can_bus_message_from_open_source_logger(uint32_t byte_index, uint8_t *receive_buf){
 8002064:	46e9      	mov	r9, sp
	TxHeader.DLC = receive_buf[byte_index++];
 8002066:	3407      	adds	r4, #7
	uint8_t data[TxHeader.DLC];
 8002068:	ebad 0d03 	sub.w	sp, sp, r3
	for(uint8_t i = 0; i < TxHeader.DLC; i++)
		data[i] = receive_buf[byte_index++];
 800206c:	462a      	mov	r2, r5
 800206e:	1931      	adds	r1, r6, r4
 8002070:	4668      	mov	r0, sp
 8002072:	f00c fc23 	bl	800e8bc <memcpy>
	TxHeader.RTR = CAN_RTR_DATA;                                /* Data frame */
	TxHeader.TransmitGlobalTime = DISABLE;
	STM32_PLC_CAN_Transmit(data, &TxHeader);
 8002076:	4668      	mov	r0, sp
 8002078:	f107 010c 	add.w	r1, r7, #12
 800207c:	f7ff f888 	bl	8001190 <STM32_PLC_CAN_Transmit>
 8002080:	4425      	add	r5, r4

	/* Return byte index value */
	return byte_index;
 8002082:	46cd      	mov	sp, r9
			byte_index = send_back_adc_gains(byte_index, receive_buf);
 8002084:	462c      	mov	r4, r5
 8002086:	e7bb      	b.n	8002000 <CDC_ReceiveCallback+0x18>
 8002088:	4435      	add	r5, r6
		switch(message_type){
 800208a:	46aa      	mov	sl, r5
 800208c:	f04f 0900 	mov.w	r9, #0
}

static uint32_t read_control_signals_from_open_source_logger(uint32_t byte_index, uint8_t *receive_buf){
	for(uint8_t i = 0; i < 8; i++){
		STM32_PLC_PWM_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 8002090:	f89a 1000 	ldrb.w	r1, [sl]
 8002094:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002098:	fa5f f089 	uxtb.w	r0, r9
 800209c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	for(uint8_t i = 0; i < 8; i++){
 80020a0:	f109 0901 	add.w	r9, r9, #1
		STM32_PLC_PWM_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 80020a4:	f7ff fd40 	bl	8001b28 <STM32_PLC_PWM_Set>
	for(uint8_t i = 0; i < 8; i++){
 80020a8:	f1b9 0f08 	cmp.w	r9, #8
 80020ac:	f10a 0a02 	add.w	sl, sl, #2
 80020b0:	d1ee      	bne.n	8002090 <CDC_ReceiveCallback+0xa8>
 80020b2:	f04f 0900 	mov.w	r9, #0
		byte_index += 2;
	}
	for(uint8_t i = 0; i < 3; i++){
		STM32_PLC_Analog_Output_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 80020b6:	7c29      	ldrb	r1, [r5, #16]
 80020b8:	7c6b      	ldrb	r3, [r5, #17]
 80020ba:	fa5f f089 	uxtb.w	r0, r9
 80020be:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	for(uint8_t i = 0; i < 3; i++){
 80020c2:	f109 0901 	add.w	r9, r9, #1
		STM32_PLC_Analog_Output_Set(i, (receive_buf[byte_index] << 8) | receive_buf[byte_index + 1]);
 80020c6:	f7fe ffe3 	bl	8001090 <STM32_PLC_Analog_Output_Set>
	for(uint8_t i = 0; i < 3; i++){
 80020ca:	f1b9 0f03 	cmp.w	r9, #3
 80020ce:	f105 0502 	add.w	r5, r5, #2
 80020d2:	d1f0      	bne.n	80020b6 <CDC_ReceiveCallback+0xce>
		byte_index += 2;
 80020d4:	f104 0517 	add.w	r5, r4, #23
	return byte_index;
}

static void send_measurements_to_open_source_logger(){
	/* Create array of measurements */
	uint8_t send_data_array[60] = {0};
 80020d8:	2400      	movs	r4, #0
 80020da:	2238      	movs	r2, #56	; 0x38
 80020dc:	4621      	mov	r1, r4
 80020de:	f107 0010 	add.w	r0, r7, #16
 80020e2:	f107 090c 	add.w	r9, r7, #12
 80020e6:	60fc      	str	r4, [r7, #12]
 80020e8:	f00c fc10 	bl	800e90c <memset>
	uint8_t index = 0;

	/* Set the message type */
	send_data_array[index++] = SEND_MEASUREMENTS_MESSAGE_TYPE;
 80020ec:	2302      	movs	r3, #2
 80020ee:	733b      	strb	r3, [r7, #12]
 80020f0:	46cb      	mov	fp, r9
 80020f2:	46ca      	mov	sl, r9

	/* Set digital inputs */
	for (uint8_t i = 0; i < 10; i++)
		send_data_array[index++] = STM32_PLC_Digital_Input_Get(i);
 80020f4:	b2e0      	uxtb	r0, r4
 80020f6:	f7ff f8a5 	bl	8001244 <STM32_PLC_Digital_Input_Get>
	for (uint8_t i = 0; i < 10; i++)
 80020fa:	3401      	adds	r4, #1
 80020fc:	2c0a      	cmp	r4, #10
		send_data_array[index++] = STM32_PLC_Digital_Input_Get(i);
 80020fe:	f80b 0f01 	strb.w	r0, [fp, #1]!
	for (uint8_t i = 0; i < 10; i++)
 8002102:	d1f7      	bne.n	80020f4 <CDC_ReceiveCallback+0x10c>
 8002104:	46cb      	mov	fp, r9
 8002106:	2400      	movs	r4, #0

	/* Set analog single input values */
	for (uint8_t i = 0; i < 12; i++) {
		uint16_t adc_value = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 8002108:	b2e0      	uxtb	r0, r4
 800210a:	f7fe ff1d 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
	for (uint8_t i = 0; i < 12; i++) {
 800210e:	3401      	adds	r4, #1
		send_data_array[index++] =  adc_value>> 8;
 8002110:	0a03      	lsrs	r3, r0, #8
	for (uint8_t i = 0; i < 12; i++) {
 8002112:	2c0c      	cmp	r4, #12
		send_data_array[index++] =  adc_value>> 8;
 8002114:	f88b 300b 	strb.w	r3, [fp, #11]
		send_data_array[index++] = adc_value;
 8002118:	f88b 000c 	strb.w	r0, [fp, #12]
	for (uint8_t i = 0; i < 12; i++) {
 800211c:	f10b 0b02 	add.w	fp, fp, #2
 8002120:	d1f2      	bne.n	8002108 <CDC_ReceiveCallback+0x120>
 8002122:	2400      	movs	r4, #0
	}

	/* Set analog differential input values */
	for (uint8_t i = 0; i < 5; i++) {
		uint16_t adc_value = STM32_PLC_Analog_Input_DADC_Get_Raw(i);
 8002124:	b2e0      	uxtb	r0, r4
 8002126:	f7fe ff67 	bl	8000ff8 <STM32_PLC_Analog_Input_DADC_Get_Raw>
	for (uint8_t i = 0; i < 5; i++) {
 800212a:	3401      	adds	r4, #1
		send_data_array[index++] = adc_value >> 8;
 800212c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	for (uint8_t i = 0; i < 5; i++) {
 8002130:	2c05      	cmp	r4, #5
		send_data_array[index++] = adc_value >> 8;
 8002132:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		send_data_array[index++] = adc_value;
 8002136:	f889 0024 	strb.w	r0, [r9, #36]	; 0x24
	for (uint8_t i = 0; i < 5; i++) {
 800213a:	f109 0902 	add.w	r9, r9, #2
 800213e:	d1f1      	bne.n	8002124 <CDC_ReceiveCallback+0x13c>
 8002140:	f04f 0900 	mov.w	r9, #0
		send_data_array[index++] = adc_value;
 8002144:	242d      	movs	r4, #45	; 0x2d
	}

	/* Set input capture values */
	for (uint8_t i = 0; i < 4; i++) {
		uint16_t input_capture_value = STM32_PLC_Input_Capture_Get_Raw(i);
 8002146:	fa5f f089 	uxtb.w	r0, r9
 800214a:	f7ff fb81 	bl	8001850 <STM32_PLC_Input_Capture_Get_Raw>
		send_data_array[index++] = input_capture_value >> 8;
 800214e:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8002152:	443a      	add	r2, r7
 8002154:	0a01      	lsrs	r1, r0, #8
 8002156:	1c63      	adds	r3, r4, #1
 8002158:	f802 1c3c 	strb.w	r1, [r2, #-60]
		send_data_array[index++] = input_capture_value;
 800215c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002160:	fa52 f383 	uxtab	r3, r2, r3
	for (uint8_t i = 0; i < 4; i++) {
 8002164:	f109 0901 	add.w	r9, r9, #1
		send_data_array[index++] = input_capture_value;
 8002168:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 4; i++) {
 800216a:	f1b9 0f04 	cmp.w	r9, #4
		send_data_array[index++] = input_capture_value;
 800216e:	b2e4      	uxtb	r4, r4
 8002170:	f803 0c3c 	strb.w	r0, [r3, #-60]
	for (uint8_t i = 0; i < 4; i++) {
 8002174:	d1e7      	bne.n	8002146 <CDC_ReceiveCallback+0x15e>
 8002176:	f04f 0900 	mov.w	r9, #0
		send_data_array[index++] = input_capture_value;
 800217a:	2435      	movs	r4, #53	; 0x35
	}

	/* Set encoder values */
	for (uint8_t i = 0; i < 3; i++) {
		uint16_t encoder_value = STM32_PLC_Encoder_Get_Raw(i);
 800217c:	fa5f f089 	uxtb.w	r0, r9
 8002180:	f7ff f8ca 	bl	8001318 <STM32_PLC_Encoder_Get_Raw>
		send_data_array[index++] = encoder_value >> 8;
 8002184:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8002188:	443a      	add	r2, r7
 800218a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800218e:	1c63      	adds	r3, r4, #1
 8002190:	f802 1c3c 	strb.w	r1, [r2, #-60]
		send_data_array[index++] = encoder_value;
 8002194:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002198:	fa52 f383 	uxtab	r3, r2, r3
	for (uint8_t i = 0; i < 3; i++) {
 800219c:	f109 0901 	add.w	r9, r9, #1
		send_data_array[index++] = encoder_value;
 80021a0:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 3; i++) {
 80021a2:	f1b9 0f03 	cmp.w	r9, #3
		send_data_array[index++] = encoder_value;
 80021a6:	b2e4      	uxtb	r4, r4
 80021a8:	f803 0c3c 	strb.w	r0, [r3, #-60]
	for (uint8_t i = 0; i < 3; i++) {
 80021ac:	d1e6      	bne.n	800217c <CDC_ReceiveCallback+0x194>
	}

	/* Send the data via USB */
	CDC_Transmit_FS(send_data_array, index);
 80021ae:	213b      	movs	r1, #59	; 0x3b
 80021b0:	4650      	mov	r0, sl
	send_data_array[index++] = minutes;
	send_data_array[index++] = enabled;
	send_data_array[index++] = activated;

	/* Send the data via USB */
	CDC_Transmit_FS(send_data_array, index);
 80021b2:	f00c f983 	bl	800e4bc <CDC_Transmit_FS>
}
 80021b6:	e765      	b.n	8002084 <CDC_ReceiveCallback+0x9c>
	uint16_t prescaler = receive_buf[byte_index] << 8 | receive_buf[byte_index + 1];
 80021b8:	1933      	adds	r3, r6, r4
	uint8_t pwm_peripheral = receive_buf[byte_index++];
 80021ba:	5d71      	ldrb	r1, [r6, r5]
	uint16_t prescaler = receive_buf[byte_index] << 8 | receive_buf[byte_index + 1];
 80021bc:	789a      	ldrb	r2, [r3, #2]
 80021be:	78d8      	ldrb	r0, [r3, #3]
	byte_index += 2;
 80021c0:	1d25      	adds	r5, r4, #4
	uint16_t prescaler = receive_buf[byte_index] << 8 | receive_buf[byte_index + 1];
 80021c2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	switch(pwm_peripheral){
 80021c6:	b129      	cbz	r1, 80021d4 <CDC_ReceiveCallback+0x1ec>
 80021c8:	2901      	cmp	r1, #1
 80021ca:	f47f af5b 	bne.w	8002084 <CDC_ReceiveCallback+0x9c>
		STM32_PLC_PWM4_To_PWM7_Set_Prescaler(prescaler, true);
 80021ce:	f7ff fd59 	bl	8001c84 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>
		break;
 80021d2:	e757      	b.n	8002084 <CDC_ReceiveCallback+0x9c>
		STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler, true);
 80021d4:	2101      	movs	r1, #1
 80021d6:	f7ff fd4b 	bl	8001c70 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>
		break;
 80021da:	e753      	b.n	8002084 <CDC_ReceiveCallback+0x9c>
	uint8_t sdadc = receive_buf[byte_index++];
 80021dc:	5d70      	ldrb	r0, [r6, r5]
	uint8_t gain = receive_buf[byte_index++];
 80021de:	1d25      	adds	r5, r4, #4
 80021e0:	4434      	add	r4, r6
	STM32_PLC_Analog_Input_Set_Gain(sdadc, configuration_index, gain, true);
 80021e2:	2301      	movs	r3, #1
 80021e4:	78e2      	ldrb	r2, [r4, #3]
 80021e6:	78a1      	ldrb	r1, [r4, #2]
 80021e8:	f7fe fd84 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
			break;
 80021ec:	e74a      	b.n	8002084 <CDC_ReceiveCallback+0x9c>
	uint8_t send_data_array[5] = {0};
 80021ee:	2300      	movs	r3, #0
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 80021f0:	f107 010a 	add.w	r1, r7, #10
 80021f4:	f107 0008 	add.w	r0, r7, #8
	uint8_t send_data_array[5] = {0};
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	743b      	strb	r3, [r7, #16]
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 80021fc:	f7ff fa23 	bl	8001646 <STM32_PLC_Flash_Get_PWM_Prescalers>
	send_data_array[index++] = SEND_BACK_PWM_PRESCALERS_MESSAGE_TYPE;
 8002200:	2306      	movs	r3, #6
 8002202:	733b      	strb	r3, [r7, #12]
	send_data_array[index++] = prescaler_for_PWM_0_3 >> 8;
 8002204:	893b      	ldrh	r3, [r7, #8]
	send_data_array[index++] = prescaler_for_PWM_0_3;
 8002206:	73bb      	strb	r3, [r7, #14]
	send_data_array[index++] = prescaler_for_PWM_0_3 >> 8;
 8002208:	0a1a      	lsrs	r2, r3, #8
	send_data_array[index++] = prescaler_for_PWM_4_7 >> 8;
 800220a:	897b      	ldrh	r3, [r7, #10]
	send_data_array[index++] = prescaler_for_PWM_0_3 >> 8;
 800220c:	737a      	strb	r2, [r7, #13]
	send_data_array[index++] = prescaler_for_PWM_4_7 >> 8;
 800220e:	0a1a      	lsrs	r2, r3, #8
 8002210:	73fa      	strb	r2, [r7, #15]
	send_data_array[index++] = prescaler_for_PWM_4_7;
 8002212:	743b      	strb	r3, [r7, #16]
	CDC_Transmit_FS(send_data_array, index);
 8002214:	2105      	movs	r1, #5
	CDC_Transmit_FS(send_data_array, index);
 8002216:	f107 000c 	add.w	r0, r7, #12
 800221a:	e7ca      	b.n	80021b2 <CDC_ReceiveCallback+0x1ca>
	uint8_t send_data_array[4] = {0};
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
	uint8_t sdadc = receive_buf[byte_index++];
 8002220:	5d73      	ldrb	r3, [r6, r5]
	switch(sdadc){
 8002222:	2b02      	cmp	r3, #2
	uint8_t sdadc = receive_buf[byte_index++];
 8002224:	f104 0402 	add.w	r4, r4, #2
	switch(sdadc){
 8002228:	d019      	beq.n	800225e <CDC_ReceiveCallback+0x276>
 800222a:	2b03      	cmp	r3, #3
 800222c:	d01f      	beq.n	800226e <CDC_ReceiveCallback+0x286>
 800222e:	2b01      	cmp	r3, #1
 8002230:	d106      	bne.n	8002240 <CDC_ReceiveCallback+0x258>
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8002232:	f107 020a 	add.w	r2, r7, #10
 8002236:	f107 0108 	add.w	r1, r7, #8
 800223a:	1df8      	adds	r0, r7, #7
 800223c:	f7ff f9af 	bl	800159e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>
	send_data_array[index++] = SEND_BACK_ANALOG_GAINS_MESSAGE_TYPE;
 8002240:	2307      	movs	r3, #7
 8002242:	733b      	strb	r3, [r7, #12]
	send_data_array[index++] = gain_for_configuration_index_0;
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	737b      	strb	r3, [r7, #13]
	send_data_array[index++] = gain_for_configuration_index_1;
 8002248:	7a3b      	ldrb	r3, [r7, #8]
 800224a:	73bb      	strb	r3, [r7, #14]
	CDC_Transmit_FS(send_data_array, index);
 800224c:	2104      	movs	r1, #4
	send_data_array[index++] = gain_for_configuration_index_2;
 800224e:	7abb      	ldrb	r3, [r7, #10]
 8002250:	73fb      	strb	r3, [r7, #15]
	CDC_Transmit_FS(send_data_array, index);
 8002252:	f107 000c 	add.w	r0, r7, #12
 8002256:	f00c f931 	bl	800e4bc <CDC_Transmit_FS>
			byte_index = send_back_adc_gains(byte_index, receive_buf);
 800225a:	4625      	mov	r5, r4
			break;
 800225c:	e712      	b.n	8002084 <CDC_ReceiveCallback+0x9c>
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 800225e:	f107 020a 	add.w	r2, r7, #10
 8002262:	f107 0108 	add.w	r1, r7, #8
 8002266:	1df8      	adds	r0, r7, #7
 8002268:	f7ff f9b5 	bl	80015d6 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>
		break;
 800226c:	e7e8      	b.n	8002240 <CDC_ReceiveCallback+0x258>
		STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 800226e:	f107 020a 	add.w	r2, r7, #10
 8002272:	f107 0108 	add.w	r1, r7, #8
 8002276:	1df8      	adds	r0, r7, #7
 8002278:	f7ff f9c9 	bl	800160e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>
		break;
 800227c:	e7e0      	b.n	8002240 <CDC_ReceiveCallback+0x258>
	uint8_t hours = receive_buf[byte_index++];
 800227e:	1930      	adds	r0, r6, r4
	uint8_t year = receive_buf[byte_index++];
 8002280:	5d73      	ldrb	r3, [r6, r5]
	uint8_t hours = receive_buf[byte_index++];
 8002282:	f890 9005 	ldrb.w	r9, [r0, #5]
	STM32_PLC_RTC_Set_Date(date, week_day, month, year);
 8002286:	7882      	ldrb	r2, [r0, #2]
 8002288:	7901      	ldrb	r1, [r0, #4]
	uint8_t minutes = receive_buf[byte_index++];
 800228a:	1de5      	adds	r5, r4, #7
 800228c:	7984      	ldrb	r4, [r0, #6]
	STM32_PLC_RTC_Set_Date(date, week_day, month, year);
 800228e:	78c0      	ldrb	r0, [r0, #3]
 8002290:	f7ff fd2a 	bl	8001ce8 <STM32_PLC_RTC_Set_Date>
	STM32_PLC_RTC_Set_Time(0, minutes, hours);
 8002294:	464a      	mov	r2, r9
 8002296:	4621      	mov	r1, r4
 8002298:	2000      	movs	r0, #0
 800229a:	f7ff fd57 	bl	8001d4c <STM32_PLC_RTC_Set_Time>
			break;
 800229e:	e6f1      	b.n	8002084 <CDC_ReceiveCallback+0x9c>
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 80022a0:	1cfb      	adds	r3, r7, #3
 80022a2:	1d3a      	adds	r2, r7, #4
 80022a4:	1d79      	adds	r1, r7, #5
 80022a6:	1db8      	adds	r0, r7, #6
 80022a8:	f7ff fd02 	bl	8001cb0 <STM32_PLC_RTC_Get_Date>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 80022ac:	f107 0108 	add.w	r1, r7, #8
 80022b0:	1dfa      	adds	r2, r7, #7
 80022b2:	f107 000a 	add.w	r0, r7, #10
 80022b6:	f7ff fd2b 	bl	8001d10 <STM32_PLC_RTC_Get_Time>
	send_data_array[index++] = SEND_BACK_DATE_TIME_MESSAGE_TYPE;
 80022ba:	2309      	movs	r3, #9
 80022bc:	733b      	strb	r3, [r7, #12]
	send_data_array[index++] = year;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	737b      	strb	r3, [r7, #13]
	send_data_array[index++] = month;
 80022c2:	793b      	ldrb	r3, [r7, #4]
 80022c4:	73bb      	strb	r3, [r7, #14]
	send_data_array[index++] = date;
 80022c6:	797b      	ldrb	r3, [r7, #5]
 80022c8:	73fb      	strb	r3, [r7, #15]
	send_data_array[index++] = week_day;
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	743b      	strb	r3, [r7, #16]
	send_data_array[index++] = hours;
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	747b      	strb	r3, [r7, #17]
	send_data_array[index++] = minutes;
 80022d2:	7a3b      	ldrb	r3, [r7, #8]
 80022d4:	74bb      	strb	r3, [r7, #18]
	CDC_Transmit_FS(send_data_array, index);
 80022d6:	2107      	movs	r1, #7
 80022d8:	e79d      	b.n	8002216 <CDC_ReceiveCallback+0x22e>
	uint8_t date = receive_buf[byte_index++];
 80022da:	5d72      	ldrb	r2, [r6, r5]
	uint8_t enable = receive_buf[byte_index++];
 80022dc:	1d65      	adds	r5, r4, #5
 80022de:	4434      	add	r4, r6
 80022e0:	f894 9004 	ldrb.w	r9, [r4, #4]
	STM32_PLC_RTC_Set_Alarm_A(minutes, hours, date);
 80022e4:	78e0      	ldrb	r0, [r4, #3]
 80022e6:	78a1      	ldrb	r1, [r4, #2]
 80022e8:	f7ff fd8a 	bl	8001e00 <STM32_PLC_RTC_Set_Alarm_A>
	STM32_PLC_RTC_Enable_Alarm_A(enable);
 80022ec:	f1b9 0000 	subs.w	r0, r9, #0
 80022f0:	bf18      	it	ne
 80022f2:	2001      	movne	r0, #1
 80022f4:	f7ff fe22 	bl	8001f3c <STM32_PLC_RTC_Enable_Alarm_A>
			break;
 80022f8:	e6c4      	b.n	8002084 <CDC_ReceiveCallback+0x9c>
	uint8_t week_day = receive_buf[byte_index++];
 80022fa:	5d72      	ldrb	r2, [r6, r5]
	uint8_t enable = receive_buf[byte_index++];
 80022fc:	1d65      	adds	r5, r4, #5
 80022fe:	4434      	add	r4, r6
 8002300:	f894 9004 	ldrb.w	r9, [r4, #4]
	STM32_PLC_RTC_Set_Alarm_B(minutes, hours, week_day);
 8002304:	78e0      	ldrb	r0, [r4, #3]
 8002306:	78a1      	ldrb	r1, [r4, #2]
 8002308:	f7ff fd98 	bl	8001e3c <STM32_PLC_RTC_Set_Alarm_B>
	STM32_PLC_RTC_Enable_Alarm_B(enable);
 800230c:	f1b9 0000 	subs.w	r0, r9, #0
 8002310:	bf18      	it	ne
 8002312:	2001      	movne	r0, #1
 8002314:	f7ff fe48 	bl	8001fa8 <STM32_PLC_RTC_Enable_Alarm_B>
			break;
 8002318:	e6b4      	b.n	8002084 <CDC_ReceiveCallback+0x9c>
	STM32_PLC_RTC_Get_Alarm_A(&date, &hours, &minutes);
 800231a:	f107 020a 	add.w	r2, r7, #10
 800231e:	f107 0108 	add.w	r1, r7, #8
 8002322:	1df8      	adds	r0, r7, #7
 8002324:	f7ff fd2c 	bl	8001d80 <STM32_PLC_RTC_Get_Alarm_A>
	enabled = STM32_PLC_RTC_Alarm_A_Is_Enabled();
 8002328:	f7ff fe1a 	bl	8001f60 <STM32_PLC_RTC_Alarm_A_Is_Enabled>
 800232c:	4604      	mov	r4, r0
	activated = STM32_PLC_RTC_Alarm_A_Is_Activated();
 800232e:	f7ff fe1d 	bl	8001f6c <STM32_PLC_RTC_Alarm_A_Is_Activated>
	send_data_array[index++] = SEND_BACK_ALARM_A_MESSAGE_TYPE;
 8002332:	230b      	movs	r3, #11
	send_data_array[index++] = SEND_BACK_ALARM_B_MESSAGE_TYPE;
 8002334:	733b      	strb	r3, [r7, #12]
	send_data_array[index++] = week_day;
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	737b      	strb	r3, [r7, #13]
	send_data_array[index++] = hours;
 800233a:	7a3b      	ldrb	r3, [r7, #8]
 800233c:	73bb      	strb	r3, [r7, #14]
	send_data_array[index++] = minutes;
 800233e:	7abb      	ldrb	r3, [r7, #10]
 8002340:	73fb      	strb	r3, [r7, #15]
	send_data_array[index++] = enabled;
 8002342:	743c      	strb	r4, [r7, #16]
	send_data_array[index++] = activated;
 8002344:	7478      	strb	r0, [r7, #17]
	CDC_Transmit_FS(send_data_array, index);
 8002346:	2106      	movs	r1, #6
 8002348:	e765      	b.n	8002216 <CDC_ReceiveCallback+0x22e>
	STM32_PLC_RTC_Get_Alarm_B(&week_day, &hours, &minutes);
 800234a:	f107 020a 	add.w	r2, r7, #10
 800234e:	f107 0108 	add.w	r1, r7, #8
 8002352:	1df8      	adds	r0, r7, #7
 8002354:	f7ff fd34 	bl	8001dc0 <STM32_PLC_RTC_Get_Alarm_B>
	enabled = STM32_PLC_RTC_Alarm_B_Is_Enabled();
 8002358:	f7ff fe3a 	bl	8001fd0 <STM32_PLC_RTC_Alarm_B_Is_Enabled>
 800235c:	4604      	mov	r4, r0
	activated = STM32_PLC_RTC_Alarm_B_Is_Activated();
 800235e:	f7ff fe3d 	bl	8001fdc <STM32_PLC_RTC_Alarm_B_Is_Activated>
	send_data_array[index++] = SEND_BACK_ALARM_B_MESSAGE_TYPE;
 8002362:	230d      	movs	r3, #13
 8002364:	e7e6      	b.n	8002334 <CDC_ReceiveCallback+0x34c>
		switch(message_type){
 8002366:	4644      	mov	r4, r8
 8002368:	e64a      	b.n	8002000 <CDC_ReceiveCallback+0x18>

0800236a <CAN_Send_Message>:
	internal_DLC[buffer_index_receive] = 0;
	buffer_index_receive++;										/* When this is 256, then it will be come 0 again */
}
#endif

ENUM_J1939_STATUS_CODES CAN_Send_Message(uint32_t ID, uint8_t data[]) {
 800236a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ENUM_J1939_STATUS_CODES status;
	#if PROCESSOR_CHOICE == STM32
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;											/* Here we are sending 8 bytes */
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 800236c:	2300      	movs	r3, #0
ENUM_J1939_STATUS_CODES CAN_Send_Message(uint32_t ID, uint8_t data[]) {
 800236e:	460a      	mov	r2, r1
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 8002370:	2108      	movs	r1, #8
 8002372:	e9cd 3103 	strd	r3, r1, [sp, #12]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 8002376:	2104      	movs	r1, #4
	TxHeader.TransmitGlobalTime = DISABLE;
	TxHeader.ExtId = ID;
	TxHeader.StdId = 0x00; 										/* Not used */
 8002378:	e9cd 3000 	strd	r3, r0, [sp]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 800237c:	9102      	str	r1, [sp, #8]
	status = STM32_PLC_CAN_Transmit(data, &TxHeader);
 800237e:	4610      	mov	r0, r2
 8002380:	4669      	mov	r1, sp
	TxHeader.TransmitGlobalTime = DISABLE;
 8002382:	f88d 3014 	strb.w	r3, [sp, #20]
	status = STM32_PLC_CAN_Transmit(data, &TxHeader);
 8002386:	f7fe ff03 	bl	8001190 <STM32_PLC_CAN_Transmit>
	#else
	/* If no processor are used, use internal feedback for debugging */
	status = Internal_Transmit(ID, data, 8);
	#endif
	return status;
}
 800238a:	b007      	add	sp, #28
 800238c:	f85d fb04 	ldr.w	pc, [sp], #4

08002390 <CAN_Send_Request>:

/* Send a PGN request
 * PGN: 0x00EA00 (59904)
 */
ENUM_J1939_STATUS_CODES CAN_Send_Request(uint32_t ID, uint8_t PGN[]) {
 8002390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ENUM_J1939_STATUS_CODES status;
	#if PROCESSOR_CHOICE == STM32
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 3;											/* Here we are only sending 3 bytes */
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 8002392:	2300      	movs	r3, #0
ENUM_J1939_STATUS_CODES CAN_Send_Request(uint32_t ID, uint8_t PGN[]) {
 8002394:	460a      	mov	r2, r1
	TxHeader.RTR = CAN_RTR_DATA;								/* Data frame */
 8002396:	2103      	movs	r1, #3
 8002398:	e9cd 3103 	strd	r3, r1, [sp, #12]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 800239c:	2104      	movs	r1, #4
	TxHeader.TransmitGlobalTime = DISABLE;
	TxHeader.ExtId = ID;
	TxHeader.StdId = 0x00; 										/* Not used */
 800239e:	e9cd 3000 	strd	r3, r0, [sp]
	TxHeader.IDE = CAN_ID_EXT;									/* We want to send an extended ID */
 80023a2:	9102      	str	r1, [sp, #8]
	status = STM32_PLC_CAN_Transmit(PGN, &TxHeader);
 80023a4:	4610      	mov	r0, r2
 80023a6:	4669      	mov	r1, sp
	TxHeader.TransmitGlobalTime = DISABLE;
 80023a8:	f88d 3014 	strb.w	r3, [sp, #20]
	status = STM32_PLC_CAN_Transmit(PGN, &TxHeader);
 80023ac:	f7fe fef0 	bl	8001190 <STM32_PLC_CAN_Transmit>
	#else
	/* If no processor are used, use internal feedback for debugging */
	status = Internal_Transmit(ID, PGN, 3);
	#endif
	return status;
}
 80023b0:	b007      	add	sp, #28
 80023b2:	f85d fb04 	ldr.w	pc, [sp], #4

080023b6 <Load_Struct>:
 80023b6:	2001      	movs	r0, #1
 80023b8:	4770      	bx	lr

080023ba <ISO_11783_Send_Auxiliary_Valve_Command>:

/*
 * Send an auxiliary valve command to all ECU
 * PGN: 0x00FE30 (65072) to 0x00FE3F (65087)
 */
ENUM_J1939_STATUS_CODES ISO_11783_Send_Auxiliary_Valve_Command(J1939 *j1939, uint8_t valve_number, uint8_t standard_flow, uint8_t fail_safe_mode, uint8_t valve_state) {
 80023ba:	b513      	push	{r0, r1, r4, lr}
	uint32_t ID = (0x0CFE << 16) | ((0x30 + valve_number) << 8) | j1939->information_this_ECU.this_ECU_address;
 80023bc:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80023c0:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80023c4:	f890 02d4 	ldrb.w	r0, [r0, #724]	; 0x2d4
	uint8_t data[8];
	data[0] = standard_flow;
	data[1] = 0xFF; 												/* Reserved */
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 80023c8:	f89d 1010 	ldrb.w	r1, [sp, #16]
	data[0] = standard_flow;
 80023cc:	f88d 2000 	strb.w	r2, [sp]
	uint32_t ID = (0x0CFE << 16) | ((0x30 + valve_number) << 8) | j1939->information_this_ECU.this_ECU_address;
 80023d0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 80023d4:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
	data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;			/* All reserved */
	return CAN_Send_Message(ID, data);
 80023d8:	f040 604f 	orr.w	r0, r0, #217055232	; 0xcf00000
	data[1] = 0xFF; 												/* Reserved */
 80023dc:	22ff      	movs	r2, #255	; 0xff
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 80023de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	return CAN_Send_Message(ID, data);
 80023e2:	4669      	mov	r1, sp
 80023e4:	f440 2060 	orr.w	r0, r0, #917504	; 0xe0000
	data[1] = 0xFF; 												/* Reserved */
 80023e8:	f88d 2001 	strb.w	r2, [sp, #1]
	data[2] = (fail_safe_mode << 6) | (0b11 << 4) | valve_state; 	/* Bit 5 and 6 are reserved */
 80023ec:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;			/* All reserved */
 80023f0:	f88d 2007 	strb.w	r2, [sp, #7]
 80023f4:	f88d 2006 	strb.w	r2, [sp, #6]
 80023f8:	f88d 2005 	strb.w	r2, [sp, #5]
 80023fc:	f88d 2004 	strb.w	r2, [sp, #4]
 8002400:	f88d 2003 	strb.w	r2, [sp, #3]
	return CAN_Send_Message(ID, data);
 8002404:	f7ff ffb1 	bl	800236a <CAN_Send_Message>
}
 8002408:	b002      	add	sp, #8
 800240a:	bd10      	pop	{r4, pc}

0800240c <Open_SAE_J1939_Startup_ECU>:

#include "../../Open SAE J1939/Hardware/Hardware.h"
#include "../../Open SAE J1939/Open_SAE_J1939/Open_SAE_J1939.h"

/* Load our ECU parameters into J1939 structure. Very useful if you want your ECU remember its NAME + address + identifications at startup. */
bool Open_SAE_J1939_Startup_ECU(J1939* j1939) {
 800240c:	b5b0      	push	{r4, r5, r7, lr}
 800240e:	af00      	add	r7, sp, #0
	uint32_t ECU_information_length = sizeof(Information_this_ECU);
	uint8_t ECU_information_data[ECU_information_length];
 8002410:	b0ca      	sub	sp, #296	; 0x128
	memset(ECU_information_data, 0, ECU_information_length);
 8002412:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002416:	2100      	movs	r1, #0
bool Open_SAE_J1939_Startup_ECU(J1939* j1939) {
 8002418:	4604      	mov	r4, r0
	memset(ECU_information_data, 0, ECU_information_length);
 800241a:	4668      	mov	r0, sp
 800241c:	f00c fa76 	bl	800e90c <memset>
	if(!Load_Struct(ECU_information_data, ECU_information_length, INFORMATION_THIS_ECU))
 8002420:	4a16      	ldr	r2, [pc, #88]	; (800247c <Open_SAE_J1939_Startup_ECU+0x70>)
 8002422:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002426:	4668      	mov	r0, sp
 8002428:	f7ff ffc5 	bl	80023b6 <Load_Struct>
 800242c:	4605      	mov	r5, r0
 800242e:	b310      	cbz	r0, 8002476 <Open_SAE_J1939_Startup_ECU+0x6a>
		return false; /* Problems occurs */
	memcpy(&j1939->information_this_ECU, (Information_this_ECU*)ECU_information_data, ECU_information_length);
 8002430:	f504 5096 	add.w	r0, r4, #4800	; 0x12c0
 8002434:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002438:	4669      	mov	r1, sp
 800243a:	3004      	adds	r0, #4
 800243c:	f00c fa3e 	bl	800e8bc <memcpy>

	/* If we are going to send and receive the ECU identification and component identification, we need to specify the size of them */
	j1939->information_this_ECU.this_identifications.ecu_identification.length_of_each_field = 30;
 8002440:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8002444:	231e      	movs	r3, #30
 8002446:	f882 32f5 	strb.w	r3, [r2, #757]	; 0x2f5
	j1939->information_this_ECU.this_identifications.component_identification.length_of_each_field = 30;
 800244a:	f882 336f 	strb.w	r3, [r2, #879]	; 0x36f
	j1939->from_other_ecu_identifications.ecu_identification.length_of_each_field = 30;
	j1939->from_other_ecu_identifications.component_identification.length_of_each_field = 30;

	/* Clear other ECU addresses by setting the broadcast address to them */
	memset(j1939->other_ECU_address, 0xFF, 0xFF);
 800244e:	22ff      	movs	r2, #255	; 0xff
 8002450:	4611      	mov	r1, r2
	j1939->from_other_ecu_identifications.ecu_identification.length_of_each_field = 30;
 8002452:	f884 3990 	strb.w	r3, [r4, #2448]	; 0x990
	j1939->from_other_ecu_identifications.component_identification.length_of_each_field = 30;
 8002456:	f884 3a0a 	strb.w	r3, [r4, #2570]	; 0xa0a
	memset(j1939->other_ECU_address, 0xFF, 0xFF);
 800245a:	f104 000f 	add.w	r0, r4, #15
 800245e:	f00c fa55 	bl	800e90c <memset>
	j1939->number_of_cannot_claim_address = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	73a3      	strb	r3, [r4, #14]
	j1939->number_of_other_ECU = 0;
 8002466:	7363      	strb	r3, [r4, #13]

	/* This broadcast out this ECU NAME + address to all other ECU:s */
	SAE_J1939_Response_Request_Address_Claimed(j1939);
 8002468:	4620      	mov	r0, r4
 800246a:	f000 f89f 	bl	80025ac <SAE_J1939_Response_Request_Address_Claimed>

	/* This asking all ECU about their NAME + address */
	SAE_J1939_Send_Request_Address_Claimed(j1939, 0xFF);
 800246e:	21ff      	movs	r1, #255	; 0xff
 8002470:	4620      	mov	r0, r4
 8002472:	f000 f887 	bl	8002584 <SAE_J1939_Send_Request_Address_Claimed>

	/* OK */
	return true;
}
 8002476:	4628      	mov	r0, r5
 8002478:	46bd      	mov	sp, r7
 800247a:	bdb0      	pop	{r4, r5, r7, pc}
 800247c:	08012d5b 	.word	0x08012d5b

08002480 <SAE_J1939_Send_Request>:

/*
 * Request PGN information at other ECU
 * PGN: 0x00EA00 (59904)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Request(J1939 *j1939, uint8_t DA, uint32_t PGN_code) {
 8002480:	b507      	push	{r0, r1, r2, lr}
	uint8_t PGN[3];
	PGN[0] = PGN_code;														/* PGN least significant bit */
	PGN[1] = PGN_code >> 8;													/* PGN mid bit */
 8002482:	0a13      	lsrs	r3, r2, #8
 8002484:	f88d 3005 	strb.w	r3, [sp, #5]
	PGN[2] = PGN_code >> 16;												/* PGN most significant bit */
	uint32_t ID = (0x18EA << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 8002488:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
	PGN[0] = PGN_code;														/* PGN least significant bit */
 800248c:	f88d 2004 	strb.w	r2, [sp, #4]
	uint32_t ID = (0x18EA << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 8002490:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
 8002494:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
	return CAN_Send_Request(ID, PGN);
 8002498:	f040 50c7 	orr.w	r0, r0, #417333248	; 0x18e00000
	PGN[2] = PGN_code >> 16;												/* PGN most significant bit */
 800249c:	0c12      	lsrs	r2, r2, #16
	return CAN_Send_Request(ID, PGN);
 800249e:	a901      	add	r1, sp, #4
 80024a0:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
	PGN[2] = PGN_code >> 16;												/* PGN most significant bit */
 80024a4:	f88d 2006 	strb.w	r2, [sp, #6]
	return CAN_Send_Request(ID, PGN);
 80024a8:	f7ff ff72 	bl	8002390 <CAN_Send_Request>
}
 80024ac:	b003      	add	sp, #12
 80024ae:	f85d fb04 	ldr.w	pc, [sp], #4

080024b2 <SAE_J1939_Send_Transport_Protocol_Connection_Management>:

/*
 * Send information to other ECU about how much sequence data packages this ECU is going to send to other ECU
 * PGN: 0x00EC00 (60416)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Connection_Management(J1939 *j1939, uint8_t DA) {
 80024b2:	b507      	push	{r0, r1, r2, lr}
	uint32_t ID = (0x1CEC << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 80024b4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80024b8:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
 80024bc:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
	uint8_t data[8];
	data[0] = j1939->this_ecu_tp_cm.control_byte;
 80024c0:	f890 3a84 	ldrb.w	r3, [r0, #2692]	; 0xa84
 80024c4:	f88d 3000 	strb.w	r3, [sp]
	data[1] = j1939->this_ecu_tp_cm.total_message_size;
 80024c8:	f8b0 3a86 	ldrh.w	r3, [r0, #2694]	; 0xa86
 80024cc:	f88d 3001 	strb.w	r3, [sp, #1]
	data[2] = j1939->this_ecu_tp_cm.total_message_size >> 8;
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = j1939->this_ecu_tp_cm.number_of_packages;
 80024d6:	f890 3a88 	ldrb.w	r3, [r0, #2696]	; 0xa88
 80024da:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = 0xFF; 															/* Reserved */
 80024de:	23ff      	movs	r3, #255	; 0xff
 80024e0:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message;
 80024e4:	f8d0 3a8c 	ldr.w	r3, [r0, #2700]	; 0xa8c
 80024e8:	f88d 3005 	strb.w	r3, [sp, #5]
	data[6] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 8;
 80024ec:	0a19      	lsrs	r1, r3, #8
	data[7] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 16;
	return CAN_Send_Message(ID, data);
 80024ee:	f042 50e7 	orr.w	r0, r2, #484442112	; 0x1ce00000
	data[6] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 8;
 80024f2:	f88d 1006 	strb.w	r1, [sp, #6]
	data[7] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 16;
 80024f6:	0c1b      	lsrs	r3, r3, #16
	return CAN_Send_Message(ID, data);
 80024f8:	4669      	mov	r1, sp
 80024fa:	f440 2040 	orr.w	r0, r0, #786432	; 0xc0000
	data[7] = j1939->this_ecu_tp_cm.PGN_of_the_packeted_message >> 16;
 80024fe:	f88d 3007 	strb.w	r3, [sp, #7]
	return CAN_Send_Message(ID, data);
 8002502:	f7ff ff32 	bl	800236a <CAN_Send_Message>
}
 8002506:	b003      	add	sp, #12
 8002508:	f85d fb04 	ldr.w	pc, [sp], #4

0800250c <SAE_J1939_Send_Transport_Protocol_Data_Transfer>:

/*
 * Send sequence data packages to other ECU that we have loaded
 * PGN: 0x00EB00 (60160)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Data_Transfer(J1939 *j1939, uint8_t DA){
 800250c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t ID = (0x1CEB << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 8002510:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Transport_Protocol_Data_Transfer(J1939 *j1939, uint8_t DA){
 8002514:	4607      	mov	r7, r0
	uint32_t ID = (0x1CEB << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 8002516:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
 800251a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800251e:	f041 54e7 	orr.w	r4, r1, #484442112	; 0x1ce00000
 8002522:	f444 2430 	orr.w	r4, r4, #720896	; 0xb0000
	uint8_t package[8];
	uint16_t bytes_sent = 0;
	ENUM_J1939_STATUS_CODES status = STATUS_SEND_OK;
	for(uint8_t i = 1; i <= j1939->this_ecu_tp_cm.number_of_packages; i++) {
 8002526:	2501      	movs	r5, #1
	uint16_t bytes_sent = 0;
 8002528:	2600      	movs	r6, #0
		package[0] = i; 																	/* Number of package */
		for(uint8_t j = 0; j < 7; j++)
			if(bytes_sent < j1939->this_ecu_tp_cm.total_message_size)
				package[j+1] = j1939->this_ecu_tp_dt.data[bytes_sent++];					/* Data that we have collected */
			 else
				package[j+1] = 0xFF; 														/* Reserved */
 800252a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	for(uint8_t i = 1; i <= j1939->this_ecu_tp_cm.number_of_packages; i++) {
 800252e:	f897 3a88 	ldrb.w	r3, [r7, #2696]	; 0xa88
 8002532:	42ab      	cmp	r3, r5
 8002534:	d203      	bcs.n	800253e <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x32>

		status = CAN_Send_Message(ID, package);
		if(status != STATUS_SEND_OK)
			return status;
	}
	return status;
 8002536:	2000      	movs	r0, #0
}
 8002538:	b002      	add	sp, #8
 800253a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		package[0] = i; 																	/* Number of package */
 800253e:	466a      	mov	r2, sp
			if(bytes_sent < j1939->this_ecu_tp_cm.total_message_size)
 8002540:	f8b7 0a86 	ldrh.w	r0, [r7, #2694]	; 0xa86
		package[0] = i; 																	/* Number of package */
 8002544:	f88d 5000 	strb.w	r5, [sp]
			if(bytes_sent < j1939->this_ecu_tp_cm.total_message_size)
 8002548:	2307      	movs	r3, #7
 800254a:	4611      	mov	r1, r2
 800254c:	42b0      	cmp	r0, r6
				package[j+1] = j1939->this_ecu_tp_dt.data[bytes_sent++];					/* Data that we have collected */
 800254e:	bf84      	itt	hi
 8002550:	f106 0c01 	addhi.w	ip, r6, #1
 8002554:	19f6      	addhi	r6, r6, r7
		for(uint8_t j = 0; j < 7; j++)
 8002556:	f103 33ff 	add.w	r3, r3, #4294967295
				package[j+1] = j1939->this_ecu_tp_dt.data[bytes_sent++];					/* Data that we have collected */
 800255a:	bf85      	ittet	hi
 800255c:	f896 6a95 	ldrbhi.w	r6, [r6, #2709]	; 0xa95
 8002560:	7056      	strbhi	r6, [r2, #1]
				package[j+1] = 0xFF; 														/* Reserved */
 8002562:	f882 8001 	strbls.w	r8, [r2, #1]
				package[j+1] = j1939->this_ecu_tp_dt.data[bytes_sent++];					/* Data that we have collected */
 8002566:	fa1f f68c 	uxthhi.w	r6, ip
		for(uint8_t j = 0; j < 7; j++)
 800256a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800256e:	f102 0201 	add.w	r2, r2, #1
 8002572:	d1eb      	bne.n	800254c <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x40>
		status = CAN_Send_Message(ID, package);
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff fef8 	bl	800236a <CAN_Send_Message>
		if(status != STATUS_SEND_OK)
 800257a:	2800      	cmp	r0, #0
 800257c:	d1dc      	bne.n	8002538 <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x2c>
	for(uint8_t i = 1; i <= j1939->this_ecu_tp_cm.number_of_packages; i++) {
 800257e:	3501      	adds	r5, #1
 8002580:	b2ed      	uxtb	r5, r5
 8002582:	e7d4      	b.n	800252e <SAE_J1939_Send_Transport_Protocol_Data_Transfer+0x22>

08002584 <SAE_J1939_Send_Request_Address_Claimed>:

/*
 * Send request address claimed to other ECU. Every time we asking addresses from other ECU, then we clear our storage of other ECU
 * PGN: 0x00EE00 (60928)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Request_Address_Claimed(J1939 *j1939, uint8_t DA) {
 8002584:	b538      	push	{r3, r4, r5, lr}
	/* Delete all addresses by setting them to broadcast address and set the counters to 0 */
	memset(j1939->other_ECU_address, 0xFF, 0xFF);
 8002586:	22ff      	movs	r2, #255	; 0xff
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Request_Address_Claimed(J1939 *j1939, uint8_t DA) {
 8002588:	4604      	mov	r4, r0
 800258a:	460d      	mov	r5, r1
	memset(j1939->other_ECU_address, 0xFF, 0xFF);
 800258c:	300f      	adds	r0, #15
 800258e:	4611      	mov	r1, r2
 8002590:	f00c f9bc 	bl	800e90c <memset>
	j1939->number_of_cannot_claim_address = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	73a3      	strb	r3, [r4, #14]
	j1939->number_of_other_ECU = 0;
 8002598:	7363      	strb	r3, [r4, #13]
	return SAE_J1939_Send_Request(j1939, DA, PGN_ADDRESS_CLAIMED);
 800259a:	4629      	mov	r1, r5
 800259c:	4620      	mov	r0, r4
 800259e:	f44f 426e 	mov.w	r2, #60928	; 0xee00
}
 80025a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return SAE_J1939_Send_Request(j1939, DA, PGN_ADDRESS_CLAIMED);
 80025a6:	f7ff bf6b 	b.w	8002480 <SAE_J1939_Send_Request>
	...

080025ac <SAE_J1939_Response_Request_Address_Claimed>:

/*
 * Response the request address claimed about this ECU to all ECU - Broadcast. This function must be called at the ECU start up according to J1939 standard
 * PGN: 0x00EE00 (60928)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Response_Request_Address_Claimed(J1939 *j1939) {
 80025ac:	b513      	push	{r0, r1, r4, lr}
	uint32_t ID = (0x18EEFF << 8) | j1939->information_this_ECU.this_ECU_address;
 80025ae:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
	uint8_t data[8];
	data[0] = j1939->information_this_ECU.this_name.identity_number;
 80025b2:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
	uint32_t ID = (0x18EEFF << 8) | j1939->information_this_ECU.this_ECU_address;
 80025b6:	f890 22d4 	ldrb.w	r2, [r0, #724]	; 0x2d4
	data[0] = j1939->information_this_ECU.this_name.identity_number;
 80025ba:	f88d 4000 	strb.w	r4, [sp]
	data[1] = j1939->information_this_ECU.this_name.identity_number >> 8;
 80025be:	0a23      	lsrs	r3, r4, #8
 80025c0:	f88d 3001 	strb.w	r3, [sp, #1]
	data[2] = (j1939->information_this_ECU.this_name.identity_number >> 16) |  (j1939->information_this_ECU.this_name.manufacturer_code << 5);
 80025c4:	f8b0 32c8 	ldrh.w	r3, [r0, #712]	; 0x2c8
 80025c8:	0159      	lsls	r1, r3, #5
 80025ca:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
	data[3] = j1939->information_this_ECU.this_name.manufacturer_code >> 3;
 80025ce:	08db      	lsrs	r3, r3, #3
	data[2] = (j1939->information_this_ECU.this_name.identity_number >> 16) |  (j1939->information_this_ECU.this_name.manufacturer_code << 5);
 80025d0:	f88d 1002 	strb.w	r1, [sp, #2]
	data[3] = j1939->information_this_ECU.this_name.manufacturer_code >> 3;
 80025d4:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = (j1939->information_this_ECU.this_name.function_instance << 3) | j1939->information_this_ECU.this_name.ECU_instance;
 80025d8:	f890 12ca 	ldrb.w	r1, [r0, #714]	; 0x2ca
 80025dc:	f890 32cb 	ldrb.w	r3, [r0, #715]	; 0x2cb
 80025e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025e4:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = j1939->information_this_ECU.this_name.function;
 80025e8:	f890 32cc 	ldrb.w	r3, [r0, #716]	; 0x2cc
 80025ec:	f88d 3005 	strb.w	r3, [sp, #5]
	data[6] = j1939->information_this_ECU.this_name.vehicle_system << 1;
 80025f0:	f890 32cd 	ldrb.w	r3, [r0, #717]	; 0x2cd
	data[7] = (j1939->information_this_ECU.this_name.arbitrary_address_capable << 7) | (j1939->information_this_ECU.this_name.industry_group << 4) | j1939->information_this_ECU.this_name.vehicle_system_instance;
 80025f4:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
	data[6] = j1939->information_this_ECU.this_name.vehicle_system << 1;
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	f88d 3006 	strb.w	r3, [sp, #6]
	data[7] = (j1939->information_this_ECU.this_name.arbitrary_address_capable << 7) | (j1939->information_this_ECU.this_name.industry_group << 4) | j1939->information_this_ECU.this_name.vehicle_system_instance;
 80025fe:	f890 32cf 	ldrb.w	r3, [r0, #719]	; 0x2cf
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8002608:	f890 12d0 	ldrb.w	r1, [r0, #720]	; 0x2d0
	return CAN_Send_Message(ID, data);
 800260c:	4804      	ldr	r0, [pc, #16]	; (8002620 <SAE_J1939_Response_Request_Address_Claimed+0x74>)
	data[7] = (j1939->information_this_ECU.this_name.arbitrary_address_capable << 7) | (j1939->information_this_ECU.this_name.industry_group << 4) | j1939->information_this_ECU.this_name.vehicle_system_instance;
 800260e:	430b      	orrs	r3, r1
	return CAN_Send_Message(ID, data);
 8002610:	4310      	orrs	r0, r2
 8002612:	4669      	mov	r1, sp
	data[7] = (j1939->information_this_ECU.this_name.arbitrary_address_capable << 7) | (j1939->information_this_ECU.this_name.industry_group << 4) | j1939->information_this_ECU.this_name.vehicle_system_instance;
 8002614:	f88d 3007 	strb.w	r3, [sp, #7]
	return CAN_Send_Message(ID, data);
 8002618:	f7ff fea7 	bl	800236a <CAN_Send_Message>
}
 800261c:	b002      	add	sp, #8
 800261e:	bd10      	pop	{r4, pc}
 8002620:	18eeff00 	.word	0x18eeff00

08002624 <SAE_J1939_Send_Address_Delete>:

/*
 * This is not a SAE J1939 standard. It's only for deleting the j1939->ECU_address
 * PGN: 0x000002 (2)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Address_Delete(J1939 *j1939, uint8_t DA, uint8_t old_ECU_address) {
 8002624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Delete other ECU address in this ECU */
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 8002626:	2500      	movs	r5, #0
		if(old_ECU_address == j1939->other_ECU_address[i]){
			j1939->other_ECU_address[i] = 0xFF;
 8002628:	26ff      	movs	r6, #255	; 0xff
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 800262a:	7b44      	ldrb	r4, [r0, #13]
 800262c:	b2eb      	uxtb	r3, r5
 800262e:	429c      	cmp	r4, r3
 8002630:	d81d      	bhi.n	800266e <SAE_J1939_Send_Address_Delete+0x4a>
			j1939->number_of_other_ECU--;
		}
	}

	/* Send delete command to other ECU - Spread the news that the old_ECU_address is not used any more */
	uint32_t ID = (0x0002 << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 8002632:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
	uint8_t data[8];
	data[0] = old_ECU_address;
 8002636:	f88d 2000 	strb.w	r2, [sp]
	uint32_t ID = (0x0002 << 16) | (DA << 8) | j1939->information_this_ECU.this_ECU_address;
 800263a:	f890 32d4 	ldrb.w	r3, [r0, #724]	; 0x2d4
 800263e:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
	data[1] = data[2] = data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;  /*Reserved */
	return CAN_Send_Message(ID, data);
 8002642:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
	data[1] = data[2] = data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;  /*Reserved */
 8002646:	23ff      	movs	r3, #255	; 0xff
	return CAN_Send_Message(ID, data);
 8002648:	4669      	mov	r1, sp
	data[1] = data[2] = data[3] = data[4] = data[5] = data[6] = data[7] = 0xFF;  /*Reserved */
 800264a:	f88d 3007 	strb.w	r3, [sp, #7]
 800264e:	f88d 3006 	strb.w	r3, [sp, #6]
 8002652:	f88d 3005 	strb.w	r3, [sp, #5]
 8002656:	f88d 3004 	strb.w	r3, [sp, #4]
 800265a:	f88d 3003 	strb.w	r3, [sp, #3]
 800265e:	f88d 3002 	strb.w	r3, [sp, #2]
 8002662:	f88d 3001 	strb.w	r3, [sp, #1]
	return CAN_Send_Message(ID, data);
 8002666:	f7ff fe80 	bl	800236a <CAN_Send_Message>
}
 800266a:	b003      	add	sp, #12
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(old_ECU_address == j1939->other_ECU_address[i]){
 800266e:	4403      	add	r3, r0
 8002670:	3501      	adds	r5, #1
 8002672:	7bdf      	ldrb	r7, [r3, #15]
 8002674:	4297      	cmp	r7, r2
			j1939->number_of_other_ECU--;
 8002676:	bf02      	ittt	eq
 8002678:	f104 34ff 	addeq.w	r4, r4, #4294967295
			j1939->other_ECU_address[i] = 0xFF;
 800267c:	73de      	strbeq	r6, [r3, #15]
			j1939->number_of_other_ECU--;
 800267e:	7344      	strbeq	r4, [r0, #13]
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 8002680:	e7d3      	b.n	800262a <SAE_J1939_Send_Address_Delete+0x6>

08002682 <SAE_J1939_Send_Commanded_Address>:

/*
 * Send commanded address to another ECU
 * PGN: 0x00FED8 (65240)
 */
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 8002682:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Multiple messages - Load data */
	j1939->this_ecu_tp_cm.number_of_packages = 2;
 8002686:	f04f 0802 	mov.w	r8, #2
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 800268a:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
	j1939->this_ecu_tp_cm.number_of_packages = 2;
 800268e:	f880 8a88 	strb.w	r8, [r0, #2696]	; 0xa88
	j1939->this_ecu_tp_cm.total_message_size = 9;
 8002692:	f04f 0809 	mov.w	r8, #9
 8002696:	f8a0 8a86 	strh.w	r8, [r0, #2694]	; 0xa86
	j1939->this_ecu_tp_dt.data[0] = identity_number;
	j1939->this_ecu_tp_dt.data[1] = identity_number >> 8;
 800269a:	ea4f 2813 	mov.w	r8, r3, lsr #8
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 800269e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
	j1939->this_ecu_tp_dt.data[1] = identity_number >> 8;
 80026a2:	f880 8a96 	strb.w	r8, [r0, #2710]	; 0xa96
	j1939->this_ecu_tp_dt.data[2] = (identity_number >> 16) |  (manufacturer_code << 5);
 80026a6:	ea4f 1847 	mov.w	r8, r7, lsl #5
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 80026aa:	9501      	str	r5, [sp, #4]
 80026ac:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 80026b0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	j1939->this_ecu_tp_dt.data[0] = identity_number;
 80026b4:	f880 3a95 	strb.w	r3, [r0, #2709]	; 0xa95
	j1939->this_ecu_tp_dt.data[2] = (identity_number >> 16) |  (manufacturer_code << 5);
 80026b8:	ea48 4313 	orr.w	r3, r8, r3, lsr #16
 80026bc:	f880 3a97 	strb.w	r3, [r0, #2711]	; 0xa97
	j1939->this_ecu_tp_dt.data[3] = manufacturer_code >> 3;
	j1939->this_ecu_tp_dt.data[4] = (function_instance << 3) | ECU_instance;
	j1939->this_ecu_tp_dt.data[5] = function;
	j1939->this_ecu_tp_dt.data[6] = vehicle_system << 1;
	j1939->this_ecu_tp_dt.data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 80026c0:	9b01      	ldr	r3, [sp, #4]
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 80026c2:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 80026c6:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 80026ca:	f89d c040 	ldrb.w	ip, [sp, #64]	; 0x40
 80026ce:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
	j1939->this_ecu_tp_dt.data[5] = function;
 80026d2:	f880 aa9a 	strb.w	sl, [r0, #2714]	; 0xa9a
	j1939->this_ecu_tp_dt.data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 80026d6:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
	j1939->this_ecu_tp_dt.data[8] = new_ECU_address;							/* New address of the ECU we are sending to*/

	/* Send TP CM */
	j1939->this_ecu_tp_cm.PGN_of_the_packeted_message = PGN_COMMANDED_ADDRESS;
	j1939->this_ecu_tp_cm.control_byte = DA == 0xFF ? CONTROL_BYTE_TP_CM_BAM : CONTROL_BYTE_TP_CM_RTS; /* If broadcast, then use BAM control byte */
 80026da:	29ff      	cmp	r1, #255	; 0xff
	j1939->this_ecu_tp_dt.data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 80026dc:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
	j1939->this_ecu_tp_cm.PGN_of_the_packeted_message = PGN_COMMANDED_ADDRESS;
 80026e0:	f64f 63d8 	movw	r3, #65240	; 0xfed8
 80026e4:	f8c0 3a8c 	str.w	r3, [r0, #2700]	; 0xa8c
	j1939->this_ecu_tp_dt.data[3] = manufacturer_code >> 3;
 80026e8:	ea4f 07d7 	mov.w	r7, r7, lsr #3
	j1939->this_ecu_tp_cm.control_byte = DA == 0xFF ? CONTROL_BYTE_TP_CM_BAM : CONTROL_BYTE_TP_CM_RTS; /* If broadcast, then use BAM control byte */
 80026ec:	bf0c      	ite	eq
 80026ee:	2320      	moveq	r3, #32
 80026f0:	2310      	movne	r3, #16
	j1939->this_ecu_tp_dt.data[4] = (function_instance << 3) | ECU_instance;
 80026f2:	ea4e 0ecb 	orr.w	lr, lr, fp, lsl #3
	j1939->this_ecu_tp_dt.data[6] = vehicle_system << 1;
 80026f6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	j1939->this_ecu_tp_dt.data[3] = manufacturer_code >> 3;
 80026fa:	f880 7a98 	strb.w	r7, [r0, #2712]	; 0xa98
	j1939->this_ecu_tp_dt.data[4] = (function_instance << 3) | ECU_instance;
 80026fe:	f880 ea99 	strb.w	lr, [r0, #2713]	; 0xa99
	j1939->this_ecu_tp_dt.data[6] = vehicle_system << 1;
 8002702:	f880 ca9b 	strb.w	ip, [r0, #2715]	; 0xa9b
	j1939->this_ecu_tp_dt.data[7] = (arbitrary_address_capable << 7) | (industry_group << 4) | vehicle_system_instance;
 8002706:	f880 5a9c 	strb.w	r5, [r0, #2716]	; 0xa9c
	j1939->this_ecu_tp_dt.data[8] = new_ECU_address;							/* New address of the ECU we are sending to*/
 800270a:	f880 2a9d 	strb.w	r2, [r0, #2717]	; 0xa9d
	j1939->this_ecu_tp_cm.control_byte = DA == 0xFF ? CONTROL_BYTE_TP_CM_BAM : CONTROL_BYTE_TP_CM_RTS; /* If broadcast, then use BAM control byte */
 800270e:	f880 3a84 	strb.w	r3, [r0, #2692]	; 0xa84
ENUM_J1939_STATUS_CODES SAE_J1939_Send_Commanded_Address(J1939 *j1939, uint8_t DA, uint8_t new_ECU_address, uint32_t identity_number, uint16_t manufacturer_code, uint8_t function_instance, uint8_t ECU_instance, uint8_t function, uint8_t vehicle_system, uint8_t arbitrary_address_capable, uint8_t industry_group, uint8_t vehicle_system_instance) {
 8002712:	4604      	mov	r4, r0
 8002714:	460e      	mov	r6, r1
	ENUM_J1939_STATUS_CODES status = SAE_J1939_Send_Transport_Protocol_Connection_Management(j1939, DA);
 8002716:	f7ff fecc 	bl	80024b2 <SAE_J1939_Send_Transport_Protocol_Connection_Management>
	if(status != STATUS_SEND_OK)
 800271a:	b950      	cbnz	r0, 8002732 <SAE_J1939_Send_Commanded_Address+0xb0>
		return status;

	/* Check if we are going to send it directly (BAM) - Else, the TP CM will send a RTS control byte to the other ECU and the ECU will answer with control byte CTS */
	if(j1939->this_ecu_tp_cm.control_byte == CONTROL_BYTE_TP_CM_BAM)
 800271c:	f894 3a84 	ldrb.w	r3, [r4, #2692]	; 0xa84
 8002720:	2b20      	cmp	r3, #32
 8002722:	d106      	bne.n	8002732 <SAE_J1939_Send_Commanded_Address+0xb0>
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA);
 8002724:	4631      	mov	r1, r6
 8002726:	4620      	mov	r0, r4
	return status;

}
 8002728:	b003      	add	sp, #12
 800272a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return SAE_J1939_Send_Transport_Protocol_Data_Transfer(j1939, DA);
 800272e:	f7ff beed 	b.w	800250c <SAE_J1939_Send_Transport_Protocol_Data_Transfer>
}
 8002732:	b003      	add	sp, #12
 8002734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Question_Yes_No_Dialog(char question[]) {
 8002738:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	ILI9341_set_rotation(2);

	/* Big blue frame */
	ILI9341_fill_rect(40, 80, 290, 160, COLOR_BLUE);
 800273c:	271f      	movs	r7, #31
uint8_t STM32_PLC_LCD_Show_Question_Yes_No_Dialog(char question[]) {
 800273e:	4605      	mov	r5, r0
	ILI9341_set_rotation(2);
 8002740:	2002      	movs	r0, #2
	ILI9341_hollow_rect(40, 80, 290, 160, COLOR_BLACK);
 8002742:	2400      	movs	r4, #0
	ILI9341_set_rotation(2);
 8002744:	f004 f82a 	bl	800679c <ILI9341_set_rotation>
	ILI9341_fill_rect(40, 80, 290, 160, COLOR_BLUE);
 8002748:	9700      	str	r7, [sp, #0]
 800274a:	23a0      	movs	r3, #160	; 0xa0
 800274c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002750:	2150      	movs	r1, #80	; 0x50
 8002752:	2028      	movs	r0, #40	; 0x28
 8002754:	f003 fe24 	bl	80063a0 <ILI9341_fill_rect>

	/* White big frame */
	ILI9341_fill_rect(42, 82, 288, 158, COLOR_WHITE);
 8002758:	f64f 78ff 	movw	r8, #65535	; 0xffff
	ILI9341_hollow_rect(40, 80, 290, 160, COLOR_BLACK);
 800275c:	9400      	str	r4, [sp, #0]
 800275e:	23a0      	movs	r3, #160	; 0xa0
 8002760:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002764:	2150      	movs	r1, #80	; 0x50
 8002766:	2028      	movs	r0, #40	; 0x28
 8002768:	f003 feae 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_fill_rect(42, 82, 288, 158, COLOR_WHITE);
 800276c:	f8cd 8000 	str.w	r8, [sp]
 8002770:	239e      	movs	r3, #158	; 0x9e
 8002772:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002776:	2152      	movs	r1, #82	; 0x52
 8002778:	202a      	movs	r0, #42	; 0x2a
 800277a:	f003 fe11 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(42, 82, 288, 158, COLOR_BLACK);
 800277e:	9400      	str	r4, [sp, #0]
 8002780:	239e      	movs	r3, #158	; 0x9e
 8002782:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002786:	2152      	movs	r1, #82	; 0x52
 8002788:	202a      	movs	r0, #42	; 0x2a
 800278a:	f003 fe9d 	bl	80064c8 <ILI9341_hollow_rect>

	/* Small question background frame */
	ILI9341_fill_rect(45, 85, 285, 106, COLOR_BLUE);
 800278e:	9700      	str	r7, [sp, #0]
 8002790:	236a      	movs	r3, #106	; 0x6a
 8002792:	f240 121d 	movw	r2, #285	; 0x11d
 8002796:	2155      	movs	r1, #85	; 0x55
 8002798:	202d      	movs	r0, #45	; 0x2d
 800279a:	f003 fe01 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(45, 85, 285, 106, COLOR_BLACK);

	/* Text */
	ILI9341_print_text("Question", 115, 88, COLOR_BLACK, COLOR_BLUE, 2);
 800279e:	2602      	movs	r6, #2
	ILI9341_hollow_rect(45, 85, 285, 106, COLOR_BLACK);
 80027a0:	9400      	str	r4, [sp, #0]
 80027a2:	236a      	movs	r3, #106	; 0x6a
 80027a4:	f240 121d 	movw	r2, #285	; 0x11d
 80027a8:	2155      	movs	r1, #85	; 0x55
 80027aa:	202d      	movs	r0, #45	; 0x2d
 80027ac:	f003 fe8c 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Question", 115, 88, COLOR_BLACK, COLOR_BLUE, 2);
 80027b0:	4623      	mov	r3, r4
 80027b2:	e9cd 7600 	strd	r7, r6, [sp]
 80027b6:	4825      	ldr	r0, [pc, #148]	; (800284c <STM32_PLC_LCD_Show_Question_Yes_No_Dialog+0x114>)
 80027b8:	2258      	movs	r2, #88	; 0x58
 80027ba:	2173      	movs	r1, #115	; 0x73
 80027bc:	f003 ff1e 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text(question, 50, 110, COLOR_BLACK, COLOR_WHITE, 1);
 80027c0:	2301      	movs	r3, #1
 80027c2:	e9cd 8300 	strd	r8, r3, [sp]
 80027c6:	4628      	mov	r0, r5
 80027c8:	4623      	mov	r3, r4

	/* Yes button */
	ILI9341_fill_rect(120, 129, 160, 150, COLOR_LGRAY);
 80027ca:	f24c 6518 	movw	r5, #50712	; 0xc618
	ILI9341_print_text(question, 50, 110, COLOR_BLACK, COLOR_WHITE, 1);
 80027ce:	226e      	movs	r2, #110	; 0x6e
 80027d0:	2132      	movs	r1, #50	; 0x32
 80027d2:	f003 ff13 	bl	80065fc <ILI9341_print_text>
	ILI9341_fill_rect(120, 129, 160, 150, COLOR_LGRAY);
 80027d6:	9500      	str	r5, [sp, #0]
 80027d8:	2396      	movs	r3, #150	; 0x96
 80027da:	22a0      	movs	r2, #160	; 0xa0
 80027dc:	2181      	movs	r1, #129	; 0x81
 80027de:	2078      	movs	r0, #120	; 0x78
 80027e0:	f003 fdde 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(120, 129, 160, 150, COLOR_BLACK);
 80027e4:	9400      	str	r4, [sp, #0]
 80027e6:	2396      	movs	r3, #150	; 0x96
 80027e8:	22a0      	movs	r2, #160	; 0xa0
 80027ea:	2181      	movs	r1, #129	; 0x81
 80027ec:	2078      	movs	r0, #120	; 0x78
 80027ee:	f003 fe6b 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Yes", 122, 132, COLOR_BLACK, COLOR_LGRAY, 2);
 80027f2:	4623      	mov	r3, r4
 80027f4:	e9cd 5600 	strd	r5, r6, [sp]
 80027f8:	4815      	ldr	r0, [pc, #84]	; (8002850 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog+0x118>)
 80027fa:	2284      	movs	r2, #132	; 0x84
 80027fc:	217a      	movs	r1, #122	; 0x7a
 80027fe:	f003 fefd 	bl	80065fc <ILI9341_print_text>

	/* No button */
	ILI9341_fill_rect(168, 129, 208, 150, COLOR_LGRAY);
 8002802:	9500      	str	r5, [sp, #0]
 8002804:	2396      	movs	r3, #150	; 0x96
 8002806:	22d0      	movs	r2, #208	; 0xd0
 8002808:	2181      	movs	r1, #129	; 0x81
 800280a:	20a8      	movs	r0, #168	; 0xa8
 800280c:	f003 fdc8 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(168, 129, 208, 150, COLOR_BLACK);
 8002810:	9400      	str	r4, [sp, #0]
 8002812:	2396      	movs	r3, #150	; 0x96
 8002814:	22d0      	movs	r2, #208	; 0xd0
 8002816:	2181      	movs	r1, #129	; 0x81
 8002818:	20a8      	movs	r0, #168	; 0xa8
 800281a:	f003 fe55 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("No", 176, 132, COLOR_BLACK, COLOR_LGRAY, 2);
 800281e:	4623      	mov	r3, r4
 8002820:	e9cd 5600 	strd	r5, r6, [sp]
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog+0x11c>)
 8002826:	2284      	movs	r2, #132	; 0x84
 8002828:	21b0      	movs	r1, #176	; 0xb0
 800282a:	f003 fee7 	bl	80065fc <ILI9341_print_text>
	uint8_t b1_y2 = 150;
	uint8_t b2_x1 = 168;
	uint8_t b2_y1 = 129;
	uint8_t b2_x2 = 208;
	uint8_t b2_y2 = 150;
	return STM32_PLC_LCD_Call_Two_Button_Logic(b1_x1, b1_y1, b1_x2, b1_y2, b2_x1, b2_y1, b2_x2, b2_y2);
 800282e:	2396      	movs	r3, #150	; 0x96
 8002830:	22d0      	movs	r2, #208	; 0xd0
 8002832:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002836:	2181      	movs	r1, #129	; 0x81
 8002838:	22a8      	movs	r2, #168	; 0xa8
 800283a:	e9cd 2100 	strd	r2, r1, [sp]
 800283e:	2078      	movs	r0, #120	; 0x78
 8002840:	22a0      	movs	r2, #160	; 0xa0
 8002842:	f004 fde5 	bl	8007410 <STM32_PLC_LCD_Call_Two_Button_Logic>
}
 8002846:	b004      	add	sp, #16
 8002848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800284c:	08012d67 	.word	0x08012d67
 8002850:	0801410c 	.word	0x0801410c
 8002854:	0801412a 	.word	0x0801412a

08002858 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_About_STM32_PLC_Frame(uint8_t *frame_id){
 8002858:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800285a:	240f      	movs	r4, #15
void STM32_PLC_LCD_Show_About_STM32_PLC_Frame(uint8_t *frame_id){
 800285c:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800285e:	9400      	str	r4, [sp, #0]
 8002860:	23ea      	movs	r3, #234	; 0xea
 8002862:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8002866:	2106      	movs	r1, #6
 8002868:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("About STM32 PLC", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800286a:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800286c:	f003 fd98 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8002870:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002874:	f240 1209 	movw	r2, #265	; 0x109
 8002878:	211e      	movs	r1, #30
 800287a:	2032      	movs	r0, #50	; 0x32
 800287c:	f003 fdd2 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("About STM32 PLC", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002880:	e9cd 4500 	strd	r4, r5, [sp]
 8002884:	485b      	ldr	r0, [pc, #364]	; (80029f4 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x19c>)
 8002886:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800288a:	220a      	movs	r2, #10
 800288c:	2137      	movs	r1, #55	; 0x37
 800288e:	f003 feb5 	bl	80065fc <ILI9341_print_text>

	/* Variables for the text */
	uint16_t y = 25;

	/* Show analog inputs */
	ILI9341_print_text("This PCB board have ADC 16-bit, DAC 12-bit", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002892:	e9cd 4500 	strd	r4, r5, [sp]
 8002896:	4858      	ldr	r0, [pc, #352]	; (80029f8 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1a0>)
 8002898:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800289c:	2223      	movs	r2, #35	; 0x23
 800289e:	2137      	movs	r1, #55	; 0x37
 80028a0:	f003 feac 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("PWM 16-bit, CAN-bus with SAE J1939 protocol", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80028a4:	e9cd 4500 	strd	r4, r5, [sp]
 80028a8:	4854      	ldr	r0, [pc, #336]	; (80029fc <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1a4>)
 80028aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028ae:	222d      	movs	r2, #45	; 0x2d
 80028b0:	2137      	movs	r1, #55	; 0x37
 80028b2:	f003 fea3 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Digital inputs, Differential ADC 16-bit", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80028b6:	2237      	movs	r2, #55	; 0x37
 80028b8:	e9cd 4500 	strd	r4, r5, [sp]
 80028bc:	4611      	mov	r1, r2
 80028be:	4850      	ldr	r0, [pc, #320]	; (8002a00 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1a8>)
 80028c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028c4:	f003 fe9a 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Input capture and Encoder. See the document", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80028c8:	e9cd 4500 	strd	r4, r5, [sp]
 80028cc:	484d      	ldr	r0, [pc, #308]	; (8002a04 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1ac>)
 80028ce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028d2:	2241      	movs	r2, #65	; 0x41
 80028d4:	2137      	movs	r1, #55	; 0x37
 80028d6:	f003 fe91 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("of this PCB board in the C++ software:", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80028da:	e9cd 4500 	strd	r4, r5, [sp]
 80028de:	484a      	ldr	r0, [pc, #296]	; (8002a08 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1b0>)
 80028e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028e4:	224b      	movs	r2, #75	; 0x4b
 80028e6:	2137      	movs	r1, #55	; 0x37
 80028e8:	f003 fe88 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("OpenSourceLogger", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80028ec:	e9cd 4500 	strd	r4, r5, [sp]
 80028f0:	4846      	ldr	r0, [pc, #280]	; (8002a0c <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1b4>)
 80028f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028f6:	2255      	movs	r2, #85	; 0x55
 80028f8:	2137      	movs	r1, #55	; 0x37
 80028fa:	f003 fe7f 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Whit that software, you can store data", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80028fe:	e9cd 4500 	strd	r4, r5, [sp]
 8002902:	4843      	ldr	r0, [pc, #268]	; (8002a10 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1b8>)
 8002904:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002908:	225f      	movs	r2, #95	; 0x5f
 800290a:	2137      	movs	r1, #55	; 0x37
 800290c:	f003 fe76 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("directly to a SQL database. Also control", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002910:	e9cd 4500 	strd	r4, r5, [sp]
 8002914:	483f      	ldr	r0, [pc, #252]	; (8002a14 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1bc>)
 8002916:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800291a:	2269      	movs	r2, #105	; 0x69
 800291c:	2137      	movs	r1, #55	; 0x37
 800291e:	f003 fe6d 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("the outputs of this PCB board. This STM32", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002922:	e9cd 4500 	strd	r4, r5, [sp]
 8002926:	483c      	ldr	r0, [pc, #240]	; (8002a18 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1c0>)
 8002928:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800292c:	2273      	movs	r2, #115	; 0x73
 800292e:	2137      	movs	r1, #55	; 0x37
 8002930:	f003 fe64 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("processor STM32F373VBT is written with C", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002934:	e9cd 4500 	strd	r4, r5, [sp]
 8002938:	4838      	ldr	r0, [pc, #224]	; (8002a1c <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1c4>)
 800293a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800293e:	227d      	movs	r2, #125	; 0x7d
 8002940:	2137      	movs	r1, #55	; 0x37
 8002942:	f003 fe5b 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("programming language. Visit:", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002946:	e9cd 4500 	strd	r4, r5, [sp]
 800294a:	4835      	ldr	r0, [pc, #212]	; (8002a20 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1c8>)
 800294c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002950:	2287      	movs	r2, #135	; 0x87
 8002952:	2137      	movs	r1, #55	; 0x37
 8002954:	f003 fe52 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("https://github.com/danielmartensson/", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002958:	e9cd 4500 	strd	r4, r5, [sp]
 800295c:	4831      	ldr	r0, [pc, #196]	; (8002a24 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1cc>)
 800295e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002962:	2291      	movs	r2, #145	; 0x91
 8002964:	2137      	movs	r1, #55	; 0x37
 8002966:	f003 fe49 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("and look for the OpenSourceLogger", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800296a:	e9cd 4500 	strd	r4, r5, [sp]
 800296e:	482e      	ldr	r0, [pc, #184]	; (8002a28 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1d0>)
 8002970:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002974:	229b      	movs	r2, #155	; 0x9b
 8002976:	2137      	movs	r1, #55	; 0x37
 8002978:	f003 fe40 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("repository there. Run the software.", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800297c:	e9cd 4500 	strd	r4, r5, [sp]
 8002980:	482a      	ldr	r0, [pc, #168]	; (8002a2c <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1d4>)
 8002982:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002986:	22a5      	movs	r2, #165	; 0xa5
 8002988:	2137      	movs	r1, #55	; 0x37
 800298a:	f003 fe37 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Created: 2022-05-25", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800298e:	e9cd 4500 	strd	r4, r5, [sp]
 8002992:	4827      	ldr	r0, [pc, #156]	; (8002a30 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1d8>)


	/* Button */
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8002994:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("Created: 2022-05-25", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002998:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800299c:	22af      	movs	r2, #175	; 0xaf
 800299e:	2137      	movs	r1, #55	; 0x37
 80029a0:	f003 fe2c 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 80029a4:	2400      	movs	r4, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 80029a6:	9500      	str	r5, [sp, #0]
 80029a8:	23dc      	movs	r3, #220	; 0xdc
 80029aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ae:	21c3      	movs	r1, #195	; 0xc3
 80029b0:	2041      	movs	r0, #65	; 0x41
 80029b2:	f003 fcf5 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 80029b6:	9400      	str	r4, [sp, #0]
 80029b8:	23dc      	movs	r3, #220	; 0xdc
 80029ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029be:	21c3      	movs	r1, #195	; 0xc3
 80029c0:	2041      	movs	r0, #65	; 0x41
 80029c2:	f003 fd81 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Leave the frame now", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80029c6:	2302      	movs	r3, #2
 80029c8:	e9cd 5300 	strd	r5, r3, [sp]
 80029cc:	4819      	ldr	r0, [pc, #100]	; (8002a34 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame+0x1dc>)
 80029ce:	4623      	mov	r3, r4
 80029d0:	22c8      	movs	r2, #200	; 0xc8
 80029d2:	2146      	movs	r1, #70	; 0x46
 80029d4:	f003 fe12 	bl	80065fc <ILI9341_print_text>

	/* Logic for button */
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 80029d8:	23dc      	movs	r3, #220	; 0xdc
 80029da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029de:	21c3      	movs	r1, #195	; 0xc3
 80029e0:	2041      	movs	r0, #65	; 0x41
 80029e2:	f004 fceb 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80029e6:	4621      	mov	r1, r4
 80029e8:	4630      	mov	r0, r6

}
 80029ea:	b002      	add	sp, #8
 80029ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80029f0:	f001 b994 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
 80029f4:	08013c39 	.word	0x08013c39
 80029f8:	08012d70 	.word	0x08012d70
 80029fc:	08012d9b 	.word	0x08012d9b
 8002a00:	08012dc7 	.word	0x08012dc7
 8002a04:	08012def 	.word	0x08012def
 8002a08:	08012e1b 	.word	0x08012e1b
 8002a0c:	08012f38 	.word	0x08012f38
 8002a10:	08012e42 	.word	0x08012e42
 8002a14:	08012e69 	.word	0x08012e69
 8002a18:	08012e92 	.word	0x08012e92
 8002a1c:	08012ebc 	.word	0x08012ebc
 8002a20:	08012ee5 	.word	0x08012ee5
 8002a24:	08012f02 	.word	0x08012f02
 8002a28:	08012f27 	.word	0x08012f27
 8002a2c:	08012f49 	.word	0x08012f49
 8002a30:	08012f6d 	.word	0x08012f6d
 8002a34:	08012f81 	.word	0x08012f81

08002a38 <STM32_PLC_LCD_Show_Analog_Gain_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Analog_Gain_Frame(uint8_t *frame_id){
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	b094      	sub	sp, #80	; 0x50
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002a3c:	240f      	movs	r4, #15
 8002a3e:	9400      	str	r4, [sp, #0]
 8002a40:	23ea      	movs	r3, #234	; 0xea
 8002a42:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8002a46:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Analog_Gain_Frame(uint8_t *frame_id){
 8002a48:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002a4a:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set analog gain", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002a4c:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002a4e:	f003 fca7 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8002a52:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a56:	f240 1209 	movw	r2, #265	; 0x109
 8002a5a:	211e      	movs	r1, #30
 8002a5c:	2032      	movs	r0, #50	; 0x32
 8002a5e:	f003 fce1 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set analog gain", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002a62:	e9cd 4500 	strd	r4, r5, [sp]
 8002a66:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a6a:	48c4      	ldr	r0, [pc, #784]	; (8002d7c <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x344>)
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	2137      	movs	r1, #55	; 0x37
 8002a70:	f003 fdc4 	bl	80065fc <ILI9341_print_text>
	char text[50];
	uint16_t y = 25;

	/* Get analog gains for SDADC 1 */
	uint8_t gain_for_configuration_index_0, gain_for_configuration_index_1, gain_for_configuration_index_2;
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8002a74:	f10d 0217 	add.w	r2, sp, #23
 8002a78:	f10d 0116 	add.w	r1, sp, #22
 8002a7c:	f10d 0015 	add.w	r0, sp, #21
 8002a80:	f7fe fd8d 	bl	800159e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_1>
	sprintf(text, "0=ADC0:%i,ADC1:%i,ADC2:%i", gain_for_configuration_index_0, gain_for_configuration_index_0, gain_for_configuration_index_0);
 8002a84:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002a88:	49bd      	ldr	r1, [pc, #756]	; (8002d80 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x348>)
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	a807      	add	r0, sp, #28
 8002a90:	f00c fbae 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002a94:	e9cd 4500 	strd	r4, r5, [sp]
 8002a98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a9c:	2223      	movs	r2, #35	; 0x23
 8002a9e:	2137      	movs	r1, #55	; 0x37
 8002aa0:	a807      	add	r0, sp, #28
 8002aa2:	f003 fdab 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "1=ADC3:%i,ADC4:%i,ADC5:%i", gain_for_configuration_index_1, gain_for_configuration_index_1, gain_for_configuration_index_1);
 8002aa6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002aaa:	49b6      	ldr	r1, [pc, #728]	; (8002d84 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x34c>)
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	a807      	add	r0, sp, #28
 8002ab2:	f00c fb9d 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002ab6:	e9cd 4500 	strd	r4, r5, [sp]
 8002aba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002abe:	222d      	movs	r2, #45	; 0x2d
 8002ac0:	2137      	movs	r1, #55	; 0x37
 8002ac2:	a807      	add	r0, sp, #28
 8002ac4:	f003 fd9a 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "2=ADC6:%i,ADC7:%i,ADC8:%i", gain_for_configuration_index_2, gain_for_configuration_index_2, gain_for_configuration_index_2);
 8002ac8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002acc:	49ae      	ldr	r1, [pc, #696]	; (8002d88 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x350>)
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	a807      	add	r0, sp, #28
 8002ad4:	f00c fb8c 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002ad8:	2237      	movs	r2, #55	; 0x37
 8002ada:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ade:	e9cd 4500 	strd	r4, r5, [sp]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	a807      	add	r0, sp, #28
 8002ae6:	f003 fd89 	bl	80065fc <ILI9341_print_text>

	/* Get analog gains for SDADC 2 */
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8002aea:	f10d 0217 	add.w	r2, sp, #23
 8002aee:	f10d 0116 	add.w	r1, sp, #22
 8002af2:	f10d 0015 	add.w	r0, sp, #21
 8002af6:	f7fe fd6e 	bl	80015d6 <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_2>
	sprintf(text, "3=ADC9:%i", gain_for_configuration_index_0);
 8002afa:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8002afe:	49a3      	ldr	r1, [pc, #652]	; (8002d8c <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x354>)
 8002b00:	a807      	add	r0, sp, #28
 8002b02:	f00c fb75 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002b06:	e9cd 4500 	strd	r4, r5, [sp]
 8002b0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b0e:	2241      	movs	r2, #65	; 0x41
 8002b10:	2137      	movs	r1, #55	; 0x37
 8002b12:	a807      	add	r0, sp, #28
 8002b14:	f003 fd72 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "4=ADC10:%i", gain_for_configuration_index_1);
 8002b18:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8002b1c:	499c      	ldr	r1, [pc, #624]	; (8002d90 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x358>)
 8002b1e:	a807      	add	r0, sp, #28
 8002b20:	f00c fb66 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002b24:	e9cd 4500 	strd	r4, r5, [sp]
 8002b28:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b2c:	224b      	movs	r2, #75	; 0x4b
 8002b2e:	2137      	movs	r1, #55	; 0x37
 8002b30:	a807      	add	r0, sp, #28
 8002b32:	f003 fd63 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "5=ADC11:%i", gain_for_configuration_index_2);
 8002b36:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8002b3a:	4996      	ldr	r1, [pc, #600]	; (8002d94 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x35c>)
 8002b3c:	a807      	add	r0, sp, #28
 8002b3e:	f00c fb57 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002b42:	e9cd 4500 	strd	r4, r5, [sp]
 8002b46:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b4a:	2255      	movs	r2, #85	; 0x55
 8002b4c:	2137      	movs	r1, #55	; 0x37
 8002b4e:	a807      	add	r0, sp, #28
 8002b50:	f003 fd54 	bl	80065fc <ILI9341_print_text>

	/* Get analog gains for SDADC 3 */
	STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3(&gain_for_configuration_index_0, &gain_for_configuration_index_1, &gain_for_configuration_index_2);
 8002b54:	f10d 0217 	add.w	r2, sp, #23
 8002b58:	f10d 0116 	add.w	r1, sp, #22
 8002b5c:	f10d 0015 	add.w	r0, sp, #21
 8002b60:	f7fe fd55 	bl	800160e <STM32_PLC_Flash_Get_ADC_Gains_For_SDADC_3>
	sprintf(text, "6=DADC0:%i,DADC1:%i", gain_for_configuration_index_0, gain_for_configuration_index_0);
 8002b64:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002b68:	498b      	ldr	r1, [pc, #556]	; (8002d98 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x360>)
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	a807      	add	r0, sp, #28
 8002b6e:	f00c fb3f 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002b72:	e9cd 4500 	strd	r4, r5, [sp]
 8002b76:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b7a:	225f      	movs	r2, #95	; 0x5f
 8002b7c:	2137      	movs	r1, #55	; 0x37
 8002b7e:	a807      	add	r0, sp, #28
 8002b80:	f003 fd3c 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "7=DADC2:%i,DADC3:%i", gain_for_configuration_index_1, gain_for_configuration_index_1);
 8002b84:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002b88:	4984      	ldr	r1, [pc, #528]	; (8002d9c <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x364>)
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	a807      	add	r0, sp, #28
 8002b8e:	f00c fb2f 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002b92:	e9cd 4500 	strd	r4, r5, [sp]
 8002b96:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b9a:	2269      	movs	r2, #105	; 0x69
 8002b9c:	2137      	movs	r1, #55	; 0x37
 8002b9e:	a807      	add	r0, sp, #28
 8002ba0:	f003 fd2c 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "8=DADC4:%i", gain_for_configuration_index_2);
 8002ba4:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8002ba8:	497d      	ldr	r1, [pc, #500]	; (8002da0 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x368>)
 8002baa:	a807      	add	r0, sp, #28
 8002bac:	f00c fb20 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002bb0:	e9cd 4500 	strd	r4, r5, [sp]
 8002bb4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bb8:	2273      	movs	r2, #115	; 0x73
 8002bba:	2137      	movs	r1, #55	; 0x37
 8002bbc:	a807      	add	r0, sp, #28
 8002bbe:	f003 fd1d 	bl	80065fc <ILI9341_print_text>

	/* Print gain values */
	ILI9341_print_text("Gain values from 1/2x to 32x:", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002bc2:	e9cd 4500 	strd	r4, r5, [sp]
 8002bc6:	4877      	ldr	r0, [pc, #476]	; (8002da4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x36c>)
 8002bc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bcc:	227d      	movs	r2, #125	; 0x7d
 8002bce:	2137      	movs	r1, #55	; 0x37
 8002bd0:	f003 fd14 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("0=1x,1=2x,2=4x,3=8x,4=16x,5=32x,7=0.5x", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002bd4:	e9cd 4500 	strd	r4, r5, [sp]
 8002bd8:	4873      	ldr	r0, [pc, #460]	; (8002da8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x370>)
 8002bda:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bde:	2287      	movs	r2, #135	; 0x87
 8002be0:	2137      	movs	r1, #55	; 0x37

	/* Button */
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8002be2:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("0=1x,1=2x,2=4x,3=8x,4=16x,5=32x,7=0.5x", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002be6:	f003 fd09 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8002bea:	2400      	movs	r4, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8002bec:	23dc      	movs	r3, #220	; 0xdc
 8002bee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bf2:	21c3      	movs	r1, #195	; 0xc3
 8002bf4:	2041      	movs	r0, #65	; 0x41
 8002bf6:	9500      	str	r5, [sp, #0]
 8002bf8:	f003 fbd2 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8002bfc:	23dc      	movs	r3, #220	; 0xdc
 8002bfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c02:	21c3      	movs	r1, #195	; 0xc3
 8002c04:	2041      	movs	r0, #65	; 0x41
 8002c06:	9400      	str	r4, [sp, #0]
 8002c08:	f003 fc5e 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Set analog gain now", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e9cd 5300 	strd	r5, r3, [sp]
 8002c12:	4866      	ldr	r0, [pc, #408]	; (8002dac <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x374>)
 8002c14:	4623      	mov	r3, r4
 8002c16:	22c8      	movs	r2, #200	; 0xc8
 8002c18:	2146      	movs	r1, #70	; 0x46
 8002c1a:	f003 fcef 	bl	80065fc <ILI9341_print_text>

	/* Logic for button */
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 8002c1e:	23dc      	movs	r3, #220	; 0xdc
 8002c20:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c24:	21c3      	movs	r1, #195	; 0xc3
 8002c26:	2041      	movs	r0, #65	; 0x41
 8002c28:	f004 fbc8 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want set analog gain?") == 0) {
 8002c2c:	4860      	ldr	r0, [pc, #384]	; (8002db0 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x378>)
 8002c2e:	f7ff fd83 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8002c32:	b928      	cbnz	r0, 8002c40 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x208>
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain, true);
		break;
	}

	/* Show main frame again */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8002c34:	2100      	movs	r1, #0
 8002c36:	4630      	mov	r0, r6
 8002c38:	f001 f870 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>

}
 8002c3c:	b014      	add	sp, #80	; 0x50
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
	float number_value = 0;
 8002c40:	2500      	movs	r5, #0
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 0 and 8") == 0) {
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x37c>)
	float number_value = 0;
 8002c44:	9506      	str	r5, [sp, #24]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 0 and 8") == 0) {
 8002c46:	aa06      	add	r2, sp, #24
 8002c48:	4621      	mov	r1, r4
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f002 ff6e 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d0ef      	beq.n	8002c34 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x1fc>
	if(number_value < 0)
 8002c54:	eddd 7a06 	vldr	s15, [sp, #24]
 8002c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	d52a      	bpl.n	8002cb8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x280>
	number_value = 0;
 8002c62:	9506      	str	r5, [sp, #24]
		sprintf(text, "Enter gain value for ADC0,ADC1,ADC2");
 8002c64:	4954      	ldr	r1, [pc, #336]	; (8002db8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x380>)
 8002c66:	a807      	add	r0, sp, #28
 8002c68:	f00c fae2 	bl	800f230 <strcpy>
		break;
 8002c6c:	2400      	movs	r4, #0
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, text) == 0) {
 8002c6e:	2100      	movs	r1, #0
 8002c70:	ab07      	add	r3, sp, #28
 8002c72:	aa06      	add	r2, sp, #24
 8002c74:	4608      	mov	r0, r1
 8002c76:	f002 ff59 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d0da      	beq.n	8002c34 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x1fc>
	if(number_value < 0)
 8002c7e:	eddd 7a06 	vldr	s15, [sp, #24]
 8002c82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	d452      	bmi.n	8002d32 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2fa>
	else if(number_value > 7)
 8002c8c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c98:	dc4d      	bgt.n	8002d36 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2fe>
		gain = (uint8_t) number_value;
 8002c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c9e:	edcd 7a03 	vstr	s15, [sp, #12]
 8002ca2:	f89d 200c 	ldrb.w	r2, [sp, #12]
	switch(analog_input_index){
 8002ca6:	2c08      	cmp	r4, #8
 8002ca8:	d8c4      	bhi.n	8002c34 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x1fc>
 8002caa:	e8df f004 	tbb	[pc, r4]
 8002cae:	4c46      	.short	0x4c46
 8002cb0:	5956524f 	.word	0x5956524f
 8002cb4:	605c      	.short	0x605c
 8002cb6:	63          	.byte	0x63
 8002cb7:	00          	.byte	0x00
	else if(number_value > 8)
 8002cb8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	dd06      	ble.n	8002cd4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x29c>
	number_value = 0;
 8002cc6:	9506      	str	r5, [sp, #24]
		sprintf(text, "Enter gain value for DADC4");
 8002cc8:	493c      	ldr	r1, [pc, #240]	; (8002dbc <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x384>)
 8002cca:	a807      	add	r0, sp, #28
 8002ccc:	f00c fab0 	bl	800f230 <strcpy>
		break;
 8002cd0:	2408      	movs	r4, #8
 8002cd2:	e7cc      	b.n	8002c6e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x236>
		analog_input_index = (uint8_t) number_value;
 8002cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	number_value = 0;
 8002cd8:	9506      	str	r5, [sp, #24]
		analog_input_index = (uint8_t) number_value;
 8002cda:	edcd 7a03 	vstr	s15, [sp, #12]
 8002cde:	f89d 400c 	ldrb.w	r4, [sp, #12]
	switch(analog_input_index){
 8002ce2:	2c08      	cmp	r4, #8
 8002ce4:	d8c3      	bhi.n	8002c6e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x236>
 8002ce6:	a301      	add	r3, pc, #4	; (adr r3, 8002cec <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2b4>)
 8002ce8:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8002cec:	08002c65 	.word	0x08002c65
 8002cf0:	08002d11 	.word	0x08002d11
 8002cf4:	08002d1b 	.word	0x08002d1b
 8002cf8:	08002d1f 	.word	0x08002d1f
 8002cfc:	08002d23 	.word	0x08002d23
 8002d00:	08002d27 	.word	0x08002d27
 8002d04:	08002d2b 	.word	0x08002d2b
 8002d08:	08002d2f 	.word	0x08002d2f
 8002d0c:	08002cc9 	.word	0x08002cc9
		sprintf(text, "Enter gain value for ADC3,ADC4,ADC5");
 8002d10:	492b      	ldr	r1, [pc, #172]	; (8002dc0 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x388>)
		sprintf(text, "Enter gain value for ADC6,ADC7,ADC8");
 8002d12:	a807      	add	r0, sp, #28
 8002d14:	f00c fa8c 	bl	800f230 <strcpy>
		break;
 8002d18:	e7a9      	b.n	8002c6e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x236>
		sprintf(text, "Enter gain value for ADC6,ADC7,ADC8");
 8002d1a:	492a      	ldr	r1, [pc, #168]	; (8002dc4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x38c>)
 8002d1c:	e7f9      	b.n	8002d12 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for ADC9");
 8002d1e:	492a      	ldr	r1, [pc, #168]	; (8002dc8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x390>)
 8002d20:	e7f7      	b.n	8002d12 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for ADC10");
 8002d22:	492a      	ldr	r1, [pc, #168]	; (8002dcc <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x394>)
 8002d24:	e7f5      	b.n	8002d12 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for ADC11");
 8002d26:	492a      	ldr	r1, [pc, #168]	; (8002dd0 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x398>)
 8002d28:	e7f3      	b.n	8002d12 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for DADC0,DADC1");
 8002d2a:	492a      	ldr	r1, [pc, #168]	; (8002dd4 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x39c>)
 8002d2c:	e7f1      	b.n	8002d12 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		sprintf(text, "Enter gain value for DADC2,DADC3");
 8002d2e:	492a      	ldr	r1, [pc, #168]	; (8002dd8 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x3a0>)
 8002d30:	e7ef      	b.n	8002d12 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x2da>
		gain = 0;
 8002d32:	2200      	movs	r2, #0
 8002d34:	e7b7      	b.n	8002ca6 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x26e>
		gain = 7;
 8002d36:	2207      	movs	r2, #7
 8002d38:	e7b5      	b.n	8002ca6 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x26e>
		STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_0, gain, true);
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	2100      	movs	r1, #0
		STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_2, gain, true);
 8002d3e:	4618      	mov	r0, r3
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain, true);
 8002d40:	f7fd ffd8 	bl	8000cf4 <STM32_PLC_Analog_Input_Set_Gain>
		break;
 8002d44:	e776      	b.n	8002c34 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x1fc>
		STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_1, gain, true);
 8002d46:	2301      	movs	r3, #1
 8002d48:	4619      	mov	r1, r3
 8002d4a:	e7f8      	b.n	8002d3e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x306>
		STM32_PLC_Analog_Input_Set_Gain(1, SDADC_CONF_INDEX_2, gain, true);
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	2102      	movs	r1, #2
 8002d50:	e7f5      	b.n	8002d3e <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x306>
		STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_0, gain, true);
 8002d52:	2301      	movs	r3, #1
 8002d54:	2100      	movs	r1, #0
		STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_1, gain, true);
 8002d56:	2002      	movs	r0, #2
 8002d58:	e7f2      	b.n	8002d40 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x308>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	e7fa      	b.n	8002d56 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x31e>
		STM32_PLC_Analog_Input_Set_Gain(2, SDADC_CONF_INDEX_2, gain, true);
 8002d60:	2301      	movs	r3, #1
 8002d62:	2102      	movs	r1, #2
 8002d64:	e7f7      	b.n	8002d56 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x31e>
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_0, gain, true);
 8002d66:	2301      	movs	r3, #1
 8002d68:	2100      	movs	r1, #0
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain, true);
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	e7e8      	b.n	8002d40 <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x308>
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_1, gain, true);
 8002d6e:	2301      	movs	r3, #1
 8002d70:	4619      	mov	r1, r3
 8002d72:	e7fa      	b.n	8002d6a <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x332>
		STM32_PLC_Analog_Input_Set_Gain(3, SDADC_CONF_INDEX_2, gain, true);
 8002d74:	2301      	movs	r3, #1
 8002d76:	2102      	movs	r1, #2
 8002d78:	e7f7      	b.n	8002d6a <STM32_PLC_LCD_Show_Analog_Gain_Frame+0x332>
 8002d7a:	bf00      	nop
 8002d7c:	08013a4d 	.word	0x08013a4d
 8002d80:	08012f95 	.word	0x08012f95
 8002d84:	08012faf 	.word	0x08012faf
 8002d88:	08012fc9 	.word	0x08012fc9
 8002d8c:	08012fe3 	.word	0x08012fe3
 8002d90:	08012fed 	.word	0x08012fed
 8002d94:	08012ff8 	.word	0x08012ff8
 8002d98:	08013003 	.word	0x08013003
 8002d9c:	08013017 	.word	0x08013017
 8002da0:	0801302b 	.word	0x0801302b
 8002da4:	08013036 	.word	0x08013036
 8002da8:	08013054 	.word	0x08013054
 8002dac:	0801307b 	.word	0x0801307b
 8002db0:	0801308f 	.word	0x0801308f
 8002db4:	080130ac 	.word	0x080130ac
 8002db8:	080130cf 	.word	0x080130cf
 8002dbc:	080131cd 	.word	0x080131cd
 8002dc0:	080130f3 	.word	0x080130f3
 8002dc4:	08013117 	.word	0x08013117
 8002dc8:	0801313b 	.word	0x0801313b
 8002dcc:	08013155 	.word	0x08013155
 8002dd0:	08013170 	.word	0x08013170
 8002dd4:	0801318b 	.word	0x0801318b
 8002dd8:	080131ac 	.word	0x080131ac

08002ddc <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame(uint8_t *frame_id){
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	b088      	sub	sp, #32
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002de0:	240f      	movs	r4, #15
 8002de2:	9400      	str	r4, [sp, #0]
 8002de4:	23ea      	movs	r3, #234	; 0xea
 8002de6:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8002dea:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame(uint8_t *frame_id){
 8002dec:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002dee:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set analog input calibration", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002df0:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8002df2:	f003 fad5 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8002df6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dfa:	f240 1209 	movw	r2, #265	; 0x109
 8002dfe:	211e      	movs	r1, #30
 8002e00:	2032      	movs	r0, #50	; 0x32
 8002e02:	f003 fb0f 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set analog input calibration", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e06:	e9cd 4500 	strd	r4, r5, [sp]
 8002e0a:	486f      	ldr	r0, [pc, #444]	; (8002fc8 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1ec>)
 8002e0c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e10:	220a      	movs	r2, #10
 8002e12:	2137      	movs	r1, #55	; 0x37
 8002e14:	f003 fbf2 	bl	80065fc <ILI9341_print_text>

	/* Variables for the text */
	uint16_t y = 25;

	/* Show analog inputs */
	ILI9341_print_text("0=ADC0 1=ADC1", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e18:	e9cd 4500 	strd	r4, r5, [sp]
 8002e1c:	486b      	ldr	r0, [pc, #428]	; (8002fcc <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1f0>)
 8002e1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e22:	2223      	movs	r2, #35	; 0x23
 8002e24:	2137      	movs	r1, #55	; 0x37
 8002e26:	f003 fbe9 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("2=ADC2 3=ADC3", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e2a:	e9cd 4500 	strd	r4, r5, [sp]
 8002e2e:	4868      	ldr	r0, [pc, #416]	; (8002fd0 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1f4>)
 8002e30:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e34:	222d      	movs	r2, #45	; 0x2d
 8002e36:	2137      	movs	r1, #55	; 0x37
 8002e38:	f003 fbe0 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("4=ADC4 5=ADC5", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e3c:	2237      	movs	r2, #55	; 0x37
 8002e3e:	e9cd 4500 	strd	r4, r5, [sp]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4863      	ldr	r0, [pc, #396]	; (8002fd4 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1f8>)
 8002e46:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e4a:	f003 fbd7 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("6=ADC6 7=ADC7", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e4e:	e9cd 4500 	strd	r4, r5, [sp]
 8002e52:	4861      	ldr	r0, [pc, #388]	; (8002fd8 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1fc>)
 8002e54:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e58:	2241      	movs	r2, #65	; 0x41
 8002e5a:	2137      	movs	r1, #55	; 0x37
 8002e5c:	f003 fbce 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("8=ADC8 9=ADC9", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e60:	e9cd 4500 	strd	r4, r5, [sp]
 8002e64:	485d      	ldr	r0, [pc, #372]	; (8002fdc <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x200>)
 8002e66:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e6a:	224b      	movs	r2, #75	; 0x4b
 8002e6c:	2137      	movs	r1, #55	; 0x37
 8002e6e:	f003 fbc5 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("10=ADC10 11=ADC11", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e72:	e9cd 4500 	strd	r4, r5, [sp]
 8002e76:	485a      	ldr	r0, [pc, #360]	; (8002fe0 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x204>)
 8002e78:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e7c:	2255      	movs	r2, #85	; 0x55
 8002e7e:	2137      	movs	r1, #55	; 0x37
 8002e80:	f003 fbbc 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("12=DADC0 13=DADC1", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e84:	e9cd 4500 	strd	r4, r5, [sp]
 8002e88:	4856      	ldr	r0, [pc, #344]	; (8002fe4 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x208>)
 8002e8a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e8e:	225f      	movs	r2, #95	; 0x5f
 8002e90:	2137      	movs	r1, #55	; 0x37
 8002e92:	f003 fbb3 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("14=DADC2 15=DADC3", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002e96:	e9cd 4500 	strd	r4, r5, [sp]
 8002e9a:	4853      	ldr	r0, [pc, #332]	; (8002fe8 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x20c>)
 8002e9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ea0:	2269      	movs	r2, #105	; 0x69
 8002ea2:	2137      	movs	r1, #55	; 0x37
 8002ea4:	f003 fbaa 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("15=DADC4 16=DADC5", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002ea8:	e9cd 4500 	strd	r4, r5, [sp]
 8002eac:	484f      	ldr	r0, [pc, #316]	; (8002fec <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x210>)
 8002eae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002eb2:	2273      	movs	r2, #115	; 0x73
 8002eb4:	2137      	movs	r1, #55	; 0x37
 8002eb6:	f003 fba1 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("At 0mA=0 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002eba:	e9cd 4500 	strd	r4, r5, [sp]
 8002ebe:	484c      	ldr	r0, [pc, #304]	; (8002ff0 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x214>)
 8002ec0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ec4:	227d      	movs	r2, #125	; 0x7d
 8002ec6:	2137      	movs	r1, #55	; 0x37
 8002ec8:	f003 fb98 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("At 4mA=12710 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002ecc:	e9cd 4500 	strd	r4, r5, [sp]
 8002ed0:	4848      	ldr	r0, [pc, #288]	; (8002ff4 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x218>)
 8002ed2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ed6:	2287      	movs	r2, #135	; 0x87
 8002ed8:	2137      	movs	r1, #55	; 0x37
 8002eda:	f003 fb8f 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("At 20mA=63549 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002ede:	e9cd 4500 	strd	r4, r5, [sp]
 8002ee2:	4845      	ldr	r0, [pc, #276]	; (8002ff8 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x21c>)
 8002ee4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ee8:	2291      	movs	r2, #145	; 0x91
 8002eea:	2137      	movs	r1, #55	; 0x37
 8002eec:	f003 fb86 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("At 20.625mA=65535 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002ef0:	e9cd 4500 	strd	r4, r5, [sp]
 8002ef4:	4841      	ldr	r0, [pc, #260]	; (8002ffc <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x220>)
 8002ef6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002efa:	229b      	movs	r2, #155	; 0x9b
 8002efc:	2137      	movs	r1, #55	; 0x37

	/* Button */
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8002efe:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("At 20.625mA=65535 Raw value", 55, y += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002f02:	f003 fb7b 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8002f06:	2400      	movs	r4, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8002f08:	23dc      	movs	r3, #220	; 0xdc
 8002f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0e:	21c3      	movs	r1, #195	; 0xc3
 8002f10:	2041      	movs	r0, #65	; 0x41
 8002f12:	9500      	str	r5, [sp, #0]
 8002f14:	f003 fa44 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8002f18:	23dc      	movs	r3, #220	; 0xdc
 8002f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1e:	21c3      	movs	r1, #195	; 0xc3
 8002f20:	2041      	movs	r0, #65	; 0x41
 8002f22:	9400      	str	r4, [sp, #0]
 8002f24:	f003 fad0 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Set calibration now", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e9cd 5300 	strd	r5, r3, [sp]
 8002f2e:	4834      	ldr	r0, [pc, #208]	; (8003000 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x224>)
 8002f30:	4623      	mov	r3, r4
 8002f32:	22c8      	movs	r2, #200	; 0xc8
 8002f34:	2146      	movs	r1, #70	; 0x46
 8002f36:	f003 fb61 	bl	80065fc <ILI9341_print_text>

	/* Logic for button */
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 8002f3a:	23dc      	movs	r3, #220	; 0xdc
 8002f3c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f40:	21c3      	movs	r1, #195	; 0xc3
 8002f42:	2041      	movs	r0, #65	; 0x41
 8002f44:	f004 fa3a 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want set analog gain?") == 0) {
 8002f48:	482e      	ldr	r0, [pc, #184]	; (8003004 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x228>)
 8002f4a:	f7ff fbf5 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8002f4e:	b928      	cbnz	r0, 8002f5c <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x180>

	/* Apply calibration */
	STM32_PLC_Analog_Input_Set_Calibration(input_index, scalar, bias, true);

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8002f50:	2100      	movs	r1, #0
 8002f52:	4630      	mov	r0, r6
 8002f54:	f000 fee2 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>

}
 8002f58:	b008      	add	sp, #32
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter analog input 0 to 16") == 0) {
 8002f5c:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x22c>)
 8002f5e:	aa05      	add	r2, sp, #20
 8002f60:	4621      	mov	r1, r4
 8002f62:	4620      	mov	r0, r4
 8002f64:	f002 fde2 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d0f1      	beq.n	8002f50 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x174>
	if(number_value < 0)
 8002f6c:	eddd 7a05 	vldr	s15, [sp, #20]
 8002f70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	d40d      	bmi.n	8002f96 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x1ba>
	else if(number_value > 16)
 8002f7a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		input_index = (uint8_t) number_value;
 8002f86:	bfd7      	itett	le
 8002f88:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		input_index = 16;
 8002f8c:	2410      	movgt	r4, #16
		input_index = (uint8_t) number_value;
 8002f8e:	edcd 7a03 	vstrle	s15, [sp, #12]
 8002f92:	f89d 400c 	ldrble.w	r4, [sp, #12]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &scalar, "Enter scalar value") == 0) {
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x230>)
 8002f98:	2101      	movs	r1, #1
 8002f9a:	aa06      	add	r2, sp, #24
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	f002 fdc5 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d0d4      	beq.n	8002f50 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x174>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &bias, "Enter bias value") == 0) {
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x234>)
 8002faa:	aa07      	add	r2, sp, #28
 8002fac:	4608      	mov	r0, r1
 8002fae:	f002 fdbd 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d0cc      	beq.n	8002f50 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x174>
	STM32_PLC_Analog_Input_Set_Calibration(input_index, scalar, bias, true);
 8002fb6:	eddd 0a07 	vldr	s1, [sp, #28]
 8002fba:	ed9d 0a06 	vldr	s0, [sp, #24]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7fe f853 	bl	800106c <STM32_PLC_Analog_Input_Set_Calibration>
 8002fc6:	e7c3      	b.n	8002f50 <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame+0x174>
 8002fc8:	08013a75 	.word	0x08013a75
 8002fcc:	080131e8 	.word	0x080131e8
 8002fd0:	080131f6 	.word	0x080131f6
 8002fd4:	08013204 	.word	0x08013204
 8002fd8:	08013212 	.word	0x08013212
 8002fdc:	08013220 	.word	0x08013220
 8002fe0:	0801322e 	.word	0x0801322e
 8002fe4:	08013240 	.word	0x08013240
 8002fe8:	08013252 	.word	0x08013252
 8002fec:	08013264 	.word	0x08013264
 8002ff0:	08013276 	.word	0x08013276
 8002ff4:	08013289 	.word	0x08013289
 8002ff8:	080132a0 	.word	0x080132a0
 8002ffc:	080132b8 	.word	0x080132b8
 8003000:	080132d4 	.word	0x080132d4
 8003004:	0801308f 	.word	0x0801308f
 8003008:	080132e8 	.word	0x080132e8
 800300c:	08013303 	.word	0x08013303
 8003010:	08013316 	.word	0x08013316

08003014 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame>:
#include "../../Functions.h"
#include <math.h>

static void add_spaces(uint8_t length, char text[]);

void STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(uint8_t *frame_id) {
 8003014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003018:	ed2d 8b02 	vpush	{d8}
 800301c:	b095      	sub	sp, #84	; 0x54
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800301e:	240f      	movs	r4, #15
 8003020:	9400      	str	r4, [sp, #0]
 8003022:	23ea      	movs	r3, #234	; 0xea
 8003024:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8003028:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(uint8_t *frame_id) {
 800302a:	4605      	mov	r5, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800302c:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("ADC0 to ADC2 to DAC0 to DAC2", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800302e:	2601      	movs	r6, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003030:	f003 f9b6 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003034:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003038:	f240 1209 	movw	r2, #265	; 0x109
 800303c:	211e      	movs	r1, #30
 800303e:	2032      	movs	r0, #50	; 0x32
 8003040:	f003 f9f0 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("ADC0 to ADC2 to DAC0 to DAC2", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003044:	e9cd 4600 	strd	r4, r6, [sp]
 8003048:	485b      	ldr	r0, [pc, #364]	; (80031b8 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1a4>)

	while(1) {
		int16_t adc[3];
		/* Control the DAC */
		for(uint8_t i = 0; i < 3; i++){
			float dac = 4095.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i));
 800304a:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 80031bc <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1a8>
			STM32_PLC_Analog_Output_Set(i, dac);
		}

		/* ADC 0 to ADC 2 */
		char text[60];
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", adc[0], adc[1], adc[2]);
 800304e:	4f5c      	ldr	r7, [pc, #368]	; (80031c0 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1ac>)
	ILI9341_print_text("ADC0 to ADC2 to DAC0 to DAC2", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003050:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003054:	220a      	movs	r2, #10
 8003056:	2137      	movs	r1, #55	; 0x37
 8003058:	f003 fad0 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Give ADC0 to ADC2 current", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800305c:	e9cd 4600 	strd	r4, r6, [sp]
 8003060:	4858      	ldr	r0, [pc, #352]	; (80031c4 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1b0>)
 8003062:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003066:	2223      	movs	r2, #35	; 0x23
 8003068:	2137      	movs	r1, #55	; 0x37
 800306a:	f003 fac7 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("and DAC0 to DAC2 will give", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 800306e:	e9cd 4600 	strd	r4, r6, [sp]
 8003072:	4855      	ldr	r0, [pc, #340]	; (80031c8 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1b4>)
 8003074:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003078:	222d      	movs	r2, #45	; 0x2d
 800307a:	2137      	movs	r1, #55	; 0x37
 800307c:	f003 fabe 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("out 0-20.625mA current. 4095 = 20.625mA", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8003080:	2237      	movs	r2, #55	; 0x37
 8003082:	e9cd 4600 	strd	r4, r6, [sp]
 8003086:	4611      	mov	r1, r2
 8003088:	4850      	ldr	r0, [pc, #320]	; (80031cc <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1b8>)
 800308a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800308e:	f003 fab5 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Give power supply 24V. Don't forget GND!", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8003092:	e9cd 4600 	strd	r4, r6, [sp]
 8003096:	484e      	ldr	r0, [pc, #312]	; (80031d0 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1bc>)
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8003098:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text("Give power supply 24V. Don't forget GND!", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 800309c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80030a0:	2241      	movs	r2, #65	; 0x41
 80030a2:	2137      	movs	r1, #55	; 0x37
 80030a4:	f003 faaa 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80030a8:	2400      	movs	r4, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80030aa:	9600      	str	r6, [sp, #0]
 80030ac:	23e6      	movs	r3, #230	; 0xe6
 80030ae:	f240 1211 	movw	r2, #273	; 0x111
 80030b2:	21cd      	movs	r1, #205	; 0xcd
 80030b4:	2055      	movs	r0, #85	; 0x55
 80030b6:	f003 f973 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80030ba:	23e6      	movs	r3, #230	; 0xe6
 80030bc:	f240 1211 	movw	r2, #273	; 0x111
 80030c0:	21cd      	movs	r1, #205	; 0xcd
 80030c2:	2055      	movs	r0, #85	; 0x55
 80030c4:	9400      	str	r4, [sp, #0]
 80030c6:	f003 f9ff 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 80030ca:	2302      	movs	r3, #2
 80030cc:	e9cd 6300 	strd	r6, r3, [sp]
 80030d0:	4840      	ldr	r0, [pc, #256]	; (80031d4 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1c0>)
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);

		/* Logic for button */
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 80030d2:	4e41      	ldr	r6, [pc, #260]	; (80031d8 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0x1c4>)
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 80030d4:	4623      	mov	r3, r4
 80030d6:	22d2      	movs	r2, #210	; 0xd2
 80030d8:	215f      	movs	r1, #95	; 0x5f
 80030da:	f003 fa8f 	bl	80065fc <ILI9341_print_text>
		for(uint8_t i = 0; i < 3; i++){
 80030de:	f10d 090c 	add.w	r9, sp, #12
void STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(uint8_t *frame_id) {
 80030e2:	2400      	movs	r4, #0
 80030e4:	fa5f f884 	uxtb.w	r8, r4
			float dac = 4095.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i));
 80030e8:	4640      	mov	r0, r8
 80030ea:	f7fd ff2d 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 80030ee:	ee07 0a90 	vmov	s15, r0
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
			STM32_PLC_Analog_Output_Set(i, dac);
 80030f6:	4640      	mov	r0, r8
			float dac = 4095.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i));
 80030f8:	ee67 7a88 	vmul.f32	s15, s15, s16
		for(uint8_t i = 0; i < 3; i++){
 80030fc:	3401      	adds	r4, #1
			adc[i] = dac;
 80030fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
			STM32_PLC_Analog_Output_Set(i, dac);
 8003102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			adc[i] = dac;
 8003106:	ee17 3a10 	vmov	r3, s14
 800310a:	f829 3b02 	strh.w	r3, [r9], #2
			STM32_PLC_Analog_Output_Set(i, dac);
 800310e:	ee17 3a90 	vmov	r3, s15
 8003112:	b299      	uxth	r1, r3
 8003114:	f7fd ffbc 	bl	8001090 <STM32_PLC_Analog_Output_Set>
		for(uint8_t i = 0; i < 3; i++){
 8003118:	2c03      	cmp	r4, #3
 800311a:	d1e3      	bne.n	80030e4 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0xd0>
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", adc[0], adc[1], adc[2]);
 800311c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8003120:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4639      	mov	r1, r7
 8003128:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800312c:	a805      	add	r0, sp, #20
 800312e:	f00c f85f 	bl	800f1f0 <siprintf>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static void add_spaces(uint8_t length, char text[]){
	/* This is for removing old values from LCD */
	for(uint8_t i = strlen(text); i < length; i++)
 8003132:	a805      	add	r0, sp, #20
 8003134:	f7fd f84c 	bl	80001d0 <strlen>
 8003138:	b2c3      	uxtb	r3, r0
		text[i] = ' ';
 800313a:	2b2b      	cmp	r3, #43	; 0x2b
 800313c:	f1c3 022b 	rsb	r2, r3, #43	; 0x2b
 8003140:	ab05      	add	r3, sp, #20
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f04f 0120 	mov.w	r1, #32
 8003148:	bf88      	it	hi
 800314a:	2200      	movhi	r2, #0
 800314c:	4418      	add	r0, r3
 800314e:	f00b fbdd 	bl	800e90c <memset>
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8003152:	230f      	movs	r3, #15
 8003154:	2201      	movs	r2, #1
 8003156:	e9cd 3200 	strd	r3, r2, [sp]
	text[length] = '\0'; /* C-String termination */
 800315a:	2400      	movs	r4, #0
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800315c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003160:	224b      	movs	r2, #75	; 0x4b
 8003162:	2137      	movs	r1, #55	; 0x37
 8003164:	a805      	add	r0, sp, #20
	text[length] = '\0'; /* C-String termination */
 8003166:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800316a:	f003 fa47 	bl	80065fc <ILI9341_print_text>
		if (TSC2046_isPressed()) {
 800316e:	f003 fc4b 	bl	8006a08 <TSC2046_isPressed>
 8003172:	2800      	cmp	r0, #0
 8003174:	d0b3      	beq.n	80030de <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0xca>
			TSC2046_GetTouchData();
 8003176:	f003 fbdf 	bl	8006938 <TSC2046_GetTouchData>
			if (X >= 85 && X <= 273 && Y >= 205 && Y <= 230) {
 800317a:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800317c:	3b55      	subs	r3, #85	; 0x55
 800317e:	b29b      	uxth	r3, r3
 8003180:	2bbc      	cmp	r3, #188	; 0xbc
 8003182:	d8ac      	bhi.n	80030de <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0xca>
 8003184:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8003186:	3bcd      	subs	r3, #205	; 0xcd
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b19      	cmp	r3, #25
 800318c:	d8a7      	bhi.n	80030de <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame+0xca>
				ILI9341_hollow_rect(85, 205, 273, 230, COLOR_MAGENTA);
 800318e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f240 1211 	movw	r2, #273	; 0x111
 8003198:	23e6      	movs	r3, #230	; 0xe6
 800319a:	21cd      	movs	r1, #205	; 0xcd
 800319c:	2055      	movs	r0, #85	; 0x55
 800319e:	f003 f993 	bl	80064c8 <ILI9341_hollow_rect>
	STM32_PLC_Analog_Output_Reset();
 80031a2:	f7fd ff91 	bl	80010c8 <STM32_PLC_Analog_Output_Reset>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80031a6:	4621      	mov	r1, r4
 80031a8:	4628      	mov	r0, r5
}
 80031aa:	b015      	add	sp, #84	; 0x54
 80031ac:	ecbd 8b02 	vpop	{d8}
 80031b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80031b4:	f000 bdb2 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
 80031b8:	08013327 	.word	0x08013327
 80031bc:	3d7ff100 	.word	0x3d7ff100
 80031c0:	080133d9 	.word	0x080133d9
 80031c4:	08013344 	.word	0x08013344
 80031c8:	0801335e 	.word	0x0801335e
 80031cc:	08013379 	.word	0x08013379
 80031d0:	080133a1 	.word	0x080133a1
 80031d4:	080133ca 	.word	0x080133ca
 80031d8:	20002728 	.word	0x20002728

080031dc <add_spaces.constprop.0>:

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static void add_spaces(uint8_t length, char text[]){
 80031dc:	b510      	push	{r4, lr}
 80031de:	4604      	mov	r4, r0
	/* This is for removing old values from LCD */
	for(uint8_t i = strlen(text); i < length; i++)
 80031e0:	f7fc fff6 	bl	80001d0 <strlen>
 80031e4:	b2c0      	uxtb	r0, r0
		text[i] = ' ';
 80031e6:	282b      	cmp	r0, #43	; 0x2b
 80031e8:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f04f 0120 	mov.w	r1, #32
 80031f2:	bf88      	it	hi
 80031f4:	2200      	movhi	r2, #0
 80031f6:	4420      	add	r0, r4
 80031f8:	f00b fb88 	bl	800e90c <memset>
	text[length] = '\0'; /* C-String termination */
 80031fc:	2300      	movs	r3, #0
 80031fe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 8003202:	bd10      	pop	{r4, pc}

08003204 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame>:
void STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(J1939 *j1939, uint8_t *frame_id) {
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	ed2d 8b04 	vpush	{d8-d9}
 800320a:	b09b      	sub	sp, #108	; 0x6c
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800320c:	240f      	movs	r4, #15
 800320e:	9400      	str	r4, [sp, #0]
 8003210:	23ea      	movs	r3, #234	; 0xea
 8003212:	f44f 729d 	mov.w	r2, #314	; 0x13a
void STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(J1939 *j1939, uint8_t *frame_id) {
 8003216:	4607      	mov	r7, r0
 8003218:	460e      	mov	r6, r1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800321a:	2033      	movs	r0, #51	; 0x33
 800321c:	2106      	movs	r1, #6
	ILI9341_print_text("ADC0 to ADC11 to Auxiliary Valve 0 to 11", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800321e:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003220:	f003 f8be 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003224:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003228:	f240 1209 	movw	r2, #265	; 0x109
 800322c:	211e      	movs	r1, #30
 800322e:	2032      	movs	r0, #50	; 0x32
 8003230:	f003 f8f8 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("ADC0 to ADC11 to Auxiliary Valve 0 to 11", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003234:	e9cd 4500 	strd	r4, r5, [sp]
 8003238:	488d      	ldr	r0, [pc, #564]	; (8003470 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x26c>)
			float flow = 500.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) - 250.0f;
 800323a:	ed9f 8a8e 	vldr	s16, [pc, #568]	; 8003474 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x270>
	ILI9341_print_text("ADC0 to ADC11 to Auxiliary Valve 0 to 11", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800323e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003242:	220a      	movs	r2, #10
 8003244:	2137      	movs	r1, #55	; 0x37
 8003246:	f003 f9d9 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Give ADC0 to ADC11 current", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800324a:	e9cd 4500 	strd	r4, r5, [sp]
 800324e:	488a      	ldr	r0, [pc, #552]	; (8003478 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x274>)
 8003250:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003254:	2223      	movs	r2, #35	; 0x23
 8003256:	2137      	movs	r1, #55	; 0x37
 8003258:	f003 f9d0 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("and CAN will send out SAE J1939", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 800325c:	e9cd 4500 	strd	r4, r5, [sp]
 8003260:	4886      	ldr	r0, [pc, #536]	; (800347c <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x278>)
 8003262:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003266:	222d      	movs	r2, #45	; 0x2d
 8003268:	2137      	movs	r1, #55	; 0x37
 800326a:	f003 f9c7 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("auxiliary valve command 0 to 11", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 800326e:	2237      	movs	r2, #55	; 0x37
 8003270:	e9cd 4500 	strd	r4, r5, [sp]
 8003274:	4611      	mov	r1, r2
 8003276:	4882      	ldr	r0, [pc, #520]	; (8003480 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x27c>)
 8003278:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800327c:	f003 f9be 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("-250 to -1 = Retract valve state", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8003280:	e9cd 4500 	strd	r4, r5, [sp]
 8003284:	487f      	ldr	r0, [pc, #508]	; (8003484 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x280>)
 8003286:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800328a:	2241      	movs	r2, #65	; 0x41
 800328c:	2137      	movs	r1, #55	; 0x37
 800328e:	f003 f9b5 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("0 = Neutral/initial valve state", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8003292:	e9cd 4500 	strd	r4, r5, [sp]
 8003296:	487c      	ldr	r0, [pc, #496]	; (8003488 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x284>)
 8003298:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800329c:	224b      	movs	r2, #75	; 0x4b
 800329e:	2137      	movs	r1, #55	; 0x37
 80032a0:	f003 f9ac 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("1 to 250 = Extend valve state", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80032a4:	e9cd 4500 	strd	r4, r5, [sp]
 80032a8:	4878      	ldr	r0, [pc, #480]	; (800348c <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x288>)
 80032aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032ae:	2255      	movs	r2, #85	; 0x55
 80032b0:	2137      	movs	r1, #55	; 0x37
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80032b2:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("1 to 250 = Extend valve state", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80032b6:	f003 f9a1 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80032ba:	2400      	movs	r4, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80032bc:	23e6      	movs	r3, #230	; 0xe6
 80032be:	f240 1211 	movw	r2, #273	; 0x111
 80032c2:	21cd      	movs	r1, #205	; 0xcd
 80032c4:	2055      	movs	r0, #85	; 0x55
 80032c6:	9500      	str	r5, [sp, #0]
 80032c8:	f003 f86a 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80032cc:	23e6      	movs	r3, #230	; 0xe6
 80032ce:	f240 1211 	movw	r2, #273	; 0x111
 80032d2:	21cd      	movs	r1, #205	; 0xcd
 80032d4:	2055      	movs	r0, #85	; 0x55
 80032d6:	9400      	str	r4, [sp, #0]
 80032d8:	f003 f8f6 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 80032dc:	2302      	movs	r3, #2
 80032de:	e9cd 5300 	strd	r5, r3, [sp]
 80032e2:	486b      	ldr	r0, [pc, #428]	; (8003490 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x28c>)
 80032e4:	4623      	mov	r3, r4
 80032e6:	22d2      	movs	r2, #210	; 0xd2
 80032e8:	215f      	movs	r1, #95	; 0x5f
 80032ea:	f003 f987 	bl	80065fc <ILI9341_print_text>
			float flow = 500.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) - 250.0f;
 80032ee:	eddf 8a69 	vldr	s17, [pc, #420]	; 8003494 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x290>
 80032f2:	ad05      	add	r5, sp, #20
void STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(J1939 *j1939, uint8_t *frame_id) {
 80032f4:	2400      	movs	r4, #0
			if(flow > 1)
 80032f6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80032fa:	b2e1      	uxtb	r1, r4
			float flow = 500.0f / 65535.0f * ((float)STM32_PLC_Analog_Input_ADC_Get_Raw(i)) - 250.0f;
 80032fc:	4608      	mov	r0, r1
 80032fe:	9103      	str	r1, [sp, #12]
 8003300:	f7fd fe22 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
 8003304:	ee07 0a90 	vmov	s15, r0
 8003308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800330c:	eef0 7a68 	vmov.f32	s15, s17
 8003310:	eee7 7a08 	vfma.f32	s15, s14, s16
			if(flow > 1)
 8003314:	9903      	ldr	r1, [sp, #12]
			adc[i] = flow;
 8003316:	eebd 7ae7 	vcvt.s32.f32	s14, s15
			if(flow > 1)
 800331a:	eef4 7ac9 	vcmpe.f32	s15, s18
			adc[i] = flow;
 800331e:	ee17 3a10 	vmov	r3, s14
			if(flow > 1)
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			adc[i] = flow;
 8003326:	f825 3b02 	strh.w	r3, [r5], #2
			if(flow > 1)
 800332a:	f300 809e 	bgt.w	800346a <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x266>
			else if(flow < -1)
 800332e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
				valve_state = 0;
 8003332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	bf4c      	ite	mi
 800333c:	2302      	movmi	r3, #2
 800333e:	2300      	movpl	r3, #0
			uint8_t standard_flow = fabsf(flow);
 8003340:	eef0 7ae7 	vabs.f32	s15, s15
 8003344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			ISO_11783_Send_Auxiliary_Valve_Command(j1939, i, standard_flow, FAIL_SAFE_MODE_BLOCKED, valve_state);
 8003348:	9300      	str	r3, [sp, #0]
			uint8_t standard_flow = fabsf(flow);
 800334a:	edcd 7a03 	vstr	s15, [sp, #12]
			ISO_11783_Send_Auxiliary_Valve_Command(j1939, i, standard_flow, FAIL_SAFE_MODE_BLOCKED, valve_state);
 800334e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003352:	2300      	movs	r3, #0
 8003354:	4638      	mov	r0, r7
		for(uint8_t i = 0; i < 12; i++){
 8003356:	3401      	adds	r4, #1
			ISO_11783_Send_Auxiliary_Valve_Command(j1939, i, standard_flow, FAIL_SAFE_MODE_BLOCKED, valve_state);
 8003358:	f7ff f82f 	bl	80023ba <ISO_11783_Send_Auxiliary_Valve_Command>
		for(uint8_t i = 0; i < 12; i++){
 800335c:	2c0c      	cmp	r4, #12
 800335e:	d1cc      	bne.n	80032fa <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0xf6>
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", adc[0], adc[1], adc[2]);
 8003360:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8003364:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8003368:	494b      	ldr	r1, [pc, #300]	; (8003498 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x294>)
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	a80b      	add	r0, sp, #44	; 0x2c
 800336e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8003372:	f00b ff3d 	bl	800f1f0 <siprintf>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8003376:	240f      	movs	r4, #15
 8003378:	2501      	movs	r5, #1
		add_spaces(43, text);
 800337a:	a80b      	add	r0, sp, #44	; 0x2c
 800337c:	f7ff ff2e 	bl	80031dc <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8003380:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003384:	225f      	movs	r2, #95	; 0x5f
 8003386:	2137      	movs	r1, #55	; 0x37
 8003388:	a80b      	add	r0, sp, #44	; 0x2c
 800338a:	e9cd 4500 	strd	r4, r5, [sp]
 800338e:	f003 f935 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "ADC3:%i ADC4:%i ADC5:%i", adc[3], adc[4], adc[5]);
 8003392:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8003396:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 800339a:	4940      	ldr	r1, [pc, #256]	; (800349c <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x298>)
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	a80b      	add	r0, sp, #44	; 0x2c
 80033a0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80033a4:	f00b ff24 	bl	800f1f0 <siprintf>
		add_spaces(43, text);
 80033a8:	a80b      	add	r0, sp, #44	; 0x2c
 80033aa:	f7ff ff17 	bl	80031dc <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80033ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033b2:	2269      	movs	r2, #105	; 0x69
 80033b4:	2137      	movs	r1, #55	; 0x37
 80033b6:	a80b      	add	r0, sp, #44	; 0x2c
 80033b8:	e9cd 4500 	strd	r4, r5, [sp]
 80033bc:	f003 f91e 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "ADC6:%i ADC7:%i ADC8:%i", adc[6], adc[7], adc[8]);
 80033c0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80033c4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80033c8:	4935      	ldr	r1, [pc, #212]	; (80034a0 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x29c>)
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	a80b      	add	r0, sp, #44	; 0x2c
 80033ce:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80033d2:	f00b ff0d 	bl	800f1f0 <siprintf>
		add_spaces(43, text);
 80033d6:	a80b      	add	r0, sp, #44	; 0x2c
 80033d8:	f7ff ff00 	bl	80031dc <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 80033dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033e0:	2273      	movs	r2, #115	; 0x73
 80033e2:	2137      	movs	r1, #55	; 0x37
 80033e4:	a80b      	add	r0, sp, #44	; 0x2c
 80033e6:	e9cd 4500 	strd	r4, r5, [sp]
 80033ea:	f003 f907 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "ADC9:%i ADC10:%i ADC11:%i", adc[9], adc[10], adc[11]);
 80033ee:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80033f2:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 80033f6:	492b      	ldr	r1, [pc, #172]	; (80034a4 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x2a0>)
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	a80b      	add	r0, sp, #44	; 0x2c
 80033fc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8003400:	f00b fef6 	bl	800f1f0 <siprintf>
		add_spaces(43, text);
 8003404:	a80b      	add	r0, sp, #44	; 0x2c
 8003406:	f7ff fee9 	bl	80031dc <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 800340a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800340e:	227d      	movs	r2, #125	; 0x7d
 8003410:	2137      	movs	r1, #55	; 0x37
 8003412:	a80b      	add	r0, sp, #44	; 0x2c
 8003414:	e9cd 4500 	strd	r4, r5, [sp]
 8003418:	f003 f8f0 	bl	80065fc <ILI9341_print_text>
		if (TSC2046_isPressed()) {
 800341c:	f003 faf4 	bl	8006a08 <TSC2046_isPressed>
 8003420:	2800      	cmp	r0, #0
 8003422:	f43f af64 	beq.w	80032ee <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0xea>
			TSC2046_GetTouchData();
 8003426:	f003 fa87 	bl	8006938 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 800342a:	4a1f      	ldr	r2, [pc, #124]	; (80034a8 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x2a4>)
			if (X >= 85 && X <= 273 && Y >= 205 && Y <= 230) {
 800342c:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800342e:	3b55      	subs	r3, #85	; 0x55
 8003430:	b29b      	uxth	r3, r3
 8003432:	2bbc      	cmp	r3, #188	; 0xbc
 8003434:	f63f af5b 	bhi.w	80032ee <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0xea>
 8003438:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 800343a:	3bcd      	subs	r3, #205	; 0xcd
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b19      	cmp	r3, #25
 8003440:	f63f af55 	bhi.w	80032ee <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0xea>
				ILI9341_hollow_rect(85, 205, 273, 230, COLOR_MAGENTA);
 8003444:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	f240 1211 	movw	r2, #273	; 0x111
 800344e:	23e6      	movs	r3, #230	; 0xe6
 8003450:	21cd      	movs	r1, #205	; 0xcd
 8003452:	2055      	movs	r0, #85	; 0x55
 8003454:	f003 f838 	bl	80064c8 <ILI9341_hollow_rect>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8003458:	2100      	movs	r1, #0
 800345a:	4630      	mov	r0, r6
}
 800345c:	b01b      	add	sp, #108	; 0x6c
 800345e:	ecbd 8b04 	vpop	{d8-d9}
 8003462:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8003466:	f000 bc59 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
				valve_state = VALVE_STATE_EXTEND;
 800346a:	2301      	movs	r3, #1
 800346c:	e768      	b.n	8003340 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame+0x13c>
 800346e:	bf00      	nop
 8003470:	080133f1 	.word	0x080133f1
 8003474:	3bfa00fa 	.word	0x3bfa00fa
 8003478:	0801341a 	.word	0x0801341a
 800347c:	08013435 	.word	0x08013435
 8003480:	08013455 	.word	0x08013455
 8003484:	08013475 	.word	0x08013475
 8003488:	08013496 	.word	0x08013496
 800348c:	080134b6 	.word	0x080134b6
 8003490:	080133ca 	.word	0x080133ca
 8003494:	c37a0000 	.word	0xc37a0000
 8003498:	080133d9 	.word	0x080133d9
 800349c:	080134d4 	.word	0x080134d4
 80034a0:	080134ec 	.word	0x080134ec
 80034a4:	08013504 	.word	0x08013504
 80034a8:	20002728 	.word	0x20002728

080034ac <add_spaces.constprop.0>:

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static void add_spaces(uint8_t length, char text[]){
 80034ac:	b510      	push	{r4, lr}
 80034ae:	4604      	mov	r4, r0
	/* This is for removing old values from LCD */
	for(uint8_t i = strlen(text); i < length; i++)
 80034b0:	f7fc fe8e 	bl	80001d0 <strlen>
 80034b4:	b2c0      	uxtb	r0, r0
		text[i] = ' ';
 80034b6:	282b      	cmp	r0, #43	; 0x2b
 80034b8:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f04f 0120 	mov.w	r1, #32
 80034c2:	bf88      	it	hi
 80034c4:	2200      	movhi	r2, #0
 80034c6:	4420      	add	r0, r4
 80034c8:	f00b fa20 	bl	800e90c <memset>
	text[length] = '\0'; /* C-String termination */
 80034cc:	2300      	movs	r3, #0
 80034ce:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 80034d2:	bd10      	pop	{r4, pc}

080034d4 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame>:
void STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(uint8_t *frame_id) {
 80034d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d8:	b096      	sub	sp, #88	; 0x58
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80034da:	240f      	movs	r4, #15
 80034dc:	9400      	str	r4, [sp, #0]
 80034de:	23ea      	movs	r3, #234	; 0xea
 80034e0:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80034e4:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(uint8_t *frame_id) {
 80034e6:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80034e8:	2033      	movs	r0, #51	; 0x33
	ILI9341_print_text("ADC0 to ADC7 to PWM0 to PWM7", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80034ea:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80034ec:	f002 ff58 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80034f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034f4:	f240 1209 	movw	r2, #265	; 0x109
 80034f8:	211e      	movs	r1, #30
 80034fa:	2032      	movs	r0, #50	; 0x32
 80034fc:	f002 ff92 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("ADC0 to ADC7 to PWM0 to PWM7", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003500:	e9cd 4500 	strd	r4, r5, [sp]
 8003504:	486b      	ldr	r0, [pc, #428]	; (80036b4 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1e0>)
 8003506:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800350a:	220a      	movs	r2, #10
 800350c:	2137      	movs	r1, #55	; 0x37
 800350e:	f003 f875 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Give ADC0 to ADC7 current", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8003512:	e9cd 4500 	strd	r4, r5, [sp]
 8003516:	4868      	ldr	r0, [pc, #416]	; (80036b8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1e4>)
 8003518:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800351c:	2223      	movs	r2, #35	; 0x23
 800351e:	2137      	movs	r1, #55	; 0x37
 8003520:	f003 f86c 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("and PWM0 to PWM8 will open drain", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8003524:	e9cd 4500 	strd	r4, r5, [sp]
 8003528:	4864      	ldr	r0, [pc, #400]	; (80036bc <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1e8>)
 800352a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800352e:	222d      	movs	r2, #45	; 0x2d
 8003530:	2137      	movs	r1, #55	; 0x37
 8003532:	f003 f863 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("the PWM inputs for 0 to 2.2A", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8003536:	2237      	movs	r2, #55	; 0x37
 8003538:	e9cd 4500 	strd	r4, r5, [sp]
 800353c:	4611      	mov	r1, r2
 800353e:	4860      	ldr	r0, [pc, #384]	; (80036c0 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1ec>)
 8003540:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003544:	f003 f85a 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("65535 = 100% PWM", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8003548:	e9cd 4500 	strd	r4, r5, [sp]
 800354c:	485d      	ldr	r0, [pc, #372]	; (80036c4 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1f0>)
 800354e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003552:	2241      	movs	r2, #65	; 0x41
 8003554:	2137      	movs	r1, #55	; 0x37
 8003556:	f003 f851 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("0 = 0% PWM", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800355a:	e9cd 4500 	strd	r4, r5, [sp]
 800355e:	485a      	ldr	r0, [pc, #360]	; (80036c8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1f4>)
 8003560:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003564:	224b      	movs	r2, #75	; 0x4b
 8003566:	2137      	movs	r1, #55	; 0x37
 8003568:	f003 f848 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Set PWM prescaler for other PWM Hz", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 800356c:	e9cd 4500 	strd	r4, r5, [sp]
 8003570:	4856      	ldr	r0, [pc, #344]	; (80036cc <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1f8>)
 8003572:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003576:	2255      	movs	r2, #85	; 0x55
 8003578:	2137      	movs	r1, #55	; 0x37
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 800357a:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("Set PWM prescaler for other PWM Hz", 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 800357e:	f003 f83d 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8003582:	2400      	movs	r4, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8003584:	23e6      	movs	r3, #230	; 0xe6
 8003586:	f240 1211 	movw	r2, #273	; 0x111
 800358a:	21cd      	movs	r1, #205	; 0xcd
 800358c:	2055      	movs	r0, #85	; 0x55
 800358e:	9500      	str	r5, [sp, #0]
 8003590:	f002 ff06 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8003594:	9400      	str	r4, [sp, #0]
 8003596:	23e6      	movs	r3, #230	; 0xe6
 8003598:	f240 1211 	movw	r2, #273	; 0x111
 800359c:	21cd      	movs	r1, #205	; 0xcd
 800359e:	2055      	movs	r0, #85	; 0x55
 80035a0:	f002 ff92 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 80035a4:	2302      	movs	r3, #2
 80035a6:	e9cd 5300 	strd	r5, r3, [sp]
 80035aa:	4849      	ldr	r0, [pc, #292]	; (80036d0 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x1fc>)
 80035ac:	4623      	mov	r3, r4
 80035ae:	22d2      	movs	r2, #210	; 0xd2
 80035b0:	215f      	movs	r1, #95	; 0x5f
 80035b2:	f003 f823 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", pwm[0], pwm[1], pwm[2]);
 80035b6:	4c47      	ldr	r4, [pc, #284]	; (80036d4 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x200>)
		for(uint8_t i = 0; i < 8; i++)
 80035b8:	af03      	add	r7, sp, #12
void STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(uint8_t *frame_id) {
 80035ba:	46b8      	mov	r8, r7
 80035bc:	2500      	movs	r5, #0
			pwm[i] = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 80035be:	b2e8      	uxtb	r0, r5
 80035c0:	f7fd fcc2 	bl	8000f48 <STM32_PLC_Analog_Input_ADC_Get_Raw>
		for(uint8_t i = 0; i < 8; i++)
 80035c4:	3501      	adds	r5, #1
 80035c6:	2d08      	cmp	r5, #8
			pwm[i] = STM32_PLC_Analog_Input_ADC_Get_Raw(i);
 80035c8:	f828 0b02 	strh.w	r0, [r8], #2
		for(uint8_t i = 0; i < 8; i++)
 80035cc:	d1f7      	bne.n	80035be <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0xea>
		sprintf(text, "ADC0:%i ADC1:%i ADC2:%i", pwm[0], pwm[1], pwm[2]);
 80035ce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80035d2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4621      	mov	r1, r4
 80035da:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80035de:	a807      	add	r0, sp, #28
 80035e0:	f00b fe06 	bl	800f1f0 <siprintf>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80035e4:	250f      	movs	r5, #15
 80035e6:	f04f 0801 	mov.w	r8, #1
		add_spaces(43, text);
 80035ea:	a807      	add	r0, sp, #28
 80035ec:	f7ff ff5e 	bl	80034ac <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80035f0:	e9cd 5800 	strd	r5, r8, [sp]
 80035f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035f8:	225f      	movs	r2, #95	; 0x5f
 80035fa:	2137      	movs	r1, #55	; 0x37
 80035fc:	a807      	add	r0, sp, #28
 80035fe:	f002 fffd 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "ADC3:%i ADC4:%i ADC5:%i", pwm[3], pwm[4], pwm[5]);
 8003602:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8003606:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800360a:	4933      	ldr	r1, [pc, #204]	; (80036d8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x204>)
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	a807      	add	r0, sp, #28
 8003610:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003614:	f00b fdec 	bl	800f1f0 <siprintf>
		add_spaces(43, text);
 8003618:	a807      	add	r0, sp, #28
 800361a:	f7ff ff47 	bl	80034ac <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 800361e:	e9cd 5800 	strd	r5, r8, [sp]
 8003622:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003626:	2269      	movs	r2, #105	; 0x69
 8003628:	2137      	movs	r1, #55	; 0x37
 800362a:	a807      	add	r0, sp, #28
 800362c:	f002 ffe6 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "ADC6:%i ADC7:%i", pwm[6], pwm[7]);
 8003630:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8003634:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8003638:	4928      	ldr	r1, [pc, #160]	; (80036dc <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x208>)
 800363a:	a807      	add	r0, sp, #28
 800363c:	f00b fdd8 	bl	800f1f0 <siprintf>
		add_spaces(43, text);
 8003640:	a807      	add	r0, sp, #28
 8003642:	f7ff ff33 	bl	80034ac <add_spaces.constprop.0>
		ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8003646:	e9cd 5800 	strd	r5, r8, [sp]
 800364a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800364e:	2273      	movs	r2, #115	; 0x73
 8003650:	2137      	movs	r1, #55	; 0x37
 8003652:	a807      	add	r0, sp, #28
 8003654:	f002 ffd2 	bl	80065fc <ILI9341_print_text>
 8003658:	2500      	movs	r5, #0
			STM32_PLC_PWM_Set(i, pwm[i]);
 800365a:	b2e8      	uxtb	r0, r5
 800365c:	f837 1b02 	ldrh.w	r1, [r7], #2
		for(uint8_t i = 0; i < 8; i++)
 8003660:	3501      	adds	r5, #1
			STM32_PLC_PWM_Set(i, pwm[i]);
 8003662:	f7fe fa61 	bl	8001b28 <STM32_PLC_PWM_Set>
		for(uint8_t i = 0; i < 8; i++)
 8003666:	2d08      	cmp	r5, #8
 8003668:	d1f7      	bne.n	800365a <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x186>
		if (TSC2046_isPressed()) {
 800366a:	f003 f9cd 	bl	8006a08 <TSC2046_isPressed>
 800366e:	2800      	cmp	r0, #0
 8003670:	d0a2      	beq.n	80035b8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0xe4>
			TSC2046_GetTouchData();
 8003672:	f003 f961 	bl	8006938 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8003676:	4a1a      	ldr	r2, [pc, #104]	; (80036e0 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0x20c>)
			if (X >= 85 && X <= 273 && Y >= 205 && Y <= 230) {
 8003678:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800367a:	3b55      	subs	r3, #85	; 0x55
 800367c:	b29b      	uxth	r3, r3
 800367e:	2bbc      	cmp	r3, #188	; 0xbc
 8003680:	d89a      	bhi.n	80035b8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0xe4>
 8003682:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8003684:	3bcd      	subs	r3, #205	; 0xcd
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b19      	cmp	r3, #25
 800368a:	d895      	bhi.n	80035b8 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame+0xe4>
				ILI9341_hollow_rect(85, 205, 273, 230, COLOR_MAGENTA);
 800368c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	f240 1211 	movw	r2, #273	; 0x111
 8003696:	23e6      	movs	r3, #230	; 0xe6
 8003698:	21cd      	movs	r1, #205	; 0xcd
 800369a:	2055      	movs	r0, #85	; 0x55
 800369c:	f002 ff14 	bl	80064c8 <ILI9341_hollow_rect>
	STM32_PLC_PWM_Reset();
 80036a0:	f7fe fa88 	bl	8001bb4 <STM32_PLC_PWM_Reset>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80036a4:	2100      	movs	r1, #0
 80036a6:	4630      	mov	r0, r6
}
 80036a8:	b016      	add	sp, #88	; 0x58
 80036aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80036ae:	f000 bb35 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
 80036b2:	bf00      	nop
 80036b4:	0801351e 	.word	0x0801351e
 80036b8:	0801353b 	.word	0x0801353b
 80036bc:	08013555 	.word	0x08013555
 80036c0:	08013576 	.word	0x08013576
 80036c4:	08013593 	.word	0x08013593
 80036c8:	080135a4 	.word	0x080135a4
 80036cc:	080135af 	.word	0x080135af
 80036d0:	080133ca 	.word	0x080133ca
 80036d4:	080133d9 	.word	0x080133d9
 80036d8:	080134d4 	.word	0x080134d4
 80036dc:	080135d2 	.word	0x080135d2
 80036e0:	20002728 	.word	0x20002728

080036e4 <show_numpad_question>:

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint8_t min_value, uint8_t max_value, uint8_t *value){
 80036e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036e6:	460f      	mov	r7, r1
	bool minusbutton_show = false;
	bool decimalbutton_show = false;
	float number_value;
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 80036e8:	2100      	movs	r1, #0
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint8_t min_value, uint8_t max_value, uint8_t *value){
 80036ea:	4615      	mov	r5, r2
 80036ec:	461c      	mov	r4, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 80036ee:	aa01      	add	r2, sp, #4
 80036f0:	4603      	mov	r3, r0
 80036f2:	4608      	mov	r0, r1
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint8_t min_value, uint8_t max_value, uint8_t *value){
 80036f4:	9e08      	ldr	r6, [sp, #32]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 80036f6:	f002 fa19 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 80036fa:	4601      	mov	r1, r0
 80036fc:	b928      	cbnz	r0, 800370a <show_numpad_question+0x26>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80036fe:	4638      	mov	r0, r7
 8003700:	f000 fb0c 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
		return 1;
 8003704:	2001      	movs	r0, #1
	else if(number_value > max_value)
		*value = max_value;
	else
		*value = (uint32_t) number_value;
	return 0;
}
 8003706:	b003      	add	sp, #12
 8003708:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(number_value < min_value)
 800370a:	ee07 5a10 	vmov	s14, r5
 800370e:	eddd 7a01 	vldr	s15, [sp, #4]
 8003712:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	dd02      	ble.n	8003726 <show_numpad_question+0x42>
		*value = min_value;
 8003720:	7035      	strb	r5, [r6, #0]
	return 0;
 8003722:	2000      	movs	r0, #0
 8003724:	e7ef      	b.n	8003706 <show_numpad_question+0x22>
	else if(number_value > max_value)
 8003726:	ee07 4a10 	vmov	s14, r4
 800372a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800372e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*value = (uint32_t) number_value;
 8003736:	bfd7      	itett	le
 8003738:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		*value = max_value;
 800373c:	7034      	strbgt	r4, [r6, #0]
		*value = (uint32_t) number_value;
 800373e:	ee17 3a90 	vmovle	r3, s15
 8003742:	7033      	strble	r3, [r6, #0]
 8003744:	e7ed      	b.n	8003722 <show_numpad_question+0x3e>
	...

08003748 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame>:
void STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(uint8_t *frame_id) {
 8003748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374c:	b099      	sub	sp, #100	; 0x64
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800374e:	f04f 080f 	mov.w	r8, #15
 8003752:	f8cd 8000 	str.w	r8, [sp]
 8003756:	23ea      	movs	r3, #234	; 0xea
 8003758:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800375c:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(uint8_t *frame_id) {
 800375e:	4604      	mov	r4, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003760:	2033      	movs	r0, #51	; 0x33
	ILI9341_print_text("Configure the date and time and alarm", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003762:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003764:	f002 fe1c 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003768:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800376c:	f240 1209 	movw	r2, #265	; 0x109
 8003770:	211e      	movs	r1, #30
 8003772:	2032      	movs	r0, #50	; 0x32
 8003774:	f002 fe56 	bl	8006424 <ILI9341_draw_horizontal_line>
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 8003778:	f10d 0b1d 	add.w	fp, sp, #29
	ILI9341_print_text("Configure the date and time and alarm", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800377c:	e9cd 8500 	strd	r8, r5, [sp]
 8003780:	48ce      	ldr	r0, [pc, #824]	; (8003abc <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x374>)
 8003782:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003786:	220a      	movs	r2, #10
 8003788:	2137      	movs	r1, #55	; 0x37
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 800378a:	f10d 0a1e 	add.w	sl, sp, #30
	ILI9341_print_text("Configure the date and time and alarm", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800378e:	f002 ff35 	bl	80065fc <ILI9341_print_text>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 8003792:	f10d 0721 	add.w	r7, sp, #33	; 0x21
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 8003796:	465b      	mov	r3, fp
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 8003798:	f10d 0622 	add.w	r6, sp, #34	; 0x22
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 800379c:	4652      	mov	r2, sl
 800379e:	a908      	add	r1, sp, #32
 80037a0:	f10d 001f 	add.w	r0, sp, #31
 80037a4:	f7fe fa84 	bl	8001cb0 <STM32_PLC_RTC_Get_Date>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 80037a8:	463a      	mov	r2, r7
 80037aa:	4631      	mov	r1, r6
 80037ac:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 80037b0:	f7fe faae 	bl	8001d10 <STM32_PLC_RTC_Get_Time>
	ILI9341_print_text("Current date and time:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 80037b4:	e9cd 8500 	strd	r8, r5, [sp]
 80037b8:	48c1      	ldr	r0, [pc, #772]	; (8003ac0 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x378>)
 80037ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037be:	2223      	movs	r2, #35	; 0x23
 80037c0:	2137      	movs	r1, #55	; 0x37
 80037c2:	f002 ff1b 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Date:%i-%i-%i Time:%i:%i:%i", year + 2000, month, date, hours, minutes, seconds);
 80037c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80037ca:	9303      	str	r3, [sp, #12]
 80037cc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80037d0:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80037d4:	9302      	str	r3, [sp, #8]
 80037d6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80037e0:	49b8      	ldr	r1, [pc, #736]	; (8003ac4 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x37c>)
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80037e8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80037ec:	a809      	add	r0, sp, #36	; 0x24
 80037ee:	f00b fcff 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 80037f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037f6:	222d      	movs	r2, #45	; 0x2d
 80037f8:	2137      	movs	r1, #55	; 0x37
 80037fa:	e9cd 8500 	strd	r8, r5, [sp]
 80037fe:	a809      	add	r0, sp, #36	; 0x24
 8003800:	f002 fefc 	bl	80065fc <ILI9341_print_text>
	bool active = STM32_PLC_RTC_Alarm_A_Is_Activated();
 8003804:	f7fe fbb2 	bl	8001f6c <STM32_PLC_RTC_Alarm_A_Is_Activated>
 8003808:	9005      	str	r0, [sp, #20]
	bool enabled = STM32_PLC_RTC_Alarm_A_Is_Enabled();
 800380a:	f7fe fba9 	bl	8001f60 <STM32_PLC_RTC_Alarm_A_Is_Enabled>
	STM32_PLC_RTC_Get_Alarm_A(&date, &hours, &minutes);
 800380e:	4632      	mov	r2, r6
	bool enabled = STM32_PLC_RTC_Alarm_A_Is_Enabled();
 8003810:	4681      	mov	r9, r0
	STM32_PLC_RTC_Get_Alarm_A(&date, &hours, &minutes);
 8003812:	4639      	mov	r1, r7
 8003814:	a808      	add	r0, sp, #32
 8003816:	f7fe fab3 	bl	8001d80 <STM32_PLC_RTC_Get_Alarm_A>
	ILI9341_print_text("Current alarm A:", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 800381a:	2237      	movs	r2, #55	; 0x37
 800381c:	4611      	mov	r1, r2
 800381e:	e9cd 8500 	strd	r8, r5, [sp]
 8003822:	48a9      	ldr	r0, [pc, #676]	; (8003ac8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x380>)
 8003824:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003828:	f002 fee8 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Date:%i Time:%i:%i Active:%i Enabled:%i", date, hours, minutes, active, enabled);
 800382c:	9b05      	ldr	r3, [sp, #20]
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8003834:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8003838:	49a4      	ldr	r1, [pc, #656]	; (8003acc <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x384>)
 800383a:	f8cd 9008 	str.w	r9, [sp, #8]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	a809      	add	r0, sp, #36	; 0x24
 8003842:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8003846:	f00b fcd3 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 800384a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800384e:	2241      	movs	r2, #65	; 0x41
 8003850:	2137      	movs	r1, #55	; 0x37
 8003852:	e9cd 8500 	strd	r8, r5, [sp]
 8003856:	a809      	add	r0, sp, #36	; 0x24
 8003858:	f002 fed0 	bl	80065fc <ILI9341_print_text>
	active = STM32_PLC_RTC_Alarm_B_Is_Activated();
 800385c:	f7fe fbbe 	bl	8001fdc <STM32_PLC_RTC_Alarm_B_Is_Activated>
 8003860:	9005      	str	r0, [sp, #20]
	enabled = STM32_PLC_RTC_Alarm_B_Is_Enabled();
 8003862:	f7fe fbb5 	bl	8001fd0 <STM32_PLC_RTC_Alarm_B_Is_Enabled>
	STM32_PLC_RTC_Get_Alarm_B(&week_day, &hours, &minutes);
 8003866:	4632      	mov	r2, r6
	enabled = STM32_PLC_RTC_Alarm_B_Is_Enabled();
 8003868:	4681      	mov	r9, r0
	STM32_PLC_RTC_Get_Alarm_B(&week_day, &hours, &minutes);
 800386a:	4639      	mov	r1, r7
 800386c:	f10d 001f 	add.w	r0, sp, #31
 8003870:	f7fe faa6 	bl	8001dc0 <STM32_PLC_RTC_Get_Alarm_B>
	ILI9341_print_text("Current alarm B:", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8003874:	e9cd 8500 	strd	r8, r5, [sp]
 8003878:	4895      	ldr	r0, [pc, #596]	; (8003ad0 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x388>)
 800387a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800387e:	224b      	movs	r2, #75	; 0x4b
 8003880:	2137      	movs	r1, #55	; 0x37
 8003882:	f002 febb 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Week day:%i Time:%i:%i Active:%i Enabled:%i", week_day, hours, minutes, active, enabled);
 8003886:	9b05      	ldr	r3, [sp, #20]
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800388e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8003892:	4990      	ldr	r1, [pc, #576]	; (8003ad4 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x38c>)
 8003894:	f8cd 9008 	str.w	r9, [sp, #8]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	a809      	add	r0, sp, #36	; 0x24
 800389c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80038a0:	f00b fca6 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 80038a4:	e9cd 8500 	strd	r8, r5, [sp]
 80038a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038ac:	2255      	movs	r2, #85	; 0x55
 80038ae:	2137      	movs	r1, #55	; 0x37
 80038b0:	a809      	add	r0, sp, #36	; 0x24
 80038b2:	f002 fea3 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Alarm A active = PWM4 to PWM7 high", 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80038b6:	e9cd 8500 	strd	r8, r5, [sp]
 80038ba:	4887      	ldr	r0, [pc, #540]	; (8003ad8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x390>)
 80038bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038c0:	225f      	movs	r2, #95	; 0x5f
 80038c2:	2137      	movs	r1, #55	; 0x37
 80038c4:	f002 fe9a 	bl	80065fc <ILI9341_print_text>
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 80038c8:	f44f 69fc 	mov.w	r9, #2016	; 0x7e0
	ILI9341_print_text("Alarm B active = PWM0 to PWM3 high", 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80038cc:	e9cd 8500 	strd	r8, r5, [sp]
 80038d0:	4882      	ldr	r0, [pc, #520]	; (8003adc <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x394>)
 80038d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038d6:	2269      	movs	r2, #105	; 0x69
 80038d8:	2137      	movs	r1, #55	; 0x37
 80038da:	f002 fe8f 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 80038de:	f04f 0800 	mov.w	r8, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 80038e2:	23dc      	movs	r3, #220	; 0xdc
 80038e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038e8:	21c3      	movs	r1, #195	; 0xc3
 80038ea:	2041      	movs	r0, #65	; 0x41
 80038ec:	f8cd 9000 	str.w	r9, [sp]
 80038f0:	f002 fd56 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 80038f4:	23dc      	movs	r3, #220	; 0xdc
 80038f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038fa:	21c3      	movs	r1, #195	; 0xc3
 80038fc:	2041      	movs	r0, #65	; 0x41
 80038fe:	f8cd 8000 	str.w	r8, [sp]
 8003902:	f002 fde1 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Set date time alarm", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8003906:	2302      	movs	r3, #2
 8003908:	e9cd 9300 	strd	r9, r3, [sp]
 800390c:	4874      	ldr	r0, [pc, #464]	; (8003ae0 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x398>)
 800390e:	4643      	mov	r3, r8
 8003910:	22c8      	movs	r2, #200	; 0xc8
 8003912:	2146      	movs	r1, #70	; 0x46
 8003914:	f002 fe72 	bl	80065fc <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 8003918:	23dc      	movs	r3, #220	; 0xdc
 800391a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800391e:	21c3      	movs	r1, #195	; 0xc3
 8003920:	2041      	movs	r0, #65	; 0x41
 8003922:	f003 fd4b 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set configuration?") == 0) {
 8003926:	486f      	ldr	r0, [pc, #444]	; (8003ae4 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x39c>)
 8003928:	f7fe ff06 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 800392c:	b930      	cbnz	r0, 800393c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1f4>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800392e:	2100      	movs	r1, #0
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8003930:	4620      	mov	r0, r4
 8003932:	f000 f9f3 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 8003936:	b019      	add	sp, #100	; 0x64
 8003938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Alarm A:Do you want to enable?") == 0) {
 800393c:	486a      	ldr	r0, [pc, #424]	; (8003ae8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3a0>)
 800393e:	f7fe fefb 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8003942:	2800      	cmp	r0, #0
 8003944:	f040 80b8 	bne.w	8003ab8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x370>
		STM32_PLC_RTC_Enable_Alarm_A(true);
 8003948:	f7fe faf8 	bl	8001f3c <STM32_PLC_RTC_Enable_Alarm_A>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Alarm A:Do you want to edit?") == 1) {
 800394c:	4867      	ldr	r0, [pc, #412]	; (8003aec <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3a4>)
 800394e:	f7fe fef3 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8003952:	2801      	cmp	r0, #1
 8003954:	4605      	mov	r5, r0
 8003956:	d123      	bne.n	80039a0 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x258>
		if(show_numpad_question("Alarm A:Enter hours between 0 and 23", frame_id, 0, 23, &hours))
 8003958:	2200      	movs	r2, #0
 800395a:	4865      	ldr	r0, [pc, #404]	; (8003af0 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3a8>)
 800395c:	9700      	str	r7, [sp, #0]
 800395e:	2317      	movs	r3, #23
 8003960:	4621      	mov	r1, r4
 8003962:	f7ff febf 	bl	80036e4 <show_numpad_question>
 8003966:	4602      	mov	r2, r0
 8003968:	2800      	cmp	r0, #0
 800396a:	d1e4      	bne.n	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
		if(show_numpad_question("Alarm A:Enter minutes between 0 and 59", frame_id, 0, 59, &minutes))
 800396c:	4861      	ldr	r0, [pc, #388]	; (8003af4 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3ac>)
 800396e:	9600      	str	r6, [sp, #0]
 8003970:	233b      	movs	r3, #59	; 0x3b
 8003972:	4621      	mov	r1, r4
 8003974:	f7ff feb6 	bl	80036e4 <show_numpad_question>
 8003978:	2800      	cmp	r0, #0
 800397a:	d1dc      	bne.n	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
		if(show_numpad_question("Alarm A:Enter date between 1 and 31", frame_id, 1, 31, &date))
 800397c:	ab08      	add	r3, sp, #32
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	485d      	ldr	r0, [pc, #372]	; (8003af8 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3b0>)
 8003982:	231f      	movs	r3, #31
 8003984:	462a      	mov	r2, r5
 8003986:	4621      	mov	r1, r4
 8003988:	f7ff feac 	bl	80036e4 <show_numpad_question>
 800398c:	2800      	cmp	r0, #0
 800398e:	d1d2      	bne.n	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
		STM32_PLC_RTC_Set_Alarm_A(minutes, hours, date);
 8003990:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8003994:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 8003998:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 800399c:	f7fe fa30 	bl	8001e00 <STM32_PLC_RTC_Set_Alarm_A>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Alarm B:Do you want to enable?") == 0) {
 80039a0:	4856      	ldr	r0, [pc, #344]	; (8003afc <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3b4>)
 80039a2:	f7fe fec9 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	f040 80c0 	bne.w	8003b2c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3e4>
		STM32_PLC_RTC_Enable_Alarm_B(true);
 80039ac:	f7fe fafc 	bl	8001fa8 <STM32_PLC_RTC_Enable_Alarm_B>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Alarm B:Do you want to edit?") == 1) {
 80039b0:	4853      	ldr	r0, [pc, #332]	; (8003b00 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3b8>)
 80039b2:	f7fe fec1 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80039b6:	2801      	cmp	r0, #1
 80039b8:	4605      	mov	r5, r0
 80039ba:	d124      	bne.n	8003a06 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x2be>
		if(show_numpad_question("Alarm B:Enter hours between 0 and 23", frame_id, 0, 23, &hours))
 80039bc:	2200      	movs	r2, #0
 80039be:	4851      	ldr	r0, [pc, #324]	; (8003b04 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3bc>)
 80039c0:	9700      	str	r7, [sp, #0]
 80039c2:	2317      	movs	r3, #23
 80039c4:	4621      	mov	r1, r4
 80039c6:	f7ff fe8d 	bl	80036e4 <show_numpad_question>
 80039ca:	4602      	mov	r2, r0
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d1b2      	bne.n	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
		if(show_numpad_question("Alarm B:Enter minutes between 0 and 59", frame_id, 0, 59, &minutes))
 80039d0:	484d      	ldr	r0, [pc, #308]	; (8003b08 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3c0>)
 80039d2:	9600      	str	r6, [sp, #0]
 80039d4:	233b      	movs	r3, #59	; 0x3b
 80039d6:	4621      	mov	r1, r4
 80039d8:	f7ff fe84 	bl	80036e4 <show_numpad_question>
 80039dc:	2800      	cmp	r0, #0
 80039de:	d1aa      	bne.n	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
		if(show_numpad_question("Alarm B:Enter week day between 1 and 7", frame_id, 1, 7, &week_day))
 80039e0:	f10d 031f 	add.w	r3, sp, #31
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	4849      	ldr	r0, [pc, #292]	; (8003b0c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3c4>)
 80039e8:	2307      	movs	r3, #7
 80039ea:	462a      	mov	r2, r5
 80039ec:	4621      	mov	r1, r4
 80039ee:	f7ff fe79 	bl	80036e4 <show_numpad_question>
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d19f      	bne.n	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
		STM32_PLC_RTC_Set_Alarm_B(minutes, hours, week_day);
 80039f6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80039fa:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 80039fe:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 8003a02:	f7fe fa1b 	bl	8001e3c <STM32_PLC_RTC_Set_Alarm_B>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set date and time?") == 0) {
 8003a06:	4842      	ldr	r0, [pc, #264]	; (8003b10 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3c8>)
 8003a08:	f7fe fe96 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d08e      	beq.n	800392e <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1e6>
	if(show_numpad_question("Enter year between 0 and 99", frame_id, 0, 99, &year))
 8003a10:	4840      	ldr	r0, [pc, #256]	; (8003b14 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3cc>)
 8003a12:	f8cd b000 	str.w	fp, [sp]
 8003a16:	2363      	movs	r3, #99	; 0x63
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	f7ff fe62 	bl	80036e4 <show_numpad_question>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d188      	bne.n	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
	if(show_numpad_question("Enter month between 1 and 12", frame_id, 1, 11, &month))
 8003a24:	483c      	ldr	r0, [pc, #240]	; (8003b18 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3d0>)
 8003a26:	f8cd a000 	str.w	sl, [sp]
 8003a2a:	230b      	movs	r3, #11
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	4621      	mov	r1, r4
 8003a30:	f7ff fe58 	bl	80036e4 <show_numpad_question>
 8003a34:	2800      	cmp	r0, #0
 8003a36:	f47f af7e 	bne.w	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
	if(show_numpad_question("Enter week day between 1 and 7", frame_id, 1, 7, &week_day))
 8003a3a:	f10d 031f 	add.w	r3, sp, #31
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	4836      	ldr	r0, [pc, #216]	; (8003b1c <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3d4>)
 8003a42:	2307      	movs	r3, #7
 8003a44:	2201      	movs	r2, #1
 8003a46:	4621      	mov	r1, r4
 8003a48:	f7ff fe4c 	bl	80036e4 <show_numpad_question>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	f47f af72 	bne.w	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
	if(show_numpad_question("Enter date between 1 and 31", frame_id, 1, 31, &date))
 8003a52:	ab08      	add	r3, sp, #32
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2201      	movs	r2, #1
 8003a58:	4831      	ldr	r0, [pc, #196]	; (8003b20 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3d8>)
 8003a5a:	231f      	movs	r3, #31
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	f7ff fe41 	bl	80036e4 <show_numpad_question>
 8003a62:	4602      	mov	r2, r0
 8003a64:	2800      	cmp	r0, #0
 8003a66:	f47f af66 	bne.w	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
	if(show_numpad_question("Enter hours between 0 and 23", frame_id, 0, 23, &hours))
 8003a6a:	482e      	ldr	r0, [pc, #184]	; (8003b24 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3dc>)
 8003a6c:	9700      	str	r7, [sp, #0]
 8003a6e:	2317      	movs	r3, #23
 8003a70:	4621      	mov	r1, r4
 8003a72:	f7ff fe37 	bl	80036e4 <show_numpad_question>
 8003a76:	4602      	mov	r2, r0
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	f47f af5c 	bne.w	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
	if(show_numpad_question("Enter minutes between 0 and 59", frame_id, 0, 59, &minutes))
 8003a7e:	482a      	ldr	r0, [pc, #168]	; (8003b28 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x3e0>)
 8003a80:	9600      	str	r6, [sp, #0]
 8003a82:	233b      	movs	r3, #59	; 0x3b
 8003a84:	4621      	mov	r1, r4
 8003a86:	f7ff fe2d 	bl	80036e4 <show_numpad_question>
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	f47f af52 	bne.w	8003936 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1ee>
	STM32_PLC_RTC_Set_Date(date, week_day, month, year);
 8003a92:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8003a96:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8003a9a:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8003a9e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8003aa2:	f7fe f921 	bl	8001ce8 <STM32_PLC_RTC_Set_Date>
	STM32_PLC_RTC_Set_Time(0, minutes, hours);
 8003aa6:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 8003aaa:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f7fe f94c 	bl	8001d4c <STM32_PLC_RTC_Set_Time>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	e73b      	b.n	8003930 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x1e8>
		STM32_PLC_RTC_Enable_Alarm_A(true);
 8003ab8:	4628      	mov	r0, r5
 8003aba:	e745      	b.n	8003948 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x200>
 8003abc:	080135e2 	.word	0x080135e2
 8003ac0:	08013608 	.word	0x08013608
 8003ac4:	0801361f 	.word	0x0801361f
 8003ac8:	0801363b 	.word	0x0801363b
 8003acc:	0801364c 	.word	0x0801364c
 8003ad0:	08013674 	.word	0x08013674
 8003ad4:	08013685 	.word	0x08013685
 8003ad8:	080136b1 	.word	0x080136b1
 8003adc:	080136d4 	.word	0x080136d4
 8003ae0:	080136f7 	.word	0x080136f7
 8003ae4:	0801370b 	.word	0x0801370b
 8003ae8:	0801372d 	.word	0x0801372d
 8003aec:	0801374c 	.word	0x0801374c
 8003af0:	08013769 	.word	0x08013769
 8003af4:	0801378e 	.word	0x0801378e
 8003af8:	080137b5 	.word	0x080137b5
 8003afc:	080137d9 	.word	0x080137d9
 8003b00:	080137f8 	.word	0x080137f8
 8003b04:	08013815 	.word	0x08013815
 8003b08:	0801383a 	.word	0x0801383a
 8003b0c:	08013861 	.word	0x08013861
 8003b10:	08013888 	.word	0x08013888
 8003b14:	080138aa 	.word	0x080138aa
 8003b18:	080138c6 	.word	0x080138c6
 8003b1c:	08013869 	.word	0x08013869
 8003b20:	080137bd 	.word	0x080137bd
 8003b24:	08013771 	.word	0x08013771
 8003b28:	08013796 	.word	0x08013796
		STM32_PLC_RTC_Enable_Alarm_B(true);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	e73d      	b.n	80039ac <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame+0x264>

08003b30 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(uint8_t *frame_id) {
 8003b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b32:	b095      	sub	sp, #84	; 0x54
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003b34:	250f      	movs	r5, #15
 8003b36:	9500      	str	r5, [sp, #0]
 8003b38:	23ea      	movs	r3, #234	; 0xea
 8003b3a:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8003b3e:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(uint8_t *frame_id) {
 8003b40:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003b42:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set encoder revolution", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003b44:	2401      	movs	r4, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8003b46:	f002 fc2b 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003b4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b4e:	f240 1209 	movw	r2, #265	; 0x109
 8003b52:	211e      	movs	r1, #30
 8003b54:	2032      	movs	r0, #50	; 0x32
 8003b56:	f002 fc65 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set encoder revolution", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003b5a:	e9cd 5400 	strd	r5, r4, [sp]
 8003b5e:	4863      	ldr	r0, [pc, #396]	; (8003cec <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1bc>)
 8003b60:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b64:	220a      	movs	r2, #10
 8003b66:	2137      	movs	r1, #55	; 0x37
 8003b68:	f002 fd48 	bl	80065fc <ILI9341_print_text>

	/* Show all calibration inputs */
	ILI9341_print_text("Encoder counts between:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8003b6c:	e9cd 5400 	strd	r5, r4, [sp]
 8003b70:	485f      	ldr	r0, [pc, #380]	; (8003cf0 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1c0>)
 8003b72:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b76:	2223      	movs	r2, #35	; 0x23
 8003b78:	2137      	movs	r1, #55	; 0x37
 8003b7a:	f002 fd3f 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("-32768 to 32767", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8003b7e:	e9cd 5400 	strd	r5, r4, [sp]
 8003b82:	485c      	ldr	r0, [pc, #368]	; (8003cf4 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1c4>)
 8003b84:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b88:	222d      	movs	r2, #45	; 0x2d
 8003b8a:	2137      	movs	r1, #55	; 0x37
 8003b8c:	f002 fd36 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Set how many pulses one", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8003b90:	2237      	movs	r2, #55	; 0x37
 8003b92:	4611      	mov	r1, r2
 8003b94:	e9cd 5400 	strd	r5, r4, [sp]
 8003b98:	4857      	ldr	r0, [pc, #348]	; (8003cf8 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1c8>)
 8003b9a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b9e:	f002 fd2d 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("revolution is for encoder:", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ba2:	e9cd 5400 	strd	r5, r4, [sp]
 8003ba6:	4855      	ldr	r0, [pc, #340]	; (8003cfc <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1cc>)
 8003ba8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bac:	2241      	movs	r2, #65	; 0x41
 8003bae:	2137      	movs	r1, #55	; 0x37
 8003bb0:	f002 fd24 	bl	80065fc <ILI9341_print_text>

	/* Show selected frequency */
	char text[50];
	ILI9341_print_text("Current settings:", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8003bb4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bb8:	224b      	movs	r2, #75	; 0x4b
 8003bba:	e9cd 5400 	strd	r5, r4, [sp]
 8003bbe:	4850      	ldr	r0, [pc, #320]	; (8003d00 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1d0>)
 8003bc0:	2137      	movs	r1, #55	; 0x37
 8003bc2:	f002 fd1b 	bl	80065fc <ILI9341_print_text>
	uint16_t pulses0, pulses1, pulses2;
	STM32_PLC_Encoder_Get_Calibration(0, &pulses0);
 8003bc6:	f10d 0112 	add.w	r1, sp, #18
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f7fd fbda 	bl	8001384 <STM32_PLC_Encoder_Get_Calibration>
	STM32_PLC_Encoder_Get_Calibration(1, &pulses1);
 8003bd0:	a905      	add	r1, sp, #20
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7fd fbd6 	bl	8001384 <STM32_PLC_Encoder_Get_Calibration>
	STM32_PLC_Encoder_Get_Calibration(2, &pulses2);
 8003bd8:	f10d 0116 	add.w	r1, sp, #22
 8003bdc:	2002      	movs	r0, #2
 8003bde:	f7fd fbd1 	bl	8001384 <STM32_PLC_Encoder_Get_Calibration>
	sprintf(text, "Encoder0:%i Encoder1:%i Encoder2:%i", pulses0, pulses1, pulses2);
 8003be2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8003be6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8003bea:	4946      	ldr	r1, [pc, #280]	; (8003d04 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1d4>)
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	a807      	add	r0, sp, #28
 8003bf0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003bf4:	f00b fafc 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);

	/* Select settings button */
	ILI9341_fill_rect(90, 195, 273, 220, COLOR_GREEN);
 8003bf8:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8003bfc:	e9cd 5400 	strd	r5, r4, [sp]
 8003c00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c04:	2255      	movs	r2, #85	; 0x55
 8003c06:	2137      	movs	r1, #55	; 0x37
 8003c08:	a807      	add	r0, sp, #28
 8003c0a:	f002 fcf7 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(90, 195, 273, 220, COLOR_BLACK);
 8003c0e:	2500      	movs	r5, #0
	ILI9341_fill_rect(90, 195, 273, 220, COLOR_GREEN);
 8003c10:	23dc      	movs	r3, #220	; 0xdc
 8003c12:	f240 1211 	movw	r2, #273	; 0x111
 8003c16:	21c3      	movs	r1, #195	; 0xc3
 8003c18:	205a      	movs	r0, #90	; 0x5a
 8003c1a:	9700      	str	r7, [sp, #0]
 8003c1c:	f002 fbc0 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(90, 195, 273, 220, COLOR_BLACK);
 8003c20:	23dc      	movs	r3, #220	; 0xdc
 8003c22:	f240 1211 	movw	r2, #273	; 0x111
 8003c26:	21c3      	movs	r1, #195	; 0xc3
 8003c28:	205a      	movs	r0, #90	; 0x5a
 8003c2a:	9500      	str	r5, [sp, #0]
 8003c2c:	f002 fc4c 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Select encoder", 100, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8003c30:	2302      	movs	r3, #2
 8003c32:	e9cd 7300 	strd	r7, r3, [sp]
 8003c36:	4834      	ldr	r0, [pc, #208]	; (8003d08 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1d8>)
 8003c38:	462b      	mov	r3, r5
 8003c3a:	22c8      	movs	r2, #200	; 0xc8
 8003c3c:	2164      	movs	r1, #100	; 0x64
 8003c3e:	f002 fcdd 	bl	80065fc <ILI9341_print_text>

	/* Logic for request button */
	STM32_PLC_LCD_Call_One_Button_Logic(90, 195, 273, 220);
 8003c42:	23dc      	movs	r3, #220	; 0xdc
 8003c44:	f240 1211 	movw	r2, #273	; 0x111
 8003c48:	21c3      	movs	r1, #195	; 0xc3
 8003c4a:	205a      	movs	r0, #90	; 0x5a
 8003c4c:	f003 fbb6 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set encoder revolution?") == 0) {
 8003c50:	482e      	ldr	r0, [pc, #184]	; (8003d0c <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1dc>)
 8003c52:	f7fe fd71 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8003c56:	b928      	cbnz	r0, 8003c64 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x134>

	/* Apply them */
	STM32_PLC_Encoder_Set_Calibration(encoder_choice, pulses_per_revolution, true);

	/* Show main frame again */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f000 f85e 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 8003c60:	b015      	add	sp, #84	; 0x54
 8003c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter input number between 1 and 65535") == 0) {
 8003c64:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1e0>)
 8003c66:	aa06      	add	r2, sp, #24
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f001 ff5e 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d0f1      	beq.n	8003c58 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x128>
	if(number_value < 1)
 8003c74:	eddd 7a06 	vldr	s15, [sp, #24]
 8003c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c84:	d40d      	bmi.n	8003ca2 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x172>
	else if(number_value > 65535)
 8003c86:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003d14 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1e4>
 8003c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		pulses_per_revolution = (uint16_t) number_value;
 8003c92:	bfd7      	itett	le
 8003c94:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		pulses_per_revolution = 65535;
 8003c98:	f64f 74ff 	movwgt	r4, #65535	; 0xffff
		pulses_per_revolution = (uint16_t) number_value;
 8003c9c:	ee17 3a90 	vmovle	r3, s15
 8003ca0:	b29c      	uxthle	r4, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Set setting for Encoder0=0, Encoder1=1, Encoder2=2") == 0) {
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1e8>)
 8003ca6:	aa06      	add	r2, sp, #24
 8003ca8:	4608      	mov	r0, r1
 8003caa:	f001 ff3f 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d0d2      	beq.n	8003c58 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x128>
	if(number_value < 0)
 8003cb2:	eddd 7a06 	vldr	s15, [sp, #24]
 8003cb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbe:	d411      	bmi.n	8003ce4 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1b4>
	else if(number_value > 2)
 8003cc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	dc0c      	bgt.n	8003ce8 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1b8>
		encoder_choice = (uint8_t) number_value;
 8003cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd2:	edcd 7a03 	vstr	s15, [sp, #12]
 8003cd6:	f89d 000c 	ldrb.w	r0, [sp, #12]
	STM32_PLC_Encoder_Set_Calibration(encoder_choice, pulses_per_revolution, true);
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4621      	mov	r1, r4
 8003cde:	f7fd fb47 	bl	8001370 <STM32_PLC_Encoder_Set_Calibration>
 8003ce2:	e7b9      	b.n	8003c58 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x128>
		encoder_choice = 0;
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	e7f8      	b.n	8003cda <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1aa>
		encoder_choice = 2;
 8003ce8:	2002      	movs	r0, #2
 8003cea:	e7f6      	b.n	8003cda <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame+0x1aa>
 8003cec:	080138e3 	.word	0x080138e3
 8003cf0:	080138fa 	.word	0x080138fa
 8003cf4:	08013912 	.word	0x08013912
 8003cf8:	08013922 	.word	0x08013922
 8003cfc:	0801393a 	.word	0x0801393a
 8003d00:	08013955 	.word	0x08013955
 8003d04:	08013967 	.word	0x08013967
 8003d08:	0801398b 	.word	0x0801398b
 8003d0c:	0801399a 	.word	0x0801399a
 8003d10:	080139c1 	.word	0x080139c1
 8003d14:	477fff00 	.word	0x477fff00
 8003d18:	080139e8 	.word	0x080139e8

08003d1c <STM32_PLC_LCD_Show_Main_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

/* Create the main frame */
void STM32_PLC_LCD_Show_Main_Frame(uint8_t *frame_id, bool change_only_ABC_buttons) {
 8003d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d20:	4606      	mov	r6, r0
 8003d22:	b08d      	sub	sp, #52	; 0x34
 8003d24:	460f      	mov	r7, r1
	/* Set rotation */
	ILI9341_set_rotation(2);
 8003d26:	2002      	movs	r0, #2
 8003d28:	f002 fd38 	bl	800679c <ILI9341_set_rotation>

	if(!change_only_ABC_buttons) {
 8003d2c:	2f00      	cmp	r7, #0
 8003d2e:	d153      	bne.n	8003dd8 <STM32_PLC_LCD_Show_Main_Frame+0xbc>
		/* Set background */
		ILI9341_fill_screen(COLOR_NAVY);
 8003d30:	200f      	movs	r0, #15
 8003d32:	f002 faff 	bl	8006334 <ILI9341_fill_screen>

		/* Print frame - large square */
		ILI9341_draw_horizontal_line(5, 235, 310, COLOR_GREEN);
 8003d36:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d3a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8003d3e:	21eb      	movs	r1, #235	; 0xeb
 8003d40:	2005      	movs	r0, #5
 8003d42:	f002 fb6f 	bl	8006424 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 5, 310, COLOR_GREEN);
 8003d46:	2105      	movs	r1, #5
 8003d48:	4608      	mov	r0, r1
 8003d4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d4e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8003d52:	f002 fb67 	bl	8006424 <ILI9341_draw_horizontal_line>
		ILI9341_draw_vertical_line(5, 5, 230, COLOR_GREEN);
 8003d56:	2105      	movs	r1, #5
 8003d58:	4608      	mov	r0, r1
 8003d5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d5e:	22e6      	movs	r2, #230	; 0xe6
 8003d60:	f002 fb8a 	bl	8006478 <ILI9341_draw_vertical_line>
		ILI9341_draw_vertical_line(315, 5, 230, COLOR_GREEN);
 8003d64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d68:	22e6      	movs	r2, #230	; 0xe6
 8003d6a:	2105      	movs	r1, #5
 8003d6c:	f240 103b 	movw	r0, #315	; 0x13b
 8003d70:	f002 fb82 	bl	8006478 <ILI9341_draw_vertical_line>

		/* Print buttons - Small squares */
		ILI9341_draw_vertical_line(50, 5, 230, COLOR_GREEN);
 8003d74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d78:	22e6      	movs	r2, #230	; 0xe6
 8003d7a:	2105      	movs	r1, #5
 8003d7c:	2032      	movs	r0, #50	; 0x32
 8003d7e:	f002 fb7b 	bl	8006478 <ILI9341_draw_vertical_line>
		ILI9341_draw_horizontal_line(5, 49, 45, COLOR_GREEN);
 8003d82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d86:	222d      	movs	r2, #45	; 0x2d
 8003d88:	2131      	movs	r1, #49	; 0x31
 8003d8a:	2005      	movs	r0, #5
 8003d8c:	f002 fb4a 	bl	8006424 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 96, 45, COLOR_GREEN);
 8003d90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d94:	222d      	movs	r2, #45	; 0x2d
 8003d96:	2160      	movs	r1, #96	; 0x60
 8003d98:	2005      	movs	r0, #5
 8003d9a:	f002 fb43 	bl	8006424 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 143, 45, COLOR_GREEN);
 8003d9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003da2:	222d      	movs	r2, #45	; 0x2d
 8003da4:	218f      	movs	r1, #143	; 0x8f
 8003da6:	2005      	movs	r0, #5
 8003da8:	f002 fb3c 	bl	8006424 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 190, 45, COLOR_GREEN);
 8003dac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003db0:	222d      	movs	r2, #45	; 0x2d
 8003db2:	21be      	movs	r1, #190	; 0xbe
 8003db4:	2005      	movs	r0, #5
 8003db6:	f002 fb35 	bl	8006424 <ILI9341_draw_horizontal_line>
		ILI9341_draw_horizontal_line(5, 235, 45, COLOR_GREEN);
 8003dba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dbe:	222d      	movs	r2, #45	; 0x2d
 8003dc0:	21eb      	movs	r1, #235	; 0xeb
 8003dc2:	2005      	movs	r0, #5
 8003dc4:	f002 fb2e 	bl	8006424 <ILI9341_draw_horizontal_line>

		/* This line is for the input and output text */
		ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8003dc8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dcc:	f240 1209 	movw	r2, #265	; 0x109
 8003dd0:	211e      	movs	r1, #30
 8003dd2:	2032      	movs	r0, #50	; 0x32
 8003dd4:	f002 fb26 	bl	8006424 <ILI9341_draw_horizontal_line>
	}
	/* Apply them */
	char text[40];
	sprintf(text, "%c", 65 + 3 * *frame_id); /* A */
 8003dd8:	7832      	ldrb	r2, [r6, #0]
 8003dda:	49b5      	ldr	r1, [pc, #724]	; (80040b0 <STM32_PLC_LCD_Show_Main_Frame+0x394>)
 8003ddc:	2503      	movs	r5, #3
 8003dde:	f04f 0941 	mov.w	r9, #65	; 0x41
	ILI9341_print_text(text, 18, 13, COLOR_YELLOW, COLOR_NAVY, 4);
 8003de2:	240f      	movs	r4, #15
 8003de4:	f04f 0804 	mov.w	r8, #4
	sprintf(text, "%c", 65 + 3 * *frame_id); /* A */
 8003de8:	fb05 9202 	mla	r2, r5, r2, r9
 8003dec:	a802      	add	r0, sp, #8
 8003dee:	f00b f9ff 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 18, 13, COLOR_YELLOW, COLOR_NAVY, 4);
 8003df2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003df6:	220d      	movs	r2, #13
 8003df8:	2112      	movs	r1, #18
 8003dfa:	a802      	add	r0, sp, #8
 8003dfc:	e9cd 4800 	strd	r4, r8, [sp]
 8003e00:	f002 fbfc 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "%c", 66 + 3 * *frame_id); /* B */
 8003e04:	7832      	ldrb	r2, [r6, #0]
 8003e06:	49aa      	ldr	r1, [pc, #680]	; (80040b0 <STM32_PLC_LCD_Show_Main_Frame+0x394>)
 8003e08:	2342      	movs	r3, #66	; 0x42
 8003e0a:	fb05 3202 	mla	r2, r5, r2, r3
 8003e0e:	a802      	add	r0, sp, #8
 8003e10:	f00b f9ee 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 18, 59, COLOR_CYAN, COLOR_NAVY, 4);
 8003e14:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003e18:	223b      	movs	r2, #59	; 0x3b
 8003e1a:	2112      	movs	r1, #18
 8003e1c:	a802      	add	r0, sp, #8
 8003e1e:	e9cd 4800 	strd	r4, r8, [sp]
 8003e22:	f002 fbeb 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "%c", 67 + 3 * *frame_id); /* C */
 8003e26:	7832      	ldrb	r2, [r6, #0]
 8003e28:	49a1      	ldr	r1, [pc, #644]	; (80040b0 <STM32_PLC_LCD_Show_Main_Frame+0x394>)
 8003e2a:	2343      	movs	r3, #67	; 0x43
 8003e2c:	fb05 3202 	mla	r2, r5, r2, r3
 8003e30:	a802      	add	r0, sp, #8
 8003e32:	f00b f9dd 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 18, 106, COLOR_MAGENTA, COLOR_NAVY, 4);
 8003e36:	e9cd 4800 	strd	r4, r8, [sp]
 8003e3a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003e3e:	226a      	movs	r2, #106	; 0x6a
 8003e40:	2112      	movs	r1, #18
 8003e42:	a802      	add	r0, sp, #8
 8003e44:	f002 fbda 	bl	80065fc <ILI9341_print_text>
	if(!change_only_ABC_buttons) {
 8003e48:	2f00      	cmp	r7, #0
 8003e4a:	f040 812e 	bne.w	80040aa <STM32_PLC_LCD_Show_Main_Frame+0x38e>
		ILI9341_print_text("<-", 10, 156, COLOR_ORANGE, COLOR_NAVY, 3);
 8003e4e:	e9cd 4500 	strd	r4, r5, [sp]
 8003e52:	4898      	ldr	r0, [pc, #608]	; (80040b4 <STM32_PLC_LCD_Show_Main_Frame+0x398>)
 8003e54:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e58:	229c      	movs	r2, #156	; 0x9c
 8003e5a:	210a      	movs	r1, #10
 8003e5c:	f002 fbce 	bl	80065fc <ILI9341_print_text>
		ILI9341_print_text("->", 14, 202, COLOR_GREEN, COLOR_NAVY, 3);
 8003e60:	e9cd 4500 	strd	r4, r5, [sp]
 8003e64:	4894      	ldr	r0, [pc, #592]	; (80040b8 <STM32_PLC_LCD_Show_Main_Frame+0x39c>)
 8003e66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e6a:	22ca      	movs	r2, #202	; 0xca
 8003e6c:	210e      	movs	r1, #14
 8003e6e:	f002 fbc5 	bl	80065fc <ILI9341_print_text>

		/* Print title */
		ILI9341_print_text("Main frame", 55, 10, COLOR_YELLOW, COLOR_NAVY, 2);
 8003e72:	2302      	movs	r3, #2
 8003e74:	220a      	movs	r2, #10
 8003e76:	e9cd 4300 	strd	r4, r3, [sp]
 8003e7a:	4890      	ldr	r0, [pc, #576]	; (80040bc <STM32_PLC_LCD_Show_Main_Frame+0x3a0>)
 8003e7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e80:	2137      	movs	r1, #55	; 0x37

		/* Write out letters */
		sprintf(text, "A:Show measurement and time");
		ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e82:	2501      	movs	r5, #1
		ILI9341_print_text("Main frame", 55, 10, COLOR_YELLOW, COLOR_NAVY, 2);
 8003e84:	f002 fbba 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "A:Show measurement and time");
 8003e88:	498d      	ldr	r1, [pc, #564]	; (80040c0 <STM32_PLC_LCD_Show_Main_Frame+0x3a4>)
 8003e8a:	a802      	add	r0, sp, #8
 8003e8c:	f00b f9d0 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8003e90:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e94:	2223      	movs	r2, #35	; 0x23
 8003e96:	2137      	movs	r1, #55	; 0x37
 8003e98:	a802      	add	r0, sp, #8
 8003e9a:	e9cd 4500 	strd	r4, r5, [sp]
 8003e9e:	f002 fbad 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "B:Set analog gain");
 8003ea2:	4988      	ldr	r1, [pc, #544]	; (80040c4 <STM32_PLC_LCD_Show_Main_Frame+0x3a8>)
 8003ea4:	a802      	add	r0, sp, #8
 8003ea6:	f00b f9c3 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8003eaa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003eae:	222d      	movs	r2, #45	; 0x2d
 8003eb0:	2137      	movs	r1, #55	; 0x37
 8003eb2:	a802      	add	r0, sp, #8
 8003eb4:	e9cd 4500 	strd	r4, r5, [sp]
 8003eb8:	f002 fba0 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "C:Set PWM frequencies");
 8003ebc:	4982      	ldr	r1, [pc, #520]	; (80040c8 <STM32_PLC_LCD_Show_Main_Frame+0x3ac>)
 8003ebe:	a802      	add	r0, sp, #8
 8003ec0:	f00b f9b6 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ec4:	2237      	movs	r2, #55	; 0x37
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ecc:	a802      	add	r0, sp, #8
 8003ece:	e9cd 4500 	strd	r4, r5, [sp]
 8003ed2:	f002 fb93 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "D:Set analog input calibration");
 8003ed6:	497d      	ldr	r1, [pc, #500]	; (80040cc <STM32_PLC_LCD_Show_Main_Frame+0x3b0>)
 8003ed8:	a802      	add	r0, sp, #8
 8003eda:	f00b f9a9 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ede:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ee2:	464a      	mov	r2, r9
 8003ee4:	2137      	movs	r1, #55	; 0x37
 8003ee6:	a802      	add	r0, sp, #8
 8003ee8:	e9cd 4500 	strd	r4, r5, [sp]
 8003eec:	f002 fb86 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "E:Set pulses per encoder revolution");
 8003ef0:	4977      	ldr	r1, [pc, #476]	; (80040d0 <STM32_PLC_LCD_Show_Main_Frame+0x3b4>)
 8003ef2:	a802      	add	r0, sp, #8
 8003ef4:	f00b f99c 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ef8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003efc:	224b      	movs	r2, #75	; 0x4b
 8003efe:	2137      	movs	r1, #55	; 0x37
 8003f00:	a802      	add	r0, sp, #8
 8003f02:	e9cd 4500 	strd	r4, r5, [sp]
 8003f06:	f002 fb79 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "F:Set date and time and alarm");
 8003f0a:	4972      	ldr	r1, [pc, #456]	; (80040d4 <STM32_PLC_LCD_Show_Main_Frame+0x3b8>)
 8003f0c:	a802      	add	r0, sp, #8
 8003f0e:	f00b f98f 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f12:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f16:	2255      	movs	r2, #85	; 0x55
 8003f18:	2137      	movs	r1, #55	; 0x37
 8003f1a:	a802      	add	r0, sp, #8
 8003f1c:	e9cd 4500 	strd	r4, r5, [sp]
 8003f20:	f002 fb6c 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "G:Do a PGN request");
 8003f24:	496c      	ldr	r1, [pc, #432]	; (80040d8 <STM32_PLC_LCD_Show_Main_Frame+0x3bc>)
 8003f26:	a802      	add	r0, sp, #8
 8003f28:	f00b f982 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f30:	225f      	movs	r2, #95	; 0x5f
 8003f32:	2137      	movs	r1, #55	; 0x37
 8003f34:	a802      	add	r0, sp, #8
 8003f36:	e9cd 4500 	strd	r4, r5, [sp]
 8003f3a:	f002 fb5f 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "H:Show ECU addresses");
 8003f3e:	4967      	ldr	r1, [pc, #412]	; (80040dc <STM32_PLC_LCD_Show_Main_Frame+0x3c0>)
 8003f40:	a802      	add	r0, sp, #8
 8003f42:	f00b f975 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f46:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f4a:	2269      	movs	r2, #105	; 0x69
 8003f4c:	2137      	movs	r1, #55	; 0x37
 8003f4e:	a802      	add	r0, sp, #8
 8003f50:	e9cd 4500 	strd	r4, r5, [sp]
 8003f54:	f002 fb52 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "I:Commanded address");
 8003f58:	4961      	ldr	r1, [pc, #388]	; (80040e0 <STM32_PLC_LCD_Show_Main_Frame+0x3c4>)
 8003f5a:	a802      	add	r0, sp, #8
 8003f5c:	f00b f968 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f60:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f64:	2273      	movs	r2, #115	; 0x73
 8003f66:	2137      	movs	r1, #55	; 0x37
 8003f68:	a802      	add	r0, sp, #8
 8003f6a:	e9cd 4500 	strd	r4, r5, [sp]
 8003f6e:	f002 fb45 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "J:Show this ECU DM1 codes");
 8003f72:	495c      	ldr	r1, [pc, #368]	; (80040e4 <STM32_PLC_LCD_Show_Main_Frame+0x3c8>)
 8003f74:	a802      	add	r0, sp, #8
 8003f76:	f00b f95b 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f7e:	227d      	movs	r2, #125	; 0x7d
 8003f80:	2137      	movs	r1, #55	; 0x37
 8003f82:	a802      	add	r0, sp, #8
 8003f84:	e9cd 4500 	strd	r4, r5, [sp]
 8003f88:	f002 fb38 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "K:Show other ECU DM1 codes");
 8003f8c:	4956      	ldr	r1, [pc, #344]	; (80040e8 <STM32_PLC_LCD_Show_Main_Frame+0x3cc>)
 8003f8e:	a802      	add	r0, sp, #8
 8003f90:	f00b f94e 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8003f94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f98:	2287      	movs	r2, #135	; 0x87
 8003f9a:	2137      	movs	r1, #55	; 0x37
 8003f9c:	a802      	add	r0, sp, #8
 8003f9e:	e9cd 4500 	strd	r4, r5, [sp]
 8003fa2:	f002 fb2b 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "L:Show this ECU DM2 codes");
 8003fa6:	4951      	ldr	r1, [pc, #324]	; (80040ec <STM32_PLC_LCD_Show_Main_Frame+0x3d0>)
 8003fa8:	a802      	add	r0, sp, #8
 8003faa:	f00b f941 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 8003fae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003fb2:	2291      	movs	r2, #145	; 0x91
 8003fb4:	2137      	movs	r1, #55	; 0x37
 8003fb6:	a802      	add	r0, sp, #8
 8003fb8:	e9cd 4500 	strd	r4, r5, [sp]
 8003fbc:	f002 fb1e 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "M:Show other ECU DM2 codes");
 8003fc0:	494b      	ldr	r1, [pc, #300]	; (80040f0 <STM32_PLC_LCD_Show_Main_Frame+0x3d4>)
 8003fc2:	a802      	add	r0, sp, #8
 8003fc4:	f00b f934 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 155, COLOR_YELLOW, COLOR_NAVY, 1);
 8003fc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003fcc:	229b      	movs	r2, #155	; 0x9b
 8003fce:	2137      	movs	r1, #55	; 0x37
 8003fd0:	a802      	add	r0, sp, #8
 8003fd2:	e9cd 4500 	strd	r4, r5, [sp]
 8003fd6:	f002 fb11 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "N:Show this ECU name");
 8003fda:	4946      	ldr	r1, [pc, #280]	; (80040f4 <STM32_PLC_LCD_Show_Main_Frame+0x3d8>)
 8003fdc:	a802      	add	r0, sp, #8
 8003fde:	f00b f927 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 165, COLOR_YELLOW, COLOR_NAVY, 1);
 8003fe2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003fe6:	22a5      	movs	r2, #165	; 0xa5
 8003fe8:	2137      	movs	r1, #55	; 0x37
 8003fea:	a802      	add	r0, sp, #8
 8003fec:	e9cd 4500 	strd	r4, r5, [sp]
 8003ff0:	f002 fb04 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "O:Show other ECU name");
 8003ff4:	4940      	ldr	r1, [pc, #256]	; (80040f8 <STM32_PLC_LCD_Show_Main_Frame+0x3dc>)
 8003ff6:	a802      	add	r0, sp, #8
 8003ff8:	f00b f91a 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 175, COLOR_YELLOW, COLOR_NAVY, 1);
 8003ffc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004000:	22af      	movs	r2, #175	; 0xaf
 8004002:	2137      	movs	r1, #55	; 0x37
 8004004:	a802      	add	r0, sp, #8
 8004006:	e9cd 4500 	strd	r4, r5, [sp]
 800400a:	f002 faf7 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "P:Show this ECU identifications");
 800400e:	493b      	ldr	r1, [pc, #236]	; (80040fc <STM32_PLC_LCD_Show_Main_Frame+0x3e0>)
 8004010:	a802      	add	r0, sp, #8
 8004012:	f00b f90d 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 185, COLOR_YELLOW, COLOR_NAVY, 1);
 8004016:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800401a:	22b9      	movs	r2, #185	; 0xb9
 800401c:	2137      	movs	r1, #55	; 0x37
 800401e:	a802      	add	r0, sp, #8
 8004020:	e9cd 4500 	strd	r4, r5, [sp]
 8004024:	f002 faea 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "Q:Show other ECU identifications");
 8004028:	4935      	ldr	r1, [pc, #212]	; (8004100 <STM32_PLC_LCD_Show_Main_Frame+0x3e4>)
 800402a:	a802      	add	r0, sp, #8
 800402c:	f00b f900 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 195, COLOR_YELLOW, COLOR_NAVY, 1);
 8004030:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004034:	22c3      	movs	r2, #195	; 0xc3
 8004036:	2137      	movs	r1, #55	; 0x37
 8004038:	a802      	add	r0, sp, #8
 800403a:	e9cd 4500 	strd	r4, r5, [sp]
 800403e:	f002 fadd 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "R:SAE J1939 Auxiliary valve command");
 8004042:	4930      	ldr	r1, [pc, #192]	; (8004104 <STM32_PLC_LCD_Show_Main_Frame+0x3e8>)
 8004044:	a802      	add	r0, sp, #8
 8004046:	f00b f8f3 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 195, COLOR_YELLOW, COLOR_NAVY, 1);
 800404a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800404e:	22c3      	movs	r2, #195	; 0xc3
 8004050:	2137      	movs	r1, #55	; 0x37
 8004052:	a802      	add	r0, sp, #8
 8004054:	e9cd 4500 	strd	r4, r5, [sp]
 8004058:	f002 fad0 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "S:Analog in to PWM");
 800405c:	492a      	ldr	r1, [pc, #168]	; (8004108 <STM32_PLC_LCD_Show_Main_Frame+0x3ec>)
 800405e:	a802      	add	r0, sp, #8
 8004060:	f00b f8e6 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 205, COLOR_YELLOW, COLOR_NAVY, 1);
 8004064:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004068:	22cd      	movs	r2, #205	; 0xcd
 800406a:	2137      	movs	r1, #55	; 0x37
 800406c:	a802      	add	r0, sp, #8
 800406e:	e9cd 4500 	strd	r4, r5, [sp]
 8004072:	f002 fac3 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "T:Analog in to analog out");
 8004076:	4925      	ldr	r1, [pc, #148]	; (800410c <STM32_PLC_LCD_Show_Main_Frame+0x3f0>)
 8004078:	a802      	add	r0, sp, #8
 800407a:	f00b f8d9 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 215, COLOR_YELLOW, COLOR_NAVY, 1);
 800407e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004082:	22d7      	movs	r2, #215	; 0xd7
 8004084:	2137      	movs	r1, #55	; 0x37
 8004086:	a802      	add	r0, sp, #8
 8004088:	e9cd 4500 	strd	r4, r5, [sp]
 800408c:	f002 fab6 	bl	80065fc <ILI9341_print_text>
		sprintf(text, "U:About STM32 PLC");
 8004090:	491f      	ldr	r1, [pc, #124]	; (8004110 <STM32_PLC_LCD_Show_Main_Frame+0x3f4>)
 8004092:	a802      	add	r0, sp, #8
 8004094:	f00b f8cc 	bl	800f230 <strcpy>
		ILI9341_print_text(text, 55, 225, COLOR_YELLOW, COLOR_NAVY, 1);
 8004098:	e9cd 4500 	strd	r4, r5, [sp]
 800409c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80040a0:	22e1      	movs	r2, #225	; 0xe1
 80040a2:	2137      	movs	r1, #55	; 0x37
 80040a4:	a802      	add	r0, sp, #8
 80040a6:	f002 faa9 	bl	80065fc <ILI9341_print_text>
	}
}
 80040aa:	b00d      	add	sp, #52	; 0x34
 80040ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040b0:	08013a1b 	.word	0x08013a1b
 80040b4:	08013a1e 	.word	0x08013a1e
 80040b8:	08013a21 	.word	0x08013a21
 80040bc:	08013a24 	.word	0x08013a24
 80040c0:	08013a2f 	.word	0x08013a2f
 80040c4:	08013a4b 	.word	0x08013a4b
 80040c8:	08013a5d 	.word	0x08013a5d
 80040cc:	08013a73 	.word	0x08013a73
 80040d0:	08013a92 	.word	0x08013a92
 80040d4:	08013ab6 	.word	0x08013ab6
 80040d8:	08013ad4 	.word	0x08013ad4
 80040dc:	08013ae7 	.word	0x08013ae7
 80040e0:	08013afc 	.word	0x08013afc
 80040e4:	08013b10 	.word	0x08013b10
 80040e8:	08013b2a 	.word	0x08013b2a
 80040ec:	08013b45 	.word	0x08013b45
 80040f0:	08013b5f 	.word	0x08013b5f
 80040f4:	08013b7a 	.word	0x08013b7a
 80040f8:	08013b8f 	.word	0x08013b8f
 80040fc:	08013ba5 	.word	0x08013ba5
 8004100:	08013bc5 	.word	0x08013bc5
 8004104:	08013be6 	.word	0x08013be6
 8004108:	08013c0a 	.word	0x08013c0a
 800410c:	08013c1d 	.word	0x08013c1d
 8004110:	08013c37 	.word	0x08013c37

08004114 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame>:

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"

void STM32_PLC_LCD_Show_Measurement_And_Time_Frame(uint8_t *frame_id) {
 8004114:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004116:	250f      	movs	r5, #15
 8004118:	9500      	str	r5, [sp, #0]
 800411a:	23ea      	movs	r3, #234	; 0xea
 800411c:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8004120:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_Measurement_And_Time_Frame(uint8_t *frame_id) {
 8004122:	4604      	mov	r4, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004124:	2033      	movs	r0, #51	; 0x33
 8004126:	f002 f93b 	bl	80063a0 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 800412a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800412e:	f240 1209 	movw	r2, #265	; 0x109
 8004132:	211e      	movs	r1, #30
 8004134:	2032      	movs	r0, #50	; 0x32
 8004136:	f002 f975 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Measurement values and time", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800413a:	2301      	movs	r3, #1
 800413c:	e9cd 5300 	strd	r5, r3, [sp]
 8004140:	4823      	ldr	r0, [pc, #140]	; (80041d0 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0xbc>)
 8004142:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004146:	220a      	movs	r2, #10
 8004148:	2137      	movs	r1, #55	; 0x37

	/* Exit button */
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 800414a:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text("Measurement values and time", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800414e:	f002 fa55 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8004152:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8004154:	23e6      	movs	r3, #230	; 0xe6
 8004156:	f240 1211 	movw	r2, #273	; 0x111
 800415a:	21cd      	movs	r1, #205	; 0xcd
 800415c:	2055      	movs	r0, #85	; 0x55
 800415e:	9600      	str	r6, [sp, #0]
 8004160:	f002 f91e 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8004164:	9500      	str	r5, [sp, #0]
 8004166:	23e6      	movs	r3, #230	; 0xe6
 8004168:	f240 1211 	movw	r2, #273	; 0x111
 800416c:	21cd      	movs	r1, #205	; 0xcd
 800416e:	2055      	movs	r0, #85	; 0x55
 8004170:	f002 f9aa 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8004174:	2302      	movs	r3, #2
 8004176:	e9cd 6300 	strd	r6, r3, [sp]
 800417a:	4816      	ldr	r0, [pc, #88]	; (80041d4 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0xc0>)
 800417c:	462b      	mov	r3, r5
 800417e:	22d2      	movs	r2, #210	; 0xd2
 8004180:	215f      	movs	r1, #95	; 0x5f
 8004182:	f002 fa3b 	bl	80065fc <ILI9341_print_text>
		STM32_PLC_LCD_Show_Plot_Frame();

		/* Logic for button */
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 8004186:	4d14      	ldr	r5, [pc, #80]	; (80041d8 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0xc4>)
		STM32_PLC_LCD_Show_Plot_Frame();
 8004188:	f001 fdf0 	bl	8005d6c <STM32_PLC_LCD_Show_Plot_Frame>
		if (TSC2046_isPressed()) {
 800418c:	f002 fc3c 	bl	8006a08 <TSC2046_isPressed>
 8004190:	2800      	cmp	r0, #0
 8004192:	d0f9      	beq.n	8004188 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0x74>
			TSC2046_GetTouchData();
 8004194:	f002 fbd0 	bl	8006938 <TSC2046_GetTouchData>
			uint16_t Y = lcd.myTsData.Y;
			if (X >= 85 && X <= 273 && Y >= 205 && Y <= 230) {
 8004198:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800419a:	3b55      	subs	r3, #85	; 0x55
 800419c:	b29b      	uxth	r3, r3
 800419e:	2bbc      	cmp	r3, #188	; 0xbc
 80041a0:	d8f2      	bhi.n	8004188 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0x74>
 80041a2:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80041a4:	3bcd      	subs	r3, #205	; 0xcd
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b19      	cmp	r3, #25
 80041aa:	d8ed      	bhi.n	8004188 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame+0x74>
				ILI9341_hollow_rect(85, 205, 273, 230, COLOR_MAGENTA);
 80041ac:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	f240 1211 	movw	r2, #273	; 0x111
 80041b6:	23e6      	movs	r3, #230	; 0xe6
 80041b8:	21cd      	movs	r1, #205	; 0xcd
 80041ba:	2055      	movs	r0, #85	; 0x55
 80041bc:	f002 f984 	bl	80064c8 <ILI9341_hollow_rect>
			}
		}
	}

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80041c0:	2100      	movs	r1, #0
 80041c2:	4620      	mov	r0, r4
}
 80041c4:	b002      	add	sp, #8
 80041c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80041ca:	f7ff bda7 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
 80041ce:	bf00      	nop
 80041d0:	08013c49 	.word	0x08013c49
 80041d4:	080133ca 	.word	0x080133ca
 80041d8:	20002728 	.word	0x20002728

080041dc <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame>:
#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"
#include "../../Functions.h"


void STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(uint8_t *frame_id) {
 80041dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041de:	b095      	sub	sp, #84	; 0x54
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80041e0:	250f      	movs	r5, #15
 80041e2:	9500      	str	r5, [sp, #0]
 80041e4:	23ea      	movs	r3, #234	; 0xea
 80041e6:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80041ea:	2106      	movs	r1, #6
void STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(uint8_t *frame_id) {
 80041ec:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80041ee:	2033      	movs	r0, #51	; 0x33

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Set PWM frequency", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80041f0:	2401      	movs	r4, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80041f2:	f002 f8d5 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80041f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041fa:	f240 1209 	movw	r2, #265	; 0x109
 80041fe:	211e      	movs	r1, #30
 8004200:	2032      	movs	r0, #50	; 0x32
 8004202:	f002 f90f 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set PWM frequency", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004206:	e9cd 5400 	strd	r5, r4, [sp]
 800420a:	485a      	ldr	r0, [pc, #360]	; (8004374 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x198>)
 800420c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004210:	220a      	movs	r2, #10
 8004212:	2137      	movs	r1, #55	; 0x37
 8004214:	f002 f9f2 	bl	80065fc <ILI9341_print_text>
    		disp(sprintf("Hz = %i at prescaler = %i", (48*10^6/(1+i))/0xFFFF, i));
		end
	 */

	/* Show all calibration inputs */
	ILI9341_print_text("PWM Hz choices to select:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8004218:	e9cd 5400 	strd	r5, r4, [sp]
 800421c:	4856      	ldr	r0, [pc, #344]	; (8004378 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x19c>)
 800421e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004222:	2223      	movs	r2, #35	; 0x23
 8004224:	2137      	movs	r1, #55	; 0x37
 8004226:	f002 f9e9 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Hz=((48*10^6/(s+1))/65535", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 800422a:	e9cd 5400 	strd	r5, r4, [sp]
 800422e:	4853      	ldr	r0, [pc, #332]	; (800437c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1a0>)
 8004230:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004234:	222d      	movs	r2, #45	; 0x2d
 8004236:	2137      	movs	r1, #55	; 0x37
 8004238:	f002 f9e0 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("s=Prescaler 0 to 65535", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 800423c:	2237      	movs	r2, #55	; 0x37
 800423e:	4611      	mov	r1, r2
 8004240:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004244:	e9cd 5400 	strd	r5, r4, [sp]
 8004248:	484d      	ldr	r0, [pc, #308]	; (8004380 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1a4>)
 800424a:	f002 f9d7 	bl	80065fc <ILI9341_print_text>

	/* Show selected frequency */
	char text[50];
	uint16_t prescaler_for_PWM_0_3, prescaler_for_PWM_4_7;
	STM32_PLC_Flash_Get_PWM_Prescalers(&prescaler_for_PWM_0_3, &prescaler_for_PWM_4_7);
 800424e:	f10d 0116 	add.w	r1, sp, #22
 8004252:	a805      	add	r0, sp, #20
 8004254:	f7fd f9f7 	bl	8001646 <STM32_PLC_Flash_Get_PWM_Prescalers>
	ILI9341_print_text("Current prescaler settings:", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8004258:	e9cd 5400 	strd	r5, r4, [sp]
 800425c:	4849      	ldr	r0, [pc, #292]	; (8004384 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1a8>)
 800425e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004262:	2241      	movs	r2, #65	; 0x41
 8004264:	2137      	movs	r1, #55	; 0x37
 8004266:	f002 f9c9 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "PWM0 to PWM3:%i PWM4 to PWM7:%i", prescaler_for_PWM_0_3, prescaler_for_PWM_4_7);
 800426a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800426e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8004272:	4945      	ldr	r1, [pc, #276]	; (8004388 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1ac>)
 8004274:	a807      	add	r0, sp, #28
 8004276:	f00a ffbb 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);

	/* Select settings button */
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 800427a:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800427e:	e9cd 5400 	strd	r5, r4, [sp]
 8004282:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004286:	224b      	movs	r2, #75	; 0x4b
 8004288:	2137      	movs	r1, #55	; 0x37
 800428a:	a807      	add	r0, sp, #28
 800428c:	f002 f9b6 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 8004290:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 8004292:	23dc      	movs	r3, #220	; 0xdc
 8004294:	f240 1211 	movw	r2, #273	; 0x111
 8004298:	21c3      	movs	r1, #195	; 0xc3
 800429a:	2055      	movs	r0, #85	; 0x55
 800429c:	9700      	str	r7, [sp, #0]
 800429e:	f002 f87f 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 80042a2:	23dc      	movs	r3, #220	; 0xdc
 80042a4:	f240 1211 	movw	r2, #273	; 0x111
 80042a8:	21c3      	movs	r1, #195	; 0xc3
 80042aa:	2055      	movs	r0, #85	; 0x55
 80042ac:	9500      	str	r5, [sp, #0]
 80042ae:	f002 f90b 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Select PWM freq", 90, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80042b2:	2302      	movs	r3, #2
 80042b4:	e9cd 7300 	strd	r7, r3, [sp]
 80042b8:	4834      	ldr	r0, [pc, #208]	; (800438c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1b0>)
 80042ba:	462b      	mov	r3, r5
 80042bc:	22c8      	movs	r2, #200	; 0xc8
 80042be:	215a      	movs	r1, #90	; 0x5a
 80042c0:	f002 f99c 	bl	80065fc <ILI9341_print_text>

	/* Logic for request button */
	STM32_PLC_LCD_Call_One_Button_Logic(85, 195, 273, 220);
 80042c4:	23dc      	movs	r3, #220	; 0xdc
 80042c6:	f240 1211 	movw	r2, #273	; 0x111
 80042ca:	21c3      	movs	r1, #195	; 0xc3
 80042cc:	2055      	movs	r0, #85	; 0x55
 80042ce:	f003 f875 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set PWM frequency?") == 0) {
 80042d2:	482f      	ldr	r0, [pc, #188]	; (8004390 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1b4>)
 80042d4:	f7fe fa30 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80042d8:	b928      	cbnz	r0, 80042e6 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x10a>
	else
		STM32_PLC_PWM4_To_PWM7_Set_Prescaler(prescaler, true);


	/* Show main frame again */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80042da:	2100      	movs	r1, #0
 80042dc:	4630      	mov	r0, r6
 80042de:	f7ff fd1d 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 80042e2:	b015      	add	sp, #84	; 0x54
 80042e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Set setting for PWM0-PWM3=0 or PWM4-PWM7=1") == 0) {
 80042e6:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1b8>)
 80042e8:	aa06      	add	r2, sp, #24
 80042ea:	4629      	mov	r1, r5
 80042ec:	4628      	mov	r0, r5
 80042ee:	f001 fc1d 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d0f1      	beq.n	80042da <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xfe>
	if(number_value < 0)
 80042f6:	eddd 7a06 	vldr	s15, [sp, #24]
 80042fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	d42c      	bmi.n	800435e <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x182>
	else if(number_value > 1)
 8004304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004310:	dc05      	bgt.n	800431e <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x142>
		PWM_TIM = (uint8_t) number_value;
 8004312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004316:	edcd 7a03 	vstr	s15, [sp, #12]
 800431a:	f89d 400c 	ldrb.w	r4, [sp, #12]
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter prescaler 0 to 65535") == 0) {
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1bc>)
 8004320:	2100      	movs	r1, #0
 8004322:	aa06      	add	r2, sp, #24
 8004324:	4608      	mov	r0, r1
 8004326:	f001 fc01 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 800432a:	2800      	cmp	r0, #0
 800432c:	d0d5      	beq.n	80042da <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xfe>
	if(number_value < 0)
 800432e:	eddd 7a06 	vldr	s15, [sp, #24]
 8004332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	d412      	bmi.n	8004362 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x186>
	else if(number_value > 65535)
 800433c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800439c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x1c0>
 8004340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004348:	dc0d      	bgt.n	8004366 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x18a>
		prescaler = (uint16_t) number_value;
 800434a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800434e:	ee17 3a90 	vmov	r3, s15
 8004352:	b298      	uxth	r0, r3
		STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler, true);
 8004354:	2101      	movs	r1, #1
	if(PWM_TIM == 0)
 8004356:	b94c      	cbnz	r4, 800436c <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x190>
		STM32_PLC_PWM0_To_PWM3_Set_Prescaler(prescaler, true);
 8004358:	f7fd fc8a 	bl	8001c70 <STM32_PLC_PWM0_To_PWM3_Set_Prescaler>
 800435c:	e7bd      	b.n	80042da <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xfe>
		PWM_TIM = 0;
 800435e:	462c      	mov	r4, r5
 8004360:	e7dd      	b.n	800431e <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x142>
		prescaler = 0;
 8004362:	2000      	movs	r0, #0
 8004364:	e7f6      	b.n	8004354 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x178>
		prescaler = 65535;
 8004366:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800436a:	e7f3      	b.n	8004354 <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0x178>
		STM32_PLC_PWM4_To_PWM7_Set_Prescaler(prescaler, true);
 800436c:	f7fd fc8a 	bl	8001c84 <STM32_PLC_PWM4_To_PWM7_Set_Prescaler>
 8004370:	e7b3      	b.n	80042da <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame+0xfe>
 8004372:	bf00      	nop
 8004374:	08013c65 	.word	0x08013c65
 8004378:	08013c77 	.word	0x08013c77
 800437c:	08013c91 	.word	0x08013c91
 8004380:	08013cab 	.word	0x08013cab
 8004384:	08013cc2 	.word	0x08013cc2
 8004388:	08013cde 	.word	0x08013cde
 800438c:	08013cfe 	.word	0x08013cfe
 8004390:	08013d0e 	.word	0x08013d0e
 8004394:	08013d30 	.word	0x08013d30
 8004398:	08013d5b 	.word	0x08013d5b
 800439c:	477fff00 	.word	0x477fff00

080043a0 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame>:
#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"
#include "../../../Functions.h"
#include "../../../Open SAE J1939/SAE_J1939/SAE_J1939-81_Network_Management_Layer/Network_Management_Layer.h"

void STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	b093      	sub	sp, #76	; 0x4c
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80043a6:	260f      	movs	r6, #15
void STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80043a8:	4605      	mov	r5, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80043aa:	23ea      	movs	r3, #234	; 0xea
 80043ac:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80043b0:	2033      	movs	r0, #51	; 0x33
void STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80043b2:	4688      	mov	r8, r1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80043b4:	9600      	str	r6, [sp, #0]
 80043b6:	2106      	movs	r1, #6
 80043b8:	f001 fff2 	bl	80063a0 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);

	ILI9341_print_text("ECU address and connections", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80043bc:	2701      	movs	r7, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80043be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043c2:	f240 1209 	movw	r2, #265	; 0x109
 80043c6:	211e      	movs	r1, #30
 80043c8:	2032      	movs	r0, #50	; 0x32

	/* This ECU address */
	char text[50];
	sprintf(text, "This ECU address:%i", j1939->information_this_ECU.this_ECU_address);
 80043ca:	f505 5980 	add.w	r9, r5, #4096	; 0x1000
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80043ce:	f002 f829 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("ECU address and connections", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80043d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043d6:	485c      	ldr	r0, [pc, #368]	; (8004548 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1a8>)

	/* Which ECU are connected */
	sprintf(text, "Other ECU addresses:");
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
		sprintf(text, "%i,", j1939->other_ECU_address[i]); /* Important with space */
 80043d8:	f8df b190 	ldr.w	fp, [pc, #400]	; 800456c <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1cc>
	ILI9341_print_text("ECU address and connections", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80043dc:	220a      	movs	r2, #10
 80043de:	2137      	movs	r1, #55	; 0x37
 80043e0:	e9cd 6700 	strd	r6, r7, [sp]
 80043e4:	f002 f90a 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "This ECU address:%i", j1939->information_this_ECU.this_ECU_address);
 80043e8:	f899 22d4 	ldrb.w	r2, [r9, #724]	; 0x2d4
 80043ec:	4957      	ldr	r1, [pc, #348]	; (800454c <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1ac>)
 80043ee:	a805      	add	r0, sp, #20
 80043f0:	f00a fefe 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 80043f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043f8:	2223      	movs	r2, #35	; 0x23
 80043fa:	2137      	movs	r1, #55	; 0x37
 80043fc:	a805      	add	r0, sp, #20
 80043fe:	e9cd 6700 	strd	r6, r7, [sp]
 8004402:	f002 f8fb 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Other ECU connected:%i", j1939->number_of_other_ECU);
 8004406:	7b6a      	ldrb	r2, [r5, #13]
 8004408:	4951      	ldr	r1, [pc, #324]	; (8004550 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1b0>)
 800440a:	a805      	add	r0, sp, #20
 800440c:	f00a fef0 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8004410:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004414:	222d      	movs	r2, #45	; 0x2d
 8004416:	2137      	movs	r1, #55	; 0x37
 8004418:	a805      	add	r0, sp, #20
 800441a:	e9cd 6700 	strd	r6, r7, [sp]
 800441e:	f002 f8ed 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Other ECU addresses:");
 8004422:	494c      	ldr	r1, [pc, #304]	; (8004554 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1b4>)
 8004424:	a805      	add	r0, sp, #20
 8004426:	f00a ff03 	bl	800f230 <strcpy>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 800442a:	2237      	movs	r2, #55	; 0x37
 800442c:	e9cd 6700 	strd	r6, r7, [sp]
 8004430:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004434:	4611      	mov	r1, r2
 8004436:	a805      	add	r0, sp, #20
 8004438:	f002 f8e0 	bl	80065fc <ILI9341_print_text>
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 800443c:	f04f 0a00 	mov.w	sl, #0
 8004440:	7b6b      	ldrb	r3, [r5, #13]
 8004442:	fa5f f48a 	uxtb.w	r4, sl
 8004446:	42a3      	cmp	r3, r4
 8004448:	d83d      	bhi.n	80044c6 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x126>
		ILI9341_print_text(text, 55 + i*15, 65, COLOR_YELLOW, COLOR_NAVY, 1);
	}

	/* How many ECU are not connected */
	sprintf(text, "Other ECU not connected:%i", j1939->number_of_cannot_claim_address);
 800444a:	7baa      	ldrb	r2, [r5, #14]
 800444c:	4942      	ldr	r1, [pc, #264]	; (8004558 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1b8>)
 800444e:	a805      	add	r0, sp, #20
 8004450:	f00a fece 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8004454:	230f      	movs	r3, #15
 8004456:	2201      	movs	r2, #1
 8004458:	e9cd 3200 	strd	r3, r2, [sp]
 800445c:	2137      	movs	r1, #55	; 0x37
 800445e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004462:	224b      	movs	r2, #75	; 0x4b
 8004464:	a805      	add	r0, sp, #20

	/* Button */
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8004466:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800446a:	f002 f8c7 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 800446e:	2400      	movs	r4, #0
	ILI9341_fill_rect(65, 195, 300, 220, COLOR_GREEN);
 8004470:	23dc      	movs	r3, #220	; 0xdc
 8004472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004476:	21c3      	movs	r1, #195	; 0xc3
 8004478:	2041      	movs	r0, #65	; 0x41
 800447a:	9600      	str	r6, [sp, #0]
 800447c:	f001 ff90 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(65, 195, 300, 220, COLOR_BLACK);
 8004480:	23dc      	movs	r3, #220	; 0xdc
 8004482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004486:	21c3      	movs	r1, #195	; 0xc3
 8004488:	2041      	movs	r0, #65	; 0x41
 800448a:	9400      	str	r4, [sp, #0]
 800448c:	f002 f81c 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Set the ECU address", 70, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8004490:	2302      	movs	r3, #2
 8004492:	e9cd 6300 	strd	r6, r3, [sp]
 8004496:	4831      	ldr	r0, [pc, #196]	; (800455c <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1bc>)
 8004498:	4623      	mov	r3, r4
 800449a:	22c8      	movs	r2, #200	; 0xc8
 800449c:	2146      	movs	r1, #70	; 0x46
 800449e:	f002 f8ad 	bl	80065fc <ILI9341_print_text>

	/* Logic for button */
	STM32_PLC_LCD_Call_One_Button_Logic(65, 195, 300, 220);
 80044a2:	23dc      	movs	r3, #220	; 0xdc
 80044a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044a8:	21c3      	movs	r1, #195	; 0xc3
 80044aa:	2041      	movs	r0, #65	; 0x41
 80044ac:	f002 ff86 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set the ECU address?") == 0) {
 80044b0:	482b      	ldr	r0, [pc, #172]	; (8004560 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1c0>)
 80044b2:	f7fe f941 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80044b6:	b9d8      	cbnz	r0, 80044f0 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x150>

	/* Send new address to all other ECU */
	SAE_J1939_Response_Request_Address_Claimed(j1939);

	/* Done */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80044b8:	2100      	movs	r1, #0
 80044ba:	4640      	mov	r0, r8
 80044bc:	f7ff fc2e 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 80044c0:	b013      	add	sp, #76	; 0x4c
 80044c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sprintf(text, "%i,", j1939->other_ECU_address[i]); /* Important with space */
 80044c6:	192b      	adds	r3, r5, r4
 80044c8:	4659      	mov	r1, fp
 80044ca:	7bda      	ldrb	r2, [r3, #15]
 80044cc:	a805      	add	r0, sp, #20
		ILI9341_print_text(text, 55 + i*15, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80044ce:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
		sprintf(text, "%i,", j1939->other_ECU_address[i]); /* Important with space */
 80044d2:	f00a fe8d 	bl	800f1f0 <siprintf>
		ILI9341_print_text(text, 55 + i*15, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80044d6:	e9cd 6700 	strd	r6, r7, [sp]
 80044da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80044de:	2241      	movs	r2, #65	; 0x41
 80044e0:	f104 0137 	add.w	r1, r4, #55	; 0x37
 80044e4:	a805      	add	r0, sp, #20
 80044e6:	f002 f889 	bl	80065fc <ILI9341_print_text>
	for(uint8_t i = 0; i < j1939->number_of_other_ECU; i++){
 80044ea:	f10a 0a01 	add.w	sl, sl, #1
 80044ee:	e7a7      	b.n	8004440 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0xa0>
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter address between 0 and 253") == 0) {
 80044f0:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1c4>)
 80044f2:	aa04      	add	r2, sp, #16
 80044f4:	4621      	mov	r1, r4
 80044f6:	4620      	mov	r0, r4
 80044f8:	f001 fb18 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d0db      	beq.n	80044b8 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x118>
	if(number_value < 0)
 8004500:	eddd 7a04 	vldr	s15, [sp, #16]
 8004504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450c:	d40d      	bmi.n	800452a <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x18a>
	else if(number_value > 253)
 800450e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004568 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x1c8>
 8004512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		address = (uint8_t) number_value;
 800451a:	bfd7      	itett	le
 800451c:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		address = 253;
 8004520:	24fd      	movgt	r4, #253	; 0xfd
		address = (uint8_t) number_value;
 8004522:	edcd 7a03 	vstrle	s15, [sp, #12]
 8004526:	f89d 400c 	ldrble.w	r4, [sp, #12]
	SAE_J1939_Send_Address_Delete(j1939, 0xFF, j1939->information_this_ECU.this_ECU_address);
 800452a:	f899 22d4 	ldrb.w	r2, [r9, #724]	; 0x2d4
 800452e:	21ff      	movs	r1, #255	; 0xff
 8004530:	4628      	mov	r0, r5
 8004532:	f7fe f877 	bl	8002624 <SAE_J1939_Send_Address_Delete>
	STM32_PLC_Flash_Set_J1939_This_ECU_Address(address);
 8004536:	4620      	mov	r0, r4
	j1939->information_this_ECU.this_ECU_address = address;
 8004538:	f889 42d4 	strb.w	r4, [r9, #724]	; 0x2d4
	STM32_PLC_Flash_Set_J1939_This_ECU_Address(address);
 800453c:	f7fc ffee 	bl	800151c <STM32_PLC_Flash_Set_J1939_This_ECU_Address>
	SAE_J1939_Response_Request_Address_Claimed(j1939);
 8004540:	4628      	mov	r0, r5
 8004542:	f7fe f833 	bl	80025ac <SAE_J1939_Response_Request_Address_Claimed>
 8004546:	e7b7      	b.n	80044b8 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame+0x118>
 8004548:	08013d76 	.word	0x08013d76
 800454c:	08013d92 	.word	0x08013d92
 8004550:	08013da6 	.word	0x08013da6
 8004554:	08013dbd 	.word	0x08013dbd
 8004558:	08013dd6 	.word	0x08013dd6
 800455c:	08013df1 	.word	0x08013df1
 8004560:	08013e05 	.word	0x08013e05
 8004564:	08013e29 	.word	0x08013e29
 8004568:	437d0000 	.word	0x437d0000
 800456c:	08013dd2 	.word	0x08013dd2

08004570 <show_numpad_question>:

	/* Done */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
}

static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 8004570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004572:	460f      	mov	r7, r1
	bool minusbutton_show = false;
	bool decimalbutton_show = false;
	float number_value;
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 8004574:	2100      	movs	r1, #0
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 8004576:	4616      	mov	r6, r2
 8004578:	461d      	mov	r5, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 800457a:	aa01      	add	r2, sp, #4
 800457c:	4603      	mov	r3, r0
 800457e:	4608      	mov	r0, r1
 8004580:	f001 fad4 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8004584:	4604      	mov	r4, r0
 8004586:	b930      	cbnz	r0, 8004596 <show_numpad_question+0x26>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004588:	4601      	mov	r1, r0
 800458a:	4638      	mov	r0, r7
 800458c:	f7ff fbc6 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
	else if(number_value > max_value)
		*value = max_value;
	else
		*value = (uint32_t) number_value;
	return 1;
}
 8004590:	4620      	mov	r0, r4
 8004592:	b003      	add	sp, #12
 8004594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(number_value < 0)
 8004596:	eddd 7a01 	vldr	s15, [sp, #4]
 800459a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	d503      	bpl.n	80045ac <show_numpad_question+0x3c>
		*value = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	602b      	str	r3, [r5, #0]
	return 1;
 80045a8:	2401      	movs	r4, #1
 80045aa:	e7f1      	b.n	8004590 <show_numpad_question+0x20>
	else if(number_value > max_value)
 80045ac:	ee07 6a10 	vmov	s14, r6
 80045b0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*value = (uint32_t) number_value;
 80045bc:	bfd6      	itet	le
 80045be:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		*value = max_value;
 80045c2:	602e      	strgt	r6, [r5, #0]
		*value = (uint32_t) number_value;
 80045c4:	edc5 7a00 	vstrle	s15, [r5]
 80045c8:	e7ee      	b.n	80045a8 <show_numpad_question+0x38>
	...

080045cc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	b0a1      	sub	sp, #132	; 0x84
 80045d0:	4607      	mov	r7, r0
	if(show_numpad_question("Enter identity between 0 and 2097151", frame_id, 2097151, &identity_number) == 0)
 80045d2:	4ac3      	ldr	r2, [pc, #780]	; (80048e0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x314>)
 80045d4:	48c3      	ldr	r0, [pc, #780]	; (80048e4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x318>)
 80045d6:	ab08      	add	r3, sp, #32
void STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(J1939 *j1939, uint8_t *frame_id) {
 80045d8:	460c      	mov	r4, r1
	if(show_numpad_question("Enter identity between 0 and 2097151", frame_id, 2097151, &identity_number) == 0)
 80045da:	f7ff ffc9 	bl	8004570 <show_numpad_question>
 80045de:	2800      	cmp	r0, #0
 80045e0:	f000 815b 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter manufacturer code between 0 and 2047", frame_id, 2047, &manufacturer_code) == 0)
 80045e4:	48c0      	ldr	r0, [pc, #768]	; (80048e8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x31c>)
 80045e6:	ab09      	add	r3, sp, #36	; 0x24
 80045e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80045ec:	4621      	mov	r1, r4
 80045ee:	f7ff ffbf 	bl	8004570 <show_numpad_question>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	f000 8151 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter function instance between 0 and 31", frame_id, 31, &function_instance) == 0)
 80045f8:	48bc      	ldr	r0, [pc, #752]	; (80048ec <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x320>)
 80045fa:	ab0a      	add	r3, sp, #40	; 0x28
 80045fc:	221f      	movs	r2, #31
 80045fe:	4621      	mov	r1, r4
 8004600:	f7ff ffb6 	bl	8004570 <show_numpad_question>
 8004604:	2800      	cmp	r0, #0
 8004606:	f000 8148 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter ECU instance between 0 and 7", frame_id, 7, &ECU_instance) == 0)
 800460a:	48b9      	ldr	r0, [pc, #740]	; (80048f0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x324>)
 800460c:	ab0b      	add	r3, sp, #44	; 0x2c
 800460e:	2207      	movs	r2, #7
 8004610:	4621      	mov	r1, r4
 8004612:	f7ff ffad 	bl	8004570 <show_numpad_question>
 8004616:	2800      	cmp	r0, #0
 8004618:	f000 813f 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter function between 0 and 255", frame_id, 255, &function) == 0)
 800461c:	48b5      	ldr	r0, [pc, #724]	; (80048f4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x328>)
 800461e:	ab0c      	add	r3, sp, #48	; 0x30
 8004620:	22ff      	movs	r2, #255	; 0xff
 8004622:	4621      	mov	r1, r4
 8004624:	f7ff ffa4 	bl	8004570 <show_numpad_question>
 8004628:	2800      	cmp	r0, #0
 800462a:	f000 8136 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter vehicle system between 0 and 127", frame_id, 127, &vehicle_system) == 0)
 800462e:	48b2      	ldr	r0, [pc, #712]	; (80048f8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x32c>)
 8004630:	ab0d      	add	r3, sp, #52	; 0x34
 8004632:	227f      	movs	r2, #127	; 0x7f
 8004634:	4621      	mov	r1, r4
 8004636:	f7ff ff9b 	bl	8004570 <show_numpad_question>
 800463a:	2800      	cmp	r0, #0
 800463c:	f000 812d 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter arbitrary address capable between 0 and 1", frame_id, 1, &arbitrary_address_capable) == 0)
 8004640:	48ae      	ldr	r0, [pc, #696]	; (80048fc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x330>)
 8004642:	ab0e      	add	r3, sp, #56	; 0x38
 8004644:	2201      	movs	r2, #1
 8004646:	4621      	mov	r1, r4
 8004648:	f7ff ff92 	bl	8004570 <show_numpad_question>
 800464c:	2800      	cmp	r0, #0
 800464e:	f000 8124 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter industry group between 0 and 7", frame_id, 7, &industry_group) == 0)
 8004652:	48ab      	ldr	r0, [pc, #684]	; (8004900 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x334>)
 8004654:	ab0f      	add	r3, sp, #60	; 0x3c
 8004656:	2207      	movs	r2, #7
 8004658:	4621      	mov	r1, r4
 800465a:	f7ff ff89 	bl	8004570 <show_numpad_question>
 800465e:	2800      	cmp	r0, #0
 8004660:	f000 811b 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter vehicle system instance between 0 and 15", frame_id, 15, &vehicle_system_instance) == 0)
 8004664:	48a7      	ldr	r0, [pc, #668]	; (8004904 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x338>)
 8004666:	ab10      	add	r3, sp, #64	; 0x40
 8004668:	220f      	movs	r2, #15
 800466a:	4621      	mov	r1, r4
 800466c:	f7ff ff80 	bl	8004570 <show_numpad_question>
 8004670:	2800      	cmp	r0, #0
 8004672:	f000 8112 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Enter new ECU address between 0 and 253", frame_id, 253, &new_ECU_address) == 0)
 8004676:	48a4      	ldr	r0, [pc, #656]	; (8004908 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x33c>)
 8004678:	ab11      	add	r3, sp, #68	; 0x44
 800467a:	22fd      	movs	r2, #253	; 0xfd
 800467c:	4621      	mov	r1, r4
 800467e:	f7ff ff77 	bl	8004570 <show_numpad_question>
 8004682:	2800      	cmp	r0, #0
 8004684:	f000 8109 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	if(show_numpad_question("Destination of the ECU between 0 and 253", frame_id, 253, &DA) == 0)
 8004688:	48a0      	ldr	r0, [pc, #640]	; (800490c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x340>)
 800468a:	ab12      	add	r3, sp, #72	; 0x48
 800468c:	22fd      	movs	r2, #253	; 0xfd
 800468e:	4621      	mov	r1, r4
 8004690:	f7ff ff6e 	bl	8004570 <show_numpad_question>
 8004694:	2800      	cmp	r0, #0
 8004696:	f000 8100 	beq.w	800489a <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ce>
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800469a:	250f      	movs	r5, #15
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800469c:	2100      	movs	r1, #0
 800469e:	4620      	mov	r0, r4
 80046a0:	f7ff fb3c 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80046a4:	23ea      	movs	r3, #234	; 0xea
 80046a6:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80046aa:	2106      	movs	r1, #6
 80046ac:	2033      	movs	r0, #51	; 0x33
 80046ae:	9500      	str	r5, [sp, #0]
 80046b0:	f001 fe76 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_print_text("Set NAME and source address", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80046b4:	2601      	movs	r6, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80046b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80046ba:	f240 1209 	movw	r2, #265	; 0x109
 80046be:	211e      	movs	r1, #30
 80046c0:	2032      	movs	r0, #50	; 0x32
 80046c2:	f001 feaf 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Set NAME and source address", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80046c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046ca:	4891      	ldr	r0, [pc, #580]	; (8004910 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x344>)
 80046cc:	220a      	movs	r2, #10
 80046ce:	2137      	movs	r1, #55	; 0x37
 80046d0:	e9cd 5600 	strd	r5, r6, [sp]
 80046d4:	f001 ff92 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Identity:%lu", identity_number);
 80046d8:	9a08      	ldr	r2, [sp, #32]
 80046da:	498e      	ldr	r1, [pc, #568]	; (8004914 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x348>)
 80046dc:	a813      	add	r0, sp, #76	; 0x4c
 80046de:	f00a fd87 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 80046e2:	2223      	movs	r2, #35	; 0x23
 80046e4:	e9cd 5600 	strd	r5, r6, [sp]
 80046e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046ec:	2137      	movs	r1, #55	; 0x37
 80046ee:	a813      	add	r0, sp, #76	; 0x4c
 80046f0:	f001 ff84 	bl	80065fc <ILI9341_print_text>
	if(manufacturer_code == MANUFACTURER_CODE_GRAYHILL)
 80046f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046f6:	f5b2 7f93 	cmp.w	r2, #294	; 0x126
 80046fa:	f040 80d0 	bne.w	800489e <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2d2>
		sprintf(text, "Manufacturer code: Gray Hill");
 80046fe:	4986      	ldr	r1, [pc, #536]	; (8004918 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x34c>)
		sprintf(text, "Manufacturer code: SonceBoz");
 8004700:	a813      	add	r0, sp, #76	; 0x4c
 8004702:	f00a fd95 	bl	800f230 <strcpy>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8004706:	250f      	movs	r5, #15
 8004708:	2601      	movs	r6, #1
 800470a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800470e:	222d      	movs	r2, #45	; 0x2d
 8004710:	2137      	movs	r1, #55	; 0x37
 8004712:	a813      	add	r0, sp, #76	; 0x4c
 8004714:	e9cd 5600 	strd	r5, r6, [sp]
 8004718:	f001 ff70 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Function instance:%i", (uint8_t)function_instance);
 800471c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8004720:	497e      	ldr	r1, [pc, #504]	; (800491c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x350>)
 8004722:	a813      	add	r0, sp, #76	; 0x4c
 8004724:	f00a fd64 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8004728:	2237      	movs	r2, #55	; 0x37
 800472a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800472e:	4611      	mov	r1, r2
 8004730:	a813      	add	r0, sp, #76	; 0x4c
 8004732:	e9cd 5600 	strd	r5, r6, [sp]
 8004736:	f001 ff61 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "ECU instance:%i", (uint8_t)ECU_instance);
 800473a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800473e:	4978      	ldr	r1, [pc, #480]	; (8004920 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x354>)
 8004740:	a813      	add	r0, sp, #76	; 0x4c
 8004742:	f00a fd55 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8004746:	2241      	movs	r2, #65	; 0x41
 8004748:	e9cd 5600 	strd	r5, r6, [sp]
 800474c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004750:	2137      	movs	r1, #55	; 0x37
 8004752:	a813      	add	r0, sp, #76	; 0x4c
 8004754:	f001 ff52 	bl	80065fc <ILI9341_print_text>
	if(function == FUNCTION_AUXILIARY_VALVES_CONTROL)
 8004758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800475a:	2a81      	cmp	r2, #129	; 0x81
 800475c:	f040 80ab 	bne.w	80048b6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2ea>
		sprintf(text, "Function:Auxiliary Valves Control");
 8004760:	4970      	ldr	r1, [pc, #448]	; (8004924 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x358>)
		sprintf(text, "Function:VDC Module");
 8004762:	a813      	add	r0, sp, #76	; 0x4c
 8004764:	f00a fd64 	bl	800f230 <strcpy>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8004768:	250f      	movs	r5, #15
 800476a:	2601      	movs	r6, #1
 800476c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004770:	224b      	movs	r2, #75	; 0x4b
 8004772:	2137      	movs	r1, #55	; 0x37
 8004774:	a813      	add	r0, sp, #76	; 0x4c
 8004776:	e9cd 5600 	strd	r5, r6, [sp]
 800477a:	f001 ff3f 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Vehicle system:%i", (uint8_t)vehicle_system);
 800477e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8004782:	4969      	ldr	r1, [pc, #420]	; (8004928 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x35c>)
 8004784:	a813      	add	r0, sp, #76	; 0x4c
 8004786:	f00a fd33 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 800478a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800478e:	e9cd 5600 	strd	r5, r6, [sp]
 8004792:	2255      	movs	r2, #85	; 0x55
 8004794:	2137      	movs	r1, #55	; 0x37
 8004796:	a813      	add	r0, sp, #76	; 0x4c
 8004798:	f001 ff30 	bl	80065fc <ILI9341_print_text>
	if(arbitrary_address_capable > 0)
 800479c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8093 	beq.w	80048ca <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2fe>
		sprintf(text, "Arbitrary address capable:Yes");
 80047a4:	4961      	ldr	r1, [pc, #388]	; (800492c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x360>)
		sprintf(text, "Arbitrary address capable:No");
 80047a6:	a813      	add	r0, sp, #76	; 0x4c
 80047a8:	f00a fd42 	bl	800f230 <strcpy>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 80047ac:	230f      	movs	r3, #15
 80047ae:	2201      	movs	r2, #1
 80047b0:	e9cd 3200 	strd	r3, r2, [sp]
 80047b4:	2137      	movs	r1, #55	; 0x37
 80047b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80047ba:	225f      	movs	r2, #95	; 0x5f
 80047bc:	a813      	add	r0, sp, #76	; 0x4c
 80047be:	f001 ff1d 	bl	80065fc <ILI9341_print_text>
	if(industry_group == INDUSTRY_GROUP_GLOBAL)
 80047c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f040 8082 	bne.w	80048ce <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x302>
		sprintf(text, "Industry group:Global");
 80047ca:	4959      	ldr	r1, [pc, #356]	; (8004930 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x364>)
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80047cc:	250f      	movs	r5, #15
 80047ce:	2601      	movs	r6, #1
		sprintf(text, "Industry group:None");
 80047d0:	a813      	add	r0, sp, #76	; 0x4c
 80047d2:	f00a fd2d 	bl	800f230 <strcpy>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 80047d6:	e9cd 5600 	strd	r5, r6, [sp]
 80047da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80047de:	2269      	movs	r2, #105	; 0x69
 80047e0:	2137      	movs	r1, #55	; 0x37
 80047e2:	a813      	add	r0, sp, #76	; 0x4c
 80047e4:	f001 ff0a 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Vehicle system instance:%i", (uint8_t)vehicle_system_instance);
 80047e8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80047ec:	4951      	ldr	r1, [pc, #324]	; (8004934 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x368>)
 80047ee:	a813      	add	r0, sp, #76	; 0x4c
 80047f0:	f00a fcfe 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 80047f4:	e9cd 5600 	strd	r5, r6, [sp]
 80047f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80047fc:	2273      	movs	r2, #115	; 0x73
 80047fe:	2137      	movs	r1, #55	; 0x37
 8004800:	a813      	add	r0, sp, #76	; 0x4c
 8004802:	f001 fefb 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "New ECU address:%i", (uint8_t)new_ECU_address);
 8004806:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800480a:	494b      	ldr	r1, [pc, #300]	; (8004938 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x36c>)
 800480c:	a813      	add	r0, sp, #76	; 0x4c
 800480e:	f00a fcef 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8004812:	e9cd 5600 	strd	r5, r6, [sp]
 8004816:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800481a:	227d      	movs	r2, #125	; 0x7d
 800481c:	2137      	movs	r1, #55	; 0x37
 800481e:	a813      	add	r0, sp, #76	; 0x4c
 8004820:	f001 feec 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "Current ECU address:%i", (uint8_t)DA);
 8004824:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8004828:	4944      	ldr	r1, [pc, #272]	; (800493c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x370>)
 800482a:	a813      	add	r0, sp, #76	; 0x4c
 800482c:	f00a fce0 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8004830:	e9cd 5600 	strd	r5, r6, [sp]
 8004834:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004838:	2287      	movs	r2, #135	; 0x87
 800483a:	2137      	movs	r1, #55	; 0x37
 800483c:	a813      	add	r0, sp, #76	; 0x4c
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 800483e:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8004842:	f001 fedb 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8004846:	2500      	movs	r5, #0
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 8004848:	23dc      	movs	r3, #220	; 0xdc
 800484a:	f240 1225 	movw	r2, #293	; 0x125
 800484e:	21c3      	movs	r1, #195	; 0xc3
 8004850:	2046      	movs	r0, #70	; 0x46
 8004852:	9600      	str	r6, [sp, #0]
 8004854:	f001 fda4 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8004858:	23dc      	movs	r3, #220	; 0xdc
 800485a:	f240 1225 	movw	r2, #293	; 0x125
 800485e:	21c3      	movs	r1, #195	; 0xc3
 8004860:	2046      	movs	r0, #70	; 0x46
 8004862:	9500      	str	r5, [sp, #0]
 8004864:	f001 fe30 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Set name & address", 75, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8004868:	2302      	movs	r3, #2
 800486a:	e9cd 6300 	strd	r6, r3, [sp]
 800486e:	4834      	ldr	r0, [pc, #208]	; (8004940 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x374>)
 8004870:	462b      	mov	r3, r5
 8004872:	22c8      	movs	r2, #200	; 0xc8
 8004874:	214b      	movs	r1, #75	; 0x4b
 8004876:	f001 fec1 	bl	80065fc <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(70, 195, 293, 220);
 800487a:	21c3      	movs	r1, #195	; 0xc3
 800487c:	23dc      	movs	r3, #220	; 0xdc
 800487e:	f240 1225 	movw	r2, #293	; 0x125
 8004882:	2046      	movs	r0, #70	; 0x46
 8004884:	f002 fd9a 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set NAME and address?") == 0) {
 8004888:	482e      	ldr	r0, [pc, #184]	; (8004944 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x378>)
 800488a:	f7fd ff55 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 800488e:	4601      	mov	r1, r0
 8004890:	2800      	cmp	r0, #0
 8004892:	d174      	bne.n	800497e <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3b2>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004894:	4620      	mov	r0, r4
 8004896:	f7ff fa41 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 800489a:	b021      	add	sp, #132	; 0x84
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (manufacturer_code == MANUFACTURER_CODE_SONCEBOZ)
 800489e:	f240 1347 	movw	r3, #327	; 0x147
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d101      	bne.n	80048aa <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2de>
		sprintf(text, "Manufacturer code: SonceBoz");
 80048a6:	4928      	ldr	r1, [pc, #160]	; (8004948 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x37c>)
 80048a8:	e72a      	b.n	8004700 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x134>
		sprintf(text, "Manufacturer code:%i", (uint16_t)manufacturer_code);
 80048aa:	4928      	ldr	r1, [pc, #160]	; (800494c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x380>)
 80048ac:	b292      	uxth	r2, r2
 80048ae:	a813      	add	r0, sp, #76	; 0x4c
 80048b0:	f00a fc9e 	bl	800f1f0 <siprintf>
 80048b4:	e727      	b.n	8004706 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x13a>
	else if (function == FUNCTION_VDC_MODULE)
 80048b6:	2a87      	cmp	r2, #135	; 0x87
 80048b8:	d101      	bne.n	80048be <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2f2>
		sprintf(text, "Function:VDC Module");
 80048ba:	4925      	ldr	r1, [pc, #148]	; (8004950 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x384>)
 80048bc:	e751      	b.n	8004762 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x196>
		sprintf(text, "Function:%i", (uint8_t)function);
 80048be:	4925      	ldr	r1, [pc, #148]	; (8004954 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x388>)
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	a813      	add	r0, sp, #76	; 0x4c
 80048c4:	f00a fc94 	bl	800f1f0 <siprintf>
 80048c8:	e74e      	b.n	8004768 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x19c>
		sprintf(text, "Arbitrary address capable:No");
 80048ca:	4923      	ldr	r1, [pc, #140]	; (8004958 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x38c>)
 80048cc:	e76b      	b.n	80047a6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x1da>
	else if(industry_group == INDUSTRY_GROUP_CONSTRUCTION)
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d101      	bne.n	80048d6 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x30a>
		sprintf(text, "Industry group:Construction");
 80048d2:	4922      	ldr	r1, [pc, #136]	; (800495c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x390>)
 80048d4:	e77a      	b.n	80047cc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
	else if(industry_group == INDUSTRY_GROUP_AGRICULTURAL_AND_FORESTRY)
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d144      	bne.n	8004964 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x398>
		sprintf(text, "Industry group:Agricultural and forestry");
 80048da:	4921      	ldr	r1, [pc, #132]	; (8004960 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x394>)
 80048dc:	e776      	b.n	80047cc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
 80048de:	bf00      	nop
 80048e0:	001fffff 	.word	0x001fffff
 80048e4:	08013e49 	.word	0x08013e49
 80048e8:	08013e6e 	.word	0x08013e6e
 80048ec:	08013e99 	.word	0x08013e99
 80048f0:	08013ec2 	.word	0x08013ec2
 80048f4:	08013ee5 	.word	0x08013ee5
 80048f8:	08013f06 	.word	0x08013f06
 80048fc:	08013f2d 	.word	0x08013f2d
 8004900:	08013f5d 	.word	0x08013f5d
 8004904:	08013f82 	.word	0x08013f82
 8004908:	08013fb1 	.word	0x08013fb1
 800490c:	08013fd9 	.word	0x08013fd9
 8004910:	08014002 	.word	0x08014002
 8004914:	0801401e 	.word	0x0801401e
 8004918:	0801402b 	.word	0x0801402b
 800491c:	08014079 	.word	0x08014079
 8004920:	0801408e 	.word	0x0801408e
 8004924:	0801409e 	.word	0x0801409e
 8004928:	080140e0 	.word	0x080140e0
 800492c:	080140f2 	.word	0x080140f2
 8004930:	0801412d 	.word	0x0801412d
 8004934:	080141f6 	.word	0x080141f6
 8004938:	08014211 	.word	0x08014211
 800493c:	08014224 	.word	0x08014224
 8004940:	0801423b 	.word	0x0801423b
 8004944:	0801424e 	.word	0x0801424e
 8004948:	08014048 	.word	0x08014048
 800494c:	08014064 	.word	0x08014064
 8004950:	080140c0 	.word	0x080140c0
 8004954:	080140d4 	.word	0x080140d4
 8004958:	08014110 	.word	0x08014110
 800495c:	08014143 	.word	0x08014143
 8004960:	0801415f 	.word	0x0801415f
	else if(industry_group == INDUSTRY_GROUP_INDUSTRIAL_CONTROL_PROCESS)
 8004964:	2b05      	cmp	r3, #5
 8004966:	d101      	bne.n	800496c <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3a0>
		sprintf(text, "Industry group:Industrial control process");
 8004968:	4916      	ldr	r1, [pc, #88]	; (80049c4 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3f8>)
 800496a:	e72f      	b.n	80047cc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
	else if(industry_group == INDUSTRY_GROUP_MARINE)
 800496c:	2b04      	cmp	r3, #4
 800496e:	d101      	bne.n	8004974 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3a8>
		sprintf(text, "Industry group:Marine");
 8004970:	4915      	ldr	r1, [pc, #84]	; (80049c8 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x3fc>)
 8004972:	e72b      	b.n	80047cc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
	else if(industry_group == INDUSTRY_GROUP_ON_HIGHWAY)
 8004974:	2b01      	cmp	r3, #1
		sprintf(text, "Industry group:On highway");
 8004976:	bf0c      	ite	eq
 8004978:	4914      	ldreq	r1, [pc, #80]	; (80049cc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x400>)
		sprintf(text, "Industry group:None");
 800497a:	4915      	ldrne	r1, [pc, #84]	; (80049d0 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x404>)
 800497c:	e726      	b.n	80047cc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x200>
	SAE_J1939_Send_Commanded_Address(j1939, DA, new_ECU_address, identity_number, manufacturer_code, function_instance, ECU_instance, function, vehicle_system, arbitrary_address_capable, industry_group, vehicle_system_instance);
 800497e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8004982:	9307      	str	r3, [sp, #28]
 8004984:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004988:	9306      	str	r3, [sp, #24]
 800498a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800498e:	9305      	str	r3, [sp, #20]
 8004990:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8004994:	9304      	str	r3, [sp, #16]
 8004996:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800499a:	9303      	str	r3, [sp, #12]
 800499c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80049a0:	9302      	str	r3, [sp, #8]
 80049a2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80049ac:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80049b6:	9b08      	ldr	r3, [sp, #32]
 80049b8:	4638      	mov	r0, r7
 80049ba:	f7fd fe62 	bl	8002682 <SAE_J1939_Send_Commanded_Address>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80049be:	4629      	mov	r1, r5
 80049c0:	e768      	b.n	8004894 <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame+0x2c8>
 80049c2:	bf00      	nop
 80049c4:	08014188 	.word	0x08014188
 80049c8:	080141b2 	.word	0x080141b2
 80049cc:	080141c8 	.word	0x080141c8
 80049d0:	080141e2 	.word	0x080141e2

080049d4 <show_DM_frame>:
	show_DM_frame("Other ECU DM2 codes", &j1939->from_other_ecu_dm.dm2, true);
	call_exit(frame_id);
}

/* This can be DM1 or DM2 frame */
static void show_DM_frame(char title[], struct DM1 *dm, bool display_from_ecu_address) {
 80049d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d8:	b090      	sub	sp, #64	; 0x40
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80049da:	250f      	movs	r5, #15
static void show_DM_frame(char title[], struct DM1 *dm, bool display_from_ecu_address) {
 80049dc:	460c      	mov	r4, r1
 80049de:	4680      	mov	r8, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80049e0:	23ea      	movs	r3, #234	; 0xea
 80049e2:	2106      	movs	r1, #6
 80049e4:	2033      	movs	r0, #51	; 0x33
static void show_DM_frame(char title[], struct DM1 *dm, bool display_from_ecu_address) {
 80049e6:	4617      	mov	r7, r2
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80049e8:	9500      	str	r5, [sp, #0]
 80049ea:	f44f 729d 	mov.w	r2, #314	; 0x13a

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80049ee:	2601      	movs	r6, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80049f0:	f001 fcd6 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80049f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80049f8:	f240 1209 	movw	r2, #265	; 0x109
 80049fc:	211e      	movs	r1, #30
 80049fe:	2032      	movs	r0, #50	; 0x32
 8004a00:	f001 fd10 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a08:	220a      	movs	r2, #10
 8004a0a:	2137      	movs	r1, #55	; 0x37
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	e9cd 5600 	strd	r5, r6, [sp]
 8004a12:	f001 fdf3 	bl	80065fc <ILI9341_print_text>

	/* SAE Lamp status malfunction indicator */
	char text[50];
	sprintf(text, "Lamp malfunction:%i", dm->SAE_lamp_status_malfunction_indicator);
 8004a16:	7822      	ldrb	r2, [r4, #0]
 8004a18:	497a      	ldr	r1, [pc, #488]	; (8004c04 <show_DM_frame+0x230>)
 8004a1a:	a803      	add	r0, sp, #12
 8004a1c:	f00a fbe8 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a24:	2223      	movs	r2, #35	; 0x23
 8004a26:	2137      	movs	r1, #55	; 0x37
 8004a28:	a803      	add	r0, sp, #12
 8004a2a:	e9cd 5600 	strd	r5, r6, [sp]
 8004a2e:	f001 fde5 	bl	80065fc <ILI9341_print_text>

	/* SAE Lamp status red stop */
	sprintf(text, "Lamp red stop:%i", dm->SAE_lamp_status_red_stop);
 8004a32:	7862      	ldrb	r2, [r4, #1]
 8004a34:	4974      	ldr	r1, [pc, #464]	; (8004c08 <show_DM_frame+0x234>)
 8004a36:	a803      	add	r0, sp, #12
 8004a38:	f00a fbda 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a40:	222d      	movs	r2, #45	; 0x2d
 8004a42:	2137      	movs	r1, #55	; 0x37
 8004a44:	a803      	add	r0, sp, #12
 8004a46:	e9cd 5600 	strd	r5, r6, [sp]
 8004a4a:	f001 fdd7 	bl	80065fc <ILI9341_print_text>

	/* SAE Lamp status amber warning */
	sprintf(text, "Lamp amber warning:%i", dm->SAE_lamp_status_amber_warning);
 8004a4e:	78a2      	ldrb	r2, [r4, #2]
 8004a50:	496e      	ldr	r1, [pc, #440]	; (8004c0c <show_DM_frame+0x238>)
 8004a52:	a803      	add	r0, sp, #12
 8004a54:	f00a fbcc 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a58:	2237      	movs	r2, #55	; 0x37
 8004a5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a5e:	4611      	mov	r1, r2
 8004a60:	a803      	add	r0, sp, #12
 8004a62:	e9cd 5600 	strd	r5, r6, [sp]
 8004a66:	f001 fdc9 	bl	80065fc <ILI9341_print_text>

	/* SAE Lamp status protection lamp */
	sprintf(text, "Lamp protection:%i", dm->SAE_lamp_status_protect_lamp);
 8004a6a:	78e2      	ldrb	r2, [r4, #3]
 8004a6c:	4968      	ldr	r1, [pc, #416]	; (8004c10 <show_DM_frame+0x23c>)
 8004a6e:	a803      	add	r0, sp, #12
 8004a70:	f00a fbbe 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a74:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a78:	2241      	movs	r2, #65	; 0x41
 8004a7a:	2137      	movs	r1, #55	; 0x37
 8004a7c:	a803      	add	r0, sp, #12
 8004a7e:	e9cd 5600 	strd	r5, r6, [sp]
 8004a82:	f001 fdbb 	bl	80065fc <ILI9341_print_text>

	/* SAE Flash lamp malfunction indicator */
	sprintf(text, "Flash malfunction:%i", dm->SAE_flash_lamp_malfunction_indicator);
 8004a86:	7922      	ldrb	r2, [r4, #4]
 8004a88:	4962      	ldr	r1, [pc, #392]	; (8004c14 <show_DM_frame+0x240>)
 8004a8a:	a803      	add	r0, sp, #12
 8004a8c:	f00a fbb0 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8004a90:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a94:	224b      	movs	r2, #75	; 0x4b
 8004a96:	2137      	movs	r1, #55	; 0x37
 8004a98:	a803      	add	r0, sp, #12
 8004a9a:	e9cd 5600 	strd	r5, r6, [sp]
 8004a9e:	f001 fdad 	bl	80065fc <ILI9341_print_text>

	/* SAE Flash lamp red stop */
	sprintf(text, "Flash red stop:%i", dm->SAE_flash_lamp_red_stop);
 8004aa2:	7962      	ldrb	r2, [r4, #5]
 8004aa4:	495c      	ldr	r1, [pc, #368]	; (8004c18 <show_DM_frame+0x244>)
 8004aa6:	a803      	add	r0, sp, #12
 8004aa8:	f00a fba2 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8004aac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004ab0:	2255      	movs	r2, #85	; 0x55
 8004ab2:	2137      	movs	r1, #55	; 0x37
 8004ab4:	a803      	add	r0, sp, #12
 8004ab6:	e9cd 5600 	strd	r5, r6, [sp]
 8004aba:	f001 fd9f 	bl	80065fc <ILI9341_print_text>

	/* SAE Flash lamp amber warning */
	sprintf(text, "Flash amber warning:%i", dm->SAE_flash_lamp_amber_warning);
 8004abe:	79a2      	ldrb	r2, [r4, #6]
 8004ac0:	4956      	ldr	r1, [pc, #344]	; (8004c1c <show_DM_frame+0x248>)
 8004ac2:	a803      	add	r0, sp, #12
 8004ac4:	f00a fb94 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8004ac8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004acc:	225f      	movs	r2, #95	; 0x5f
 8004ace:	2137      	movs	r1, #55	; 0x37
 8004ad0:	a803      	add	r0, sp, #12
 8004ad2:	e9cd 5600 	strd	r5, r6, [sp]
 8004ad6:	f001 fd91 	bl	80065fc <ILI9341_print_text>

	/* SAE Flash lamp protection lamp */
	sprintf(text, "Lamp protection:%i", dm->SAE_flash_lamp_protect_lamp);
 8004ada:	79e2      	ldrb	r2, [r4, #7]
 8004adc:	494c      	ldr	r1, [pc, #304]	; (8004c10 <show_DM_frame+0x23c>)
 8004ade:	a803      	add	r0, sp, #12
 8004ae0:	f00a fb86 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8004ae4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004ae8:	2269      	movs	r2, #105	; 0x69
 8004aea:	2137      	movs	r1, #55	; 0x37
 8004aec:	a803      	add	r0, sp, #12
 8004aee:	e9cd 5600 	strd	r5, r6, [sp]
 8004af2:	f001 fd83 	bl	80065fc <ILI9341_print_text>

	/* SPN */
	sprintf(text, "SPN:%lu", dm->SPN);
 8004af6:	68a2      	ldr	r2, [r4, #8]
 8004af8:	4949      	ldr	r1, [pc, #292]	; (8004c20 <show_DM_frame+0x24c>)
 8004afa:	a803      	add	r0, sp, #12
 8004afc:	f00a fb78 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8004b00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004b04:	e9cd 5600 	strd	r5, r6, [sp]
 8004b08:	2273      	movs	r2, #115	; 0x73
 8004b0a:	2137      	movs	r1, #55	; 0x37
 8004b0c:	a803      	add	r0, sp, #12
 8004b0e:	f001 fd75 	bl	80065fc <ILI9341_print_text>

	/* FMI */
	uint8_t FMI = dm->FMI;
	switch (FMI) {
 8004b12:	7b23      	ldrb	r3, [r4, #12]
 8004b14:	2b15      	cmp	r3, #21
 8004b16:	d873      	bhi.n	8004c00 <show_DM_frame+0x22c>
 8004b18:	e8df f003 	tbb	[pc, r3]
 8004b1c:	4c4a480b 	.word	0x4c4a480b
 8004b20:	5452504e 	.word	0x5452504e
 8004b24:	5c5a5856 	.word	0x5c5a5856
 8004b28:	6462605e 	.word	0x6462605e
 8004b2c:	6c6a6866 	.word	0x6c6a6866
 8004b30:	706e      	.short	0x706e
	case 0x0:
		sprintf(text, "FMI:Above normal most serve");
 8004b32:	493c      	ldr	r1, [pc, #240]	; (8004c24 <show_DM_frame+0x250>)
		break;
	default:
		sprintf(text, "FMI:Not available");
		break;
	}
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8004b34:	250f      	movs	r5, #15
 8004b36:	2601      	movs	r6, #1
		sprintf(text, "FMI:Not available");
 8004b38:	a803      	add	r0, sp, #12
 8004b3a:	f00a fb79 	bl	800f230 <strcpy>
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8004b3e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004b42:	227d      	movs	r2, #125	; 0x7d
 8004b44:	2137      	movs	r1, #55	; 0x37
 8004b46:	a803      	add	r0, sp, #12
 8004b48:	e9cd 5600 	strd	r5, r6, [sp]
 8004b4c:	f001 fd56 	bl	80065fc <ILI9341_print_text>

	/* SPN conversion method */
	sprintf(text, "SPN conversion method:%i", dm->SPN_conversion_method);
 8004b50:	7b62      	ldrb	r2, [r4, #13]
 8004b52:	4935      	ldr	r1, [pc, #212]	; (8004c28 <show_DM_frame+0x254>)
 8004b54:	a803      	add	r0, sp, #12
 8004b56:	f00a fb4b 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8004b5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004b5e:	2287      	movs	r2, #135	; 0x87
 8004b60:	2137      	movs	r1, #55	; 0x37
 8004b62:	a803      	add	r0, sp, #12
 8004b64:	e9cd 5600 	strd	r5, r6, [sp]
 8004b68:	f001 fd48 	bl	80065fc <ILI9341_print_text>

	/* Occurrence count */
	sprintf(text, "Occurrence count:%i", dm->occurrence_count);
 8004b6c:	7ba2      	ldrb	r2, [r4, #14]
 8004b6e:	492f      	ldr	r1, [pc, #188]	; (8004c2c <show_DM_frame+0x258>)
 8004b70:	a803      	add	r0, sp, #12
 8004b72:	f00a fb3d 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 8004b76:	e9cd 5600 	strd	r5, r6, [sp]
 8004b7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004b7e:	2291      	movs	r2, #145	; 0x91
 8004b80:	2137      	movs	r1, #55	; 0x37
 8004b82:	a803      	add	r0, sp, #12
 8004b84:	f001 fd3a 	bl	80065fc <ILI9341_print_text>

	/* From ECU address */
	if(display_from_ecu_address){
 8004b88:	b16f      	cbz	r7, 8004ba6 <show_DM_frame+0x1d2>
		sprintf(text, "From ECU address:%i", dm->from_ecu_address);
 8004b8a:	7be2      	ldrb	r2, [r4, #15]
 8004b8c:	4928      	ldr	r1, [pc, #160]	; (8004c30 <show_DM_frame+0x25c>)
 8004b8e:	a803      	add	r0, sp, #12
 8004b90:	f00a fb2e 	bl	800f1f0 <siprintf>
		ILI9341_print_text(text, 55, 155, COLOR_YELLOW, COLOR_NAVY, 1);
 8004b94:	e9cd 5600 	strd	r5, r6, [sp]
 8004b98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004b9c:	229b      	movs	r2, #155	; 0x9b
 8004b9e:	2137      	movs	r1, #55	; 0x37
 8004ba0:	a803      	add	r0, sp, #12
 8004ba2:	f001 fd2b 	bl	80065fc <ILI9341_print_text>
	}
}
 8004ba6:	b010      	add	sp, #64	; 0x40
 8004ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sprintf(text, "FMI:Below normal most serve");
 8004bac:	4921      	ldr	r1, [pc, #132]	; (8004c34 <show_DM_frame+0x260>)
 8004bae:	e7c1      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Data erratic");
 8004bb0:	4921      	ldr	r1, [pc, #132]	; (8004c38 <show_DM_frame+0x264>)
 8004bb2:	e7bf      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Voltage above normal");
 8004bb4:	4921      	ldr	r1, [pc, #132]	; (8004c3c <show_DM_frame+0x268>)
 8004bb6:	e7bd      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Voltage below normal");
 8004bb8:	4921      	ldr	r1, [pc, #132]	; (8004c40 <show_DM_frame+0x26c>)
 8004bba:	e7bb      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Current below normal");
 8004bbc:	4921      	ldr	r1, [pc, #132]	; (8004c44 <show_DM_frame+0x270>)
 8004bbe:	e7b9      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Current above normal");
 8004bc0:	4921      	ldr	r1, [pc, #132]	; (8004c48 <show_DM_frame+0x274>)
 8004bc2:	e7b7      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Mechanical system not responding");
 8004bc4:	4921      	ldr	r1, [pc, #132]	; (8004c4c <show_DM_frame+0x278>)
 8004bc6:	e7b5      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal frequency");
 8004bc8:	4921      	ldr	r1, [pc, #132]	; (8004c50 <show_DM_frame+0x27c>)
 8004bca:	e7b3      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal update rate");
 8004bcc:	4921      	ldr	r1, [pc, #132]	; (8004c54 <show_DM_frame+0x280>)
 8004bce:	e7b1      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal rate change");
 8004bd0:	4921      	ldr	r1, [pc, #132]	; (8004c58 <show_DM_frame+0x284>)
 8004bd2:	e7af      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Root cause not known");
 8004bd4:	4921      	ldr	r1, [pc, #132]	; (8004c5c <show_DM_frame+0x288>)
 8004bd6:	e7ad      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Bad intelligent device");
 8004bd8:	4921      	ldr	r1, [pc, #132]	; (8004c60 <show_DM_frame+0x28c>)
 8004bda:	e7ab      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Out of calibration");
 8004bdc:	4921      	ldr	r1, [pc, #132]	; (8004c64 <show_DM_frame+0x290>)
 8004bde:	e7a9      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Special instructions");
 8004be0:	4921      	ldr	r1, [pc, #132]	; (8004c68 <show_DM_frame+0x294>)
 8004be2:	e7a7      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Abnormal least serve");
 8004be4:	4921      	ldr	r1, [pc, #132]	; (8004c6c <show_DM_frame+0x298>)
 8004be6:	e7a5      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Above normal moderately serve");
 8004be8:	4921      	ldr	r1, [pc, #132]	; (8004c70 <show_DM_frame+0x29c>)
 8004bea:	e7a3      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Below normal least serve");
 8004bec:	4921      	ldr	r1, [pc, #132]	; (8004c74 <show_DM_frame+0x2a0>)
 8004bee:	e7a1      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Below normal moderately serve");
 8004bf0:	4921      	ldr	r1, [pc, #132]	; (8004c78 <show_DM_frame+0x2a4>)
 8004bf2:	e79f      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Received network data in error");
 8004bf4:	4921      	ldr	r1, [pc, #132]	; (8004c7c <show_DM_frame+0x2a8>)
 8004bf6:	e79d      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Data drifted high");
 8004bf8:	4921      	ldr	r1, [pc, #132]	; (8004c80 <show_DM_frame+0x2ac>)
 8004bfa:	e79b      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Data drifted low");
 8004bfc:	4921      	ldr	r1, [pc, #132]	; (8004c84 <show_DM_frame+0x2b0>)
 8004bfe:	e799      	b.n	8004b34 <show_DM_frame+0x160>
		sprintf(text, "FMI:Not available");
 8004c00:	4921      	ldr	r1, [pc, #132]	; (8004c88 <show_DM_frame+0x2b4>)
 8004c02:	e797      	b.n	8004b34 <show_DM_frame+0x160>
 8004c04:	08014273 	.word	0x08014273
 8004c08:	08014287 	.word	0x08014287
 8004c0c:	08014298 	.word	0x08014298
 8004c10:	080142ae 	.word	0x080142ae
 8004c14:	080142c1 	.word	0x080142c1
 8004c18:	080142d6 	.word	0x080142d6
 8004c1c:	080142e8 	.word	0x080142e8
 8004c20:	080142ff 	.word	0x080142ff
 8004c24:	08014307 	.word	0x08014307
 8004c28:	08014560 	.word	0x08014560
 8004c2c:	08014579 	.word	0x08014579
 8004c30:	0801458d 	.word	0x0801458d
 8004c34:	08014323 	.word	0x08014323
 8004c38:	0801433f 	.word	0x0801433f
 8004c3c:	08014350 	.word	0x08014350
 8004c40:	08014369 	.word	0x08014369
 8004c44:	08014382 	.word	0x08014382
 8004c48:	0801439b 	.word	0x0801439b
 8004c4c:	080143b4 	.word	0x080143b4
 8004c50:	080143d9 	.word	0x080143d9
 8004c54:	080143f0 	.word	0x080143f0
 8004c58:	08014409 	.word	0x08014409
 8004c5c:	08014422 	.word	0x08014422
 8004c60:	0801443b 	.word	0x0801443b
 8004c64:	08014456 	.word	0x08014456
 8004c68:	0801446d 	.word	0x0801446d
 8004c6c:	08014486 	.word	0x08014486
 8004c70:	0801449f 	.word	0x0801449f
 8004c74:	080144c1 	.word	0x080144c1
 8004c78:	080144de 	.word	0x080144de
 8004c7c:	08014500 	.word	0x08014500
 8004c80:	08014523 	.word	0x08014523
 8004c84:	08014539 	.word	0x08014539
 8004c88:	0801454e 	.word	0x0801454e

08004c8c <call_exit>:

static void call_exit(uint8_t *frame_id){
 8004c8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Exit button */
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8004c8e:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8004c92:	2500      	movs	r5, #0
static void call_exit(uint8_t *frame_id){
 8004c94:	4604      	mov	r4, r0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 8004c96:	9600      	str	r6, [sp, #0]
 8004c98:	23e6      	movs	r3, #230	; 0xe6
 8004c9a:	f240 1211 	movw	r2, #273	; 0x111
 8004c9e:	21cd      	movs	r1, #205	; 0xcd
 8004ca0:	2055      	movs	r0, #85	; 0x55
 8004ca2:	f001 fb7d 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 8004ca6:	9500      	str	r5, [sp, #0]
 8004ca8:	23e6      	movs	r3, #230	; 0xe6
 8004caa:	f240 1211 	movw	r2, #273	; 0x111
 8004cae:	21cd      	movs	r1, #205	; 0xcd
 8004cb0:	2055      	movs	r0, #85	; 0x55
 8004cb2:	f001 fc09 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e9cd 6300 	strd	r6, r3, [sp]
 8004cbc:	4809      	ldr	r0, [pc, #36]	; (8004ce4 <call_exit+0x58>)
 8004cbe:	462b      	mov	r3, r5
 8004cc0:	22d2      	movs	r2, #210	; 0xd2
 8004cc2:	215f      	movs	r1, #95	; 0x5f
 8004cc4:	f001 fc9a 	bl	80065fc <ILI9341_print_text>

	/* Logic for that button */
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 8004cc8:	23e6      	movs	r3, #230	; 0xe6
 8004cca:	f240 1211 	movw	r2, #273	; 0x111
 8004cce:	21cd      	movs	r1, #205	; 0xcd
 8004cd0:	2055      	movs	r0, #85	; 0x55
 8004cd2:	f002 fb73 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Go back */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4620      	mov	r0, r4
}
 8004cda:	b002      	add	sp, #8
 8004cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8004ce0:	f7ff b81c 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
 8004ce4:	080133ca 	.word	0x080133ca

08004ce8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	460c      	mov	r4, r1
	show_DM_frame("This ECU DM1 codes", &j1939->this_dm.dm1, false);
 8004cec:	f500 519f 	add.w	r1, r0, #5088	; 0x13e0
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4804      	ldr	r0, [pc, #16]	; (8004d04 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame+0x1c>)
 8004cf4:	3110      	adds	r1, #16
 8004cf6:	f7ff fe6d 	bl	80049d4 <show_DM_frame>
	call_exit(frame_id);
 8004cfa:	4620      	mov	r0, r4
}
 8004cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 8004d00:	f7ff bfc4 	b.w	8004c8c <call_exit>
 8004d04:	080145a1 	.word	0x080145a1

08004d08 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id){
 8004d08:	b510      	push	{r4, lr}
	show_DM_frame("Other ECU DM1 codes", &j1939->from_other_ecu_dm.dm1, true);
 8004d0a:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(J1939 *j1939, uint8_t *frame_id){
 8004d0c:	460c      	mov	r4, r1
	show_DM_frame("Other ECU DM1 codes", &j1939->from_other_ecu_dm.dm1, true);
 8004d0e:	f600 013c 	addw	r1, r0, #2108	; 0x83c
 8004d12:	4804      	ldr	r0, [pc, #16]	; (8004d24 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame+0x1c>)
 8004d14:	f7ff fe5e 	bl	80049d4 <show_DM_frame>
	call_exit(frame_id);
 8004d18:	4620      	mov	r0, r4
}
 8004d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 8004d1e:	f7ff bfb5 	b.w	8004c8c <call_exit>
 8004d22:	bf00      	nop
 8004d24:	080145b4 	.word	0x080145b4

08004d28 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004d28:	b510      	push	{r4, lr}
	show_DM_frame("This ECU DM2 codes", &j1939->this_dm.dm2, false);
 8004d2a:	2200      	movs	r2, #0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004d2c:	460c      	mov	r4, r1
	show_DM_frame("This ECU DM2 codes", &j1939->this_dm.dm2, false);
 8004d2e:	f500 51a0 	add.w	r1, r0, #5120	; 0x1400
 8004d32:	4804      	ldr	r0, [pc, #16]	; (8004d44 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame+0x1c>)
 8004d34:	f7ff fe4e 	bl	80049d4 <show_DM_frame>
	call_exit(frame_id);
 8004d38:	4620      	mov	r0, r4
}
 8004d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 8004d3e:	f7ff bfa5 	b.w	8004c8c <call_exit>
 8004d42:	bf00      	nop
 8004d44:	080145c8 	.word	0x080145c8

08004d48 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004d48:	b510      	push	{r4, lr}
	show_DM_frame("Other ECU DM2 codes", &j1939->from_other_ecu_dm.dm2, true);
 8004d4a:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(J1939 *j1939, uint8_t *frame_id) {
 8004d4c:	460c      	mov	r4, r1
	show_DM_frame("Other ECU DM2 codes", &j1939->from_other_ecu_dm.dm2, true);
 8004d4e:	f600 014c 	addw	r1, r0, #2124	; 0x84c
 8004d52:	4804      	ldr	r0, [pc, #16]	; (8004d64 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame+0x1c>)
 8004d54:	f7ff fe3e 	bl	80049d4 <show_DM_frame>
	call_exit(frame_id);
 8004d58:	4620      	mov	r0, r4
}
 8004d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	call_exit(frame_id);
 8004d5e:	f7ff bf95 	b.w	8004c8c <call_exit>
 8004d62:	bf00      	nop
 8004d64:	080145db 	.word	0x080145db

08004d68 <fill_char_array>:
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
	}

}

static void fill_char_array(char text[], char title[], uint8_t data[], uint8_t length) {
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	461f      	mov	r7, r3
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4616      	mov	r6, r2
	memset(text, 0, strlen(text));
 8004d72:	f7fb fa2d 	bl	80001d0 <strlen>
 8004d76:	2100      	movs	r1, #0
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f009 fdc6 	bl	800e90c <memset>
	memcpy(text, title, strlen(title));
 8004d80:	4628      	mov	r0, r5
 8004d82:	f7fb fa25 	bl	80001d0 <strlen>
 8004d86:	4629      	mov	r1, r5
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f009 fd96 	bl	800e8bc <memcpy>
	memcpy(text + strlen(title), (char*)data, length); /* Move text strlen(title) elements */
 8004d90:	4628      	mov	r0, r5
 8004d92:	f7fb fa1d 	bl	80001d0 <strlen>
 8004d96:	463a      	mov	r2, r7
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4420      	add	r0, r4
}
 8004d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memcpy(text + strlen(title), (char*)data, length); /* Move text strlen(title) elements */
 8004da0:	f009 bd8c 	b.w	800e8bc <memcpy>

08004da4 <show_identifications>:
static void show_identifications(char title[], struct Identifications *identifications, bool display_from_ecu_address) {
 8004da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004da8:	b093      	sub	sp, #76	; 0x4c
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004daa:	250f      	movs	r5, #15
static void show_identifications(char title[], struct Identifications *identifications, bool display_from_ecu_address) {
 8004dac:	4680      	mov	r8, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	4617      	mov	r7, r2
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8004db2:	23ea      	movs	r3, #234	; 0xea
 8004db4:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8004db8:	2106      	movs	r1, #6
 8004dba:	2033      	movs	r0, #51	; 0x33
 8004dbc:	9500      	str	r5, [sp, #0]
 8004dbe:	f001 faef 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004dc2:	2601      	movs	r6, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8004dc4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004dc8:	f240 1209 	movw	r2, #265	; 0x109
 8004dcc:	211e      	movs	r1, #30
 8004dce:	2032      	movs	r0, #50	; 0x32
 8004dd0:	f001 fb28 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004dd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004dd8:	4640      	mov	r0, r8
 8004dda:	220a      	movs	r2, #10
 8004ddc:	2137      	movs	r1, #55	; 0x37
	uint8_t length = identifications->software_identification.number_of_fields;
 8004dde:	46a0      	mov	r8, r4
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004de0:	e9cd 5600 	strd	r5, r6, [sp]
 8004de4:	f001 fc0a 	bl	80065fc <ILI9341_print_text>
	char text[50] = "";
 8004de8:	2100      	movs	r1, #0
 8004dea:	222e      	movs	r2, #46	; 0x2e
 8004dec:	a806      	add	r0, sp, #24
 8004dee:	9105      	str	r1, [sp, #20]
 8004df0:	f009 fd8c 	bl	800e90c <memset>
	uint8_t length = identifications->software_identification.number_of_fields;
 8004df4:	f818 9b01 	ldrb.w	r9, [r8], #1
	ILI9341_print_text("Software identification:", 55, index_row, COLOR_YELLOW, COLOR_NAVY, 1);
 8004df8:	4883      	ldr	r0, [pc, #524]	; (8005008 <show_identifications+0x264>)
 8004dfa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004dfe:	2223      	movs	r2, #35	; 0x23
 8004e00:	2137      	movs	r1, #55	; 0x37
 8004e02:	e9cd 5600 	strd	r5, r6, [sp]
 8004e06:	f001 fbf9 	bl	80065fc <ILI9341_print_text>
	fill_char_array(text, "ID:", identifications->software_identification.identifications, length);
 8004e0a:	4980      	ldr	r1, [pc, #512]	; (800500c <show_identifications+0x268>)
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	4642      	mov	r2, r8
 8004e10:	a805      	add	r0, sp, #20
 8004e12:	f7ff ffa9 	bl	8004d68 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e16:	e9cd 5600 	strd	r5, r6, [sp]
 8004e1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e1e:	222d      	movs	r2, #45	; 0x2d
 8004e20:	2137      	movs	r1, #55	; 0x37
 8004e22:	a805      	add	r0, sp, #20
 8004e24:	f001 fbea 	bl	80065fc <ILI9341_print_text>
	if(display_from_ecu_address){
 8004e28:	b16f      	cbz	r7, 8004e46 <show_identifications+0xa2>
		sprintf(text, "Source address:%i", identifications->software_identification.from_ecu_address);
 8004e2a:	7fe2      	ldrb	r2, [r4, #31]
 8004e2c:	4978      	ldr	r1, [pc, #480]	; (8005010 <show_identifications+0x26c>)
 8004e2e:	a805      	add	r0, sp, #20
 8004e30:	f00a f9de 	bl	800f1f0 <siprintf>
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e34:	2237      	movs	r2, #55	; 0x37
 8004e36:	e9cd 5600 	strd	r5, r6, [sp]
 8004e3a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e3e:	4611      	mov	r1, r2
 8004e40:	a805      	add	r0, sp, #20
 8004e42:	f001 fbdb 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("ECU identification:", 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e46:	250f      	movs	r5, #15
 8004e48:	2601      	movs	r6, #1
 8004e4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e4e:	2137      	movs	r1, #55	; 0x37
 8004e50:	4870      	ldr	r0, [pc, #448]	; (8005014 <show_identifications+0x270>)
 8004e52:	2241      	movs	r2, #65	; 0x41
 8004e54:	e9cd 5600 	strd	r5, r6, [sp]
 8004e58:	f001 fbd0 	bl	80065fc <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_part_number);
 8004e5c:	f104 0221 	add.w	r2, r4, #33	; 0x21
 8004e60:	4610      	mov	r0, r2
 8004e62:	9203      	str	r2, [sp, #12]
 8004e64:	f7fb f9b4 	bl	80001d0 <strlen>
	fill_char_array(text, "Part number:", identifications->ecu_identification.ecu_part_number, length);
 8004e68:	9a03      	ldr	r2, [sp, #12]
 8004e6a:	496b      	ldr	r1, [pc, #428]	; (8005018 <show_identifications+0x274>)
 8004e6c:	b2c3      	uxtb	r3, r0
 8004e6e:	a805      	add	r0, sp, #20
 8004e70:	f7ff ff7a 	bl	8004d68 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e74:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004e78:	2137      	movs	r1, #55	; 0x37
 8004e7a:	224b      	movs	r2, #75	; 0x4b
 8004e7c:	a805      	add	r0, sp, #20
 8004e7e:	e9cd 5600 	strd	r5, r6, [sp]
 8004e82:	f001 fbbb 	bl	80065fc <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_serial_number);
 8004e86:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	9203      	str	r2, [sp, #12]
 8004e8e:	f7fb f99f 	bl	80001d0 <strlen>
	fill_char_array(text, "Serial number:", identifications->ecu_identification.ecu_serial_number, length);
 8004e92:	9a03      	ldr	r2, [sp, #12]
 8004e94:	4961      	ldr	r1, [pc, #388]	; (800501c <show_identifications+0x278>)
 8004e96:	b2c3      	uxtb	r3, r0
 8004e98:	a805      	add	r0, sp, #20
 8004e9a:	f7ff ff65 	bl	8004d68 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004e9e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004ea2:	2137      	movs	r1, #55	; 0x37
 8004ea4:	2255      	movs	r2, #85	; 0x55
 8004ea6:	a805      	add	r0, sp, #20
 8004ea8:	e9cd 5600 	strd	r5, r6, [sp]
 8004eac:	f001 fba6 	bl	80065fc <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_location);
 8004eb0:	f104 025d 	add.w	r2, r4, #93	; 0x5d
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	9203      	str	r2, [sp, #12]
 8004eb8:	f7fb f98a 	bl	80001d0 <strlen>
	fill_char_array(text, "Location:", identifications->ecu_identification.ecu_location, length);
 8004ebc:	9a03      	ldr	r2, [sp, #12]
 8004ebe:	4958      	ldr	r1, [pc, #352]	; (8005020 <show_identifications+0x27c>)
 8004ec0:	b2c3      	uxtb	r3, r0
 8004ec2:	a805      	add	r0, sp, #20
 8004ec4:	f7ff ff50 	bl	8004d68 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004ec8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004ecc:	2137      	movs	r1, #55	; 0x37
 8004ece:	225f      	movs	r2, #95	; 0x5f
 8004ed0:	a805      	add	r0, sp, #20
 8004ed2:	e9cd 5600 	strd	r5, r6, [sp]
 8004ed6:	f001 fb91 	bl	80065fc <ILI9341_print_text>
	length = strlen((char*)identifications->ecu_identification.ecu_type);
 8004eda:	f104 027b 	add.w	r2, r4, #123	; 0x7b
 8004ede:	4610      	mov	r0, r2
 8004ee0:	9203      	str	r2, [sp, #12]
 8004ee2:	f7fb f975 	bl	80001d0 <strlen>
	fill_char_array(text, "Type:", identifications->ecu_identification.ecu_type, length);
 8004ee6:	9a03      	ldr	r2, [sp, #12]
 8004ee8:	494e      	ldr	r1, [pc, #312]	; (8005024 <show_identifications+0x280>)
 8004eea:	b2c3      	uxtb	r3, r0
 8004eec:	a805      	add	r0, sp, #20
 8004eee:	f7ff ff3b 	bl	8004d68 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004ef2:	e9cd 5600 	strd	r5, r6, [sp]
 8004ef6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004efa:	2269      	movs	r2, #105	; 0x69
 8004efc:	2137      	movs	r1, #55	; 0x37
 8004efe:	a805      	add	r0, sp, #20
 8004f00:	f001 fb7c 	bl	80065fc <ILI9341_print_text>
	if(display_from_ecu_address){
 8004f04:	b177      	cbz	r7, 8004f24 <show_identifications+0x180>
		sprintf(text, "Source address:%i", identifications->ecu_identification.from_ecu_address);
 8004f06:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 8004f0a:	4941      	ldr	r1, [pc, #260]	; (8005010 <show_identifications+0x26c>)
 8004f0c:	a805      	add	r0, sp, #20
 8004f0e:	f00a f96f 	bl	800f1f0 <siprintf>
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004f12:	e9cd 5600 	strd	r5, r6, [sp]
 8004f16:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004f1a:	2273      	movs	r2, #115	; 0x73
 8004f1c:	2137      	movs	r1, #55	; 0x37
 8004f1e:	a805      	add	r0, sp, #20
 8004f20:	f001 fb6c 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Component identification:", 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004f24:	250f      	movs	r5, #15
 8004f26:	2601      	movs	r6, #1
 8004f28:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004f2c:	2137      	movs	r1, #55	; 0x37
 8004f2e:	483e      	ldr	r0, [pc, #248]	; (8005028 <show_identifications+0x284>)
 8004f30:	227d      	movs	r2, #125	; 0x7d
 8004f32:	e9cd 5600 	strd	r5, r6, [sp]
 8004f36:	f001 fb61 	bl	80065fc <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_product_date);
 8004f3a:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8004f3e:	4610      	mov	r0, r2
 8004f40:	9203      	str	r2, [sp, #12]
 8004f42:	f7fb f945 	bl	80001d0 <strlen>
	fill_char_array(text, "Product date:", identifications->component_identification.component_product_date, length);
 8004f46:	9a03      	ldr	r2, [sp, #12]
 8004f48:	4938      	ldr	r1, [pc, #224]	; (800502c <show_identifications+0x288>)
 8004f4a:	b2c3      	uxtb	r3, r0
 8004f4c:	a805      	add	r0, sp, #20
 8004f4e:	f7ff ff0b 	bl	8004d68 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004f52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004f56:	2137      	movs	r1, #55	; 0x37
 8004f58:	2287      	movs	r2, #135	; 0x87
 8004f5a:	a805      	add	r0, sp, #20
 8004f5c:	e9cd 5600 	strd	r5, r6, [sp]
 8004f60:	f001 fb4c 	bl	80065fc <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_model_name);
 8004f64:	f104 02b9 	add.w	r2, r4, #185	; 0xb9
 8004f68:	4610      	mov	r0, r2
 8004f6a:	9203      	str	r2, [sp, #12]
 8004f6c:	f7fb f930 	bl	80001d0 <strlen>
	fill_char_array(text, "Model name:", identifications->component_identification.component_model_name, length);
 8004f70:	9a03      	ldr	r2, [sp, #12]
 8004f72:	492f      	ldr	r1, [pc, #188]	; (8005030 <show_identifications+0x28c>)
 8004f74:	b2c3      	uxtb	r3, r0
 8004f76:	a805      	add	r0, sp, #20
 8004f78:	f7ff fef6 	bl	8004d68 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004f7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004f80:	2137      	movs	r1, #55	; 0x37
 8004f82:	2291      	movs	r2, #145	; 0x91
 8004f84:	a805      	add	r0, sp, #20
 8004f86:	e9cd 5600 	strd	r5, r6, [sp]
 8004f8a:	f001 fb37 	bl	80065fc <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_serial_number);
 8004f8e:	f104 02d7 	add.w	r2, r4, #215	; 0xd7
 8004f92:	4610      	mov	r0, r2
 8004f94:	9203      	str	r2, [sp, #12]
 8004f96:	f7fb f91b 	bl	80001d0 <strlen>
	fill_char_array(text, "Serial number:", identifications->component_identification.component_serial_number, length);
 8004f9a:	9a03      	ldr	r2, [sp, #12]
 8004f9c:	491f      	ldr	r1, [pc, #124]	; (800501c <show_identifications+0x278>)
 8004f9e:	b2c3      	uxtb	r3, r0
 8004fa0:	a805      	add	r0, sp, #20
 8004fa2:	f7ff fee1 	bl	8004d68 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004fa6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004faa:	2137      	movs	r1, #55	; 0x37
 8004fac:	229b      	movs	r2, #155	; 0x9b
 8004fae:	a805      	add	r0, sp, #20
 8004fb0:	e9cd 5600 	strd	r5, r6, [sp]
 8004fb4:	f001 fb22 	bl	80065fc <ILI9341_print_text>
	length = strlen((char*)identifications->component_identification.component_unit_name);
 8004fb8:	f104 02f5 	add.w	r2, r4, #245	; 0xf5
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	9203      	str	r2, [sp, #12]
 8004fc0:	f7fb f906 	bl	80001d0 <strlen>
	fill_char_array(text, "Unit name:", identifications->component_identification.component_unit_name, length);
 8004fc4:	9a03      	ldr	r2, [sp, #12]
 8004fc6:	491b      	ldr	r1, [pc, #108]	; (8005034 <show_identifications+0x290>)
 8004fc8:	b2c3      	uxtb	r3, r0
 8004fca:	a805      	add	r0, sp, #20
 8004fcc:	f7ff fecc 	bl	8004d68 <fill_char_array>
	ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004fd0:	e9cd 5600 	strd	r5, r6, [sp]
 8004fd4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004fd8:	22a5      	movs	r2, #165	; 0xa5
 8004fda:	2137      	movs	r1, #55	; 0x37
 8004fdc:	a805      	add	r0, sp, #20
 8004fde:	f001 fb0d 	bl	80065fc <ILI9341_print_text>
	if(display_from_ecu_address){
 8004fe2:	b177      	cbz	r7, 8005002 <show_identifications+0x25e>
		sprintf(text, "Source address:%i", identifications->component_identification.from_ecu_address);
 8004fe4:	f894 2113 	ldrb.w	r2, [r4, #275]	; 0x113
 8004fe8:	4909      	ldr	r1, [pc, #36]	; (8005010 <show_identifications+0x26c>)
 8004fea:	a805      	add	r0, sp, #20
 8004fec:	f00a f900 	bl	800f1f0 <siprintf>
		ILI9341_print_text(text, 55, index_row += 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8004ff0:	e9cd 5600 	strd	r5, r6, [sp]
 8004ff4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004ff8:	22af      	movs	r2, #175	; 0xaf
 8004ffa:	2137      	movs	r1, #55	; 0x37
 8004ffc:	a805      	add	r0, sp, #20
 8004ffe:	f001 fafd 	bl	80065fc <ILI9341_print_text>
}
 8005002:	b013      	add	sp, #76	; 0x4c
 8005004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005008:	080145ef 	.word	0x080145ef
 800500c:	08014608 	.word	0x08014608
 8005010:	0801460c 	.word	0x0801460c
 8005014:	0801461e 	.word	0x0801461e
 8005018:	08014632 	.word	0x08014632
 800501c:	0801463f 	.word	0x0801463f
 8005020:	0801464e 	.word	0x0801464e
 8005024:	08014658 	.word	0x08014658
 8005028:	0801465e 	.word	0x0801465e
 800502c:	08014678 	.word	0x08014678
 8005030:	08014686 	.word	0x08014686
 8005034:	08014692 	.word	0x08014692

08005038 <enter_identification>:
static uint8_t enter_identification(char identification[], char title[], uint8_t *frame_id) {
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4604      	mov	r4, r0
 800503c:	460e      	mov	r6, r1
 800503e:	4615      	mov	r5, r2
	memset(identification, 0, strlen(identification));
 8005040:	f7fb f8c6 	bl	80001d0 <strlen>
 8005044:	2100      	movs	r1, #0
 8005046:	4602      	mov	r2, r0
 8005048:	4620      	mov	r0, r4
 800504a:	f009 fc5f 	bl	800e90c <memset>
	if(STM32_PLC_LCD_Show_Keyboard_Frame(identification, title) == 0){
 800504e:	4620      	mov	r0, r4
 8005050:	4631      	mov	r1, r6
 8005052:	f000 fc79 	bl	8005948 <STM32_PLC_LCD_Show_Keyboard_Frame>
 8005056:	4604      	mov	r4, r0
 8005058:	b928      	cbnz	r0, 8005066 <enter_identification+0x2e>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800505a:	4601      	mov	r1, r0
 800505c:	4628      	mov	r0, r5
 800505e:	f7fe fe5d 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 8005062:	4620      	mov	r0, r4
 8005064:	bd70      	pop	{r4, r5, r6, pc}
	return 1;
 8005066:	2401      	movs	r4, #1
 8005068:	e7fb      	b.n	8005062 <enter_identification+0x2a>
	...

0800506c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 800506c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800506e:	460d      	mov	r5, r1
 8005070:	b089      	sub	sp, #36	; 0x24
	show_identifications("Identifications about this ECU", &j1939->information_this_ECU.this_identifications, false);
 8005072:	f500 5196 	add.w	r1, r0, #4800	; 0x12c0
 8005076:	2200      	movs	r2, #0
 8005078:	3115      	adds	r1, #21
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 800507a:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 800507e:	4604      	mov	r4, r0
	show_identifications("Identifications about this ECU", &j1939->information_this_ECU.this_identifications, false);
 8005080:	4880      	ldr	r0, [pc, #512]	; (8005284 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x218>)
 8005082:	f7ff fe8f 	bl	8004da4 <show_identifications>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8005086:	2600      	movs	r6, #0
	ILI9341_fill_rect(70, 195, 293, 220, COLOR_GREEN);
 8005088:	23dc      	movs	r3, #220	; 0xdc
 800508a:	f240 1225 	movw	r2, #293	; 0x125
 800508e:	21c3      	movs	r1, #195	; 0xc3
 8005090:	2046      	movs	r0, #70	; 0x46
 8005092:	9700      	str	r7, [sp, #0]
 8005094:	f001 f984 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(70, 195, 293, 220, COLOR_BLACK);
 8005098:	23dc      	movs	r3, #220	; 0xdc
 800509a:	f240 1225 	movw	r2, #293	; 0x125
 800509e:	21c3      	movs	r1, #195	; 0xc3
 80050a0:	2046      	movs	r0, #70	; 0x46
 80050a2:	9600      	str	r6, [sp, #0]
 80050a4:	f001 fa10 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Set identification", 75, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80050a8:	2302      	movs	r3, #2
 80050aa:	e9cd 7300 	strd	r7, r3, [sp]
 80050ae:	4876      	ldr	r0, [pc, #472]	; (8005288 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x21c>)
 80050b0:	4633      	mov	r3, r6
 80050b2:	22c8      	movs	r2, #200	; 0xc8
 80050b4:	214b      	movs	r1, #75	; 0x4b
 80050b6:	f001 faa1 	bl	80065fc <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(70, 195, 293, 220);
 80050ba:	21c3      	movs	r1, #195	; 0xc3
 80050bc:	23dc      	movs	r3, #220	; 0xdc
 80050be:	f240 1225 	movw	r2, #293	; 0x125
 80050c2:	2046      	movs	r0, #70	; 0x46
 80050c4:	f002 f97a 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set identification?") == 0) {
 80050c8:	4870      	ldr	r0, [pc, #448]	; (800528c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x220>)
 80050ca:	f7fd fb35 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 80050ce:	4601      	mov	r1, r0
 80050d0:	b928      	cbnz	r0, 80050de <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x72>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80050d2:	4628      	mov	r0, r5
}
 80050d4:	b009      	add	sp, #36	; 0x24
 80050d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80050da:	f7fe be1f 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
	char identification[17] = "";
 80050de:	220d      	movs	r2, #13
 80050e0:	4631      	mov	r1, r6
 80050e2:	a804      	add	r0, sp, #16
 80050e4:	9603      	str	r6, [sp, #12]
 80050e6:	f009 fc11 	bl	800e90c <memset>
	if(enter_identification(identification, "Enter software identification", frame_id) == 0)
 80050ea:	4969      	ldr	r1, [pc, #420]	; (8005290 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x224>)
 80050ec:	462a      	mov	r2, r5
 80050ee:	a803      	add	r0, sp, #12
 80050f0:	f7ff ffa2 	bl	8005038 <enter_identification>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f000 80c2 	beq.w	800527e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	j1939->information_this_ECU.this_identifications.software_identification.number_of_fields = strlen(identification); /* This differ from ECU/Component identification */
 80050fa:	a803      	add	r0, sp, #12
 80050fc:	f7fb f868 	bl	80001d0 <strlen>
 8005100:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	memcpy(j1939->information_this_ECU.this_identifications.software_identification.identifications, (uint8_t*)identification, sizeof(identification));
 8005104:	af03      	add	r7, sp, #12
	j1939->information_this_ECU.this_identifications.software_identification.number_of_fields = strlen(identification); /* This differ from ECU/Component identification */
 8005106:	f884 02d5 	strb.w	r0, [r4, #725]	; 0x2d5
	memcpy(j1939->information_this_ECU.this_identifications.software_identification.identifications, (uint8_t*)identification, sizeof(identification));
 800510a:	f204 23d6 	addw	r3, r4, #726	; 0x2d6
 800510e:	ae07      	add	r6, sp, #28
 8005110:	463a      	mov	r2, r7
 8005112:	ca03      	ldmia	r2!, {r0, r1}
 8005114:	42b2      	cmp	r2, r6
 8005116:	6018      	str	r0, [r3, #0]
 8005118:	6059      	str	r1, [r3, #4]
 800511a:	4617      	mov	r7, r2
 800511c:	f103 0308 	add.w	r3, r3, #8
 8005120:	d1f6      	bne.n	8005110 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0xa4>
 8005122:	7812      	ldrb	r2, [r2, #0]
 8005124:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU part number", frame_id) == 0)
 8005126:	495b      	ldr	r1, [pc, #364]	; (8005294 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x228>)
 8005128:	462a      	mov	r2, r5
 800512a:	a803      	add	r0, sp, #12
 800512c:	f7ff ff84 	bl	8005038 <enter_identification>
 8005130:	2800      	cmp	r0, #0
 8005132:	f000 80a4 	beq.w	800527e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.ecu_identification.ecu_part_number, (uint8_t*)identification, sizeof(identification));
 8005136:	af03      	add	r7, sp, #12
 8005138:	f204 23f6 	addw	r3, r4, #758	; 0x2f6
 800513c:	463a      	mov	r2, r7
 800513e:	ca03      	ldmia	r2!, {r0, r1}
 8005140:	42b2      	cmp	r2, r6
 8005142:	6018      	str	r0, [r3, #0]
 8005144:	6059      	str	r1, [r3, #4]
 8005146:	4617      	mov	r7, r2
 8005148:	f103 0308 	add.w	r3, r3, #8
 800514c:	d1f6      	bne.n	800513c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0xd0>
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU serial number", frame_id) == 0)
 8005152:	4951      	ldr	r1, [pc, #324]	; (8005298 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x22c>)
 8005154:	462a      	mov	r2, r5
 8005156:	a803      	add	r0, sp, #12
 8005158:	f7ff ff6e 	bl	8005038 <enter_identification>
 800515c:	2800      	cmp	r0, #0
 800515e:	f000 808e 	beq.w	800527e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.ecu_identification.ecu_serial_number, (uint8_t*)identification, sizeof(identification));
 8005162:	af03      	add	r7, sp, #12
 8005164:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8005168:	463a      	mov	r2, r7
 800516a:	ca03      	ldmia	r2!, {r0, r1}
 800516c:	42b2      	cmp	r2, r6
 800516e:	6018      	str	r0, [r3, #0]
 8005170:	6059      	str	r1, [r3, #4]
 8005172:	4617      	mov	r7, r2
 8005174:	f103 0308 	add.w	r3, r3, #8
 8005178:	d1f6      	bne.n	8005168 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0xfc>
 800517a:	7812      	ldrb	r2, [r2, #0]
 800517c:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU location", frame_id) == 0)
 800517e:	4947      	ldr	r1, [pc, #284]	; (800529c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x230>)
 8005180:	462a      	mov	r2, r5
 8005182:	a803      	add	r0, sp, #12
 8005184:	f7ff ff58 	bl	8005038 <enter_identification>
 8005188:	2800      	cmp	r0, #0
 800518a:	d078      	beq.n	800527e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.ecu_identification.ecu_location, (uint8_t*)identification, sizeof(identification));
 800518c:	af03      	add	r7, sp, #12
 800518e:	f204 3332 	addw	r3, r4, #818	; 0x332
 8005192:	463a      	mov	r2, r7
 8005194:	ca03      	ldmia	r2!, {r0, r1}
 8005196:	42b2      	cmp	r2, r6
 8005198:	6018      	str	r0, [r3, #0]
 800519a:	6059      	str	r1, [r3, #4]
 800519c:	4617      	mov	r7, r2
 800519e:	f103 0308 	add.w	r3, r3, #8
 80051a2:	d1f6      	bne.n	8005192 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x126>
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter ECU type", frame_id) == 0)
 80051a8:	493d      	ldr	r1, [pc, #244]	; (80052a0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x234>)
 80051aa:	462a      	mov	r2, r5
 80051ac:	a803      	add	r0, sp, #12
 80051ae:	f7ff ff43 	bl	8005038 <enter_identification>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d063      	beq.n	800527e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.ecu_identification.ecu_type, (uint8_t*)identification, sizeof(identification));
 80051b6:	af03      	add	r7, sp, #12
 80051b8:	f504 7354 	add.w	r3, r4, #848	; 0x350
 80051bc:	463a      	mov	r2, r7
 80051be:	ca03      	ldmia	r2!, {r0, r1}
 80051c0:	42b2      	cmp	r2, r6
 80051c2:	6018      	str	r0, [r3, #0]
 80051c4:	6059      	str	r1, [r3, #4]
 80051c6:	4617      	mov	r7, r2
 80051c8:	f103 0308 	add.w	r3, r3, #8
 80051cc:	d1f6      	bne.n	80051bc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x150>
 80051ce:	7812      	ldrb	r2, [r2, #0]
 80051d0:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component product date", frame_id) == 0)
 80051d2:	4934      	ldr	r1, [pc, #208]	; (80052a4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x238>)
 80051d4:	462a      	mov	r2, r5
 80051d6:	a803      	add	r0, sp, #12
 80051d8:	f7ff ff2e 	bl	8005038 <enter_identification>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d04e      	beq.n	800527e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.component_identification.component_product_date, (uint8_t*)identification, sizeof(identification));
 80051e0:	af03      	add	r7, sp, #12
 80051e2:	f504 735c 	add.w	r3, r4, #880	; 0x370
 80051e6:	463a      	mov	r2, r7
 80051e8:	ca03      	ldmia	r2!, {r0, r1}
 80051ea:	42b2      	cmp	r2, r6
 80051ec:	6018      	str	r0, [r3, #0]
 80051ee:	6059      	str	r1, [r3, #4]
 80051f0:	4617      	mov	r7, r2
 80051f2:	f103 0308 	add.w	r3, r3, #8
 80051f6:	d1f6      	bne.n	80051e6 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x17a>
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component model name", frame_id) == 0)
 80051fc:	492a      	ldr	r1, [pc, #168]	; (80052a8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x23c>)
 80051fe:	462a      	mov	r2, r5
 8005200:	a803      	add	r0, sp, #12
 8005202:	f7ff ff19 	bl	8005038 <enter_identification>
 8005206:	2800      	cmp	r0, #0
 8005208:	d039      	beq.n	800527e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.component_identification.component_model_name, (uint8_t*)identification, sizeof(identification));
 800520a:	af03      	add	r7, sp, #12
 800520c:	f204 338e 	addw	r3, r4, #910	; 0x38e
 8005210:	463a      	mov	r2, r7
 8005212:	ca03      	ldmia	r2!, {r0, r1}
 8005214:	42b2      	cmp	r2, r6
 8005216:	6018      	str	r0, [r3, #0]
 8005218:	6059      	str	r1, [r3, #4]
 800521a:	4617      	mov	r7, r2
 800521c:	f103 0308 	add.w	r3, r3, #8
 8005220:	d1f6      	bne.n	8005210 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x1a4>
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component serial number", frame_id) == 0)
 8005226:	4921      	ldr	r1, [pc, #132]	; (80052ac <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x240>)
 8005228:	462a      	mov	r2, r5
 800522a:	a803      	add	r0, sp, #12
 800522c:	f7ff ff04 	bl	8005038 <enter_identification>
 8005230:	b328      	cbz	r0, 800527e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.component_identification.component_serial_number, (uint8_t*)identification, sizeof(identification));
 8005232:	af03      	add	r7, sp, #12
 8005234:	f504 736b 	add.w	r3, r4, #940	; 0x3ac
 8005238:	463a      	mov	r2, r7
 800523a:	ca03      	ldmia	r2!, {r0, r1}
 800523c:	42b2      	cmp	r2, r6
 800523e:	6018      	str	r0, [r3, #0]
 8005240:	6059      	str	r1, [r3, #4]
 8005242:	4617      	mov	r7, r2
 8005244:	f103 0308 	add.w	r3, r3, #8
 8005248:	d1f6      	bne.n	8005238 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x1cc>
 800524a:	7812      	ldrb	r2, [r2, #0]
 800524c:	701a      	strb	r2, [r3, #0]
	if(enter_identification(identification, "Enter component unit name", frame_id) == 0)
 800524e:	4918      	ldr	r1, [pc, #96]	; (80052b0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x244>)
 8005250:	462a      	mov	r2, r5
 8005252:	a803      	add	r0, sp, #12
 8005254:	f7ff fef0 	bl	8005038 <enter_identification>
 8005258:	b188      	cbz	r0, 800527e <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x212>
	memcpy(j1939->information_this_ECU.this_identifications.component_identification.component_unit_name, (uint8_t*)identification, sizeof(identification));
 800525a:	ab03      	add	r3, sp, #12
 800525c:	f204 34ca 	addw	r4, r4, #970	; 0x3ca
 8005260:	461a      	mov	r2, r3
 8005262:	ca03      	ldmia	r2!, {r0, r1}
 8005264:	42b2      	cmp	r2, r6
 8005266:	6020      	str	r0, [r4, #0]
 8005268:	6061      	str	r1, [r4, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	f104 0408 	add.w	r4, r4, #8
 8005270:	d1f6      	bne.n	8005260 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame+0x1f4>
 8005272:	7813      	ldrb	r3, [r2, #0]
 8005274:	7023      	strb	r3, [r4, #0]
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005276:	2100      	movs	r1, #0
 8005278:	4628      	mov	r0, r5
 800527a:	f7fe fd4f 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 800527e:	b009      	add	sp, #36	; 0x24
 8005280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005282:	bf00      	nop
 8005284:	0801469d 	.word	0x0801469d
 8005288:	080146bc 	.word	0x080146bc
 800528c:	080146cf 	.word	0x080146cf
 8005290:	080146f2 	.word	0x080146f2
 8005294:	08014710 	.word	0x08014710
 8005298:	08014726 	.word	0x08014726
 800529c:	0801473e 	.word	0x0801473e
 80052a0:	08014751 	.word	0x08014751
 80052a4:	08014760 	.word	0x08014760
 80052a8:	0801477d 	.word	0x0801477d
 80052ac:	08014798 	.word	0x08014798
 80052b0:	080147b6 	.word	0x080147b6

080052b4 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 80052b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	show_identifications("Identifications about other ECU", &j1939->from_other_ecu_identifications, true);
 80052b6:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(J1939 *j1939, uint8_t *frame_id) {
 80052b8:	460c      	mov	r4, r1
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80052ba:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	show_identifications("Identifications about other ECU", &j1939->from_other_ecu_identifications, true);
 80052be:	f500 6117 	add.w	r1, r0, #2416	; 0x970
 80052c2:	4815      	ldr	r0, [pc, #84]	; (8005318 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame+0x64>)
 80052c4:	f7ff fd6e 	bl	8004da4 <show_identifications>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80052c8:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 80052ca:	9600      	str	r6, [sp, #0]
 80052cc:	23e6      	movs	r3, #230	; 0xe6
 80052ce:	f240 1211 	movw	r2, #273	; 0x111
 80052d2:	21cd      	movs	r1, #205	; 0xcd
 80052d4:	2055      	movs	r0, #85	; 0x55
 80052d6:	f001 f863 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 80052da:	9500      	str	r5, [sp, #0]
 80052dc:	23e6      	movs	r3, #230	; 0xe6
 80052de:	f240 1211 	movw	r2, #273	; 0x111
 80052e2:	21cd      	movs	r1, #205	; 0xcd
 80052e4:	2055      	movs	r0, #85	; 0x55
 80052e6:	f001 f8ef 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 80052ea:	2302      	movs	r3, #2
 80052ec:	e9cd 6300 	strd	r6, r3, [sp]
 80052f0:	480a      	ldr	r0, [pc, #40]	; (800531c <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame+0x68>)
 80052f2:	462b      	mov	r3, r5
 80052f4:	22d2      	movs	r2, #210	; 0xd2
 80052f6:	215f      	movs	r1, #95	; 0x5f
 80052f8:	f001 f980 	bl	80065fc <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 80052fc:	23e6      	movs	r3, #230	; 0xe6
 80052fe:	f240 1211 	movw	r2, #273	; 0x111
 8005302:	21cd      	movs	r1, #205	; 0xcd
 8005304:	2055      	movs	r0, #85	; 0x55
 8005306:	f002 f859 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800530a:	4629      	mov	r1, r5
 800530c:	4620      	mov	r0, r4
}
 800530e:	b002      	add	sp, #8
 8005310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005314:	f7fe bd02 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
 8005318:	080147d0 	.word	0x080147d0
 800531c:	080133ca 	.word	0x080133ca

08005320 <show_name_frame>:
	else
		*value = (uint32_t) number_value;
	return 1;
}

static void show_name_frame(char title[], struct Name *name, bool display_from_ecu_address){
 8005320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005324:	b090      	sub	sp, #64	; 0x40
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005326:	250f      	movs	r5, #15
static void show_name_frame(char title[], struct Name *name, bool display_from_ecu_address){
 8005328:	460c      	mov	r4, r1
 800532a:	4606      	mov	r6, r0
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 800532c:	23ea      	movs	r3, #234	; 0xea
 800532e:	2106      	movs	r1, #6
 8005330:	2033      	movs	r0, #51	; 0x33
static void show_name_frame(char title[], struct Name *name, bool display_from_ecu_address){
 8005332:	4617      	mov	r7, r2
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005334:	9500      	str	r5, [sp, #0]
 8005336:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800533a:	f001 f831 	bl	80063a0 <ILI9341_fill_rect>

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 800533e:	f04f 0801 	mov.w	r8, #1
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 8005342:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005346:	f240 1209 	movw	r2, #265	; 0x109
 800534a:	211e      	movs	r1, #30
 800534c:	2032      	movs	r0, #50	; 0x32
 800534e:	f001 f869 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text(title, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8005352:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005356:	220a      	movs	r2, #10
 8005358:	2137      	movs	r1, #55	; 0x37
 800535a:	4630      	mov	r0, r6
 800535c:	e9cd 5800 	strd	r5, r8, [sp]
 8005360:	f001 f94c 	bl	80065fc <ILI9341_print_text>

	/* Write out identity number */
	char text[50];
	sprintf(text, "Identity:%lu", name->identity_number);
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	4966      	ldr	r1, [pc, #408]	; (8005500 <show_name_frame+0x1e0>)
 8005368:	a803      	add	r0, sp, #12
 800536a:	f009 ff41 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 800536e:	2223      	movs	r2, #35	; 0x23
 8005370:	e9cd 5800 	strd	r5, r8, [sp]
 8005374:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005378:	2137      	movs	r1, #55	; 0x37
 800537a:	a803      	add	r0, sp, #12
 800537c:	f001 f93e 	bl	80065fc <ILI9341_print_text>

	/* Write out manufacturer code */
	if(name->manufacturer_code == MANUFACTURER_CODE_GRAYHILL)
 8005380:	88a2      	ldrh	r2, [r4, #4]
 8005382:	f5b2 7f93 	cmp.w	r2, #294	; 0x126
 8005386:	f040 808f 	bne.w	80054a8 <show_name_frame+0x188>
		sprintf(text, "Manufacturer code: Gray Hill");
 800538a:	495e      	ldr	r1, [pc, #376]	; (8005504 <show_name_frame+0x1e4>)
	else if (name->manufacturer_code == MANUFACTURER_CODE_SONCEBOZ)
		sprintf(text, "Manufacturer code: SonceBoz");
 800538c:	a803      	add	r0, sp, #12
 800538e:	f009 ff4f 	bl	800f230 <strcpy>
	else
		sprintf(text, "Manufacturer code:%i", name->manufacturer_code);
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8005392:	250f      	movs	r5, #15
 8005394:	2601      	movs	r6, #1
 8005396:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800539a:	222d      	movs	r2, #45	; 0x2d
 800539c:	2137      	movs	r1, #55	; 0x37
 800539e:	a803      	add	r0, sp, #12
 80053a0:	e9cd 5600 	strd	r5, r6, [sp]
 80053a4:	f001 f92a 	bl	80065fc <ILI9341_print_text>

	/* Write out function instance */
	sprintf(text, "Function instance:%i", name->function_instance);
 80053a8:	79a2      	ldrb	r2, [r4, #6]
 80053aa:	4957      	ldr	r1, [pc, #348]	; (8005508 <show_name_frame+0x1e8>)
 80053ac:	a803      	add	r0, sp, #12
 80053ae:	f009 ff1f 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 80053b2:	2237      	movs	r2, #55	; 0x37
 80053b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80053b8:	4611      	mov	r1, r2
 80053ba:	a803      	add	r0, sp, #12
 80053bc:	e9cd 5600 	strd	r5, r6, [sp]
 80053c0:	f001 f91c 	bl	80065fc <ILI9341_print_text>

	/* Write out ECU instance */
	sprintf(text, "ECU instance:%i", name->ECU_instance);
 80053c4:	79e2      	ldrb	r2, [r4, #7]
 80053c6:	4951      	ldr	r1, [pc, #324]	; (800550c <show_name_frame+0x1ec>)
 80053c8:	a803      	add	r0, sp, #12
 80053ca:	f009 ff11 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 80053ce:	2241      	movs	r2, #65	; 0x41
 80053d0:	e9cd 5600 	strd	r5, r6, [sp]
 80053d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80053d8:	2137      	movs	r1, #55	; 0x37
 80053da:	a803      	add	r0, sp, #12
 80053dc:	f001 f90e 	bl	80065fc <ILI9341_print_text>

	/* Write out function */
	if(name->function == FUNCTION_AUXILIARY_VALVES_CONTROL)
 80053e0:	7a22      	ldrb	r2, [r4, #8]
 80053e2:	2a81      	cmp	r2, #129	; 0x81
 80053e4:	d16b      	bne.n	80054be <show_name_frame+0x19e>
		sprintf(text, "Function:Auxiliary Valves Control");
 80053e6:	494a      	ldr	r1, [pc, #296]	; (8005510 <show_name_frame+0x1f0>)
	else if (name->function == FUNCTION_VDC_MODULE)
		sprintf(text, "Function:VDC Module");
 80053e8:	a803      	add	r0, sp, #12
 80053ea:	f009 ff21 	bl	800f230 <strcpy>
	else
		sprintf(text, "Function:%i", name->function);
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 80053ee:	250f      	movs	r5, #15
 80053f0:	2601      	movs	r6, #1
 80053f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80053f6:	224b      	movs	r2, #75	; 0x4b
 80053f8:	2137      	movs	r1, #55	; 0x37
 80053fa:	a803      	add	r0, sp, #12
 80053fc:	e9cd 5600 	strd	r5, r6, [sp]
 8005400:	f001 f8fc 	bl	80065fc <ILI9341_print_text>

	/* Write out vehicle system */
	sprintf(text, "Vehicle system:%i", name->vehicle_system);
 8005404:	7a62      	ldrb	r2, [r4, #9]
 8005406:	4943      	ldr	r1, [pc, #268]	; (8005514 <show_name_frame+0x1f4>)
 8005408:	a803      	add	r0, sp, #12
 800540a:	f009 fef1 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 800540e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005412:	e9cd 5600 	strd	r5, r6, [sp]
 8005416:	2255      	movs	r2, #85	; 0x55
 8005418:	2137      	movs	r1, #55	; 0x37
 800541a:	a803      	add	r0, sp, #12
 800541c:	f001 f8ee 	bl	80065fc <ILI9341_print_text>

	/* Write out vehicle system */
	if(name->arbitrary_address_capable > 0)
 8005420:	7aa3      	ldrb	r3, [r4, #10]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d054      	beq.n	80054d0 <show_name_frame+0x1b0>
		sprintf(text, "Arbitrary address capable:Yes");
 8005426:	493c      	ldr	r1, [pc, #240]	; (8005518 <show_name_frame+0x1f8>)
	else
		sprintf(text, "Arbitrary address capable:No");
 8005428:	a803      	add	r0, sp, #12
 800542a:	f009 ff01 	bl	800f230 <strcpy>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 800542e:	230f      	movs	r3, #15
 8005430:	2201      	movs	r2, #1
 8005432:	e9cd 3200 	strd	r3, r2, [sp]
 8005436:	2137      	movs	r1, #55	; 0x37
 8005438:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800543c:	225f      	movs	r2, #95	; 0x5f
 800543e:	a803      	add	r0, sp, #12
 8005440:	f001 f8dc 	bl	80065fc <ILI9341_print_text>

	/* Write out industry group */
	if(name->industry_group == INDUSTRY_GROUP_GLOBAL)
 8005444:	7ae3      	ldrb	r3, [r4, #11]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d144      	bne.n	80054d4 <show_name_frame+0x1b4>
		sprintf(text, "Industry group:Global");
 800544a:	4934      	ldr	r1, [pc, #208]	; (800551c <show_name_frame+0x1fc>)
		sprintf(text, "Industry group:Marine");
	else if(name->industry_group == INDUSTRY_GROUP_ON_HIGHWAY)
		sprintf(text, "Industry group:On highway");
	else
		sprintf(text, "Industry group:None");
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 800544c:	250f      	movs	r5, #15
 800544e:	2601      	movs	r6, #1
		sprintf(text, "Industry group:None");
 8005450:	a803      	add	r0, sp, #12
 8005452:	f009 feed 	bl	800f230 <strcpy>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8005456:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800545a:	2269      	movs	r2, #105	; 0x69
 800545c:	2137      	movs	r1, #55	; 0x37
 800545e:	a803      	add	r0, sp, #12
 8005460:	e9cd 5600 	strd	r5, r6, [sp]
 8005464:	f001 f8ca 	bl	80065fc <ILI9341_print_text>

	/* Write out vehicle system instance */
	sprintf(text, "Vehicle system instance:%i", name->vehicle_system_instance);
 8005468:	7b22      	ldrb	r2, [r4, #12]
 800546a:	492d      	ldr	r1, [pc, #180]	; (8005520 <show_name_frame+0x200>)
 800546c:	a803      	add	r0, sp, #12
 800546e:	f009 febf 	bl	800f1f0 <siprintf>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 8005472:	e9cd 5600 	strd	r5, r6, [sp]
 8005476:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800547a:	2273      	movs	r2, #115	; 0x73
 800547c:	2137      	movs	r1, #55	; 0x37
 800547e:	a803      	add	r0, sp, #12
 8005480:	f001 f8bc 	bl	80065fc <ILI9341_print_text>

	/* Write out source address */
	if(display_from_ecu_address){
 8005484:	b16f      	cbz	r7, 80054a2 <show_name_frame+0x182>
		sprintf(text, "Source address:%i", name->from_ecu_address);
 8005486:	7b62      	ldrb	r2, [r4, #13]
 8005488:	4926      	ldr	r1, [pc, #152]	; (8005524 <show_name_frame+0x204>)
 800548a:	a803      	add	r0, sp, #12
 800548c:	f009 feb0 	bl	800f1f0 <siprintf>
		ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8005490:	e9cd 5600 	strd	r5, r6, [sp]
 8005494:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005498:	227d      	movs	r2, #125	; 0x7d
 800549a:	2137      	movs	r1, #55	; 0x37
 800549c:	a803      	add	r0, sp, #12
 800549e:	f001 f8ad 	bl	80065fc <ILI9341_print_text>
	}
}
 80054a2:	b010      	add	sp, #64	; 0x40
 80054a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if (name->manufacturer_code == MANUFACTURER_CODE_SONCEBOZ)
 80054a8:	f240 1347 	movw	r3, #327	; 0x147
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d101      	bne.n	80054b4 <show_name_frame+0x194>
		sprintf(text, "Manufacturer code: SonceBoz");
 80054b0:	491d      	ldr	r1, [pc, #116]	; (8005528 <show_name_frame+0x208>)
 80054b2:	e76b      	b.n	800538c <show_name_frame+0x6c>
		sprintf(text, "Manufacturer code:%i", name->manufacturer_code);
 80054b4:	491d      	ldr	r1, [pc, #116]	; (800552c <show_name_frame+0x20c>)
 80054b6:	a803      	add	r0, sp, #12
 80054b8:	f009 fe9a 	bl	800f1f0 <siprintf>
 80054bc:	e769      	b.n	8005392 <show_name_frame+0x72>
	else if (name->function == FUNCTION_VDC_MODULE)
 80054be:	2a87      	cmp	r2, #135	; 0x87
 80054c0:	d101      	bne.n	80054c6 <show_name_frame+0x1a6>
		sprintf(text, "Function:VDC Module");
 80054c2:	491b      	ldr	r1, [pc, #108]	; (8005530 <show_name_frame+0x210>)
 80054c4:	e790      	b.n	80053e8 <show_name_frame+0xc8>
		sprintf(text, "Function:%i", name->function);
 80054c6:	491b      	ldr	r1, [pc, #108]	; (8005534 <show_name_frame+0x214>)
 80054c8:	a803      	add	r0, sp, #12
 80054ca:	f009 fe91 	bl	800f1f0 <siprintf>
 80054ce:	e78e      	b.n	80053ee <show_name_frame+0xce>
		sprintf(text, "Arbitrary address capable:No");
 80054d0:	4919      	ldr	r1, [pc, #100]	; (8005538 <show_name_frame+0x218>)
 80054d2:	e7a9      	b.n	8005428 <show_name_frame+0x108>
	else if(name->industry_group == INDUSTRY_GROUP_CONSTRUCTION)
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d101      	bne.n	80054dc <show_name_frame+0x1bc>
		sprintf(text, "Industry group:Construction");
 80054d8:	4918      	ldr	r1, [pc, #96]	; (800553c <show_name_frame+0x21c>)
 80054da:	e7b7      	b.n	800544c <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_AGRICULTURAL_AND_FORESTRY)
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d101      	bne.n	80054e4 <show_name_frame+0x1c4>
		sprintf(text, "Industry group:Agricultural and forestry");
 80054e0:	4917      	ldr	r1, [pc, #92]	; (8005540 <show_name_frame+0x220>)
 80054e2:	e7b3      	b.n	800544c <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_INDUSTRIAL_CONTROL_PROCESS)
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	d101      	bne.n	80054ec <show_name_frame+0x1cc>
		sprintf(text, "Industry group:Industrial control process");
 80054e8:	4916      	ldr	r1, [pc, #88]	; (8005544 <show_name_frame+0x224>)
 80054ea:	e7af      	b.n	800544c <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_MARINE)
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d101      	bne.n	80054f4 <show_name_frame+0x1d4>
		sprintf(text, "Industry group:Marine");
 80054f0:	4915      	ldr	r1, [pc, #84]	; (8005548 <show_name_frame+0x228>)
 80054f2:	e7ab      	b.n	800544c <show_name_frame+0x12c>
	else if(name->industry_group == INDUSTRY_GROUP_ON_HIGHWAY)
 80054f4:	2b01      	cmp	r3, #1
		sprintf(text, "Industry group:On highway");
 80054f6:	bf0c      	ite	eq
 80054f8:	4914      	ldreq	r1, [pc, #80]	; (800554c <show_name_frame+0x22c>)
		sprintf(text, "Industry group:None");
 80054fa:	4915      	ldrne	r1, [pc, #84]	; (8005550 <show_name_frame+0x230>)
 80054fc:	e7a6      	b.n	800544c <show_name_frame+0x12c>
 80054fe:	bf00      	nop
 8005500:	0801401e 	.word	0x0801401e
 8005504:	0801402b 	.word	0x0801402b
 8005508:	08014079 	.word	0x08014079
 800550c:	0801408e 	.word	0x0801408e
 8005510:	0801409e 	.word	0x0801409e
 8005514:	080140e0 	.word	0x080140e0
 8005518:	080140f2 	.word	0x080140f2
 800551c:	0801412d 	.word	0x0801412d
 8005520:	080141f6 	.word	0x080141f6
 8005524:	0801460c 	.word	0x0801460c
 8005528:	08014048 	.word	0x08014048
 800552c:	08014064 	.word	0x08014064
 8005530:	080140c0 	.word	0x080140c0
 8005534:	080140d4 	.word	0x080140d4
 8005538:	08014110 	.word	0x08014110
 800553c:	08014143 	.word	0x08014143
 8005540:	0801415f 	.word	0x0801415f
 8005544:	08014188 	.word	0x08014188
 8005548:	080141b2 	.word	0x080141b2
 800554c:	080141c8 	.word	0x080141c8
 8005550:	080141e2 	.word	0x080141e2

08005554 <show_numpad_question>:
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 8005554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005556:	460f      	mov	r7, r1
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 8005558:	2100      	movs	r1, #0
static uint8_t show_numpad_question(char title[], uint8_t *frame_id, uint32_t max_value, uint32_t *value) {
 800555a:	4616      	mov	r6, r2
 800555c:	461d      	mov	r5, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, title) == 0) {
 800555e:	aa01      	add	r2, sp, #4
 8005560:	4603      	mov	r3, r0
 8005562:	4608      	mov	r0, r1
 8005564:	f000 fae2 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8005568:	4604      	mov	r4, r0
 800556a:	b930      	cbnz	r0, 800557a <show_numpad_question+0x26>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800556c:	4601      	mov	r1, r0
 800556e:	4638      	mov	r0, r7
 8005570:	f7fe fbd4 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 8005574:	4620      	mov	r0, r4
 8005576:	b003      	add	sp, #12
 8005578:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(number_value < 0)
 800557a:	eddd 7a01 	vldr	s15, [sp, #4]
 800557e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005586:	d503      	bpl.n	8005590 <show_numpad_question+0x3c>
		*value = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	602b      	str	r3, [r5, #0]
	return 1;
 800558c:	2401      	movs	r4, #1
 800558e:	e7f1      	b.n	8005574 <show_numpad_question+0x20>
	else if(number_value > max_value)
 8005590:	ee07 6a10 	vmov	s14, r6
 8005594:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*value = (uint32_t) number_value;
 80055a0:	bfd6      	itet	le
 80055a2:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		*value = max_value;
 80055a6:	602e      	strgt	r6, [r5, #0]
		*value = (uint32_t) number_value;
 80055a8:	edc5 7a00 	vstrle	s15, [r5]
 80055ac:	e7ee      	b.n	800558c <show_numpad_question+0x38>
	...

080055b0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 80055b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b2:	460d      	mov	r5, r1
 80055b4:	b08d      	sub	sp, #52	; 0x34
	show_name_frame("This ECU name", &j1939->information_this_ECU.this_name, false);
 80055b6:	f500 5196 	add.w	r1, r0, #4800	; 0x12c0
 80055ba:	2200      	movs	r2, #0
 80055bc:	3104      	adds	r1, #4
	ILI9341_fill_rect(80, 195, 285, 220, COLOR_GREEN);
 80055be:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
void STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 80055c2:	4604      	mov	r4, r0
	show_name_frame("This ECU name", &j1939->information_this_ECU.this_name, false);
 80055c4:	484b      	ldr	r0, [pc, #300]	; (80056f4 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x144>)
 80055c6:	f7ff feab 	bl	8005320 <show_name_frame>
	ILI9341_hollow_rect(80, 195, 285, 220, COLOR_BLACK);
 80055ca:	2600      	movs	r6, #0
	ILI9341_fill_rect(80, 195, 285, 220, COLOR_GREEN);
 80055cc:	23dc      	movs	r3, #220	; 0xdc
 80055ce:	f240 121d 	movw	r2, #285	; 0x11d
 80055d2:	21c3      	movs	r1, #195	; 0xc3
 80055d4:	2050      	movs	r0, #80	; 0x50
 80055d6:	9700      	str	r7, [sp, #0]
 80055d8:	f000 fee2 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(80, 195, 285, 220, COLOR_BLACK);
 80055dc:	23dc      	movs	r3, #220	; 0xdc
 80055de:	f240 121d 	movw	r2, #285	; 0x11d
 80055e2:	21c3      	movs	r1, #195	; 0xc3
 80055e4:	2050      	movs	r0, #80	; 0x50
 80055e6:	9600      	str	r6, [sp, #0]
 80055e8:	f000 ff6e 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Set the ECU NAME", 87, 200, COLOR_BLACK, COLOR_GREEN, 2);
 80055ec:	2302      	movs	r3, #2
 80055ee:	e9cd 7300 	strd	r7, r3, [sp]
 80055f2:	4841      	ldr	r0, [pc, #260]	; (80056f8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x148>)
 80055f4:	4633      	mov	r3, r6
 80055f6:	22c8      	movs	r2, #200	; 0xc8
 80055f8:	2157      	movs	r1, #87	; 0x57
 80055fa:	f000 ffff 	bl	80065fc <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(80, 195, 285, 220);
 80055fe:	21c3      	movs	r1, #195	; 0xc3
 8005600:	23dc      	movs	r3, #220	; 0xdc
 8005602:	f240 121d 	movw	r2, #285	; 0x11d
 8005606:	2050      	movs	r0, #80	; 0x50
 8005608:	f001 fed8 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to set the NAME?") == 0) {
 800560c:	483b      	ldr	r0, [pc, #236]	; (80056fc <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x14c>)
 800560e:	f7fd f893 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8005612:	4601      	mov	r1, r0
 8005614:	b928      	cbnz	r0, 8005622 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x72>
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005616:	4628      	mov	r0, r5
}
 8005618:	b00d      	add	sp, #52	; 0x34
 800561a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800561e:	f7fe bb7d 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
	if(show_numpad_question("Enter identity between 0 and 2097151", frame_id, 2097151, &identity_number) == 0)
 8005622:	4a37      	ldr	r2, [pc, #220]	; (8005700 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x150>)
 8005624:	4837      	ldr	r0, [pc, #220]	; (8005704 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x154>)
 8005626:	ab03      	add	r3, sp, #12
 8005628:	4629      	mov	r1, r5
 800562a:	f7ff ff93 	bl	8005554 <show_numpad_question>
 800562e:	2800      	cmp	r0, #0
 8005630:	d05e      	beq.n	80056f0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter manufacturer code between 0 and 2047", frame_id, 2047, &manufacturer_code) == 0)
 8005632:	4835      	ldr	r0, [pc, #212]	; (8005708 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x158>)
 8005634:	ab04      	add	r3, sp, #16
 8005636:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800563a:	4629      	mov	r1, r5
 800563c:	f7ff ff8a 	bl	8005554 <show_numpad_question>
 8005640:	2800      	cmp	r0, #0
 8005642:	d055      	beq.n	80056f0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter function instance between 0 and 31", frame_id, 31, &function_instance) == 0)
 8005644:	4831      	ldr	r0, [pc, #196]	; (800570c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x15c>)
 8005646:	ab05      	add	r3, sp, #20
 8005648:	221f      	movs	r2, #31
 800564a:	4629      	mov	r1, r5
 800564c:	f7ff ff82 	bl	8005554 <show_numpad_question>
 8005650:	2800      	cmp	r0, #0
 8005652:	d04d      	beq.n	80056f0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter ECU instance between 0 and 7", frame_id, 7, &ECU_instance) == 0)
 8005654:	482e      	ldr	r0, [pc, #184]	; (8005710 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x160>)
 8005656:	ab06      	add	r3, sp, #24
 8005658:	2207      	movs	r2, #7
 800565a:	4629      	mov	r1, r5
 800565c:	f7ff ff7a 	bl	8005554 <show_numpad_question>
 8005660:	2800      	cmp	r0, #0
 8005662:	d045      	beq.n	80056f0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter function between 0 and 255", frame_id, 255, &function) == 0)
 8005664:	482b      	ldr	r0, [pc, #172]	; (8005714 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x164>)
 8005666:	ab07      	add	r3, sp, #28
 8005668:	22ff      	movs	r2, #255	; 0xff
 800566a:	4629      	mov	r1, r5
 800566c:	f7ff ff72 	bl	8005554 <show_numpad_question>
 8005670:	2800      	cmp	r0, #0
 8005672:	d03d      	beq.n	80056f0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter vehicle system between 0 and 127", frame_id, 127, &vehicle_system) == 0)
 8005674:	4828      	ldr	r0, [pc, #160]	; (8005718 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x168>)
 8005676:	ab08      	add	r3, sp, #32
 8005678:	227f      	movs	r2, #127	; 0x7f
 800567a:	4629      	mov	r1, r5
 800567c:	f7ff ff6a 	bl	8005554 <show_numpad_question>
 8005680:	2800      	cmp	r0, #0
 8005682:	d035      	beq.n	80056f0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter arbitrary address capable between 0 and 1", frame_id, 1, &arbitrary_address_capable) == 0)
 8005684:	4825      	ldr	r0, [pc, #148]	; (800571c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x16c>)
 8005686:	ab09      	add	r3, sp, #36	; 0x24
 8005688:	2201      	movs	r2, #1
 800568a:	4629      	mov	r1, r5
 800568c:	f7ff ff62 	bl	8005554 <show_numpad_question>
 8005690:	b370      	cbz	r0, 80056f0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter industry group between 0 and 7", frame_id, 7, &industry_group) == 0)
 8005692:	4823      	ldr	r0, [pc, #140]	; (8005720 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x170>)
 8005694:	ab0a      	add	r3, sp, #40	; 0x28
 8005696:	2207      	movs	r2, #7
 8005698:	4629      	mov	r1, r5
 800569a:	f7ff ff5b 	bl	8005554 <show_numpad_question>
 800569e:	b338      	cbz	r0, 80056f0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	if(show_numpad_question("Enter vehicle system instance between 0 and 15", frame_id, 15, &vehicle_system_instance) == 0)
 80056a0:	4820      	ldr	r0, [pc, #128]	; (8005724 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x174>)
 80056a2:	ab0b      	add	r3, sp, #44	; 0x2c
 80056a4:	220f      	movs	r2, #15
 80056a6:	4629      	mov	r1, r5
 80056a8:	f7ff ff54 	bl	8005554 <show_numpad_question>
 80056ac:	b300      	cbz	r0, 80056f0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame+0x140>
	j1939->information_this_ECU.this_name.identity_number = identity_number;
 80056ae:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80056b2:	9a03      	ldr	r2, [sp, #12]
 80056b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	j1939->information_this_ECU.this_name.manufacturer_code = manufacturer_code;
 80056b8:	9a04      	ldr	r2, [sp, #16]
 80056ba:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
	j1939->information_this_ECU.this_name.function_instance = function_instance;
 80056be:	9a05      	ldr	r2, [sp, #20]
 80056c0:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
	j1939->information_this_ECU.this_name.ECU_instance = ECU_instance;
 80056c4:	9a06      	ldr	r2, [sp, #24]
 80056c6:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
	j1939->information_this_ECU.this_name.function = function;
 80056ca:	9a07      	ldr	r2, [sp, #28]
 80056cc:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
	j1939->information_this_ECU.this_name.vehicle_system = vehicle_system;
 80056d0:	9a08      	ldr	r2, [sp, #32]
 80056d2:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
	j1939->information_this_ECU.this_name.arbitrary_address_capable = arbitrary_address_capable;
 80056d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d8:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
	j1939->information_this_ECU.this_name.industry_group = industry_group;
 80056dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056de:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
	j1939->information_this_ECU.this_name.vehicle_system_instance = vehicle_system_instance;
 80056e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056e4:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 80056e8:	2100      	movs	r1, #0
 80056ea:	4628      	mov	r0, r5
 80056ec:	f7fe fb16 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 80056f0:	b00d      	add	sp, #52	; 0x34
 80056f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f4:	080147f0 	.word	0x080147f0
 80056f8:	080147fe 	.word	0x080147fe
 80056fc:	0801480f 	.word	0x0801480f
 8005700:	001fffff 	.word	0x001fffff
 8005704:	08013e49 	.word	0x08013e49
 8005708:	08013e6e 	.word	0x08013e6e
 800570c:	08013e99 	.word	0x08013e99
 8005710:	08013ec2 	.word	0x08013ec2
 8005714:	08013ee5 	.word	0x08013ee5
 8005718:	08013f06 	.word	0x08013f06
 800571c:	08013f2d 	.word	0x08013f2d
 8005720:	08013f5d 	.word	0x08013f5d
 8005724:	08013f82 	.word	0x08013f82

08005728 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame>:
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 8005728:	b573      	push	{r0, r1, r4, r5, r6, lr}
	show_name_frame("Other ECU name", &j1939->from_other_ecu_name, true);
 800572a:	2201      	movs	r2, #1
void STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(J1939 *j1939, uint8_t *frame_id) {
 800572c:	460c      	mov	r4, r1
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 800572e:	f44f 66fc 	mov.w	r6, #2016	; 0x7e0
	show_name_frame("Other ECU name", &j1939->from_other_ecu_name, true);
 8005732:	f500 7188 	add.w	r1, r0, #272	; 0x110
 8005736:	4815      	ldr	r0, [pc, #84]	; (800578c <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame+0x64>)
 8005738:	f7ff fdf2 	bl	8005320 <show_name_frame>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 800573c:	2500      	movs	r5, #0
	ILI9341_fill_rect(85, 205, 273, 230, COLOR_GREEN);
 800573e:	9600      	str	r6, [sp, #0]
 8005740:	23e6      	movs	r3, #230	; 0xe6
 8005742:	f240 1211 	movw	r2, #273	; 0x111
 8005746:	21cd      	movs	r1, #205	; 0xcd
 8005748:	2055      	movs	r0, #85	; 0x55
 800574a:	f000 fe29 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 205, 273, 230, COLOR_BLACK);
 800574e:	9500      	str	r5, [sp, #0]
 8005750:	23e6      	movs	r3, #230	; 0xe6
 8005752:	f240 1211 	movw	r2, #273	; 0x111
 8005756:	21cd      	movs	r1, #205	; 0xcd
 8005758:	2055      	movs	r0, #85	; 0x55
 800575a:	f000 feb5 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Exit frame now", 95, 210, COLOR_BLACK, COLOR_GREEN, 2);
 800575e:	2302      	movs	r3, #2
 8005760:	e9cd 6300 	strd	r6, r3, [sp]
 8005764:	480a      	ldr	r0, [pc, #40]	; (8005790 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame+0x68>)
 8005766:	462b      	mov	r3, r5
 8005768:	22d2      	movs	r2, #210	; 0xd2
 800576a:	215f      	movs	r1, #95	; 0x5f
 800576c:	f000 ff46 	bl	80065fc <ILI9341_print_text>
	STM32_PLC_LCD_Call_One_Button_Logic(85, 205, 273, 230);
 8005770:	23e6      	movs	r3, #230	; 0xe6
 8005772:	f240 1211 	movw	r2, #273	; 0x111
 8005776:	21cd      	movs	r1, #205	; 0xcd
 8005778:	2055      	movs	r0, #85	; 0x55
 800577a:	f001 fe1f 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800577e:	4629      	mov	r1, r5
 8005780:	4620      	mov	r0, r4
}
 8005782:	b002      	add	sp, #8
 8005784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 8005788:	f7fe bac8 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
 800578c:	0801482c 	.word	0x0801482c
 8005790:	080133ca 	.word	0x080133ca

08005794 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame>:
#include "../../../Open SAE J1939/SAE_J1939/SAE_J1939_Enums/Enum_PGN.h"
#include "../../../Open SAE J1939/SAE_J1939/SAE_J1939-21_Transport_Layer/Transport_Layer.h"
#include "../../../Open SAE J1939/SAE_J1939/SAE_J1939-81_Network_Management_Layer/Network_Management_Layer.h"


void STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(J1939 *j1939, uint8_t *frame_id) {
 8005794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005796:	b087      	sub	sp, #28
	/* Clear the screen , but not the icons */
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 8005798:	240f      	movs	r4, #15
 800579a:	9400      	str	r4, [sp, #0]
 800579c:	23ea      	movs	r3, #234	; 0xea
 800579e:	f44f 729d 	mov.w	r2, #314	; 0x13a
void STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(J1939 *j1939, uint8_t *frame_id) {
 80057a2:	4607      	mov	r7, r0
 80057a4:	460e      	mov	r6, r1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80057a6:	2033      	movs	r0, #51	; 0x33
 80057a8:	2106      	movs	r1, #6

	/* Write the title */
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
	ILI9341_print_text("Do a PGN request", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80057aa:	2501      	movs	r5, #1
	ILI9341_fill_rect(51, 6, 314, 234, COLOR_NAVY);
 80057ac:	f000 fdf8 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_draw_horizontal_line(50, 30, 265, COLOR_GREEN);
 80057b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80057b4:	f240 1209 	movw	r2, #265	; 0x109
 80057b8:	211e      	movs	r1, #30
 80057ba:	2032      	movs	r0, #50	; 0x32
 80057bc:	f000 fe32 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_print_text("Do a PGN request", 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80057c0:	e9cd 4500 	strd	r4, r5, [sp]
 80057c4:	4854      	ldr	r0, [pc, #336]	; (8005918 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x184>)
 80057c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80057ca:	220a      	movs	r2, #10
 80057cc:	2137      	movs	r1, #55	; 0x37
 80057ce:	f000 ff15 	bl	80065fc <ILI9341_print_text>

	/* Most commonly PGN requests */
	ILI9341_print_text("Commonly PGN numbers:", 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 80057d2:	e9cd 4500 	strd	r4, r5, [sp]
 80057d6:	4851      	ldr	r0, [pc, #324]	; (800591c <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x188>)
 80057d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80057dc:	2223      	movs	r2, #35	; 0x23
 80057de:	2137      	movs	r1, #55	; 0x37
 80057e0:	f000 ff0c 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("Address claimed:60928 Software ID:65242", 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 80057e4:	e9cd 4500 	strd	r4, r5, [sp]
 80057e8:	484d      	ldr	r0, [pc, #308]	; (8005920 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x18c>)
 80057ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80057ee:	222d      	movs	r2, #45	; 0x2d
 80057f0:	2137      	movs	r1, #55	; 0x37
 80057f2:	f000 ff03 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("ECU ID:64965 Component ID:65295", 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 80057f6:	2237      	movs	r2, #55	; 0x37
 80057f8:	e9cd 4500 	strd	r4, r5, [sp]
 80057fc:	4611      	mov	r1, r2
 80057fe:	4849      	ldr	r0, [pc, #292]	; (8005924 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x190>)
 8005800:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005804:	f000 fefa 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("DM1:65226 DM2:65227 DM3:65228", 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8005808:	e9cd 4500 	strd	r4, r5, [sp]
 800580c:	4846      	ldr	r0, [pc, #280]	; (8005928 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x194>)
 800580e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005812:	2241      	movs	r2, #65	; 0x41
 8005814:	2137      	movs	r1, #55	; 0x37
 8005816:	f000 fef1 	bl	80065fc <ILI9341_print_text>
	ILI9341_print_text("PGN 60928 will update all ECU addresses", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800581a:	e9cd 4500 	strd	r4, r5, [sp]
 800581e:	4843      	ldr	r0, [pc, #268]	; (800592c <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x198>)
 8005820:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005824:	224b      	movs	r2, #75	; 0x4b
 8005826:	2137      	movs	r1, #55	; 0x37

	/* Request button */
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 8005828:	f44f 65fc 	mov.w	r5, #2016	; 0x7e0
	ILI9341_print_text("PGN 60928 will update all ECU addresses", 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 800582c:	f000 fee6 	bl	80065fc <ILI9341_print_text>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 8005830:	2400      	movs	r4, #0
	ILI9341_fill_rect(85, 195, 273, 220, COLOR_GREEN);
 8005832:	23dc      	movs	r3, #220	; 0xdc
 8005834:	f240 1211 	movw	r2, #273	; 0x111
 8005838:	21c3      	movs	r1, #195	; 0xc3
 800583a:	2055      	movs	r0, #85	; 0x55
 800583c:	9500      	str	r5, [sp, #0]
 800583e:	f000 fdaf 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_hollow_rect(85, 195, 273, 220, COLOR_BLACK);
 8005842:	23dc      	movs	r3, #220	; 0xdc
 8005844:	f240 1211 	movw	r2, #273	; 0x111
 8005848:	21c3      	movs	r1, #195	; 0xc3
 800584a:	2055      	movs	r0, #85	; 0x55
 800584c:	9400      	str	r4, [sp, #0]
 800584e:	f000 fe3b 	bl	80064c8 <ILI9341_hollow_rect>
	ILI9341_print_text("Enter a request", 90, 200, COLOR_BLACK, COLOR_GREEN, 2);
 8005852:	2302      	movs	r3, #2
 8005854:	e9cd 5300 	strd	r5, r3, [sp]
 8005858:	4835      	ldr	r0, [pc, #212]	; (8005930 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x19c>)
 800585a:	4623      	mov	r3, r4
 800585c:	22c8      	movs	r2, #200	; 0xc8
 800585e:	215a      	movs	r1, #90	; 0x5a
 8005860:	f000 fecc 	bl	80065fc <ILI9341_print_text>

	/* Logic for request button */
	STM32_PLC_LCD_Call_One_Button_Logic(85, 195, 273, 220);
 8005864:	23dc      	movs	r3, #220	; 0xdc
 8005866:	f240 1211 	movw	r2, #273	; 0x111
 800586a:	21c3      	movs	r1, #195	; 0xc3
 800586c:	2055      	movs	r0, #85	; 0x55
 800586e:	f001 fda5 	bl	80073bc <STM32_PLC_LCD_Call_One_Button_Logic>

	/* Ask the user if */
	if(STM32_PLC_LCD_Show_Question_Yes_No_Dialog("Do you want to enter a PGN number?") == 0)
 8005872:	4830      	ldr	r0, [pc, #192]	; (8005934 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1a0>)
 8005874:	f7fc ff60 	bl	8002738 <STM32_PLC_LCD_Show_Question_Yes_No_Dialog>
 8005878:	b928      	cbnz	r0, 8005886 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xf2>
		SAE_J1939_Send_Request_Address_Claimed(j1939, DA);
	else
		SAE_J1939_Send_Request(j1939, DA, PGN);

	/* Exit */
	STM32_PLC_LCD_Show_Main_Frame(frame_id, false);
 800587a:	2100      	movs	r1, #0
 800587c:	4630      	mov	r0, r6
 800587e:	f7fe fa4d 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
}
 8005882:	b007      	add	sp, #28
 8005884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter PGN number between 0 and 65535") == 0)
 8005886:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1a4>)
 8005888:	aa05      	add	r2, sp, #20
 800588a:	4621      	mov	r1, r4
 800588c:	4620      	mov	r0, r4
 800588e:	f000 f94d 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 8005892:	2800      	cmp	r0, #0
 8005894:	d0f1      	beq.n	800587a <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xe6>
	if(number_value < 0)
 8005896:	eddd 7a05 	vldr	s15, [sp, #20]
 800589a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800589e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a2:	d40d      	bmi.n	80058c0 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x12c>
	else if(number_value > 0xFFFF)
 80058a4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800593c <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1a8>
 80058a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		PGN = (uint16_t) number_value;
 80058b0:	bfd7      	itett	le
 80058b2:	eefc 7ae7 	vcvtle.u32.f32	s15, s15
		PGN = 0xFFFF;
 80058b6:	f64f 74ff 	movwgt	r4, #65535	; 0xffff
		PGN = (uint16_t) number_value;
 80058ba:	ee17 3a90 	vmovle	r3, s15
 80058be:	b29c      	uxthle	r4, r3
	if(STM32_PLC_LCD_Show_Numpad_Frame(decimalbutton_show, minusbutton_show, &number_value, "Enter destination address 0 to 255") == 0)
 80058c0:	2100      	movs	r1, #0
 80058c2:	4b1f      	ldr	r3, [pc, #124]	; (8005940 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1ac>)
 80058c4:	aa05      	add	r2, sp, #20
 80058c6:	4608      	mov	r0, r1
 80058c8:	f000 f930 	bl	8005b2c <STM32_PLC_LCD_Show_Numpad_Frame>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d0d4      	beq.n	800587a <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xe6>
	if(number_value < 0)
 80058d0:	eddd 7a05 	vldr	s15, [sp, #20]
 80058d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058dc:	d413      	bmi.n	8005906 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x172>
	else if(number_value > 0xFF)
 80058de:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005944 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x1b0>
 80058e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ea:	dc0e      	bgt.n	800590a <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x176>
		DA = (uint8_t) number_value;
 80058ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f0:	edcd 7a03 	vstr	s15, [sp, #12]
 80058f4:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if(PGN == PGN_ADDRESS_CLAIMED)
 80058f8:	f5b4 4f6e 	cmp.w	r4, #60928	; 0xee00
 80058fc:	d107      	bne.n	800590e <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x17a>
		SAE_J1939_Send_Request_Address_Claimed(j1939, DA);
 80058fe:	4638      	mov	r0, r7
 8005900:	f7fc fe40 	bl	8002584 <SAE_J1939_Send_Request_Address_Claimed>
 8005904:	e7b9      	b.n	800587a <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xe6>
		DA = 0;
 8005906:	2100      	movs	r1, #0
 8005908:	e7f6      	b.n	80058f8 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x164>
		DA = 0xFF;
 800590a:	21ff      	movs	r1, #255	; 0xff
 800590c:	e7f4      	b.n	80058f8 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0x164>
		SAE_J1939_Send_Request(j1939, DA, PGN);
 800590e:	4622      	mov	r2, r4
 8005910:	4638      	mov	r0, r7
 8005912:	f7fc fdb5 	bl	8002480 <SAE_J1939_Send_Request>
 8005916:	e7b0      	b.n	800587a <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame+0xe6>
 8005918:	08013ad6 	.word	0x08013ad6
 800591c:	0801483b 	.word	0x0801483b
 8005920:	08014851 	.word	0x08014851
 8005924:	08014879 	.word	0x08014879
 8005928:	08014899 	.word	0x08014899
 800592c:	080148b7 	.word	0x080148b7
 8005930:	080148df 	.word	0x080148df
 8005934:	080148ef 	.word	0x080148ef
 8005938:	08014912 	.word	0x08014912
 800593c:	477fff00 	.word	0x477fff00
 8005940:	08014937 	.word	0x08014937
 8005944:	437f0000 	.word	0x437f0000

08005948 <STM32_PLC_LCD_Show_Keyboard_Frame>:
 */

#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Keyboard_Frame(char word[], char title[]) {
 8005948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	ed2d 8b02 	vpush	{d8}
 8005950:	ee08 0a10 	vmov	s16, r0
 8005954:	b085      	sub	sp, #20
	/* Begin with black page */
	ILI9341_fill_screen(COLOR_BLACK);
 8005956:	2000      	movs	r0, #0
uint8_t STM32_PLC_LCD_Show_Keyboard_Frame(char word[], char title[]) {
 8005958:	460c      	mov	r4, r1
	ILI9341_fill_screen(COLOR_BLACK);
 800595a:	f000 fceb 	bl	8006334 <ILI9341_fill_screen>

	/* Print frame - large square */
	ILI9341_hollow_rect(5, 5, 315, 235, COLOR_GREEN);
 800595e:	2105      	movs	r1, #5
 8005960:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005964:	4608      	mov	r0, r1
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	f240 123b 	movw	r2, #315	; 0x13b
 800596c:	23eb      	movs	r3, #235	; 0xeb
 800596e:	f000 fdab 	bl	80064c8 <ILI9341_hollow_rect>

	/* Create gray, white square */
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 8005972:	f647 36ef 	movw	r6, #31727	; 0x7bef
 8005976:	2106      	movs	r1, #6
 8005978:	4608      	mov	r0, r1
 800597a:	9600      	str	r6, [sp, #0]
 800597c:	2337      	movs	r3, #55	; 0x37
 800597e:	f44f 729d 	mov.w	r2, #314	; 0x13a
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 8005982:	f64f 75ff 	movw	r5, #65535	; 0xffff
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 8005986:	f000 fd0b 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 800598a:	2332      	movs	r3, #50	; 0x32
 800598c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005990:	2118      	movs	r1, #24
 8005992:	200c      	movs	r0, #12
 8005994:	9500      	str	r5, [sp, #0]
 8005996:	f000 fd03 	bl	80063a0 <ILI9341_fill_rect>

	/* Set title */
	ILI9341_print_text(title, 12, 12, COLOR_WHITE, COLOR_DGRAY, 1);
 800599a:	2301      	movs	r3, #1
 800599c:	220c      	movs	r2, #12
 800599e:	e9cd 6300 	strd	r6, r3, [sp]
 80059a2:	4620      	mov	r0, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	4611      	mov	r1, r2
 80059a8:	f000 fe28 	bl	80065fc <ILI9341_print_text>
 80059ac:	2426      	movs	r4, #38	; 0x26
 80059ae:	2600      	movs	r6, #0
	char letter[3];
	uint8_t keyboard_page = 6; /* We start at this */
	for (uint8_t i = 0; i < 5; i++) {
		x += 23;
		/* Upper numbers */
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 80059b0:	f1a4 090f 	sub.w	r9, r4, #15
 80059b4:	f104 0a19 	add.w	sl, r4, #25
 80059b8:	fa0f f989 	sxth.w	r9, r9
 80059bc:	fa0f fa8a 	sxth.w	sl, sl
 80059c0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80059c4:	f1a4 070a 	sub.w	r7, r4, #10
 80059c8:	f104 0814 	add.w	r8, r4, #20
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 80059cc:	f64f 75ff 	movw	r5, #65535	; 0xffff
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	4652      	mov	r2, sl
 80059d4:	236e      	movs	r3, #110	; 0x6e
 80059d6:	2146      	movs	r1, #70	; 0x46
 80059d8:	4648      	mov	r0, r9
 80059da:	b23f      	sxth	r7, r7
 80059dc:	fa0f f888 	sxth.w	r8, r8
 80059e0:	f000 fcde 	bl	80063a0 <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 80059e4:	2369      	movs	r3, #105	; 0x69
 80059e6:	4642      	mov	r2, r8
 80059e8:	214b      	movs	r1, #75	; 0x4b
 80059ea:	4638      	mov	r0, r7
 80059ec:	9500      	str	r5, [sp, #0]
 80059ee:	f000 fcd7 	bl	80063a0 <ILI9341_fill_rect>
		sprintf(letter, "%c", i + 32 + 5*keyboard_page); /* 32 is space char when i = 0 */
 80059f2:	f104 0b01 	add.w	fp, r4, #1
 80059f6:	4947      	ldr	r1, [pc, #284]	; (8005b14 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1cc>)
 80059f8:	f106 023e 	add.w	r2, r6, #62	; 0x3e
 80059fc:	a803      	add	r0, sp, #12
 80059fe:	f009 fbf7 	bl	800f1f0 <siprintf>
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8005a02:	fa0f fb8b 	sxth.w	fp, fp
 8005a06:	2302      	movs	r3, #2
 8005a08:	4659      	mov	r1, fp
 8005a0a:	e9cd 5300 	strd	r5, r3, [sp]
 8005a0e:	2253      	movs	r2, #83	; 0x53
 8005a10:	2300      	movs	r3, #0
 8005a12:	a803      	add	r0, sp, #12
 8005a14:	f000 fdf2 	bl	80065fc <ILI9341_print_text>

		/* Lower numbers */
		ILI9341_fill_rect(x, 125, x + 40, 165, COLOR_DGRAY);
 8005a18:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	4652      	mov	r2, sl
 8005a20:	23a5      	movs	r3, #165	; 0xa5
 8005a22:	217d      	movs	r1, #125	; 0x7d
 8005a24:	4648      	mov	r0, r9
 8005a26:	f000 fcbb 	bl	80063a0 <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 130, x + 35, 160, COLOR_WHITE);
 8005a2a:	23a0      	movs	r3, #160	; 0xa0
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	2182      	movs	r1, #130	; 0x82
 8005a30:	4638      	mov	r0, r7
 8005a32:	9500      	str	r5, [sp, #0]
 8005a34:	f000 fcb4 	bl	80063a0 <ILI9341_fill_rect>
		sprintf(letter, "%c", i + 5 + 32 + 5*keyboard_page); /* 32 + 5 is % char when i = 0 */
 8005a38:	4936      	ldr	r1, [pc, #216]	; (8005b14 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1cc>)
 8005a3a:	f106 0243 	add.w	r2, r6, #67	; 0x43
 8005a3e:	a803      	add	r0, sp, #12
 8005a40:	f009 fbd6 	bl	800f1f0 <siprintf>
		ILI9341_print_text(letter, x + 16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 8005a44:	2302      	movs	r3, #2
 8005a46:	4659      	mov	r1, fp
 8005a48:	e9cd 5300 	strd	r5, r3, [sp]
 8005a4c:	228a      	movs	r2, #138	; 0x8a
 8005a4e:	2300      	movs	r3, #0
 8005a50:	a803      	add	r0, sp, #12
 8005a52:	f000 fdd3 	bl	80065fc <ILI9341_print_text>

		/* This show the < and > buttons */
		if (i == 0) {
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005a56:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	fa5f fb86 	uxtb.w	fp, r6
 8005a60:	23dc      	movs	r3, #220	; 0xdc
 8005a62:	4652      	mov	r2, sl
 8005a64:	21b4      	movs	r1, #180	; 0xb4
 8005a66:	4648      	mov	r0, r9
		if (i == 0) {
 8005a68:	b9fe      	cbnz	r6, 8005aaa <STM32_PLC_LCD_Show_Keyboard_Frame+0x162>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005a6a:	f000 fc99 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8005a6e:	23d7      	movs	r3, #215	; 0xd7
 8005a70:	4642      	mov	r2, r8
 8005a72:	21b9      	movs	r1, #185	; 0xb9
 8005a74:	4638      	mov	r0, r7
 8005a76:	9500      	str	r5, [sp, #0]
 8005a78:	f000 fc92 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
		}

		/* Give the buttons a text */
		if (i == 0) {
			ILI9341_print_text("<", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	4826      	ldr	r0, [pc, #152]	; (8005b18 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1d0>)
 8005a80:	e9cd 5300 	strd	r5, r3, [sp]
 8005a84:	22c1      	movs	r2, #193	; 0xc1
 8005a86:	4633      	mov	r3, r6
 8005a88:	b221      	sxth	r1, r4
	for (uint8_t i = 0; i < 5; i++) {
 8005a8a:	3601      	adds	r6, #1
		} else if (i == 2) {
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 3) {
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 4) {
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005a8c:	f000 fdb6 	bl	80065fc <ILI9341_print_text>
	for (uint8_t i = 0; i < 5; i++) {
 8005a90:	343a      	adds	r4, #58	; 0x3a
 8005a92:	2e05      	cmp	r6, #5
 8005a94:	b2a4      	uxth	r4, r4
 8005a96:	d18b      	bne.n	80059b0 <STM32_PLC_LCD_Show_Keyboard_Frame+0x68>

		x += 35; /* Space between buttons */
	}

	/* Logic */
	return STM32_PLC_LCD_Call_Keyboard_Logic(word);
 8005a98:	ee18 0a10 	vmov	r0, s16
 8005a9c:	f001 f904 	bl	8006ca8 <STM32_PLC_LCD_Call_Keyboard_Logic>
}
 8005aa0:	b005      	add	sp, #20
 8005aa2:	ecbd 8b02 	vpop	{d8}
 8005aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (i == 1) {
 8005aaa:	f1bb 0f01 	cmp.w	fp, #1
 8005aae:	d110      	bne.n	8005ad2 <STM32_PLC_LCD_Show_Keyboard_Frame+0x18a>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005ab0:	f000 fc76 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8005ab4:	23d7      	movs	r3, #215	; 0xd7
 8005ab6:	4642      	mov	r2, r8
 8005ab8:	21b9      	movs	r1, #185	; 0xb9
 8005aba:	4638      	mov	r0, r7
 8005abc:	9500      	str	r5, [sp, #0]
 8005abe:	f000 fc6f 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_print_text(">", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e9cd 5300 	strd	r5, r3, [sp]
 8005ac8:	4814      	ldr	r0, [pc, #80]	; (8005b1c <STM32_PLC_LCD_Show_Keyboard_Frame+0x1d4>)
 8005aca:	2300      	movs	r3, #0
 8005acc:	22c1      	movs	r2, #193	; 0xc1
 8005ace:	b221      	sxth	r1, r4
 8005ad0:	e7db      	b.n	8005a8a <STM32_PLC_LCD_Show_Keyboard_Frame+0x142>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005ad2:	f000 fc65 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8005ad6:	9500      	str	r5, [sp, #0]
 8005ad8:	23d7      	movs	r3, #215	; 0xd7
 8005ada:	4642      	mov	r2, r8
 8005adc:	21b9      	movs	r1, #185	; 0xb9
 8005ade:	4638      	mov	r0, r7
 8005ae0:	f000 fc5e 	bl	80063a0 <ILI9341_fill_rect>
		} else if (i == 2) {
 8005ae4:	f1bb 0f02 	cmp.w	fp, #2
 8005ae8:	d106      	bne.n	8005af8 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1b0>
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005aea:	e9cd 5b00 	strd	r5, fp, [sp]
 8005aee:	480c      	ldr	r0, [pc, #48]	; (8005b20 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1d8>)
 8005af0:	2300      	movs	r3, #0
 8005af2:	22c1      	movs	r2, #193	; 0xc1
 8005af4:	b221      	sxth	r1, r4
 8005af6:	e7c8      	b.n	8005a8a <STM32_PLC_LCD_Show_Keyboard_Frame+0x142>
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005af8:	2302      	movs	r3, #2
		} else if (i == 3) {
 8005afa:	f1bb 0f03 	cmp.w	fp, #3
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005afe:	f1a4 0106 	sub.w	r1, r4, #6
 8005b02:	e9cd 5300 	strd	r5, r3, [sp]
 8005b06:	bf0c      	ite	eq
 8005b08:	4806      	ldreq	r0, [pc, #24]	; (8005b24 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1dc>)
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005b0a:	4807      	ldrne	r0, [pc, #28]	; (8005b28 <STM32_PLC_LCD_Show_Keyboard_Frame+0x1e0>)
 8005b0c:	b209      	sxth	r1, r1
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	22c1      	movs	r2, #193	; 0xc1
 8005b12:	e7ba      	b.n	8005a8a <STM32_PLC_LCD_Show_Keyboard_Frame+0x142>
 8005b14:	08013a1b 	.word	0x08013a1b
 8005b18:	0801495a 	.word	0x0801495a
 8005b1c:	08013a22 	.word	0x08013a22
 8005b20:	08012ee3 	.word	0x08012ee3
 8005b24:	08013a1e 	.word	0x08013a1e
 8005b28:	0801495c 	.word	0x0801495c

08005b2c <STM32_PLC_LCD_Show_Numpad_Frame>:
 */

#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Show_Numpad_Frame(bool decimalbutton_show, bool minusbutton_show, float *number_value, char title[]) {
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	b089      	sub	sp, #36	; 0x24
 8005b32:	e9cd 0103 	strd	r0, r1, [sp, #12]
	/* Begin with black page */
	ILI9341_fill_screen(COLOR_BLACK);
 8005b36:	2000      	movs	r0, #0
uint8_t STM32_PLC_LCD_Show_Numpad_Frame(bool decimalbutton_show, bool minusbutton_show, float *number_value, char title[]) {
 8005b38:	461c      	mov	r4, r3
 8005b3a:	9205      	str	r2, [sp, #20]
	ILI9341_fill_screen(COLOR_BLACK);
 8005b3c:	f000 fbfa 	bl	8006334 <ILI9341_fill_screen>

	/* Print frame - large square */
	ILI9341_hollow_rect(5, 5, 315, 235, COLOR_GREEN);
 8005b40:	2105      	movs	r1, #5
 8005b42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005b46:	4608      	mov	r0, r1
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	f240 123b 	movw	r2, #315	; 0x13b
 8005b4e:	23eb      	movs	r3, #235	; 0xeb
 8005b50:	f000 fcba 	bl	80064c8 <ILI9341_hollow_rect>

	/* Create gray, white square */
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 8005b54:	f647 36ef 	movw	r6, #31727	; 0x7bef
 8005b58:	2106      	movs	r1, #6
 8005b5a:	4608      	mov	r0, r1
 8005b5c:	9600      	str	r6, [sp, #0]
 8005b5e:	2337      	movs	r3, #55	; 0x37
 8005b60:	f44f 729d 	mov.w	r2, #314	; 0x13a
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 8005b64:	f64f 75ff 	movw	r5, #65535	; 0xffff
	ILI9341_fill_rect(6, 6, 314, 55, COLOR_DGRAY);
 8005b68:	f000 fc1a 	bl	80063a0 <ILI9341_fill_rect>
	ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE);
 8005b6c:	2332      	movs	r3, #50	; 0x32
 8005b6e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005b72:	2118      	movs	r1, #24
 8005b74:	200c      	movs	r0, #12
 8005b76:	9500      	str	r5, [sp, #0]
 8005b78:	f000 fc12 	bl	80063a0 <ILI9341_fill_rect>

	/* Set title */
	ILI9341_print_text(title, 12, 12, COLOR_WHITE, COLOR_DGRAY, 1);
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	220c      	movs	r2, #12
 8005b80:	e9cd 6300 	strd	r6, r3, [sp]
 8005b84:	4620      	mov	r0, r4
 8005b86:	462b      	mov	r3, r5
 8005b88:	4611      	mov	r1, r2
 8005b8a:	f000 fd37 	bl	80065fc <ILI9341_print_text>
 8005b8e:	2426      	movs	r4, #38	; 0x26
 8005b90:	2600      	movs	r6, #0
	uint16_t x = 0;
	char number[3];
	for (uint8_t i = 0; i < 5; i++) {
		x += 23;
		/* Upper numbers */
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 8005b92:	f1a4 090f 	sub.w	r9, r4, #15
 8005b96:	f104 0a19 	add.w	sl, r4, #25
 8005b9a:	fa0f f989 	sxth.w	r9, r9
 8005b9e:	fa0f fa8a 	sxth.w	sl, sl
 8005ba2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005ba6:	f1a4 070a 	sub.w	r7, r4, #10
 8005baa:	f104 0814 	add.w	r8, r4, #20
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 8005bae:	f64f 75ff 	movw	r5, #65535	; 0xffff
		ILI9341_fill_rect(x, 70, x + 40, 110, COLOR_DGRAY);
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	236e      	movs	r3, #110	; 0x6e
 8005bb8:	2146      	movs	r1, #70	; 0x46
 8005bba:	4648      	mov	r0, r9
 8005bbc:	b23f      	sxth	r7, r7
 8005bbe:	fa0f f888 	sxth.w	r8, r8
 8005bc2:	f000 fbed 	bl	80063a0 <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 75, x + 35, 105, COLOR_WHITE);
 8005bc6:	2369      	movs	r3, #105	; 0x69
 8005bc8:	4642      	mov	r2, r8
 8005bca:	214b      	movs	r1, #75	; 0x4b
 8005bcc:	4638      	mov	r0, r7
 8005bce:	9500      	str	r5, [sp, #0]
 8005bd0:	f000 fbe6 	bl	80063a0 <ILI9341_fill_rect>
		sprintf(number, "%d", i);
 8005bd4:	f104 0b01 	add.w	fp, r4, #1
 8005bd8:	4954      	ldr	r1, [pc, #336]	; (8005d2c <STM32_PLC_LCD_Show_Numpad_Frame+0x200>)
 8005bda:	4632      	mov	r2, r6
 8005bdc:	a807      	add	r0, sp, #28
 8005bde:	f009 fb07 	bl	800f1f0 <siprintf>
		ILI9341_print_text(number, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8005be2:	fa0f fb8b 	sxth.w	fp, fp
 8005be6:	2302      	movs	r3, #2
 8005be8:	4659      	mov	r1, fp
 8005bea:	e9cd 5300 	strd	r5, r3, [sp]
 8005bee:	2253      	movs	r2, #83	; 0x53
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	a807      	add	r0, sp, #28
 8005bf4:	f000 fd02 	bl	80065fc <ILI9341_print_text>

		/* Lower numbers */
		ILI9341_fill_rect(x, 125, x + 40, 165, COLOR_DGRAY);
 8005bf8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	4652      	mov	r2, sl
 8005c00:	23a5      	movs	r3, #165	; 0xa5
 8005c02:	217d      	movs	r1, #125	; 0x7d
 8005c04:	4648      	mov	r0, r9
 8005c06:	f000 fbcb 	bl	80063a0 <ILI9341_fill_rect>
		ILI9341_fill_rect(x + 5, 130, x + 35, 160, COLOR_WHITE);
 8005c0a:	23a0      	movs	r3, #160	; 0xa0
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	2182      	movs	r1, #130	; 0x82
 8005c10:	4638      	mov	r0, r7
 8005c12:	9500      	str	r5, [sp, #0]
 8005c14:	f000 fbc4 	bl	80063a0 <ILI9341_fill_rect>
		sprintf(number, "%d", i + 5);
 8005c18:	4944      	ldr	r1, [pc, #272]	; (8005d2c <STM32_PLC_LCD_Show_Numpad_Frame+0x200>)
 8005c1a:	1d72      	adds	r2, r6, #5
 8005c1c:	a807      	add	r0, sp, #28
 8005c1e:	f009 fae7 	bl	800f1f0 <siprintf>
		ILI9341_print_text(number, x + 16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 8005c22:	2302      	movs	r3, #2
 8005c24:	e9cd 5300 	strd	r5, r3, [sp]
 8005c28:	4659      	mov	r1, fp
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	228a      	movs	r2, #138	; 0x8a
 8005c2e:	a807      	add	r0, sp, #28
 8005c30:	f000 fce4 	bl	80065fc <ILI9341_print_text>

		/* This hide or show the buttons */
		if (i == 0 && minusbutton_show == true) {
 8005c34:	fa5f fb86 	uxtb.w	fp, r6
 8005c38:	bb4e      	cbnz	r6, 8005c8e <STM32_PLC_LCD_Show_Numpad_Frame+0x162>
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	b1c3      	cbz	r3, 8005c70 <STM32_PLC_LCD_Show_Numpad_Frame+0x144>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005c3e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	4652      	mov	r2, sl
 8005c46:	23dc      	movs	r3, #220	; 0xdc
 8005c48:	21b4      	movs	r1, #180	; 0xb4
 8005c4a:	4648      	mov	r0, r9
 8005c4c:	f000 fba8 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8005c50:	23d7      	movs	r3, #215	; 0xd7
 8005c52:	4642      	mov	r2, r8
 8005c54:	21b9      	movs	r1, #185	; 0xb9
 8005c56:	4638      	mov	r0, r7
 8005c58:	9500      	str	r5, [sp, #0]
 8005c5a:	f000 fba1 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
		}

		/* Give the buttons a text */
		if (i == 0 && minusbutton_show == true) {
			ILI9341_print_text("-", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005c5e:	2302      	movs	r3, #2
 8005c60:	4833      	ldr	r0, [pc, #204]	; (8005d30 <STM32_PLC_LCD_Show_Numpad_Frame+0x204>)
 8005c62:	e9cd 5300 	strd	r5, r3, [sp]
 8005c66:	22c1      	movs	r2, #193	; 0xc1
 8005c68:	4633      	mov	r3, r6
 8005c6a:	b221      	sxth	r1, r4
		} else if (i == 2) {
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 3) {
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
		} else if (i == 4) {
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005c6c:	f000 fcc6 	bl	80065fc <ILI9341_print_text>
	for (uint8_t i = 0; i < 5; i++) {
 8005c70:	3601      	adds	r6, #1
 8005c72:	343a      	adds	r4, #58	; 0x3a
 8005c74:	2e05      	cmp	r6, #5
 8005c76:	b2a4      	uxth	r4, r4
 8005c78:	d18b      	bne.n	8005b92 <STM32_PLC_LCD_Show_Numpad_Frame+0x66>
		}
		x += 35; /* Space between buttons */
	}

	/* Logic */
	*number_value = 0;
 8005c7a:	9a05      	ldr	r2, [sp, #20]
 8005c7c:	2300      	movs	r3, #0
	return STM32_PLC_LCD_Call_Numpad_Logic(decimalbutton_show, minusbutton_show, number_value);
 8005c7e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
	*number_value = 0;
 8005c82:	6013      	str	r3, [r2, #0]
	return STM32_PLC_LCD_Call_Numpad_Logic(decimalbutton_show, minusbutton_show, number_value);
 8005c84:	f001 fa46 	bl	8007114 <STM32_PLC_LCD_Call_Numpad_Logic>
}
 8005c88:	b009      	add	sp, #36	; 0x24
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (i == 1 && decimalbutton_show == true) {
 8005c8e:	f1bb 0f01 	cmp.w	fp, #1
 8005c92:	d11a      	bne.n	8005cca <STM32_PLC_LCD_Show_Numpad_Frame+0x19e>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0ea      	beq.n	8005c70 <STM32_PLC_LCD_Show_Numpad_Frame+0x144>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005c9a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	4652      	mov	r2, sl
 8005ca2:	23dc      	movs	r3, #220	; 0xdc
 8005ca4:	21b4      	movs	r1, #180	; 0xb4
 8005ca6:	4648      	mov	r0, r9
 8005ca8:	f000 fb7a 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8005cac:	23d7      	movs	r3, #215	; 0xd7
 8005cae:	4642      	mov	r2, r8
 8005cb0:	21b9      	movs	r1, #185	; 0xb9
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	9500      	str	r5, [sp, #0]
 8005cb6:	f000 fb73 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_print_text(".", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e9cd 5300 	strd	r5, r3, [sp]
 8005cc0:	481c      	ldr	r0, [pc, #112]	; (8005d34 <STM32_PLC_LCD_Show_Numpad_Frame+0x208>)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	22c1      	movs	r2, #193	; 0xc1
 8005cc6:	b221      	sxth	r1, r4
 8005cc8:	e7d0      	b.n	8005c6c <STM32_PLC_LCD_Show_Numpad_Frame+0x140>
			ILI9341_fill_rect(x, 180, x + 40, 220, COLOR_DGRAY);
 8005cca:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	23dc      	movs	r3, #220	; 0xdc
 8005cd4:	21b4      	movs	r1, #180	; 0xb4
 8005cd6:	4648      	mov	r0, r9
 8005cd8:	f000 fb62 	bl	80063a0 <ILI9341_fill_rect>
			ILI9341_fill_rect(x + 5, 185, x + 35, 215, COLOR_WHITE);
 8005cdc:	9500      	str	r5, [sp, #0]
 8005cde:	23d7      	movs	r3, #215	; 0xd7
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	21b9      	movs	r1, #185	; 0xb9
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f000 fb5b 	bl	80063a0 <ILI9341_fill_rect>
		} else if (i == 2) {
 8005cea:	2e02      	cmp	r6, #2
 8005cec:	d106      	bne.n	8005cfc <STM32_PLC_LCD_Show_Numpad_Frame+0x1d0>
			ILI9341_print_text("C", x + 15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005cee:	e9cd 5600 	strd	r5, r6, [sp]
 8005cf2:	4811      	ldr	r0, [pc, #68]	; (8005d38 <STM32_PLC_LCD_Show_Numpad_Frame+0x20c>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	22c1      	movs	r2, #193	; 0xc1
 8005cf8:	b221      	sxth	r1, r4
 8005cfa:	e7b7      	b.n	8005c6c <STM32_PLC_LCD_Show_Numpad_Frame+0x140>
		} else if (i == 3) {
 8005cfc:	f1bb 0f03 	cmp.w	fp, #3
 8005d00:	d108      	bne.n	8005d14 <STM32_PLC_LCD_Show_Numpad_Frame+0x1e8>
			ILI9341_print_text("<-", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005d02:	2302      	movs	r3, #2
 8005d04:	1fa1      	subs	r1, r4, #6
 8005d06:	e9cd 5300 	strd	r5, r3, [sp]
 8005d0a:	480c      	ldr	r0, [pc, #48]	; (8005d3c <STM32_PLC_LCD_Show_Numpad_Frame+0x210>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	22c1      	movs	r2, #193	; 0xc1
 8005d10:	b209      	sxth	r1, r1
 8005d12:	e7ab      	b.n	8005c6c <STM32_PLC_LCD_Show_Numpad_Frame+0x140>
		} else if (i == 4) {
 8005d14:	f1bb 0f04 	cmp.w	fp, #4
 8005d18:	d1aa      	bne.n	8005c70 <STM32_PLC_LCD_Show_Numpad_Frame+0x144>
			ILI9341_print_text("OK", x + 9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	1fa1      	subs	r1, r4, #6
 8005d1e:	e9cd 5300 	strd	r5, r3, [sp]
 8005d22:	4807      	ldr	r0, [pc, #28]	; (8005d40 <STM32_PLC_LCD_Show_Numpad_Frame+0x214>)
 8005d24:	2300      	movs	r3, #0
 8005d26:	22c1      	movs	r2, #193	; 0xc1
 8005d28:	b209      	sxth	r1, r1
 8005d2a:	e79f      	b.n	8005c6c <STM32_PLC_LCD_Show_Numpad_Frame+0x140>
 8005d2c:	0801495f 	.word	0x0801495f
 8005d30:	08013a1f 	.word	0x08013a1f
 8005d34:	08012f6b 	.word	0x08012f6b
 8005d38:	08012ee3 	.word	0x08012ee3
 8005d3c:	08013a1e 	.word	0x08013a1e
 8005d40:	0801495c 	.word	0x0801495c

08005d44 <add_spaces.constprop.0>:
	sprintf(text, "Date:%i-%i-%i Time:%i:%i:%i", 2000 + year, month, date, hours, minutes, seconds);
	add_spaces(43, text);
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
}

static void add_spaces(uint8_t length, char text[]){
 8005d44:	b510      	push	{r4, lr}
 8005d46:	4604      	mov	r4, r0
	/* This is for removing old values from LCD */
	for(uint8_t i = strlen(text); i < length; i++)
 8005d48:	f7fa fa42 	bl	80001d0 <strlen>
 8005d4c:	b2c0      	uxtb	r0, r0
		text[i] = ' ';
 8005d4e:	282b      	cmp	r0, #43	; 0x2b
 8005d50:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	f04f 0120 	mov.w	r1, #32
 8005d5a:	bf88      	it	hi
 8005d5c:	2200      	movhi	r2, #0
 8005d5e:	4420      	add	r0, r4
 8005d60:	f008 fdd4 	bl	800e90c <memset>
	text[length] = '\0'; /* C-String termination */
 8005d64:	2300      	movs	r3, #0
 8005d66:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 8005d6a:	bd10      	pop	{r4, pc}

08005d6c <STM32_PLC_LCD_Show_Plot_Frame>:
void STM32_PLC_LCD_Show_Plot_Frame() {
 8005d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	sprintf(text, "ADC0:%0.2f ADC1:%0.2f ADC2:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(0), STM32_PLC_Analog_Input_ADC_Get_Calibrated(1), STM32_PLC_Analog_Input_ADC_Get_Calibrated(2));
 8005d70:	2000      	movs	r0, #0
void STM32_PLC_LCD_Show_Plot_Frame() {
 8005d72:	b09a      	sub	sp, #104	; 0x68
	sprintf(text, "ADC0:%0.2f ADC1:%0.2f ADC2:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(0), STM32_PLC_Analog_Input_ADC_Get_Calibrated(1), STM32_PLC_Analog_Input_ADC_Get_Calibrated(2));
 8005d74:	f7fb f926 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005d78:	2001      	movs	r0, #1
 8005d7a:	ee10 6a10 	vmov	r6, s0
 8005d7e:	f7fb f921 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005d82:	2002      	movs	r0, #2
 8005d84:	ee10 4a10 	vmov	r4, s0
 8005d88:	f7fb f91c 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	ee10 5a10 	vmov	r5, s0
 8005d92:	f7fa fbd9 	bl	8000548 <__aeabi_f2d>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005da0:	f7fa fbd2 	bl	8000548 <__aeabi_f2d>
 8005da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7fa fbcd 	bl	8000548 <__aeabi_f2d>
 8005dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005db2:	e9cd 0100 	strd	r0, r1, [sp]
 8005db6:	49d0      	ldr	r1, [pc, #832]	; (80060f8 <STM32_PLC_LCD_Show_Plot_Frame+0x38c>)
 8005db8:	a80b      	add	r0, sp, #44	; 0x2c
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8005dba:	2401      	movs	r4, #1
 8005dbc:	250f      	movs	r5, #15
	sprintf(text, "ADC0:%0.2f ADC1:%0.2f ADC2:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(0), STM32_PLC_Analog_Input_ADC_Get_Calibrated(1), STM32_PLC_Analog_Input_ADC_Get_Calibrated(2));
 8005dbe:	f009 fa17 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 8005dc2:	a80b      	add	r0, sp, #44	; 0x2c
 8005dc4:	f7ff ffbe 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 35, COLOR_YELLOW, COLOR_NAVY, 1);
 8005dc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005dcc:	2223      	movs	r2, #35	; 0x23
 8005dce:	2137      	movs	r1, #55	; 0x37
 8005dd0:	a80b      	add	r0, sp, #44	; 0x2c
 8005dd2:	e9cd 5400 	strd	r5, r4, [sp]
 8005dd6:	f000 fc11 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "ADC3:%0.2f ADC4:%0.2f ADC5:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(3), STM32_PLC_Analog_Input_ADC_Get_Calibrated(4), STM32_PLC_Analog_Input_ADC_Get_Calibrated(5));
 8005dda:	2003      	movs	r0, #3
 8005ddc:	f7fb f8f2 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005de0:	2004      	movs	r0, #4
 8005de2:	ee10 8a10 	vmov	r8, s0
 8005de6:	f7fb f8ed 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005dea:	2005      	movs	r0, #5
 8005dec:	ee10 6a10 	vmov	r6, s0
 8005df0:	f7fb f8e8 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005df4:	4640      	mov	r0, r8
 8005df6:	ee10 7a10 	vmov	r7, s0
 8005dfa:	f7fa fba5 	bl	8000548 <__aeabi_f2d>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4638      	mov	r0, r7
 8005e04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e08:	f7fa fb9e 	bl	8000548 <__aeabi_f2d>
 8005e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e10:	4630      	mov	r0, r6
 8005e12:	f7fa fb99 	bl	8000548 <__aeabi_f2d>
 8005e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1a:	e9cd 0100 	strd	r0, r1, [sp]
 8005e1e:	49b7      	ldr	r1, [pc, #732]	; (80060fc <STM32_PLC_LCD_Show_Plot_Frame+0x390>)
 8005e20:	a80b      	add	r0, sp, #44	; 0x2c
 8005e22:	f009 f9e5 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 8005e26:	a80b      	add	r0, sp, #44	; 0x2c
 8005e28:	f7ff ff8c 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 45, COLOR_YELLOW, COLOR_NAVY, 1);
 8005e2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005e30:	222d      	movs	r2, #45	; 0x2d
 8005e32:	2137      	movs	r1, #55	; 0x37
 8005e34:	a80b      	add	r0, sp, #44	; 0x2c
 8005e36:	e9cd 5400 	strd	r5, r4, [sp]
 8005e3a:	f000 fbdf 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "ADC6:%0.2f ADC7:%0.2f ADC8:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(6), STM32_PLC_Analog_Input_ADC_Get_Calibrated(7), STM32_PLC_Analog_Input_ADC_Get_Calibrated(8));
 8005e3e:	2006      	movs	r0, #6
 8005e40:	f7fb f8c0 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005e44:	2007      	movs	r0, #7
 8005e46:	ee10 8a10 	vmov	r8, s0
 8005e4a:	f7fb f8bb 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005e4e:	2008      	movs	r0, #8
 8005e50:	ee10 6a10 	vmov	r6, s0
 8005e54:	f7fb f8b6 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005e58:	4640      	mov	r0, r8
 8005e5a:	ee10 7a10 	vmov	r7, s0
 8005e5e:	f7fa fb73 	bl	8000548 <__aeabi_f2d>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4638      	mov	r0, r7
 8005e68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e6c:	f7fa fb6c 	bl	8000548 <__aeabi_f2d>
 8005e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e74:	4630      	mov	r0, r6
 8005e76:	f7fa fb67 	bl	8000548 <__aeabi_f2d>
 8005e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e7e:	e9cd 0100 	strd	r0, r1, [sp]
 8005e82:	499f      	ldr	r1, [pc, #636]	; (8006100 <STM32_PLC_LCD_Show_Plot_Frame+0x394>)
 8005e84:	a80b      	add	r0, sp, #44	; 0x2c
 8005e86:	f009 f9b3 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 8005e8a:	a80b      	add	r0, sp, #44	; 0x2c
 8005e8c:	f7ff ff5a 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 55, COLOR_YELLOW, COLOR_NAVY, 1);
 8005e90:	2237      	movs	r2, #55	; 0x37
 8005e92:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005e96:	4611      	mov	r1, r2
 8005e98:	a80b      	add	r0, sp, #44	; 0x2c
 8005e9a:	e9cd 5400 	strd	r5, r4, [sp]
 8005e9e:	f000 fbad 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "ADC9:%0.2f ADC10:%0.2f ADC11:%0.2f", STM32_PLC_Analog_Input_ADC_Get_Calibrated(9), STM32_PLC_Analog_Input_ADC_Get_Calibrated(10), STM32_PLC_Analog_Input_ADC_Get_Calibrated(11));
 8005ea2:	2009      	movs	r0, #9
 8005ea4:	f7fb f88e 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005ea8:	200a      	movs	r0, #10
 8005eaa:	ee10 8a10 	vmov	r8, s0
 8005eae:	f7fb f889 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005eb2:	200b      	movs	r0, #11
 8005eb4:	ee10 6a10 	vmov	r6, s0
 8005eb8:	f7fb f884 	bl	8000fc4 <STM32_PLC_Analog_Input_ADC_Get_Calibrated>
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	ee10 7a10 	vmov	r7, s0
 8005ec2:	f7fa fb41 	bl	8000548 <__aeabi_f2d>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4638      	mov	r0, r7
 8005ecc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ed0:	f7fa fb3a 	bl	8000548 <__aeabi_f2d>
 8005ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f7fa fb35 	bl	8000548 <__aeabi_f2d>
 8005ede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ee6:	4987      	ldr	r1, [pc, #540]	; (8006104 <STM32_PLC_LCD_Show_Plot_Frame+0x398>)
 8005ee8:	a80b      	add	r0, sp, #44	; 0x2c
 8005eea:	f009 f981 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 8005eee:	a80b      	add	r0, sp, #44	; 0x2c
 8005ef0:	f7ff ff28 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 65, COLOR_YELLOW, COLOR_NAVY, 1);
 8005ef4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005ef8:	2241      	movs	r2, #65	; 0x41
 8005efa:	2137      	movs	r1, #55	; 0x37
 8005efc:	a80b      	add	r0, sp, #44	; 0x2c
 8005efe:	e9cd 5400 	strd	r5, r4, [sp]
 8005f02:	f000 fb7b 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "DADC0:%0.2f DADC1:%0.2f DADC2:%0.2f", STM32_PLC_Analog_Input_DADC_Get_Calibrated(0), STM32_PLC_Analog_Input_DADC_Get_Calibrated(1), STM32_PLC_Analog_Input_DADC_Get_Calibrated(2));
 8005f06:	2000      	movs	r0, #0
 8005f08:	f7fb f896 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	ee10 8a10 	vmov	r8, s0
 8005f12:	f7fb f891 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005f16:	2002      	movs	r0, #2
 8005f18:	ee10 6a10 	vmov	r6, s0
 8005f1c:	f7fb f88c 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005f20:	4640      	mov	r0, r8
 8005f22:	ee10 7a10 	vmov	r7, s0
 8005f26:	f7fa fb0f 	bl	8000548 <__aeabi_f2d>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4638      	mov	r0, r7
 8005f30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f34:	f7fa fb08 	bl	8000548 <__aeabi_f2d>
 8005f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7fa fb03 	bl	8000548 <__aeabi_f2d>
 8005f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f46:	e9cd 0100 	strd	r0, r1, [sp]
 8005f4a:	496f      	ldr	r1, [pc, #444]	; (8006108 <STM32_PLC_LCD_Show_Plot_Frame+0x39c>)
 8005f4c:	a80b      	add	r0, sp, #44	; 0x2c
 8005f4e:	f009 f94f 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 8005f52:	a80b      	add	r0, sp, #44	; 0x2c
 8005f54:	f7ff fef6 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 75, COLOR_YELLOW, COLOR_NAVY, 1);
 8005f58:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005f5c:	224b      	movs	r2, #75	; 0x4b
 8005f5e:	2137      	movs	r1, #55	; 0x37
 8005f60:	a80b      	add	r0, sp, #44	; 0x2c
 8005f62:	e9cd 5400 	strd	r5, r4, [sp]
 8005f66:	f000 fb49 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "DADC3:%0.2f DADC4:%0.2f", STM32_PLC_Analog_Input_DADC_Get_Calibrated(3), STM32_PLC_Analog_Input_DADC_Get_Calibrated(4));
 8005f6a:	2003      	movs	r0, #3
 8005f6c:	f7fb f864 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005f70:	2004      	movs	r0, #4
 8005f72:	ee10 7a10 	vmov	r7, s0
 8005f76:	f7fb f85f 	bl	8001038 <STM32_PLC_Analog_Input_DADC_Get_Calibrated>
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	ee10 6a10 	vmov	r6, s0
 8005f80:	f7fa fae2 	bl	8000548 <__aeabi_f2d>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4630      	mov	r0, r6
 8005f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f8e:	f7fa fadb 	bl	8000548 <__aeabi_f2d>
 8005f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f96:	e9cd 0100 	strd	r0, r1, [sp]
 8005f9a:	495c      	ldr	r1, [pc, #368]	; (800610c <STM32_PLC_LCD_Show_Plot_Frame+0x3a0>)
 8005f9c:	a80b      	add	r0, sp, #44	; 0x2c
 8005f9e:	f009 f927 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 8005fa2:	a80b      	add	r0, sp, #44	; 0x2c
 8005fa4:	f7ff fece 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 85, COLOR_YELLOW, COLOR_NAVY, 1);
 8005fa8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005fac:	2255      	movs	r2, #85	; 0x55
 8005fae:	2137      	movs	r1, #55	; 0x37
 8005fb0:	a80b      	add	r0, sp, #44	; 0x2c
 8005fb2:	e9cd 5400 	strd	r5, r4, [sp]
 8005fb6:	f000 fb21 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "DI0:%i DI1:%i DI2:%i DI3:%i DI4:%i", STM32_PLC_Digital_Input_Get(0), STM32_PLC_Digital_Input_Get(1), STM32_PLC_Digital_Input_Get(2), STM32_PLC_Digital_Input_Get(3), STM32_PLC_Digital_Input_Get(4));
 8005fba:	2000      	movs	r0, #0
 8005fbc:	f7fb f942 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005fc0:	9007      	str	r0, [sp, #28]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f7fb f93e 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005fc8:	9004      	str	r0, [sp, #16]
 8005fca:	2002      	movs	r0, #2
 8005fcc:	f7fb f93a 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	2003      	movs	r0, #3
 8005fd4:	f7fb f936 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005fd8:	4607      	mov	r7, r0
 8005fda:	2004      	movs	r0, #4
 8005fdc:	f7fb f932 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8005fe0:	9b04      	ldr	r3, [sp, #16]
 8005fe2:	9a07      	ldr	r2, [sp, #28]
 8005fe4:	494a      	ldr	r1, [pc, #296]	; (8006110 <STM32_PLC_LCD_Show_Plot_Frame+0x3a4>)
 8005fe6:	9600      	str	r6, [sp, #0]
 8005fe8:	e9cd 7001 	strd	r7, r0, [sp, #4]
 8005fec:	a80b      	add	r0, sp, #44	; 0x2c
 8005fee:	f009 f8ff 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 8005ff2:	a80b      	add	r0, sp, #44	; 0x2c
 8005ff4:	f7ff fea6 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 95, COLOR_YELLOW, COLOR_NAVY, 1);
 8005ff8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005ffc:	225f      	movs	r2, #95	; 0x5f
 8005ffe:	2137      	movs	r1, #55	; 0x37
 8006000:	a80b      	add	r0, sp, #44	; 0x2c
 8006002:	e9cd 5400 	strd	r5, r4, [sp]
 8006006:	f000 faf9 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "DI5:%i DI6:%i DI7:%i DI8:%i DI9:%i", STM32_PLC_Digital_Input_Get(5), STM32_PLC_Digital_Input_Get(6), STM32_PLC_Digital_Input_Get(7), STM32_PLC_Digital_Input_Get(8), STM32_PLC_Digital_Input_Get(9));
 800600a:	2005      	movs	r0, #5
 800600c:	f7fb f91a 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8006010:	9007      	str	r0, [sp, #28]
 8006012:	2006      	movs	r0, #6
 8006014:	f7fb f916 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8006018:	9004      	str	r0, [sp, #16]
 800601a:	2007      	movs	r0, #7
 800601c:	f7fb f912 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8006020:	4606      	mov	r6, r0
 8006022:	2008      	movs	r0, #8
 8006024:	f7fb f90e 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8006028:	4607      	mov	r7, r0
 800602a:	2009      	movs	r0, #9
 800602c:	f7fb f90a 	bl	8001244 <STM32_PLC_Digital_Input_Get>
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	9a07      	ldr	r2, [sp, #28]
 8006034:	4937      	ldr	r1, [pc, #220]	; (8006114 <STM32_PLC_LCD_Show_Plot_Frame+0x3a8>)
 8006036:	9600      	str	r6, [sp, #0]
 8006038:	e9cd 7001 	strd	r7, r0, [sp, #4]
 800603c:	a80b      	add	r0, sp, #44	; 0x2c
 800603e:	f009 f8d7 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 8006042:	a80b      	add	r0, sp, #44	; 0x2c
 8006044:	f7ff fe7e 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 105, COLOR_YELLOW, COLOR_NAVY, 1);
 8006048:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800604c:	2269      	movs	r2, #105	; 0x69
 800604e:	2137      	movs	r1, #55	; 0x37
 8006050:	a80b      	add	r0, sp, #44	; 0x2c
 8006052:	e9cd 5400 	strd	r5, r4, [sp]
 8006056:	f000 fad1 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "E0:%0.2f E1:%0.2f E2:%0.2f", STM32_PLC_Encoder_Get_Calibrated(0), STM32_PLC_Encoder_Get_Calibrated(1), STM32_PLC_Encoder_Get_Calibrated(2));
 800605a:	2000      	movs	r0, #0
 800605c:	f7fb f974 	bl	8001348 <STM32_PLC_Encoder_Get_Calibrated>
 8006060:	4620      	mov	r0, r4
 8006062:	ee10 8a10 	vmov	r8, s0
 8006066:	f7fb f96f 	bl	8001348 <STM32_PLC_Encoder_Get_Calibrated>
 800606a:	2002      	movs	r0, #2
 800606c:	ee10 6a10 	vmov	r6, s0
 8006070:	f7fb f96a 	bl	8001348 <STM32_PLC_Encoder_Get_Calibrated>
 8006074:	4640      	mov	r0, r8
 8006076:	ee10 7a10 	vmov	r7, s0
 800607a:	f7fa fa65 	bl	8000548 <__aeabi_f2d>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4638      	mov	r0, r7
 8006084:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006088:	f7fa fa5e 	bl	8000548 <__aeabi_f2d>
 800608c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006090:	4630      	mov	r0, r6
 8006092:	f7fa fa59 	bl	8000548 <__aeabi_f2d>
 8006096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800609a:	e9cd 0100 	strd	r0, r1, [sp]
 800609e:	491e      	ldr	r1, [pc, #120]	; (8006118 <STM32_PLC_LCD_Show_Plot_Frame+0x3ac>)
 80060a0:	a80b      	add	r0, sp, #44	; 0x2c
 80060a2:	f009 f8a5 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 80060a6:	a80b      	add	r0, sp, #44	; 0x2c
 80060a8:	f7ff fe4c 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 115, COLOR_YELLOW, COLOR_NAVY, 1);
 80060ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80060b0:	2273      	movs	r2, #115	; 0x73
 80060b2:	2137      	movs	r1, #55	; 0x37
 80060b4:	a80b      	add	r0, sp, #44	; 0x2c
 80060b6:	e9cd 5400 	strd	r5, r4, [sp]
 80060ba:	f000 fa9f 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "IC0:%0.2f IC1:%0.2f", STM32_PLC_Input_Capture_Get_Calibrated(0), STM32_PLC_Input_Capture_Get_Calibrated(1));
 80060be:	2000      	movs	r0, #0
 80060c0:	f7fb fbfe 	bl	80018c0 <STM32_PLC_Input_Capture_Get_Calibrated>
 80060c4:	4620      	mov	r0, r4
 80060c6:	ee10 7a10 	vmov	r7, s0
 80060ca:	f7fb fbf9 	bl	80018c0 <STM32_PLC_Input_Capture_Get_Calibrated>
 80060ce:	4638      	mov	r0, r7
 80060d0:	ee10 6a10 	vmov	r6, s0
 80060d4:	f7fa fa38 	bl	8000548 <__aeabi_f2d>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4630      	mov	r0, r6
 80060de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060e2:	f7fa fa31 	bl	8000548 <__aeabi_f2d>
 80060e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ea:	e9cd 0100 	strd	r0, r1, [sp]
 80060ee:	490b      	ldr	r1, [pc, #44]	; (800611c <STM32_PLC_LCD_Show_Plot_Frame+0x3b0>)
 80060f0:	a80b      	add	r0, sp, #44	; 0x2c
 80060f2:	f009 f87d 	bl	800f1f0 <siprintf>
 80060f6:	e013      	b.n	8006120 <STM32_PLC_LCD_Show_Plot_Frame+0x3b4>
 80060f8:	08014962 	.word	0x08014962
 80060fc:	08014983 	.word	0x08014983
 8006100:	080149a4 	.word	0x080149a4
 8006104:	080149c5 	.word	0x080149c5
 8006108:	080149e8 	.word	0x080149e8
 800610c:	08014a0c 	.word	0x08014a0c
 8006110:	08014a24 	.word	0x08014a24
 8006114:	08014a47 	.word	0x08014a47
 8006118:	08014a6a 	.word	0x08014a6a
 800611c:	08014a85 	.word	0x08014a85
	add_spaces(43, text);
 8006120:	a80b      	add	r0, sp, #44	; 0x2c
 8006122:	f7ff fe0f 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 125, COLOR_YELLOW, COLOR_NAVY, 1);
 8006126:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800612a:	227d      	movs	r2, #125	; 0x7d
 800612c:	2137      	movs	r1, #55	; 0x37
 800612e:	a80b      	add	r0, sp, #44	; 0x2c
 8006130:	e9cd 5400 	strd	r5, r4, [sp]
 8006134:	f000 fa62 	bl	80065fc <ILI9341_print_text>
	sprintf(text, "IC2:%0.2f IC3:%0.2f", STM32_PLC_Input_Capture_Get_Calibrated(2), STM32_PLC_Input_Capture_Get_Calibrated(3));
 8006138:	2002      	movs	r0, #2
 800613a:	f7fb fbc1 	bl	80018c0 <STM32_PLC_Input_Capture_Get_Calibrated>
 800613e:	2003      	movs	r0, #3
 8006140:	ee10 7a10 	vmov	r7, s0
 8006144:	f7fb fbbc 	bl	80018c0 <STM32_PLC_Input_Capture_Get_Calibrated>
 8006148:	4638      	mov	r0, r7
 800614a:	ee10 6a10 	vmov	r6, s0
 800614e:	f7fa f9fb 	bl	8000548 <__aeabi_f2d>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4630      	mov	r0, r6
 8006158:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800615c:	f7fa f9f4 	bl	8000548 <__aeabi_f2d>
 8006160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006164:	e9cd 0100 	strd	r0, r1, [sp]
 8006168:	4922      	ldr	r1, [pc, #136]	; (80061f4 <STM32_PLC_LCD_Show_Plot_Frame+0x488>)
 800616a:	a80b      	add	r0, sp, #44	; 0x2c
 800616c:	f009 f840 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 8006170:	a80b      	add	r0, sp, #44	; 0x2c
 8006172:	f7ff fde7 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 135, COLOR_YELLOW, COLOR_NAVY, 1);
 8006176:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800617a:	a80b      	add	r0, sp, #44	; 0x2c
 800617c:	e9cd 5400 	strd	r5, r4, [sp]
 8006180:	2287      	movs	r2, #135	; 0x87
 8006182:	2137      	movs	r1, #55	; 0x37
 8006184:	f000 fa3a 	bl	80065fc <ILI9341_print_text>
	STM32_PLC_RTC_Get_Time(&seconds, &minutes, &hours);
 8006188:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800618c:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 8006190:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8006194:	f7fb fdbc 	bl	8001d10 <STM32_PLC_RTC_Get_Time>
	STM32_PLC_RTC_Get_Date(&week_day, &date, &month, &year);
 8006198:	ab0a      	add	r3, sp, #40	; 0x28
 800619a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 800619e:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 80061a2:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 80061a6:	f7fb fd83 	bl	8001cb0 <STM32_PLC_RTC_Get_Date>
	sprintf(text, "Date:%i-%i-%i Time:%i:%i:%i", 2000 + year, month, date, hours, minutes, seconds);
 80061aa:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80061ae:	9303      	str	r3, [sp, #12]
 80061b0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80061b4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80061b8:	9302      	str	r3, [sp, #8]
 80061ba:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80061c4:	490c      	ldr	r1, [pc, #48]	; (80061f8 <STM32_PLC_LCD_Show_Plot_Frame+0x48c>)
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80061cc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80061d0:	a80b      	add	r0, sp, #44	; 0x2c
 80061d2:	f009 f80d 	bl	800f1f0 <siprintf>
	add_spaces(43, text);
 80061d6:	a80b      	add	r0, sp, #44	; 0x2c
 80061d8:	f7ff fdb4 	bl	8005d44 <add_spaces.constprop.0>
	ILI9341_print_text(text, 55, 145, COLOR_YELLOW, COLOR_NAVY, 1);
 80061dc:	e9cd 5400 	strd	r5, r4, [sp]
 80061e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80061e4:	2291      	movs	r2, #145	; 0x91
 80061e6:	2137      	movs	r1, #55	; 0x37
 80061e8:	a80b      	add	r0, sp, #44	; 0x2c
 80061ea:	f000 fa07 	bl	80065fc <ILI9341_print_text>
}
 80061ee:	b01a      	add	sp, #104	; 0x68
 80061f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f4:	08014a99 	.word	0x08014a99
 80061f8:	0801361f 	.word	0x0801361f

080061fc <STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame>:
 */

#include "../../Touch_screen.h"
#include "../../Hardware/ILI9341.h"

void STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame() {
 80061fc:	b507      	push	{r0, r1, r2, lr}
	ILI9341_set_rotation(2);
 80061fe:	2002      	movs	r0, #2
 8006200:	f000 facc 	bl	800679c <ILI9341_set_rotation>
	ILI9341_fill_screen(COLOR_WHITE);
 8006204:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006208:	f000 f894 	bl	8006334 <ILI9341_fill_screen>
	ILI9341_print_text("Hold screen for calibration", 80, 120, COLOR_BLACK, COLOR_WHITE, 1);
 800620c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006210:	2201      	movs	r2, #1
 8006212:	e9cd 3200 	strd	r3, r2, [sp]
 8006216:	4804      	ldr	r0, [pc, #16]	; (8006228 <STM32_PLC_LCD_Show_Touch_Screen_Calibration_Message_Frame+0x2c>)
 8006218:	2300      	movs	r3, #0
 800621a:	2278      	movs	r2, #120	; 0x78
 800621c:	2150      	movs	r1, #80	; 0x50
 800621e:	f000 f9ed 	bl	80065fc <ILI9341_print_text>
}
 8006222:	b003      	add	sp, #12
 8006224:	f85d fb04 	ldr.w	pc, [sp], #4
 8006228:	08014aad 	.word	0x08014aad

0800622c <ILI9341_send_data>:

/* This is 240*320 divided by 12 and it's used for transferring data */
static uint8_t SPI_DATA[6400];

/* Write data to LCD with one byte */
void ILI9341_send_data(uint8_t data) {
 800622c:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 800622e:	4c0b      	ldr	r4, [pc, #44]	; (800625c <ILI9341_send_data+0x30>)
void ILI9341_send_data(uint8_t data) {
 8006230:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8006234:	89a1      	ldrh	r1, [r4, #12]
 8006236:	68a0      	ldr	r0, [r4, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	f003 fb41 	bl	80098c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd.lcdSpi, &data, 1, 5);
 800623e:	2305      	movs	r3, #5
 8006240:	f10d 0107 	add.w	r1, sp, #7
 8006244:	6860      	ldr	r0, [r4, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f005 fc4c 	bl	800bae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 800624c:	89a1      	ldrh	r1, [r4, #12]
 800624e:	68a0      	ldr	r0, [r4, #8]
 8006250:	2201      	movs	r2, #1
 8006252:	f003 fb35 	bl	80098c0 <HAL_GPIO_WritePin>
}
 8006256:	b002      	add	sp, #8
 8006258:	bd10      	pop	{r4, pc}
 800625a:	bf00      	nop
 800625c:	20002728 	.word	0x20002728

08006260 <ILI9341_send_data_array>:

/* Write data to LCD with array of bytes */
void ILI9341_send_data_array(uint8_t data[], uint16_t size) {
 8006260:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8006262:	4c0a      	ldr	r4, [pc, #40]	; (800628c <ILI9341_send_data_array+0x2c>)
void ILI9341_send_data_array(uint8_t data[], uint16_t size) {
 8006264:	4605      	mov	r5, r0
 8006266:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 8006268:	68a0      	ldr	r0, [r4, #8]
 800626a:	89a1      	ldrh	r1, [r4, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f003 fb27 	bl	80098c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd.lcdSpi, data, size, 100);
 8006272:	4632      	mov	r2, r6
 8006274:	4629      	mov	r1, r5
 8006276:	6860      	ldr	r0, [r4, #4]
 8006278:	2364      	movs	r3, #100	; 0x64
 800627a:	f005 fc33 	bl	800bae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 800627e:	89a1      	ldrh	r1, [r4, #12]
 8006280:	68a0      	ldr	r0, [r4, #8]
 8006282:	2201      	movs	r2, #1
}
 8006284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 8006288:	f003 bb1a 	b.w	80098c0 <HAL_GPIO_WritePin>
 800628c:	20002728 	.word	0x20002728

08006290 <ILI9341_send_command>:

/* Write Command to LCD */
void ILI9341_send_command(uint8_t com) {
 8006290:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_RESET);
 8006292:	4c10      	ldr	r4, [pc, #64]	; (80062d4 <ILI9341_send_command+0x44>)
void ILI9341_send_command(uint8_t com) {
 8006294:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_RESET);
 8006298:	8aa1      	ldrh	r1, [r4, #20]
 800629a:	6920      	ldr	r0, [r4, #16]
 800629c:	2200      	movs	r2, #0
 800629e:	f003 fb0f 	bl	80098c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_RESET);
 80062a2:	89a1      	ldrh	r1, [r4, #12]
 80062a4:	68a0      	ldr	r0, [r4, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f003 fb0a 	bl	80098c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd.lcdSpi, &com, 1, 5);
 80062ac:	2305      	movs	r3, #5
 80062ae:	f10d 0107 	add.w	r1, sp, #7
 80062b2:	6860      	ldr	r0, [r4, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f005 fc15 	bl	800bae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd.LCD_CS_PORT, lcd.LCD_CS_PIN, GPIO_PIN_SET);
 80062ba:	89a1      	ldrh	r1, [r4, #12]
 80062bc:	68a0      	ldr	r0, [r4, #8]
 80062be:	2201      	movs	r2, #1
 80062c0:	f003 fafe 	bl	80098c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd.LCD_DC_PORT, lcd.LCD_DC_PIN, GPIO_PIN_SET);
 80062c4:	8aa1      	ldrh	r1, [r4, #20]
 80062c6:	6920      	ldr	r0, [r4, #16]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f003 faf9 	bl	80098c0 <HAL_GPIO_WritePin>
}
 80062ce:	b002      	add	sp, #8
 80062d0:	bd10      	pop	{r4, pc}
 80062d2:	bf00      	nop
 80062d4:	20002728 	.word	0x20002728

080062d8 <ILI9341_set_cursor_position>:

/* Set cursor position */
static void ILI9341_set_cursor_position(int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 80062d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062da:	4607      	mov	r7, r0
	ILI9341_send_command(ILI9341_COLUMN_ADDR);
 80062dc:	202a      	movs	r0, #42	; 0x2a
static void ILI9341_set_cursor_position(int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 80062de:	4616      	mov	r6, r2
 80062e0:	460d      	mov	r5, r1
 80062e2:	461c      	mov	r4, r3
	ILI9341_send_command(ILI9341_COLUMN_ADDR);
 80062e4:	f7ff ffd4 	bl	8006290 <ILI9341_send_command>
	uint8_t data[4] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
	ILI9341_send_data_array(data, 4);
 80062e8:	2104      	movs	r1, #4
	uint8_t data[4] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 80062ea:	123b      	asrs	r3, r7, #8
	ILI9341_send_data_array(data, 4);
 80062ec:	eb0d 0001 	add.w	r0, sp, r1
	uint8_t data[4] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 & 0xFF};
 80062f0:	f88d 3004 	strb.w	r3, [sp, #4]
 80062f4:	1233      	asrs	r3, r6, #8
 80062f6:	f88d 3006 	strb.w	r3, [sp, #6]
 80062fa:	f88d 7005 	strb.w	r7, [sp, #5]
 80062fe:	f88d 6007 	strb.w	r6, [sp, #7]
	ILI9341_send_data_array(data, 4);
 8006302:	f7ff ffad 	bl	8006260 <ILI9341_send_data_array>

	ILI9341_send_command(ILI9341_PAGE_ADDR);
 8006306:	202b      	movs	r0, #43	; 0x2b
 8006308:	f7ff ffc2 	bl	8006290 <ILI9341_send_command>
	data[0] = y1 >> 8;
	data[1] = y1 & 0xFF;
	data[2] = y2 >> 8;
	data[3] = y2 & 0xFF;
	ILI9341_send_data_array(data, 4);
 800630c:	2104      	movs	r1, #4
	data[0] = y1 >> 8;
 800630e:	122b      	asrs	r3, r5, #8
	ILI9341_send_data_array(data, 4);
 8006310:	eb0d 0001 	add.w	r0, sp, r1
	data[0] = y1 >> 8;
 8006314:	f88d 3004 	strb.w	r3, [sp, #4]
	data[2] = y2 >> 8;
 8006318:	1223      	asrs	r3, r4, #8
 800631a:	f88d 3006 	strb.w	r3, [sp, #6]
	data[1] = y1 & 0xFF;
 800631e:	f88d 5005 	strb.w	r5, [sp, #5]
	data[3] = y2 & 0xFF;
 8006322:	f88d 4007 	strb.w	r4, [sp, #7]
	ILI9341_send_data_array(data, 4);
 8006326:	f7ff ff9b 	bl	8006260 <ILI9341_send_data_array>
	ILI9341_send_command(ILI9341_GRAM);
 800632a:	202c      	movs	r0, #44	; 0x2c
 800632c:	f7ff ffb0 	bl	8006290 <ILI9341_send_command>
}
 8006330:	b003      	add	sp, #12
 8006332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006334 <ILI9341_fill_screen>:

	return pixels_added_into_data;
}

/* Fill the entire screen with a background color */
void ILI9341_fill_screen(uint16_t color) {
 8006334:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t n = ILI9341_PIXEL_COUNT;
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 8006336:	4b18      	ldr	r3, [pc, #96]	; (8006398 <ILI9341_fill_screen+0x64>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800633e:	2a01      	cmp	r2, #1
void ILI9341_fill_screen(uint16_t color) {
 8006340:	4604      	mov	r4, r0
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 8006342:	d121      	bne.n	8006388 <ILI9341_fill_screen+0x54>
		ILI9341_set_cursor_position(0, 0, ILI9341_WIDTH - 1, ILI9341_HEIGHT - 1);
 8006344:	f240 133f 	movw	r3, #319	; 0x13f
 8006348:	22ef      	movs	r2, #239	; 0xef
	} else if (lcd.rotationNum == 2 || lcd.rotationNum == 4) {
		ILI9341_set_cursor_position(0, 0, ILI9341_HEIGHT - 1, ILI9341_WIDTH - 1);
 800634a:	2100      	movs	r1, #0
 800634c:	4608      	mov	r0, r1
 800634e:	f7ff ffc3 	bl	80062d8 <ILI9341_set_cursor_position>
	}
	uint8_t color_16_bit[2] = {color >> 8, color};
 8006352:	0a23      	lsrs	r3, r4, #8
 8006354:	f88d 3004 	strb.w	r3, [sp, #4]
 8006358:	f88d 4005 	strb.w	r4, [sp, #5]
	for(uint16_t i = 0; i < iterations; i++){
 800635c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
		memcpy(data, pixel_data, 2);
 8006360:	4a0e      	ldr	r2, [pc, #56]	; (800639c <ILI9341_fill_screen+0x68>)
	uint8_t color_16_bit[2] = {color >> 8, color};
 8006362:	2300      	movs	r3, #0
		memcpy(data, pixel_data, 2);
 8006364:	5299      	strh	r1, [r3, r2]
	for(uint16_t i = 0; i < iterations; i++){
 8006366:	3302      	adds	r3, #2
 8006368:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800636c:	d1fa      	bne.n	8006364 <ILI9341_fill_screen+0x30>
	uint16_t size_of_SPI_DATA = sizeof(SPI_DATA);
	ILI9341_insert_color_data(SPI_DATA, size_of_SPI_DATA/2, color_16_bit);
	/* Begin with the first iterations. 2 times N pixels because it's 16-bit pixels, not 8-bit pixels */
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
	for(uint8_t i = 0; i < iterations; i++)
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 800636e:	4d0b      	ldr	r5, [pc, #44]	; (800639c <ILI9341_fill_screen+0x68>)
 8006370:	2430      	movs	r4, #48	; 0x30
 8006372:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006376:	4628      	mov	r0, r5
	for(uint8_t i = 0; i < iterations; i++)
 8006378:	3c01      	subs	r4, #1
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 800637a:	f7ff ff71 	bl	8006260 <ILI9341_send_data_array>
	for(uint8_t i = 0; i < iterations; i++)
 800637e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8006382:	d1f6      	bne.n	8006372 <ILI9341_fill_screen+0x3e>

	/* Send the remaining */
	uint16_t remaning_bytes = (2*n) % (size_of_SPI_DATA/2);
	if(remaning_bytes > 0)
		ILI9341_send_data_array(SPI_DATA, remaning_bytes);
}
 8006384:	b003      	add	sp, #12
 8006386:	bd30      	pop	{r4, r5, pc}
	} else if (lcd.rotationNum == 2 || lcd.rotationNum == 4) {
 8006388:	2b02      	cmp	r3, #2
 800638a:	d001      	beq.n	8006390 <ILI9341_fill_screen+0x5c>
 800638c:	2b04      	cmp	r3, #4
 800638e:	d1e0      	bne.n	8006352 <ILI9341_fill_screen+0x1e>
		ILI9341_set_cursor_position(0, 0, ILI9341_HEIGHT - 1, ILI9341_WIDTH - 1);
 8006390:	23ef      	movs	r3, #239	; 0xef
 8006392:	f240 123f 	movw	r2, #319	; 0x13f
 8006396:	e7d8      	b.n	800634a <ILI9341_fill_screen+0x16>
 8006398:	20002728 	.word	0x20002728
 800639c:	200007a8 	.word	0x200007a8

080063a0 <ILI9341_fill_rect>:

/* Create filled rectangle */
void ILI9341_fill_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80063a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 80063a2:	1c5d      	adds	r5, r3, #1
 80063a4:	1a16      	subs	r6, r2, r0
 80063a6:	1a6c      	subs	r4, r5, r1
void ILI9341_fill_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80063a8:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 80063ac:	fb06 4404 	mla	r4, r6, r4, r4
	if (n > ILI9341_PIXEL_COUNT)
 80063b0:	f5b4 3f96 	cmp.w	r4, #76800	; 0x12c00
 80063b4:	bf28      	it	cs
 80063b6:	f44f 3496 	movcs.w	r4, #76800	; 0x12c00
		n = ILI9341_PIXEL_COUNT;
	ILI9341_set_cursor_position(x0, y0, x1, y1);
 80063ba:	f7ff ff8d 	bl	80062d8 <ILI9341_set_cursor_position>
	uint8_t color_16_bit[2] = {color >> 8, color};
 80063be:	0a3b      	lsrs	r3, r7, #8
 80063c0:	f88d 3004 	strb.w	r3, [sp, #4]
 80063c4:	f88d 7005 	strb.w	r7, [sp, #5]
	for(uint16_t i = 0; i < iterations; i++){
 80063c8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
		memcpy(data, pixel_data, 2);
 80063cc:	4a14      	ldr	r2, [pc, #80]	; (8006420 <ILI9341_fill_rect+0x80>)
	uint8_t color_16_bit[2] = {color >> 8, color};
 80063ce:	2300      	movs	r3, #0
		memcpy(data, pixel_data, 2);
 80063d0:	5299      	strh	r1, [r3, r2]
	for(uint16_t i = 0; i < iterations; i++){
 80063d2:	3302      	adds	r3, #2
 80063d4:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80063d8:	d1fa      	bne.n	80063d0 <ILI9341_fill_rect+0x30>
	uint16_t size_of_SPI_DATA = sizeof(SPI_DATA);
	ILI9341_insert_color_data(SPI_DATA, size_of_SPI_DATA/2, color_16_bit);
	/* Begin with the first iterations. 2 times N pixels because it's 16-bit pixels, not 8-bit pixels */
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
	for(uint8_t i = 0; i < iterations; i++)
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 80063da:	4f11      	ldr	r7, [pc, #68]	; (8006420 <ILI9341_fill_rect+0x80>)
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
 80063dc:	0064      	lsls	r4, r4, #1
 80063de:	f44f 6548 	mov.w	r5, #3200	; 0xc80
	for(uint8_t i = 0; i < iterations; i++)
 80063e2:	2600      	movs	r6, #0
	uint8_t iterations = (2*n)/(size_of_SPI_DATA/2);
 80063e4:	fbb4 f5f5 	udiv	r5, r4, r5
 80063e8:	b2ed      	uxtb	r5, r5
	for(uint8_t i = 0; i < iterations; i++)
 80063ea:	b2f3      	uxtb	r3, r6
 80063ec:	429d      	cmp	r5, r3
 80063ee:	d80d      	bhi.n	800640c <ILI9341_fill_rect+0x6c>

	/* Send the remaining */
	uint16_t remaning_bytes = (2*n) % (size_of_SPI_DATA/2);
 80063f0:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80063f4:	fbb4 f3f1 	udiv	r3, r4, r1
 80063f8:	fb01 4113 	mls	r1, r1, r3, r4
	if(remaning_bytes > 0)
 80063fc:	b169      	cbz	r1, 800641a <ILI9341_fill_rect+0x7a>
		ILI9341_send_data_array(SPI_DATA, remaning_bytes);
 80063fe:	4808      	ldr	r0, [pc, #32]	; (8006420 <ILI9341_fill_rect+0x80>)
 8006400:	b289      	uxth	r1, r1
}
 8006402:	b003      	add	sp, #12
 8006404:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		ILI9341_send_data_array(SPI_DATA, remaning_bytes);
 8006408:	f7ff bf2a 	b.w	8006260 <ILI9341_send_data_array>
		ILI9341_send_data_array(SPI_DATA, size_of_SPI_DATA);
 800640c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006410:	4638      	mov	r0, r7
 8006412:	f7ff ff25 	bl	8006260 <ILI9341_send_data_array>
	for(uint8_t i = 0; i < iterations; i++)
 8006416:	3601      	adds	r6, #1
 8006418:	e7e7      	b.n	80063ea <ILI9341_fill_rect+0x4a>
}
 800641a:	b003      	add	sp, #12
 800641c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800641e:	bf00      	nop
 8006420:	200007a8 	.word	0x200007a8

08006424 <ILI9341_draw_horizontal_line>:
		}
	}
}

/* Draw a fast horizontal line */
void ILI9341_draw_horizontal_line(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8006424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006426:	4615      	mov	r5, r2
	uint8_t color_16_bit[2] = {color >> 8, color};
 8006428:	0a1a      	lsrs	r2, r3, #8
void ILI9341_draw_horizontal_line(int16_t x, int16_t y, int16_t w, uint16_t color) {
 800642a:	4604      	mov	r4, r0
	uint8_t color_16_bit[2] = {color >> 8, color};
 800642c:	f88d 2004 	strb.w	r2, [sp, #4]
 8006430:	f88d 3005 	strb.w	r3, [sp, #5]
	ILI9341_insert_color_data(SPI_DATA, x + w - 1, color_16_bit);
 8006434:	1e68      	subs	r0, r5, #1
 8006436:	4420      	add	r0, r4
 8006438:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 800643c:	4a0d      	ldr	r2, [pc, #52]	; (8006474 <ILI9341_draw_horizontal_line+0x50>)
void ILI9341_draw_horizontal_line(int16_t x, int16_t y, int16_t w, uint16_t color) {
 800643e:	460e      	mov	r6, r1
	ILI9341_insert_color_data(SPI_DATA, x + w - 1, color_16_bit);
 8006440:	b280      	uxth	r0, r0
 8006442:	2300      	movs	r3, #0
	for(uint16_t i = 0; i < iterations; i++){
 8006444:	b299      	uxth	r1, r3
 8006446:	4288      	cmp	r0, r1
 8006448:	d80f      	bhi.n	800646a <ILI9341_draw_horizontal_line+0x46>
	ILI9341_set_cursor_position(x, y, x + w - 1, y);
 800644a:	b202      	sxth	r2, r0
 800644c:	4631      	mov	r1, r6
 800644e:	4620      	mov	r0, r4
 8006450:	4633      	mov	r3, r6
 8006452:	f7ff ff41 	bl	80062d8 <ILI9341_set_cursor_position>
	ILI9341_send_data_array(SPI_DATA, 2*(x + w - 1));
 8006456:	1961      	adds	r1, r4, r5
 8006458:	3901      	subs	r1, #1
 800645a:	4806      	ldr	r0, [pc, #24]	; (8006474 <ILI9341_draw_horizontal_line+0x50>)
 800645c:	0049      	lsls	r1, r1, #1
 800645e:	b289      	uxth	r1, r1
}
 8006460:	b003      	add	sp, #12
 8006462:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ILI9341_send_data_array(SPI_DATA, 2*(x + w - 1));
 8006466:	f7ff befb 	b.w	8006260 <ILI9341_send_data_array>
		memcpy(data, pixel_data, 2);
 800646a:	f822 7b02 	strh.w	r7, [r2], #2
	for(uint16_t i = 0; i < iterations; i++){
 800646e:	3301      	adds	r3, #1
 8006470:	e7e8      	b.n	8006444 <ILI9341_draw_horizontal_line+0x20>
 8006472:	bf00      	nop
 8006474:	200007a8 	.word	0x200007a8

08006478 <ILI9341_draw_vertical_line>:

/* Draw vertical line */
void ILI9341_draw_vertical_line(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8006478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800647a:	4615      	mov	r5, r2
	uint8_t color_16_bit[2] = {color >> 8, color};
 800647c:	0a1a      	lsrs	r2, r3, #8
 800647e:	f88d 2004 	strb.w	r2, [sp, #4]
 8006482:	f88d 3005 	strb.w	r3, [sp, #5]
	ILI9341_insert_color_data(SPI_DATA, y + h - 1, color_16_bit);
 8006486:	1e6b      	subs	r3, r5, #1
 8006488:	440b      	add	r3, r1
void ILI9341_draw_vertical_line(int16_t x, int16_t y, int16_t h, uint16_t color) {
 800648a:	460c      	mov	r4, r1
 800648c:	f8bd 7004 	ldrh.w	r7, [sp, #4]
	ILI9341_insert_color_data(SPI_DATA, y + h - 1, color_16_bit);
 8006490:	490c      	ldr	r1, [pc, #48]	; (80064c4 <ILI9341_draw_vertical_line+0x4c>)
 8006492:	b29b      	uxth	r3, r3
 8006494:	2200      	movs	r2, #0
	for(uint16_t i = 0; i < iterations; i++){
 8006496:	b296      	uxth	r6, r2
 8006498:	42b3      	cmp	r3, r6
 800649a:	d80e      	bhi.n	80064ba <ILI9341_draw_vertical_line+0x42>
	ILI9341_set_cursor_position(x, y, x, y + h - 1);
 800649c:	4602      	mov	r2, r0
 800649e:	4621      	mov	r1, r4
 80064a0:	b21b      	sxth	r3, r3
 80064a2:	f7ff ff19 	bl	80062d8 <ILI9341_set_cursor_position>
	ILI9341_send_data_array(SPI_DATA, 2*(y + h - 1));
 80064a6:	1961      	adds	r1, r4, r5
 80064a8:	3901      	subs	r1, #1
 80064aa:	4806      	ldr	r0, [pc, #24]	; (80064c4 <ILI9341_draw_vertical_line+0x4c>)
 80064ac:	0049      	lsls	r1, r1, #1
 80064ae:	b289      	uxth	r1, r1
}
 80064b0:	b003      	add	sp, #12
 80064b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ILI9341_send_data_array(SPI_DATA, 2*(y + h - 1));
 80064b6:	f7ff bed3 	b.w	8006260 <ILI9341_send_data_array>
		memcpy(data, pixel_data, 2);
 80064ba:	f821 7b02 	strh.w	r7, [r1], #2
	for(uint16_t i = 0; i < iterations; i++){
 80064be:	3201      	adds	r2, #1
 80064c0:	e7e9      	b.n	8006496 <ILI9341_draw_vertical_line+0x1e>
 80064c2:	bf00      	nop
 80064c4:	200007a8 	.word	0x200007a8

080064c8 <ILI9341_hollow_rect>:
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80064c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80064cc:	4698      	mov	r8, r3
	int16_t v = y1 - y0 + 1;
 80064ce:	eba8 0401 	sub.w	r4, r8, r1
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80064d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80064d6:	4617      	mov	r7, r2
	int16_t h = x1 - x0;
 80064d8:	1a12      	subs	r2, r2, r0
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80064da:	4606      	mov	r6, r0
	int16_t h = x1 - x0;
 80064dc:	b212      	sxth	r2, r2
	int16_t v = y1 - y0 + 1;
 80064de:	3401      	adds	r4, #1
void ILI9341_hollow_rect(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80064e0:	460d      	mov	r5, r1
	ILI9341_draw_horizontal_line(x0, y0, h, color);
 80064e2:	e9cd 3200 	strd	r3, r2, [sp]
	int16_t v = y1 - y0 + 1;
 80064e6:	b224      	sxth	r4, r4
	ILI9341_draw_horizontal_line(x0, y0, h, color);
 80064e8:	f7ff ff9c 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_draw_horizontal_line(x0, y1, h, color);
 80064ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 80064f0:	4641      	mov	r1, r8
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ff96 	bl	8006424 <ILI9341_draw_horizontal_line>
	ILI9341_draw_vertical_line(x0, y0, v, color);
 80064f8:	9b00      	ldr	r3, [sp, #0]
 80064fa:	4622      	mov	r2, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	4630      	mov	r0, r6
 8006500:	f7ff ffba 	bl	8006478 <ILI9341_draw_vertical_line>
	ILI9341_draw_vertical_line(x1, y0, v, color);
 8006504:	9b00      	ldr	r3, [sp, #0]
 8006506:	4622      	mov	r2, r4
 8006508:	4629      	mov	r1, r5
 800650a:	4638      	mov	r0, r7
}
 800650c:	b002      	add	sp, #8
 800650e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ILI9341_draw_vertical_line(x1, y0, v, color);
 8006512:	f7ff bfb1 	b.w	8006478 <ILI9341_draw_vertical_line>

08006516 <ILI9341_fill_circle>:
void ILI9341_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8006516:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	b087      	sub	sp, #28
 800651c:	4614      	mov	r4, r2
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 800651e:	b28a      	uxth	r2, r1
 8006520:	9203      	str	r2, [sp, #12]
 8006522:	b2a7      	uxth	r7, r4
 8006524:	9903      	ldr	r1, [sp, #12]
 8006526:	007a      	lsls	r2, r7, #1
 8006528:	1bc9      	subs	r1, r1, r7
	int16_t f = 1 - r;
 800652a:	f1c7 0501 	rsb	r5, r7, #1
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 800652e:	3201      	adds	r2, #1
	int16_t ddF_y = -2 * r;
 8006530:	ebc7 37c7 	rsb	r7, r7, r7, lsl #15
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 8006534:	b212      	sxth	r2, r2
 8006536:	b209      	sxth	r1, r1
	int16_t ddF_y = -2 * r;
 8006538:	007f      	lsls	r7, r7, #1
void ILI9341_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800653a:	4680      	mov	r8, r0
 800653c:	461e      	mov	r6, r3
	ILI9341_draw_vertical_line(x0, y0 - r, 2 * r + 1, color);
 800653e:	f7ff ff9b 	bl	8006478 <ILI9341_draw_vertical_line>
	int16_t ddF_y = -2 * r;
 8006542:	b23b      	sxth	r3, r7
 8006544:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	9304      	str	r3, [sp, #16]
			ILI9341_draw_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 800654a:	fa1f f388 	uxth.w	r3, r8
	int16_t f = 1 - r;
 800654e:	b22d      	sxth	r5, r5
			ILI9341_draw_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 8006550:	9302      	str	r3, [sp, #8]
	while (x < y) {
 8006552:	9b04      	ldr	r3, [sp, #16]
 8006554:	429c      	cmp	r4, r3
 8006556:	dc02      	bgt.n	800655e <ILI9341_fill_circle+0x48>
}
 8006558:	b007      	add	sp, #28
 800655a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (f >= 0) {
 800655e:	2d00      	cmp	r5, #0
 8006560:	db08      	blt.n	8006574 <ILI9341_fill_circle+0x5e>
			ddF_y += 2;
 8006562:	9b05      	ldr	r3, [sp, #20]
 8006564:	3302      	adds	r3, #2
			y--;
 8006566:	3c01      	subs	r4, #1
			ddF_y += 2;
 8006568:	b21a      	sxth	r2, r3
			f += ddF_y;
 800656a:	fa15 f583 	uxtah	r5, r5, r3
			y--;
 800656e:	b224      	sxth	r4, r4
			ddF_y += 2;
 8006570:	9205      	str	r2, [sp, #20]
			f += ddF_y;
 8006572:	b22d      	sxth	r5, r5
		x++;
 8006574:	9b04      	ldr	r3, [sp, #16]
 8006576:	3301      	adds	r3, #1
 8006578:	b29f      	uxth	r7, r3
 800657a:	b21b      	sxth	r3, r3
 800657c:	9304      	str	r3, [sp, #16]
		ddF_x += 2;
 800657e:	007b      	lsls	r3, r7, #1
 8006580:	3301      	adds	r3, #1
 8006582:	fa1f fa83 	uxth.w	sl, r3
		f += ddF_x;
 8006586:	fa15 f583 	uxtah	r5, r5, r3
			ILI9341_draw_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 800658a:	b2a3      	uxth	r3, r4
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	9a01      	ldr	r2, [sp, #4]
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8006596:	eba3 0b02 	sub.w	fp, r3, r2
 800659a:	9b02      	ldr	r3, [sp, #8]
 800659c:	f108 0801 	add.w	r8, r8, #1
 80065a0:	fa0f fb8b 	sxth.w	fp, fp
 80065a4:	fa0f f888 	sxth.w	r8, r8
 80065a8:	19d8      	adds	r0, r3, r7
 80065aa:	4642      	mov	r2, r8
 80065ac:	4633      	mov	r3, r6
 80065ae:	4659      	mov	r1, fp
 80065b0:	b200      	sxth	r0, r0
 80065b2:	f7ff ff61 	bl	8006478 <ILI9341_draw_vertical_line>
 80065b6:	9b03      	ldr	r3, [sp, #12]
 80065b8:	eba3 0907 	sub.w	r9, r3, r7
			ILI9341_draw_vertical_line(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 80065bc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80065c0:	fa0f f989 	sxth.w	r9, r9
 80065c4:	fa0f fa8a 	sxth.w	sl, sl
 80065c8:	1898      	adds	r0, r3, r2
 80065ca:	4649      	mov	r1, r9
 80065cc:	4633      	mov	r3, r6
 80065ce:	4652      	mov	r2, sl
 80065d0:	b200      	sxth	r0, r0
 80065d2:	f7ff ff51 	bl	8006478 <ILI9341_draw_vertical_line>
			ILI9341_draw_vertical_line(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	1bd8      	subs	r0, r3, r7
 80065da:	4642      	mov	r2, r8
 80065dc:	4633      	mov	r3, r6
 80065de:	4659      	mov	r1, fp
 80065e0:	b200      	sxth	r0, r0
 80065e2:	f7ff ff49 	bl	8006478 <ILI9341_draw_vertical_line>
			ILI9341_draw_vertical_line(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 80065e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80065ea:	1a98      	subs	r0, r3, r2
 80065ec:	4649      	mov	r1, r9
 80065ee:	4633      	mov	r3, r6
 80065f0:	4652      	mov	r2, sl
 80065f2:	b200      	sxth	r0, r0
		f += ddF_x;
 80065f4:	b22d      	sxth	r5, r5
			ILI9341_draw_vertical_line(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 80065f6:	f7ff ff3f 	bl	8006478 <ILI9341_draw_vertical_line>
 80065fa:	e7aa      	b.n	8006552 <ILI9341_fill_circle+0x3c>

080065fc <ILI9341_print_text>:
		ILI9341_draw_horizontal_line(a, y, b - a + 1, color);
	}
}

/* Print a string */
void ILI9341_print_text(char text[], int16_t x0, int16_t y0, uint16_t font_color, uint16_t background_color, uint8_t font_size) {
 80065fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	4617      	mov	r7, r2
	/* Quick check */
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 8006602:	4a63      	ldr	r2, [pc, #396]	; (8006790 <ILI9341_print_text+0x194>)
 8006604:	7812      	ldrb	r2, [r2, #0]
void ILI9341_print_text(char text[], int16_t x0, int16_t y0, uint16_t font_color, uint16_t background_color, uint8_t font_size) {
 8006606:	b087      	sub	sp, #28
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 8006608:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800660c:	2a01      	cmp	r2, #1
void ILI9341_print_text(char text[], int16_t x0, int16_t y0, uint16_t font_color, uint16_t background_color, uint8_t font_size) {
 800660e:	460e      	mov	r6, r1
 8006610:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 8006614:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	if (lcd.rotationNum == 1 || lcd.rotationNum == 3) {
 8006618:	d146      	bne.n	80066a8 <ILI9341_print_text+0xac>
		if ((x0 >= ILI9341_WIDTH) || // Clip right
 800661a:	2eef      	cmp	r6, #239	; 0xef
 800661c:	f300 80b5 	bgt.w	800678a <ILI9341_print_text+0x18e>
 8006620:	f5b7 7fa0 	cmp.w	r7, #320	; 0x140
 8006624:	f280 80b1 	bge.w	800678a <ILI9341_print_text+0x18e>
				(y0 >= ILI9341_HEIGHT) || // Clip bottom
				((x0 + 6 * font_size - 1) < 0) || // Clip left
 8006628:	2206      	movs	r2, #6
 800662a:	fb12 6204 	smlabb	r2, r2, r4, r6
				(y0 >= ILI9341_HEIGHT) || // Clip bottom
 800662e:	2a00      	cmp	r2, #0
 8006630:	f340 80ab 	ble.w	800678a <ILI9341_print_text+0x18e>
				((y0 + 8 * font_size - 1) < 0))   // Clip top
 8006634:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
			return;
	} else {
		if ((y0 >= ILI9341_WIDTH) || // Clip right
				(x0 >= ILI9341_HEIGHT) || // Clip bottom
				((y0 + 6 * font_size - 1) < 0) || // Clip left
 8006638:	2a00      	cmp	r2, #0
 800663a:	f340 80a6 	ble.w	800678a <ILI9341_print_text+0x18e>
	uint8_t font_color_16_bit[2] = {font_color >> 8, font_color};
 800663e:	0a1a      	lsrs	r2, r3, #8
 8006640:	f88d 3011 	strb.w	r3, [sp, #17]
	uint8_t background_color_16_bit[2] = {background_color >> 8, background_color};
 8006644:	0a0b      	lsrs	r3, r1, #8
	uint8_t font_color_16_bit[2] = {font_color >> 8, font_color};
 8006646:	f88d 2010 	strb.w	r2, [sp, #16]
	uint8_t background_color_16_bit[2] = {background_color >> 8, background_color};
 800664a:	f88d 3014 	strb.w	r3, [sp, #20]
 800664e:	f88d 1015 	strb.w	r1, [sp, #21]
	for(j = 0; j < CHAR_HEIGHT; j++) {
 8006652:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006656:	f8bd 8010 	ldrh.w	r8, [sp, #16]
 800665a:	f8df c138 	ldr.w	ip, [pc, #312]	; 8006794 <ILI9341_print_text+0x198>
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2500      	movs	r5, #0
 8006662:	f88d 500a 	strb.w	r5, [sp, #10]
		for(h = 0; h < font_size; h++) {
 8006666:	462b      	mov	r3, r5
					a = font[index_row][i] & (1 << j);
 8006668:	f04f 0906 	mov.w	r9, #6
	for(j = 0; j < CHAR_HEIGHT; j++) {
 800666c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006670:	2a06      	cmp	r2, #6
 8006672:	d926      	bls.n	80066c2 <ILI9341_print_text+0xc6>
				((x0 + 8 * font_size - 1) < 0))   // Clip top
			return;
	}

	uint16_t pixels_added_into_data = ILI9341_text_to_image(text, SPI_DATA, font_color, background_color, font_size);
	uint16_t x1 = x0 + font_size*CHAR_WIDTH*strlen(text) - 1;
 8006674:	f7f9 fdac 	bl	80001d0 <strlen>
	uint8_t y1 = y0 + font_size*CHAR_HEIGHT;
 8006678:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
	uint16_t x1 = x0 + font_size*CHAR_WIDTH*strlen(text) - 1;
 800667c:	fb14 f400 	smulbb	r4, r4, r0
 8006680:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006684:	1e72      	subs	r2, r6, #1
	uint8_t y1 = y0 + font_size*CHAR_HEIGHT;
 8006686:	443b      	add	r3, r7
	uint16_t x1 = x0 + font_size*CHAR_WIDTH*strlen(text) - 1;
 8006688:	eb02 0244 	add.w	r2, r2, r4, lsl #1
	ILI9341_set_cursor_position(x0, y0, x1, y1);
 800668c:	4639      	mov	r1, r7
 800668e:	4630      	mov	r0, r6
 8006690:	b2db      	uxtb	r3, r3
 8006692:	b212      	sxth	r2, r2
 8006694:	f7ff fe20 	bl	80062d8 <ILI9341_set_cursor_position>
	ILI9341_send_data_array(SPI_DATA, 2*pixels_added_into_data); /* Because it's 16-bit pixels with 8-bit data */
 8006698:	0069      	lsls	r1, r5, #1
 800669a:	483e      	ldr	r0, [pc, #248]	; (8006794 <ILI9341_print_text+0x198>)
 800669c:	b289      	uxth	r1, r1

}
 800669e:	b007      	add	sp, #28
 80066a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ILI9341_send_data_array(SPI_DATA, 2*pixels_added_into_data); /* Because it's 16-bit pixels with 8-bit data */
 80066a4:	f7ff bddc 	b.w	8006260 <ILI9341_send_data_array>
		if ((y0 >= ILI9341_WIDTH) || // Clip right
 80066a8:	2fef      	cmp	r7, #239	; 0xef
 80066aa:	dc6e      	bgt.n	800678a <ILI9341_print_text+0x18e>
 80066ac:	f5b6 7fa0 	cmp.w	r6, #320	; 0x140
 80066b0:	da6b      	bge.n	800678a <ILI9341_print_text+0x18e>
				((y0 + 6 * font_size - 1) < 0) || // Clip left
 80066b2:	2206      	movs	r2, #6
 80066b4:	fb12 7204 	smlabb	r2, r2, r4, r7
				(x0 >= ILI9341_HEIGHT) || // Clip bottom
 80066b8:	2a00      	cmp	r2, #0
 80066ba:	dd66      	ble.n	800678a <ILI9341_print_text+0x18e>
				((x0 + 8 * font_size - 1) < 0))   // Clip top
 80066bc:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 80066c0:	e7ba      	b.n	8006638 <ILI9341_print_text+0x3c>
		for(h = 0; h < font_size; h++) {
 80066c2:	f88d 300b 	strb.w	r3, [sp, #11]
					a = font[index_row][i] & (1 << j);
 80066c6:	f04f 0a01 	mov.w	sl, #1
		for(h = 0; h < font_size; h++) {
 80066ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80066ce:	4294      	cmp	r4, r2
 80066d0:	d954      	bls.n	800677c <ILI9341_print_text+0x180>
 80066d2:	f100 3eff 	add.w	lr, r0, #4294967295
 80066d6:	e016      	b.n	8006706 <ILI9341_print_text+0x10a>
				c = *text++ & 0x7F;
 80066d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066dc:	f88d 200f 	strb.w	r2, [sp, #15]
				if (c < ' ')
 80066e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80066e4:	2a1f      	cmp	r2, #31
					index_row = c - ' ';
 80066e6:	bf89      	itett	hi
 80066e8:	f89d 200f 	ldrbhi.w	r2, [sp, #15]
					index_row = 0; /* This is the first row in the font array */
 80066ec:	f88d 300e 	strbls.w	r3, [sp, #14]
					index_row = c - ' ';
 80066f0:	3a20      	subhi	r2, #32
 80066f2:	b2d2      	uxtbhi	r2, r2
 80066f4:	bf88      	it	hi
 80066f6:	f88d 200e 	strbhi.w	r2, [sp, #14]
				for (i = 0; i < CHAR_WIDTH; i++) {
 80066fa:	f88d 3009 	strb.w	r3, [sp, #9]
 80066fe:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8006702:	2a05      	cmp	r2, #5
 8006704:	d90a      	bls.n	800671c <ILI9341_print_text+0x120>
			while(*text) {
 8006706:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
 800670a:	2a00      	cmp	r2, #0
 800670c:	d1e4      	bne.n	80066d8 <ILI9341_print_text+0xdc>
		for(h = 0; h < font_size; h++) {
 800670e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8006712:	3201      	adds	r2, #1
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	f88d 200b 	strb.w	r2, [sp, #11]
 800671a:	e7d6      	b.n	80066ca <ILI9341_print_text+0xce>
					a = font[index_row][i] & (1 << j);
 800671c:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8006720:	f89d b009 	ldrb.w	fp, [sp, #9]
 8006724:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006728:	9201      	str	r2, [sp, #4]
 800672a:	4a1b      	ldr	r2, [pc, #108]	; (8006798 <ILI9341_print_text+0x19c>)
 800672c:	fb09 2101 	mla	r1, r9, r1, r2
 8006730:	9a01      	ldr	r2, [sp, #4]
 8006732:	f811 100b 	ldrb.w	r1, [r1, fp]
 8006736:	fa0a f202 	lsl.w	r2, sl, r2
 800673a:	400a      	ands	r2, r1
 800673c:	f88d 200d 	strb.w	r2, [sp, #13]
					for(w = 0; w < font_size; w++) {
 8006740:	f88d 300c 	strb.w	r3, [sp, #12]
 8006744:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8006748:	4294      	cmp	r4, r2
 800674a:	d806      	bhi.n	800675a <ILI9341_print_text+0x15e>
				for (i = 0; i < CHAR_WIDTH; i++) {
 800674c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8006750:	3201      	adds	r2, #1
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	f88d 2009 	strb.w	r2, [sp, #9]
 8006758:	e7d1      	b.n	80066fe <ILI9341_print_text+0x102>
						if (a > 0){
 800675a:	f89d 100d 	ldrb.w	r1, [sp, #13]
							memcpy(data, font_color_16_bit, 2); /* We have a pixel 1 - Font pixel */
 800675e:	9a00      	ldr	r2, [sp, #0]
 8006760:	2900      	cmp	r1, #0
 8006762:	bf18      	it	ne
 8006764:	4642      	movne	r2, r8
 8006766:	f82c 2b02 	strh.w	r2, [ip], #2
					for(w = 0; w < font_size; w++) {
 800676a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800676e:	3201      	adds	r2, #1
						pixels_added_into_data++;
 8006770:	3501      	adds	r5, #1
					for(w = 0; w < font_size; w++) {
 8006772:	b2d2      	uxtb	r2, r2
						pixels_added_into_data++;
 8006774:	b2ad      	uxth	r5, r5
					for(w = 0; w < font_size; w++) {
 8006776:	f88d 200c 	strb.w	r2, [sp, #12]
 800677a:	e7e3      	b.n	8006744 <ILI9341_print_text+0x148>
	for(j = 0; j < CHAR_HEIGHT; j++) {
 800677c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006780:	3201      	adds	r2, #1
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	f88d 200a 	strb.w	r2, [sp, #10]
 8006788:	e770      	b.n	800666c <ILI9341_print_text+0x70>
}
 800678a:	b007      	add	sp, #28
 800678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006790:	20002728 	.word	0x20002728
 8006794:	200007a8 	.word	0x200007a8
 8006798:	08014ac9 	.word	0x08014ac9

0800679c <ILI9341_set_rotation>:
	ILI9341_set_cursor_position(x, y, w + x - 1, h + y - 1);
	ILI9341_send_data_array(SPI_DATA, size);
}

/* Set screen rotation */
void ILI9341_set_rotation(uint8_t rotate) {
 800679c:	b508      	push	{r3, lr}
	if(lcd.ScreenOrientation == rotate)
 800679e:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <ILI9341_set_rotation+0x58>)
 80067a0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80067a4:	4282      	cmp	r2, r0
 80067a6:	d023      	beq.n	80067f0 <ILI9341_set_rotation+0x54>
		return; /* No action */

	lcd.ScreenOrientation = rotate;
	switch (rotate) {
 80067a8:	2803      	cmp	r0, #3
	lcd.ScreenOrientation = rotate;
 80067aa:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
	switch (rotate) {
 80067ae:	d013      	beq.n	80067d8 <ILI9341_set_rotation+0x3c>
 80067b0:	2804      	cmp	r0, #4
 80067b2:	d017      	beq.n	80067e4 <ILI9341_set_rotation+0x48>
 80067b4:	2802      	cmp	r0, #2
 80067b6:	d009      	beq.n	80067cc <ILI9341_set_rotation+0x30>
	case 1:
		lcd.rotationNum = 1;
 80067b8:	2201      	movs	r2, #1
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80067ba:	2036      	movs	r0, #54	; 0x36
		lcd.rotationNum = 1;
 80067bc:	701a      	strb	r2, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80067be:	f7ff fd67 	bl	8006290 <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 80067c2:	2088      	movs	r0, #136	; 0x88
		lcd.rotationNum = 1;
		ILI9341_send_command(ILI9341_MEMCONTROL);
		ILI9341_send_data(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
		break;
	}
}
 80067c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ILI9341_send_data(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80067c8:	f7ff bd30 	b.w	800622c <ILI9341_send_data>
		lcd.rotationNum = 2;
 80067cc:	7018      	strb	r0, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80067ce:	2036      	movs	r0, #54	; 0x36
 80067d0:	f7ff fd5e 	bl	8006290 <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80067d4:	2028      	movs	r0, #40	; 0x28
 80067d6:	e7f5      	b.n	80067c4 <ILI9341_set_rotation+0x28>
		lcd.rotationNum = 3;
 80067d8:	7018      	strb	r0, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80067da:	2036      	movs	r0, #54	; 0x36
 80067dc:	f7ff fd58 	bl	8006290 <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 80067e0:	2048      	movs	r0, #72	; 0x48
 80067e2:	e7ef      	b.n	80067c4 <ILI9341_set_rotation+0x28>
		lcd.rotationNum = 4;
 80067e4:	7018      	strb	r0, [r3, #0]
		ILI9341_send_command(ILI9341_MEMCONTROL);
 80067e6:	2036      	movs	r0, #54	; 0x36
 80067e8:	f7ff fd52 	bl	8006290 <ILI9341_send_command>
		ILI9341_send_data(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80067ec:	20e8      	movs	r0, #232	; 0xe8
 80067ee:	e7e9      	b.n	80067c4 <ILI9341_set_rotation+0x28>
}
 80067f0:	bd08      	pop	{r3, pc}
 80067f2:	bf00      	nop
 80067f4:	20002728 	.word	0x20002728

080067f8 <TSC2046_SendCommand>:
 */

#include "ILI9341.h"

// Send TSC2046 Command and wait for a response
static uint16_t TSC2046_SendCommand(uint8_t cmd) {
 80067f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 80067fa:	4b17      	ldr	r3, [pc, #92]	; (8006858 <TSC2046_SendCommand+0x60>)
	uint16_t return16 = 0;
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 80067fc:	4d17      	ldr	r5, [pc, #92]	; (800685c <TSC2046_SendCommand+0x64>)
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 80067fe:	881a      	ldrh	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 8006800:	8c29      	ldrh	r1, [r5, #32]
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 8006802:	789b      	ldrb	r3, [r3, #2]
 8006804:	f8ad 2004 	strh.w	r2, [sp, #4]
static uint16_t TSC2046_SendCommand(uint8_t cmd) {
 8006808:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 800680a:	2200      	movs	r2, #0
 800680c:	69e8      	ldr	r0, [r5, #28]
	uint8_t lcdBuf[3] = { 0, 0, 0 };
 800680e:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_RESET);
 8006812:	f003 f855 	bl	80098c0 <HAL_GPIO_WritePin>
	lcdBuf[0] = cmd;
	HAL_SPI_Transmit(lcd.touchSpi, lcdBuf, 1, 10);
 8006816:	230a      	movs	r3, #10
 8006818:	2201      	movs	r2, #1
 800681a:	a901      	add	r1, sp, #4
 800681c:	69a8      	ldr	r0, [r5, #24]
	lcdBuf[0] = cmd;
 800681e:	f88d 4004 	strb.w	r4, [sp, #4]
	HAL_SPI_Transmit(lcd.touchSpi, lcdBuf, 1, 10);
 8006822:	f005 f95f 	bl	800bae4 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(lcd.touchSpi, &lcdBuf[1], 2, 10) == HAL_OK)
 8006826:	69a8      	ldr	r0, [r5, #24]
 8006828:	230a      	movs	r3, #10
 800682a:	2202      	movs	r2, #2
 800682c:	f10d 0105 	add.w	r1, sp, #5
 8006830:	f005 fb4d 	bl	800bece <HAL_SPI_Receive>
 8006834:	b970      	cbnz	r0, 8006854 <TSC2046_SendCommand+0x5c>
		return16 = (lcdBuf[1] << 4) + (lcdBuf[2] >> 4);
 8006836:	f89d 4006 	ldrb.w	r4, [sp, #6]
 800683a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800683e:	0924      	lsrs	r4, r4, #4
 8006840:	eb04 1403 	add.w	r4, r4, r3, lsl #4
	else
		return16 = 0;
	HAL_GPIO_WritePin(lcd.TOUCH_CS_PORT, lcd.TOUCH_CS_PIN, GPIO_PIN_SET);
 8006844:	69e8      	ldr	r0, [r5, #28]
 8006846:	8c29      	ldrh	r1, [r5, #32]
 8006848:	2201      	movs	r2, #1
 800684a:	f003 f839 	bl	80098c0 <HAL_GPIO_WritePin>
	return return16;
}
 800684e:	4620      	mov	r0, r4
 8006850:	b003      	add	sp, #12
 8006852:	bd30      	pop	{r4, r5, pc}
		return16 = 0;
 8006854:	2400      	movs	r4, #0
 8006856:	e7f5      	b.n	8006844 <TSC2046_SendCommand+0x4c>
 8006858:	08012d58 	.word	0x08012d58
 800685c:	20002728 	.word	0x20002728

08006860 <TSC2046_getRaw_Y>:
static uint16_t TSC2046_getRaw_X() {
	return TSC2046_SendCommand(CMD_X_AXIS | lcd.CMD_Default);
}
// Get y-axis raw touch 12-bit value
static uint16_t TSC2046_getRaw_Y() {
	return TSC2046_SendCommand(CMD_Y_AXIS | lcd.CMD_Default);
 8006860:	4b03      	ldr	r3, [pc, #12]	; (8006870 <TSC2046_getRaw_Y+0x10>)
 8006862:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8006866:	f040 0010 	orr.w	r0, r0, #16
 800686a:	f7ff bfc5 	b.w	80067f8 <TSC2046_SendCommand>
 800686e:	bf00      	nop
 8006870:	20002728 	.word	0x20002728

08006874 <TSC2046_getRaw_X>:
	return TSC2046_SendCommand(CMD_X_AXIS | lcd.CMD_Default);
 8006874:	4b03      	ldr	r3, [pc, #12]	; (8006884 <TSC2046_getRaw_X+0x10>)
 8006876:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 800687a:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 800687e:	f7ff bfbb 	b.w	80067f8 <TSC2046_SendCommand>
 8006882:	bf00      	nop
 8006884:	20002728 	.word	0x20002728

08006888 <TSC2046_GetRawTouch>:
	ILI9341_fill_circle(lcd.myTS_Calibrate.Width - 1, lcd.myTS_Calibrate.Height - 1, 3, COLOR_BLUE);
	ILI9341_print_text("Press here", lcd.myTS_Calibrate.Width - 80, lcd.myTS_Calibrate.Height - 40, COLOR_BLUE, COLOR_CYAN, 1);
}

// Poll for touch status
static void TSC2046_GetRawTouch() {
 8006888:	b538      	push	{r3, r4, r5, lr}

	// Assign raw touch based on orientation
	switch (lcd.ScreenOrientation) {
 800688a:	4c1b      	ldr	r4, [pc, #108]	; (80068f8 <TSC2046_GetRawTouch+0x70>)
 800688c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8006890:	3b01      	subs	r3, #1
 8006892:	2b03      	cmp	r3, #3
 8006894:	d812      	bhi.n	80068bc <TSC2046_GetRawTouch+0x34>
 8006896:	e8df f003 	tbb	[pc, r3]
 800689a:	1402      	.short	0x1402
 800689c:	2920      	.short	0x2920
	case 1:
		lcd.localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 800689e:	f7ff ffe9 	bl	8006874 <TSC2046_getRaw_X>
 80068a2:	f5c0 607f 	rsb	r0, r0, #4080	; 0xff0
 80068a6:	300f      	adds	r0, #15
 80068a8:	8520      	strh	r0, [r4, #40]	; 0x28
	return TSC2046_SendCommand(CMD_Y_AXIS | lcd.CMD_Default);
 80068aa:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 80068ae:	f040 0010 	orr.w	r0, r0, #16
 80068b2:	f7ff ffa1 	bl	80067f8 <TSC2046_SendCommand>
		break;

	case 3:
		lcd.localRawTouch.x_touch = TSC2046_getRaw_X();
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
		lcd.myTS_Calibrate.Width = 230;
 80068b6:	4b11      	ldr	r3, [pc, #68]	; (80068fc <TSC2046_GetRawTouch+0x74>)
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 80068b8:	8560      	strh	r0, [r4, #42]	; 0x2a
		break;

	case 4:
		lcd.localRawTouch.x_touch = TSC2046_getRaw_Y();
		lcd.localRawTouch.y_touch = TSC2046_getRaw_X();
		lcd.myTS_Calibrate.Width = 320;
 80068ba:	64e3      	str	r3, [r4, #76]	; 0x4c
		lcd.myTS_Calibrate.Height = 240;
		break;
	}
	// These are for the calibration
	lcd.myRawTouchDef.x_touch = lcd.localRawTouch.x_touch;
 80068bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068be:	62e3      	str	r3, [r4, #44]	; 0x2c
	lcd.myRawTouchDef.y_touch = lcd.localRawTouch.y_touch;
}
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
		lcd.localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y();
 80068c2:	f7ff ffcd 	bl	8006860 <TSC2046_getRaw_Y>
 80068c6:	f640 75ff 	movw	r5, #4095	; 0xfff
 80068ca:	1a28      	subs	r0, r5, r0
 80068cc:	8520      	strh	r0, [r4, #40]	; 0x28
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_X();
 80068ce:	f7ff ffd1 	bl	8006874 <TSC2046_getRaw_X>
 80068d2:	1a28      	subs	r0, r5, r0
		lcd.myTS_Calibrate.Width = 320;
 80068d4:	4b0a      	ldr	r3, [pc, #40]	; (8006900 <TSC2046_GetRawTouch+0x78>)
		lcd.localRawTouch.y_touch = TSC2046_getRaw_X();
 80068d6:	8560      	strh	r0, [r4, #42]	; 0x2a
		lcd.myTS_Calibrate.Height = 240;
 80068d8:	e7ef      	b.n	80068ba <TSC2046_GetRawTouch+0x32>
		lcd.localRawTouch.x_touch = TSC2046_getRaw_X();
 80068da:	f7ff ffcb 	bl	8006874 <TSC2046_getRaw_X>
 80068de:	8520      	strh	r0, [r4, #40]	; 0x28
		lcd.localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 80068e0:	f7ff ffbe 	bl	8006860 <TSC2046_getRaw_Y>
 80068e4:	f5c0 607f 	rsb	r0, r0, #4080	; 0xff0
 80068e8:	300f      	adds	r0, #15
 80068ea:	e7e4      	b.n	80068b6 <TSC2046_GetRawTouch+0x2e>
		lcd.localRawTouch.x_touch = TSC2046_getRaw_Y();
 80068ec:	f7ff ffb8 	bl	8006860 <TSC2046_getRaw_Y>
 80068f0:	8520      	strh	r0, [r4, #40]	; 0x28
		lcd.localRawTouch.y_touch = TSC2046_getRaw_X();
 80068f2:	f7ff ffbf 	bl	8006874 <TSC2046_getRaw_X>
 80068f6:	e7ed      	b.n	80068d4 <TSC2046_GetRawTouch+0x4c>
 80068f8:	20002728 	.word	0x20002728
 80068fc:	014000e6 	.word	0x014000e6
 8006900:	00f00140 	.word	0x00f00140

08006904 <TSC2046_GetTouchCalibrationParameters>:
	// Calculate bias
	lcd.myTS_Calibrate.Bias_X = -1 - lcd.myTS_Calibrate.Scale_X * lcd.myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
}

void TSC2046_GetTouchCalibrationParameters(float *Scale_X, float *Scale_Y, float *Bias_X, float *Bias_Y) {
 8006904:	b530      	push	{r4, r5, lr}
	*Scale_X = lcd.myTS_Calibrate.Scale_X;
 8006906:	4c05      	ldr	r4, [pc, #20]	; (800691c <TSC2046_GetTouchCalibrationParameters+0x18>)
 8006908:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800690a:	6005      	str	r5, [r0, #0]
	*Scale_Y = lcd.myTS_Calibrate.Scale_Y;
 800690c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800690e:	6008      	str	r0, [r1, #0]
	*Bias_X = lcd.myTS_Calibrate.Bias_X;
 8006910:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006912:	6011      	str	r1, [r2, #0]
	*Bias_Y = lcd.myTS_Calibrate.Bias_Y;
 8006914:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006916:	601a      	str	r2, [r3, #0]
}
 8006918:	bd30      	pop	{r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	20002728 	.word	0x20002728

08006920 <TSC2046_SetTouchCalibrationParameters>:

void TSC2046_SetTouchCalibrationParameters(float Scale_X, float Scale_Y, float Bias_X, float Bias_Y) {
	lcd.myTS_Calibrate.Scale_X = Scale_X;
 8006920:	4b04      	ldr	r3, [pc, #16]	; (8006934 <TSC2046_SetTouchCalibrationParameters+0x14>)
 8006922:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
	lcd.myTS_Calibrate.Scale_Y = Scale_Y;
 8006926:	edc3 0a10 	vstr	s1, [r3, #64]	; 0x40
	lcd.myTS_Calibrate.Bias_X = Bias_X;
 800692a:	ed83 1a11 	vstr	s2, [r3, #68]	; 0x44
	lcd.myTS_Calibrate.Bias_Y = Bias_Y;
 800692e:	edc3 1a12 	vstr	s3, [r3, #72]	; 0x48
}
 8006932:	4770      	bx	lr
 8006934:	20002728 	.word	0x20002728

08006938 <TSC2046_GetTouchData>:

// Get touch screen data when calibration is already made
void TSC2046_GetTouchData() {
 8006938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Reset
	uint16_t temp16x = 0, temp16y = 0;
 800693c:	f04f 0800 	mov.w	r8, #0
	// Read touch data
	for (uint8_t i = 0; i < 10; i++) {
		TSC2046_GetRawTouch(lcd);
 8006940:	4e2f      	ldr	r6, [pc, #188]	; (8006a00 <TSC2046_GetTouchData+0xc8>)
void TSC2046_GetTouchData() {
 8006942:	b091      	sub	sp, #68	; 0x44
 8006944:	270a      	movs	r7, #10
	uint16_t temp16x = 0, temp16y = 0;
 8006946:	46c1      	mov	r9, r8
		TSC2046_GetRawTouch(lcd);
 8006948:	4d2e      	ldr	r5, [pc, #184]	; (8006a04 <TSC2046_GetTouchData+0xcc>)
 800694a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800694c:	466c      	mov	r4, sp
 800694e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006958:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800695c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006960:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006964:	f7ff ff90 	bl	8006888 <TSC2046_GetRawTouch>
		temp16x += lcd.localRawTouch.x_touch;
 8006968:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800696a:	4499      	add	r9, r3
		temp16y += lcd.localRawTouch.y_touch;
 800696c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	for (uint8_t i = 0; i < 10; i++) {
 800696e:	3f01      	subs	r7, #1
		temp16y += lcd.localRawTouch.y_touch;
 8006970:	4498      	add	r8, r3
	for (uint8_t i = 0; i < 10; i++) {
 8006972:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
		temp16x += lcd.localRawTouch.x_touch;
 8006976:	fa1f f989 	uxth.w	r9, r9
		temp16y += lcd.localRawTouch.y_touch;
 800697a:	fa1f f888 	uxth.w	r8, r8
	for (uint8_t i = 0; i < 10; i++) {
 800697e:	d1e3      	bne.n	8006948 <TSC2046_GetTouchData+0x10>
	}
	lcd.localRawTouch.x_touch = temp16x * 0.1;
 8006980:	4648      	mov	r0, r9
 8006982:	f7f9 fdcf 	bl	8000524 <__aeabi_i2d>
 8006986:	a31c      	add	r3, pc, #112	; (adr r3, 80069f8 <TSC2046_GetTouchData+0xc0>)
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f7f9 fe34 	bl	80005f8 <__aeabi_dmul>
 8006990:	f7fa f90a 	bl	8000ba8 <__aeabi_d2uiz>
 8006994:	b284      	uxth	r4, r0
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 8006996:	4640      	mov	r0, r8
	lcd.localRawTouch.x_touch = temp16x * 0.1;
 8006998:	8534      	strh	r4, [r6, #40]	; 0x28
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 800699a:	f7f9 fdc3 	bl	8000524 <__aeabi_i2d>
 800699e:	a316      	add	r3, pc, #88	; (adr r3, 80069f8 <TSC2046_GetTouchData+0xc0>)
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f7f9 fe28 	bl	80005f8 <__aeabi_dmul>
 80069a8:	f7fa f8fe 	bl	8000ba8 <__aeabi_d2uiz>

	// X-axis value
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80069ac:	ee07 4a90 	vmov	s15, r4
 80069b0:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
 80069b4:	ed96 7a11 	vldr	s14, [r6, #68]	; 0x44
 80069b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 80069bc:	b280      	uxth	r0, r0
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80069be:	eea6 7aa7 	vfma.f32	s14, s13, s15
	lcd.localRawTouch.y_touch = temp16y * 0.1;
 80069c2:	8570      	strh	r0, [r6, #42]	; 0x2a

	// Y-axis value
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 80069c4:	ee07 0a90 	vmov	s15, r0
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80069c8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 80069cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80069d0:	ee17 3a10 	vmov	r3, s14
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 80069d4:	edd6 6a10 	vldr	s13, [r6, #64]	; 0x40
 80069d8:	ed96 7a12 	vldr	s14, [r6, #72]	; 0x48
	lcd.myTsData.X = lcd.myTS_Calibrate.Scale_X * lcd.localRawTouch.x_touch + lcd.myTS_Calibrate.Bias_X;
 80069dc:	8633      	strh	r3, [r6, #48]	; 0x30
	lcd.myTsData.Y = lcd.myTS_Calibrate.Scale_Y * lcd.localRawTouch.y_touch + lcd.myTS_Calibrate.Bias_Y;
 80069de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80069e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80069e6:	ee17 3a10 	vmov	r3, s14
 80069ea:	8673      	strh	r3, [r6, #50]	; 0x32
}
 80069ec:	b011      	add	sp, #68	; 0x44
 80069ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069f2:	bf00      	nop
 80069f4:	f3af 8000 	nop.w
 80069f8:	9999999a 	.word	0x9999999a
 80069fc:	3fb99999 	.word	0x3fb99999
 8006a00:	20002728 	.word	0x20002728
 8006a04:	20002738 	.word	0x20002738

08006a08 <TSC2046_isPressed>:


bool TSC2046_isPressed() {
 8006a08:	b510      	push	{r4, lr}
	return TSC2046_SendCommand(CMD_Z_AXIS | lcd.CMD_Default);
 8006a0a:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <TSC2046_isPressed+0x48>)
 8006a0c:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8006a10:	f040 0030 	orr.w	r0, r0, #48	; 0x30
 8006a14:	f7ff fef0 	bl	80067f8 <TSC2046_SendCommand>
	static uint8_t count = 0;
	static bool has_been_pressed = false;
	bool pressed = 50 < TSC2046_getRaw_Z() ? true : false;
	if(pressed == true && has_been_pressed == false){
 8006a18:	490e      	ldr	r1, [pc, #56]	; (8006a54 <TSC2046_isPressed+0x4c>)
 8006a1a:	4a0f      	ldr	r2, [pc, #60]	; (8006a58 <TSC2046_isPressed+0x50>)
 8006a1c:	780b      	ldrb	r3, [r1, #0]
 8006a1e:	2832      	cmp	r0, #50	; 0x32
 8006a20:	d908      	bls.n	8006a34 <TSC2046_isPressed+0x2c>
 8006a22:	b993      	cbnz	r3, 8006a4a <TSC2046_isPressed+0x42>
		has_been_pressed = true;
 8006a24:	2401      	movs	r4, #1
		count = 0;
		HAL_Delay(100); /* Wait until the finger have fully pressed the LCD screen. The Touch SPI and Touch Interrupt are different things */
 8006a26:	2064      	movs	r0, #100	; 0x64
		has_been_pressed = true;
 8006a28:	700c      	strb	r4, [r1, #0]
		count = 0;
 8006a2a:	7013      	strb	r3, [r2, #0]
		HAL_Delay(100); /* Wait until the finger have fully pressed the LCD screen. The Touch SPI and Touch Interrupt are different things */
 8006a2c:	f002 f8b4 	bl	8008b98 <HAL_Delay>
 8006a30:	4620      	mov	r0, r4
		}else{
			count = 0;
		}
		return false;
	}
}
 8006a32:	bd10      	pop	{r4, pc}
		if(pressed == false && has_been_pressed == true) {
 8006a34:	b14b      	cbz	r3, 8006a4a <TSC2046_isPressed+0x42>
			count = 1 + count;
 8006a36:	7813      	ldrb	r3, [r2, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	b2db      	uxtb	r3, r3
			if(count >= 10)
 8006a3c:	2b09      	cmp	r3, #9
			count = 1 + count;
 8006a3e:	7013      	strb	r3, [r2, #0]
			if(count >= 10)
 8006a40:	f04f 0000 	mov.w	r0, #0
 8006a44:	d9f5      	bls.n	8006a32 <TSC2046_isPressed+0x2a>
				has_been_pressed = false;
 8006a46:	7008      	strb	r0, [r1, #0]
 8006a48:	e7f3      	b.n	8006a32 <TSC2046_isPressed+0x2a>
			count = 0;
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	7010      	strb	r0, [r2, #0]
 8006a4e:	e7f0      	b.n	8006a32 <TSC2046_isPressed+0x2a>
 8006a50:	20002728 	.word	0x20002728
 8006a54:	200020a9 	.word	0x200020a9
 8006a58:	200020a8 	.word	0x200020a8
 8006a5c:	00000000 	.word	0x00000000

08006a60 <TSC2046_Calibrate>:
void TSC2046_Calibrate() {
 8006a60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	lcd.myTS_Calibrate.TL_X = 0;
 8006a64:	4c72      	ldr	r4, [pc, #456]	; (8006c30 <TSC2046_Calibrate+0x1d0>)
	ILI9341_set_rotation(2);
 8006a66:	2002      	movs	r0, #2
 8006a68:	f7ff fe98 	bl	800679c <ILI9341_set_rotation>
	ILI9341_fill_circle(3, 3, 3, COLOR_BLUE);
 8006a6c:	2203      	movs	r2, #3
	lcd.myTS_Calibrate.TL_X = 0;
 8006a6e:	2300      	movs	r3, #0
	ILI9341_fill_circle(3, 3, 3, COLOR_BLUE);
 8006a70:	4611      	mov	r1, r2
 8006a72:	4610      	mov	r0, r2
	lcd.myTS_Calibrate.BR_X = 0;
 8006a74:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	lcd.myRawTouchDef.x_touch = 0;
 8006a78:	62e3      	str	r3, [r4, #44]	; 0x2c
	ILI9341_fill_circle(3, 3, 3, COLOR_BLUE);
 8006a7a:	231f      	movs	r3, #31
 8006a7c:	f7ff fd4b 	bl	8006516 <ILI9341_fill_circle>
	ILI9341_print_text("Press here", 20, 30, COLOR_BLUE, COLOR_CYAN, 1);
 8006a80:	2501      	movs	r5, #1
 8006a82:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006a86:	e9cd 3500 	strd	r3, r5, [sp]
 8006a8a:	486a      	ldr	r0, [pc, #424]	; (8006c34 <TSC2046_Calibrate+0x1d4>)
 8006a8c:	231f      	movs	r3, #31
 8006a8e:	221e      	movs	r2, #30
 8006a90:	2114      	movs	r1, #20
 8006a92:	f7ff fdb3 	bl	80065fc <ILI9341_print_text>
	HAL_Delay(2000);
 8006a96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006a9a:	f002 f87d 	bl	8008b98 <HAL_Delay>
		if (TSC2046_isPressed()) {
 8006a9e:	f7ff ffb3 	bl	8006a08 <TSC2046_isPressed>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f000 80b8 	beq.w	8006c18 <TSC2046_Calibrate+0x1b8>
 8006aa8:	250a      	movs	r5, #10
				TSC2046_GetRawTouch();
 8006aaa:	f7ff feed 	bl	8006888 <TSC2046_GetRawTouch>
				lcd.myTS_Calibrate.TL_X += lcd.myRawTouchDef.x_touch;
 8006aae:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8006ab0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006ab2:	4413      	add	r3, r2
 8006ab4:	86a3      	strh	r3, [r4, #52]	; 0x34
				lcd.myTS_Calibrate.TL_Y += lcd.myRawTouchDef.y_touch;
 8006ab6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8006ab8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
			for (uint8_t i = 0; i < 10; i++) {
 8006aba:	3d01      	subs	r5, #1
				lcd.myTS_Calibrate.TL_Y += lcd.myRawTouchDef.y_touch;
 8006abc:	4413      	add	r3, r2
			for (uint8_t i = 0; i < 10; i++) {
 8006abe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
				lcd.myTS_Calibrate.TL_Y += lcd.myRawTouchDef.y_touch;
 8006ac2:	86e3      	strh	r3, [r4, #54]	; 0x36
			for (uint8_t i = 0; i < 10; i++) {
 8006ac4:	d1f1      	bne.n	8006aaa <TSC2046_Calibrate+0x4a>
	HAL_Delay(1000);
 8006ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006aca:	f002 f865 	bl	8008b98 <HAL_Delay>
	ILI9341_fill_circle(lcd.myTS_Calibrate.Width - 1, lcd.myTS_Calibrate.Height - 1, 3, COLOR_BLUE);
 8006ace:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8006ad2:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 8006ad6:	3901      	subs	r1, #1
 8006ad8:	3801      	subs	r0, #1
 8006ada:	231f      	movs	r3, #31
 8006adc:	2203      	movs	r2, #3
 8006ade:	b209      	sxth	r1, r1
 8006ae0:	b200      	sxth	r0, r0
 8006ae2:	f7ff fd18 	bl	8006516 <ILI9341_fill_circle>
	ILI9341_print_text("Press here", lcd.myTS_Calibrate.Width - 80, lcd.myTS_Calibrate.Height - 40, COLOR_BLUE, COLOR_CYAN, 1);
 8006ae6:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 8006aea:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 8006aee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006af2:	2001      	movs	r0, #1
 8006af4:	3a28      	subs	r2, #40	; 0x28
 8006af6:	3950      	subs	r1, #80	; 0x50
 8006af8:	e9cd 3000 	strd	r3, r0, [sp]
 8006afc:	b212      	sxth	r2, r2
 8006afe:	484d      	ldr	r0, [pc, #308]	; (8006c34 <TSC2046_Calibrate+0x1d4>)
 8006b00:	231f      	movs	r3, #31
 8006b02:	b209      	sxth	r1, r1
 8006b04:	f7ff fd7a 	bl	80065fc <ILI9341_print_text>
		if (TSC2046_isPressed()) {
 8006b08:	f7ff ff7e 	bl	8006a08 <TSC2046_isPressed>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	f000 8085 	beq.w	8006c1c <TSC2046_Calibrate+0x1bc>
 8006b12:	260a      	movs	r6, #10
				TSC2046_GetRawTouch();
 8006b14:	f7ff feb8 	bl	8006888 <TSC2046_GetRawTouch>
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 8006b18:	8f25      	ldrh	r5, [r4, #56]	; 0x38
 8006b1a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006b1c:	f8b4 803a 	ldrh.w	r8, [r4, #58]	; 0x3a
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 8006b20:	441d      	add	r5, r3
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006b22:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			for (uint8_t i = 0; i < 10; i++) {
 8006b24:	3e01      	subs	r6, #1
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006b26:	4498      	add	r8, r3
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 8006b28:	b2ad      	uxth	r5, r5
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006b2a:	fa1f f888 	uxth.w	r8, r8
			for (uint8_t i = 0; i < 10; i++) {
 8006b2e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
				lcd.myTS_Calibrate.BR_X += lcd.myRawTouchDef.x_touch;
 8006b32:	8725      	strh	r5, [r4, #56]	; 0x38
				lcd.myTS_Calibrate.BR_Y += lcd.myRawTouchDef.y_touch;
 8006b34:	f8a4 803a 	strh.w	r8, [r4, #58]	; 0x3a
			for (uint8_t i = 0; i < 10; i++) {
 8006b38:	d1ec      	bne.n	8006b14 <TSC2046_Calibrate+0xb4>
	lcd.myTS_Calibrate.TL_X *= 0.1;
 8006b3a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8006b3c:	f7f9 fcf2 	bl	8000524 <__aeabi_i2d>
 8006b40:	a339      	add	r3, pc, #228	; (adr r3, 8006c28 <TSC2046_Calibrate+0x1c8>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fd57 	bl	80005f8 <__aeabi_dmul>
 8006b4a:	f7fa f82d 	bl	8000ba8 <__aeabi_d2uiz>
 8006b4e:	b287      	uxth	r7, r0
	lcd.myTS_Calibrate.TL_Y *= 0.1;
 8006b50:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
	lcd.myTS_Calibrate.TL_X *= 0.1;
 8006b52:	86a7      	strh	r7, [r4, #52]	; 0x34
	lcd.myTS_Calibrate.TL_Y *= 0.1;
 8006b54:	f7f9 fce6 	bl	8000524 <__aeabi_i2d>
 8006b58:	a333      	add	r3, pc, #204	; (adr r3, 8006c28 <TSC2046_Calibrate+0x1c8>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f7f9 fd4b 	bl	80005f8 <__aeabi_dmul>
 8006b62:	f7fa f821 	bl	8000ba8 <__aeabi_d2uiz>
 8006b66:	b286      	uxth	r6, r0
	lcd.myTS_Calibrate.BR_X *= 0.1;
 8006b68:	4628      	mov	r0, r5
	lcd.myTS_Calibrate.TL_Y *= 0.1;
 8006b6a:	86e6      	strh	r6, [r4, #54]	; 0x36
	lcd.myTS_Calibrate.BR_X *= 0.1;
 8006b6c:	f7f9 fcda 	bl	8000524 <__aeabi_i2d>
 8006b70:	a32d      	add	r3, pc, #180	; (adr r3, 8006c28 <TSC2046_Calibrate+0x1c8>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fd3f 	bl	80005f8 <__aeabi_dmul>
 8006b7a:	f7fa f815 	bl	8000ba8 <__aeabi_d2uiz>
 8006b7e:	b285      	uxth	r5, r0
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8006b80:	4640      	mov	r0, r8
	lcd.myTS_Calibrate.BR_X *= 0.1;
 8006b82:	8725      	strh	r5, [r4, #56]	; 0x38
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8006b84:	f7f9 fcce 	bl	8000524 <__aeabi_i2d>
 8006b88:	a327      	add	r3, pc, #156	; (adr r3, 8006c28 <TSC2046_Calibrate+0x1c8>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fd33 	bl	80005f8 <__aeabi_dmul>
 8006b92:	f7fa f809 	bl	8000ba8 <__aeabi_d2uiz>
	lcd.myTS_Calibrate.Scale_X = (lcd.myTS_Calibrate.Width + 0.0f) / (lcd.myTS_Calibrate.BR_X - lcd.myTS_Calibrate.TL_X + 0.0f);
 8006b96:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8006b9a:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8006c38 <TSC2046_Calibrate+0x1d8>
 8006b9e:	ee06 2a90 	vmov	s13, r2
 8006ba2:	1bea      	subs	r2, r5, r7
 8006ba4:	ee07 2a10 	vmov	s14, r2
 8006ba8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006bac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006bb0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006bb4:	ee37 7a06 	vadd.f32	s14, s14, s12
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8006bb8:	b283      	uxth	r3, r0
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006bba:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
	lcd.myTS_Calibrate.BR_Y *= 0.1;
 8006bbe:	8763      	strh	r3, [r4, #58]	; 0x3a
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006bc0:	1b9b      	subs	r3, r3, r6
	lcd.myTS_Calibrate.Scale_X = (lcd.myTS_Calibrate.Width + 0.0f) / (lcd.myTS_Calibrate.BR_X - lcd.myTS_Calibrate.TL_X + 0.0f);
 8006bc2:	eec6 5a87 	vdiv.f32	s11, s13, s14
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	ee07 2a10 	vmov	s14, r2
 8006bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006bd6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006bda:	ee37 7a06 	vadd.f32	s14, s14, s12
	lcd.myTS_Calibrate.Scale_X = (lcd.myTS_Calibrate.Width + 0.0f) / (lcd.myTS_Calibrate.BR_X - lcd.myTS_Calibrate.TL_X + 0.0f);
 8006bde:	edc4 5a0f 	vstr	s11, [r4, #60]	; 0x3c
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006be2:	eec7 6a27 	vdiv.f32	s13, s14, s15
	lcd.myTS_Calibrate.Bias_X = -1 - lcd.myTS_Calibrate.Scale_X * lcd.myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006be6:	ee07 7a90 	vmov	s15, r7
 8006bea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bf2:	eeb0 6a47 	vmov.f32	s12, s14
 8006bf6:	eea5 6ae7 	vfms.f32	s12, s11, s15
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006bfa:	ee07 6a90 	vmov	s15, r6
 8006bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lcd.myTS_Calibrate.Scale_Y = (lcd.myTS_Calibrate.Height + 0.0f) / (lcd.myTS_Calibrate.BR_Y - lcd.myTS_Calibrate.TL_Y + 0.0f);
 8006c02:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006c06:	eea6 7ae7 	vfms.f32	s14, s13, s15
	lcd.myTS_Calibrate.Bias_X = -1 - lcd.myTS_Calibrate.Scale_X * lcd.myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006c0a:	ed84 6a11 	vstr	s12, [r4, #68]	; 0x44
	lcd.myTS_Calibrate.Bias_Y = -1 - lcd.myTS_Calibrate.Scale_Y * lcd.myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8006c0e:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
}
 8006c12:	b002      	add	sp, #8
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_Delay(10);
 8006c18:	200a      	movs	r0, #10
 8006c1a:	e73e      	b.n	8006a9a <TSC2046_Calibrate+0x3a>
		HAL_Delay(10);
 8006c1c:	200a      	movs	r0, #10
 8006c1e:	f001 ffbb 	bl	8008b98 <HAL_Delay>
		if (TSC2046_isPressed()) {
 8006c22:	e771      	b.n	8006b08 <TSC2046_Calibrate+0xa8>
 8006c24:	f3af 8000 	nop.w
 8006c28:	9999999a 	.word	0x9999999a
 8006c2c:	3fb99999 	.word	0x3fb99999
 8006c30:	20002728 	.word	0x20002728
 8006c34:	08014d09 	.word	0x08014d09
 8006c38:	00000000 	.word	0x00000000

08006c3c <shift_keyboard>:
			ILI9341_print_text(text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
		}
	}
}

static void shift_keyboard(uint8_t keyboard_page) {
 8006c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c40:	2320      	movs	r3, #32
 8006c42:	2505      	movs	r5, #5
	for(uint8_t i = 0; i < 5; i++) {
		/* Jump one step to the left */
		x += 23;

		/* Upper letters */
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 8006c44:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8006ca4 <shift_keyboard+0x68>
static void shift_keyboard(uint8_t keyboard_page) {
 8006c48:	b085      	sub	sp, #20
 8006c4a:	fb05 3500 	mla	r5, r5, r0, r3
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 8006c4e:	2427      	movs	r4, #39	; 0x27
 8006c50:	462a      	mov	r2, r5
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8006c52:	b226      	sxth	r6, r4
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 8006c54:	4649      	mov	r1, r9
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8006c56:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8006c5a:	f04f 0802 	mov.w	r8, #2
		sprintf(letter, "%c", i + 32 + 5*keyboard_page);
 8006c5e:	a803      	add	r0, sp, #12
 8006c60:	f008 fac6 	bl	800f1f0 <siprintf>
		ILI9341_print_text(letter, x + 16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8006c64:	2300      	movs	r3, #0
 8006c66:	2253      	movs	r2, #83	; 0x53
 8006c68:	4631      	mov	r1, r6
 8006c6a:	a803      	add	r0, sp, #12
 8006c6c:	e9cd 7800 	strd	r7, r8, [sp]
 8006c70:	f7ff fcc4 	bl	80065fc <ILI9341_print_text>

		/* Down letter */
		sprintf(letter, "%c", i + 5 + 32 + 5*keyboard_page);
 8006c74:	1d6a      	adds	r2, r5, #5
 8006c76:	4649      	mov	r1, r9
 8006c78:	a803      	add	r0, sp, #12
 8006c7a:	f008 fab9 	bl	800f1f0 <siprintf>
	for(uint8_t i = 0; i < 5; i++) {
 8006c7e:	343a      	adds	r4, #58	; 0x3a
		ILI9341_print_text(letter, x + 16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 8006c80:	2300      	movs	r3, #0
 8006c82:	e9cd 7800 	strd	r7, r8, [sp]
 8006c86:	228a      	movs	r2, #138	; 0x8a
 8006c88:	4631      	mov	r1, r6
 8006c8a:	a803      	add	r0, sp, #12
 8006c8c:	f7ff fcb6 	bl	80065fc <ILI9341_print_text>
	for(uint8_t i = 0; i < 5; i++) {
 8006c90:	b2a4      	uxth	r4, r4
 8006c92:	f240 1349 	movw	r3, #329	; 0x149
 8006c96:	429c      	cmp	r4, r3
 8006c98:	f105 0501 	add.w	r5, r5, #1
 8006c9c:	d1d8      	bne.n	8006c50 <shift_keyboard+0x14>

		/* Jump one step to the left */
		x += 35;
	}
}
 8006c9e:	b005      	add	sp, #20
 8006ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ca4:	08013a1b 	.word	0x08013a1b

08006ca8 <STM32_PLC_LCD_Call_Keyboard_Logic>:
uint8_t STM32_PLC_LCD_Call_Keyboard_Logic(char word[]) {
 8006ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char text[17] = "";
 8006cac:	2400      	movs	r4, #0
uint8_t STM32_PLC_LCD_Call_Keyboard_Logic(char word[]) {
 8006cae:	b088      	sub	sp, #32
 8006cb0:	4606      	mov	r6, r0
	char text[17] = "";
 8006cb2:	220d      	movs	r2, #13
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	a804      	add	r0, sp, #16
 8006cb8:	9403      	str	r4, [sp, #12]
 8006cba:	f007 fe27 	bl	800e90c <memset>
			uint16_t X = lcd.myTsData.X;
 8006cbe:	4fad      	ldr	r7, [pc, #692]	; (8006f74 <STM32_PLC_LCD_Call_Keyboard_Logic+0x2cc>)
	uint8_t keyboard_page = 6; /* We start at this */
 8006cc0:	2506      	movs	r5, #6
		if (TSC2046_isPressed()) {
 8006cc2:	f7ff fea1 	bl	8006a08 <TSC2046_isPressed>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d0fb      	beq.n	8006cc2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1a>
			TSC2046_GetTouchData();
 8006cca:	f7ff fe35 	bl	8006938 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8006cce:	8e39      	ldrh	r1, [r7, #48]	; 0x30
			uint16_t Y = lcd.myTsData.Y;
 8006cd0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
			if (X >= 23 && X <= 63 && Y >= 70 && Y <= 110) {
 8006cd2:	f1a1 0e17 	sub.w	lr, r1, #23
 8006cd6:	fa1f fe8e 	uxth.w	lr, lr
 8006cda:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8006cde:	d81c      	bhi.n	8006d1a <STM32_PLC_LCD_Call_Keyboard_Logic+0x72>
 8006ce0:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 8006ce4:	2a28      	cmp	r2, #40	; 0x28
 8006ce6:	d818      	bhi.n	8006d1a <STM32_PLC_LCD_Call_Keyboard_Logic+0x72>
				if (k >= 0 && k < 16) {
 8006ce8:	2c0f      	cmp	r4, #15
 8006cea:	d80a      	bhi.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 0 + 32 + 5*keyboard_page;
 8006cec:	f104 0320 	add.w	r3, r4, #32
 8006cf0:	eb0d 0203 	add.w	r2, sp, r3
 8006cf4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006cf8:	3320      	adds	r3, #32
					k++;
 8006cfa:	3401      	adds	r4, #1
					text[k] = 1 + 32 + 5*keyboard_page;
 8006cfc:	f802 3c14 	strb.w	r3, [r2, #-20]
					k++;
 8006d00:	b2e4      	uxtb	r4, r4
			ILI9341_print_text(text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 8006d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d06:	2203      	movs	r2, #3
 8006d08:	e9cd 3200 	strd	r3, r2, [sp]
 8006d0c:	210f      	movs	r1, #15
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2219      	movs	r2, #25
 8006d12:	a803      	add	r0, sp, #12
 8006d14:	f7ff fc72 	bl	80065fc <ILI9341_print_text>
 8006d18:	e7d3      	b.n	8006cc2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1a>
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
 8006d1a:	f1a1 0c51 	sub.w	ip, r1, #81	; 0x51
 8006d1e:	fa1f fc8c 	uxth.w	ip, ip
 8006d22:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006d26:	d80d      	bhi.n	8006d44 <STM32_PLC_LCD_Call_Keyboard_Logic+0x9c>
 8006d28:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 8006d2c:	2a28      	cmp	r2, #40	; 0x28
 8006d2e:	d809      	bhi.n	8006d44 <STM32_PLC_LCD_Call_Keyboard_Logic+0x9c>
				if (k < 16) {
 8006d30:	2c0f      	cmp	r4, #15
 8006d32:	d8e6      	bhi.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 1 + 32 + 5*keyboard_page;
 8006d34:	f104 0320 	add.w	r3, r4, #32
 8006d38:	eb0d 0203 	add.w	r2, sp, r3
 8006d3c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006d40:	3321      	adds	r3, #33	; 0x21
 8006d42:	e7da      	b.n	8006cfa <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 139 && X <= 179 && Y >= 70 && Y <= 110) {
 8006d44:	f1a1 008b 	sub.w	r0, r1, #139	; 0x8b
 8006d48:	b280      	uxth	r0, r0
 8006d4a:	2828      	cmp	r0, #40	; 0x28
 8006d4c:	d80d      	bhi.n	8006d6a <STM32_PLC_LCD_Call_Keyboard_Logic+0xc2>
 8006d4e:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 8006d52:	2a28      	cmp	r2, #40	; 0x28
 8006d54:	d809      	bhi.n	8006d6a <STM32_PLC_LCD_Call_Keyboard_Logic+0xc2>
				if (k < 16) {
 8006d56:	2c0f      	cmp	r4, #15
 8006d58:	d8d3      	bhi.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 2 + 32 + 5*keyboard_page;
 8006d5a:	f104 0320 	add.w	r3, r4, #32
 8006d5e:	eb0d 0203 	add.w	r2, sp, r3
 8006d62:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006d66:	3322      	adds	r3, #34	; 0x22
 8006d68:	e7c7      	b.n	8006cfa <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 197 && X <= 237 && Y >= 70 && Y <= 110) {
 8006d6a:	f1a1 02c5 	sub.w	r2, r1, #197	; 0xc5
 8006d6e:	b292      	uxth	r2, r2
 8006d70:	2a28      	cmp	r2, #40	; 0x28
 8006d72:	d80e      	bhi.n	8006d92 <STM32_PLC_LCD_Call_Keyboard_Logic+0xea>
 8006d74:	f1a3 0846 	sub.w	r8, r3, #70	; 0x46
 8006d78:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8006d7c:	d809      	bhi.n	8006d92 <STM32_PLC_LCD_Call_Keyboard_Logic+0xea>
				if (k < 16) {
 8006d7e:	2c0f      	cmp	r4, #15
 8006d80:	d8bf      	bhi.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 3 + 32 + 5*keyboard_page;
 8006d82:	f104 0320 	add.w	r3, r4, #32
 8006d86:	eb0d 0203 	add.w	r2, sp, r3
 8006d8a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006d8e:	3323      	adds	r3, #35	; 0x23
 8006d90:	e7b3      	b.n	8006cfa <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 255 && X <= 295 && Y >= 70 && Y <= 110) {
 8006d92:	39ff      	subs	r1, #255	; 0xff
 8006d94:	b289      	uxth	r1, r1
 8006d96:	2928      	cmp	r1, #40	; 0x28
 8006d98:	d80e      	bhi.n	8006db8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x110>
 8006d9a:	f1a3 0846 	sub.w	r8, r3, #70	; 0x46
 8006d9e:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8006da2:	d809      	bhi.n	8006db8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x110>
				if (k < 16) {
 8006da4:	2c0f      	cmp	r4, #15
 8006da6:	d8ac      	bhi.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 4 + 32 + 5*keyboard_page;
 8006da8:	f104 0320 	add.w	r3, r4, #32
 8006dac:	eb0d 0203 	add.w	r2, sp, r3
 8006db0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006db4:	3324      	adds	r3, #36	; 0x24
 8006db6:	e7a0      	b.n	8006cfa <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 23 && X <= 63 && Y >= 125 && Y <= 165) {
 8006db8:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8006dbc:	d80f      	bhi.n	8006dde <STM32_PLC_LCD_Call_Keyboard_Logic+0x136>
 8006dbe:	2b7c      	cmp	r3, #124	; 0x7c
 8006dc0:	f240 80ac 	bls.w	8006f1c <STM32_PLC_LCD_Call_Keyboard_Logic+0x274>
 8006dc4:	2ba5      	cmp	r3, #165	; 0xa5
 8006dc6:	f200 809e 	bhi.w	8006f06 <STM32_PLC_LCD_Call_Keyboard_Logic+0x25e>
				if (k < 16) {
 8006dca:	2c0f      	cmp	r4, #15
 8006dcc:	d899      	bhi.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 0 + 5 + 32 + 5*keyboard_page;
 8006dce:	f104 0320 	add.w	r3, r4, #32
 8006dd2:	eb0d 0203 	add.w	r2, sp, r3
 8006dd6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006dda:	3325      	adds	r3, #37	; 0x25
 8006ddc:	e78d      	b.n	8006cfa <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8006dde:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006de2:	d80e      	bhi.n	8006e02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x15a>
 8006de4:	2b7c      	cmp	r3, #124	; 0x7c
 8006de6:	d97a      	bls.n	8006ede <STM32_PLC_LCD_Call_Keyboard_Logic+0x236>
 8006de8:	2ba5      	cmp	r3, #165	; 0xa5
 8006dea:	f200 80bc 	bhi.w	8006f66 <STM32_PLC_LCD_Call_Keyboard_Logic+0x2be>
				if (k < 16) {
 8006dee:	2c0f      	cmp	r4, #15
 8006df0:	d887      	bhi.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 1 + 5 + 32 + 5*keyboard_page;
 8006df2:	f104 0320 	add.w	r3, r4, #32
 8006df6:	eb0d 0203 	add.w	r2, sp, r3
 8006dfa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006dfe:	3326      	adds	r3, #38	; 0x26
 8006e00:	e77b      	b.n	8006cfa <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006e02:	2828      	cmp	r0, #40	; 0x28
 8006e04:	d86d      	bhi.n	8006ee2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x23a>
 8006e06:	2b7c      	cmp	r3, #124	; 0x7c
 8006e08:	f240 808d 	bls.w	8006f26 <STM32_PLC_LCD_Call_Keyboard_Logic+0x27e>
 8006e0c:	2ba5      	cmp	r3, #165	; 0xa5
 8006e0e:	d828      	bhi.n	8006e62 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1ba>
				if (k < 16) {
 8006e10:	2c0f      	cmp	r4, #15
 8006e12:	f63f af76 	bhi.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 2 + 5 + 32 + 5*keyboard_page;
 8006e16:	f104 0320 	add.w	r3, r4, #32
 8006e1a:	eb0d 0203 	add.w	r2, sp, r3
 8006e1e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006e22:	3327      	adds	r3, #39	; 0x27
 8006e24:	e769      	b.n	8006cfa <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8006e26:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8006e2a:	d80c      	bhi.n	8006e46 <STM32_PLC_LCD_Call_Keyboard_Logic+0x19e>
 8006e2c:	2bb3      	cmp	r3, #179	; 0xb3
 8006e2e:	d936      	bls.n	8006e9e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1f6>
 8006e30:	2bdc      	cmp	r3, #220	; 0xdc
 8006e32:	d87b      	bhi.n	8006f2c <STM32_PLC_LCD_Call_Keyboard_Logic+0x284>
				if(keyboard_page > 0){
 8006e34:	2d00      	cmp	r5, #0
 8006e36:	f43f af64 	beq.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					keyboard_page--;
 8006e3a:	3d01      	subs	r5, #1
					keyboard_page++;
 8006e3c:	b2ed      	uxtb	r5, r5
					shift_keyboard(keyboard_page);
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f7ff fefc 	bl	8006c3c <shift_keyboard>
 8006e44:	e75d      	b.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8006e46:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006e4a:	d808      	bhi.n	8006e5e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1b6>
 8006e4c:	2bb3      	cmp	r3, #179	; 0xb3
 8006e4e:	d929      	bls.n	8006ea4 <STM32_PLC_LCD_Call_Keyboard_Logic+0x1fc>
 8006e50:	2bdc      	cmp	r3, #220	; 0xdc
 8006e52:	d86b      	bhi.n	8006f2c <STM32_PLC_LCD_Call_Keyboard_Logic+0x284>
				if(keyboard_page < 17){
 8006e54:	2d10      	cmp	r5, #16
 8006e56:	f63f af54 	bhi.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					keyboard_page++;
 8006e5a:	3501      	adds	r5, #1
 8006e5c:	e7ee      	b.n	8006e3c <STM32_PLC_LCD_Call_Keyboard_Logic+0x194>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8006e5e:	2828      	cmp	r0, #40	; 0x28
 8006e60:	d815      	bhi.n	8006e8e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1e6>
 8006e62:	2bb3      	cmp	r3, #179	; 0xb3
 8006e64:	d920      	bls.n	8006ea8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x200>
 8006e66:	2bdc      	cmp	r3, #220	; 0xdc
 8006e68:	f63f af4b 	bhi.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
				memset(text, 0, sizeof(text));
 8006e6c:	2211      	movs	r2, #17
 8006e6e:	2100      	movs	r1, #0
 8006e70:	a803      	add	r0, sp, #12
 8006e72:	f007 fd4b 	bl	800e90c <memset>
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8006e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8006e80:	2332      	movs	r3, #50	; 0x32
 8006e82:	2118      	movs	r1, #24
 8006e84:	200c      	movs	r0, #12
 8006e86:	f7ff fa8b 	bl	80063a0 <ILI9341_fill_rect>
				k = 0;
 8006e8a:	2400      	movs	r4, #0
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 8006e8c:	e739      	b.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8006e8e:	2a28      	cmp	r2, #40	; 0x28
 8006e90:	d80d      	bhi.n	8006eae <STM32_PLC_LCD_Call_Keyboard_Logic+0x206>
 8006e92:	3bb4      	subs	r3, #180	; 0xb4
 8006e94:	2b28      	cmp	r3, #40	; 0x28
 8006e96:	f63f af34 	bhi.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
				return 0;
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	e01c      	b.n	8006ed8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x230>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8006e9e:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006ea2:	d801      	bhi.n	8006ea8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x200>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8006ea4:	2828      	cmp	r0, #40	; 0x28
 8006ea6:	d8f2      	bhi.n	8006e8e <STM32_PLC_LCD_Call_Keyboard_Logic+0x1e6>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8006ea8:	2a28      	cmp	r2, #40	; 0x28
 8006eaa:	f67f af2a 	bls.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
			} else if (X >= 255 && X <= 295 && Y >= 180 && Y <= 220) {
 8006eae:	2928      	cmp	r1, #40	; 0x28
 8006eb0:	f63f af27 	bhi.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
 8006eb4:	3bb4      	subs	r3, #180	; 0xb4
 8006eb6:	2b28      	cmp	r3, #40	; 0x28
 8006eb8:	f63f af23 	bhi.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
				memcpy(word, text, 17);
 8006ebc:	aa03      	add	r2, sp, #12
 8006ebe:	ac07      	add	r4, sp, #28
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	cb03      	ldmia	r3!, {r0, r1}
 8006ec4:	42a3      	cmp	r3, r4
 8006ec6:	6030      	str	r0, [r6, #0]
 8006ec8:	6071      	str	r1, [r6, #4]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f106 0608 	add.w	r6, r6, #8
 8006ed0:	d1f6      	bne.n	8006ec0 <STM32_PLC_LCD_Call_Keyboard_Logic+0x218>
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	7033      	strb	r3, [r6, #0]
				return 1;
 8006ed6:	2001      	movs	r0, #1
}
 8006ed8:	b008      	add	sp, #32
 8006eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006ede:	2828      	cmp	r0, #40	; 0x28
 8006ee0:	d92a      	bls.n	8006f38 <STM32_PLC_LCD_Call_Keyboard_Logic+0x290>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8006ee2:	2a28      	cmp	r2, #40	; 0x28
 8006ee4:	d82b      	bhi.n	8006f3e <STM32_PLC_LCD_Call_Keyboard_Logic+0x296>
 8006ee6:	f1a3 087d 	sub.w	r8, r3, #125	; 0x7d
 8006eea:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8006eee:	d89a      	bhi.n	8006e26 <STM32_PLC_LCD_Call_Keyboard_Logic+0x17e>
				if (k < 16) {
 8006ef0:	2c0f      	cmp	r4, #15
 8006ef2:	f63f af06 	bhi.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 3 + 5 + 32 + 5*keyboard_page;
 8006ef6:	f104 0320 	add.w	r3, r4, #32
 8006efa:	eb0d 0203 	add.w	r2, sp, r3
 8006efe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006f02:	3328      	adds	r3, #40	; 0x28
 8006f04:	e6f9      	b.n	8006cfa <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8006f06:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006f0a:	d913      	bls.n	8006f34 <STM32_PLC_LCD_Call_Keyboard_Logic+0x28c>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006f0c:	2828      	cmp	r0, #40	; 0x28
 8006f0e:	d92d      	bls.n	8006f6c <STM32_PLC_LCD_Call_Keyboard_Logic+0x2c4>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8006f10:	2a28      	cmp	r2, #40	; 0x28
 8006f12:	d814      	bhi.n	8006f3e <STM32_PLC_LCD_Call_Keyboard_Logic+0x296>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8006f14:	2bb3      	cmp	r3, #179	; 0xb3
 8006f16:	f67f aef4 	bls.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
 8006f1a:	e789      	b.n	8006e30 <STM32_PLC_LCD_Call_Keyboard_Logic+0x188>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8006f1c:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8006f20:	d9dd      	bls.n	8006ede <STM32_PLC_LCD_Call_Keyboard_Logic+0x236>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006f22:	2828      	cmp	r0, #40	; 0x28
 8006f24:	d8dd      	bhi.n	8006ee2 <STM32_PLC_LCD_Call_Keyboard_Logic+0x23a>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8006f26:	2a28      	cmp	r2, #40	; 0x28
 8006f28:	d809      	bhi.n	8006f3e <STM32_PLC_LCD_Call_Keyboard_Logic+0x296>
 8006f2a:	e6ea      	b.n	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8006f2c:	2828      	cmp	r0, #40	; 0x28
 8006f2e:	f67f aee8 	bls.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
 8006f32:	e7b9      	b.n	8006ea8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x200>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006f34:	2828      	cmp	r0, #40	; 0x28
 8006f36:	d919      	bls.n	8006f6c <STM32_PLC_LCD_Call_Keyboard_Logic+0x2c4>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8006f38:	2a28      	cmp	r2, #40	; 0x28
 8006f3a:	f67f af74 	bls.w	8006e26 <STM32_PLC_LCD_Call_Keyboard_Logic+0x17e>
			} else if (X >= 255 && X <= 295 && Y >= 125 && Y <= 165) {
 8006f3e:	2928      	cmp	r1, #40	; 0x28
 8006f40:	f63f af71 	bhi.w	8006e26 <STM32_PLC_LCD_Call_Keyboard_Logic+0x17e>
 8006f44:	f1a3 087d 	sub.w	r8, r3, #125	; 0x7d
 8006f48:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 8006f4c:	f63f af6b 	bhi.w	8006e26 <STM32_PLC_LCD_Call_Keyboard_Logic+0x17e>
				if (k < 16) {
 8006f50:	2c0f      	cmp	r4, #15
 8006f52:	f63f aed6 	bhi.w	8006d02 <STM32_PLC_LCD_Call_Keyboard_Logic+0x5a>
					text[k] = 4 + 5 + 32 + 5*keyboard_page;
 8006f56:	f104 0320 	add.w	r3, r4, #32
 8006f5a:	eb0d 0203 	add.w	r2, sp, r3
 8006f5e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8006f62:	3329      	adds	r3, #41	; 0x29
 8006f64:	e6c9      	b.n	8006cfa <STM32_PLC_LCD_Call_Keyboard_Logic+0x52>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8006f66:	2828      	cmp	r0, #40	; 0x28
 8006f68:	d8e6      	bhi.n	8006f38 <STM32_PLC_LCD_Call_Keyboard_Logic+0x290>
 8006f6a:	e76f      	b.n	8006e4c <STM32_PLC_LCD_Call_Keyboard_Logic+0x1a4>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8006f6c:	2bb3      	cmp	r3, #179	; 0xb3
 8006f6e:	f63f af5f 	bhi.w	8006e30 <STM32_PLC_LCD_Call_Keyboard_Logic+0x188>
 8006f72:	e799      	b.n	8006ea8 <STM32_PLC_LCD_Call_Keyboard_Logic+0x200>
 8006f74:	20002728 	.word	0x20002728

08006f78 <STM32_PLC_LCD_Call_Main_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

void STM32_PLC_LCD_Call_Main_Logic(uint8_t *frame_id, J1939 *j1939) {
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	460d      	mov	r5, r1
	if (TSC2046_isPressed()) {
 8006f7e:	f7ff fd43 	bl	8006a08 <TSC2046_isPressed>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f000 80c2 	beq.w	800710c <STM32_PLC_LCD_Call_Main_Logic+0x194>
		TSC2046_GetTouchData();
 8006f88:	f7ff fcd6 	bl	8006938 <TSC2046_GetTouchData>
		uint16_t X = lcd.myTsData.X;
 8006f8c:	4a60      	ldr	r2, [pc, #384]	; (8007110 <STM32_PLC_LCD_Call_Main_Logic+0x198>)
		uint16_t Y = lcd.myTsData.Y;
		/* Check which button we are pressing on */
		if (X >= 8 && X <= 37 && Y >= 8 && Y <= 37) {            /* First icon */
 8006f8e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8006f90:	3b08      	subs	r3, #8
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2b1d      	cmp	r3, #29
 8006f96:	f200 80b9 	bhi.w	800710c <STM32_PLC_LCD_Call_Main_Logic+0x194>
		uint16_t Y = lcd.myTsData.Y;
 8006f9a:	8e53      	ldrh	r3, [r2, #50]	; 0x32
		if (X >= 8 && X <= 37 && Y >= 8 && Y <= 37) {            /* First icon */
 8006f9c:	f1a3 0208 	sub.w	r2, r3, #8
 8006fa0:	2a1d      	cmp	r2, #29
 8006fa2:	d830      	bhi.n	8007006 <STM32_PLC_LCD_Call_Main_Logic+0x8e>
			switch (*frame_id) {
 8006fa4:	7823      	ldrb	r3, [r4, #0]
 8006fa6:	2b06      	cmp	r3, #6
 8006fa8:	f200 80b0 	bhi.w	800710c <STM32_PLC_LCD_Call_Main_Logic+0x194>
 8006fac:	e8df f003 	tbb	[pc, r3]
 8006fb0:	140e0904 	.word	0x140e0904
 8006fb4:	201a      	.short	0x201a
 8006fb6:	26          	.byte	0x26
 8006fb7:	00          	.byte	0x00
			case 0: /* A */
				STM32_PLC_LCD_Show_Measurement_And_Time_Frame(frame_id);
 8006fb8:	4620      	mov	r0, r4
			else
				*frame_id = 0; /* Go to start frame */
			STM32_PLC_LCD_Show_Main_Frame(frame_id, true);
		}
	}
}
 8006fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Measurement_And_Time_Frame(frame_id);
 8006fbe:	f7fd b8a9 	b.w	8004114 <STM32_PLC_LCD_Show_Measurement_And_Time_Frame>
				STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame(frame_id);
 8006fc2:	4620      	mov	r0, r4
}
 8006fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame(frame_id);
 8006fc8:	f7fb bf08 	b.w	8002ddc <STM32_PLC_LCD_Show_Analog_Input_Calibration_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(j1939, frame_id);
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4628      	mov	r0, r5
}
 8006fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Request_Frame(j1939, frame_id);
 8006fd4:	f7fe bbde 	b.w	8005794 <STM32_PLC_LCD_Show_SAE_J1939_Request_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(j1939, frame_id);
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4628      	mov	r0, r5
}
 8006fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame(j1939, frame_id);
 8006fe0:	f7fd be82 	b.w	8004ce8 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM1_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(j1939, frame_id);
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4628      	mov	r0, r5
}
 8006fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame(j1939, frame_id);
 8006fec:	f7fd beac 	b.w	8004d48 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM2_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(j1939, frame_id);
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4628      	mov	r0, r5
}
 8006ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame(j1939, frame_id);
 8006ff8:	f7fe b838 	b.w	800506c <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Identifications_Frame>
				STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(frame_id);
 8006ffc:	4620      	mov	r0, r4
}
 8006ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame(frame_id);
 8007002:	f7fc ba67 	b.w	80034d4 <STM32_PLC_LCD_Show_Analog_Input_To_PWM_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 55 && Y <= 94) {    /* Second icon */
 8007006:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 800700a:	2a27      	cmp	r2, #39	; 0x27
 800700c:	d82f      	bhi.n	800706e <STM32_PLC_LCD_Call_Main_Logic+0xf6>
			switch (*frame_id) {
 800700e:	7823      	ldrb	r3, [r4, #0]
 8007010:	2b06      	cmp	r3, #6
 8007012:	d87b      	bhi.n	800710c <STM32_PLC_LCD_Call_Main_Logic+0x194>
 8007014:	e8df f003 	tbb	[pc, r3]
 8007018:	140e0904 	.word	0x140e0904
 800701c:	201a      	.short	0x201a
 800701e:	26          	.byte	0x26
 800701f:	00          	.byte	0x00
				STM32_PLC_LCD_Show_Analog_Gain_Frame(frame_id);
 8007020:	4620      	mov	r0, r4
}
 8007022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Gain_Frame(frame_id);
 8007026:	f7fb bd07 	b.w	8002a38 <STM32_PLC_LCD_Show_Analog_Gain_Frame>
				STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(frame_id);
 800702a:	4620      	mov	r0, r4
}
 800702c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame(frame_id);
 8007030:	f7fc bd7e 	b.w	8003b30 <STM32_PLC_LCD_Show_Encoder_Revolutions_Settings_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(j1939, frame_id);
 8007034:	4621      	mov	r1, r4
 8007036:	4628      	mov	r0, r5
}
 8007038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Address_Frame(j1939, frame_id);
 800703c:	f7fd b9b0 	b.w	80043a0 <STM32_PLC_LCD_Show_SAE_J1939_Address_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(j1939, frame_id);
 8007040:	4621      	mov	r1, r4
 8007042:	4628      	mov	r0, r5
}
 8007044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame(j1939, frame_id);
 8007048:	f7fd be5e 	b.w	8004d08 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_DM1_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(j1939, frame_id);
 800704c:	4621      	mov	r1, r4
 800704e:	4628      	mov	r0, r5
}
 8007050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame(j1939, frame_id);
 8007054:	f7fe baac 	b.w	80055b0 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_Name_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(j1939, frame_id);
 8007058:	4621      	mov	r1, r4
 800705a:	4628      	mov	r0, r5
}
 800705c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame(j1939, frame_id);
 8007060:	f7fe b928 	b.w	80052b4 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Identifications_Frame>
				STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(frame_id);
 8007064:	4620      	mov	r0, r4
}
 8007066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame(frame_id);
 800706a:	f7fb bfd3 	b.w	8003014 <STM32_PLC_LCD_Show_Analog_Input_To_Analog_Output_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 100 && Y <= 139) {  /* Third icon */
 800706e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007072:	2a27      	cmp	r2, #39	; 0x27
 8007074:	d82f      	bhi.n	80070d6 <STM32_PLC_LCD_Call_Main_Logic+0x15e>
			switch (*frame_id) {
 8007076:	7823      	ldrb	r3, [r4, #0]
 8007078:	2b06      	cmp	r3, #6
 800707a:	d847      	bhi.n	800710c <STM32_PLC_LCD_Call_Main_Logic+0x194>
 800707c:	e8df f003 	tbb	[pc, r3]
 8007080:	140e0904 	.word	0x140e0904
 8007084:	201a      	.short	0x201a
 8007086:	26          	.byte	0x26
 8007087:	00          	.byte	0x00
				STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(frame_id);
 8007088:	4620      	mov	r0, r4
}
 800708a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame(frame_id);
 800708e:	f7fd b8a5 	b.w	80041dc <STM32_PLC_LCD_Show_PWM_Frequency_Settings_Frame>
				STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(frame_id);
 8007092:	4620      	mov	r0, r4
}
 8007094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame(frame_id);
 8007098:	f7fc bb56 	b.w	8003748 <STM32_PLC_LCD_Show_Date_Time_Alarm_Settings_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(j1939, frame_id);
 800709c:	4621      	mov	r1, r4
 800709e:	4628      	mov	r0, r5
}
 80070a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame(j1939, frame_id);
 80070a4:	f7fd ba92 	b.w	80045cc <STM32_PLC_LCD_Show_SAE_J1939_Commanded_Address_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(j1939, frame_id);
 80070a8:	4621      	mov	r1, r4
 80070aa:	4628      	mov	r0, r5
}
 80070ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame(j1939, frame_id);
 80070b0:	f7fd be3a 	b.w	8004d28 <STM32_PLC_LCD_Show_SAE_J1939_This_ECU_DM2_Frame>
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(j1939, frame_id);
 80070b4:	4621      	mov	r1, r4
 80070b6:	4628      	mov	r0, r5
}
 80070b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame(j1939, frame_id);
 80070bc:	f7fe bb34 	b.w	8005728 <STM32_PLC_LCD_Show_SAE_J1939_Other_ECU_Name_Frame>
				STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(j1939, frame_id);
 80070c0:	4621      	mov	r1, r4
 80070c2:	4628      	mov	r0, r5
}
 80070c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame(j1939, frame_id);
 80070c8:	f7fc b89c 	b.w	8003204 <STM32_PLC_LCD_Show_Analog_Input_To_Auxiliary_Valve_Frame>
				STM32_PLC_LCD_Show_About_STM32_PLC_Frame(frame_id);
 80070cc:	4620      	mov	r0, r4
}
 80070ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				STM32_PLC_LCD_Show_About_STM32_PLC_Frame(frame_id);
 80070d2:	f7fb bbc1 	b.w	8002858 <STM32_PLC_LCD_Show_About_STM32_PLC_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 146 && Y <= 185) {  /* Fourth icon */
 80070d6:	f1a3 0292 	sub.w	r2, r3, #146	; 0x92
 80070da:	2a27      	cmp	r2, #39	; 0x27
 80070dc:	d80c      	bhi.n	80070f8 <STM32_PLC_LCD_Call_Main_Logic+0x180>
			if (*frame_id > 0)
 80070de:	7823      	ldrb	r3, [r4, #0]
 80070e0:	b113      	cbz	r3, 80070e8 <STM32_PLC_LCD_Call_Main_Logic+0x170>
				*frame_id = *frame_id - 1; /* Got to previous frame */
 80070e2:	3b01      	subs	r3, #1
				*frame_id = *frame_id + 1; /* Go to next frame */
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	e000      	b.n	80070ea <STM32_PLC_LCD_Call_Main_Logic+0x172>
				*frame_id = 6; /* Go to last frame */
 80070e8:	2306      	movs	r3, #6
 80070ea:	7023      	strb	r3, [r4, #0]
			STM32_PLC_LCD_Show_Main_Frame(frame_id, true);
 80070ec:	4620      	mov	r0, r4
 80070ee:	2101      	movs	r1, #1
}
 80070f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			STM32_PLC_LCD_Show_Main_Frame(frame_id, true);
 80070f4:	f7fc be12 	b.w	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
		} else if (X >= 8 && X <= 37 && Y >= 193 && Y <= 232) {  /* Fifth icon */
 80070f8:	3bc1      	subs	r3, #193	; 0xc1
 80070fa:	2b27      	cmp	r3, #39	; 0x27
 80070fc:	d806      	bhi.n	800710c <STM32_PLC_LCD_Call_Main_Logic+0x194>
			if (*frame_id < 6)
 80070fe:	7823      	ldrb	r3, [r4, #0]
 8007100:	2b05      	cmp	r3, #5
 8007102:	d801      	bhi.n	8007108 <STM32_PLC_LCD_Call_Main_Logic+0x190>
				*frame_id = *frame_id + 1; /* Go to next frame */
 8007104:	3301      	adds	r3, #1
 8007106:	e7ed      	b.n	80070e4 <STM32_PLC_LCD_Call_Main_Logic+0x16c>
				*frame_id = 0; /* Go to start frame */
 8007108:	2300      	movs	r3, #0
 800710a:	e7ee      	b.n	80070ea <STM32_PLC_LCD_Call_Main_Logic+0x172>
}
 800710c:	bd38      	pop	{r3, r4, r5, pc}
 800710e:	bf00      	nop
 8007110:	20002728 	.word	0x20002728

08007114 <STM32_PLC_LCD_Call_Numpad_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Call_Numpad_Logic(bool decimalbutton_show, bool minusbutton_show, float *number_value) {
 8007114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool haveDot = false;
	char text[17] = "";
 8007118:	2400      	movs	r4, #0
uint8_t STM32_PLC_LCD_Call_Numpad_Logic(bool decimalbutton_show, bool minusbutton_show, float *number_value) {
 800711a:	b088      	sub	sp, #32
 800711c:	4606      	mov	r6, r0
 800711e:	4688      	mov	r8, r1
 8007120:	4691      	mov	r9, r2
	char text[17] = "";
 8007122:	4621      	mov	r1, r4
 8007124:	220d      	movs	r2, #13
 8007126:	a804      	add	r0, sp, #16
 8007128:	9403      	str	r4, [sp, #12]
 800712a:	f007 fbef 	bl	800e90c <memset>
	uint8_t k = 0;
	while (1) {
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 800712e:	f8df a288 	ldr.w	sl, [pc, #648]	; 80073b8 <STM32_PLC_LCD_Call_Numpad_Logic+0x2a4>
	bool haveDot = false;
 8007132:	4627      	mov	r7, r4
		if (TSC2046_isPressed()) {
 8007134:	f7ff fc68 	bl	8006a08 <TSC2046_isPressed>
 8007138:	2800      	cmp	r0, #0
 800713a:	d0fb      	beq.n	8007134 <STM32_PLC_LCD_Call_Numpad_Logic+0x20>
			TSC2046_GetTouchData();
 800713c:	f7ff fbfc 	bl	8006938 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8007140:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
			uint16_t Y = lcd.myTsData.Y;
 8007144:	f8ba 3032 	ldrh.w	r3, [sl, #50]	; 0x32
			if (X >= 23 && X <= 63 && Y >= 70 && Y <= 110) {
 8007148:	f1a2 0c17 	sub.w	ip, r2, #23
 800714c:	fa1f fc8c 	uxth.w	ip, ip
 8007150:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8007154:	d819      	bhi.n	800718a <STM32_PLC_LCD_Call_Numpad_Logic+0x76>
 8007156:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
 800715a:	2928      	cmp	r1, #40	; 0x28
 800715c:	d815      	bhi.n	800718a <STM32_PLC_LCD_Call_Numpad_Logic+0x76>
				/* 0 */
				if (k >= 0 && k < 16) {
 800715e:	2c0f      	cmp	r4, #15
 8007160:	d807      	bhi.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '0';
 8007162:	f104 0320 	add.w	r3, r4, #32
 8007166:	446b      	add	r3, sp
 8007168:	2230      	movs	r2, #48	; 0x30
				}
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
				/* 1 */
				if (k < 16) {
					text[k] = '1';
					k++;
 800716a:	3401      	adds	r4, #1
					text[k] = '1';
 800716c:	f803 2c14 	strb.w	r2, [r3, #-20]
					k++;
 8007170:	b2e4      	uxtb	r4, r4
				/* OK */
				*number_value = atoff(text);
				return 1;
			}
			/* Display the selected number text */
			ILI9341_print_text(text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 8007172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007176:	2203      	movs	r2, #3
 8007178:	e9cd 3200 	strd	r3, r2, [sp]
 800717c:	210f      	movs	r1, #15
 800717e:	2300      	movs	r3, #0
 8007180:	2219      	movs	r2, #25
 8007182:	a803      	add	r0, sp, #12
 8007184:	f7ff fa3a 	bl	80065fc <ILI9341_print_text>
 8007188:	e7d4      	b.n	8007134 <STM32_PLC_LCD_Call_Numpad_Logic+0x20>
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
 800718a:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
 800718e:	b280      	uxth	r0, r0
 8007190:	2828      	cmp	r0, #40	; 0x28
 8007192:	d80a      	bhi.n	80071aa <STM32_PLC_LCD_Call_Numpad_Logic+0x96>
 8007194:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
 8007198:	2928      	cmp	r1, #40	; 0x28
 800719a:	d806      	bhi.n	80071aa <STM32_PLC_LCD_Call_Numpad_Logic+0x96>
				if (k < 16) {
 800719c:	2c0f      	cmp	r4, #15
 800719e:	d8e8      	bhi.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '1';
 80071a0:	f104 0320 	add.w	r3, r4, #32
 80071a4:	446b      	add	r3, sp
 80071a6:	2231      	movs	r2, #49	; 0x31
 80071a8:	e7df      	b.n	800716a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 139 && X <= 179 && Y >= 70 && Y <= 110) {
 80071aa:	f1a2 018b 	sub.w	r1, r2, #139	; 0x8b
 80071ae:	b289      	uxth	r1, r1
 80071b0:	2928      	cmp	r1, #40	; 0x28
 80071b2:	d80a      	bhi.n	80071ca <STM32_PLC_LCD_Call_Numpad_Logic+0xb6>
 80071b4:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 80071b8:	2d28      	cmp	r5, #40	; 0x28
 80071ba:	d806      	bhi.n	80071ca <STM32_PLC_LCD_Call_Numpad_Logic+0xb6>
				if (k < 16) {
 80071bc:	2c0f      	cmp	r4, #15
 80071be:	d8d8      	bhi.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '2';
 80071c0:	f104 0320 	add.w	r3, r4, #32
 80071c4:	446b      	add	r3, sp
 80071c6:	2232      	movs	r2, #50	; 0x32
 80071c8:	e7cf      	b.n	800716a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 197 && X <= 237 && Y >= 70 && Y <= 110) {
 80071ca:	f1a2 05c5 	sub.w	r5, r2, #197	; 0xc5
 80071ce:	b2ad      	uxth	r5, r5
 80071d0:	2d28      	cmp	r5, #40	; 0x28
 80071d2:	d80b      	bhi.n	80071ec <STM32_PLC_LCD_Call_Numpad_Logic+0xd8>
 80071d4:	f1a3 0e46 	sub.w	lr, r3, #70	; 0x46
 80071d8:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 80071dc:	d806      	bhi.n	80071ec <STM32_PLC_LCD_Call_Numpad_Logic+0xd8>
				if (k < 16) {
 80071de:	2c0f      	cmp	r4, #15
 80071e0:	d8c7      	bhi.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '3';
 80071e2:	f104 0320 	add.w	r3, r4, #32
 80071e6:	446b      	add	r3, sp
 80071e8:	2233      	movs	r2, #51	; 0x33
 80071ea:	e7be      	b.n	800716a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 255 && X <= 295 && Y >= 70 && Y <= 110) {
 80071ec:	3aff      	subs	r2, #255	; 0xff
 80071ee:	b292      	uxth	r2, r2
 80071f0:	2a28      	cmp	r2, #40	; 0x28
 80071f2:	d80b      	bhi.n	800720c <STM32_PLC_LCD_Call_Numpad_Logic+0xf8>
 80071f4:	f1a3 0e46 	sub.w	lr, r3, #70	; 0x46
 80071f8:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 80071fc:	d806      	bhi.n	800720c <STM32_PLC_LCD_Call_Numpad_Logic+0xf8>
				if (k < 16) {
 80071fe:	2c0f      	cmp	r4, #15
 8007200:	d8b7      	bhi.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '4';
 8007202:	f104 0320 	add.w	r3, r4, #32
 8007206:	446b      	add	r3, sp
 8007208:	2234      	movs	r2, #52	; 0x34
 800720a:	e7ae      	b.n	800716a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 23 && X <= 63 && Y >= 125 && Y <= 165) {
 800720c:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8007210:	d80c      	bhi.n	800722c <STM32_PLC_LCD_Call_Numpad_Logic+0x118>
 8007212:	2b7c      	cmp	r3, #124	; 0x7c
 8007214:	f240 80a5 	bls.w	8007362 <STM32_PLC_LCD_Call_Numpad_Logic+0x24e>
 8007218:	2ba5      	cmp	r3, #165	; 0xa5
 800721a:	f200 809b 	bhi.w	8007354 <STM32_PLC_LCD_Call_Numpad_Logic+0x240>
				if (k < 16) {
 800721e:	2c0f      	cmp	r4, #15
 8007220:	d8a7      	bhi.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '5';
 8007222:	f104 0320 	add.w	r3, r4, #32
 8007226:	446b      	add	r3, sp
 8007228:	2235      	movs	r2, #53	; 0x35
 800722a:	e79e      	b.n	800716a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 800722c:	2828      	cmp	r0, #40	; 0x28
 800722e:	d80b      	bhi.n	8007248 <STM32_PLC_LCD_Call_Numpad_Logic+0x134>
 8007230:	2b7c      	cmp	r3, #124	; 0x7c
 8007232:	d97e      	bls.n	8007332 <STM32_PLC_LCD_Call_Numpad_Logic+0x21e>
 8007234:	2ba5      	cmp	r3, #165	; 0xa5
 8007236:	f200 80b5 	bhi.w	80073a4 <STM32_PLC_LCD_Call_Numpad_Logic+0x290>
				if (k < 16) {
 800723a:	2c0f      	cmp	r4, #15
 800723c:	d899      	bhi.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '6';
 800723e:	f104 0320 	add.w	r3, r4, #32
 8007242:	446b      	add	r3, sp
 8007244:	2236      	movs	r2, #54	; 0x36
 8007246:	e790      	b.n	800716a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007248:	2928      	cmp	r1, #40	; 0x28
 800724a:	d874      	bhi.n	8007336 <STM32_PLC_LCD_Call_Numpad_Logic+0x222>
 800724c:	2b7c      	cmp	r3, #124	; 0x7c
 800724e:	f240 808c 	bls.w	800736a <STM32_PLC_LCD_Call_Numpad_Logic+0x256>
 8007252:	2ba5      	cmp	r3, #165	; 0xa5
 8007254:	d837      	bhi.n	80072c6 <STM32_PLC_LCD_Call_Numpad_Logic+0x1b2>
				if (k < 16) {
 8007256:	2c0f      	cmp	r4, #15
 8007258:	d88b      	bhi.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '7';
 800725a:	f104 0320 	add.w	r3, r4, #32
 800725e:	446b      	add	r3, sp
 8007260:	2237      	movs	r2, #55	; 0x37
 8007262:	e782      	b.n	800716a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8007264:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8007268:	d80f      	bhi.n	800728a <STM32_PLC_LCD_Call_Numpad_Logic+0x176>
 800726a:	2bb3      	cmp	r3, #179	; 0xb3
 800726c:	d94a      	bls.n	8007304 <STM32_PLC_LCD_Call_Numpad_Logic+0x1f0>
 800726e:	2bdc      	cmp	r3, #220	; 0xdc
 8007270:	d87e      	bhi.n	8007370 <STM32_PLC_LCD_Call_Numpad_Logic+0x25c>
				if (minusbutton_show == true && k == 0) {
 8007272:	f1b8 0f00 	cmp.w	r8, #0
 8007276:	f43f af7c 	beq.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 800727a:	2c00      	cmp	r4, #0
 800727c:	f47f af79 	bne.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '-';
 8007280:	232d      	movs	r3, #45	; 0x2d
 8007282:	f88d 300c 	strb.w	r3, [sp, #12]
					k++;
 8007286:	2401      	movs	r4, #1
 8007288:	e773      	b.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 800728a:	2828      	cmp	r0, #40	; 0x28
 800728c:	d819      	bhi.n	80072c2 <STM32_PLC_LCD_Call_Numpad_Logic+0x1ae>
 800728e:	2bb3      	cmp	r3, #179	; 0xb3
 8007290:	d93a      	bls.n	8007308 <STM32_PLC_LCD_Call_Numpad_Logic+0x1f4>
 8007292:	2bdc      	cmp	r3, #220	; 0xdc
 8007294:	d86c      	bhi.n	8007370 <STM32_PLC_LCD_Call_Numpad_Logic+0x25c>
				if (decimalbutton_show == true && k > 0 && haveDot == false && k < 16) {
 8007296:	2e00      	cmp	r6, #0
 8007298:	f43f af6b 	beq.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 800729c:	2c00      	cmp	r4, #0
 800729e:	f43f af68 	beq.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 80072a2:	2f00      	cmp	r7, #0
 80072a4:	f47f af65 	bne.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 80072a8:	2c0f      	cmp	r4, #15
 80072aa:	f63f af62 	bhi.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '.';
 80072ae:	f104 0320 	add.w	r3, r4, #32
 80072b2:	446b      	add	r3, sp
 80072b4:	222e      	movs	r2, #46	; 0x2e
					k++;
 80072b6:	3401      	adds	r4, #1
					text[k] = '.';
 80072b8:	f803 2c14 	strb.w	r2, [r3, #-20]
					k++;
 80072bc:	b2e4      	uxtb	r4, r4
					haveDot = true;
 80072be:	4637      	mov	r7, r6
 80072c0:	e757      	b.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 80072c2:	2928      	cmp	r1, #40	; 0x28
 80072c4:	d816      	bhi.n	80072f4 <STM32_PLC_LCD_Call_Numpad_Logic+0x1e0>
 80072c6:	2bb3      	cmp	r3, #179	; 0xb3
 80072c8:	d920      	bls.n	800730c <STM32_PLC_LCD_Call_Numpad_Logic+0x1f8>
 80072ca:	2bdc      	cmp	r3, #220	; 0xdc
 80072cc:	f63f af51 	bhi.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
				memset(text, 0, sizeof(text));
 80072d0:	2211      	movs	r2, #17
 80072d2:	2100      	movs	r1, #0
 80072d4:	a803      	add	r0, sp, #12
 80072d6:	f007 fb19 	bl	800e90c <memset>
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 80072da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	f44f 729a 	mov.w	r2, #308	; 0x134
 80072e4:	2332      	movs	r3, #50	; 0x32
 80072e6:	2118      	movs	r1, #24
 80072e8:	200c      	movs	r0, #12
				k = 0;
 80072ea:	2400      	movs	r4, #0
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 80072ec:	f7ff f858 	bl	80063a0 <ILI9341_fill_rect>
				haveDot = false;
 80072f0:	4627      	mov	r7, r4
				ILI9341_fill_rect(12, 24, 308, 50, COLOR_WHITE); /* Clear white space above */
 80072f2:	e73e      	b.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 80072f4:	2d28      	cmp	r5, #40	; 0x28
 80072f6:	d80c      	bhi.n	8007312 <STM32_PLC_LCD_Call_Numpad_Logic+0x1fe>
 80072f8:	3bb4      	subs	r3, #180	; 0xb4
 80072fa:	2b28      	cmp	r3, #40	; 0x28
 80072fc:	f63f af39 	bhi.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
				return 0;
 8007300:	2000      	movs	r0, #0
 8007302:	e013      	b.n	800732c <STM32_PLC_LCD_Call_Numpad_Logic+0x218>
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 8007304:	2828      	cmp	r0, #40	; 0x28
 8007306:	d801      	bhi.n	800730c <STM32_PLC_LCD_Call_Numpad_Logic+0x1f8>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8007308:	2928      	cmp	r1, #40	; 0x28
 800730a:	d8f3      	bhi.n	80072f4 <STM32_PLC_LCD_Call_Numpad_Logic+0x1e0>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 800730c:	2d28      	cmp	r5, #40	; 0x28
 800730e:	f67f af30 	bls.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 255 && X <= 295 && Y >= 180 && Y <= 220) {
 8007312:	2a28      	cmp	r2, #40	; 0x28
 8007314:	f63f af2d 	bhi.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 8007318:	3bb4      	subs	r3, #180	; 0xb4
 800731a:	2b28      	cmp	r3, #40	; 0x28
 800731c:	f63f af29 	bhi.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
				*number_value = atoff(text);
 8007320:	a803      	add	r0, sp, #12
 8007322:	f007 fa9d 	bl	800e860 <atoff>
				return 1;
 8007326:	2001      	movs	r0, #1
				*number_value = atoff(text);
 8007328:	ed89 0a00 	vstr	s0, [r9]
		}
	}
}
 800732c:	b008      	add	sp, #32
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007332:	2928      	cmp	r1, #40	; 0x28
 8007334:	d922      	bls.n	800737c <STM32_PLC_LCD_Call_Numpad_Logic+0x268>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 8007336:	2d28      	cmp	r5, #40	; 0x28
 8007338:	d823      	bhi.n	8007382 <STM32_PLC_LCD_Call_Numpad_Logic+0x26e>
 800733a:	f1a3 0e7d 	sub.w	lr, r3, #125	; 0x7d
 800733e:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8007342:	d88f      	bhi.n	8007264 <STM32_PLC_LCD_Call_Numpad_Logic+0x150>
				if (k < 16) {
 8007344:	2c0f      	cmp	r4, #15
 8007346:	f63f af14 	bhi.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '8';
 800734a:	f104 0320 	add.w	r3, r4, #32
 800734e:	446b      	add	r3, sp
 8007350:	2238      	movs	r2, #56	; 0x38
 8007352:	e70a      	b.n	800716a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8007354:	2828      	cmp	r0, #40	; 0x28
 8007356:	d90f      	bls.n	8007378 <STM32_PLC_LCD_Call_Numpad_Logic+0x264>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007358:	2928      	cmp	r1, #40	; 0x28
 800735a:	d826      	bhi.n	80073aa <STM32_PLC_LCD_Call_Numpad_Logic+0x296>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 800735c:	2bb3      	cmp	r3, #179	; 0xb3
 800735e:	d886      	bhi.n	800726e <STM32_PLC_LCD_Call_Numpad_Logic+0x15a>
 8007360:	e7d4      	b.n	800730c <STM32_PLC_LCD_Call_Numpad_Logic+0x1f8>
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8007362:	2828      	cmp	r0, #40	; 0x28
 8007364:	d9e5      	bls.n	8007332 <STM32_PLC_LCD_Call_Numpad_Logic+0x21e>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007366:	2928      	cmp	r1, #40	; 0x28
 8007368:	d8e5      	bhi.n	8007336 <STM32_PLC_LCD_Call_Numpad_Logic+0x222>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 800736a:	2d28      	cmp	r5, #40	; 0x28
 800736c:	d809      	bhi.n	8007382 <STM32_PLC_LCD_Call_Numpad_Logic+0x26e>
 800736e:	e700      	b.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8007370:	2928      	cmp	r1, #40	; 0x28
 8007372:	f67f aefe 	bls.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 8007376:	e7c9      	b.n	800730c <STM32_PLC_LCD_Call_Numpad_Logic+0x1f8>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 8007378:	2928      	cmp	r1, #40	; 0x28
 800737a:	d9ef      	bls.n	800735c <STM32_PLC_LCD_Call_Numpad_Logic+0x248>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 800737c:	2d28      	cmp	r5, #40	; 0x28
 800737e:	f67f af71 	bls.w	8007264 <STM32_PLC_LCD_Call_Numpad_Logic+0x150>
			} else if (X >= 255 && X <= 295 && Y >= 125 && Y <= 165) {
 8007382:	2a28      	cmp	r2, #40	; 0x28
 8007384:	f63f af6e 	bhi.w	8007264 <STM32_PLC_LCD_Call_Numpad_Logic+0x150>
 8007388:	f1a3 0e7d 	sub.w	lr, r3, #125	; 0x7d
 800738c:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8007390:	f63f af68 	bhi.w	8007264 <STM32_PLC_LCD_Call_Numpad_Logic+0x150>
				if (k < 16) {
 8007394:	2c0f      	cmp	r4, #15
 8007396:	f63f aeec 	bhi.w	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
					text[k] = '9';
 800739a:	f104 0320 	add.w	r3, r4, #32
 800739e:	446b      	add	r3, sp
 80073a0:	2239      	movs	r2, #57	; 0x39
 80073a2:	e6e2      	b.n	800716a <STM32_PLC_LCD_Call_Numpad_Logic+0x56>
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 80073a4:	2928      	cmp	r1, #40	; 0x28
 80073a6:	d8e9      	bhi.n	800737c <STM32_PLC_LCD_Call_Numpad_Logic+0x268>
 80073a8:	e771      	b.n	800728e <STM32_PLC_LCD_Call_Numpad_Logic+0x17a>
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 80073aa:	2d28      	cmp	r5, #40	; 0x28
 80073ac:	d8e9      	bhi.n	8007382 <STM32_PLC_LCD_Call_Numpad_Logic+0x26e>
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 80073ae:	2bb3      	cmp	r3, #179	; 0xb3
 80073b0:	f63f af5d 	bhi.w	800726e <STM32_PLC_LCD_Call_Numpad_Logic+0x15a>
 80073b4:	e6dd      	b.n	8007172 <STM32_PLC_LCD_Call_Numpad_Logic+0x5e>
 80073b6:	bf00      	nop
 80073b8:	20002728 	.word	0x20002728

080073bc <STM32_PLC_LCD_Call_One_Button_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Call_One_Button_Logic(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80073bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while (1) {
		if (TSC2046_isPressed()) {
			TSC2046_GetTouchData();
			uint16_t X = lcd.myTsData.X;
 80073c0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800740c <STM32_PLC_LCD_Call_One_Button_Logic+0x50>
uint8_t STM32_PLC_LCD_Call_One_Button_Logic(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80073c4:	4604      	mov	r4, r0
 80073c6:	460d      	mov	r5, r1
 80073c8:	4616      	mov	r6, r2
 80073ca:	461f      	mov	r7, r3
		if (TSC2046_isPressed()) {
 80073cc:	f7ff fb1c 	bl	8006a08 <TSC2046_isPressed>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d0fb      	beq.n	80073cc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
			TSC2046_GetTouchData();
 80073d4:	f7ff fab0 	bl	8006938 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 80073d8:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
			uint16_t Y = lcd.myTsData.Y;
			if (X >= x1 && X <= x2 && Y >= y1 && Y <= y2) {
 80073dc:	42a3      	cmp	r3, r4
 80073de:	d3f5      	bcc.n	80073cc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
 80073e0:	42b3      	cmp	r3, r6
 80073e2:	d8f3      	bhi.n	80073cc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
			uint16_t Y = lcd.myTsData.Y;
 80073e4:	f8b8 3032 	ldrh.w	r3, [r8, #50]	; 0x32
			if (X >= x1 && X <= x2 && Y >= y1 && Y <= y2) {
 80073e8:	42ab      	cmp	r3, r5
 80073ea:	d3ef      	bcc.n	80073cc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
 80073ec:	42bb      	cmp	r3, r7
 80073ee:	d8ed      	bhi.n	80073cc <STM32_PLC_LCD_Call_One_Button_Logic+0x10>
				ILI9341_hollow_rect(x1, y1, x2, y2, COLOR_MAGENTA);
 80073f0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	b220      	sxth	r0, r4
 80073f8:	b23b      	sxth	r3, r7
 80073fa:	b232      	sxth	r2, r6
 80073fc:	b229      	sxth	r1, r5
 80073fe:	f7ff f863 	bl	80064c8 <ILI9341_hollow_rect>
				return 1; /* Button 1 */
			}
		}
	}
}
 8007402:	2001      	movs	r0, #1
 8007404:	b002      	add	sp, #8
 8007406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740a:	bf00      	nop
 800740c:	20002728 	.word	0x20002728

08007410 <STM32_PLC_LCD_Call_Two_Button_Logic>:
 */

#include "../Touch_screen.h"
#include "../Hardware/ILI9341.h"

uint8_t STM32_PLC_LCD_Call_Two_Button_Logic(uint16_t b1_x1, uint16_t b1_y1, uint16_t b1_x2, uint16_t b1_y2, uint16_t b2_x1, uint16_t b2_y1, uint16_t b2_x2, uint16_t b2_y2) {
 8007410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8007418:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800741c:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
 8007420:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8007424:	4604      	mov	r4, r0
 8007426:	468b      	mov	fp, r1
 8007428:	4615      	mov	r5, r2
 800742a:	461e      	mov	r6, r3
	while (1) {
		if (TSC2046_isPressed()) {
 800742c:	f7ff faec 	bl	8006a08 <TSC2046_isPressed>
 8007430:	2800      	cmp	r0, #0
 8007432:	d0fb      	beq.n	800742c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
			TSC2046_GetTouchData();
 8007434:	f7ff fa80 	bl	8006938 <TSC2046_GetTouchData>
			uint16_t X = lcd.myTsData.X;
 8007438:	4b17      	ldr	r3, [pc, #92]	; (8007498 <STM32_PLC_LCD_Call_Two_Button_Logic+0x88>)
 800743a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			uint16_t Y = lcd.myTsData.Y;
 800743c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
			if (X >= b1_x1 && X <= b1_x2 && Y >= b1_y1 && Y <= b1_y2) {
 800743e:	42a2      	cmp	r2, r4
 8007440:	d313      	bcc.n	800746a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
 8007442:	42aa      	cmp	r2, r5
 8007444:	d811      	bhi.n	800746a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
 8007446:	455b      	cmp	r3, fp
 8007448:	d30f      	bcc.n	800746a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
 800744a:	42b3      	cmp	r3, r6
 800744c:	d80d      	bhi.n	800746a <STM32_PLC_LCD_Call_Two_Button_Logic+0x5a>
				ILI9341_hollow_rect(b1_x1, b1_y1, b1_x2, b1_y2, COLOR_MAGENTA);
 800744e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	b220      	sxth	r0, r4
 8007456:	b233      	sxth	r3, r6
 8007458:	b22a      	sxth	r2, r5
 800745a:	fa0f f18b 	sxth.w	r1, fp
 800745e:	f7ff f833 	bl	80064c8 <ILI9341_hollow_rect>
				return 1; /* Button 1 */
 8007462:	2001      	movs	r0, #1
				ILI9341_hollow_rect(b2_x1, b2_y1, b2_x2, b2_y2, COLOR_MAGENTA);
				return 0; /* Button 2 */
			}
		}
	}
}
 8007464:	b003      	add	sp, #12
 8007466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (X >= b2_x1 && X <= b2_x2 && Y >= b2_y1 && Y <= b2_y2) {
 800746a:	42ba      	cmp	r2, r7
 800746c:	d3de      	bcc.n	800742c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
 800746e:	454a      	cmp	r2, r9
 8007470:	d8dc      	bhi.n	800742c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
 8007472:	4543      	cmp	r3, r8
 8007474:	d3da      	bcc.n	800742c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
 8007476:	4553      	cmp	r3, sl
 8007478:	d8d8      	bhi.n	800742c <STM32_PLC_LCD_Call_Two_Button_Logic+0x1c>
				ILI9341_hollow_rect(b2_x1, b2_y1, b2_x2, b2_y2, COLOR_MAGENTA);
 800747a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	b238      	sxth	r0, r7
 8007482:	fa0f f38a 	sxth.w	r3, sl
 8007486:	fa0f f289 	sxth.w	r2, r9
 800748a:	fa0f f188 	sxth.w	r1, r8
 800748e:	f7ff f81b 	bl	80064c8 <ILI9341_hollow_rect>
				return 0; /* Button 2 */
 8007492:	2000      	movs	r0, #0
 8007494:	e7e6      	b.n	8007464 <STM32_PLC_LCD_Call_Two_Button_Logic+0x54>
 8007496:	bf00      	nop
 8007498:	20002728 	.word	0x20002728

0800749c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800749c:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800749e:	b672      	cpsid	i
  __disable_irq();

  while (1)
  {
	  HAL_Delay(1000);
	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 80074a0:	4c09      	ldr	r4, [pc, #36]	; (80074c8 <Error_Handler+0x2c>)
	  HAL_Delay(1000);
 80074a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074a6:	f001 fb77 	bl	8008b98 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 80074aa:	2200      	movs	r2, #0
 80074ac:	2120      	movs	r1, #32
 80074ae:	4620      	mov	r0, r4
 80074b0:	f002 fa06 	bl	80098c0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80074b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074b8:	f001 fb6e 	bl	8008b98 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 80074bc:	2201      	movs	r2, #1
 80074be:	2120      	movs	r1, #32
 80074c0:	4620      	mov	r0, r4
 80074c2:	f002 f9fd 	bl	80098c0 <HAL_GPIO_WritePin>
  while (1)
 80074c6:	e7ec      	b.n	80074a2 <Error_Handler+0x6>
 80074c8:	48000800 	.word	0x48000800

080074cc <SystemClock_Config>:
{
 80074cc:	b530      	push	{r4, r5, lr}
 80074ce:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074d0:	2228      	movs	r2, #40	; 0x28
 80074d2:	2100      	movs	r1, #0
 80074d4:	a805      	add	r0, sp, #20
 80074d6:	f007 fa19 	bl	800e90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80074da:	2214      	movs	r2, #20
 80074dc:	2100      	movs	r1, #0
 80074de:	4668      	mov	r0, sp
 80074e0:	f007 fa14 	bl	800e90c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80074e4:	222c      	movs	r2, #44	; 0x2c
 80074e6:	2100      	movs	r1, #0
 80074e8:	a80f      	add	r0, sp, #60	; 0x3c
 80074ea:	f007 fa0f 	bl	800e90c <memset>
  HAL_PWR_EnableBkUpAccess();
 80074ee:	f003 f867 	bl	800a5c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80074f2:	4a23      	ldr	r2, [pc, #140]	; (8007580 <SystemClock_Config+0xb4>)
 80074f4:	6a13      	ldr	r3, [r2, #32]
 80074f6:	f023 0318 	bic.w	r3, r3, #24
 80074fa:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80074fc:	2005      	movs	r0, #5
 80074fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007502:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007504:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007508:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800750a:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800750e:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8007510:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007514:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007516:	e9cd 2407 	strd	r2, r4, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800751a:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800751c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800751e:	f003 f86d 	bl	800a5fc <HAL_RCC_OscConfig>
 8007522:	b108      	cbz	r0, 8007528 <SystemClock_Config+0x5c>
    Error_Handler();
 8007524:	f7ff ffba 	bl	800749c <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007528:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800752a:	e9cd 3500 	strd	r3, r5, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800752e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007532:	e9cd 5003 	strd	r5, r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007536:	9002      	str	r0, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007538:	4621      	mov	r1, r4
 800753a:	4668      	mov	r0, sp
 800753c:	f003 fb12 	bl	800ab64 <HAL_RCC_ClockConfig>
 8007540:	2800      	cmp	r0, #0
 8007542:	d1ef      	bne.n	8007524 <SystemClock_Config+0x58>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007548:	f44f 3242 	mov.w	r2, #198656	; 0x30800
 800754c:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8007550:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007554:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007556:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV8;
 8007558:	f04f 4318 	mov.w	r3, #2550136832	; 0x98000000
 800755c:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800755e:	f003 fbad 	bl	800acbc <HAL_RCCEx_PeriphCLKConfig>
 8007562:	2800      	cmp	r0, #0
 8007564:	d1de      	bne.n	8007524 <SystemClock_Config+0x58>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8007566:	f44f 7000 	mov.w	r0, #512	; 0x200
 800756a:	f003 f831 	bl	800a5d0 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 800756e:	4628      	mov	r0, r5
 8007570:	f003 f82e 	bl	800a5d0 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 8007574:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007578:	f003 f82a 	bl	800a5d0 <HAL_PWREx_EnableSDADC>
}
 800757c:	b01b      	add	sp, #108	; 0x6c
 800757e:	bd30      	pop	{r4, r5, pc}
 8007580:	40021000 	.word	0x40021000

08007584 <main>:
{
 8007584:	b580      	push	{r7, lr}
 8007586:	f5ad 5dbf 	sub.w	sp, sp, #6112	; 0x17e0
 800758a:	b084      	sub	sp, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800758c:	4e73      	ldr	r6, [pc, #460]	; (800775c <main+0x1d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800758e:	ad78      	add	r5, sp, #480	; 0x1e0
  HAL_Init();
 8007590:	f001 fade 	bl	8008b50 <HAL_Init>
  SystemClock_Config();
 8007594:	f7ff ff9a 	bl	80074cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007598:	2214      	movs	r2, #20
 800759a:	4628      	mov	r0, r5
 800759c:	2100      	movs	r1, #0
 800759e:	f007 f9b5 	bl	800e90c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80075a2:	6973      	ldr	r3, [r6, #20]
 80075a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a8:	6173      	str	r3, [r6, #20]
 80075aa:	6973      	ldr	r3, [r6, #20]
 80075ac:	aa08      	add	r2, sp, #32
 80075ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075b6:	6973      	ldr	r3, [r6, #20]
 80075b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075bc:	6173      	str	r3, [r6, #20]
 80075be:	6973      	ldr	r3, [r6, #20]
 80075c0:	aa09      	add	r2, sp, #36	; 0x24
 80075c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80075ca:	6973      	ldr	r3, [r6, #20]
 80075cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075d0:	6173      	str	r3, [r6, #20]
 80075d2:	6973      	ldr	r3, [r6, #20]
 80075d4:	aa0a      	add	r2, sp, #40	; 0x28
 80075d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80075de:	6973      	ldr	r3, [r6, #20]
 80075e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075e4:	6173      	str	r3, [r6, #20]
 80075e6:	6973      	ldr	r3, [r6, #20]
 80075e8:	aa0b      	add	r2, sp, #44	; 0x2c
 80075ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80075f2:	6973      	ldr	r3, [r6, #20]
 80075f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075f8:	6173      	str	r3, [r6, #20]
 80075fa:	6973      	ldr	r3, [r6, #20]
 80075fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007600:	930c      	str	r3, [sp, #48]	; 0x30
 8007602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007604:	6973      	ldr	r3, [r6, #20]
 8007606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800760a:	6173      	str	r3, [r6, #20]
 800760c:	6973      	ldr	r3, [r6, #20]
 800760e:	aa0d      	add	r2, sp, #52	; 0x34
 8007610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(LED_USB_GPIO_Port, LED_USB_Pin, GPIO_PIN_RESET);
 8007618:	2180      	movs	r1, #128	; 0x80
 800761a:	2200      	movs	r2, #0
 800761c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007620:	f002 f94e 	bl	80098c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 8007624:	484e      	ldr	r0, [pc, #312]	; (8007760 <main+0x1dc>)
 8007626:	2200      	movs	r2, #0
 8007628:	2130      	movs	r1, #48	; 0x30
 800762a:	f002 f949 	bl	80098c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, CS0_Pin|CS1_Pin|CS2_Pin, GPIO_PIN_RESET);
 800762e:	2200      	movs	r2, #0
 8007630:	484c      	ldr	r0, [pc, #304]	; (8007764 <main+0x1e0>)
 8007632:	21e0      	movs	r1, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007634:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOD, CS0_Pin|CS1_Pin|CS2_Pin, GPIO_PIN_RESET);
 8007636:	f002 f943 	bl	80098c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800763a:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800763c:	237c      	movs	r3, #124	; 0x7c
 800763e:	e9c5 3400 	strd	r3, r4, [r5]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007642:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007644:	4629      	mov	r1, r5
 8007646:	4848      	ldr	r0, [pc, #288]	; (8007768 <main+0x1e4>)
 8007648:	f002 f870 	bl	800972c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI5_Pin;
 800764c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007650:	e9c5 3400 	strd	r3, r4, [r5]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007654:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(DI5_GPIO_Port, &GPIO_InitStruct);
 8007656:	4629      	mov	r1, r5
 8007658:	4841      	ldr	r0, [pc, #260]	; (8007760 <main+0x1dc>)
 800765a:	f002 f867 	bl	800972c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI8_Pin|DI9_Pin;
 800765e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007662:	e9c5 3400 	strd	r3, r4, [r5]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007666:	60af      	str	r7, [r5, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007668:	4629      	mov	r1, r5
 800766a:	4840      	ldr	r0, [pc, #256]	; (800776c <main+0x1e8>)
 800766c:	f002 f85e 	bl	800972c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007670:	2701      	movs	r7, #1
 8007672:	2380      	movs	r3, #128	; 0x80
 8007674:	e9c5 3700 	strd	r3, r7, [r5]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007678:	e9c5 4402 	strd	r4, r4, [r5, #8]
  HAL_GPIO_Init(LED_USB_GPIO_Port, &GPIO_InitStruct);
 800767c:	4629      	mov	r1, r5
 800767e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_ERROR_Pin;
 8007682:	f04f 0830 	mov.w	r8, #48	; 0x30
  HAL_GPIO_Init(LED_USB_GPIO_Port, &GPIO_InitStruct);
 8007686:	f002 f851 	bl	800972c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800768a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800768e:	4629      	mov	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007690:	e9c5 8700 	strd	r8, r7, [r5]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007694:	4832      	ldr	r0, [pc, #200]	; (8007760 <main+0x1dc>)
 8007696:	f002 f849 	bl	800972c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS0_Pin|CS1_Pin|CS2_Pin;
 800769a:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800769c:	e9c5 3700 	strd	r3, r7, [r5]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076a0:	e9c5 4402 	strd	r4, r4, [r5, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076a4:	4629      	mov	r1, r5
 80076a6:	482f      	ldr	r0, [pc, #188]	; (8007764 <main+0x1e0>)
 80076a8:	f002 f840 	bl	800972c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076ac:	e9c5 8400 	strd	r8, r4, [r5]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b0:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076b2:	4629      	mov	r1, r5
 80076b4:	482e      	ldr	r0, [pc, #184]	; (8007770 <main+0x1ec>)
 80076b6:	f002 f839 	bl	800972c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80076ba:	6973      	ldr	r3, [r6, #20]
 80076bc:	433b      	orrs	r3, r7
 80076be:	6173      	str	r3, [r6, #20]
 80076c0:	6973      	ldr	r3, [r6, #20]
 80076c2:	aa06      	add	r2, sp, #24
 80076c4:	403b      	ands	r3, r7
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80076ca:	6973      	ldr	r3, [r6, #20]
 80076cc:	f043 0302 	orr.w	r3, r3, #2
 80076d0:	6173      	str	r3, [r6, #20]
 80076d2:	6973      	ldr	r3, [r6, #20]
 80076d4:	aa07      	add	r2, sp, #28
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80076de:	4621      	mov	r1, r4
 80076e0:	4622      	mov	r2, r4
 80076e2:	200b      	movs	r0, #11
 80076e4:	f001 fd78 	bl	80091d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80076e8:	200b      	movs	r0, #11
 80076ea:	f001 fda7 	bl	800923c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80076ee:	4622      	mov	r2, r4
 80076f0:	4621      	mov	r1, r4
 80076f2:	200d      	movs	r0, #13
 80076f4:	f001 fd70 	bl	80091d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80076f8:	200d      	movs	r0, #13
 80076fa:	f001 fd9f 	bl	800923c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80076fe:	4622      	mov	r2, r4
 8007700:	4621      	mov	r1, r4
 8007702:	200f      	movs	r0, #15
 8007704:	f001 fd68 	bl	80091d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007708:	200f      	movs	r0, #15
 800770a:	f001 fd97 	bl	800923c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800770e:	4622      	mov	r2, r4
 8007710:	4621      	mov	r1, r4
 8007712:	203a      	movs	r0, #58	; 0x3a
 8007714:	f001 fd60 	bl	80091d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8007718:	203a      	movs	r0, #58	; 0x3a
 800771a:	f001 fd8f 	bl	800923c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800771e:	4622      	mov	r2, r4
 8007720:	4621      	mov	r1, r4
 8007722:	203b      	movs	r0, #59	; 0x3b
 8007724:	f001 fd58 	bl	80091d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8007728:	203b      	movs	r0, #59	; 0x3b
 800772a:	f001 fd87 	bl	800923c <HAL_NVIC_EnableIRQ>
  DAC_ChannelConfTypeDef sConfig = {0};
 800772e:	ad1f      	add	r5, sp, #124	; 0x7c
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8007730:	4622      	mov	r2, r4
 8007732:	4621      	mov	r1, r4
 8007734:	203c      	movs	r0, #60	; 0x3c
 8007736:	f001 fd4f 	bl	80091d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800773a:	203c      	movs	r0, #60	; 0x3c
 800773c:	f001 fd7e 	bl	800923c <HAL_NVIC_EnableIRQ>
  DAC_ChannelConfTypeDef sConfig = {0};
 8007740:	e9c5 4400 	strd	r4, r4, [r5]
 8007744:	60ac      	str	r4, [r5, #8]
  hdac1.Instance = DAC1;
 8007746:	4c0b      	ldr	r4, [pc, #44]	; (8007774 <main+0x1f0>)
 8007748:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <main+0x1f4>)
 800774a:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800774c:	4620      	mov	r0, r4
 800774e:	f001 fd97 	bl	8009280 <HAL_DAC_Init>
 8007752:	4602      	mov	r2, r0
 8007754:	b190      	cbz	r0, 800777c <main+0x1f8>
    Error_Handler();
 8007756:	f7ff fea1 	bl	800749c <Error_Handler>
 800775a:	bf00      	nop
 800775c:	40021000 	.word	0x40021000
 8007760:	48000800 	.word	0x48000800
 8007764:	48000c00 	.word	0x48000c00
 8007768:	48001000 	.word	0x48001000
 800776c:	48001400 	.word	0x48001400
 8007770:	48000400 	.word	0x48000400
 8007774:	200020d4 	.word	0x200020d4
 8007778:	40007400 	.word	0x40007400
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800777c:	2604      	movs	r6, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800777e:	e9c5 6000 	strd	r6, r0, [r5]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007782:	a91f      	add	r1, sp, #124	; 0x7c
 8007784:	4620      	mov	r0, r4
 8007786:	f001 fdc6 	bl	8009316 <HAL_DAC_ConfigChannel>
 800778a:	2800      	cmp	r0, #0
 800778c:	d1e3      	bne.n	8007756 <main+0x1d2>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800778e:	2210      	movs	r2, #16
 8007790:	a91f      	add	r1, sp, #124	; 0x7c
 8007792:	4620      	mov	r0, r4
 8007794:	f001 fdbf 	bl	8009316 <HAL_DAC_ConfigChannel>
 8007798:	2800      	cmp	r0, #0
 800779a:	d1dc      	bne.n	8007756 <main+0x1d2>
  hdac2.Instance = DAC2;
 800779c:	4cd1      	ldr	r4, [pc, #836]	; (8007ae4 <main+0x560>)
 800779e:	4bd2      	ldr	r3, [pc, #840]	; (8007ae8 <main+0x564>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80077a0:	901e      	str	r0, [sp, #120]	; 0x78
 80077a2:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80077a6:	4620      	mov	r0, r4
  hdac2.Instance = DAC2;
 80077a8:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80077aa:	f001 fd69 	bl	8009280 <HAL_DAC_Init>
 80077ae:	4602      	mov	r2, r0
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d1d0      	bne.n	8007756 <main+0x1d2>
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80077b4:	e9cd 601c 	strd	r6, r0, [sp, #112]	; 0x70
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80077b8:	a91c      	add	r1, sp, #112	; 0x70
 80077ba:	4620      	mov	r0, r4
 80077bc:	f001 fdab 	bl	8009316 <HAL_DAC_ConfigChannel>
 80077c0:	4605      	mov	r5, r0
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d1c7      	bne.n	8007756 <main+0x1d2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077c6:	f50d 788c 	add.w	r8, sp, #280	; 0x118
 80077ca:	4601      	mov	r1, r0
 80077cc:	2210      	movs	r2, #16
 80077ce:	4640      	mov	r0, r8
 80077d0:	f007 f89c 	bl	800e90c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077d4:	f50d 63fe 	add.w	r3, sp, #2032	; 0x7f0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077d8:	f2a3 6674 	subw	r6, r3, #1652	; 0x674
  htim2.Instance = TIM2;
 80077dc:	4cc3      	ldr	r4, [pc, #780]	; (8007aec <main+0x568>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077de:	af1a      	add	r7, sp, #104	; 0x68
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077e0:	221c      	movs	r2, #28
 80077e2:	4629      	mov	r1, r5
 80077e4:	4630      	mov	r0, r6
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077e6:	e9c7 5500 	strd	r5, r5, [r7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077ea:	f007 f88f 	bl	800e90c <memset>
  htim2.Instance = TIM2;
 80077ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 80077f2:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80077f6:	4620      	mov	r0, r4
  htim2.Init.Period = 0xffff;
 80077f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007800:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007802:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007804:	f004 fe78 	bl	800c4f8 <HAL_TIM_Base_Init>
 8007808:	2800      	cmp	r0, #0
 800780a:	d1a4      	bne.n	8007756 <main+0x1d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800780c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007810:	4641      	mov	r1, r8
 8007812:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007814:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007818:	f005 f945 	bl	800caa6 <HAL_TIM_ConfigClockSource>
 800781c:	2800      	cmp	r0, #0
 800781e:	d19a      	bne.n	8007756 <main+0x1d2>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007820:	4620      	mov	r0, r4
 8007822:	f004 fec1 	bl	800c5a8 <HAL_TIM_PWM_Init>
 8007826:	2800      	cmp	r0, #0
 8007828:	d195      	bne.n	8007756 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800782a:	e9c7 0000 	strd	r0, r0, [r7]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800782e:	4639      	mov	r1, r7
 8007830:	4620      	mov	r0, r4
 8007832:	f005 fbaf 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8007836:	4602      	mov	r2, r0
 8007838:	2800      	cmp	r0, #0
 800783a:	d18c      	bne.n	8007756 <main+0x1d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800783c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800783e:	e9c6 3000 	strd	r3, r0, [r6]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007842:	60b0      	str	r0, [r6, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007844:	6130      	str	r0, [r6, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007846:	4631      	mov	r1, r6
 8007848:	4620      	mov	r0, r4
 800784a:	f004 ffd6 	bl	800c7fa <HAL_TIM_PWM_ConfigChannel>
 800784e:	2800      	cmp	r0, #0
 8007850:	d181      	bne.n	8007756 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007852:	2204      	movs	r2, #4
 8007854:	4631      	mov	r1, r6
 8007856:	4620      	mov	r0, r4
 8007858:	f004 ffcf 	bl	800c7fa <HAL_TIM_PWM_ConfigChannel>
 800785c:	2800      	cmp	r0, #0
 800785e:	f47f af7a 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007862:	2208      	movs	r2, #8
 8007864:	4631      	mov	r1, r6
 8007866:	4620      	mov	r0, r4
 8007868:	f004 ffc7 	bl	800c7fa <HAL_TIM_PWM_ConfigChannel>
 800786c:	2800      	cmp	r0, #0
 800786e:	f47f af72 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007872:	220c      	movs	r2, #12
 8007874:	4631      	mov	r1, r6
 8007876:	4620      	mov	r0, r4
 8007878:	f004 ffbf 	bl	800c7fa <HAL_TIM_PWM_ConfigChannel>
 800787c:	4605      	mov	r5, r0
 800787e:	2800      	cmp	r0, #0
 8007880:	f47f af69 	bne.w	8007756 <main+0x1d2>
  HAL_TIM_MspPostInit(&htim2);
 8007884:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007886:	f50d 7884 	add.w	r8, sp, #264	; 0x108
  HAL_TIM_MspPostInit(&htim2);
 800788a:	f001 f81d 	bl	80088c8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800788e:	2210      	movs	r2, #16
 8007890:	4629      	mov	r1, r5
 8007892:	4640      	mov	r0, r8
 8007894:	f007 f83a 	bl	800e90c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007898:	f50d 63fe 	add.w	r3, sp, #2032	; 0x7f0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800789c:	f5a3 66d2 	sub.w	r6, r3, #1680	; 0x690
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078a0:	af18      	add	r7, sp, #96	; 0x60
  TIM_OC_InitTypeDef sConfigOC = {0};
 80078a2:	221c      	movs	r2, #28
 80078a4:	4629      	mov	r1, r5
 80078a6:	4630      	mov	r0, r6
  htim5.Instance = TIM5;
 80078a8:	4c91      	ldr	r4, [pc, #580]	; (8007af0 <main+0x56c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078aa:	e9c7 5500 	strd	r5, r5, [r7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80078ae:	f007 f82d 	bl	800e90c <memset>
  htim5.Instance = TIM5;
 80078b2:	4b90      	ldr	r3, [pc, #576]	; (8007af4 <main+0x570>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078b4:	60a5      	str	r5, [r4, #8]
  htim5.Init.Prescaler = 0;
 80078b6:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80078ba:	4620      	mov	r0, r4
  htim5.Init.Period = 0xffff;
 80078bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078c4:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80078c6:	f004 fe17 	bl	800c4f8 <HAL_TIM_Base_Init>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f47f af43 	bne.w	8007756 <main+0x1d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80078d4:	4641      	mov	r1, r8
 80078d6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078d8:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80078dc:	f005 f8e3 	bl	800caa6 <HAL_TIM_ConfigClockSource>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f47f af38 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80078e6:	4620      	mov	r0, r4
 80078e8:	f004 fe5e 	bl	800c5a8 <HAL_TIM_PWM_Init>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f47f af32 	bne.w	8007756 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078f2:	e9c7 0000 	strd	r0, r0, [r7]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80078f6:	4639      	mov	r1, r7
 80078f8:	4620      	mov	r0, r4
 80078fa:	f005 fb4b 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 80078fe:	4602      	mov	r2, r0
 8007900:	2800      	cmp	r0, #0
 8007902:	f47f af28 	bne.w	8007756 <main+0x1d2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007906:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8007908:	e9c6 3000 	strd	r3, r0, [r6]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800790c:	60b0      	str	r0, [r6, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800790e:	6130      	str	r0, [r6, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007910:	4631      	mov	r1, r6
 8007912:	4620      	mov	r0, r4
 8007914:	f004 ff71 	bl	800c7fa <HAL_TIM_PWM_ConfigChannel>
 8007918:	2800      	cmp	r0, #0
 800791a:	f47f af1c 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800791e:	2204      	movs	r2, #4
 8007920:	4631      	mov	r1, r6
 8007922:	4620      	mov	r0, r4
 8007924:	f004 ff69 	bl	800c7fa <HAL_TIM_PWM_ConfigChannel>
 8007928:	2800      	cmp	r0, #0
 800792a:	f47f af14 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800792e:	2208      	movs	r2, #8
 8007930:	4631      	mov	r1, r6
 8007932:	4620      	mov	r0, r4
 8007934:	f004 ff61 	bl	800c7fa <HAL_TIM_PWM_ConfigChannel>
 8007938:	2800      	cmp	r0, #0
 800793a:	f47f af0c 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800793e:	4620      	mov	r0, r4
 8007940:	220c      	movs	r2, #12
 8007942:	4631      	mov	r1, r6
 8007944:	f004 ff59 	bl	800c7fa <HAL_TIM_PWM_ConfigChannel>
 8007948:	4604      	mov	r4, r0
 800794a:	2800      	cmp	r0, #0
 800794c:	f47f af03 	bne.w	8007756 <main+0x1d2>
  HAL_TIM_MspPostInit(&htim5);
 8007950:	4867      	ldr	r0, [pc, #412]	; (8007af0 <main+0x56c>)
  htim4.Instance = TIM4;
 8007952:	4d69      	ldr	r5, [pc, #420]	; (8007af8 <main+0x574>)
  HAL_TIM_MspPostInit(&htim5);
 8007954:	f000 ffb8 	bl	80088c8 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007958:	2220      	movs	r2, #32
 800795a:	4621      	mov	r1, r4
 800795c:	a879      	add	r0, sp, #484	; 0x1e4
 800795e:	f006 ffd5 	bl	800e90c <memset>
  htim4.Instance = TIM4;
 8007962:	4b66      	ldr	r3, [pc, #408]	; (8007afc <main+0x578>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007964:	60ac      	str	r4, [r5, #8]
  htim4.Init.Prescaler = 0;
 8007966:	e9c5 3400 	strd	r3, r4, [r5]
  htim4.Init.Period = 65535;
 800796a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800796e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007972:	ab78      	add	r3, sp, #480	; 0x1e0
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007974:	2701      	movs	r7, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007976:	2203      	movs	r2, #3
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007978:	ae16      	add	r6, sp, #88	; 0x58
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800797a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800797c:	609f      	str	r7, [r3, #8]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800797e:	619f      	str	r7, [r3, #24]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8007980:	4619      	mov	r1, r3
 8007982:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007984:	e9c6 4400 	strd	r4, r4, [r6]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007988:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800798a:	f004 fe65 	bl	800c658 <HAL_TIM_Encoder_Init>
 800798e:	2800      	cmp	r0, #0
 8007990:	f47f aee1 	bne.w	8007756 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007994:	e9c6 0000 	strd	r0, r0, [r6]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	f005 fafa 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 80079a0:	4606      	mov	r6, r0
 80079a2:	2800      	cmp	r0, #0
 80079a4:	f47f aed7 	bne.w	8007756 <main+0x1d2>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80079a8:	ac3e      	add	r4, sp, #248	; 0xf8
 80079aa:	4601      	mov	r1, r0
 80079ac:	2210      	movs	r2, #16
 80079ae:	4620      	mov	r0, r4
 80079b0:	f006 ffac 	bl	800e90c <memset>
  hsdadc1.Instance = SDADC1;
 80079b4:	4d52      	ldr	r5, [pc, #328]	; (8007b00 <main+0x57c>)
 80079b6:	4b53      	ldr	r3, [pc, #332]	; (8007b04 <main+0x580>)
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80079b8:	612e      	str	r6, [r5, #16]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80079ba:	e9c5 3600 	strd	r3, r6, [r5]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80079be:	e9c5 6602 	strd	r6, r6, [r5, #8]
  hsdadc1.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 80079c2:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 80079c6:	2602      	movs	r6, #2
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 80079c8:	4628      	mov	r0, r5
  hsdadc1.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 80079ca:	e9c5 680b 	strd	r6, r8, [r5, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 80079ce:	f003 fd5f 	bl	800b490 <HAL_SDADC_Init>
 80079d2:	4601      	mov	r1, r0
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f47f aebe 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 80079da:	4628      	mov	r0, r5
 80079dc:	f003 fe44 	bl	800b668 <HAL_SDADC_SelectInjectedDelay>
 80079e0:	4601      	mov	r1, r0
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f47f aeb7 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc1, SDADC_EXT_TRIG_TIM13_CC1, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 80079e8:	4642      	mov	r2, r8
 80079ea:	4628      	mov	r0, r5
 80079ec:	f003 fe1c 	bl	800b628 <HAL_SDADC_SelectInjectedExtTrigger>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	f47f aeb0 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	f003 fe03 	bl	800b604 <HAL_SDADC_SelectInjectedTrigger>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	f47f aea9 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_0|SDADC_CHANNEL_1
 8007a04:	4940      	ldr	r1, [pc, #256]	; (8007b08 <main+0x584>)
 8007a06:	463a      	mov	r2, r7
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f003 fdd9 	bl	800b5c0 <HAL_SDADC_InjectedConfigChannel>
 8007a0e:	4601      	mov	r1, r0
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f47f aea0 	bne.w	8007756 <main+0x1d2>
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8007a16:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8007a1a:	e9c4 3000 	strd	r3, r0, [r4]
  ConfParamStruct.Offset = 0;
 8007a1e:	e9c4 0002 	strd	r0, r0, [r4, #8]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8007a22:	4622      	mov	r2, r4
 8007a24:	4628      	mov	r0, r5
 8007a26:	9405      	str	r4, [sp, #20]
 8007a28:	f003 fd7a 	bl	800b520 <HAL_SDADC_PrepareChannelConfig>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f47f ae92 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8007a32:	9a05      	ldr	r2, [sp, #20]
 8007a34:	4639      	mov	r1, r7
 8007a36:	4628      	mov	r0, r5
 8007a38:	f003 fd72 	bl	800b520 <HAL_SDADC_PrepareChannelConfig>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	f47f ae8a 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 8007a42:	9a05      	ldr	r2, [sp, #20]
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	f003 fd6a 	bl	800b520 <HAL_SDADC_PrepareChannelConfig>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f47f ae82 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_0, SDADC_CONF_INDEX_2) != HAL_OK)
 8007a52:	4632      	mov	r2, r6
 8007a54:	4639      	mov	r1, r7
 8007a56:	4628      	mov	r0, r5
 8007a58:	f003 fd84 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f47f ae7a 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_1, SDADC_CONF_INDEX_2) != HAL_OK)
 8007a62:	492a      	ldr	r1, [pc, #168]	; (8007b0c <main+0x588>)
 8007a64:	4632      	mov	r2, r6
 8007a66:	4628      	mov	r0, r5
 8007a68:	f003 fd7c 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f47f ae72 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_2, SDADC_CONF_INDEX_1) != HAL_OK)
 8007a72:	4927      	ldr	r1, [pc, #156]	; (8007b10 <main+0x58c>)
 8007a74:	463a      	mov	r2, r7
 8007a76:	4628      	mov	r0, r5
 8007a78:	f003 fd74 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f47f ae6a 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_3, SDADC_CONF_INDEX_1) != HAL_OK)
 8007a82:	463a      	mov	r2, r7
 8007a84:	4923      	ldr	r1, [pc, #140]	; (8007b14 <main+0x590>)
 8007a86:	4628      	mov	r0, r5
 8007a88:	f003 fd6c 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f47f ae61 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 8007a94:	4920      	ldr	r1, [pc, #128]	; (8007b18 <main+0x594>)
 8007a96:	4628      	mov	r0, r5
 8007a98:	f003 fd64 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f47f ae59 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 8007aa4:	491d      	ldr	r1, [pc, #116]	; (8007b1c <main+0x598>)
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f003 fd5c 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007aac:	4602      	mov	r2, r0
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f47f ae51 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8007ab4:	491a      	ldr	r1, [pc, #104]	; (8007b20 <main+0x59c>)
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f003 fd54 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f47f ae4a 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_7, SDADC_CONF_INDEX_1) != HAL_OK)
 8007ac2:	4918      	ldr	r1, [pc, #96]	; (8007b24 <main+0x5a0>)
 8007ac4:	463a      	mov	r2, r7
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f003 fd4c 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f47f ae42 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_1) != HAL_OK)
 8007ad2:	4915      	ldr	r1, [pc, #84]	; (8007b28 <main+0x5a4>)
 8007ad4:	463a      	mov	r2, r7
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f003 fd44 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f47f ae3a 	bne.w	8007756 <main+0x1d2>
 8007ae2:	e023      	b.n	8007b2c <main+0x5a8>
 8007ae4:	200020e8 	.word	0x200020e8
 8007ae8:	40009800 	.word	0x40009800
 8007aec:	200025ac 	.word	0x200025ac
 8007af0:	20002690 	.word	0x20002690
 8007af4:	40000c00 	.word	0x40000c00
 8007af8:	20002644 	.word	0x20002644
 8007afc:	40000800 	.word	0x40000800
 8007b00:	200022b4 	.word	0x200022b4
 8007b04:	40016000 	.word	0x40016000
 8007b08:	000f01ff 	.word	0x000f01ff
 8007b0c:	00010002 	.word	0x00010002
 8007b10:	00020004 	.word	0x00020004
 8007b14:	00030008 	.word	0x00030008
 8007b18:	00040010 	.word	0x00040010
 8007b1c:	00050020 	.word	0x00050020
 8007b20:	00060040 	.word	0x00060040
 8007b24:	00070080 	.word	0x00070080
 8007b28:	00080100 	.word	0x00080100
  hsdadc2.Instance = SDADC2;
 8007b2c:	4cd1      	ldr	r4, [pc, #836]	; (8007e74 <main+0x8f0>)
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8007b2e:	f8df 9390 	ldr.w	r9, [pc, #912]	; 8007ec0 <main+0x93c>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8007b32:	ad3a      	add	r5, sp, #232	; 0xe8
 8007b34:	2100      	movs	r1, #0
 8007b36:	2210      	movs	r2, #16
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f006 fee7 	bl	800e90c <memset>
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8007b3e:	2300      	movs	r3, #0
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8007b40:	4620      	mov	r0, r4
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8007b42:	e9c4 9300 	strd	r9, r3, [r4]
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8007b46:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8007b4a:	6123      	str	r3, [r4, #16]
  hsdadc2.InjectedTrigger = SDADC_EXTERNAL_TRIGGER;
 8007b4c:	62e6      	str	r6, [r4, #44]	; 0x2c
  hsdadc2.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8007b4e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8007b52:	f003 fc9d 	bl	800b490 <HAL_SDADC_Init>
 8007b56:	4601      	mov	r1, r0
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f47f adfc 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc2, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f003 fd82 	bl	800b668 <HAL_SDADC_SelectInjectedDelay>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	f47f adf6 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc2, SDADC_EXT_TRIG_TIM12_CC1, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8007b6a:	4642      	mov	r2, r8
 8007b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b70:	4620      	mov	r0, r4
 8007b72:	f003 fd59 	bl	800b628 <HAL_SDADC_SelectInjectedExtTrigger>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f47f aded 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc2, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f003 fd40 	bl	800b604 <HAL_SDADC_SelectInjectedTrigger>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	f47f ade6 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc2, SDADC_CHANNEL_0|SDADC_CHANNEL_1
 8007b8a:	49bb      	ldr	r1, [pc, #748]	; (8007e78 <main+0x8f4>)
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f003 fd16 	bl	800b5c0 <HAL_SDADC_InjectedConfigChannel>
 8007b94:	4601      	mov	r1, r0
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f47f addd 	bne.w	8007756 <main+0x1d2>
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8007b9c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8007ba0:	e9c5 3000 	strd	r3, r0, [r5]
  ConfParamStruct.Offset = 0;
 8007ba4:	e9c5 0002 	strd	r0, r0, [r5, #8]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4620      	mov	r0, r4
 8007bac:	f003 fcb8 	bl	800b520 <HAL_SDADC_PrepareChannelConfig>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f47f add0 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	2101      	movs	r1, #1
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f003 fcb0 	bl	800b520 <HAL_SDADC_PrepareChannelConfig>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f47f adc8 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 8007bc6:	462a      	mov	r2, r5
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f003 fca8 	bl	800b520 <HAL_SDADC_PrepareChannelConfig>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	f47f adc0 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_0, SDADC_CONF_INDEX_2) != HAL_OK)
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	2101      	movs	r1, #1
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f003 fcc2 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	f47f adb8 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_1, SDADC_CONF_INDEX_1) != HAL_OK)
 8007be6:	49a5      	ldr	r1, [pc, #660]	; (8007e7c <main+0x8f8>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	4620      	mov	r0, r4
 8007bec:	f003 fcba 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f47f adb0 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc2, SDADC_CHANNEL_2, SDADC_CONF_INDEX_0) != HAL_OK)
 8007bf6:	49a2      	ldr	r1, [pc, #648]	; (8007e80 <main+0x8fc>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f003 fcb2 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007c00:	4605      	mov	r5, r0
 8007c02:	2800      	cmp	r0, #0
 8007c04:	f47f ada7 	bne.w	8007756 <main+0x1d2>
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8007c08:	ae36      	add	r6, sp, #216	; 0xd8
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	2210      	movs	r2, #16
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f006 fe7c 	bl	800e90c <memset>
  hsdadc3.Instance = SDADC3;
 8007c14:	4c9b      	ldr	r4, [pc, #620]	; (8007e84 <main+0x900>)
 8007c16:	4b9c      	ldr	r3, [pc, #624]	; (8007e88 <main+0x904>)
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8007c18:	6125      	str	r5, [r4, #16]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8007c1a:	e9c4 3500 	strd	r3, r5, [r4]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8007c1e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8007c22:	4620      	mov	r0, r4
  hsdadc3.InjectedTrigger = SDADC_EXTERNAL_TRIGGER;
 8007c24:	2502      	movs	r5, #2
  hsdadc3.ExtTriggerEdge = SDADC_EXT_TRIG_RISING_EDGE;
 8007c26:	e9c4 580b 	strd	r5, r8, [r4, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8007c2a:	f003 fc31 	bl	800b490 <HAL_SDADC_Init>
 8007c2e:	4601      	mov	r1, r0
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f47f ad90 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc3, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8007c36:	4620      	mov	r0, r4
 8007c38:	f003 fd16 	bl	800b668 <HAL_SDADC_SelectInjectedDelay>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f47f ad8a 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedExtTrigger(&hsdadc3, SDADC_EXT_TRIG_TIM12_CC2, SDADC_EXT_TRIG_RISING_EDGE) != HAL_OK)
 8007c42:	4642      	mov	r2, r8
 8007c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f003 fced 	bl	800b628 <HAL_SDADC_SelectInjectedExtTrigger>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f47f ad81 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc3, SDADC_EXTERNAL_TRIGGER) != HAL_OK)
 8007c54:	4629      	mov	r1, r5
 8007c56:	4620      	mov	r0, r4
 8007c58:	f003 fcd4 	bl	800b604 <HAL_SDADC_SelectInjectedTrigger>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	f47f ad7a 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc3, SDADC_CHANNEL_0|SDADC_CHANNEL_2
 8007c62:	498a      	ldr	r1, [pc, #552]	; (8007e8c <main+0x908>)
 8007c64:	2201      	movs	r2, #1
 8007c66:	4620      	mov	r0, r4
 8007c68:	f003 fcaa 	bl	800b5c0 <HAL_SDADC_InjectedConfigChannel>
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f47f ad71 	bne.w	8007756 <main+0x1d2>
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8007c74:	e9c6 0000 	strd	r0, r0, [r6]
  ConfParamStruct.Offset = 0;
 8007c78:	e9c6 0002 	strd	r0, r0, [r6, #8]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	4620      	mov	r0, r4
 8007c80:	9605      	str	r6, [sp, #20]
 8007c82:	f003 fc4d 	bl	800b520 <HAL_SDADC_PrepareChannelConfig>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f47f ad65 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_1, &ConfParamStruct) != HAL_OK)
 8007c8c:	9a05      	ldr	r2, [sp, #20]
 8007c8e:	2101      	movs	r1, #1
 8007c90:	4620      	mov	r0, r4
 8007c92:	f003 fc45 	bl	800b520 <HAL_SDADC_PrepareChannelConfig>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f47f ad5d 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_2, &ConfParamStruct) != HAL_OK)
 8007c9c:	9a05      	ldr	r2, [sp, #20]
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f003 fc3d 	bl	800b520 <HAL_SDADC_PrepareChannelConfig>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	f47f ad55 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_0, SDADC_CONF_INDEX_2) != HAL_OK)
 8007cac:	462a      	mov	r2, r5
 8007cae:	2101      	movs	r1, #1
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f003 fc57 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f47f ad4d 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_2, SDADC_CONF_INDEX_1) != HAL_OK)
 8007cbc:	4970      	ldr	r1, [pc, #448]	; (8007e80 <main+0x8fc>)
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f003 fc4f 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f47f ad45 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_4, SDADC_CONF_INDEX_1) != HAL_OK)
 8007ccc:	2201      	movs	r2, #1
 8007cce:	4970      	ldr	r1, [pc, #448]	; (8007e90 <main+0x90c>)
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f003 fc47 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	f47f ad3c 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8007cde:	496d      	ldr	r1, [pc, #436]	; (8007e94 <main+0x910>)
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f003 fc3f 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f47f ad34 	bne.w	8007756 <main+0x1d2>
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 8007cee:	496a      	ldr	r1, [pc, #424]	; (8007e98 <main+0x914>)
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f003 fc37 	bl	800b564 <HAL_SDADC_AssociateChannelConfig>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	f47f ad2c 	bne.w	8007756 <main+0x1d2>
  hcan.Instance = CAN;
 8007cfe:	4867      	ldr	r0, [pc, #412]	; (8007e9c <main+0x918>)
  hcan.Init.Prescaler = 16;
 8007d00:	4a67      	ldr	r2, [pc, #412]	; (8007ea0 <main+0x91c>)
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007d02:	6183      	str	r3, [r0, #24]
  hcan.Init.Prescaler = 16;
 8007d04:	2610      	movs	r6, #16
 8007d06:	e9c0 2600 	strd	r2, r6, [r0]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8007d0a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8007d0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007d12:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007d14:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8007d18:	e9c0 8204 	strd	r8, r2, [r0, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007d1c:	f000 ff50 	bl	8008bc0 <HAL_CAN_Init>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	f47f ad18 	bne.w	8007756 <main+0x1d2>
  htim6.Instance = TIM6;
 8007d26:	4c5f      	ldr	r4, [pc, #380]	; (8007ea4 <main+0x920>)
  htim6.Init.Prescaler = 99;
 8007d28:	4b5f      	ldr	r3, [pc, #380]	; (8007ea8 <main+0x924>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d2a:	60a0      	str	r0, [r4, #8]
  htim6.Init.Prescaler = 99;
 8007d2c:	2763      	movs	r7, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d2e:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  htim6.Init.Prescaler = 99;
 8007d32:	e9c4 3700 	strd	r3, r7, [r4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d36:	61a0      	str	r0, [r4, #24]
  htim6.Init.Period = 0xbb80;
 8007d38:	f64b 3380 	movw	r3, #48000	; 0xbb80
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007d3c:	4620      	mov	r0, r4
  htim6.Init.Period = 0xbb80;
 8007d3e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007d40:	f004 fbda 	bl	800c4f8 <HAL_TIM_Base_Init>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	f47f ad06 	bne.w	8007756 <main+0x1d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007d4a:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d4c:	e9cd 3014 	strd	r3, r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007d50:	a914      	add	r1, sp, #80	; 0x50
 8007d52:	4620      	mov	r0, r4
 8007d54:	f005 f91e 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8007d58:	4605      	mov	r5, r0
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f47f acfb 	bne.w	8007756 <main+0x1d2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d60:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8007d64:	4601      	mov	r1, r0
 8007d66:	4632      	mov	r2, r6
 8007d68:	4640      	mov	r0, r8
 8007d6a:	f006 fdcf 	bl	800e90c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007d6e:	221c      	movs	r2, #28
 8007d70:	4629      	mov	r1, r5
 8007d72:	a851      	add	r0, sp, #324	; 0x144
 8007d74:	f006 fdca 	bl	800e90c <memset>
  htim12.Instance = TIM12;
 8007d78:	4c4c      	ldr	r4, [pc, #304]	; (8007eac <main+0x928>)
 8007d7a:	4b4d      	ldr	r3, [pc, #308]	; (8007eb0 <main+0x92c>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d7c:	60a5      	str	r5, [r4, #8]
  htim12.Init.Prescaler = 99;
 8007d7e:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8007d82:	4620      	mov	r0, r4
  htim12.Init.Period = 4800;
 8007d84:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d88:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d8c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8007d8e:	f004 fbb3 	bl	800c4f8 <HAL_TIM_Base_Init>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f47f acdf 	bne.w	8007756 <main+0x1d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007da0:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8007da4:	f004 fe7f 	bl	800caa6 <HAL_TIM_ConfigClockSource>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	f47f acd4 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8007dae:	4620      	mov	r0, r4
 8007db0:	f004 fbce 	bl	800c550 <HAL_TIM_OC_Init>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	f47f acce 	bne.w	8007756 <main+0x1d2>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8007dba:	ab51      	add	r3, sp, #324	; 0x144
  sConfigOC.Pulse = 0;
 8007dbc:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8007dbe:	2730      	movs	r7, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007dc4:	e9c3 2201 	strd	r2, r2, [r3, #4]
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8007dc8:	601f      	str	r7, [r3, #0]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007dca:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007dcc:	f004 fcc6 	bl	800c75c <HAL_TIM_OC_ConfigChannel>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	f47f acc0 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	a951      	add	r1, sp, #324	; 0x144
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f004 fcbe 	bl	800c75c <HAL_TIM_OC_ConfigChannel>
 8007de0:	4605      	mov	r5, r0
 8007de2:	2800      	cmp	r0, #0
 8007de4:	f47f acb7 	bne.w	8007756 <main+0x1d2>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007de8:	ae4a      	add	r6, sp, #296	; 0x128
 8007dea:	4601      	mov	r1, r0
 8007dec:	221c      	movs	r2, #28
 8007dee:	4630      	mov	r0, r6
 8007df0:	f006 fd8c 	bl	800e90c <memset>
  htim13.Instance = TIM13;
 8007df4:	4c2f      	ldr	r4, [pc, #188]	; (8007eb4 <main+0x930>)
  htim13.Init.Prescaler = 99;
 8007df6:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8007ec4 <main+0x940>
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dfa:	60a5      	str	r5, [r4, #8]
  htim13.Init.Prescaler = 99;
 8007dfc:	2363      	movs	r3, #99	; 0x63
 8007dfe:	e9c4 e300 	strd	lr, r3, [r4]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007e02:	4620      	mov	r0, r4
  htim13.Init.Period = 4800;
 8007e04:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e08:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e0c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007e0e:	f004 fb73 	bl	800c4f8 <HAL_TIM_Base_Init>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f47f ac9f 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f004 fb99 	bl	800c550 <HAL_TIM_OC_Init>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f47f ac98 	bne.w	8007756 <main+0x1d2>
  sConfigOC.Pulse = 0;
 8007e26:	e9c6 7000 	strd	r7, r0, [r6]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007e2a:	60b0      	str	r0, [r6, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007e2c:	6130      	str	r0, [r6, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007e2e:	4631      	mov	r1, r6
 8007e30:	4620      	mov	r0, r4
 8007e32:	f004 fc93 	bl	800c75c <HAL_TIM_OC_ConfigChannel>
 8007e36:	4605      	mov	r5, r0
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	f47f ac8c 	bne.w	8007756 <main+0x1d2>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007e3e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
  htim16.Instance = TIM16;
 8007e42:	4c1d      	ldr	r4, [pc, #116]	; (8007eb8 <main+0x934>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007e44:	4601      	mov	r1, r0
 8007e46:	2210      	movs	r2, #16
 8007e48:	4640      	mov	r0, r8
 8007e4a:	f006 fd5f 	bl	800e90c <memset>
  htim16.Init.Prescaler = 4799;
 8007e4e:	4b1b      	ldr	r3, [pc, #108]	; (8007ebc <main+0x938>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e50:	60a5      	str	r5, [r4, #8]
  htim16.Init.Prescaler = 4799;
 8007e52:	f241 27bf 	movw	r7, #4799	; 0x12bf
  htim16.Init.Period = 0xffff;
 8007e56:	f64f 76ff 	movw	r6, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007e5a:	4620      	mov	r0, r4
  htim16.Init.Prescaler = 4799;
 8007e5c:	e9c4 3700 	strd	r3, r7, [r4]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e60:	e9c4 6503 	strd	r6, r5, [r4, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e64:	e9c4 5505 	strd	r5, r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007e68:	f004 fb46 	bl	800c4f8 <HAL_TIM_Base_Init>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f47f ac72 	bne.w	8007756 <main+0x1d2>
 8007e72:	e029      	b.n	8007ec8 <main+0x944>
 8007e74:	200022f8 	.word	0x200022f8
 8007e78:	00030007 	.word	0x00030007
 8007e7c:	00010002 	.word	0x00010002
 8007e80:	00020004 	.word	0x00020004
 8007e84:	2000233c 	.word	0x2000233c
 8007e88:	40016800 	.word	0x40016800
 8007e8c:	000e0155 	.word	0x000e0155
 8007e90:	00040010 	.word	0x00040010
 8007e94:	00060040 	.word	0x00060040
 8007e98:	00080100 	.word	0x00080100
 8007e9c:	200020ac 	.word	0x200020ac
 8007ea0:	40006400 	.word	0x40006400
 8007ea4:	200026dc 	.word	0x200026dc
 8007ea8:	40001000 	.word	0x40001000
 8007eac:	200023e4 	.word	0x200023e4
 8007eb0:	40001800 	.word	0x40001800
 8007eb4:	20002430 	.word	0x20002430
 8007eb8:	200024c8 	.word	0x200024c8
 8007ebc:	40014400 	.word	0x40014400
 8007ec0:	40016400 	.word	0x40016400
 8007ec4:	40001c00 	.word	0x40001c00
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f004 fb99 	bl	800c600 <HAL_TIM_IC_Init>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f47f ac40 	bne.w	8007756 <main+0x1d2>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007ed6:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007ed8:	e9c8 3001 	strd	r3, r0, [r8, #4]
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007edc:	f8c8 0000 	str.w	r0, [r8]
  sConfigIC.ICFilter = 0;
 8007ee0:	f8c8 000c 	str.w	r0, [r8, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f004 fd40 	bl	800c96c <HAL_TIM_IC_ConfigChannel>
 8007eec:	4605      	mov	r5, r0
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f47f ac31 	bne.w	8007756 <main+0x1d2>
  MX_USB_DEVICE_Init();
 8007ef4:	f006 faa2 	bl	800e43c <MX_USB_DEVICE_Init>
  htim17.Instance = TIM17;
 8007ef8:	4ca4      	ldr	r4, [pc, #656]	; (800818c <main+0xc08>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007efa:	2210      	movs	r2, #16
 8007efc:	4629      	mov	r1, r5
 8007efe:	a82a      	add	r0, sp, #168	; 0xa8
 8007f00:	f006 fd04 	bl	800e90c <memset>
  htim17.Instance = TIM17;
 8007f04:	4ba2      	ldr	r3, [pc, #648]	; (8008190 <main+0xc0c>)
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f06:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007f08:	4620      	mov	r0, r4
  htim17.Init.Prescaler = 4799;
 8007f0a:	e9c4 3700 	strd	r3, r7, [r4]
  htim17.Init.Period = 0xffff;
 8007f0e:	e9c4 5602 	strd	r5, r6, [r4, #8]
  htim17.Init.RepetitionCounter = 0;
 8007f12:	e9c4 5504 	strd	r5, r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007f16:	f004 faef 	bl	800c4f8 <HAL_TIM_Base_Init>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	f47f ac1b 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8007f20:	4620      	mov	r0, r4
 8007f22:	f004 fb6d 	bl	800c600 <HAL_TIM_IC_Init>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f47f ac15 	bne.w	8007756 <main+0x1d2>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007f2c:	ab2a      	add	r3, sp, #168	; 0xa8
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007f2e:	2200      	movs	r2, #0
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007f30:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007f32:	2601      	movs	r6, #1
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007f34:	a92a      	add	r1, sp, #168	; 0xa8
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007f36:	e9c3 2600 	strd	r2, r6, [r3]
  sConfigIC.ICFilter = 0;
 8007f3a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007f3e:	f004 fd15 	bl	800c96c <HAL_TIM_IC_ConfigChannel>
 8007f42:	4604      	mov	r4, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f47f ac06 	bne.w	8007756 <main+0x1d2>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	a870      	add	r0, sp, #448	; 0x1c0
 8007f50:	f006 fcdc 	bl	800e90c <memset>
  htim19.Instance = TIM19;
 8007f54:	4d8f      	ldr	r5, [pc, #572]	; (8008194 <main+0xc10>)
 8007f56:	4b90      	ldr	r3, [pc, #576]	; (8008198 <main+0xc14>)
  htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f58:	60ac      	str	r4, [r5, #8]
  htim19.Init.Prescaler = 0;
 8007f5a:	e9c5 3400 	strd	r3, r4, [r5]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007f5e:	f04f 0803 	mov.w	r8, #3
 8007f62:	ab6f      	add	r3, sp, #444	; 0x1bc
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f64:	f10d 0948 	add.w	r9, sp, #72	; 0x48
  htim19.Init.Period = 65535;
 8007f68:	f64f 77ff 	movw	r7, #65535	; 0xffff
  if (HAL_TIM_Encoder_Init(&htim19, &sConfig) != HAL_OK)
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4628      	mov	r0, r5
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007f70:	f8c3 8000 	str.w	r8, [r3]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007f74:	609e      	str	r6, [r3, #8]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007f76:	619e      	str	r6, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f78:	e9c9 4400 	strd	r4, r4, [r9]
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f7c:	e9c5 7403 	strd	r7, r4, [r5, #12]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f80:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Encoder_Init(&htim19, &sConfig) != HAL_OK)
 8007f82:	f004 fb69 	bl	800c658 <HAL_TIM_Encoder_Init>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f47f abe5 	bne.w	8007756 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f8c:	e9c9 0000 	strd	r0, r0, [r9]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 8007f90:	4649      	mov	r1, r9
 8007f92:	4628      	mov	r0, r5
 8007f94:	f004 fffe 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8007f98:	4604      	mov	r4, r0
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	f47f abdb 	bne.w	8007756 <main+0x1d2>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007fa0:	4601      	mov	r1, r0
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	a867      	add	r0, sp, #412	; 0x19c
 8007fa6:	f006 fcb1 	bl	800e90c <memset>
  htim3.Instance = TIM3;
 8007faa:	4d7c      	ldr	r5, [pc, #496]	; (800819c <main+0xc18>)
 8007fac:	4b7c      	ldr	r3, [pc, #496]	; (80081a0 <main+0xc1c>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fae:	612c      	str	r4, [r5, #16]
  htim3.Init.Prescaler = 0;
 8007fb0:	e9c5 3400 	strd	r3, r4, [r5]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007fb4:	ab66      	add	r3, sp, #408	; 0x198
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fb6:	f10d 0940 	add.w	r9, sp, #64	; 0x40
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fbe:	e9c9 4400 	strd	r4, r4, [r9]
  htim3.Init.Period = 65535;
 8007fc2:	e9c5 4702 	strd	r4, r7, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fc6:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007fc8:	f8c3 8000 	str.w	r8, [r3]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007fcc:	609e      	str	r6, [r3, #8]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007fce:	619e      	str	r6, [r3, #24]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8007fd0:	f004 fb42 	bl	800c658 <HAL_TIM_Encoder_Init>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f47f abbe 	bne.w	8007756 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fda:	e9c9 0000 	strd	r0, r0, [r9]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f004 ffd7 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	f47f abb4 	bne.w	8007756 <main+0x1d2>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fee:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	2210      	movs	r2, #16
 8007ff6:	4650      	mov	r0, sl
 8007ff8:	f006 fc88 	bl	800e90c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ffc:	f50d 63fe 	add.w	r3, sp, #2032	; 0x7f0
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008000:	f5a3 68eb 	sub.w	r8, r3, #1880	; 0x758
  htim15.Instance = TIM15;
 8008004:	4c67      	ldr	r4, [pc, #412]	; (80081a4 <main+0xc20>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008006:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  TIM_IC_InitTypeDef sConfigIC = {0};
 800800a:	2210      	movs	r2, #16
 800800c:	4629      	mov	r1, r5
 800800e:	4640      	mov	r0, r8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008010:	e9c9 5500 	strd	r5, r5, [r9]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008014:	f006 fc7a 	bl	800e90c <memset>
  htim15.Init.Prescaler = 4799;
 8008018:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80081f0 <main+0xc6c>
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800801c:	61a5      	str	r5, [r4, #24]
  htim15.Init.Prescaler = 4799;
 800801e:	f241 23bf 	movw	r3, #4799	; 0x12bf
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008022:	4620      	mov	r0, r4
  htim15.Init.Prescaler = 4799;
 8008024:	e9c4 c300 	strd	ip, r3, [r4]
  htim15.Init.Period = 0xffff;
 8008028:	e9c4 5702 	strd	r5, r7, [r4, #8]
  htim15.Init.RepetitionCounter = 0;
 800802c:	e9c4 5504 	strd	r5, r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008030:	f004 fa62 	bl	800c4f8 <HAL_TIM_Base_Init>
 8008034:	2800      	cmp	r0, #0
 8008036:	f47f ab8e 	bne.w	8007756 <main+0x1d2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800803a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800803e:	4651      	mov	r1, sl
 8008040:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008042:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008046:	f004 fd2e 	bl	800caa6 <HAL_TIM_ConfigClockSource>
 800804a:	2800      	cmp	r0, #0
 800804c:	f47f ab83 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8008050:	4620      	mov	r0, r4
 8008052:	f004 fad5 	bl	800c600 <HAL_TIM_IC_Init>
 8008056:	2800      	cmp	r0, #0
 8008058:	f47f ab7d 	bne.w	8007756 <main+0x1d2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800805c:	e9c9 0000 	strd	r0, r0, [r9]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008060:	4649      	mov	r1, r9
 8008062:	4620      	mov	r0, r4
 8008064:	f004 ff96 	bl	800cf94 <HAL_TIMEx_MasterConfigSynchronization>
 8008068:	4602      	mov	r2, r0
 800806a:	2800      	cmp	r0, #0
 800806c:	f47f ab73 	bne.w	8007756 <main+0x1d2>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008070:	e9c8 0600 	strd	r0, r6, [r8]
  sConfigIC.ICFilter = 0;
 8008074:	e9c8 0002 	strd	r0, r0, [r8, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008078:	4641      	mov	r1, r8
 800807a:	4620      	mov	r0, r4
 800807c:	f8cd 8014 	str.w	r8, [sp, #20]
 8008080:	f004 fc74 	bl	800c96c <HAL_TIM_IC_ConfigChannel>
 8008084:	2800      	cmp	r0, #0
 8008086:	f47f ab66 	bne.w	8007756 <main+0x1d2>
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800808a:	9905      	ldr	r1, [sp, #20]
 800808c:	2204      	movs	r2, #4
 800808e:	4620      	mov	r0, r4
 8008090:	f004 fc6c 	bl	800c96c <HAL_TIM_IC_ConfigChannel>
 8008094:	2800      	cmp	r0, #0
 8008096:	f47f ab5e 	bne.w	8007756 <main+0x1d2>
  hspi2.Instance = SPI2;
 800809a:	4c43      	ldr	r4, [pc, #268]	; (80081a8 <main+0xc24>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800809c:	4943      	ldr	r1, [pc, #268]	; (80081ac <main+0xc28>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800809e:	60a0      	str	r0, [r4, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80080a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80080a4:	e9c4 1300 	strd	r1, r3, [r4]
  hspi2.Init.CRCPolynomial = 7;
 80080a8:	2207      	movs	r2, #7
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80080aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80080ae:	e9c4 3003 	strd	r3, r0, [r4, #12]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80080b2:	e9c4 0008 	strd	r0, r0, [r4, #32]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80080b6:	2308      	movs	r3, #8
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80080b8:	e9c4 200b 	strd	r2, r0, [r4, #44]	; 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80080bc:	6160      	str	r0, [r4, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80080be:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080c2:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80080c4:	4620      	mov	r0, r4
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80080c6:	e9c4 5306 	strd	r5, r3, [r4, #24]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80080ca:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80080cc:	f003 fc9c 	bl	800ba08 <HAL_SPI_Init>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	f47f ab40 	bne.w	8007756 <main+0x1d2>
  hrtc.Instance = RTC;
 80080d6:	4d36      	ldr	r5, [pc, #216]	; (80081b0 <main+0xc2c>)
 80080d8:	4b36      	ldr	r3, [pc, #216]	; (80081b4 <main+0xc30>)
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80080da:	61a8      	str	r0, [r5, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80080dc:	e9c5 3000 	strd	r3, r0, [r5]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80080e0:	e9c5 0004 	strd	r0, r0, [r5, #16]
  hrtc.Init.SynchPrediv = 255;
 80080e4:	227f      	movs	r2, #127	; 0x7f
 80080e6:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80080e8:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80080ea:	e9c5 2302 	strd	r2, r3, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80080ee:	f002 ff1f 	bl	800af30 <HAL_RTC_Init>
 80080f2:	4606      	mov	r6, r0
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f47f ab2e 	bne.w	8007756 <main+0x1d2>
  STM32_PLC_Analog_Input(&htim12, &htim13, &hsdadc1, &hsdadc2, &hsdadc3);
 80080fa:	4b2f      	ldr	r3, [pc, #188]	; (80081b8 <main+0xc34>)
 80080fc:	4a2f      	ldr	r2, [pc, #188]	; (80081bc <main+0xc38>)
 80080fe:	4930      	ldr	r1, [pc, #192]	; (80081c0 <main+0xc3c>)
 8008100:	4830      	ldr	r0, [pc, #192]	; (80081c4 <main+0xc40>)
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	4b30      	ldr	r3, [pc, #192]	; (80081c8 <main+0xc44>)
 8008106:	f7f8 fe3f 	bl	8000d88 <STM32_PLC_Analog_Input>
  STM32_PLC_Analog_Output(&hdac1, &hdac2, &htim6);
 800810a:	4a30      	ldr	r2, [pc, #192]	; (80081cc <main+0xc48>)
 800810c:	4930      	ldr	r1, [pc, #192]	; (80081d0 <main+0xc4c>)
 800810e:	4831      	ldr	r0, [pc, #196]	; (80081d4 <main+0xc50>)
 8008110:	f7f8 ffea 	bl	80010e8 <STM32_PLC_Analog_Output>
  STM32_PLC_Encoder(&htim4, &htim19, &htim3);
 8008114:	4a21      	ldr	r2, [pc, #132]	; (800819c <main+0xc18>)
 8008116:	491f      	ldr	r1, [pc, #124]	; (8008194 <main+0xc10>)
 8008118:	482f      	ldr	r0, [pc, #188]	; (80081d8 <main+0xc54>)
 800811a:	f7f9 f8c7 	bl	80012ac <STM32_PLC_Encoder>
  STM32_PLC_Input_Capture(&htim17, &htim16, &htim15);
 800811e:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <main+0xc20>)
 8008120:	492e      	ldr	r1, [pc, #184]	; (80081dc <main+0xc58>)
 8008122:	481a      	ldr	r0, [pc, #104]	; (800818c <main+0xc08>)
 8008124:	f7f9 fb5a 	bl	80017dc <STM32_PLC_Input_Capture>
  STM32_PLC_PWM(&htim2, &htim5);
 8008128:	492d      	ldr	r1, [pc, #180]	; (80081e0 <main+0xc5c>)
 800812a:	482e      	ldr	r0, [pc, #184]	; (80081e4 <main+0xc60>)
 800812c:	f7f9 fd4c 	bl	8001bc8 <STM32_PLC_PWM>
  STM32_PLC_CAN(&hcan);
 8008130:	482d      	ldr	r0, [pc, #180]	; (80081e8 <main+0xc64>)
 8008132:	f7f9 f801 	bl	8001138 <STM32_PLC_CAN>
  STM32_PLC_RTC(&hrtc);
 8008136:	4628      	mov	r0, r5
 8008138:	f7f9 fdae 	bl	8001c98 <STM32_PLC_RTC>
  STM32_PLC_LCD(&hspi2, &hspi2, CS0_GPIO_Port, CS0_Pin, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin);
 800813c:	4a2b      	ldr	r2, [pc, #172]	; (80081ec <main+0xc68>)
 800813e:	2380      	movs	r3, #128	; 0x80
 8008140:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	e9cd 2300 	strd	r2, r3, [sp]
 800814a:	4621      	mov	r1, r4
 800814c:	2320      	movs	r3, #32
 800814e:	4620      	mov	r0, r4
 8008150:	f7f9 fbfe 	bl	8001950 <STM32_PLC_LCD>
  STM32_PLC_LED();
 8008154:	f7f9 fcd8 	bl	8001b08 <STM32_PLC_LED>
  J1939 j1939 = {0};
 8008158:	4631      	mov	r1, r6
 800815a:	f241 6210 	movw	r2, #5648	; 0x1610
 800815e:	a878      	add	r0, sp, #480	; 0x1e0
 8008160:	f006 fbd4 	bl	800e90c <memset>
  Open_SAE_J1939_Startup_ECU(&j1939);
 8008164:	a878      	add	r0, sp, #480	; 0x1e0
 8008166:	f7fa f951 	bl	800240c <Open_SAE_J1939_Startup_ECU>
  STM32_PLC_Flash_Get_J1939_This_ECU_Address(&j1939.information_this_ECU.this_ECU_address);
 800816a:	f50d 50a5 	add.w	r0, sp, #5280	; 0x14a0
 800816e:	3014      	adds	r0, #20
 8008170:	f7f9 fac6 	bl	8001700 <STM32_PLC_Flash_Get_J1939_This_ECU_Address>
  uint8_t frame_id = 0;
 8008174:	ab6f      	add	r3, sp, #444	; 0x1bc
  STM32_PLC_LCD_Show_Main_Frame(&frame_id, false);
 8008176:	4631      	mov	r1, r6
 8008178:	4618      	mov	r0, r3
  uint8_t frame_id = 0;
 800817a:	701e      	strb	r6, [r3, #0]
  STM32_PLC_LCD_Show_Main_Frame(&frame_id, false);
 800817c:	f7fb fdce 	bl	8003d1c <STM32_PLC_LCD_Show_Main_Frame>
	  STM32_PLC_LCD_Call_Main_Logic(&frame_id, &j1939);
 8008180:	a978      	add	r1, sp, #480	; 0x1e0
 8008182:	a86f      	add	r0, sp, #444	; 0x1bc
 8008184:	f7fe fef8 	bl	8006f78 <STM32_PLC_LCD_Call_Main_Logic>
  while (1)
 8008188:	e7fa      	b.n	8008180 <main+0xbfc>
 800818a:	bf00      	nop
 800818c:	20002514 	.word	0x20002514
 8008190:	40014800 	.word	0x40014800
 8008194:	20002560 	.word	0x20002560
 8008198:	40015c00 	.word	0x40015c00
 800819c:	200025f8 	.word	0x200025f8
 80081a0:	40000400 	.word	0x40000400
 80081a4:	2000247c 	.word	0x2000247c
 80081a8:	20002380 	.word	0x20002380
 80081ac:	40003800 	.word	0x40003800
 80081b0:	20002294 	.word	0x20002294
 80081b4:	40002800 	.word	0x40002800
 80081b8:	2000233c 	.word	0x2000233c
 80081bc:	200022b4 	.word	0x200022b4
 80081c0:	20002430 	.word	0x20002430
 80081c4:	200023e4 	.word	0x200023e4
 80081c8:	200022f8 	.word	0x200022f8
 80081cc:	200026dc 	.word	0x200026dc
 80081d0:	200020e8 	.word	0x200020e8
 80081d4:	200020d4 	.word	0x200020d4
 80081d8:	20002644 	.word	0x20002644
 80081dc:	200024c8 	.word	0x200024c8
 80081e0:	20002690 	.word	0x20002690
 80081e4:	200025ac 	.word	0x200025ac
 80081e8:	200020ac 	.word	0x200020ac
 80081ec:	48000c00 	.word	0x48000c00
 80081f0:	40014000 	.word	0x40014000

080081f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <HAL_MspInit+0x2c>)
 80081f6:	699a      	ldr	r2, [r3, #24]
 80081f8:	f042 0201 	orr.w	r2, r2, #1
 80081fc:	619a      	str	r2, [r3, #24]
 80081fe:	699a      	ldr	r2, [r3, #24]
{
 8008200:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008202:	f002 0201 	and.w	r2, r2, #1
 8008206:	9200      	str	r2, [sp, #0]
 8008208:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800820a:	69da      	ldr	r2, [r3, #28]
 800820c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008210:	61da      	str	r2, [r3, #28]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800821c:	b002      	add	sp, #8
 800821e:	4770      	bx	lr
 8008220:	40021000 	.word	0x40021000

08008224 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008224:	b510      	push	{r4, lr}
 8008226:	4604      	mov	r4, r0
 8008228:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800822a:	2214      	movs	r2, #20
 800822c:	2100      	movs	r1, #0
 800822e:	a803      	add	r0, sp, #12
 8008230:	f006 fb6c 	bl	800e90c <memset>
  if(hcan->Instance==CAN)
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	4b16      	ldr	r3, [pc, #88]	; (8008290 <HAL_CAN_MspInit+0x6c>)
 8008238:	429a      	cmp	r2, r3
 800823a:	d126      	bne.n	800828a <HAL_CAN_MspInit+0x66>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800823c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008240:	4814      	ldr	r0, [pc, #80]	; (8008294 <HAL_CAN_MspInit+0x70>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008242:	69da      	ldr	r2, [r3, #28]
 8008244:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008248:	61da      	str	r2, [r3, #28]
 800824a:	69da      	ldr	r2, [r3, #28]
 800824c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8008250:	9201      	str	r2, [sp, #4]
 8008252:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800825a:	615a      	str	r2, [r3, #20]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008262:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008264:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008266:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008268:	2303      	movs	r3, #3
 800826a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800826e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008270:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 8008272:	2307      	movs	r3, #7
 8008274:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008276:	f001 fa59 	bl	800972c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800827a:	2200      	movs	r2, #0
 800827c:	2014      	movs	r0, #20
 800827e:	4611      	mov	r1, r2
 8008280:	f000 ffaa 	bl	80091d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8008284:	2014      	movs	r0, #20
 8008286:	f000 ffd9 	bl	800923c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800828a:	b008      	add	sp, #32
 800828c:	bd10      	pop	{r4, pc}
 800828e:	bf00      	nop
 8008290:	40006400 	.word	0x40006400
 8008294:	48000c00 	.word	0x48000c00

08008298 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008298:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800829a:	2214      	movs	r2, #20
{
 800829c:	b08a      	sub	sp, #40	; 0x28
 800829e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a0:	2100      	movs	r1, #0
 80082a2:	eb0d 0002 	add.w	r0, sp, r2
 80082a6:	f006 fb31 	bl	800e90c <memset>
  if(hdac->Instance==DAC1)
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	4a1c      	ldr	r2, [pc, #112]	; (8008320 <HAL_DAC_MspInit+0x88>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d11d      	bne.n	80082ee <HAL_DAC_MspInit+0x56>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80082b2:	4b1c      	ldr	r3, [pc, #112]	; (8008324 <HAL_DAC_MspInit+0x8c>)
 80082b4:	69da      	ldr	r2, [r3, #28]
 80082b6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80082ba:	61da      	str	r2, [r3, #28]
 80082bc:	69da      	ldr	r2, [r3, #28]
 80082be:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80082c2:	9201      	str	r2, [sp, #4]
 80082c4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082c6:	695a      	ldr	r2, [r3, #20]
 80082c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80082cc:	615a      	str	r2, [r3, #20]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d4:	9302      	str	r3, [sp, #8]
 80082d6:	9b02      	ldr	r3, [sp, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AO0_Pin|AO1_Pin;
 80082d8:	2330      	movs	r3, #48	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = AO2_Pin;
 80082da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 80082dc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082de:	2303      	movs	r3, #3
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 80082e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082e4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(AO2_GPIO_Port, &GPIO_InitStruct);
 80082e6:	f001 fa21 	bl	800972c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80082ea:	b00a      	add	sp, #40	; 0x28
 80082ec:	bd10      	pop	{r4, pc}
  else if(hdac->Instance==DAC2)
 80082ee:	4a0e      	ldr	r2, [pc, #56]	; (8008328 <HAL_DAC_MspInit+0x90>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d1fa      	bne.n	80082ea <HAL_DAC_MspInit+0x52>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <HAL_DAC_MspInit+0x8c>)
 80082f6:	69da      	ldr	r2, [r3, #28]
 80082f8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80082fc:	61da      	str	r2, [r3, #28]
 80082fe:	69da      	ldr	r2, [r3, #28]
 8008300:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8008304:	9203      	str	r2, [sp, #12]
 8008306:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008308:	695a      	ldr	r2, [r3, #20]
 800830a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800830e:	615a      	str	r2, [r3, #20]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = AO2_Pin;
 800831a:	2340      	movs	r3, #64	; 0x40
 800831c:	e7dd      	b.n	80082da <HAL_DAC_MspInit+0x42>
 800831e:	bf00      	nop
 8008320:	40007400 	.word	0x40007400
 8008324:	40021000 	.word	0x40021000
 8008328:	40009800 	.word	0x40009800

0800832c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800832c:	b508      	push	{r3, lr}
  if(hrtc->Instance==RTC)
 800832e:	6802      	ldr	r2, [r0, #0]
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <HAL_RTC_MspInit+0x38>)
 8008332:	429a      	cmp	r2, r3
 8008334:	d114      	bne.n	8008360 <HAL_RTC_MspInit+0x34>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008336:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800833a:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800833e:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <HAL_RTC_MspInit+0x3c>)
 8008340:	fab2 f282 	clz	r2, r2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	2201      	movs	r2, #1
 800834a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800834c:	2200      	movs	r2, #0
 800834e:	2029      	movs	r0, #41	; 0x29
 8008350:	4611      	mov	r1, r2
 8008352:	f000 ff41 	bl	80091d8 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800835a:	2029      	movs	r0, #41	; 0x29
 800835c:	f000 bf6e 	b.w	800923c <HAL_NVIC_EnableIRQ>
}
 8008360:	bd08      	pop	{r3, pc}
 8008362:	bf00      	nop
 8008364:	40002800 	.word	0x40002800
 8008368:	10908100 	.word	0x10908100

0800836c <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4605      	mov	r5, r0
 8008370:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008372:	2214      	movs	r2, #20
 8008374:	2100      	movs	r1, #0
 8008376:	a809      	add	r0, sp, #36	; 0x24
 8008378:	f006 fac8 	bl	800e90c <memset>
  if(hsdadc->Instance==SDADC1)
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	4a59      	ldr	r2, [pc, #356]	; (80084e4 <HAL_SDADC_MspInit+0x178>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d13e      	bne.n	8008402 <HAL_SDADC_MspInit+0x96>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8008384:	4b58      	ldr	r3, [pc, #352]	; (80084e8 <HAL_SDADC_MspInit+0x17c>)
    PE12     ------> SDADC1_AIN0P
    */
    GPIO_InitStruct.Pin = AI0_Pin|AI1_Pin|AI2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008386:	4859      	ldr	r0, [pc, #356]	; (80084ec <HAL_SDADC_MspInit+0x180>)
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800838e:	619a      	str	r2, [r3, #24]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8008396:	9201      	str	r2, [sp, #4]
 8008398:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800839a:	695a      	ldr	r2, [r3, #20]
 800839c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80083a0:	615a      	str	r2, [r3, #20]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80083a8:	9202      	str	r2, [sp, #8]
 80083aa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80083ac:	695a      	ldr	r2, [r3, #20]
 80083ae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80083b2:	615a      	str	r2, [r3, #20]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083bc:	2403      	movs	r4, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80083be:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083c0:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083c2:	2307      	movs	r3, #7
 80083c4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24

    GPIO_InitStruct.Pin = AI3_Pin|AI4_Pin|AI5_Pin|AI6_Pin
                          |AI7_Pin|AI8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c8:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083ca:	f001 f9af 	bl	800972c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AI3_Pin|AI4_Pin|AI5_Pin|AI6_Pin
 80083ce:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80083d2:	4847      	ldr	r0, [pc, #284]	; (80084f0 <HAL_SDADC_MspInit+0x184>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80083d6:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083d8:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80083dc:	f001 f9a6 	bl	800972c <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 80083e0:	4c44      	ldr	r4, [pc, #272]	; (80084f4 <HAL_SDADC_MspInit+0x188>)
 80083e2:	4b45      	ldr	r3, [pc, #276]	; (80084f8 <HAL_SDADC_MspInit+0x18c>)

    /* SDADC3 DMA Init */
    /* SDADC3 Init */
    hdma_sdadc3.Instance = DMA2_Channel5;
    hdma_sdadc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sdadc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80083e4:	60a6      	str	r6, [r4, #8]
    hdma_sdadc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083e6:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_sdadc3.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdadc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80083ea:	2280      	movs	r2, #128	; 0x80
 80083ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083f0:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_sdadc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_sdadc3.Init.Mode = DMA_CIRCULAR;
 80083f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083f8:	2320      	movs	r3, #32
 80083fa:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hdma_sdadc3.Init.Priority = DMA_PRIORITY_LOW;
 80083fe:	61e6      	str	r6, [r4, #28]
 8008400:	e030      	b.n	8008464 <HAL_SDADC_MspInit+0xf8>
  else if(hsdadc->Instance==SDADC2)
 8008402:	4a3e      	ldr	r2, [pc, #248]	; (80084fc <HAL_SDADC_MspInit+0x190>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d137      	bne.n	8008478 <HAL_SDADC_MspInit+0x10c>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 8008408:	4b37      	ldr	r3, [pc, #220]	; (80084e8 <HAL_SDADC_MspInit+0x17c>)
    hdma_sdadc2.Instance = DMA2_Channel4;
 800840a:	4c3d      	ldr	r4, [pc, #244]	; (8008500 <HAL_SDADC_MspInit+0x194>)
    __HAL_RCC_SDADC2_CLK_ENABLE();
 800840c:	699a      	ldr	r2, [r3, #24]
    hdma_sdadc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800840e:	4e3d      	ldr	r6, [pc, #244]	; (8008504 <HAL_SDADC_MspInit+0x198>)
    __HAL_RCC_SDADC2_CLK_ENABLE();
 8008410:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008414:	619a      	str	r2, [r3, #24]
 8008416:	699a      	ldr	r2, [r3, #24]
 8008418:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800841c:	9204      	str	r2, [sp, #16]
 800841e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8008426:	615a      	str	r2, [r3, #20]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800842e:	9305      	str	r3, [sp, #20]
 8008430:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008432:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8008436:	2303      	movs	r3, #3
 8008438:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800843c:	a909      	add	r1, sp, #36	; 0x24
 800843e:	482c      	ldr	r0, [pc, #176]	; (80084f0 <HAL_SDADC_MspInit+0x184>)
 8008440:	f001 f974 	bl	800972c <HAL_GPIO_Init>
    hdma_sdadc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008448:	f04f 0c80 	mov.w	ip, #128	; 0x80
    hdma_sdadc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800844c:	2300      	movs	r3, #0
    hdma_sdadc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800844e:	e9c4 c203 	strd	ip, r2, [r4, #12]
    hdma_sdadc2.Init.Mode = DMA_CIRCULAR;
 8008452:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8008456:	2220      	movs	r2, #32
    hdma_sdadc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008458:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_sdadc2.Init.Mode = DMA_CIRCULAR;
 800845c:	e9c4 e205 	strd	lr, r2, [r4, #20]
    hdma_sdadc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008460:	60a3      	str	r3, [r4, #8]
    hdma_sdadc2.Init.Priority = DMA_PRIORITY_LOW;
 8008462:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_sdadc3) != HAL_OK)
 8008464:	4620      	mov	r0, r4
 8008466:	f000 ff99 	bl	800939c <HAL_DMA_Init>
 800846a:	b108      	cbz	r0, 8008470 <HAL_SDADC_MspInit+0x104>
    {
      Error_Handler();
 800846c:	f7ff f816 	bl	800749c <Error_Handler>
    }

    __HAL_LINKDMA(hsdadc,hdma,hdma_sdadc3);
 8008470:	616c      	str	r4, [r5, #20]
 8008472:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 8008474:	b00e      	add	sp, #56	; 0x38
 8008476:	bd70      	pop	{r4, r5, r6, pc}
  else if(hsdadc->Instance==SDADC3)
 8008478:	4a23      	ldr	r2, [pc, #140]	; (8008508 <HAL_SDADC_MspInit+0x19c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d1fa      	bne.n	8008474 <HAL_SDADC_MspInit+0x108>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 800847e:	4b1a      	ldr	r3, [pc, #104]	; (80084e8 <HAL_SDADC_MspInit+0x17c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008480:	481a      	ldr	r0, [pc, #104]	; (80084ec <HAL_SDADC_MspInit+0x180>)
    __HAL_RCC_SDADC3_CLK_ENABLE();
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008488:	619a      	str	r2, [r3, #24]
 800848a:	699a      	ldr	r2, [r3, #24]
 800848c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8008490:	9206      	str	r2, [sp, #24]
 8008492:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008494:	695a      	ldr	r2, [r3, #20]
 8008496:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800849a:	615a      	str	r2, [r3, #20]
 800849c:	695a      	ldr	r2, [r3, #20]
 800849e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80084a2:	9207      	str	r2, [sp, #28]
 80084a4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80084a6:	695a      	ldr	r2, [r3, #20]
 80084a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80084ac:	615a      	str	r2, [r3, #20]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084b4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80084b6:	2403      	movs	r4, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80084b8:	9b08      	ldr	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084ba:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80084bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80084c0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c4:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084c6:	f001 f931 	bl	800972c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DAI1P_Pin|DAI1M_Pin|DAI2P_Pin|DAI2M_Pin
 80084ca:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084ce:	480f      	ldr	r0, [pc, #60]	; (800850c <HAL_SDADC_MspInit+0x1a0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084d2:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80084d4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084d8:	f001 f928 	bl	800972c <HAL_GPIO_Init>
    hdma_sdadc3.Instance = DMA2_Channel5;
 80084dc:	4c0c      	ldr	r4, [pc, #48]	; (8008510 <HAL_SDADC_MspInit+0x1a4>)
 80084de:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <HAL_SDADC_MspInit+0x1a8>)
 80084e0:	e780      	b.n	80083e4 <HAL_SDADC_MspInit+0x78>
 80084e2:	bf00      	nop
 80084e4:	40016000 	.word	0x40016000
 80084e8:	40021000 	.word	0x40021000
 80084ec:	48000400 	.word	0x48000400
 80084f0:	48001000 	.word	0x48001000
 80084f4:	200020fc 	.word	0x200020fc
 80084f8:	40020430 	.word	0x40020430
 80084fc:	40016400 	.word	0x40016400
 8008500:	20002140 	.word	0x20002140
 8008504:	40020444 	.word	0x40020444
 8008508:	40016800 	.word	0x40016800
 800850c:	48000c00 	.word	0x48000c00
 8008510:	20002184 	.word	0x20002184
 8008514:	40020458 	.word	0x40020458

08008518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4604      	mov	r4, r0
 800851c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800851e:	2214      	movs	r2, #20
 8008520:	2100      	movs	r1, #0
 8008522:	a803      	add	r0, sp, #12
 8008524:	f006 f9f2 	bl	800e90c <memset>
  if(hspi->Instance==SPI2)
 8008528:	6822      	ldr	r2, [r4, #0]
 800852a:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <HAL_SPI_MspInit+0x88>)
 800852c:	429a      	cmp	r2, r3
 800852e:	d134      	bne.n	800859a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008530:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008534:	481b      	ldr	r0, [pc, #108]	; (80085a4 <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008536:	69da      	ldr	r2, [r3, #28]
 8008538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800853c:	61da      	str	r2, [r3, #28]
 800853e:	69da      	ldr	r2, [r3, #28]
 8008540:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008544:	9200      	str	r2, [sp, #0]
 8008546:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800854e:	615a      	str	r2, [r3, #20]
 8008550:	695a      	ldr	r2, [r3, #20]
 8008552:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8008556:	9201      	str	r2, [sp, #4]
 8008558:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800855a:	695a      	ldr	r2, [r3, #20]
 800855c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008560:	615a      	str	r2, [r3, #20]
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008568:	9302      	str	r3, [sp, #8]
 800856a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800856c:	2602      	movs	r6, #2
 800856e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008572:	2503      	movs	r5, #3
 8008574:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008576:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008578:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800857c:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008580:	f001 f8d4 	bl	800972c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8008584:	2318      	movs	r3, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008586:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800858a:	4807      	ldr	r0, [pc, #28]	; (80085a8 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800858c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008590:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008592:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008596:	f001 f8c9 	bl	800972c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800859a:	b008      	add	sp, #32
 800859c:	bd70      	pop	{r4, r5, r6, pc}
 800859e:	bf00      	nop
 80085a0:	40003800 	.word	0x40003800
 80085a4:	48000400 	.word	0x48000400
 80085a8:	48000c00 	.word	0x48000c00

080085ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	4604      	mov	r4, r0
 80085b0:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b2:	2214      	movs	r2, #20
 80085b4:	2100      	movs	r1, #0
 80085b6:	a80b      	add	r0, sp, #44	; 0x2c
 80085b8:	f006 f9a8 	bl	800e90c <memset>
  if(htim_base->Instance==TIM2)
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c2:	d10c      	bne.n	80085de <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80085c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80085c8:	69da      	ldr	r2, [r3, #28]
 80085ca:	f042 0201 	orr.w	r2, r2, #1
 80085ce:	61da      	str	r2, [r3, #28]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80085da:	b010      	add	sp, #64	; 0x40
 80085dc:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_base->Instance==TIM5)
 80085de:	4a74      	ldr	r2, [pc, #464]	; (80087b0 <HAL_TIM_Base_MspInit+0x204>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d10a      	bne.n	80085fa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80085e4:	4b73      	ldr	r3, [pc, #460]	; (80087b4 <HAL_TIM_Base_MspInit+0x208>)
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	f042 0208 	orr.w	r2, r2, #8
 80085ec:	61da      	str	r2, [r3, #28]
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	e7ef      	b.n	80085da <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM6)
 80085fa:	4a6f      	ldr	r2, [pc, #444]	; (80087b8 <HAL_TIM_Base_MspInit+0x20c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d10a      	bne.n	8008616 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008600:	4b6c      	ldr	r3, [pc, #432]	; (80087b4 <HAL_TIM_Base_MspInit+0x208>)
 8008602:	69da      	ldr	r2, [r3, #28]
 8008604:	f042 0210 	orr.w	r2, r2, #16
 8008608:	61da      	str	r2, [r3, #28]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	9302      	str	r3, [sp, #8]
 8008612:	9b02      	ldr	r3, [sp, #8]
 8008614:	e7e1      	b.n	80085da <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM12)
 8008616:	4a69      	ldr	r2, [pc, #420]	; (80087bc <HAL_TIM_Base_MspInit+0x210>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d10a      	bne.n	8008632 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800861c:	4b65      	ldr	r3, [pc, #404]	; (80087b4 <HAL_TIM_Base_MspInit+0x208>)
 800861e:	69da      	ldr	r2, [r3, #28]
 8008620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008624:	61da      	str	r2, [r3, #28]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862c:	9303      	str	r3, [sp, #12]
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	e7d3      	b.n	80085da <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM13)
 8008632:	4a63      	ldr	r2, [pc, #396]	; (80087c0 <HAL_TIM_Base_MspInit+0x214>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10a      	bne.n	800864e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8008638:	4b5e      	ldr	r3, [pc, #376]	; (80087b4 <HAL_TIM_Base_MspInit+0x208>)
 800863a:	69da      	ldr	r2, [r3, #28]
 800863c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008640:	61da      	str	r2, [r3, #28]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	9b04      	ldr	r3, [sp, #16]
 800864c:	e7c5      	b.n	80085da <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM15)
 800864e:	4a5d      	ldr	r2, [pc, #372]	; (80087c4 <HAL_TIM_Base_MspInit+0x218>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d142      	bne.n	80086da <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008654:	4b57      	ldr	r3, [pc, #348]	; (80087b4 <HAL_TIM_Base_MspInit+0x208>)
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8008656:	4d5c      	ldr	r5, [pc, #368]	; (80087c8 <HAL_TIM_Base_MspInit+0x21c>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008658:	699a      	ldr	r2, [r3, #24]
 800865a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800865e:	619a      	str	r2, [r3, #24]
 8008660:	699a      	ldr	r2, [r3, #24]
 8008662:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8008666:	9205      	str	r2, [sp, #20]
 8008668:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800866a:	695a      	ldr	r2, [r3, #20]
 800866c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008670:	615a      	str	r2, [r3, #20]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008678:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800867a:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800867c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800867e:	2302      	movs	r3, #2
 8008680:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008684:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8008686:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800868c:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800868e:	f001 f84d 	bl	800972c <HAL_GPIO_Init>
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008692:	2080      	movs	r0, #128	; 0x80
 8008694:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008698:	494c      	ldr	r1, [pc, #304]	; (80087cc <HAL_TIM_Base_MspInit+0x220>)
 800869a:	2300      	movs	r3, #0
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800869c:	e9c5 0203 	strd	r0, r2, [r5, #12]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_CIRCULAR;
 80086a0:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80086a4:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80086a6:	4628      	mov	r0, r5
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086a8:	e9c5 1300 	strd	r1, r3, [r5]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_CIRCULAR;
 80086ac:	e9c5 6205 	strd	r6, r2, [r5, #20]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80086b0:	60ab      	str	r3, [r5, #8]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80086b2:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80086b4:	f000 fe72 	bl	800939c <HAL_DMA_Init>
 80086b8:	b108      	cbz	r0, 80086be <HAL_TIM_Base_MspInit+0x112>
      Error_Handler();
 80086ba:	f7fe feef 	bl	800749c <Error_Handler>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80086be:	2200      	movs	r2, #0
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80086c0:	e9c4 5508 	strd	r5, r5, [r4, #32]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 80086c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80086c8:	4611      	mov	r1, r2
 80086ca:	2018      	movs	r0, #24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80086cc:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80086ce:	f000 fd83 	bl	80091d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80086d2:	2018      	movs	r0, #24
 80086d4:	f000 fdb2 	bl	800923c <HAL_NVIC_EnableIRQ>
 80086d8:	e77f      	b.n	80085da <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM16)
 80086da:	4a3d      	ldr	r2, [pc, #244]	; (80087d0 <HAL_TIM_Base_MspInit+0x224>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d137      	bne.n	8008750 <HAL_TIM_Base_MspInit+0x1a4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80086e0:	4b34      	ldr	r3, [pc, #208]	; (80087b4 <HAL_TIM_Base_MspInit+0x208>)
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 80086e2:	483c      	ldr	r0, [pc, #240]	; (80087d4 <HAL_TIM_Base_MspInit+0x228>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 80086e4:	699a      	ldr	r2, [r3, #24]
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 80086e6:	4d3c      	ldr	r5, [pc, #240]	; (80087d8 <HAL_TIM_Base_MspInit+0x22c>)
    __HAL_RCC_TIM16_CLK_ENABLE();
 80086e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80086ec:	619a      	str	r2, [r3, #24]
 80086ee:	699a      	ldr	r2, [r3, #24]
 80086f0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80086f4:	9207      	str	r2, [sp, #28]
 80086f6:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086f8:	695a      	ldr	r2, [r3, #20]
 80086fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80086fe:	615a      	str	r2, [r3, #20]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008706:	9308      	str	r3, [sp, #32]
 8008708:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800870a:	f44f 7680 	mov.w	r6, #256	; 0x100
 800870e:	2302      	movs	r3, #2
 8008710:	e9cd 630b 	strd	r6, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 8008714:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8008716:	2301      	movs	r3, #1
 8008718:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(IC1_GPIO_Port, &GPIO_InitStruct);
 800871a:	f001 f807 	bl	800972c <HAL_GPIO_Init>
    hdma_tim16_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800871e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 80087e8 <HAL_TIM_Base_MspInit+0x23c>
 8008722:	2300      	movs	r3, #0
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8008724:	2280      	movs	r2, #128	; 0x80
    hdma_tim16_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008726:	e9c5 e300 	strd	lr, r3, [r5]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800872a:	e9c5 2603 	strd	r2, r6, [r5, #12]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800872e:	60ab      	str	r3, [r5, #8]
    hdma_tim17_ch1_up.Init.Mode = DMA_CIRCULAR;
 8008730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008734:	2220      	movs	r2, #32
 8008736:	e9c5 1205 	strd	r1, r2, [r5, #20]
    hdma_tim17_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800873a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim17_ch1_up) != HAL_OK)
 800873c:	4628      	mov	r0, r5
 800873e:	f000 fe2d 	bl	800939c <HAL_DMA_Init>
 8008742:	b108      	cbz	r0, 8008748 <HAL_TIM_Base_MspInit+0x19c>
      Error_Handler();
 8008744:	f7fe feaa 	bl	800749c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim17_ch1_up);
 8008748:	e9c4 5508 	strd	r5, r5, [r4, #32]
 800874c:	626c      	str	r4, [r5, #36]	; 0x24
}
 800874e:	e744      	b.n	80085da <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM17)
 8008750:	4a22      	ldr	r2, [pc, #136]	; (80087dc <HAL_TIM_Base_MspInit+0x230>)
 8008752:	4293      	cmp	r3, r2
 8008754:	f47f af41 	bne.w	80085da <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008758:	4b16      	ldr	r3, [pc, #88]	; (80087b4 <HAL_TIM_Base_MspInit+0x208>)
    hdma_tim17_ch1_up.Instance = DMA1_Channel1;
 800875a:	4d21      	ldr	r5, [pc, #132]	; (80087e0 <HAL_TIM_Base_MspInit+0x234>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 800875c:	699a      	ldr	r2, [r3, #24]
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800875e:	4e21      	ldr	r6, [pc, #132]	; (80087e4 <HAL_TIM_Base_MspInit+0x238>)
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008760:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008764:	619a      	str	r2, [r3, #24]
 8008766:	699a      	ldr	r2, [r3, #24]
 8008768:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800876c:	9209      	str	r2, [sp, #36]	; 0x24
 800876e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008770:	695a      	ldr	r2, [r3, #20]
 8008772:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008776:	615a      	str	r2, [r3, #20]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800877e:	930a      	str	r3, [sp, #40]	; 0x28
 8008780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008782:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008786:	2302      	movs	r3, #2
 8008788:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 800878c:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800878e:	2301      	movs	r3, #1
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 8008790:	4810      	ldr	r0, [pc, #64]	; (80087d4 <HAL_TIM_Base_MspInit+0x228>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8008792:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(IC0_GPIO_Port, &GPIO_InitStruct);
 8008794:	f000 ffca 	bl	800972c <HAL_GPIO_Init>
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008798:	2300      	movs	r3, #0
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800879a:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800879e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_tim17_ch1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087a2:	e9c5 6300 	strd	r6, r3, [r5]
    hdma_tim17_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80087a6:	e9c5 c203 	strd	ip, r2, [r5, #12]
    hdma_tim17_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80087aa:	60ab      	str	r3, [r5, #8]
    hdma_tim17_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 80087ac:	e7c0      	b.n	8008730 <HAL_TIM_Base_MspInit+0x184>
 80087ae:	bf00      	nop
 80087b0:	40000c00 	.word	0x40000c00
 80087b4:	40021000 	.word	0x40021000
 80087b8:	40001000 	.word	0x40001000
 80087bc:	40001800 	.word	0x40001800
 80087c0:	40001c00 	.word	0x40001c00
 80087c4:	40014000 	.word	0x40014000
 80087c8:	200021c8 	.word	0x200021c8
 80087cc:	40020058 	.word	0x40020058
 80087d0:	40014400 	.word	0x40014400
 80087d4:	48000400 	.word	0x48000400
 80087d8:	2000220c 	.word	0x2000220c
 80087dc:	40014800 	.word	0x40014800
 80087e0:	20002250 	.word	0x20002250
 80087e4:	40020008 	.word	0x40020008
 80087e8:	40020030 	.word	0x40020030

080087ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80087ec:	b510      	push	{r4, lr}
 80087ee:	4604      	mov	r4, r0
 80087f0:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f2:	2214      	movs	r2, #20
 80087f4:	2100      	movs	r1, #0
 80087f6:	a807      	add	r0, sp, #28
 80087f8:	f006 f888 	bl	800e90c <memset>
  if(htim_encoder->Instance==TIM3)
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	4a2c      	ldr	r2, [pc, #176]	; (80088b0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d11a      	bne.n	800883a <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008804:	4b2b      	ldr	r3, [pc, #172]	; (80088b4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008806:	69da      	ldr	r2, [r3, #28]
 8008808:	f042 0202 	orr.w	r2, r2, #2
 800880c:	61da      	str	r2, [r3, #28]
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	f002 0202 	and.w	r2, r2, #2
 8008814:	9201      	str	r2, [sp, #4]
 8008816:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008818:	695a      	ldr	r2, [r3, #20]
 800881a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800881e:	615a      	str	r2, [r3, #20]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008826:	9302      	str	r3, [sp, #8]
 8008828:	9b02      	ldr	r3, [sp, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = E2__Pin|E2_C7_Pin;
 800882a:	23c0      	movs	r3, #192	; 0xc0
    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**TIM19 GPIO Configuration
    PC10     ------> TIM19_CH1
    PC11     ------> TIM19_CH2
    */
    GPIO_InitStruct.Pin = E1__Pin|E1_C11_Pin;
 800882c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800882e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008830:	4821      	ldr	r0, [pc, #132]	; (80088b8 <HAL_TIM_Encoder_MspInit+0xcc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008832:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
 8008834:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008836:	a907      	add	r1, sp, #28
 8008838:	e01c      	b.n	8008874 <HAL_TIM_Encoder_MspInit+0x88>
  else if(htim_encoder->Instance==TIM4)
 800883a:	4a20      	ldr	r2, [pc, #128]	; (80088bc <HAL_TIM_Encoder_MspInit+0xd0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d11d      	bne.n	800887c <HAL_TIM_Encoder_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008840:	4b1c      	ldr	r3, [pc, #112]	; (80088b4 <HAL_TIM_Encoder_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008842:	481f      	ldr	r0, [pc, #124]	; (80088c0 <HAL_TIM_Encoder_MspInit+0xd4>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008844:	69da      	ldr	r2, [r3, #28]
 8008846:	f042 0204 	orr.w	r2, r2, #4
 800884a:	61da      	str	r2, [r3, #28]
 800884c:	69da      	ldr	r2, [r3, #28]
 800884e:	f002 0204 	and.w	r2, r2, #4
 8008852:	9203      	str	r2, [sp, #12]
 8008854:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008856:	695a      	ldr	r2, [r3, #20]
 8008858:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800885c:	615a      	str	r2, [r3, #20]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008864:	9304      	str	r3, [sp, #16]
 8008866:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008868:	22c0      	movs	r2, #192	; 0xc0
 800886a:	2302      	movs	r3, #2
 800886c:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008870:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008872:	a907      	add	r1, sp, #28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008874:	f000 ff5a 	bl	800972c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM19_MspInit 1 */

  /* USER CODE END TIM19_MspInit 1 */
  }

}
 8008878:	b00c      	add	sp, #48	; 0x30
 800887a:	bd10      	pop	{r4, pc}
  else if(htim_encoder->Instance==TIM19)
 800887c:	4a11      	ldr	r2, [pc, #68]	; (80088c4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d1fa      	bne.n	8008878 <HAL_TIM_Encoder_MspInit+0x8c>
    __HAL_RCC_TIM19_CLK_ENABLE();
 8008882:	4b0c      	ldr	r3, [pc, #48]	; (80088b4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800888a:	619a      	str	r2, [r3, #24]
 800888c:	699a      	ldr	r2, [r3, #24]
 800888e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8008892:	9205      	str	r2, [sp, #20]
 8008894:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008896:	695a      	ldr	r2, [r3, #20]
 8008898:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800889c:	615a      	str	r2, [r3, #20]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088a4:	9306      	str	r3, [sp, #24]
 80088a6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = E1__Pin|E1_C11_Pin;
 80088a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80088ac:	e7be      	b.n	800882c <HAL_TIM_Encoder_MspInit+0x40>
 80088ae:	bf00      	nop
 80088b0:	40000400 	.word	0x40000400
 80088b4:	40021000 	.word	0x40021000
 80088b8:	48000800 	.word	0x48000800
 80088bc:	40000800 	.word	0x40000800
 80088c0:	48000400 	.word	0x48000400
 80088c4:	40015c00 	.word	0x40015c00

080088c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80088c8:	b510      	push	{r4, lr}
 80088ca:	4604      	mov	r4, r0
 80088cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088ce:	2214      	movs	r2, #20
 80088d0:	2100      	movs	r1, #0
 80088d2:	a803      	add	r0, sp, #12
 80088d4:	f006 f81a 	bl	800e90c <memset>
  if(htim->Instance==TIM2)
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088de:	d125      	bne.n	800892c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088e0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA1     ------> TIM2_CH2
    PA9     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088e4:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088e6:	695a      	ldr	r2, [r3, #20]
 80088e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80088ec:	615a      	str	r2, [r3, #20]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088fe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008900:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008906:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008908:	f000 ff10 	bl	800972c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM6_Pin|PWM7_Pin;
 800890c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008910:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008914:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008916:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800891a:	230a      	movs	r3, #10
 800891c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800891e:	a903      	add	r1, sp, #12
 8008920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008924:	f000 ff02 	bl	800972c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008928:	b008      	add	sp, #32
 800892a:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM5)
 800892c:	4a0a      	ldr	r2, [pc, #40]	; (8008958 <HAL_TIM_MspPostInit+0x90>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d1fa      	bne.n	8008928 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008932:	4b0a      	ldr	r3, [pc, #40]	; (800895c <HAL_TIM_MspPostInit+0x94>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008934:	480a      	ldr	r0, [pc, #40]	; (8008960 <HAL_TIM_MspPostInit+0x98>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008936:	695a      	ldr	r2, [r3, #20]
 8008938:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800893c:	615a      	str	r2, [r3, #20]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008944:	9302      	str	r3, [sp, #8]
 8008946:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008948:	220f      	movs	r2, #15
 800894a:	2302      	movs	r3, #2
 800894c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008950:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008952:	a903      	add	r1, sp, #12
 8008954:	e7e6      	b.n	8008924 <HAL_TIM_MspPostInit+0x5c>
 8008956:	bf00      	nop
 8008958:	40000c00 	.word	0x40000c00
 800895c:	40021000 	.word	0x40021000
 8008960:	48000800 	.word	0x48000800

08008964 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008964:	e7fe      	b.n	8008964 <NMI_Handler>

08008966 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008966:	e7fe      	b.n	8008966 <HardFault_Handler>

08008968 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008968:	e7fe      	b.n	8008968 <MemManage_Handler>

0800896a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800896a:	e7fe      	b.n	800896a <BusFault_Handler>

0800896c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800896c:	e7fe      	b.n	800896c <UsageFault_Handler>

0800896e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800896e:	4770      	bx	lr

08008970 <DebugMon_Handler>:
 8008970:	4770      	bx	lr

08008972 <PendSV_Handler>:
 8008972:	4770      	bx	lr

08008974 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008974:	f000 b8fe 	b.w	8008b74 <HAL_IncTick>

08008978 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1_up);
 8008978:	4801      	ldr	r0, [pc, #4]	; (8008980 <DMA1_Channel1_IRQHandler+0x8>)
 800897a:	f000 bd70 	b.w	800945e <HAL_DMA_IRQHandler>
 800897e:	bf00      	nop
 8008980:	20002250 	.word	0x20002250

08008984 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8008984:	4801      	ldr	r0, [pc, #4]	; (800898c <DMA1_Channel3_IRQHandler+0x8>)
 8008986:	f000 bd6a 	b.w	800945e <HAL_DMA_IRQHandler>
 800898a:	bf00      	nop
 800898c:	2000220c 	.word	0x2000220c

08008990 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8008990:	4801      	ldr	r0, [pc, #4]	; (8008998 <DMA1_Channel5_IRQHandler+0x8>)
 8008992:	f000 bd64 	b.w	800945e <HAL_DMA_IRQHandler>
 8008996:	bf00      	nop
 8008998:	200021c8 	.word	0x200021c8

0800899c <CAN_RX0_IRQHandler>:
void CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800899c:	4801      	ldr	r0, [pc, #4]	; (80089a4 <CAN_RX0_IRQHandler+0x8>)
 800899e:	f000 bb0b 	b.w	8008fb8 <HAL_CAN_IRQHandler>
 80089a2:	bf00      	nop
 80089a4:	200020ac 	.word	0x200020ac

080089a8 <TIM15_IRQHandler>:
void TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80089a8:	4801      	ldr	r0, [pc, #4]	; (80089b0 <TIM15_IRQHandler+0x8>)
 80089aa:	f003 bc71 	b.w	800c290 <HAL_TIM_IRQHandler>
 80089ae:	bf00      	nop
 80089b0:	2000247c 	.word	0x2000247c

080089b4 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <RTC_Alarm_IRQHandler+0x8>)
 80089b6:	f002 ba5f 	b.w	800ae78 <HAL_RTC_AlarmIRQHandler>
 80089ba:	bf00      	nop
 80089bc:	20002294 	.word	0x20002294

080089c0 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 80089c0:	4801      	ldr	r0, [pc, #4]	; (80089c8 <DMA2_Channel3_IRQHandler+0x8>)
 80089c2:	f000 bd4c 	b.w	800945e <HAL_DMA_IRQHandler>
 80089c6:	bf00      	nop
 80089c8:	200020fc 	.word	0x200020fc

080089cc <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc2);
 80089cc:	4801      	ldr	r0, [pc, #4]	; (80089d4 <DMA2_Channel4_IRQHandler+0x8>)
 80089ce:	f000 bd46 	b.w	800945e <HAL_DMA_IRQHandler>
 80089d2:	bf00      	nop
 80089d4:	20002140 	.word	0x20002140

080089d8 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc3);
 80089d8:	4801      	ldr	r0, [pc, #4]	; (80089e0 <DMA2_Channel5_IRQHandler+0x8>)
 80089da:	f000 bd40 	b.w	800945e <HAL_DMA_IRQHandler>
 80089de:	bf00      	nop
 80089e0:	20002184 	.word	0x20002184

080089e4 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80089e4:	4801      	ldr	r0, [pc, #4]	; (80089ec <USB_LP_IRQHandler+0x8>)
 80089e6:	f000 bffd 	b.w	80099e4 <HAL_PCD_IRQHandler>
 80089ea:	bf00      	nop
 80089ec:	20003438 	.word	0x20003438

080089f0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80089f0:	2001      	movs	r0, #1
 80089f2:	4770      	bx	lr

080089f4 <_kill>:

int _kill(int pid, int sig)
{
 80089f4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80089f6:	f005 ff37 	bl	800e868 <__errno>
 80089fa:	2316      	movs	r3, #22
 80089fc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008a02:	bd08      	pop	{r3, pc}

08008a04 <_exit>:

void _exit (int status)
{
 8008a04:	b508      	push	{r3, lr}
	errno = EINVAL;
 8008a06:	f005 ff2f 	bl	800e868 <__errno>
 8008a0a:	2316      	movs	r3, #22
 8008a0c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8008a0e:	e7fe      	b.n	8008a0e <_exit+0xa>

08008a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	460d      	mov	r5, r1
 8008a14:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a16:	460e      	mov	r6, r1
 8008a18:	1b73      	subs	r3, r6, r5
 8008a1a:	429c      	cmp	r4, r3
 8008a1c:	dc01      	bgt.n	8008a22 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8008a1e:	4620      	mov	r0, r4
 8008a20:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8008a22:	f3af 8000 	nop.w
 8008a26:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a2a:	e7f5      	b.n	8008a18 <_read+0x8>

08008a2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	460d      	mov	r5, r1
 8008a30:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a32:	460e      	mov	r6, r1
 8008a34:	1b73      	subs	r3, r6, r5
 8008a36:	429c      	cmp	r4, r3
 8008a38:	dc01      	bgt.n	8008a3e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8008a3e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8008a42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a46:	e7f5      	b.n	8008a34 <_write+0x8>

08008a48 <_close>:

int _close(int file)
{
	return -1;
}
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	4770      	bx	lr

08008a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8008a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a52:	604b      	str	r3, [r1, #4]
	return 0;
}
 8008a54:	2000      	movs	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8008a58:	2001      	movs	r0, #1
 8008a5a:	4770      	bx	lr

08008a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	4770      	bx	lr

08008a60 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a60:	4a0b      	ldr	r2, [pc, #44]	; (8008a90 <_sbrk+0x30>)
 8008a62:	6811      	ldr	r1, [r2, #0]
{
 8008a64:	b510      	push	{r4, lr}
 8008a66:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8008a68:	b909      	cbnz	r1, 8008a6e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8008a6a:	490a      	ldr	r1, [pc, #40]	; (8008a94 <_sbrk+0x34>)
 8008a6c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a6e:	6810      	ldr	r0, [r2, #0]
 8008a70:	4909      	ldr	r1, [pc, #36]	; (8008a98 <_sbrk+0x38>)
 8008a72:	4c0a      	ldr	r4, [pc, #40]	; (8008a9c <_sbrk+0x3c>)
 8008a74:	4403      	add	r3, r0
 8008a76:	1b09      	subs	r1, r1, r4
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	d906      	bls.n	8008a8a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8008a7c:	f005 fef4 	bl	800e868 <__errno>
 8008a80:	230c      	movs	r3, #12
 8008a82:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8008a88:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8008a8a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8008a8c:	e7fc      	b.n	8008a88 <_sbrk+0x28>
 8008a8e:	bf00      	nop
 8008a90:	20002778 	.word	0x20002778
 8008a94:	20003958 	.word	0x20003958
 8008a98:	20006000 	.word	0x20006000
 8008a9c:	00000400 	.word	0x00000400

08008aa0 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008aa0:	4a03      	ldr	r2, [pc, #12]	; (8008ab0 <SystemInit+0x10>)
 8008aa2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008aa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008aaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008aae:	4770      	bx	lr
 8008ab0:	e000ed00 	.word	0xe000ed00

08008ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008aec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ab8:	480d      	ldr	r0, [pc, #52]	; (8008af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8008aba:	490e      	ldr	r1, [pc, #56]	; (8008af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008abc:	4a0e      	ldr	r2, [pc, #56]	; (8008af8 <LoopForever+0xe>)
  movs r3, #0
 8008abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ac0:	e002      	b.n	8008ac8 <LoopCopyDataInit>

08008ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ac6:	3304      	adds	r3, #4

08008ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008acc:	d3f9      	bcc.n	8008ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ace:	4a0b      	ldr	r2, [pc, #44]	; (8008afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ad0:	4c0b      	ldr	r4, [pc, #44]	; (8008b00 <LoopForever+0x16>)
  movs r3, #0
 8008ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ad4:	e001      	b.n	8008ada <LoopFillZerobss>

08008ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ad8:	3204      	adds	r2, #4

08008ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008adc:	d3fb      	bcc.n	8008ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008ade:	f7ff ffdf 	bl	8008aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008ae2:	f005 fec7 	bl	800e874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008ae6:	f7fe fd4d 	bl	8007584 <main>

08008aea <LoopForever>:

LoopForever:
    b LoopForever
 8008aea:	e7fe      	b.n	8008aea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008aec:	20006000 	.word	0x20006000
  ldr r0, =_sdata
 8008af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008af4:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8008af8:	08015234 	.word	0x08015234
  ldr r2, =_sbss
 8008afc:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8008b00:	20003954 	.word	0x20003954

08008b04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008b04:	e7fe      	b.n	8008b04 <ADC1_IRQHandler>
	...

08008b08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b08:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008b0a:	4a0e      	ldr	r2, [pc, #56]	; (8008b44 <HAL_InitTick+0x3c>)
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <HAL_InitTick+0x40>)
{
 8008b0e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008b10:	7818      	ldrb	r0, [r3, #0]
 8008b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b16:	fbb3 f3f0 	udiv	r3, r3, r0
 8008b1a:	6810      	ldr	r0, [r2, #0]
 8008b1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008b20:	f000 fb9a 	bl	8009258 <HAL_SYSTICK_Config>
 8008b24:	4604      	mov	r4, r0
 8008b26:	b958      	cbnz	r0, 8008b40 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b28:	2d0f      	cmp	r5, #15
 8008b2a:	d809      	bhi.n	8008b40 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	4629      	mov	r1, r5
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	f000 fb50 	bl	80091d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008b38:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <HAL_InitTick+0x44>)
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008b40:	2001      	movs	r0, #1
 8008b42:	e7fc      	b.n	8008b3e <HAL_InitTick+0x36>
 8008b44:	20000008 	.word	0x20000008
 8008b48:	2000000c 	.word	0x2000000c
 8008b4c:	20000010 	.word	0x20000010

08008b50 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b50:	4a07      	ldr	r2, [pc, #28]	; (8008b70 <HAL_Init+0x20>)
{
 8008b52:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b54:	6813      	ldr	r3, [r2, #0]
 8008b56:	f043 0310 	orr.w	r3, r3, #16
 8008b5a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b5c:	2003      	movs	r0, #3
 8008b5e:	f000 fb29 	bl	80091b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b62:	2000      	movs	r0, #0
 8008b64:	f7ff ffd0 	bl	8008b08 <HAL_InitTick>
  HAL_MspInit();
 8008b68:	f7ff fb44 	bl	80081f4 <HAL_MspInit>
}
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	bd08      	pop	{r3, pc}
 8008b70:	40022000 	.word	0x40022000

08008b74 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008b74:	4a03      	ldr	r2, [pc, #12]	; (8008b84 <HAL_IncTick+0x10>)
 8008b76:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <HAL_IncTick+0x14>)
 8008b78:	6811      	ldr	r1, [r2, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	440b      	add	r3, r1
 8008b7e:	6013      	str	r3, [r2, #0]
}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	2000277c 	.word	0x2000277c
 8008b88:	2000000c 	.word	0x2000000c

08008b8c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8008b8c:	4b01      	ldr	r3, [pc, #4]	; (8008b94 <HAL_GetTick+0x8>)
 8008b8e:	6818      	ldr	r0, [r3, #0]
}
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	2000277c 	.word	0x2000277c

08008b98 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008b9c:	f7ff fff6 	bl	8008b8c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ba0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008ba2:	bf1c      	itt	ne
 8008ba4:	4b05      	ldrne	r3, [pc, #20]	; (8008bbc <HAL_Delay+0x24>)
 8008ba6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8008ba8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8008baa:	bf18      	it	ne
 8008bac:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8008bae:	f7ff ffed 	bl	8008b8c <HAL_GetTick>
 8008bb2:	1b43      	subs	r3, r0, r5
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	d3fa      	bcc.n	8008bae <HAL_Delay+0x16>
  {
  }
}
 8008bb8:	bd38      	pop	{r3, r4, r5, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000000c 	.word	0x2000000c

08008bc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008bc0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d06e      	beq.n	8008ca6 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008bc8:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008bcc:	b90b      	cbnz	r3, 8008bd2 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008bce:	f7ff fb29 	bl	8008224 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008bd2:	6822      	ldr	r2, [r4, #0]
 8008bd4:	6813      	ldr	r3, [r2, #0]
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008bdc:	f7ff ffd6 	bl	8008b8c <HAL_GetTick>
 8008be0:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	07d1      	lsls	r1, r2, #31
 8008be8:	d551      	bpl.n	8008c8e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	f022 0202 	bic.w	r2, r2, #2
 8008bf0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008bf2:	f7ff ffcb 	bl	8008b8c <HAL_GetTick>
 8008bf6:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	0792      	lsls	r2, r2, #30
 8008bfe:	d454      	bmi.n	8008caa <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008c00:	7e22      	ldrb	r2, [r4, #24]
 8008c02:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	bf0c      	ite	eq
 8008c08:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008c0c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8008c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008c12:	7e62      	ldrb	r2, [r4, #25]
 8008c14:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	bf0c      	ite	eq
 8008c1a:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008c1e:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8008c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008c24:	7ea2      	ldrb	r2, [r4, #26]
 8008c26:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	bf0c      	ite	eq
 8008c2c:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008c30:	f022 0220 	bicne.w	r2, r2, #32
 8008c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008c36:	7ee2      	ldrb	r2, [r4, #27]
 8008c38:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	bf0c      	ite	eq
 8008c3e:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008c42:	f042 0210 	orrne.w	r2, r2, #16
 8008c46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008c48:	7f22      	ldrb	r2, [r4, #28]
 8008c4a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	bf0c      	ite	eq
 8008c50:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c54:	f022 0208 	bicne.w	r2, r2, #8
 8008c58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008c5a:	7f62      	ldrb	r2, [r4, #29]
 8008c5c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	bf0c      	ite	eq
 8008c62:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c66:	f022 0204 	bicne.w	r2, r2, #4
 8008c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008c6c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	6921      	ldr	r1, [r4, #16]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	6961      	ldr	r1, [r4, #20]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	6861      	ldr	r1, [r4, #4]
 8008c7c:	3901      	subs	r1, #1
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008c82:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008c84:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008c86:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8008c88:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8008c8c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008c8e:	f7ff ff7d 	bl	8008b8c <HAL_GetTick>
 8008c92:	1b40      	subs	r0, r0, r5
 8008c94:	280a      	cmp	r0, #10
 8008c96:	d9a4      	bls.n	8008be2 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8008ca0:	2305      	movs	r3, #5
 8008ca2:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	e7f0      	b.n	8008c8c <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008caa:	f7ff ff6f 	bl	8008b8c <HAL_GetTick>
 8008cae:	1b40      	subs	r0, r0, r5
 8008cb0:	280a      	cmp	r0, #10
 8008cb2:	d9a1      	bls.n	8008bf8 <HAL_CAN_Init+0x38>
 8008cb4:	e7f0      	b.n	8008c98 <HAL_CAN_Init+0xd8>

08008cb6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8008cb6:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008cb8:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d862      	bhi.n	8008d88 <HAL_CAN_ConfigFilter+0xd2>
  CAN_TypeDef *can_ip = hcan->Instance;
 8008cc2:	6803      	ldr	r3, [r0, #0]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008cc4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008cc8:	f042 0201 	orr.w	r2, r2, #1
 8008ccc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008cd0:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008cd2:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008cd6:	2401      	movs	r4, #1
 8008cd8:	f002 001f 	and.w	r0, r2, #31
 8008cdc:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008ce0:	ea25 0500 	bic.w	r5, r5, r0
 8008ce4:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008ce8:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008cea:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008cec:	bb85      	cbnz	r5, 8008d50 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008cee:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008cf2:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008cf4:	4025      	ands	r5, r4
 8008cf6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008cfa:	888d      	ldrh	r5, [r1, #4]
 8008cfc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008d00:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008d04:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008d08:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008d0a:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008d0c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008d10:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008d14:	698a      	ldr	r2, [r1, #24]
 8008d16:	bb6a      	cbnz	r2, 8008d74 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008d18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d1c:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008d1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008d22:	690a      	ldr	r2, [r1, #16]
 8008d24:	bb52      	cbnz	r2, 8008d7c <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008d26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008d2a:	4014      	ands	r4, r2
 8008d2c:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008d30:	6a0a      	ldr	r2, [r1, #32]
 8008d32:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008d34:	bf02      	ittt	eq
 8008d36:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8008d3a:	4310      	orreq	r0, r2
 8008d3c:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008d40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008d44:	f022 0201 	bic.w	r2, r2, #1
 8008d48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008d4c:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008d50:	2d01      	cmp	r5, #1
 8008d52:	d1df      	bne.n	8008d14 <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008d54:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008d58:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008d5a:	4305      	orrs	r5, r0
 8008d5c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008d60:	888d      	ldrh	r5, [r1, #4]
 8008d62:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008d66:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008d6a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008d6e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008d70:	898d      	ldrh	r5, [r1, #12]
 8008d72:	e7cb      	b.n	8008d0c <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d78:	4302      	orrs	r2, r0
 8008d7a:	e7d0      	b.n	8008d1e <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008d7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008d80:	4302      	orrs	r2, r0
 8008d82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008d86:	e7d3      	b.n	8008d30 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008d88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d8e:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8008d90:	2001      	movs	r0, #1
 8008d92:	e7dc      	b.n	8008d4e <HAL_CAN_ConfigFilter+0x98>

08008d94 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008d94:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008d96:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008d9a:	2b01      	cmp	r3, #1
{
 8008d9c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8008d9e:	b2dd      	uxtb	r5, r3
 8008da0:	d120      	bne.n	8008de4 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008da2:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008da4:	2302      	movs	r3, #2
 8008da6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008daa:	6813      	ldr	r3, [r2, #0]
 8008dac:	f023 0301 	bic.w	r3, r3, #1
 8008db0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008db2:	f7ff feeb 	bl	8008b8c <HAL_GetTick>
 8008db6:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f013 0301 	ands.w	r3, r3, #1
 8008dc0:	d102      	bne.n	8008dc8 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008dc2:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8008dc4:	461d      	mov	r5, r3
 8008dc6:	e00b      	b.n	8008de0 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008dc8:	f7ff fee0 	bl	8008b8c <HAL_GetTick>
 8008dcc:	1b80      	subs	r0, r0, r6
 8008dce:	280a      	cmp	r0, #10
 8008dd0:	d9f2      	bls.n	8008db8 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dd8:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8008dda:	2305      	movs	r3, #5
 8008ddc:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8008de0:	4628      	mov	r0, r5
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008de4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008de6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dea:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8008dec:	2501      	movs	r5, #1
 8008dee:	e7f7      	b.n	8008de0 <HAL_CAN_Start+0x4c>

08008df0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8008df0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008df2:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008df6:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008df8:	3d01      	subs	r5, #1
 8008dfa:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008dfc:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8008dfe:	d843      	bhi.n	8008e88 <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008e00:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8008e04:	d03c      	beq.n	8008e80 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008e06:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8008e0a:	2c03      	cmp	r4, #3
 8008e0c:	f04f 0501 	mov.w	r5, #1
 8008e10:	d105      	bne.n	8008e1e <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8008e12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008e18:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	e02a      	b.n	8008e74 <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008e1e:	40a5      	lsls	r5, r4
 8008e20:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8008e22:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8008e26:	f104 0318 	add.w	r3, r4, #24
 8008e2a:	bb20      	cbnz	r0, 8008e76 <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008e2c:	6808      	ldr	r0, [r1, #0]
 8008e2e:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008e36:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8008e3a:	690d      	ldr	r5, [r1, #16]
 8008e3c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008e40:	7d09      	ldrb	r1, [r1, #20]
 8008e42:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008e44:	bf08      	it	eq
 8008e46:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8008e4a:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8008e4e:	bf04      	itt	eq
 8008e50:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8008e54:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008e58:	4406      	add	r6, r0
 8008e5a:	6851      	ldr	r1, [r2, #4]
 8008e5c:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008e66:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8008e6a:	f042 0201 	orr.w	r2, r2, #1
 8008e6e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8008e72:	2000      	movs	r0, #0
  }
}
 8008e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008e76:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8008e78:	4338      	orrs	r0, r7
 8008e7a:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8008e7e:	e7d8      	b.n	8008e32 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008e80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e86:	e7c7      	b.n	8008e18 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008e88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e8e:	e7c3      	b.n	8008e18 <HAL_CAN_AddTxMessage+0x28>

08008e90 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008e90:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8008e92:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008e96:	3c01      	subs	r4, #1
 8008e98:	2c01      	cmp	r4, #1
 8008e9a:	d86c      	bhi.n	8008f76 <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008e9c:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008e9e:	b941      	cbnz	r1, 8008eb2 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008ea0:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008ea2:	07a4      	lsls	r4, r4, #30
 8008ea4:	d107      	bne.n	8008eb6 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008ea6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008eac:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8008eae:	2001      	movs	r0, #1
 8008eb0:	e056      	b.n	8008f60 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008eb2:	6934      	ldr	r4, [r6, #16]
 8008eb4:	e7f5      	b.n	8008ea2 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008eb6:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8008eba:	010c      	lsls	r4, r1, #4
 8008ebc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8008ec0:	f007 0704 	and.w	r7, r7, #4
 8008ec4:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	d14b      	bne.n	8008f62 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008eca:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8008ece:	0d7f      	lsrs	r7, r7, #21
 8008ed0:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008ed2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8008ed6:	f007 0702 	and.w	r7, r7, #2
 8008eda:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008edc:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8008ee0:	f007 070f 	and.w	r7, r7, #15
 8008ee4:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008ee6:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008eea:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008eee:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008ef0:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008ef4:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008ef6:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008ef8:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008efa:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8008efe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8008f00:	6802      	ldr	r2, [r0, #0]
 8008f02:	4422      	add	r2, r4
 8008f04:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8008f08:	0a12      	lsrs	r2, r2, #8
 8008f0a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008f0c:	6802      	ldr	r2, [r0, #0]
 8008f0e:	4422      	add	r2, r4
 8008f10:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8008f14:	0c12      	lsrs	r2, r2, #16
 8008f16:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008f18:	6802      	ldr	r2, [r0, #0]
 8008f1a:	4422      	add	r2, r4
 8008f1c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8008f20:	0e12      	lsrs	r2, r2, #24
 8008f22:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008f24:	6802      	ldr	r2, [r0, #0]
 8008f26:	4422      	add	r2, r4
 8008f28:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8008f2c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008f2e:	6802      	ldr	r2, [r0, #0]
 8008f30:	4422      	add	r2, r4
 8008f32:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8008f36:	0a12      	lsrs	r2, r2, #8
 8008f38:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008f3a:	6802      	ldr	r2, [r0, #0]
 8008f3c:	4422      	add	r2, r4
 8008f3e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8008f42:	0c12      	lsrs	r2, r2, #16
 8008f44:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008f46:	6802      	ldr	r2, [r0, #0]
 8008f48:	4422      	add	r2, r4
 8008f4a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8008f4e:	0e12      	lsrs	r2, r2, #24
 8008f50:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008f52:	6803      	ldr	r3, [r0, #0]
 8008f54:	b951      	cbnz	r1, 8008f6c <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008f56:	68da      	ldr	r2, [r3, #12]
 8008f58:	f042 0220 	orr.w	r2, r2, #32
 8008f5c:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8008f5e:	2000      	movs	r0, #0
  }
}
 8008f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008f62:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8008f66:	08ff      	lsrs	r7, r7, #3
 8008f68:	6057      	str	r7, [r2, #4]
 8008f6a:	e7b2      	b.n	8008ed2 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008f6c:	691a      	ldr	r2, [r3, #16]
 8008f6e:	f042 0220 	orr.w	r2, r2, #32
 8008f72:	611a      	str	r2, [r3, #16]
 8008f74:	e7f3      	b.n	8008f5e <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008f76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f7c:	e796      	b.n	8008eac <HAL_CAN_GetRxMessage+0x1c>

08008f7e <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8008f7e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008f82:	3b01      	subs	r3, #1
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d805      	bhi.n	8008f94 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008f88:	6802      	ldr	r2, [r0, #0]
 8008f8a:	6953      	ldr	r3, [r2, #20]
 8008f8c:	4319      	orrs	r1, r3
 8008f8e:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8008f90:	2000      	movs	r0, #0
 8008f92:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008f94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f9a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8008f9c:	2001      	movs	r0, #1
  }
}
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_CAN_TxMailbox0CompleteCallback>:
 8008fa0:	4770      	bx	lr

08008fa2 <HAL_CAN_TxMailbox1CompleteCallback>:
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_CAN_TxMailbox2CompleteCallback>:
 8008fa4:	4770      	bx	lr

08008fa6 <HAL_CAN_TxMailbox0AbortCallback>:
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_CAN_TxMailbox1AbortCallback>:
 8008fa8:	4770      	bx	lr

08008faa <HAL_CAN_TxMailbox2AbortCallback>:
 8008faa:	4770      	bx	lr

08008fac <HAL_CAN_RxFifo0FullCallback>:
 8008fac:	4770      	bx	lr

08008fae <HAL_CAN_RxFifo1MsgPendingCallback>:
 8008fae:	4770      	bx	lr

08008fb0 <HAL_CAN_RxFifo1FullCallback>:
 8008fb0:	4770      	bx	lr

08008fb2 <HAL_CAN_SleepCallback>:
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8008fb4:	4770      	bx	lr

08008fb6 <HAL_CAN_ErrorCallback>:
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008fbc:	6803      	ldr	r3, [r0, #0]
 8008fbe:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008fc0:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008fc4:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008fc6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008fca:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008fce:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008fd2:	f016 0401 	ands.w	r4, r6, #1
{
 8008fd6:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008fd8:	d022      	beq.n	8009020 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008fda:	f017 0401 	ands.w	r4, r7, #1
 8008fde:	d007      	beq.n	8008ff0 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008fe0:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008fe2:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008fe4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008fe6:	f140 80a5 	bpl.w	8009134 <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008fea:	f7ff ffd9 	bl	8008fa0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008fee:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008ff0:	05fb      	lsls	r3, r7, #23
 8008ff2:	d509      	bpl.n	8009008 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008ffa:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008ffc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008ffe:	f140 80a7 	bpl.w	8009150 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009002:	4628      	mov	r0, r5
 8009004:	f7ff ffcd 	bl	8008fa2 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009008:	03fb      	lsls	r3, r7, #15
 800900a:	d509      	bpl.n	8009020 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009012:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009014:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009016:	f140 80a9 	bpl.w	800916c <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800901a:	4628      	mov	r0, r5
 800901c:	f7ff ffc2 	bl	8008fa4 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009020:	0733      	lsls	r3, r6, #28
 8009022:	d507      	bpl.n	8009034 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009024:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009028:	bf1f      	itttt	ne
 800902a:	682b      	ldrne	r3, [r5, #0]
 800902c:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800902e:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009032:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009034:	0777      	lsls	r7, r6, #29
 8009036:	d508      	bpl.n	800904a <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009038:	f01b 0f08 	tst.w	fp, #8
 800903c:	d005      	beq.n	800904a <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	2208      	movs	r2, #8
 8009042:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009044:	4628      	mov	r0, r5
 8009046:	f7ff ffb1 	bl	8008fac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800904a:	07b0      	lsls	r0, r6, #30
 800904c:	d506      	bpl.n	800905c <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800904e:	682b      	ldr	r3, [r5, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	0799      	lsls	r1, r3, #30
 8009054:	d002      	beq.n	800905c <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009056:	4628      	mov	r0, r5
 8009058:	f7f8 f8a6 	bl	80011a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800905c:	0672      	lsls	r2, r6, #25
 800905e:	d507      	bpl.n	8009070 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009060:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009064:	bf1f      	itttt	ne
 8009066:	682b      	ldrne	r3, [r5, #0]
 8009068:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800906a:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800906e:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009070:	06b3      	lsls	r3, r6, #26
 8009072:	d508      	bpl.n	8009086 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009074:	f01a 0f08 	tst.w	sl, #8
 8009078:	d005      	beq.n	8009086 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	2208      	movs	r2, #8
 800907e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009080:	4628      	mov	r0, r5
 8009082:	f7ff ff95 	bl	8008fb0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009086:	06f7      	lsls	r7, r6, #27
 8009088:	d506      	bpl.n	8009098 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800908a:	682b      	ldr	r3, [r5, #0]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	0798      	lsls	r0, r3, #30
 8009090:	d002      	beq.n	8009098 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009092:	4628      	mov	r0, r5
 8009094:	f7ff ff8b 	bl	8008fae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009098:	03b1      	lsls	r1, r6, #14
 800909a:	d508      	bpl.n	80090ae <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800909c:	f019 0f10 	tst.w	r9, #16
 80090a0:	d005      	beq.n	80090ae <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	2210      	movs	r2, #16
 80090a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80090a8:	4628      	mov	r0, r5
 80090aa:	f7ff ff82 	bl	8008fb2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80090ae:	03f2      	lsls	r2, r6, #15
 80090b0:	d508      	bpl.n	80090c4 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80090b2:	f019 0f08 	tst.w	r9, #8
 80090b6:	d005      	beq.n	80090c4 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	2208      	movs	r2, #8
 80090bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80090be:	4628      	mov	r0, r5
 80090c0:	f7ff ff78 	bl	8008fb4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80090c4:	0433      	lsls	r3, r6, #16
 80090c6:	d52c      	bpl.n	8009122 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80090c8:	f019 0f04 	tst.w	r9, #4
 80090cc:	682a      	ldr	r2, [r5, #0]
 80090ce:	d026      	beq.n	800911e <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80090d0:	05f7      	lsls	r7, r6, #23
 80090d2:	d504      	bpl.n	80090de <HAL_CAN_IRQHandler+0x126>
 80090d4:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80090d8:	bf18      	it	ne
 80090da:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80090de:	05b0      	lsls	r0, r6, #22
 80090e0:	d504      	bpl.n	80090ec <HAL_CAN_IRQHandler+0x134>
 80090e2:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80090e6:	bf18      	it	ne
 80090e8:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80090ec:	0571      	lsls	r1, r6, #21
 80090ee:	d504      	bpl.n	80090fa <HAL_CAN_IRQHandler+0x142>
 80090f0:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80090f4:	bf18      	it	ne
 80090f6:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80090fa:	0533      	lsls	r3, r6, #20
 80090fc:	d50f      	bpl.n	800911e <HAL_CAN_IRQHandler+0x166>
 80090fe:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8009102:	d00c      	beq.n	800911e <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8009104:	2b40      	cmp	r3, #64	; 0x40
 8009106:	d04f      	beq.n	80091a8 <HAL_CAN_IRQHandler+0x1f0>
 8009108:	d83e      	bhi.n	8009188 <HAL_CAN_IRQHandler+0x1d0>
 800910a:	2b20      	cmp	r3, #32
 800910c:	d046      	beq.n	800919c <HAL_CAN_IRQHandler+0x1e4>
 800910e:	2b30      	cmp	r3, #48	; 0x30
 8009110:	d047      	beq.n	80091a2 <HAL_CAN_IRQHandler+0x1ea>
 8009112:	2b10      	cmp	r3, #16
 8009114:	d03f      	beq.n	8009196 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009116:	6993      	ldr	r3, [r2, #24]
 8009118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800911c:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800911e:	2304      	movs	r3, #4
 8009120:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009122:	b12c      	cbz	r4, 8009130 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009124:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009126:	431c      	orrs	r4, r3
 8009128:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800912a:	4628      	mov	r0, r5
 800912c:	f7ff ff43 	bl	8008fb6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009134:	077a      	lsls	r2, r7, #29
 8009136:	d405      	bmi.n	8009144 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009138:	f017 0408 	ands.w	r4, r7, #8
 800913c:	d105      	bne.n	800914a <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800913e:	f7ff ff32 	bl	8008fa6 <HAL_CAN_TxMailbox0AbortCallback>
 8009142:	e755      	b.n	8008ff0 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009144:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8009148:	e752      	b.n	8008ff0 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800914a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800914e:	e74f      	b.n	8008ff0 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009150:	0579      	lsls	r1, r7, #21
 8009152:	d502      	bpl.n	800915a <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009154:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8009158:	e756      	b.n	8009008 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800915a:	053a      	lsls	r2, r7, #20
 800915c:	d502      	bpl.n	8009164 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800915e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8009162:	e751      	b.n	8009008 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009164:	4628      	mov	r0, r5
 8009166:	f7ff ff1f 	bl	8008fa8 <HAL_CAN_TxMailbox1AbortCallback>
 800916a:	e74d      	b.n	8009008 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800916c:	0379      	lsls	r1, r7, #13
 800916e:	d502      	bpl.n	8009176 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009170:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8009174:	e754      	b.n	8009020 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009176:	033a      	lsls	r2, r7, #12
 8009178:	d502      	bpl.n	8009180 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800917a:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800917e:	e74f      	b.n	8009020 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009180:	4628      	mov	r0, r5
 8009182:	f7ff ff12 	bl	8008faa <HAL_CAN_TxMailbox2AbortCallback>
 8009186:	e74b      	b.n	8009020 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8009188:	2b50      	cmp	r3, #80	; 0x50
 800918a:	d010      	beq.n	80091ae <HAL_CAN_IRQHandler+0x1f6>
 800918c:	2b60      	cmp	r3, #96	; 0x60
 800918e:	d1c2      	bne.n	8009116 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009190:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8009194:	e7bf      	b.n	8009116 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8009196:	f044 0408 	orr.w	r4, r4, #8
            break;
 800919a:	e7bc      	b.n	8009116 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800919c:	f044 0410 	orr.w	r4, r4, #16
            break;
 80091a0:	e7b9      	b.n	8009116 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80091a2:	f044 0420 	orr.w	r4, r4, #32
            break;
 80091a6:	e7b6      	b.n	8009116 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 80091a8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80091ac:	e7b3      	b.n	8009116 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 80091ae:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80091b2:	e7b0      	b.n	8009116 <HAL_CAN_IRQHandler+0x15e>

080091b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80091b4:	4907      	ldr	r1, [pc, #28]	; (80091d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80091b6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091bc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091be:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091c4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80091c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80091cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80091d0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80091d2:	4770      	bx	lr
 80091d4:	e000ed00 	.word	0xe000ed00

080091d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091d8:	4b16      	ldr	r3, [pc, #88]	; (8009234 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091da:	b530      	push	{r4, r5, lr}
 80091dc:	68dc      	ldr	r4, [r3, #12]
 80091de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091e2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091e6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091e8:	2d04      	cmp	r5, #4
 80091ea:	bf28      	it	cs
 80091ec:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091ee:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091f0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091f4:	bf8c      	ite	hi
 80091f6:	3c03      	subhi	r4, #3
 80091f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091fa:	fa03 f505 	lsl.w	r5, r3, r5
 80091fe:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009202:	40a3      	lsls	r3, r4
 8009204:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009208:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800920a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800920c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009210:	bfac      	ite	ge
 8009212:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009216:	4a08      	ldrlt	r2, [pc, #32]	; (8009238 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009218:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800921c:	bfb8      	it	lt
 800921e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009222:	b2db      	uxtb	r3, r3
 8009224:	bfaa      	itet	ge
 8009226:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800922a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800922c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009230:	bd30      	pop	{r4, r5, pc}
 8009232:	bf00      	nop
 8009234:	e000ed00 	.word	0xe000ed00
 8009238:	e000ed14 	.word	0xe000ed14

0800923c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800923c:	2800      	cmp	r0, #0
 800923e:	db08      	blt.n	8009252 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009240:	0942      	lsrs	r2, r0, #5
 8009242:	2301      	movs	r3, #1
 8009244:	f000 001f 	and.w	r0, r0, #31
 8009248:	fa03 f000 	lsl.w	r0, r3, r0
 800924c:	4b01      	ldr	r3, [pc, #4]	; (8009254 <HAL_NVIC_EnableIRQ+0x18>)
 800924e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009252:	4770      	bx	lr
 8009254:	e000e100 	.word	0xe000e100

08009258 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009258:	3801      	subs	r0, #1
 800925a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800925e:	d20b      	bcs.n	8009278 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009260:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009264:	4a05      	ldr	r2, [pc, #20]	; (800927c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009266:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009268:	21f0      	movs	r1, #240	; 0xf0
 800926a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800926e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009270:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009272:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009274:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009276:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8009278:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800927a:	4770      	bx	lr
 800927c:	e000ed00 	.word	0xe000ed00

08009280 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8009280:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8009282:	4604      	mov	r4, r0
 8009284:	b168      	cbz	r0, 80092a2 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8009286:	7903      	ldrb	r3, [r0, #4]
 8009288:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800928c:	b913      	cbnz	r3, 8009294 <HAL_DAC_Init+0x14>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800928e:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009290:	f7ff f802 	bl	8008298 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009294:	2302      	movs	r3, #2
 8009296:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009298:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800929a:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800929c:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800929e:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80092a0:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80092a2:	2001      	movs	r0, #1
 80092a4:	e7fc      	b.n	80092a0 <HAL_DAC_Init+0x20>

080092a6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80092a6:	b513      	push	{r0, r1, r4, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80092a8:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 80092aa:	2400      	movs	r4, #0
 80092ac:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 80092ae:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80092b0:	b941      	cbnz	r1, 80092c4 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80092b2:	9901      	ldr	r1, [sp, #4]
 80092b4:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80092b6:	440a      	add	r2, r1
 80092b8:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80092ba:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80092bc:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80092be:	6013      	str	r3, [r2, #0]
}
 80092c0:	b002      	add	sp, #8
 80092c2:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80092c4:	9901      	ldr	r1, [sp, #4]
 80092c6:	3114      	adds	r1, #20
 80092c8:	e7f5      	b.n	80092b6 <HAL_DAC_SetValue+0x10>

080092ca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80092ca:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80092cc:	7943      	ldrb	r3, [r0, #5]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	f04f 0302 	mov.w	r3, #2
 80092d4:	d014      	beq.n	8009300 <HAL_DAC_Start+0x36>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80092d6:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80092d8:	6803      	ldr	r3, [r0, #0]
 80092da:	2201      	movs	r2, #1
 80092dc:	681c      	ldr	r4, [r3, #0]
 80092de:	408a      	lsls	r2, r1
 80092e0:	4322      	orrs	r2, r4
 80092e2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80092e4:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 80092e6:	b969      	cbnz	r1, 8009304 <HAL_DAC_Start+0x3a>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80092e8:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80092ec:	2a3c      	cmp	r2, #60	; 0x3c
 80092ee:	d103      	bne.n	80092f8 <HAL_DAC_Start+0x2e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80092f6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80092f8:	2301      	movs	r3, #1
 80092fa:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80092fc:	2300      	movs	r3, #0
 80092fe:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8009300:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 8009302:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8009304:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8009308:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800930c:	d1f4      	bne.n	80092f8 <HAL_DAC_Start+0x2e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	f042 0202 	orr.w	r2, r2, #2
 8009314:	e7ef      	b.n	80092f6 <HAL_DAC_Start+0x2c>

08009316 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8009316:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8009318:	7943      	ldrb	r3, [r0, #5]
 800931a:	2b01      	cmp	r3, #1
 800931c:	f04f 0302 	mov.w	r3, #2
 8009320:	d018      	beq.n	8009354 <HAL_DAC_ConfigChannel+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009322:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8009324:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8009326:	6823      	ldr	r3, [r4, #0]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8009328:	f640 75fe 	movw	r5, #4094	; 0xffe
 800932c:	4095      	lsls	r5, r2
 800932e:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8009332:	e9d1 3100 	ldrd	r3, r1, [r1]
 8009336:	430b      	orrs	r3, r1
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8009338:	4093      	lsls	r3, r2
 800933a:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800933c:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	21c0      	movs	r1, #192	; 0xc0
 8009342:	fa01 f202 	lsl.w	r2, r1, r2
 8009346:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800934a:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800934c:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800934e:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009350:	2300      	movs	r3, #0
 8009352:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8009354:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8009356:	bd30      	pop	{r4, r5, pc}

08009358 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009358:	6801      	ldr	r1, [r0, #0]
 800935a:	4b0c      	ldr	r3, [pc, #48]	; (800938c <DMA_CalcBaseAndBitshift+0x34>)
 800935c:	4299      	cmp	r1, r3
{
 800935e:	b510      	push	{r4, lr}
 8009360:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009364:	d809      	bhi.n	800937a <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009366:	4a0a      	ldr	r2, [pc, #40]	; (8009390 <DMA_CalcBaseAndBitshift+0x38>)
 8009368:	440a      	add	r2, r1
 800936a:	fbb2 f2f4 	udiv	r2, r2, r4
 800936e:	0092      	lsls	r2, r2, #2
 8009370:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8009372:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8009376:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8009378:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800937a:	4b06      	ldr	r3, [pc, #24]	; (8009394 <DMA_CalcBaseAndBitshift+0x3c>)
 800937c:	440b      	add	r3, r1
 800937e:	fbb3 f3f4 	udiv	r3, r3, r4
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8009386:	4b04      	ldr	r3, [pc, #16]	; (8009398 <DMA_CalcBaseAndBitshift+0x40>)
 8009388:	e7f5      	b.n	8009376 <DMA_CalcBaseAndBitshift+0x1e>
 800938a:	bf00      	nop
 800938c:	40020407 	.word	0x40020407
 8009390:	bffdfff8 	.word	0xbffdfff8
 8009394:	bffdfbf8 	.word	0xbffdfbf8
 8009398:	40020400 	.word	0x40020400

0800939c <HAL_DMA_Init>:
{ 
 800939c:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800939e:	4604      	mov	r4, r0
 80093a0:	b1f8      	cbz	r0, 80093e2 <HAL_DMA_Init+0x46>
  hdma->State = HAL_DMA_STATE_BUSY;
 80093a2:	2302      	movs	r3, #2
 80093a4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 80093a8:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 80093ac:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093ae:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 80093b0:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093b2:	432b      	orrs	r3, r5
 80093b4:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80093b6:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093b8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093ba:	6945      	ldr	r5, [r0, #20]
 80093bc:	432b      	orrs	r3, r5
 80093be:	6985      	ldr	r5, [r0, #24]
 80093c0:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80093c2:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80093c4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80093c8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80093cc:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80093ce:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80093d0:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80093d2:	f7ff ffc1 	bl	8009358 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093d6:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 80093d8:	f44f 7380 	mov.w	r3, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093dc:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80093de:	8423      	strh	r3, [r4, #32]
}  
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80093e2:	2001      	movs	r0, #1
 80093e4:	e7fc      	b.n	80093e0 <HAL_DMA_Init+0x44>

080093e6 <HAL_DMA_Start_IT>:
{
 80093e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80093e8:	f890 4020 	ldrb.w	r4, [r0, #32]
 80093ec:	2c01      	cmp	r4, #1
 80093ee:	d034      	beq.n	800945a <HAL_DMA_Start_IT+0x74>
  if(HAL_DMA_STATE_READY == hdma->State)
 80093f0:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80093f4:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80093f6:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80093f8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80093fc:	f04f 0600 	mov.w	r6, #0
 8009400:	f04f 0402 	mov.w	r4, #2
 8009404:	d127      	bne.n	8009456 <HAL_DMA_Start_IT+0x70>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8009406:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800940a:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800940c:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800940e:	6826      	ldr	r6, [r4, #0]
 8009410:	f026 0601 	bic.w	r6, r6, #1
 8009414:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8009416:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 800941a:	40bd      	lsls	r5, r7
 800941c:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800941e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009420:	6843      	ldr	r3, [r0, #4]
 8009422:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8009424:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8009426:	bf0b      	itete	eq
 8009428:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800942a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800942c:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800942e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8009430:	b14b      	cbz	r3, 8009446 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8009438:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f043 0301 	orr.w	r3, r3, #1
 8009440:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009442:	2000      	movs	r0, #0
} 
 8009444:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	f043 030a 	orr.w	r3, r3, #10
 800944c:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f023 0304 	bic.w	r3, r3, #4
 8009454:	e7f0      	b.n	8009438 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8009456:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800945a:	2002      	movs	r0, #2
 800945c:	e7f2      	b.n	8009444 <HAL_DMA_Start_IT+0x5e>

0800945e <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800945e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8009460:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8009462:	6803      	ldr	r3, [r0, #0]
{
 8009464:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009466:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8009468:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800946a:	2404      	movs	r4, #4
 800946c:	4094      	lsls	r4, r2
 800946e:	4234      	tst	r4, r6
 8009470:	d00e      	beq.n	8009490 <HAL_DMA_IRQHandler+0x32>
 8009472:	f015 0f04 	tst.w	r5, #4
 8009476:	d00b      	beq.n	8009490 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800947c:	bf5e      	ittt	pl
 800947e:	681a      	ldrpl	r2, [r3, #0]
 8009480:	f022 0204 	bicpl.w	r2, r2, #4
 8009484:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8009486:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8009488:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800948a:	b363      	cbz	r3, 80094e6 <HAL_DMA_IRQHandler+0x88>
}  
 800948c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800948e:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8009490:	2402      	movs	r4, #2
 8009492:	4094      	lsls	r4, r2
 8009494:	4234      	tst	r4, r6
 8009496:	d012      	beq.n	80094be <HAL_DMA_IRQHandler+0x60>
 8009498:	f015 0f02 	tst.w	r5, #2
 800949c:	d00f      	beq.n	80094be <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	0695      	lsls	r5, r2, #26
 80094a2:	d406      	bmi.n	80094b2 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	f022 020a 	bic.w	r2, r2, #10
 80094aa:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80094ac:	2301      	movs	r3, #1
 80094ae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80094b2:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80094b4:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80094b6:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80094ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80094bc:	e7e5      	b.n	800948a <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80094be:	2408      	movs	r4, #8
 80094c0:	4094      	lsls	r4, r2
 80094c2:	4234      	tst	r4, r6
 80094c4:	d00f      	beq.n	80094e6 <HAL_DMA_IRQHandler+0x88>
 80094c6:	072c      	lsls	r4, r5, #28
 80094c8:	d50d      	bpl.n	80094e6 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80094ca:	681c      	ldr	r4, [r3, #0]
 80094cc:	f024 040e 	bic.w	r4, r4, #14
 80094d0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80094d2:	2301      	movs	r3, #1
 80094d4:	fa03 f202 	lsl.w	r2, r3, r2
 80094d8:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80094da:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 80094dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094e0:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80094e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80094e4:	e7d1      	b.n	800948a <HAL_DMA_IRQHandler+0x2c>
}  
 80094e6:	bc70      	pop	{r4, r5, r6}
 80094e8:	4770      	bx	lr
	...

080094ec <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80094ec:	4a0b      	ldr	r2, [pc, #44]	; (800951c <FLASH_SetErrorCode+0x30>)
 80094ee:	68d3      	ldr	r3, [r2, #12]
 80094f0:	f013 0310 	ands.w	r3, r3, #16
 80094f4:	d005      	beq.n	8009502 <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80094f6:	490a      	ldr	r1, [pc, #40]	; (8009520 <FLASH_SetErrorCode+0x34>)
 80094f8:	69cb      	ldr	r3, [r1, #28]
 80094fa:	f043 0302 	orr.w	r3, r3, #2
 80094fe:	61cb      	str	r3, [r1, #28]
    flags |= FLASH_FLAG_WRPERR;
 8009500:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009502:	68d2      	ldr	r2, [r2, #12]
 8009504:	0752      	lsls	r2, r2, #29
 8009506:	d506      	bpl.n	8009516 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8009508:	4905      	ldr	r1, [pc, #20]	; (8009520 <FLASH_SetErrorCode+0x34>)
 800950a:	69ca      	ldr	r2, [r1, #28]
 800950c:	f042 0201 	orr.w	r2, r2, #1
 8009510:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8009512:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8009516:	4a01      	ldr	r2, [pc, #4]	; (800951c <FLASH_SetErrorCode+0x30>)
 8009518:	60d3      	str	r3, [r2, #12]
}  
 800951a:	4770      	bx	lr
 800951c:	40022000 	.word	0x40022000
 8009520:	20002780 	.word	0x20002780

08009524 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009524:	4b06      	ldr	r3, [pc, #24]	; (8009540 <HAL_FLASH_Unlock+0x1c>)
 8009526:	6918      	ldr	r0, [r3, #16]
 8009528:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800952c:	d007      	beq.n	800953e <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800952e:	4a05      	ldr	r2, [pc, #20]	; (8009544 <HAL_FLASH_Unlock+0x20>)
 8009530:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009532:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8009536:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009538:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800953a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800953e:	4770      	bx	lr
 8009540:	40022000 	.word	0x40022000
 8009544:	45670123 	.word	0x45670123

08009548 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009548:	4a03      	ldr	r2, [pc, #12]	; (8009558 <HAL_FLASH_Lock+0x10>)
 800954a:	6913      	ldr	r3, [r2, #16]
 800954c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009550:	6113      	str	r3, [r2, #16]
}
 8009552:	2000      	movs	r0, #0
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	40022000 	.word	0x40022000

0800955c <FLASH_WaitForLastOperation>:
{
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8009560:	f7ff fb14 	bl	8008b8c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8009564:	4c0f      	ldr	r4, [pc, #60]	; (80095a4 <FLASH_WaitForLastOperation+0x48>)
  uint32_t tickstart = HAL_GetTick();
 8009566:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8009568:	68e3      	ldr	r3, [r4, #12]
 800956a:	07d9      	lsls	r1, r3, #31
 800956c:	d40f      	bmi.n	800958e <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800956e:	68e3      	ldr	r3, [r4, #12]
 8009570:	069a      	lsls	r2, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009572:	bf44      	itt	mi
 8009574:	2320      	movmi	r3, #32
 8009576:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009578:	68e3      	ldr	r3, [r4, #12]
 800957a:	06db      	lsls	r3, r3, #27
 800957c:	d403      	bmi.n	8009586 <FLASH_WaitForLastOperation+0x2a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800957e:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009580:	f010 0004 	ands.w	r0, r0, #4
 8009584:	d007      	beq.n	8009596 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 8009586:	f7ff ffb1 	bl	80094ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 800958a:	2001      	movs	r0, #1
 800958c:	e003      	b.n	8009596 <FLASH_WaitForLastOperation+0x3a>
    if (Timeout != HAL_MAX_DELAY)
 800958e:	1c68      	adds	r0, r5, #1
 8009590:	d0ea      	beq.n	8009568 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8009592:	b90d      	cbnz	r5, 8009598 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 8009594:	2003      	movs	r0, #3
}
 8009596:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8009598:	f7ff faf8 	bl	8008b8c <HAL_GetTick>
 800959c:	1b80      	subs	r0, r0, r6
 800959e:	42a8      	cmp	r0, r5
 80095a0:	d9e2      	bls.n	8009568 <FLASH_WaitForLastOperation+0xc>
 80095a2:	e7f7      	b.n	8009594 <FLASH_WaitForLastOperation+0x38>
 80095a4:	40022000 	.word	0x40022000

080095a8 <HAL_FLASH_Program>:
{
 80095a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80095ac:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009640 <HAL_FLASH_Program+0x98>
{
 80095b0:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80095b2:	f899 3018 	ldrb.w	r3, [r9, #24]
 80095b6:	2b01      	cmp	r3, #1
{
 80095b8:	4604      	mov	r4, r0
 80095ba:	460f      	mov	r7, r1
 80095bc:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80095be:	d03d      	beq.n	800963c <HAL_FLASH_Program+0x94>
 80095c0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80095c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80095c6:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80095ca:	f7ff ffc7 	bl	800955c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80095ce:	bb80      	cbnz	r0, 8009632 <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80095d0:	2c01      	cmp	r4, #1
 80095d2:	d003      	beq.n	80095dc <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 80095d4:	2c02      	cmp	r4, #2
 80095d6:	bf0c      	ite	eq
 80095d8:	2402      	moveq	r4, #2
 80095da:	2404      	movne	r4, #4
 80095dc:	2500      	movs	r5, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80095de:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009644 <HAL_FLASH_Program+0x9c>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80095e2:	46ab      	mov	fp, r5
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80095e4:	0128      	lsls	r0, r5, #4
 80095e6:	f1c0 0220 	rsb	r2, r0, #32
 80095ea:	f1a0 0320 	sub.w	r3, r0, #32
 80095ee:	fa06 f202 	lsl.w	r2, r6, r2
 80095f2:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80095f6:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80095fa:	4310      	orrs	r0, r2
 80095fc:	fa26 f303 	lsr.w	r3, r6, r3
 8009600:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009602:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8009606:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009608:	f043 0301 	orr.w	r3, r3, #1
 800960c:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 8009610:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009614:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009618:	f7ff ffa0 	bl	800955c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800961c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009620:	f023 0301 	bic.w	r3, r3, #1
 8009624:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8009628:	b918      	cbnz	r0, 8009632 <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 800962a:	3501      	adds	r5, #1
 800962c:	b2eb      	uxtb	r3, r5
 800962e:	429c      	cmp	r4, r3
 8009630:	d8d8      	bhi.n	80095e4 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8009632:	2300      	movs	r3, #0
 8009634:	f889 3018 	strb.w	r3, [r9, #24]
}
 8009638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800963c:	2002      	movs	r0, #2
 800963e:	e7fb      	b.n	8009638 <HAL_FLASH_Program+0x90>
 8009640:	20002780 	.word	0x20002780
 8009644:	40022000 	.word	0x40022000

08009648 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009648:	4b06      	ldr	r3, [pc, #24]	; (8009664 <FLASH_MassErase+0x1c>)
 800964a:	2200      	movs	r2, #0
 800964c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800964e:	4b06      	ldr	r3, [pc, #24]	; (8009668 <FLASH_MassErase+0x20>)
 8009650:	691a      	ldr	r2, [r3, #16]
 8009652:	f042 0204 	orr.w	r2, r2, #4
 8009656:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800965e:	611a      	str	r2, [r3, #16]
}
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20002780 	.word	0x20002780
 8009668:	40022000 	.word	0x40022000

0800966c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <FLASH_PageErase+0x1c>)
 800966e:	2200      	movs	r2, #0
 8009670:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009672:	4b06      	ldr	r3, [pc, #24]	; (800968c <FLASH_PageErase+0x20>)
 8009674:	691a      	ldr	r2, [r3, #16]
 8009676:	f042 0202 	orr.w	r2, r2, #2
 800967a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800967c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009684:	611a      	str	r2, [r3, #16]
}
 8009686:	4770      	bx	lr
 8009688:	20002780 	.word	0x20002780
 800968c:	40022000 	.word	0x40022000

08009690 <HAL_FLASHEx_Erase>:
{
 8009690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8009694:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8009728 <HAL_FLASHEx_Erase+0x98>
 8009698:	f898 3018 	ldrb.w	r3, [r8, #24]
 800969c:	2b01      	cmp	r3, #1
{
 800969e:	4605      	mov	r5, r0
 80096a0:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 80096a2:	d03d      	beq.n	8009720 <HAL_FLASHEx_Erase+0x90>
 80096a4:	2401      	movs	r4, #1
 80096a6:	f888 4018 	strb.w	r4, [r8, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80096aa:	6803      	ldr	r3, [r0, #0]
 80096ac:	42a3      	cmp	r3, r4
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80096ae:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80096b2:	d114      	bne.n	80096de <HAL_FLASHEx_Erase+0x4e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80096b4:	f7ff ff52 	bl	800955c <FLASH_WaitForLastOperation>
 80096b8:	b128      	cbz	r0, 80096c6 <HAL_FLASHEx_Erase+0x36>
  HAL_StatusTypeDef status = HAL_ERROR;
 80096ba:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80096bc:	2300      	movs	r3, #0
 80096be:	f888 3018 	strb.w	r3, [r8, #24]
}
 80096c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80096c6:	f24c 3050 	movw	r0, #50000	; 0xc350
        FLASH_MassErase();
 80096ca:	f7ff ffbd 	bl	8009648 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80096ce:	f7ff ff45 	bl	800955c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80096d2:	4a14      	ldr	r2, [pc, #80]	; (8009724 <HAL_FLASHEx_Erase+0x94>)
 80096d4:	6913      	ldr	r3, [r2, #16]
 80096d6:	f023 0304 	bic.w	r3, r3, #4
 80096da:	6113      	str	r3, [r2, #16]
 80096dc:	e7ee      	b.n	80096bc <HAL_FLASHEx_Erase+0x2c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80096de:	f7ff ff3d 	bl	800955c <FLASH_WaitForLastOperation>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d1e9      	bne.n	80096ba <HAL_FLASHEx_Erase+0x2a>
        *PageError = 0xFFFFFFFFU;
 80096e6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80096ec:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80096ee:	686e      	ldr	r6, [r5, #4]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80096f0:	4c0c      	ldr	r4, [pc, #48]	; (8009724 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80096f2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80096f6:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 80096fa:	42b3      	cmp	r3, r6
 80096fc:	d9de      	bls.n	80096bc <HAL_FLASHEx_Erase+0x2c>
          FLASH_PageErase(address);
 80096fe:	4630      	mov	r0, r6
 8009700:	f7ff ffb4 	bl	800966c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009704:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009708:	f7ff ff28 	bl	800955c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	f023 0302 	bic.w	r3, r3, #2
 8009712:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8009714:	b108      	cbz	r0, 800971a <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8009716:	603e      	str	r6, [r7, #0]
            break;
 8009718:	e7d0      	b.n	80096bc <HAL_FLASHEx_Erase+0x2c>
            address += FLASH_PAGE_SIZE)
 800971a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800971e:	e7e8      	b.n	80096f2 <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 8009720:	2002      	movs	r0, #2
 8009722:	e7ce      	b.n	80096c2 <HAL_FLASHEx_Erase+0x32>
 8009724:	40022000 	.word	0x40022000
 8009728:	20002780 	.word	0x20002780

0800972c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800972c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009730:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80098b0 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009734:	4c5c      	ldr	r4, [pc, #368]	; (80098a8 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8009736:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009738:	680a      	ldr	r2, [r1, #0]
 800973a:	fa32 f503 	lsrs.w	r5, r2, r3
 800973e:	d102      	bne.n	8009746 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8009740:	b003      	add	sp, #12
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009746:	2501      	movs	r5, #1
 8009748:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 800974c:	ea1e 0202 	ands.w	r2, lr, r2
 8009750:	f000 80a0 	beq.w	8009894 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009754:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009756:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009758:	f006 0503 	and.w	r5, r6, #3
 800975c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009760:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009764:	1e6f      	subs	r7, r5, #1
 8009766:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009768:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800976c:	d834      	bhi.n	80097d8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800976e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009770:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009774:	68cf      	ldr	r7, [r1, #12]
 8009776:	fa07 f708 	lsl.w	r7, r7, r8
 800977a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800977e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009780:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009782:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009786:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800978a:	409f      	lsls	r7, r3
 800978c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8009790:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8009792:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8009794:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009798:	688f      	ldr	r7, [r1, #8]
 800979a:	fa07 f708 	lsl.w	r7, r7, r8
 800979e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80097a2:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 80097a4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80097a6:	d119      	bne.n	80097dc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 80097a8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80097ac:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80097b0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80097b4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80097b8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80097bc:	f04f 0e0f 	mov.w	lr, #15
 80097c0:	fa0e fe0b 	lsl.w	lr, lr, fp
 80097c4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80097c8:	690f      	ldr	r7, [r1, #16]
 80097ca:	fa07 f70b 	lsl.w	r7, r7, fp
 80097ce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80097d2:	f8ca 7020 	str.w	r7, [sl, #32]
 80097d6:	e001      	b.n	80097dc <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80097d8:	2d03      	cmp	r5, #3
 80097da:	d1da      	bne.n	8009792 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 80097dc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80097de:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80097e2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80097e6:	432f      	orrs	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80097e8:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80097ec:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80097ee:	d051      	beq.n	8009894 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097f0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80097f4:	f045 0501 	orr.w	r5, r5, #1
 80097f8:	f8c9 5018 	str.w	r5, [r9, #24]
 80097fc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8009800:	f023 0703 	bic.w	r7, r3, #3
 8009804:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8009808:	f005 0501 	and.w	r5, r5, #1
 800980c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8009810:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009812:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009816:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8009818:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800981a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800981e:	f04f 0c0f 	mov.w	ip, #15
 8009822:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009826:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800982a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800982e:	d033      	beq.n	8009898 <HAL_GPIO_Init+0x16c>
 8009830:	4d1e      	ldr	r5, [pc, #120]	; (80098ac <HAL_GPIO_Init+0x180>)
 8009832:	42a8      	cmp	r0, r5
 8009834:	d032      	beq.n	800989c <HAL_GPIO_Init+0x170>
 8009836:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800983a:	42a8      	cmp	r0, r5
 800983c:	d030      	beq.n	80098a0 <HAL_GPIO_Init+0x174>
 800983e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009842:	42a8      	cmp	r0, r5
 8009844:	d02e      	beq.n	80098a4 <HAL_GPIO_Init+0x178>
 8009846:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800984a:	42a8      	cmp	r0, r5
 800984c:	bf0c      	ite	eq
 800984e:	2504      	moveq	r5, #4
 8009850:	2505      	movne	r5, #5
 8009852:	fa05 f50e 	lsl.w	r5, r5, lr
 8009856:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800985a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800985c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800985e:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009860:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8009864:	bf0c      	ite	eq
 8009866:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009868:	4315      	orrne	r5, r2
        EXTI->IMR = temp;
 800986a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR;
 800986c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800986e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8009872:	bf0c      	ite	eq
 8009874:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009876:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8009878:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR;
 800987a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800987c:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8009880:	bf0c      	ite	eq
 8009882:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009884:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8009886:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8009888:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800988a:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800988c:	bf54      	ite	pl
 800988e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8009890:	4315      	orrmi	r5, r2
        EXTI->FTSR = temp;
 8009892:	60e5      	str	r5, [r4, #12]
    position++;
 8009894:	3301      	adds	r3, #1
 8009896:	e74f      	b.n	8009738 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009898:	2500      	movs	r5, #0
 800989a:	e7da      	b.n	8009852 <HAL_GPIO_Init+0x126>
 800989c:	2501      	movs	r5, #1
 800989e:	e7d8      	b.n	8009852 <HAL_GPIO_Init+0x126>
 80098a0:	2502      	movs	r5, #2
 80098a2:	e7d6      	b.n	8009852 <HAL_GPIO_Init+0x126>
 80098a4:	2503      	movs	r5, #3
 80098a6:	e7d4      	b.n	8009852 <HAL_GPIO_Init+0x126>
 80098a8:	40010400 	.word	0x40010400
 80098ac:	48000400 	.word	0x48000400
 80098b0:	40021000 	.word	0x40021000

080098b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80098b4:	6903      	ldr	r3, [r0, #16]
 80098b6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80098b8:	bf14      	ite	ne
 80098ba:	2001      	movne	r0, #1
 80098bc:	2000      	moveq	r0, #0
 80098be:	4770      	bx	lr

080098c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80098c0:	b10a      	cbz	r2, 80098c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80098c2:	6181      	str	r1, [r0, #24]
 80098c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80098c6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80098c8:	4770      	bx	lr

080098ca <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80098ca:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80098cc:	ea01 0203 	and.w	r2, r1, r3
 80098d0:	ea21 0103 	bic.w	r1, r1, r3
 80098d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098d8:	6181      	str	r1, [r0, #24]
}
 80098da:	4770      	bx	lr

080098dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80098dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80098de:	4604      	mov	r4, r0
{
 80098e0:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d04f      	beq.n	8009986 <HAL_PCD_Init+0xaa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80098e6:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80098ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80098ee:	b91b      	cbnz	r3, 80098f8 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80098f0:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80098f4:	f004 fe8c 	bl	800e610 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80098f8:	2303      	movs	r3, #3
 80098fa:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80098fe:	6820      	ldr	r0, [r4, #0]
 8009900:	f003 fb8d 	bl	800d01e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009904:	2300      	movs	r3, #0
 8009906:	6865      	ldr	r5, [r4, #4]
 8009908:	2628      	movs	r6, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800990a:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800990c:	4618      	mov	r0, r3
 800990e:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009910:	428d      	cmp	r5, r1
 8009912:	f103 0201 	add.w	r2, r3, #1
 8009916:	d81b      	bhi.n	8009950 <HAL_PCD_Init+0x74>
 8009918:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800991a:	2628      	movs	r6, #40	; 0x28
 800991c:	4619      	mov	r1, r3
 800991e:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009920:	4285      	cmp	r5, r0
 8009922:	f103 0301 	add.w	r3, r3, #1
 8009926:	d821      	bhi.n	800996c <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009928:	f104 0610 	add.w	r6, r4, #16
 800992c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800992e:	466d      	mov	r5, sp
 8009930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009932:	6833      	ldr	r3, [r6, #0]
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	1d23      	adds	r3, r4, #4
 8009938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800993a:	6820      	ldr	r0, [r4, #0]
 800993c:	f003 fb79 	bl	800d032 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009940:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8009942:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8009944:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8009948:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 800994c:	b007      	add	sp, #28
 800994e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8009950:	fb06 4301 	mla	r3, r6, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009954:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8009958:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800995c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009960:	86d9      	strh	r1, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009962:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8009966:	6418      	str	r0, [r3, #64]	; 0x40
 8009968:	4613      	mov	r3, r2
 800996a:	e7d0      	b.n	800990e <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 800996c:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009970:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8009974:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8009978:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800997c:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009980:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009984:	e7cb      	b.n	800991e <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8009986:	2001      	movs	r0, #1
 8009988:	e7e0      	b.n	800994c <HAL_PCD_Init+0x70>

0800998a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800998a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800998c:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8009990:	2b01      	cmp	r3, #1
{
 8009992:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8009994:	d010      	beq.n	80099b8 <HAL_PCD_Start+0x2e>
 8009996:	2501      	movs	r5, #1
 8009998:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800999c:	6800      	ldr	r0, [r0, #0]
 800999e:	f003 fb35 	bl	800d00c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80099a2:	4629      	mov	r1, r5
 80099a4:	4620      	mov	r0, r4
 80099a6:	f004 ff5a 	bl	800e85e <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80099aa:	6820      	ldr	r0, [r4, #0]
 80099ac:	f003 fdec 	bl	800d588 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80099b0:	2000      	movs	r0, #0
 80099b2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80099b8:	2002      	movs	r0, #2
 80099ba:	e7fc      	b.n	80099b6 <HAL_PCD_Start+0x2c>

080099bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80099bc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80099be:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 80099c2:	2a01      	cmp	r2, #1
{
 80099c4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80099c6:	d00b      	beq.n	80099e0 <HAL_PCD_SetAddress+0x24>
 80099c8:	2201      	movs	r2, #1
 80099ca:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80099ce:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80099d2:	6800      	ldr	r0, [r0, #0]
 80099d4:	f003 fdd2 	bl	800d57c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80099d8:	2000      	movs	r0, #0
 80099da:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80099de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80099e0:	2002      	movs	r0, #2
 80099e2:	e7fc      	b.n	80099de <HAL_PCD_SetAddress+0x22>

080099e4 <HAL_PCD_IRQHandler>:
{
 80099e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	f003 fdce 	bl	800d58c <USB_ReadInterrupts>
 80099f0:	0400      	lsls	r0, r0, #16
 80099f2:	d508      	bpl.n	8009a06 <HAL_PCD_IRQHandler+0x22>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80099f4:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8009cb8 <HAL_PCD_IRQHandler+0x2d4>
 80099f8:	4fae      	ldr	r7, [pc, #696]	; (8009cb4 <HAL_PCD_IRQHandler+0x2d0>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80099fa:	6820      	ldr	r0, [r4, #0]
 80099fc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009a00:	041b      	lsls	r3, r3, #16
 8009a02:	f100 8093 	bmi.w	8009b2c <HAL_PCD_IRQHandler+0x148>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8009a06:	6820      	ldr	r0, [r4, #0]
 8009a08:	f003 fdc0 	bl	800d58c <USB_ReadInterrupts>
 8009a0c:	0541      	lsls	r1, r0, #21
 8009a0e:	d50f      	bpl.n	8009a30 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009a10:	6822      	ldr	r2, [r4, #0]
 8009a12:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a1a:	041b      	lsls	r3, r3, #16
 8009a1c:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8009a1e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009a20:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8009a24:	f004 fe4b 	bl	800e6be <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009a28:	2100      	movs	r1, #0
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f7ff ffc6 	bl	80099bc <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8009a30:	6820      	ldr	r0, [r4, #0]
 8009a32:	f003 fdab 	bl	800d58c <USB_ReadInterrupts>
 8009a36:	0446      	lsls	r6, r0, #17
 8009a38:	d508      	bpl.n	8009a4c <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009a3a:	6822      	ldr	r2, [r4, #0]
 8009a3c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a44:	041b      	lsls	r3, r3, #16
 8009a46:	0c1b      	lsrs	r3, r3, #16
 8009a48:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8009a4c:	6820      	ldr	r0, [r4, #0]
 8009a4e:	f003 fd9d 	bl	800d58c <USB_ReadInterrupts>
 8009a52:	0485      	lsls	r5, r0, #18
 8009a54:	d508      	bpl.n	8009a68 <HAL_PCD_IRQHandler+0x84>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009a56:	6822      	ldr	r2, [r4, #0]
 8009a58:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a60:	041b      	lsls	r3, r3, #16
 8009a62:	0c1b      	lsrs	r3, r3, #16
 8009a64:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8009a68:	6820      	ldr	r0, [r4, #0]
 8009a6a:	f003 fd8f 	bl	800d58c <USB_ReadInterrupts>
 8009a6e:	04c0      	lsls	r0, r0, #19
 8009a70:	d51c      	bpl.n	8009aac <HAL_PCD_IRQHandler+0xc8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a78:	f023 0304 	bic.w	r3, r3, #4
 8009a7c:	041b      	lsls	r3, r3, #16
 8009a7e:	0c1b      	lsrs	r3, r3, #16
 8009a80:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009a84:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a88:	f023 0308 	bic.w	r3, r3, #8
 8009a8c:	041b      	lsls	r3, r3, #16
 8009a8e:	0c1b      	lsrs	r3, r3, #16
 8009a90:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8009a94:	4620      	mov	r0, r4
 8009a96:	f004 fe35 	bl	800e704 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aa4:	041b      	lsls	r3, r3, #16
 8009aa6:	0c1b      	lsrs	r3, r3, #16
 8009aa8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	f003 fd6d 	bl	800d58c <USB_ReadInterrupts>
 8009ab2:	0501      	lsls	r1, r0, #20
 8009ab4:	d519      	bpl.n	8009aea <HAL_PCD_IRQHandler+0x106>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009ab6:	6822      	ldr	r2, [r4, #0]
 8009ab8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	f043 0308 	orr.w	r3, r3, #8
 8009ac2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009ac6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ace:	041b      	lsls	r3, r3, #16
 8009ad0:	0c1b      	lsrs	r3, r3, #16
 8009ad2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009ad6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	f043 0304 	orr.w	r3, r3, #4
 8009ae0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f004 fdfd 	bl	800e6e4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8009aea:	6820      	ldr	r0, [r4, #0]
 8009aec:	f003 fd4e 	bl	800d58c <USB_ReadInterrupts>
 8009af0:	0582      	lsls	r2, r0, #22
 8009af2:	d50b      	bpl.n	8009b0c <HAL_PCD_IRQHandler+0x128>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009af4:	6822      	ldr	r2, [r4, #0]
 8009af6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009afa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009afe:	041b      	lsls	r3, r3, #16
 8009b00:	0c1b      	lsrs	r3, r3, #16
 8009b02:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009b06:	4620      	mov	r0, r4
 8009b08:	f004 fdd5 	bl	800e6b6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8009b0c:	6820      	ldr	r0, [r4, #0]
 8009b0e:	f003 fd3d 	bl	800d58c <USB_ReadInterrupts>
 8009b12:	05c3      	lsls	r3, r0, #23
 8009b14:	d508      	bpl.n	8009b28 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009b16:	6822      	ldr	r2, [r4, #0]
 8009b18:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b20:	041b      	lsls	r3, r3, #16
 8009b22:	0c1b      	lsrs	r3, r3, #16
 8009b24:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8009b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8009b2c:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8009b30:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8009b32:	f015 050f 	ands.w	r5, r5, #15
 8009b36:	f040 80c1 	bne.w	8009cbc <HAL_PCD_IRQHandler+0x2d8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009b3a:	f011 0110 	ands.w	r1, r1, #16
 8009b3e:	d12d      	bne.n	8009b9c <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b40:	8803      	ldrh	r3, [r0, #0]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	ea03 0308 	and.w	r3, r3, r8
 8009b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b4c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009b4e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009b52:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b5c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8009b60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009b62:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8009b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b6a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8009b6c:	4413      	add	r3, r2
 8009b6e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009b70:	4620      	mov	r0, r4
 8009b72:	f004 fd98 	bl	800e6a6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009b76:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f43f af3d 	beq.w	80099fa <HAL_PCD_IRQHandler+0x16>
 8009b80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009b82:	2a00      	cmp	r2, #0
 8009b84:	f47f af39 	bne.w	80099fa <HAL_PCD_IRQHandler+0x16>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009b88:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009b8c:	6821      	ldr	r1, [r4, #0]
 8009b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b92:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009b96:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8009b9a:	e72e      	b.n	80099fa <HAL_PCD_IRQHandler+0x16>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009b9c:	8805      	ldrh	r5, [r0, #0]
 8009b9e:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009ba0:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8009ba4:	d021      	beq.n	8009bea <HAL_PCD_IRQHandler+0x206>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009ba6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009baa:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bb4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009bb8:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009bbc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8009bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009bc4:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009bc8:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8009bcc:	f003 ff0a 	bl	800d9e4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009bd0:	6822      	ldr	r2, [r4, #0]
 8009bd2:	8813      	ldrh	r3, [r2, #0]
 8009bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd8:	051b      	lsls	r3, r3, #20
 8009bda:	0d1b      	lsrs	r3, r3, #20
 8009bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009be2:	4620      	mov	r0, r4
 8009be4:	f004 fd50 	bl	800e688 <HAL_PCD_SetupStageCallback>
 8009be8:	e707      	b.n	80099fa <HAL_PCD_IRQHandler+0x16>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009bea:	041a      	lsls	r2, r3, #16
 8009bec:	f57f af05 	bpl.w	80099fa <HAL_PCD_IRQHandler+0x16>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009bf0:	8803      	ldrh	r3, [r0, #0]
 8009bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf6:	051b      	lsls	r3, r3, #20
 8009bf8:	0d1b      	lsrs	r3, r3, #20
 8009bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bfe:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009c00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009c04:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009c12:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8009c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c1a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009c1e:	b18b      	cbz	r3, 8009c44 <HAL_PCD_IRQHandler+0x260>
 8009c20:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8009c24:	b171      	cbz	r1, 8009c44 <HAL_PCD_IRQHandler+0x260>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009c26:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009c2a:	f003 fedb 	bl	800d9e4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8009c2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c32:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8009c36:	4413      	add	r3, r2
 8009c38:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f004 fd28 	bl	800e694 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8009c44:	6821      	ldr	r1, [r4, #0]
 8009c46:	880b      	ldrh	r3, [r1, #0]
 8009c48:	051b      	lsls	r3, r3, #20
 8009c4a:	f53f aed6 	bmi.w	80099fa <HAL_PCD_IRQHandler+0x16>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009c4e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8009c52:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8009c5c:	b9cd      	cbnz	r5, 8009c92 <HAL_PCD_IRQHandler+0x2ae>
 8009c5e:	5ac2      	ldrh	r2, [r0, r3]
 8009c60:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009c64:	0412      	lsls	r2, r2, #16
 8009c66:	0c12      	lsrs	r2, r2, #16
 8009c68:	52c2      	strh	r2, [r0, r3]
 8009c6a:	5ac2      	ldrh	r2, [r0, r3]
 8009c6c:	b292      	uxth	r2, r2
 8009c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c72:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009c74:	880b      	ldrh	r3, [r1, #0]
 8009c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	0c1b      	lsrs	r3, r3, #16
 8009c82:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8e:	800b      	strh	r3, [r1, #0]
 8009c90:	e6b3      	b.n	80099fa <HAL_PCD_IRQHandler+0x16>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009c92:	2d3e      	cmp	r5, #62	; 0x3e
 8009c94:	d806      	bhi.n	8009ca4 <HAL_PCD_IRQHandler+0x2c0>
 8009c96:	086a      	lsrs	r2, r5, #1
 8009c98:	07ee      	lsls	r6, r5, #31
 8009c9a:	bf48      	it	mi
 8009c9c:	3201      	addmi	r2, #1
 8009c9e:	0292      	lsls	r2, r2, #10
 8009ca0:	b292      	uxth	r2, r2
 8009ca2:	e7e6      	b.n	8009c72 <HAL_PCD_IRQHandler+0x28e>
 8009ca4:	096a      	lsrs	r2, r5, #5
 8009ca6:	06ed      	lsls	r5, r5, #27
 8009ca8:	bf08      	it	eq
 8009caa:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8009cae:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 8009cb2:	e7f5      	b.n	8009ca0 <HAL_PCD_IRQHandler+0x2bc>
 8009cb4:	ffff8000 	.word	0xffff8000
 8009cb8:	ffff8f0f 	.word	0xffff8f0f
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009cbc:	fa0f f985 	sxth.w	r9, r5
 8009cc0:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009cc4:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009cc6:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009cc8:	f140 80f5 	bpl.w	8009eb6 <HAL_PCD_IRQHandler+0x4d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009ccc:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8009cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cd4:	051b      	lsls	r3, r3, #20
 8009cd6:	0d1b      	lsrs	r3, r3, #20
 8009cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8009cdc:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009cde:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 8009ce2:	fb01 4105 	mla	r1, r1, r5, r4
 8009ce6:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8009cea:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8009cee:	b9bb      	cbnz	r3, 8009d20 <HAL_PCD_IRQHandler+0x33c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009cf0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009cf4:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	3306      	adds	r3, #6
 8009cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d00:	f83c a013 	ldrh.w	sl, [ip, r3, lsl #1]
 8009d04:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8009d08:	f1ba 0f00 	cmp.w	sl, #0
 8009d0c:	f000 80b7 	beq.w	8009e7e <HAL_PCD_IRQHandler+0x49a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009d10:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8009d14:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009d16:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009d1a:	f003 fe63 	bl	800d9e4 <USB_ReadPMA>
 8009d1e:	e0ae      	b.n	8009e7e <HAL_PCD_IRQHandler+0x49a>
          if (ep->type == EP_TYPE_BULK)
 8009d20:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8009d2a:	f040 8084 	bne.w	8009e36 <HAL_PCD_IRQHandler+0x452>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009d2e:	f416 4b80 	ands.w	fp, r6, #16384	; 0x4000
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);

    if (ep->xfer_len >= count)
 8009d32:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d36:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009d3a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009d3e:	d03d      	beq.n	8009dbc <HAL_PCD_IRQHandler+0x3d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d40:	fa1a fa8e 	uxtah	sl, sl, lr
 8009d44:	f10a 0a02 	add.w	sl, sl, #2
 8009d48:	f83c a01a 	ldrh.w	sl, [ip, sl, lsl #1]
 8009d4c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8009d50:	4592      	cmp	sl, r2
 8009d52:	d913      	bls.n	8009d7c <HAL_PCD_IRQHandler+0x398>
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009d5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d66:	0412      	lsls	r2, r2, #16
 8009d68:	0c12      	lsrs	r2, r2, #16
 8009d6a:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8009d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d76:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8009d7a:	e005      	b.n	8009d88 <HAL_PCD_IRQHandler+0x3a4>
      ep->xfer_len -= count;
 8009d7c:	eba2 020a 	sub.w	r2, r2, sl
 8009d80:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	d0e8      	beq.n	8009d5a <HAL_PCD_IRQHandler+0x376>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009d88:	0672      	lsls	r2, r6, #25
 8009d8a:	d50d      	bpl.n	8009da8 <HAL_PCD_IRQHandler+0x3c4>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009d8c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d90:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009d94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d98:	0412      	lsls	r2, r2, #16
 8009d9a:	0c12      	lsrs	r2, r2, #16
 8009d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009da0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009da4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8009da8:	f1ba 0f00 	cmp.w	sl, #0
 8009dac:	d067      	beq.n	8009e7e <HAL_PCD_IRQHandler+0x49a>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009dae:	2128      	movs	r1, #40	; 0x28
 8009db0:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009db4:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009db8:	4653      	mov	r3, sl
 8009dba:	e7ac      	b.n	8009d16 <HAL_PCD_IRQHandler+0x332>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009dbc:	fa1a fe8e 	uxtah	lr, sl, lr
 8009dc0:	f10e 0e06 	add.w	lr, lr, #6
 8009dc4:	f83c a01e 	ldrh.w	sl, [ip, lr, lsl #1]
 8009dc8:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8009dcc:	4592      	cmp	sl, r2
 8009dce:	d912      	bls.n	8009df6 <HAL_PCD_IRQHandler+0x412>
 8009dd0:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009dd4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009dd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ddc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009de0:	0412      	lsls	r2, r2, #16
 8009de2:	0c12      	lsrs	r2, r2, #16
 8009de4:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8009de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009df0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8009df4:	e005      	b.n	8009e02 <HAL_PCD_IRQHandler+0x41e>
      ep->xfer_len -= count;
 8009df6:	eba2 020a 	sub.w	r2, r2, sl
 8009dfa:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009dfe:	2a00      	cmp	r2, #0
 8009e00:	d0e8      	beq.n	8009dd4 <HAL_PCD_IRQHandler+0x3f0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009e02:	0671      	lsls	r1, r6, #25
 8009e04:	d40d      	bmi.n	8009e22 <HAL_PCD_IRQHandler+0x43e>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009e06:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e0a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e12:	0412      	lsls	r2, r2, #16
 8009e14:	0c12      	lsrs	r2, r2, #16
 8009e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e1a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009e1e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8009e22:	f1ba 0f00 	cmp.w	sl, #0
 8009e26:	d02a      	beq.n	8009e7e <HAL_PCD_IRQHandler+0x49a>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009e28:	2128      	movs	r1, #40	; 0x28
 8009e2a:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009e2e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009e32:	4653      	mov	r3, sl
 8009e34:	e76f      	b.n	8009d16 <HAL_PCD_IRQHandler+0x332>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009e36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009e3a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e42:	0412      	lsls	r2, r2, #16
 8009e44:	0c12      	lsrs	r2, r2, #16
 8009e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e4a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009e4e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009e52:	f891 e168 	ldrb.w	lr, [r1, #360]	; 0x168
 8009e56:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 8009e5a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e5e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009e62:	f04f 0208 	mov.w	r2, #8
 8009e66:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009e68:	d05d      	beq.n	8009f26 <HAL_PCD_IRQHandler+0x542>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e6a:	3302      	adds	r3, #2
 8009e6c:	fb12 330e 	smlabb	r3, r2, lr, r3
 8009e70:	f83c a013 	ldrh.w	sl, [ip, r3, lsl #1]
 8009e74:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8009e78:	f1ba 0f00 	cmp.w	sl, #0
 8009e7c:	d19a      	bne.n	8009db4 <HAL_PCD_IRQHandler+0x3d0>
        ep->xfer_count += count;
 8009e7e:	2128      	movs	r1, #40	; 0x28
 8009e80:	fb01 4305 	mla	r3, r1, r5, r4
 8009e84:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8009e88:	4452      	add	r2, sl
 8009e8a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8009e8e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009e92:	4452      	add	r2, sl
 8009e94:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009e98:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8009e9c:	b11a      	cbz	r2, 8009ea6 <HAL_PCD_IRQHandler+0x4c2>
 8009e9e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8009ea2:	459a      	cmp	sl, r3
 8009ea4:	d24a      	bcs.n	8009f3c <HAL_PCD_IRQHandler+0x558>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009ea6:	2328      	movs	r3, #40	; 0x28
 8009ea8:	fb03 4305 	mla	r3, r3, r5, r4
 8009eac:	4620      	mov	r0, r4
 8009eae:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8009eb2:	f004 fbef 	bl	800e694 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009eb6:	0632      	lsls	r2, r6, #24
 8009eb8:	f57f ad9f 	bpl.w	80099fa <HAL_PCD_IRQHandler+0x16>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009ebc:	6820      	ldr	r0, [r4, #0]
 8009ebe:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	ea03 0308 	and.w	r3, r3, r8
 8009ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ecc:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 8009ed0:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8009ed4:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 8009ed8:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8009edc:	f899 302b 	ldrb.w	r3, [r9, #43]	; 0x2b
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d056      	beq.n	8009f92 <HAL_PCD_IRQHandler+0x5ae>
          ep->xfer_len = 0U;
 8009ee4:	fb0c 4c05 	mla	ip, ip, r5, r4
 8009ee8:	2500      	movs	r5, #0
 8009eea:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009eee:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8009ef2:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8009ef6:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8009efa:	d038      	beq.n	8009f6e <HAL_PCD_IRQHandler+0x58a>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009efc:	bb33      	cbnz	r3, 8009f4c <HAL_PCD_IRQHandler+0x568>
 8009efe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009f02:	f200 4004 	addw	r0, r0, #1028	; 0x404
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f06:	fa10 f083 	uxtah	r0, r0, r3
 8009f0a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8009f0e:	8803      	ldrh	r3, [r0, #0]
 8009f10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f14:	041b      	lsls	r3, r3, #16
 8009f16:	0c1b      	lsrs	r3, r3, #16
 8009f18:	8003      	strh	r3, [r0, #0]
 8009f1a:	8803      	ldrh	r3, [r0, #0]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f22:	8003      	strh	r3, [r0, #0]
 8009f24:	e01d      	b.n	8009f62 <HAL_PCD_IRQHandler+0x57e>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009f26:	3306      	adds	r3, #6
 8009f28:	fb12 330e 	smlabb	r3, r2, lr, r3
 8009f2c:	f83c a013 	ldrh.w	sl, [ip, r3, lsl #1]
 8009f30:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8009f34:	f1ba 0f00 	cmp.w	sl, #0
 8009f38:	d0a1      	beq.n	8009e7e <HAL_PCD_IRQHandler+0x49a>
 8009f3a:	e778      	b.n	8009e2e <HAL_PCD_IRQHandler+0x44a>
        ep = &hpcd->OUT_ep[epindex];
 8009f3c:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009f40:	6820      	ldr	r0, [r4, #0]
 8009f42:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8009f46:	f003 fb35 	bl	800d5b4 <USB_EPStartXfer>
 8009f4a:	e7b4      	b.n	8009eb6 <HAL_PCD_IRQHandler+0x4d2>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d108      	bne.n	8009f62 <HAL_PCD_IRQHandler+0x57e>
 8009f50:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f54:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8009f58:	fa10 f082 	uxtah	r0, r0, r2
 8009f5c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8009f60:	8005      	strh	r5, [r0, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f62:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f66:	4620      	mov	r0, r4
 8009f68:	f004 fb9d 	bl	800e6a6 <HAL_PCD_DataInStageCallback>
 8009f6c:	e545      	b.n	80099fa <HAL_PCD_IRQHandler+0x16>
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f6e:	b923      	cbnz	r3, 8009f7a <HAL_PCD_IRQHandler+0x596>
 8009f70:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009f74:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8009f78:	e7c5      	b.n	8009f06 <HAL_PCD_IRQHandler+0x522>
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d1f1      	bne.n	8009f62 <HAL_PCD_IRQHandler+0x57e>
 8009f7e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009f82:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8009f86:	fa10 f383 	uxtah	r3, r0, r3
 8009f8a:	eb03 1001 	add.w	r0, r3, r1, lsl #4
 8009f8e:	8006      	strh	r6, [r0, #0]
 8009f90:	e7e7      	b.n	8009f62 <HAL_PCD_IRQHandler+0x57e>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009f92:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
          if (ep->xfer_len > TxByteNbre)
 8009f96:	fb0c 4c05 	mla	ip, ip, r5, r4
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8009f9a:	f416 7b80 	ands.w	fp, r6, #256	; 0x100
          if (ep->xfer_len > TxByteNbre)
 8009f9e:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009fa2:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8009fa6:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8009faa:	d123      	bne.n	8009ff4 <HAL_PCD_IRQHandler+0x610>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009fac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009fb0:	fa1a fa83 	uxtah	sl, sl, r3
 8009fb4:	f10a 0a02 	add.w	sl, sl, #2
 8009fb8:	f83e 301a 	ldrh.w	r3, [lr, sl, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 8009fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d302      	bcc.n	8009fca <HAL_PCD_IRQHandler+0x5e6>
 8009fc4:	f8cc b040 	str.w	fp, [ip, #64]	; 0x40
 8009fc8:	e7cd      	b.n	8009f66 <HAL_PCD_IRQHandler+0x582>
            ep->xfer_len -= TxByteNbre;
 8009fca:	1ad2      	subs	r2, r2, r3
 8009fcc:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
            ep->xfer_buff += TxByteNbre;
 8009fd0:	f8dc 203c 	ldr.w	r2, [ip, #60]	; 0x3c
 8009fd4:	441a      	add	r2, r3
 8009fd6:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8009fda:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8009fde:	3501      	adds	r5, #1
            ep->xfer_count += TxByteNbre;
 8009fe0:	4413      	add	r3, r2
        ep = &hpcd->IN_ep[epindex];
 8009fe2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8009fe6:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009fea:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009fee:	f003 fae1 	bl	800d5b4 <USB_EPStartXfer>
 8009ff2:	e502      	b.n	80099fa <HAL_PCD_IRQHandler+0x16>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009ff4:	f016 0c40 	ands.w	ip, r6, #64	; 0x40
 8009ff8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8009ffc:	f000 80df 	beq.w	800a1be <HAL_PCD_IRQHandler+0x7da>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a000:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 800a004:	fa1a fa8c 	uxtah	sl, sl, ip
 800a008:	f10a 0a02 	add.w	sl, sl, #2
 800a00c:	b2b6      	uxth	r6, r6
 800a00e:	f83e c01a 	ldrh.w	ip, [lr, sl, lsl #1]
 800a012:	f04f 0e28 	mov.w	lr, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 800a016:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a01a:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxByteNbre;
 800a01c:	fb0e 4e05 	mla	lr, lr, r5, r4
 800a020:	bf34      	ite	cc
 800a022:	eba2 020c 	subcc.w	r2, r2, ip
    }
    else
    {
      ep->xfer_len = 0U;
 800a026:	2200      	movcs	r2, #0
 800a028:	f8ce 2040 	str.w	r2, [lr, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	d150      	bne.n	800a0d2 <HAL_PCD_IRQHandler+0x6ee>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a030:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 800a034:	2d00      	cmp	r5, #0
 800a036:	d13a      	bne.n	800a0ae <HAL_PCD_IRQHandler+0x6ca>
 800a038:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800a03c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800a040:	010b      	lsls	r3, r1, #4
 800a042:	fa12 f585 	uxtah	r5, r2, r5
 800a046:	5aea      	ldrh	r2, [r5, r3]
 800a048:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a04c:	0412      	lsls	r2, r2, #16
 800a04e:	0c12      	lsrs	r2, r2, #16
 800a050:	52ea      	strh	r2, [r5, r3]
 800a052:	5aea      	ldrh	r2, [r5, r3]
 800a054:	b292      	uxth	r2, r2
 800a056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a05a:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a05c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a060:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800a064:	fa10 f082 	uxtah	r0, r0, r2
 800a068:	5ac2      	ldrh	r2, [r0, r3]
 800a06a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a06e:	0412      	lsls	r2, r2, #16
 800a070:	0c12      	lsrs	r2, r2, #16
 800a072:	52c2      	strh	r2, [r0, r3]
 800a074:	5ac2      	ldrh	r2, [r0, r3]
 800a076:	b292      	uxth	r2, r2
 800a078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a07c:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a07e:	4620      	mov	r0, r4
 800a080:	f004 fb11 	bl	800e6a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a084:	2e00      	cmp	r6, #0
 800a086:	f000 80e0 	beq.w	800a24a <HAL_PCD_IRQHandler+0x866>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a08a:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 800a08e:	6822      	ldr	r2, [r4, #0]
 800a090:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a09c:	041b      	lsls	r3, r3, #16
 800a09e:	0c1b      	lsrs	r3, r3, #16
 800a0a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a0ac:	e0cd      	b.n	800a24a <HAL_PCD_IRQHandler+0x866>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a0ae:	2d01      	cmp	r5, #1
 800a0b0:	d1e5      	bne.n	800a07e <HAL_PCD_IRQHandler+0x69a>
 800a0b2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800a0b6:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800a0ba:	010b      	lsls	r3, r1, #4
 800a0bc:	fa1c f585 	uxtah	r5, ip, r5
 800a0c0:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a0c2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800a0c6:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800a0ca:	fa10 f585 	uxtah	r5, r0, r5
 800a0ce:	52ea      	strh	r2, [r5, r3]
 800a0d0:	e7d5      	b.n	800a07e <HAL_PCD_IRQHandler+0x69a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a0d2:	b16e      	cbz	r6, 800a0f0 <HAL_PCD_IRQHandler+0x70c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a0d4:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800a0d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a0dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a0e0:	0412      	lsls	r2, r2, #16
 800a0e2:	0c12      	lsrs	r2, r2, #16
 800a0e4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a0e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0ec:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800a0f0:	2228      	movs	r2, #40	; 0x28
 800a0f2:	fb02 4205 	mla	r2, r2, r5, r4
 800a0f6:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	f040 80a5 	bne.w	800a24a <HAL_PCD_IRQHandler+0x866>
        ep->xfer_buff += TxByteNbre;
 800a100:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800a102:	f8d2 e048 	ldr.w	lr, [r2, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 800a106:	eb03 060c 	add.w	r6, r3, ip
        ep->xfer_count += TxByteNbre;
 800a10a:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800a10c:	63d6      	str	r6, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800a10e:	4463      	add	r3, ip
 800a110:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800a112:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a114:	459e      	cmp	lr, r3
 800a116:	d326      	bcc.n	800a166 <HAL_PCD_IRQHandler+0x782>
          ep->xfer_len_db -= len;
 800a118:	ebae 0e03 	sub.w	lr, lr, r3
 800a11c:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a120:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 800a124:	fa1f fc83 	uxth.w	ip, r3
 800a128:	2a00      	cmp	r2, #0
 800a12a:	d13b      	bne.n	800a1a4 <HAL_PCD_IRQHandler+0x7c0>
 800a12c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a130:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 800a134:	fa1e f282 	uxtah	r2, lr, r2
 800a138:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800a13c:	bb03      	cbnz	r3, 800a180 <HAL_PCD_IRQHandler+0x79c>
 800a13e:	880b      	ldrh	r3, [r1, #0]
 800a140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a144:	041b      	lsls	r3, r3, #16
 800a146:	0c1b      	lsrs	r3, r3, #16
 800a148:	800b      	strh	r3, [r1, #0]
 800a14a:	880b      	ldrh	r3, [r1, #0]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a152:	800b      	strh	r3, [r1, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a154:	2128      	movs	r1, #40	; 0x28
 800a156:	fb01 4505 	mla	r5, r1, r5, r4
 800a15a:	4663      	mov	r3, ip
 800a15c:	8e2a      	ldrh	r2, [r5, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a15e:	4631      	mov	r1, r6
 800a160:	f003 fa18 	bl	800d594 <USB_WritePMA>
 800a164:	e071      	b.n	800a24a <HAL_PCD_IRQHandler+0x866>
        else if (ep->xfer_len_db == 0U)
 800a166:	f1be 0f00 	cmp.w	lr, #0
 800a16a:	d103      	bne.n	800a174 <HAL_PCD_IRQHandler+0x790>
          ep->xfer_fill_db = 0U;
 800a16c:	f882 e04c 	strb.w	lr, [r2, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 800a170:	4663      	mov	r3, ip
 800a172:	e7d5      	b.n	800a120 <HAL_PCD_IRQHandler+0x73c>
          ep->xfer_fill_db = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800a17a:	6493      	str	r3, [r2, #72]	; 0x48
 800a17c:	4673      	mov	r3, lr
 800a17e:	e7cf      	b.n	800a120 <HAL_PCD_IRQHandler+0x73c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a180:	2b3e      	cmp	r3, #62	; 0x3e
 800a182:	d807      	bhi.n	800a194 <HAL_PCD_IRQHandler+0x7b0>
 800a184:	085a      	lsrs	r2, r3, #1
 800a186:	07db      	lsls	r3, r3, #31
 800a188:	bf48      	it	mi
 800a18a:	3201      	addmi	r2, #1
 800a18c:	0292      	lsls	r2, r2, #10
 800a18e:	b292      	uxth	r2, r2
 800a190:	800a      	strh	r2, [r1, #0]
 800a192:	e7df      	b.n	800a154 <HAL_PCD_IRQHandler+0x770>
 800a194:	095a      	lsrs	r2, r3, #5
 800a196:	06db      	lsls	r3, r3, #27
 800a198:	bf08      	it	eq
 800a19a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a19e:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 800a1a2:	e7f4      	b.n	800a18e <HAL_PCD_IRQHandler+0x7aa>
 800a1a4:	2a01      	cmp	r2, #1
 800a1a6:	d1d5      	bne.n	800a154 <HAL_PCD_IRQHandler+0x770>
 800a1a8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a1ac:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800a1b0:	fa12 f383 	uxtah	r3, r2, r3
 800a1b4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a1b8:	f8a1 c000 	strh.w	ip, [r1]
 800a1bc:	e7ca      	b.n	800a154 <HAL_PCD_IRQHandler+0x770>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a1be:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 800a1c2:	fa1a fb8b 	uxtah	fp, sl, fp
 800a1c6:	f10b 0b06 	add.w	fp, fp, #6
 800a1ca:	b2b6      	uxth	r6, r6
 800a1cc:	f83e e01b 	ldrh.w	lr, [lr, fp, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 800a1d0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a1d4:	4596      	cmp	lr, r2
      ep->xfer_len = 0U;
 800a1d6:	bf88      	it	hi
 800a1d8:	4662      	movhi	r2, ip
 800a1da:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800a1de:	fb0c 4c05 	mla	ip, ip, r5, r4
      ep->xfer_len -= TxByteNbre;
 800a1e2:	bf98      	it	ls
 800a1e4:	eba2 020e 	subls.w	r2, r2, lr
 800a1e8:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800a1ec:	2a00      	cmp	r2, #0
 800a1ee:	d152      	bne.n	800a296 <HAL_PCD_IRQHandler+0x8b2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a1f0:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 800a1f4:	2d00      	cmp	r5, #0
 800a1f6:	d13c      	bne.n	800a272 <HAL_PCD_IRQHandler+0x88e>
 800a1f8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800a1fc:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800a200:	010b      	lsls	r3, r1, #4
 800a202:	fa12 f585 	uxtah	r5, r2, r5
 800a206:	5aea      	ldrh	r2, [r5, r3]
 800a208:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a20c:	0412      	lsls	r2, r2, #16
 800a20e:	0c12      	lsrs	r2, r2, #16
 800a210:	52ea      	strh	r2, [r5, r3]
 800a212:	5aea      	ldrh	r2, [r5, r3]
 800a214:	b292      	uxth	r2, r2
 800a216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a21a:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a21c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a220:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800a224:	fa10 f082 	uxtah	r0, r0, r2
 800a228:	5ac2      	ldrh	r2, [r0, r3]
 800a22a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a22e:	0412      	lsls	r2, r2, #16
 800a230:	0c12      	lsrs	r2, r2, #16
 800a232:	52c2      	strh	r2, [r0, r3]
 800a234:	5ac2      	ldrh	r2, [r0, r3]
 800a236:	b292      	uxth	r2, r2
 800a238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a23c:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a23e:	4620      	mov	r0, r4
 800a240:	f004 fa31 	bl	800e6a6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a244:	2e00      	cmp	r6, #0
 800a246:	f43f af20 	beq.w	800a08a <HAL_PCD_IRQHandler+0x6a6>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a24a:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a254:	b29b      	uxth	r3, r3
 800a256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a25a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a25e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a26a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800a26e:	f7ff bbc4 	b.w	80099fa <HAL_PCD_IRQHandler+0x16>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a272:	2d01      	cmp	r5, #1
 800a274:	d1e3      	bne.n	800a23e <HAL_PCD_IRQHandler+0x85a>
 800a276:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800a27a:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800a27e:	010b      	lsls	r3, r1, #4
 800a280:	fa1c f585 	uxtah	r5, ip, r5
 800a284:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a286:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800a28a:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800a28e:	fa10 f585 	uxtah	r5, r0, r5
 800a292:	52ea      	strh	r2, [r5, r3]
 800a294:	e7d3      	b.n	800a23e <HAL_PCD_IRQHandler+0x85a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a296:	b96e      	cbnz	r6, 800a2b4 <HAL_PCD_IRQHandler+0x8d0>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a298:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800a29c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a2a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a2a4:	0412      	lsls	r2, r2, #16
 800a2a6:	0c12      	lsrs	r2, r2, #16
 800a2a8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a2ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2b0:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800a2b4:	2228      	movs	r2, #40	; 0x28
 800a2b6:	fb02 4205 	mla	r2, r2, r5, r4
 800a2ba:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d1c3      	bne.n	800a24a <HAL_PCD_IRQHandler+0x866>
        ep->xfer_count += TxByteNbre;
 800a2c2:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800a2c4:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800a2c6:	f8d2 c048 	ldr.w	ip, [r2, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 800a2ca:	4473      	add	r3, lr
 800a2cc:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800a2ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800a2d0:	4476      	add	r6, lr
        if (ep->xfer_len_db >= ep->maxpacket)
 800a2d2:	459c      	cmp	ip, r3
        ep->xfer_buff += TxByteNbre;
 800a2d4:	63d6      	str	r6, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800a2d6:	d323      	bcc.n	800a320 <HAL_PCD_IRQHandler+0x93c>
          ep->xfer_len_db -= len;
 800a2d8:	ebac 0c03 	sub.w	ip, ip, r3
 800a2dc:	f8c2 c048 	str.w	ip, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a2e0:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 800a2e4:	fa1f fc83 	uxth.w	ip, r3
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	d138      	bne.n	800a35e <HAL_PCD_IRQHandler+0x97a>
 800a2ec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a2f0:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 800a2f4:	fa1e f282 	uxtah	r2, lr, r2
 800a2f8:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800a2fc:	b9eb      	cbnz	r3, 800a33a <HAL_PCD_IRQHandler+0x956>
 800a2fe:	880b      	ldrh	r3, [r1, #0]
 800a300:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a304:	041b      	lsls	r3, r3, #16
 800a306:	0c1b      	lsrs	r3, r3, #16
 800a308:	800b      	strh	r3, [r1, #0]
 800a30a:	880b      	ldrh	r3, [r1, #0]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a312:	800b      	strh	r3, [r1, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a314:	2128      	movs	r1, #40	; 0x28
 800a316:	fb01 4505 	mla	r5, r1, r5, r4
 800a31a:	4663      	mov	r3, ip
 800a31c:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800a31e:	e71e      	b.n	800a15e <HAL_PCD_IRQHandler+0x77a>
        else if (ep->xfer_len_db == 0U)
 800a320:	f1bc 0f00 	cmp.w	ip, #0
 800a324:	d103      	bne.n	800a32e <HAL_PCD_IRQHandler+0x94a>
          ep->xfer_fill_db = 0U;
 800a326:	f882 c04c 	strb.w	ip, [r2, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 800a32a:	4673      	mov	r3, lr
 800a32c:	e7d8      	b.n	800a2e0 <HAL_PCD_IRQHandler+0x8fc>
          ep->xfer_len_db = 0U;
 800a32e:	2300      	movs	r3, #0
 800a330:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800a332:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 800a336:	4663      	mov	r3, ip
 800a338:	e7d2      	b.n	800a2e0 <HAL_PCD_IRQHandler+0x8fc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a33a:	2b3e      	cmp	r3, #62	; 0x3e
 800a33c:	d807      	bhi.n	800a34e <HAL_PCD_IRQHandler+0x96a>
 800a33e:	085a      	lsrs	r2, r3, #1
 800a340:	07db      	lsls	r3, r3, #31
 800a342:	bf48      	it	mi
 800a344:	3201      	addmi	r2, #1
 800a346:	0292      	lsls	r2, r2, #10
 800a348:	b292      	uxth	r2, r2
 800a34a:	800a      	strh	r2, [r1, #0]
 800a34c:	e7e2      	b.n	800a314 <HAL_PCD_IRQHandler+0x930>
 800a34e:	095a      	lsrs	r2, r3, #5
 800a350:	06db      	lsls	r3, r3, #27
 800a352:	bf08      	it	eq
 800a354:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a358:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 800a35c:	e7f4      	b.n	800a348 <HAL_PCD_IRQHandler+0x964>
 800a35e:	2a01      	cmp	r2, #1
 800a360:	d1d8      	bne.n	800a314 <HAL_PCD_IRQHandler+0x930>
 800a362:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a366:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800a36a:	fa12 f383 	uxtah	r3, r2, r3
 800a36e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a372:	f8a1 c000 	strh.w	ip, [r1]
 800a376:	e7cd      	b.n	800a314 <HAL_PCD_IRQHandler+0x930>

0800a378 <HAL_PCD_EP_Open>:
{
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800a37e:	0609      	lsls	r1, r1, #24
{
 800a380:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a382:	d522      	bpl.n	800a3ca <HAL_PCD_EP_Open+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a384:	1c69      	adds	r1, r5, #1
 800a386:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a38a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800a38e:	2028      	movs	r0, #40	; 0x28
 800a390:	fb05 0000 	mla	r0, r5, r0, r0
 800a394:	4420      	add	r0, r4
 800a396:	2601      	movs	r6, #1
 800a398:	7046      	strb	r6, [r0, #1]
  ep->maxpacket = ep_mps;
 800a39a:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800a39c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a39e:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800a3a0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800a3a2:	b102      	cbz	r2, 800a3a6 <HAL_PCD_EP_Open+0x2e>
    ep->tx_fifo_num = ep->num;
 800a3a4:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800a3a6:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800a3a8:	bf04      	itt	eq
 800a3aa:	2300      	moveq	r3, #0
 800a3ac:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800a3ae:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d014      	beq.n	800a3e0 <HAL_PCD_EP_Open+0x68>
 800a3b6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a3b8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a3ba:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a3be:	f002 fe4d 	bl	800d05c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800a3c8:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3ca:	2028      	movs	r0, #40	; 0x28
 800a3cc:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 0U;
 800a3d0:	fb00 4005 	mla	r0, r0, r5, r4
 800a3d4:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3d6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800a3da:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 800a3de:	e7dc      	b.n	800a39a <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 800a3e0:	2002      	movs	r0, #2
 800a3e2:	e7f1      	b.n	800a3c8 <HAL_PCD_EP_Open+0x50>

0800a3e4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800a3e4:	060b      	lsls	r3, r1, #24
{
 800a3e6:	b510      	push	{r4, lr}
 800a3e8:	f001 0207 	and.w	r2, r1, #7
 800a3ec:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a3ee:	d519      	bpl.n	800a424 <HAL_PCD_EP_Close+0x40>
    ep->is_in = 1U;
 800a3f0:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3f2:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 800a3f4:	fb02 3303 	mla	r3, r2, r3, r3
 800a3f8:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a3fe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800a402:	2001      	movs	r0, #1
 800a404:	7058      	strb	r0, [r3, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a406:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800a408:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d014      	beq.n	800a43a <HAL_PCD_EP_Close+0x56>
 800a410:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a412:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a414:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a418:	f002 ff76 	bl	800d308 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a41c:	2000      	movs	r0, #0
 800a41e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800a422:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a424:	2328      	movs	r3, #40	; 0x28
 800a426:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800a42a:	fb03 0302 	mla	r3, r3, r2, r0
 800a42e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a430:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800a434:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800a438:	e7e5      	b.n	800a406 <HAL_PCD_EP_Close+0x22>
  __HAL_LOCK(hpcd);
 800a43a:	2002      	movs	r0, #2
 800a43c:	e7f1      	b.n	800a422 <HAL_PCD_EP_Close+0x3e>

0800a43e <HAL_PCD_EP_Receive>:
{
 800a43e:	b570      	push	{r4, r5, r6, lr}
 800a440:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800a444:	2628      	movs	r6, #40	; 0x28
 800a446:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 800a44a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800a44c:	f884 1168 	strb.w	r1, [r4, #360]	; 0x168
  ep->xfer_len = len;
 800a450:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 800a454:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
  ep->is_in = 0U;
 800a458:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a45c:	f504 71b4 	add.w	r1, r4, #360	; 0x168
 800a460:	6800      	ldr	r0, [r0, #0]
 800a462:	f003 f8a7 	bl	800d5b4 <USB_EPStartXfer>
}
 800a466:	4628      	mov	r0, r5
 800a468:	bd70      	pop	{r4, r5, r6, pc}

0800a46a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a46a:	f001 0107 	and.w	r1, r1, #7
 800a46e:	2328      	movs	r3, #40	; 0x28
 800a470:	fb03 0001 	mla	r0, r3, r1, r0
}
 800a474:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 800a478:	4770      	bx	lr

0800a47a <HAL_PCD_EP_Transmit>:
{
 800a47a:	b538      	push	{r3, r4, r5, lr}
 800a47c:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800a480:	2428      	movs	r4, #40	; 0x28
 800a482:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 800a486:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_len_db = len;
 800a48a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a48c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a490:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_fill_db = 1U;
 800a494:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 800a496:	2500      	movs	r5, #0
  ep->xfer_fill_db = 1U;
 800a498:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 800a49c:	6465      	str	r5, [r4, #68]	; 0x44
  ep->num = ep_addr & EP_ADDR_MSK;
 800a49e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4a2:	4411      	add	r1, r2
 800a4a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a4a8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->is_in = 1U;
 800a4ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a4b0:	6800      	ldr	r0, [r0, #0]
 800a4b2:	f003 f87f 	bl	800d5b4 <USB_EPStartXfer>
}
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}

0800a4ba <HAL_PCD_EP_SetStall>:
{
 800a4ba:	b538      	push	{r3, r4, r5, lr}
 800a4bc:	4604      	mov	r4, r0
 800a4be:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a4c2:	6863      	ldr	r3, [r4, #4]
 800a4c4:	4298      	cmp	r0, r3
 800a4c6:	d826      	bhi.n	800a516 <HAL_PCD_EP_SetStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800a4c8:	060b      	lsls	r3, r1, #24
 800a4ca:	d51a      	bpl.n	800a502 <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 1U;
 800a4cc:	2328      	movs	r3, #40	; 0x28
 800a4ce:	fb00 3303 	mla	r3, r0, r3, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4d2:	1c41      	adds	r1, r0, #1
    ep->is_in = 1U;
 800a4d4:	4423      	add	r3, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ep->is_in = 1U;
 800a4da:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4dc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 800a4e0:	705a      	strb	r2, [r3, #1]
  ep->is_stall = 1U;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4e6:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 800a4e8:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d014      	beq.n	800a51a <HAL_PCD_EP_SetStall+0x60>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a4f0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a4f2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a4f6:	f002 ffd8 	bl	800d4aa <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800a500:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800a502:	2528      	movs	r5, #40	; 0x28
 800a504:	fb05 4301 	mla	r3, r5, r1, r4
    ep->is_in = 0U;
 800a508:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 800a50a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800a50e:	2300      	movs	r3, #0
 800a510:	f882 3169 	strb.w	r3, [r2, #361]	; 0x169
 800a514:	e7e5      	b.n	800a4e2 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800a516:	2001      	movs	r0, #1
 800a518:	e7f2      	b.n	800a500 <HAL_PCD_EP_SetStall+0x46>
  __HAL_LOCK(hpcd);
 800a51a:	2002      	movs	r0, #2
 800a51c:	e7f0      	b.n	800a500 <HAL_PCD_EP_SetStall+0x46>

0800a51e <HAL_PCD_EP_ClrStall>:
{
 800a51e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a520:	6843      	ldr	r3, [r0, #4]
 800a522:	f001 020f 	and.w	r2, r1, #15
 800a526:	429a      	cmp	r2, r3
{
 800a528:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a52a:	d82a      	bhi.n	800a582 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800a52c:	060b      	lsls	r3, r1, #24
 800a52e:	f001 0207 	and.w	r2, r1, #7
 800a532:	d51b      	bpl.n	800a56c <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 1U;
 800a534:	2328      	movs	r3, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a536:	1c51      	adds	r1, r2, #1
    ep->is_in = 1U;
 800a538:	fb02 3303 	mla	r3, r2, r3, r3
 800a53c:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a53e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a542:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800a546:	2001      	movs	r0, #1
 800a548:	7058      	strb	r0, [r3, #1]
  ep->is_stall = 0U;
 800a54a:	2500      	movs	r5, #0
 800a54c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a54e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800a550:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a554:	2b01      	cmp	r3, #1
 800a556:	d016      	beq.n	800a586 <HAL_PCD_EP_ClrStall+0x68>
 800a558:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a55a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a55c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a560:	f002 ffc3 	bl	800d4ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a564:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a568:	4628      	mov	r0, r5
}
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a56c:	2328      	movs	r3, #40	; 0x28
 800a56e:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 800a572:	fb03 0302 	mla	r3, r3, r2, r0
 800a576:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a578:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800a57c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800a580:	e7e3      	b.n	800a54a <HAL_PCD_EP_ClrStall+0x2c>
    return HAL_ERROR;
 800a582:	2001      	movs	r0, #1
 800a584:	e7f1      	b.n	800a56a <HAL_PCD_EP_ClrStall+0x4c>
  __HAL_LOCK(hpcd);
 800a586:	2002      	movs	r0, #2
 800a588:	e7ef      	b.n	800a56a <HAL_PCD_EP_ClrStall+0x4c>

0800a58a <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a58a:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a58e:	bf18      	it	ne
 800a590:	f001 0107 	andne.w	r1, r1, #7
{
 800a594:	b510      	push	{r4, lr}
 800a596:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a59a:	bf15      	itete	ne
 800a59c:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a5a0:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5a4:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800a5a6:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a5aa:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800a5ac:	b91a      	cbnz	r2, 800a5b6 <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 800a5ae:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800a5b0:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a5ba:	6083      	str	r3, [r0, #8]
 800a5bc:	e7f9      	b.n	800a5b2 <HAL_PCDEx_PMAConfig+0x28>
	...

0800a5c0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800a5c0:	4a02      	ldr	r2, [pc, #8]	; (800a5cc <HAL_PWR_EnableBkUpAccess+0xc>)
 800a5c2:	6813      	ldr	r3, [r2, #0]
 800a5c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5c8:	6013      	str	r3, [r2, #0]
}
 800a5ca:	4770      	bx	lr
 800a5cc:	40007000 	.word	0x40007000

0800a5d0 <HAL_PWREx_EnableSDADC>:
{
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a5d0:	4a08      	ldr	r2, [pc, #32]	; (800a5f4 <HAL_PWREx_EnableSDADC+0x24>)
 800a5d2:	69d1      	ldr	r1, [r2, #28]
 800a5d4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800a5d8:	61d1      	str	r1, [r2, #28]
 800a5da:	69d2      	ldr	r2, [r2, #28]
{
 800a5dc:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800a5de:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a5e2:	9201      	str	r2, [sp, #4]
    
  PWR->CR |= Analogx;
 800a5e4:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <HAL_PWREx_EnableSDADC+0x28>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800a5e6:	9b01      	ldr	r3, [sp, #4]
  PWR->CR |= Analogx;
 800a5e8:	6813      	ldr	r3, [r2, #0]
 800a5ea:	4318      	orrs	r0, r3
 800a5ec:	6010      	str	r0, [r2, #0]
}
 800a5ee:	b002      	add	sp, #8
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	40021000 	.word	0x40021000
 800a5f8:	40007000 	.word	0x40007000

0800a5fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a600:	4605      	mov	r5, r0
 800a602:	2800      	cmp	r0, #0
 800a604:	d035      	beq.n	800a672 <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a606:	6803      	ldr	r3, [r0, #0]
 800a608:	07da      	lsls	r2, r3, #31
 800a60a:	d411      	bmi.n	800a630 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	079b      	lsls	r3, r3, #30
 800a610:	f100 8088 	bmi.w	800a724 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	071c      	lsls	r4, r3, #28
 800a618:	f100 80f8 	bmi.w	800a80c <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a61c:	682b      	ldr	r3, [r5, #0]
 800a61e:	0758      	lsls	r0, r3, #29
 800a620:	f100 8146 	bmi.w	800a8b0 <HAL_RCC_OscConfig+0x2b4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a624:	69e8      	ldr	r0, [r5, #28]
 800a626:	2800      	cmp	r0, #0
 800a628:	f040 81d4 	bne.w	800a9d4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }

  return HAL_OK;
 800a62c:	2000      	movs	r0, #0
 800a62e:	e04b      	b.n	800a6c8 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800a630:	4c9d      	ldr	r4, [pc, #628]	; (800a8a8 <HAL_RCC_OscConfig+0x2ac>)
 800a632:	6863      	ldr	r3, [r4, #4]
 800a634:	f003 030c 	and.w	r3, r3, #12
 800a638:	2b04      	cmp	r3, #4
 800a63a:	d007      	beq.n	800a64c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a63c:	6863      	ldr	r3, [r4, #4]
 800a63e:	f003 030c 	and.w	r3, r3, #12
 800a642:	2b08      	cmp	r3, #8
 800a644:	d117      	bne.n	800a676 <HAL_RCC_OscConfig+0x7a>
 800a646:	6863      	ldr	r3, [r4, #4]
 800a648:	03df      	lsls	r7, r3, #15
 800a64a:	d514      	bpl.n	800a676 <HAL_RCC_OscConfig+0x7a>
 800a64c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a650:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a654:	6821      	ldr	r1, [r4, #0]
 800a656:	fa93 f3a3 	rbit	r3, r3
 800a65a:	fab3 f383 	clz	r3, r3
 800a65e:	f003 031f 	and.w	r3, r3, #31
 800a662:	2201      	movs	r2, #1
 800a664:	fa02 f303 	lsl.w	r3, r2, r3
 800a668:	420b      	tst	r3, r1
 800a66a:	d0cf      	beq.n	800a60c <HAL_RCC_OscConfig+0x10>
 800a66c:	686b      	ldr	r3, [r5, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1cc      	bne.n	800a60c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800a672:	2001      	movs	r0, #1
 800a674:	e028      	b.n	800a6c8 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a676:	686a      	ldr	r2, [r5, #4]
 800a678:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a67c:	d127      	bne.n	800a6ce <HAL_RCC_OscConfig+0xd2>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a684:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a686:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a688:	68a9      	ldr	r1, [r5, #8]
 800a68a:	f023 030f 	bic.w	r3, r3, #15
 800a68e:	430b      	orrs	r3, r1
 800a690:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a692:	b362      	cbz	r2, 800a6ee <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 800a694:	f7fe fa7a 	bl	8008b8c <HAL_GetTick>
 800a698:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800a69c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a69e:	f04f 0801 	mov.w	r8, #1
 800a6a2:	fa97 f3a7 	rbit	r3, r7
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	fa97 f3a7 	rbit	r3, r7
 800a6ac:	fab3 f383 	clz	r3, r3
 800a6b0:	f003 031f 	and.w	r3, r3, #31
 800a6b4:	fa08 f303 	lsl.w	r3, r8, r3
 800a6b8:	4213      	tst	r3, r2
 800a6ba:	d1a7      	bne.n	800a60c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a6bc:	f7fe fa66 	bl	8008b8c <HAL_GetTick>
 800a6c0:	1b83      	subs	r3, r0, r6
 800a6c2:	2b64      	cmp	r3, #100	; 0x64
 800a6c4:	d9ed      	bls.n	800a6a2 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 800a6c6:	2003      	movs	r0, #3
}
 800a6c8:	b003      	add	sp, #12
 800a6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	b932      	cbnz	r2, 800a6e0 <HAL_RCC_OscConfig+0xe4>
 800a6d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6d6:	6023      	str	r3, [r4, #0]
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6de:	e7d1      	b.n	800a684 <HAL_RCC_OscConfig+0x88>
 800a6e0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800a6e4:	d1f5      	bne.n	800a6d2 <HAL_RCC_OscConfig+0xd6>
 800a6e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	e7c7      	b.n	800a67e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800a6ee:	f7fe fa4d 	bl	8008b8c <HAL_GetTick>
 800a6f2:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800a6f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6f8:	f04f 0801 	mov.w	r8, #1
 800a6fc:	fa97 f3a7 	rbit	r3, r7
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	fa97 f3a7 	rbit	r3, r7
 800a706:	fab3 f383 	clz	r3, r3
 800a70a:	f003 031f 	and.w	r3, r3, #31
 800a70e:	fa08 f303 	lsl.w	r3, r8, r3
 800a712:	4213      	tst	r3, r2
 800a714:	f43f af7a 	beq.w	800a60c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a718:	f7fe fa38 	bl	8008b8c <HAL_GetTick>
 800a71c:	1b83      	subs	r3, r0, r6
 800a71e:	2b64      	cmp	r3, #100	; 0x64
 800a720:	d9ec      	bls.n	800a6fc <HAL_RCC_OscConfig+0x100>
 800a722:	e7d0      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800a724:	4c60      	ldr	r4, [pc, #384]	; (800a8a8 <HAL_RCC_OscConfig+0x2ac>)
 800a726:	6863      	ldr	r3, [r4, #4]
 800a728:	f013 0f0c 	tst.w	r3, #12
 800a72c:	d007      	beq.n	800a73e <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a72e:	6863      	ldr	r3, [r4, #4]
 800a730:	f003 030c 	and.w	r3, r3, #12
 800a734:	2b08      	cmp	r3, #8
 800a736:	d121      	bne.n	800a77c <HAL_RCC_OscConfig+0x180>
 800a738:	6863      	ldr	r3, [r4, #4]
 800a73a:	03de      	lsls	r6, r3, #15
 800a73c:	d41e      	bmi.n	800a77c <HAL_RCC_OscConfig+0x180>
 800a73e:	2302      	movs	r3, #2
 800a740:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a744:	6821      	ldr	r1, [r4, #0]
 800a746:	fa93 f3a3 	rbit	r3, r3
 800a74a:	fab3 f383 	clz	r3, r3
 800a74e:	f003 031f 	and.w	r3, r3, #31
 800a752:	2201      	movs	r2, #1
 800a754:	fa02 f303 	lsl.w	r3, r2, r3
 800a758:	420b      	tst	r3, r1
 800a75a:	d002      	beq.n	800a762 <HAL_RCC_OscConfig+0x166>
 800a75c:	692b      	ldr	r3, [r5, #16]
 800a75e:	4293      	cmp	r3, r2
 800a760:	d187      	bne.n	800a672 <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a762:	6821      	ldr	r1, [r4, #0]
 800a764:	23f8      	movs	r3, #248	; 0xf8
 800a766:	fa93 f3a3 	rbit	r3, r3
 800a76a:	fab3 f283 	clz	r2, r3
 800a76e:	696b      	ldr	r3, [r5, #20]
 800a770:	4093      	lsls	r3, r2
 800a772:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800a776:	4313      	orrs	r3, r2
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	e74b      	b.n	800a614 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a77c:	692a      	ldr	r2, [r5, #16]
 800a77e:	2601      	movs	r6, #1
 800a780:	b30a      	cbz	r2, 800a7c6 <HAL_RCC_OscConfig+0x1ca>
 800a782:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800a786:	fab3 f383 	clz	r3, r3
 800a78a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a78e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	f04f 0802 	mov.w	r8, #2
 800a798:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800a79a:	f7fe f9f7 	bl	8008b8c <HAL_GetTick>
 800a79e:	4607      	mov	r7, r0
 800a7a0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7a4:	6822      	ldr	r2, [r4, #0]
 800a7a6:	fa98 f3a8 	rbit	r3, r8
 800a7aa:	fab3 f383 	clz	r3, r3
 800a7ae:	f003 031f 	and.w	r3, r3, #31
 800a7b2:	fa06 f303 	lsl.w	r3, r6, r3
 800a7b6:	4213      	tst	r3, r2
 800a7b8:	d1d3      	bne.n	800a762 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a7ba:	f7fe f9e7 	bl	8008b8c <HAL_GetTick>
 800a7be:	1bc3      	subs	r3, r0, r7
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d9ed      	bls.n	800a7a0 <HAL_RCC_OscConfig+0x1a4>
 800a7c4:	e77f      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
 800a7c6:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800a7ca:	fab3 f383 	clz	r3, r3
 800a7ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a7d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	f04f 0802 	mov.w	r8, #2
 800a7dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a7de:	f7fe f9d5 	bl	8008b8c <HAL_GetTick>
 800a7e2:	4607      	mov	r7, r0
 800a7e4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7e8:	6822      	ldr	r2, [r4, #0]
 800a7ea:	fa98 f3a8 	rbit	r3, r8
 800a7ee:	fab3 f383 	clz	r3, r3
 800a7f2:	f003 031f 	and.w	r3, r3, #31
 800a7f6:	fa06 f303 	lsl.w	r3, r6, r3
 800a7fa:	4213      	tst	r3, r2
 800a7fc:	f43f af0a 	beq.w	800a614 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a800:	f7fe f9c4 	bl	8008b8c <HAL_GetTick>
 800a804:	1bc3      	subs	r3, r0, r7
 800a806:	2b02      	cmp	r3, #2
 800a808:	d9ec      	bls.n	800a7e4 <HAL_RCC_OscConfig+0x1e8>
 800a80a:	e75c      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a80c:	69aa      	ldr	r2, [r5, #24]
 800a80e:	4e26      	ldr	r6, [pc, #152]	; (800a8a8 <HAL_RCC_OscConfig+0x2ac>)
 800a810:	4926      	ldr	r1, [pc, #152]	; (800a8ac <HAL_RCC_OscConfig+0x2b0>)
 800a812:	2401      	movs	r4, #1
 800a814:	b31a      	cbz	r2, 800a85e <HAL_RCC_OscConfig+0x262>
 800a816:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800a81a:	fab3 f383 	clz	r3, r3
 800a81e:	440b      	add	r3, r1
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	2702      	movs	r7, #2
 800a824:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800a826:	f7fe f9b1 	bl	8008b8c <HAL_GetTick>
 800a82a:	4680      	mov	r8, r0
 800a82c:	fa97 f3a7 	rbit	r3, r7
 800a830:	fa97 f3a7 	rbit	r3, r7
 800a834:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a838:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a83a:	fa97 f3a7 	rbit	r3, r7
 800a83e:	fab3 f383 	clz	r3, r3
 800a842:	f003 031f 	and.w	r3, r3, #31
 800a846:	fa04 f303 	lsl.w	r3, r4, r3
 800a84a:	4213      	tst	r3, r2
 800a84c:	f47f aee6 	bne.w	800a61c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a850:	f7fe f99c 	bl	8008b8c <HAL_GetTick>
 800a854:	eba0 0308 	sub.w	r3, r0, r8
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d9e7      	bls.n	800a82c <HAL_RCC_OscConfig+0x230>
 800a85c:	e733      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
 800a85e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800a862:	fab3 f383 	clz	r3, r3
 800a866:	440b      	add	r3, r1
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	2702      	movs	r7, #2
 800a86c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800a86e:	f7fe f98d 	bl	8008b8c <HAL_GetTick>
 800a872:	4680      	mov	r8, r0
 800a874:	fa97 f3a7 	rbit	r3, r7
 800a878:	fa97 f3a7 	rbit	r3, r7
 800a87c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a880:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a882:	fa97 f3a7 	rbit	r3, r7
 800a886:	fab3 f383 	clz	r3, r3
 800a88a:	f003 031f 	and.w	r3, r3, #31
 800a88e:	fa04 f303 	lsl.w	r3, r4, r3
 800a892:	4213      	tst	r3, r2
 800a894:	f43f aec2 	beq.w	800a61c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a898:	f7fe f978 	bl	8008b8c <HAL_GetTick>
 800a89c:	eba0 0308 	sub.w	r3, r0, r8
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d9e7      	bls.n	800a874 <HAL_RCC_OscConfig+0x278>
 800a8a4:	e70f      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
 800a8a6:	bf00      	nop
 800a8a8:	40021000 	.word	0x40021000
 800a8ac:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8b0:	4c91      	ldr	r4, [pc, #580]	; (800aaf8 <HAL_RCC_OscConfig+0x4fc>)
 800a8b2:	69e3      	ldr	r3, [r4, #28]
 800a8b4:	00d9      	lsls	r1, r3, #3
 800a8b6:	d433      	bmi.n	800a920 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8b8:	69e3      	ldr	r3, [r4, #28]
 800a8ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8be:	61e3      	str	r3, [r4, #28]
 800a8c0:	69e3      	ldr	r3, [r4, #28]
 800a8c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8c6:	9301      	str	r3, [sp, #4]
 800a8c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a8ca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8cc:	4f8b      	ldr	r7, [pc, #556]	; (800aafc <HAL_RCC_OscConfig+0x500>)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	05da      	lsls	r2, r3, #23
 800a8d2:	d527      	bpl.n	800a924 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8d4:	68eb      	ldr	r3, [r5, #12]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d135      	bne.n	800a946 <HAL_RCC_OscConfig+0x34a>
 800a8da:	6a23      	ldr	r3, [r4, #32]
 800a8dc:	f043 0301 	orr.w	r3, r3, #1
 800a8e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800a8e2:	f7fe f953 	bl	8008b8c <HAL_GetTick>
 800a8e6:	2702      	movs	r7, #2
 800a8e8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8ea:	f04f 0901 	mov.w	r9, #1
 800a8ee:	fa97 f3a7 	rbit	r3, r7
 800a8f2:	fa97 f3a7 	rbit	r3, r7
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d064      	beq.n	800a9c4 <HAL_RCC_OscConfig+0x3c8>
 800a8fa:	6a22      	ldr	r2, [r4, #32]
 800a8fc:	fa97 f3a7 	rbit	r3, r7
 800a900:	fab3 f383 	clz	r3, r3
 800a904:	f003 031f 	and.w	r3, r3, #31
 800a908:	fa09 f303 	lsl.w	r3, r9, r3
 800a90c:	4213      	tst	r3, r2
 800a90e:	d050      	beq.n	800a9b2 <HAL_RCC_OscConfig+0x3b6>
    if(pwrclkchanged == SET)
 800a910:	2e00      	cmp	r6, #0
 800a912:	f43f ae87 	beq.w	800a624 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a916:	69e3      	ldr	r3, [r4, #28]
 800a918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a91c:	61e3      	str	r3, [r4, #28]
 800a91e:	e681      	b.n	800a624 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800a920:	2600      	movs	r6, #0
 800a922:	e7d3      	b.n	800a8cc <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a92a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800a92c:	f7fe f92e 	bl	8008b8c <HAL_GetTick>
 800a930:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	05db      	lsls	r3, r3, #23
 800a936:	d4cd      	bmi.n	800a8d4 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a938:	f7fe f928 	bl	8008b8c <HAL_GetTick>
 800a93c:	eba0 0008 	sub.w	r0, r0, r8
 800a940:	2864      	cmp	r0, #100	; 0x64
 800a942:	d9f6      	bls.n	800a932 <HAL_RCC_OscConfig+0x336>
 800a944:	e6bf      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a946:	bb33      	cbnz	r3, 800a996 <HAL_RCC_OscConfig+0x39a>
 800a948:	6a23      	ldr	r3, [r4, #32]
 800a94a:	f023 0301 	bic.w	r3, r3, #1
 800a94e:	6223      	str	r3, [r4, #32]
 800a950:	6a23      	ldr	r3, [r4, #32]
 800a952:	f023 0304 	bic.w	r3, r3, #4
 800a956:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800a958:	f7fe f918 	bl	8008b8c <HAL_GetTick>
 800a95c:	2702      	movs	r7, #2
 800a95e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a960:	f04f 0901 	mov.w	r9, #1
 800a964:	fa97 f3a7 	rbit	r3, r7
 800a968:	fa97 f3a7 	rbit	r3, r7
 800a96c:	b373      	cbz	r3, 800a9cc <HAL_RCC_OscConfig+0x3d0>
 800a96e:	6a22      	ldr	r2, [r4, #32]
 800a970:	fa97 f3a7 	rbit	r3, r7
 800a974:	fab3 f383 	clz	r3, r3
 800a978:	f003 031f 	and.w	r3, r3, #31
 800a97c:	fa09 f303 	lsl.w	r3, r9, r3
 800a980:	4213      	tst	r3, r2
 800a982:	d0c5      	beq.n	800a910 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a984:	f7fe f902 	bl	8008b8c <HAL_GetTick>
 800a988:	f242 7310 	movw	r3, #10000	; 0x2710
 800a98c:	eba0 0008 	sub.w	r0, r0, r8
 800a990:	4298      	cmp	r0, r3
 800a992:	d9e7      	bls.n	800a964 <HAL_RCC_OscConfig+0x368>
 800a994:	e697      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a996:	2b05      	cmp	r3, #5
 800a998:	6a23      	ldr	r3, [r4, #32]
 800a99a:	d103      	bne.n	800a9a4 <HAL_RCC_OscConfig+0x3a8>
 800a99c:	f043 0304 	orr.w	r3, r3, #4
 800a9a0:	6223      	str	r3, [r4, #32]
 800a9a2:	e79a      	b.n	800a8da <HAL_RCC_OscConfig+0x2de>
 800a9a4:	f023 0301 	bic.w	r3, r3, #1
 800a9a8:	6223      	str	r3, [r4, #32]
 800a9aa:	6a23      	ldr	r3, [r4, #32]
 800a9ac:	f023 0304 	bic.w	r3, r3, #4
 800a9b0:	e796      	b.n	800a8e0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9b2:	f7fe f8eb 	bl	8008b8c <HAL_GetTick>
 800a9b6:	f242 7310 	movw	r3, #10000	; 0x2710
 800a9ba:	eba0 0008 	sub.w	r0, r0, r8
 800a9be:	4298      	cmp	r0, r3
 800a9c0:	d995      	bls.n	800a8ee <HAL_RCC_OscConfig+0x2f2>
 800a9c2:	e680      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
 800a9c4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a9ca:	e797      	b.n	800a8fc <HAL_RCC_OscConfig+0x300>
 800a9cc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a9d2:	e7cd      	b.n	800a970 <HAL_RCC_OscConfig+0x374>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a9d4:	4c48      	ldr	r4, [pc, #288]	; (800aaf8 <HAL_RCC_OscConfig+0x4fc>)
 800a9d6:	6863      	ldr	r3, [r4, #4]
 800a9d8:	f003 030c 	and.w	r3, r3, #12
 800a9dc:	2b08      	cmp	r3, #8
 800a9de:	d07a      	beq.n	800aad6 <HAL_RCC_OscConfig+0x4da>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9e0:	2802      	cmp	r0, #2
 800a9e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9e6:	d151      	bne.n	800aa8c <HAL_RCC_OscConfig+0x490>
 800a9e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800a9ec:	fab3 f383 	clz	r3, r3
 800a9f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a9f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a9fe:	f7fe f8c5 	bl	8008b8c <HAL_GetTick>
 800aa02:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800aa06:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa08:	2601      	movs	r6, #1
 800aa0a:	fa98 f3a8 	rbit	r3, r8
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	fa98 f3a8 	rbit	r3, r8
 800aa14:	fab3 f383 	clz	r3, r3
 800aa18:	f003 031f 	and.w	r3, r3, #31
 800aa1c:	fa06 f303 	lsl.w	r3, r6, r3
 800aa20:	4213      	tst	r3, r2
 800aa22:	d12d      	bne.n	800aa80 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa24:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 800aa28:	6862      	ldr	r2, [r4, #4]
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800aa30:	4313      	orrs	r3, r2
 800aa32:	6063      	str	r3, [r4, #4]
 800aa34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa38:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800aa3c:	fab3 f383 	clz	r3, r3
 800aa40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800aa44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800aa48:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa4a:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 800aa4c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800aa4e:	f7fe f89d 	bl	8008b8c <HAL_GetTick>
 800aa52:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800aa56:	4605      	mov	r5, r0
 800aa58:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa5c:	6822      	ldr	r2, [r4, #0]
 800aa5e:	fa96 f3a6 	rbit	r3, r6
 800aa62:	fab3 f383 	clz	r3, r3
 800aa66:	f003 031f 	and.w	r3, r3, #31
 800aa6a:	fa07 f303 	lsl.w	r3, r7, r3
 800aa6e:	4213      	tst	r3, r2
 800aa70:	f47f addc 	bne.w	800a62c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa74:	f7fe f88a 	bl	8008b8c <HAL_GetTick>
 800aa78:	1b40      	subs	r0, r0, r5
 800aa7a:	2802      	cmp	r0, #2
 800aa7c:	d9ec      	bls.n	800aa58 <HAL_RCC_OscConfig+0x45c>
 800aa7e:	e622      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa80:	f7fe f884 	bl	8008b8c <HAL_GetTick>
 800aa84:	1bc3      	subs	r3, r0, r7
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d9bf      	bls.n	800aa0a <HAL_RCC_OscConfig+0x40e>
 800aa8a:	e61c      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
 800aa8c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800aa90:	fab3 f383 	clz	r3, r3
 800aa94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800aa98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800aaa2:	f7fe f873 	bl	8008b8c <HAL_GetTick>
 800aaa6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800aaaa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aaac:	2701      	movs	r7, #1
 800aaae:	fa96 f3a6 	rbit	r3, r6
 800aab2:	6822      	ldr	r2, [r4, #0]
 800aab4:	fa96 f3a6 	rbit	r3, r6
 800aab8:	fab3 f383 	clz	r3, r3
 800aabc:	f003 031f 	and.w	r3, r3, #31
 800aac0:	fa07 f303 	lsl.w	r3, r7, r3
 800aac4:	4213      	tst	r3, r2
 800aac6:	f43f adb1 	beq.w	800a62c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aaca:	f7fe f85f 	bl	8008b8c <HAL_GetTick>
 800aace:	1b40      	subs	r0, r0, r5
 800aad0:	2802      	cmp	r0, #2
 800aad2:	d9ec      	bls.n	800aaae <HAL_RCC_OscConfig+0x4b2>
 800aad4:	e5f7      	b.n	800a6c6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aad6:	2801      	cmp	r0, #1
 800aad8:	f43f adf6 	beq.w	800a6c8 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 800aadc:	6863      	ldr	r3, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800aade:	6a2a      	ldr	r2, [r5, #32]
 800aae0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800aae4:	4291      	cmp	r1, r2
 800aae6:	f47f adc4 	bne.w	800a672 <HAL_RCC_OscConfig+0x76>
 800aaea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800aaec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	f43f ad9b 	beq.w	800a62c <HAL_RCC_OscConfig+0x30>
 800aaf6:	e5bc      	b.n	800a672 <HAL_RCC_OscConfig+0x76>
 800aaf8:	40021000 	.word	0x40021000
 800aafc:	40007000 	.word	0x40007000

0800ab00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab00:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800ab02:	4c13      	ldr	r4, [pc, #76]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x50>)
 800ab04:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ab06:	f001 030c 	and.w	r3, r1, #12
 800ab0a:	2b08      	cmp	r3, #8
 800ab0c:	d11e      	bne.n	800ab4c <HAL_RCC_GetSysClockFreq+0x4c>
 800ab0e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800ab12:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800ab16:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800ab1a:	fab3 f383 	clz	r3, r3
 800ab1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab22:	4a0c      	ldr	r2, [pc, #48]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x54>)
 800ab24:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800ab26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab28:	220f      	movs	r2, #15
 800ab2a:	fa92 f2a2 	rbit	r2, r2
 800ab2e:	fab2 f282 	clz	r2, r2
 800ab32:	f003 030f 	and.w	r3, r3, #15
 800ab36:	40d3      	lsrs	r3, r2
 800ab38:	4a07      	ldr	r2, [pc, #28]	; (800ab58 <HAL_RCC_GetSysClockFreq+0x58>)
 800ab3a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800ab3c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800ab3e:	bf4a      	itet	mi
 800ab40:	4b06      	ldrmi	r3, [pc, #24]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800ab42:	4b07      	ldrpl	r3, [pc, #28]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800ab44:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800ab48:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ab4a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800ab4c:	4803      	ldr	r0, [pc, #12]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800ab4e:	e7fc      	b.n	800ab4a <HAL_RCC_GetSysClockFreq+0x4a>
 800ab50:	40021000 	.word	0x40021000
 800ab54:	08014d24 	.word	0x08014d24
 800ab58:	08014d34 	.word	0x08014d34
 800ab5c:	007a1200 	.word	0x007a1200
 800ab60:	003d0900 	.word	0x003d0900

0800ab64 <HAL_RCC_ClockConfig>:
{
 800ab64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab68:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	b910      	cbnz	r0, 800ab74 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800ab6e:	2001      	movs	r0, #1
}
 800ab70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ab74:	4a4c      	ldr	r2, [pc, #304]	; (800aca8 <HAL_RCC_ClockConfig+0x144>)
 800ab76:	6813      	ldr	r3, [r2, #0]
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	428b      	cmp	r3, r1
 800ab7e:	d32e      	bcc.n	800abde <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab80:	6822      	ldr	r2, [r4, #0]
 800ab82:	0791      	lsls	r1, r2, #30
 800ab84:	d436      	bmi.n	800abf4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab86:	07d2      	lsls	r2, r2, #31
 800ab88:	d43c      	bmi.n	800ac04 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ab8a:	4a47      	ldr	r2, [pc, #284]	; (800aca8 <HAL_RCC_ClockConfig+0x144>)
 800ab8c:	6813      	ldr	r3, [r2, #0]
 800ab8e:	f003 0307 	and.w	r3, r3, #7
 800ab92:	42ab      	cmp	r3, r5
 800ab94:	d874      	bhi.n	800ac80 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab96:	6822      	ldr	r2, [r4, #0]
 800ab98:	4d44      	ldr	r5, [pc, #272]	; (800acac <HAL_RCC_ClockConfig+0x148>)
 800ab9a:	f012 0f04 	tst.w	r2, #4
 800ab9e:	d17b      	bne.n	800ac98 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aba0:	0713      	lsls	r3, r2, #28
 800aba2:	d506      	bpl.n	800abb2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aba4:	686b      	ldr	r3, [r5, #4]
 800aba6:	6922      	ldr	r2, [r4, #16]
 800aba8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800abac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800abb0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800abb2:	f7ff ffa5 	bl	800ab00 <HAL_RCC_GetSysClockFreq>
 800abb6:	686b      	ldr	r3, [r5, #4]
 800abb8:	22f0      	movs	r2, #240	; 0xf0
 800abba:	fa92 f2a2 	rbit	r2, r2
 800abbe:	fab2 f282 	clz	r2, r2
 800abc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abc6:	40d3      	lsrs	r3, r2
 800abc8:	4a39      	ldr	r2, [pc, #228]	; (800acb0 <HAL_RCC_ClockConfig+0x14c>)
 800abca:	5cd3      	ldrb	r3, [r2, r3]
 800abcc:	40d8      	lsrs	r0, r3
 800abce:	4b39      	ldr	r3, [pc, #228]	; (800acb4 <HAL_RCC_ClockConfig+0x150>)
 800abd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800abd2:	4b39      	ldr	r3, [pc, #228]	; (800acb8 <HAL_RCC_ClockConfig+0x154>)
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	f7fd ff97 	bl	8008b08 <HAL_InitTick>
  return HAL_OK;
 800abda:	2000      	movs	r0, #0
 800abdc:	e7c8      	b.n	800ab70 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abde:	6813      	ldr	r3, [r2, #0]
 800abe0:	f023 0307 	bic.w	r3, r3, #7
 800abe4:	430b      	orrs	r3, r1
 800abe6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800abe8:	6813      	ldr	r3, [r2, #0]
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	428b      	cmp	r3, r1
 800abf0:	d1bd      	bne.n	800ab6e <HAL_RCC_ClockConfig+0xa>
 800abf2:	e7c5      	b.n	800ab80 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abf4:	492d      	ldr	r1, [pc, #180]	; (800acac <HAL_RCC_ClockConfig+0x148>)
 800abf6:	68a0      	ldr	r0, [r4, #8]
 800abf8:	684b      	ldr	r3, [r1, #4]
 800abfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abfe:	4303      	orrs	r3, r0
 800ac00:	604b      	str	r3, [r1, #4]
 800ac02:	e7c0      	b.n	800ab86 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac04:	6862      	ldr	r2, [r4, #4]
 800ac06:	4e29      	ldr	r6, [pc, #164]	; (800acac <HAL_RCC_ClockConfig+0x148>)
 800ac08:	2a01      	cmp	r2, #1
 800ac0a:	d126      	bne.n	800ac5a <HAL_RCC_ClockConfig+0xf6>
 800ac0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ac10:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac14:	6831      	ldr	r1, [r6, #0]
 800ac16:	fa93 f3a3 	rbit	r3, r3
 800ac1a:	fab3 f383 	clz	r3, r3
 800ac1e:	f003 031f 	and.w	r3, r3, #31
 800ac22:	fa02 f303 	lsl.w	r3, r2, r3
 800ac26:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac28:	d0a1      	beq.n	800ab6e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac2a:	6873      	ldr	r3, [r6, #4]
 800ac2c:	f023 0303 	bic.w	r3, r3, #3
 800ac30:	431a      	orrs	r2, r3
 800ac32:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800ac34:	f7fd ffaa 	bl	8008b8c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac38:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800ac3c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac3e:	6873      	ldr	r3, [r6, #4]
 800ac40:	6862      	ldr	r2, [r4, #4]
 800ac42:	f003 030c 	and.w	r3, r3, #12
 800ac46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800ac4a:	d09e      	beq.n	800ab8a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac4c:	f7fd ff9e 	bl	8008b8c <HAL_GetTick>
 800ac50:	1bc0      	subs	r0, r0, r7
 800ac52:	4540      	cmp	r0, r8
 800ac54:	d9f3      	bls.n	800ac3e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800ac56:	2003      	movs	r0, #3
 800ac58:	e78a      	b.n	800ab70 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac5a:	2a02      	cmp	r2, #2
 800ac5c:	bf0c      	ite	eq
 800ac5e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800ac62:	2302      	movne	r3, #2
 800ac64:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac68:	6830      	ldr	r0, [r6, #0]
 800ac6a:	fa93 f3a3 	rbit	r3, r3
 800ac6e:	fab3 f383 	clz	r3, r3
 800ac72:	f003 031f 	and.w	r3, r3, #31
 800ac76:	2101      	movs	r1, #1
 800ac78:	fa01 f303 	lsl.w	r3, r1, r3
 800ac7c:	4203      	tst	r3, r0
 800ac7e:	e7d3      	b.n	800ac28 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac80:	6813      	ldr	r3, [r2, #0]
 800ac82:	f023 0307 	bic.w	r3, r3, #7
 800ac86:	432b      	orrs	r3, r5
 800ac88:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac8a:	6813      	ldr	r3, [r2, #0]
 800ac8c:	f003 0307 	and.w	r3, r3, #7
 800ac90:	42ab      	cmp	r3, r5
 800ac92:	f47f af6c 	bne.w	800ab6e <HAL_RCC_ClockConfig+0xa>
 800ac96:	e77e      	b.n	800ab96 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac98:	686b      	ldr	r3, [r5, #4]
 800ac9a:	68e1      	ldr	r1, [r4, #12]
 800ac9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800aca0:	430b      	orrs	r3, r1
 800aca2:	606b      	str	r3, [r5, #4]
 800aca4:	e77c      	b.n	800aba0 <HAL_RCC_ClockConfig+0x3c>
 800aca6:	bf00      	nop
 800aca8:	40022000 	.word	0x40022000
 800acac:	40021000 	.word	0x40021000
 800acb0:	08014d14 	.word	0x08014d14
 800acb4:	20000008 	.word	0x20000008
 800acb8:	20000010 	.word	0x20000010

0800acbc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800acbc:	6803      	ldr	r3, [r0, #0]
{
 800acbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acc2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800acc4:	03d8      	lsls	r0, r3, #15
 800acc6:	d520      	bpl.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x4e>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acc8:	4d68      	ldr	r5, [pc, #416]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800acca:	69eb      	ldr	r3, [r5, #28]
 800accc:	00d9      	lsls	r1, r3, #3
 800acce:	d473      	bmi.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acd0:	69eb      	ldr	r3, [r5, #28]
 800acd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acd6:	61eb      	str	r3, [r5, #28]
 800acd8:	69eb      	ldr	r3, [r5, #28]
 800acda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acde:	9301      	str	r3, [sp, #4]
 800ace0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ace2:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ace4:	4f62      	ldr	r7, [pc, #392]	; (800ae70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	05da      	lsls	r2, r3, #23
 800acea:	d567      	bpl.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x100>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800acec:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800acee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800acf2:	d177      	bne.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800acf4:	6a2b      	ldr	r3, [r5, #32]
 800acf6:	6862      	ldr	r2, [r4, #4]
 800acf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acfc:	4313      	orrs	r3, r2
 800acfe:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ad00:	b11e      	cbz	r6, 800ad0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad02:	69eb      	ldr	r3, [r5, #28]
 800ad04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad08:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	07d9      	lsls	r1, r3, #31
 800ad0e:	d506      	bpl.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad10:	4956      	ldr	r1, [pc, #344]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ad12:	68a0      	ldr	r0, [r4, #8]
 800ad14:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ad16:	f022 0203 	bic.w	r2, r2, #3
 800ad1a:	4302      	orrs	r2, r0
 800ad1c:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ad1e:	079a      	lsls	r2, r3, #30
 800ad20:	d506      	bpl.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ad22:	4952      	ldr	r1, [pc, #328]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ad24:	68e0      	ldr	r0, [r4, #12]
 800ad26:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ad28:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ad2c:	4302      	orrs	r2, r0
 800ad2e:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ad30:	075f      	lsls	r7, r3, #29
 800ad32:	d506      	bpl.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ad34:	494d      	ldr	r1, [pc, #308]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ad36:	6920      	ldr	r0, [r4, #16]
 800ad38:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ad3a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800ad3e:	4302      	orrs	r2, r0
 800ad40:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ad42:	069e      	lsls	r6, r3, #26
 800ad44:	d506      	bpl.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad46:	4949      	ldr	r1, [pc, #292]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ad48:	6960      	ldr	r0, [r4, #20]
 800ad4a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ad4c:	f022 0210 	bic.w	r2, r2, #16
 800ad50:	4302      	orrs	r2, r0
 800ad52:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad54:	039d      	lsls	r5, r3, #14
 800ad56:	d506      	bpl.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800ad58:	4944      	ldr	r1, [pc, #272]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ad5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ad5c:	684a      	ldr	r2, [r1, #4]
 800ad5e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800ad62:	4302      	orrs	r2, r0
 800ad64:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad66:	0658      	lsls	r0, r3, #25
 800ad68:	d506      	bpl.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad6a:	4940      	ldr	r1, [pc, #256]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ad6c:	69a0      	ldr	r0, [r4, #24]
 800ad6e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800ad70:	f022 0220 	bic.w	r2, r2, #32
 800ad74:	4302      	orrs	r2, r0
 800ad76:	630a      	str	r2, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800ad78:	0619      	lsls	r1, r3, #24
 800ad7a:	d506      	bpl.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800ad7c:	493b      	ldr	r1, [pc, #236]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ad7e:	69e0      	ldr	r0, [r4, #28]
 800ad80:	684a      	ldr	r2, [r1, #4]
 800ad82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ad86:	4302      	orrs	r2, r0
 800ad88:	604a      	str	r2, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800ad8a:	051a      	lsls	r2, r3, #20
 800ad8c:	d506      	bpl.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800ad8e:	4937      	ldr	r1, [pc, #220]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ad90:	6a20      	ldr	r0, [r4, #32]
 800ad92:	684a      	ldr	r2, [r1, #4]
 800ad94:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800ad98:	4302      	orrs	r2, r0
 800ad9a:	604a      	str	r2, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad9c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ada0:	bf1f      	itttt	ne
 800ada2:	4a32      	ldrne	r2, [pc, #200]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ada4:	6a61      	ldrne	r1, [r4, #36]	; 0x24
 800ada6:	6b13      	ldrne	r3, [r2, #48]	; 0x30
 800ada8:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 800adac:	bf1d      	ittte	ne
 800adae:	430b      	orrne	r3, r1
 800adb0:	6313      	strne	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800adb2:	2000      	movne	r0, #0
 800adb4:	4618      	moveq	r0, r3
 800adb6:	e012      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x122>
  FlagStatus       pwrclkchanged = RESET;
 800adb8:	2600      	movs	r6, #0
 800adba:	e793      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adc2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800adc4:	f7fd fee2 	bl	8008b8c <HAL_GetTick>
 800adc8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	05db      	lsls	r3, r3, #23
 800adce:	d48d      	bmi.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800add0:	f7fd fedc 	bl	8008b8c <HAL_GetTick>
 800add4:	eba0 0008 	sub.w	r0, r0, r8
 800add8:	2864      	cmp	r0, #100	; 0x64
 800adda:	d9f6      	bls.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x10e>
          return HAL_TIMEOUT;
 800addc:	2003      	movs	r0, #3
}
 800adde:	b003      	add	sp, #12
 800ade0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ade4:	6862      	ldr	r2, [r4, #4]
 800ade6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800adea:	429a      	cmp	r2, r3
 800adec:	d082      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800adee:	6a29      	ldr	r1, [r5, #32]
 800adf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800adf4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800adf8:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800adfc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ae74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800ae00:	fab2 f282 	clz	r2, r2
 800ae04:	4462      	add	r2, ip
 800ae06:	0092      	lsls	r2, r2, #2
 800ae08:	2701      	movs	r7, #1
 800ae0a:	6017      	str	r7, [r2, #0]
 800ae0c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ae10:	fab3 f383 	clz	r3, r3
 800ae14:	4463      	add	r3, ip
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800ae1c:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800ae1e:	07c8      	lsls	r0, r1, #31
 800ae20:	f57f af68 	bpl.w	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800ae24:	f7fd feb2 	bl	8008b8c <HAL_GetTick>
 800ae28:	f04f 0802 	mov.w	r8, #2
 800ae2c:	4681      	mov	r9, r0
 800ae2e:	fa98 f3a8 	rbit	r3, r8
 800ae32:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae36:	b1a3      	cbz	r3, 800ae62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800ae38:	6a2a      	ldr	r2, [r5, #32]
 800ae3a:	fa98 f3a8 	rbit	r3, r8
 800ae3e:	fab3 f383 	clz	r3, r3
 800ae42:	f003 031f 	and.w	r3, r3, #31
 800ae46:	fa07 f303 	lsl.w	r3, r7, r3
 800ae4a:	4213      	tst	r3, r2
 800ae4c:	f47f af52 	bne.w	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae50:	f7fd fe9c 	bl	8008b8c <HAL_GetTick>
 800ae54:	f242 7310 	movw	r3, #10000	; 0x2710
 800ae58:	eba0 0009 	sub.w	r0, r0, r9
 800ae5c:	4298      	cmp	r0, r3
 800ae5e:	d9e6      	bls.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800ae60:	e7bc      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x120>
 800ae62:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae66:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ae68:	e7e7      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800ae6a:	bf00      	nop
 800ae6c:	40021000 	.word	0x40021000
 800ae70:	40007000 	.word	0x40007000
 800ae74:	10908100 	.word	0x10908100

0800ae78 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800ae78:	6803      	ldr	r3, [r0, #0]
 800ae7a:	689a      	ldr	r2, [r3, #8]
 800ae7c:	04d2      	lsls	r2, r2, #19
{
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800ae82:	d50a      	bpl.n	800ae9a <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	05d9      	lsls	r1, r3, #23
 800ae88:	d507      	bpl.n	800ae9a <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ae8a:	f7f7 f81b 	bl	8001ec4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ae8e:	6822      	ldr	r2, [r4, #0]
 800ae90:	68d3      	ldr	r3, [r2, #12]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f463 73c0 	orn	r3, r3, #384	; 0x180
 800ae98:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	689a      	ldr	r2, [r3, #8]
 800ae9e:	0492      	lsls	r2, r2, #18
 800aea0:	d50b      	bpl.n	800aeba <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	059b      	lsls	r3, r3, #22
 800aea6:	d508      	bpl.n	800aeba <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f7f6 ffe7 	bl	8001e7c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800aeae:	6822      	ldr	r2, [r4, #0]
 800aeb0:	68d3      	ldr	r3, [r2, #12]
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	f463 7320 	orn	r3, r3, #640	; 0x280
 800aeb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800aeba:	4b03      	ldr	r3, [pc, #12]	; (800aec8 <HAL_RTC_AlarmIRQHandler+0x50>)
 800aebc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aec0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800aec2:	2301      	movs	r3, #1
 800aec4:	7763      	strb	r3, [r4, #29]
}
 800aec6:	bd10      	pop	{r4, pc}
 800aec8:	40010400 	.word	0x40010400

0800aecc <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800aecc:	6802      	ldr	r2, [r0, #0]
{
 800aece:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800aed0:	68d3      	ldr	r3, [r2, #12]
 800aed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aed6:	60d3      	str	r3, [r2, #12]
{
 800aed8:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800aeda:	f7fd fe57 	bl	8008b8c <HAL_GetTick>
 800aede:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	069b      	lsls	r3, r3, #26
 800aee6:	d501      	bpl.n	800aeec <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800aee8:	2000      	movs	r0, #0
}
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aeec:	f7fd fe4e 	bl	8008b8c <HAL_GetTick>
 800aef0:	1b40      	subs	r0, r0, r5
 800aef2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800aef6:	d9f3      	bls.n	800aee0 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800aef8:	2003      	movs	r0, #3
 800aefa:	e7f6      	b.n	800aeea <HAL_RTC_WaitForSynchro+0x1e>

0800aefc <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aefc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aefe:	6803      	ldr	r3, [r0, #0]
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	0652      	lsls	r2, r2, #25
{
 800af04:	4604      	mov	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800af06:	d501      	bpl.n	800af0c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800af08:	2000      	movs	r0, #0
}
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800af0c:	f04f 32ff 	mov.w	r2, #4294967295
 800af10:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800af12:	f7fd fe3b 	bl	8008b8c <HAL_GetTick>
 800af16:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	065b      	lsls	r3, r3, #25
 800af1e:	d4f3      	bmi.n	800af08 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af20:	f7fd fe34 	bl	8008b8c <HAL_GetTick>
 800af24:	1b40      	subs	r0, r0, r5
 800af26:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800af2a:	d9f5      	bls.n	800af18 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800af2c:	2003      	movs	r0, #3
 800af2e:	e7ec      	b.n	800af0a <RTC_EnterInitMode+0xe>

0800af30 <HAL_RTC_Init>:
{
 800af30:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800af32:	4604      	mov	r4, r0
 800af34:	b1b8      	cbz	r0, 800af66 <HAL_RTC_Init+0x36>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800af36:	7f43      	ldrb	r3, [r0, #29]
 800af38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800af3c:	b913      	cbnz	r3, 800af44 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800af3e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800af40:	f7fd f9f4 	bl	800832c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800af44:	2302      	movs	r3, #2
 800af46:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	22ca      	movs	r2, #202	; 0xca
 800af4c:	625a      	str	r2, [r3, #36]	; 0x24
 800af4e:	2253      	movs	r2, #83	; 0x53
 800af50:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800af52:	4620      	mov	r0, r4
 800af54:	f7ff ffd2 	bl	800aefc <RTC_EnterInitMode>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	4605      	mov	r5, r0
 800af5c:	b128      	cbz	r0, 800af6a <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af5e:	22ff      	movs	r2, #255	; 0xff
 800af60:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800af62:	2304      	movs	r3, #4
 800af64:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800af66:	2501      	movs	r5, #1
 800af68:	e02e      	b.n	800afc8 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800af6a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800af6c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800af6e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800af72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af76:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800af78:	6862      	ldr	r2, [r4, #4]
 800af7a:	6899      	ldr	r1, [r3, #8]
 800af7c:	4302      	orrs	r2, r0
 800af7e:	6960      	ldr	r0, [r4, #20]
 800af80:	4302      	orrs	r2, r0
 800af82:	430a      	orrs	r2, r1
 800af84:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800af86:	68e2      	ldr	r2, [r4, #12]
 800af88:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	68a1      	ldr	r1, [r4, #8]
 800af8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800af92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af9a:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	069b      	lsls	r3, r3, #26
 800afa0:	d405      	bmi.n	800afae <HAL_RTC_Init+0x7e>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800afa2:	4620      	mov	r0, r4
 800afa4:	f7ff ff92 	bl	800aecc <HAL_RTC_WaitForSynchro>
 800afa8:	b108      	cbz	r0, 800afae <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	e7d7      	b.n	800af5e <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800afae:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800afb0:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800afb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800afb8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800afba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afbc:	430a      	orrs	r2, r1
 800afbe:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afc0:	22ff      	movs	r2, #255	; 0xff
 800afc2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800afc4:	2301      	movs	r3, #1
 800afc6:	7763      	strb	r3, [r4, #29]
}
 800afc8:	4628      	mov	r0, r5
 800afca:	bd38      	pop	{r3, r4, r5, pc}

0800afcc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800afcc:	2300      	movs	r3, #0

  while (Value >= 10U)
 800afce:	2809      	cmp	r0, #9
 800afd0:	d803      	bhi.n	800afda <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800afd2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800afd6:	b2c0      	uxtb	r0, r0
 800afd8:	4770      	bx	lr
    Value -= 10U;
 800afda:	380a      	subs	r0, #10
    bcdhigh++;
 800afdc:	3301      	adds	r3, #1
    Value -= 10U;
 800afde:	b2c0      	uxtb	r0, r0
 800afe0:	e7f5      	b.n	800afce <RTC_ByteToBcd2+0x2>

0800afe2 <HAL_RTC_SetTime>:
{
 800afe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800afe6:	7f03      	ldrb	r3, [r0, #28]
 800afe8:	2b01      	cmp	r3, #1
{
 800afea:	4605      	mov	r5, r0
 800afec:	460e      	mov	r6, r1
 800afee:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 800aff2:	d02e      	beq.n	800b052 <HAL_RTC_SetTime+0x70>
 800aff4:	2301      	movs	r3, #1
 800aff6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800aff8:	7747      	strb	r7, [r0, #29]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800affa:	6801      	ldr	r1, [r0, #0]
 800affc:	7874      	ldrb	r4, [r6, #1]
 800affe:	7830      	ldrb	r0, [r6, #0]
 800b000:	78b7      	ldrb	r7, [r6, #2]
  if (Format == RTC_FORMAT_BIN)
 800b002:	bb4a      	cbnz	r2, 800b058 <HAL_RTC_SetTime+0x76>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b004:	688a      	ldr	r2, [r1, #8]
 800b006:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 800b00a:	bf08      	it	eq
 800b00c:	70f2      	strbeq	r2, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b00e:	f7ff ffdd 	bl	800afcc <RTC_ByteToBcd2>
 800b012:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b014:	4620      	mov	r0, r4
 800b016:	f7ff ffd9 	bl	800afcc <RTC_ByteToBcd2>
 800b01a:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800b01c:	4638      	mov	r0, r7
 800b01e:	f7ff ffd5 	bl	800afcc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800b022:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b024:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800b028:	ea42 4308 	orr.w	r3, r2, r8, lsl #16
 800b02c:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b030:	23ca      	movs	r3, #202	; 0xca
 800b032:	624b      	str	r3, [r1, #36]	; 0x24
 800b034:	2353      	movs	r3, #83	; 0x53
 800b036:	624b      	str	r3, [r1, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b038:	4628      	mov	r0, r5
 800b03a:	f7ff ff5f 	bl	800aefc <RTC_EnterInitMode>
 800b03e:	682a      	ldr	r2, [r5, #0]
 800b040:	4607      	mov	r7, r0
 800b042:	b1b0      	cbz	r0, 800b072 <HAL_RTC_SetTime+0x90>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b044:	23ff      	movs	r3, #255	; 0xff
 800b046:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b048:	2304      	movs	r3, #4
 800b04a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800b04c:	2300      	movs	r3, #0
 800b04e:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 800b050:	2701      	movs	r7, #1
}
 800b052:	4638      	mov	r0, r7
 800b054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b058:	688a      	ldr	r2, [r1, #8]
 800b05a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 800b05e:	bf08      	it	eq
 800b060:	70f2      	strbeq	r2, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b062:	0224      	lsls	r4, r4, #8
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800b064:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b066:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b06a:	433c      	orrs	r4, r7
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b06c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800b070:	e7de      	b.n	800b030 <HAL_RTC_SetTime+0x4e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b072:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800b076:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800b07a:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800b07c:	6893      	ldr	r3, [r2, #8]
 800b07e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b082:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b084:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 800b088:	6891      	ldr	r1, [r2, #8]
 800b08a:	4303      	orrs	r3, r0
 800b08c:	430b      	orrs	r3, r1
 800b08e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b090:	68d3      	ldr	r3, [r2, #12]
 800b092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b096:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b098:	6893      	ldr	r3, [r2, #8]
 800b09a:	069b      	lsls	r3, r3, #26
 800b09c:	d40a      	bmi.n	800b0b4 <HAL_RTC_SetTime+0xd2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f7ff ff14 	bl	800aecc <HAL_RTC_WaitForSynchro>
 800b0a4:	b130      	cbz	r0, 800b0b4 <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0a6:	682b      	ldr	r3, [r5, #0]
 800b0a8:	22ff      	movs	r2, #255	; 0xff
 800b0aa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 800b0b0:	772f      	strb	r7, [r5, #28]
 800b0b2:	e7cd      	b.n	800b050 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0b4:	682b      	ldr	r3, [r5, #0]
 800b0b6:	22ff      	movs	r2, #255	; 0xff
 800b0b8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800b0be:	2300      	movs	r3, #0
 800b0c0:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 800b0c2:	e7c6      	b.n	800b052 <HAL_RTC_SetTime+0x70>

0800b0c4 <HAL_RTC_SetDate>:
{
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800b0c6:	7f03      	ldrb	r3, [r0, #28]
 800b0c8:	2b01      	cmp	r3, #1
{
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	f04f 0602 	mov.w	r6, #2
  __HAL_LOCK(hrtc);
 800b0d0:	d031      	beq.n	800b136 <HAL_RTC_SetDate+0x72>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0d6:	7746      	strb	r6, [r0, #29]
                  ((uint32_t)sDate->WeekDay << 13U));
 800b0d8:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b0da:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b0dc:	784b      	ldrb	r3, [r1, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b0de:	788f      	ldrb	r7, [r1, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 800b0e0:	036d      	lsls	r5, r5, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b0e2:	2a00      	cmp	r2, #0
 800b0e4:	d148      	bne.n	800b178 <HAL_RTC_SetDate+0xb4>
 800b0e6:	06da      	lsls	r2, r3, #27
 800b0e8:	d503      	bpl.n	800b0f2 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b0ea:	f023 0310 	bic.w	r3, r3, #16
 800b0ee:	330a      	adds	r3, #10
 800b0f0:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b0f2:	f7ff ff6b 	bl	800afcc <RTC_ByteToBcd2>
 800b0f6:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b0f8:	7848      	ldrb	r0, [r1, #1]
 800b0fa:	f7ff ff67 	bl	800afcc <RTC_ByteToBcd2>
 800b0fe:	4601      	mov	r1, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b100:	4638      	mov	r0, r7
 800b102:	f7ff ff63 	bl	800afcc <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b106:	ea40 0205 	orr.w	r2, r0, r5
 800b10a:	ea42 4306 	orr.w	r3, r2, r6, lsl #16
 800b10e:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	22ca      	movs	r2, #202	; 0xca
 800b116:	625a      	str	r2, [r3, #36]	; 0x24
 800b118:	2253      	movs	r2, #83	; 0x53
 800b11a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b11c:	4620      	mov	r0, r4
 800b11e:	f7ff feed 	bl	800aefc <RTC_EnterInitMode>
 800b122:	6822      	ldr	r2, [r4, #0]
 800b124:	4606      	mov	r6, r0
 800b126:	b140      	cbz	r0, 800b13a <HAL_RTC_SetDate+0x76>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b128:	23ff      	movs	r3, #255	; 0xff
 800b12a:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b12c:	2304      	movs	r3, #4
 800b12e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800b130:	2300      	movs	r3, #0
 800b132:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800b134:	2601      	movs	r6, #1
}
 800b136:	4630      	mov	r0, r6
 800b138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b13a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800b13e:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800b142:	6055      	str	r5, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b144:	68d3      	ldr	r3, [r2, #12]
 800b146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b14a:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b14c:	6893      	ldr	r3, [r2, #8]
 800b14e:	069b      	lsls	r3, r3, #26
 800b150:	d40a      	bmi.n	800b168 <HAL_RTC_SetDate+0xa4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b152:	4620      	mov	r0, r4
 800b154:	f7ff feba 	bl	800aecc <HAL_RTC_WaitForSynchro>
 800b158:	b130      	cbz	r0, 800b168 <HAL_RTC_SetDate+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	22ff      	movs	r2, #255	; 0xff
 800b15e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b160:	2304      	movs	r3, #4
 800b162:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800b164:	7726      	strb	r6, [r4, #28]
 800b166:	e7e5      	b.n	800b134 <HAL_RTC_SetDate+0x70>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	22ff      	movs	r2, #255	; 0xff
 800b16c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800b16e:	2301      	movs	r3, #1
 800b170:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800b172:	2300      	movs	r3, #0
 800b174:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 800b176:	e7de      	b.n	800b136 <HAL_RTC_SetDate+0x72>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b178:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800b17c:	433d      	orrs	r5, r7
 800b17e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800b182:	e7c6      	b.n	800b112 <HAL_RTC_SetDate+0x4e>

0800b184 <HAL_RTC_SetAlarm_IT>:
{
 800b184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hrtc);
 800b188:	7f03      	ldrb	r3, [r0, #28]
 800b18a:	2b01      	cmp	r3, #1
{
 800b18c:	4604      	mov	r4, r0
 800b18e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800b192:	f000 8085 	beq.w	800b2a0 <HAL_RTC_SetAlarm_IT+0x11c>
 800b196:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b198:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hrtc);
 800b19a:	7723      	strb	r3, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b19c:	7760      	strb	r0, [r4, #29]
  if (Format == RTC_FORMAT_BIN)
 800b19e:	7808      	ldrb	r0, [r1, #0]
 800b1a0:	f891 9001 	ldrb.w	r9, [r1, #1]
 800b1a4:	f891 b002 	ldrb.w	fp, [r1, #2]
 800b1a8:	f891 8020 	ldrb.w	r8, [r1, #32]
 800b1ac:	69ce      	ldr	r6, [r1, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b1ae:	68bb      	ldr	r3, [r7, #8]
  if (Format == RTC_FORMAT_BIN)
 800b1b0:	2a00      	cmp	r2, #0
 800b1b2:	d156      	bne.n	800b262 <HAL_RTC_SetAlarm_IT+0xde>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b1b4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b1b8:	bf08      	it	eq
 800b1ba:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b1bc:	f7ff ff06 	bl	800afcc <RTC_ByteToBcd2>
 800b1c0:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b1c2:	4648      	mov	r0, r9
 800b1c4:	f7ff ff02 	bl	800afcc <RTC_ByteToBcd2>
 800b1c8:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b1ca:	4658      	mov	r0, fp
 800b1cc:	f7ff fefe 	bl	800afcc <RTC_ByteToBcd2>
 800b1d0:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	f7ff fefa 	bl	800afcc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b1d8:	694b      	ldr	r3, [r1, #20]
 800b1da:	ea46 0c03 	orr.w	ip, r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b1de:	78ce      	ldrb	r6, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b1e0:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 800b1e4:	ea4c 0202 	orr.w	r2, ip, r2
 800b1e8:	ea42 460a 	orr.w	r6, r2, sl, lsl #16
 800b1ec:	ea46 2309 	orr.w	r3, r6, r9, lsl #8
 800b1f0:	ea43 6500 	orr.w	r5, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b1f4:	698b      	ldr	r3, [r1, #24]
 800b1f6:	684e      	ldr	r6, [r1, #4]
 800b1f8:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b1fa:	23ca      	movs	r3, #202	; 0xca
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b1fe:	2353      	movs	r3, #83	; 0x53
 800b200:	627b      	str	r3, [r7, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800b202:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b208:	68bb      	ldr	r3, [r7, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800b20a:	d14b      	bne.n	800b2a4 <HAL_RTC_SetAlarm_IT+0x120>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b20c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b210:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	b2db      	uxtb	r3, r3
 800b216:	f463 73c0 	orn	r3, r3, #384	; 0x180
 800b21a:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 800b21c:	f7fd fcb6 	bl	8008b8c <HAL_GetTick>
 800b220:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	68df      	ldr	r7, [r3, #12]
 800b226:	f017 0701 	ands.w	r7, r7, #1
 800b22a:	d02c      	beq.n	800b286 <HAL_RTC_SetAlarm_IT+0x102>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b22c:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b22e:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b230:	689a      	ldr	r2, [r3, #8]
 800b232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b236:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800b238:	689a      	ldr	r2, [r3, #8]
 800b23a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b23e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b240:	4b29      	ldr	r3, [pc, #164]	; (800b2e8 <HAL_RTC_SetAlarm_IT+0x164>)
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b248:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800b24a:	689a      	ldr	r2, [r3, #8]
 800b24c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b250:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	22ff      	movs	r2, #255	; 0xff
 800b256:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800b258:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800b25a:	2301      	movs	r3, #1
 800b25c:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 800b25e:	7720      	strb	r0, [r4, #28]
  return HAL_OK;
 800b260:	e01e      	b.n	800b2a0 <HAL_RTC_SetAlarm_IT+0x11c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b262:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b266:	bf08      	it	eq
 800b268:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b26a:	694b      	ldr	r3, [r1, #20]
 800b26c:	431e      	orrs	r6, r3
 800b26e:	ea46 060b 	orr.w	r6, r6, fp
 800b272:	ea46 4500 	orr.w	r5, r6, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b276:	78c8      	ldrb	r0, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b278:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 800b27c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800b280:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 800b284:	e7b6      	b.n	800b1f4 <HAL_RTC_SetAlarm_IT+0x70>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b286:	f7fd fc81 	bl	8008b8c <HAL_GetTick>
 800b28a:	eba0 0008 	sub.w	r0, r0, r8
 800b28e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b292:	d9c6      	bls.n	800b222 <HAL_RTC_SetAlarm_IT+0x9e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b298:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b29a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b29c:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800b29e:	7727      	strb	r7, [r4, #28]
}
 800b2a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b2a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2a8:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f463 7320 	orn	r3, r3, #640	; 0x280
 800b2b2:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 800b2b4:	f7fd fc6a 	bl	8008b8c <HAL_GetTick>
 800b2b8:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	68df      	ldr	r7, [r3, #12]
 800b2be:	f017 0702 	ands.w	r7, r7, #2
 800b2c2:	d009      	beq.n	800b2d8 <HAL_RTC_SetAlarm_IT+0x154>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b2c4:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b2c6:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2ce:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b2d0:	689a      	ldr	r2, [r3, #8]
 800b2d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2d6:	e7b2      	b.n	800b23e <HAL_RTC_SetAlarm_IT+0xba>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b2d8:	f7fd fc58 	bl	8008b8c <HAL_GetTick>
 800b2dc:	eba0 0008 	sub.w	r0, r0, r8
 800b2e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b2e4:	d9e9      	bls.n	800b2ba <HAL_RTC_SetAlarm_IT+0x136>
 800b2e6:	e7d5      	b.n	800b294 <HAL_RTC_SetAlarm_IT+0x110>
 800b2e8:	40010400 	.word	0x40010400

0800b2ec <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800b2ec:	0903      	lsrs	r3, r0, #4
 800b2ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 800b2f2:	f000 000f 	and.w	r0, r0, #15
 800b2f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800b2fa:	b2c0      	uxtb	r0, r0
 800b2fc:	4770      	bx	lr

0800b2fe <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b2fe:	6803      	ldr	r3, [r0, #0]
 800b300:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b302:	6048      	str	r0, [r1, #4]
{
 800b304:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b306:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b308:	681c      	ldr	r4, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b30a:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b30e:	f3c4 4506 	ubfx	r5, r4, #16, #7
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800b312:	f3c4 2606 	ubfx	r6, r4, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b316:	6088      	str	r0, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800b318:	f005 0340 	and.w	r3, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b31c:	f3c4 4005 	ubfx	r0, r4, #16, #6
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b320:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b324:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800b326:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b328:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800b32a:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 800b32c:	b952      	cbnz	r2, 800b344 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b32e:	f7ff ffdd 	bl	800b2ec <RTC_Bcd2ToByte>
 800b332:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b334:	4630      	mov	r0, r6
 800b336:	f7ff ffd9 	bl	800b2ec <RTC_Bcd2ToByte>
 800b33a:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7ff ffd5 	bl	800b2ec <RTC_Bcd2ToByte>
 800b342:	7088      	strb	r0, [r1, #2]
}
 800b344:	2000      	movs	r0, #0
 800b346:	bd70      	pop	{r4, r5, r6, pc}

0800b348 <HAL_RTC_GetDate>:
{
 800b348:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b34a:	6803      	ldr	r3, [r0, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b34e:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b352:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b356:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800b35a:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b35e:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b360:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b362:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800b364:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800b366:	b952      	cbnz	r2, 800b37e <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b368:	f7ff ffc0 	bl	800b2ec <RTC_Bcd2ToByte>
 800b36c:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b36e:	4628      	mov	r0, r5
 800b370:	f7ff ffbc 	bl	800b2ec <RTC_Bcd2ToByte>
 800b374:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b376:	4620      	mov	r0, r4
 800b378:	f7ff ffb8 	bl	800b2ec <RTC_Bcd2ToByte>
 800b37c:	7088      	strb	r0, [r1, #2]
}
 800b37e:	2000      	movs	r0, #0
 800b380:	bd38      	pop	{r3, r4, r5, pc}

0800b382 <HAL_RTC_GetAlarm>:
    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800b382:	6800      	ldr	r0, [r0, #0]
  if (Alarm == RTC_ALARM_A)
 800b384:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    sAlarm->Alarm = RTC_ALARM_B;
 800b388:	bf15      	itete	ne
 800b38a:	f44f 7200 	movne.w	r2, #512	; 0x200
    sAlarm->Alarm = RTC_ALARM_A;
 800b38e:	624a      	streq	r2, [r1, #36]	; 0x24
    sAlarm->Alarm = RTC_ALARM_B;
 800b390:	624a      	strne	r2, [r1, #36]	; 0x24
    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800b392:	69c2      	ldreq	r2, [r0, #28]
    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800b394:	bf18      	it	ne
 800b396:	6a02      	ldrne	r2, [r0, #32]
{
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800b39a:	bf0c      	ite	eq
 800b39c:	6c44      	ldreq	r4, [r0, #68]	; 0x44
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800b39e:	6c84      	ldrne	r4, [r0, #72]	; 0x48
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800b3a0:	f3c2 4507 	ubfx	r5, r2, #16, #8
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800b3a4:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 800b3a8:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800b3ac:	f3c2 4005 	ubfx	r0, r2, #16, #6
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800b3b0:	f3c2 2706 	ubfx	r7, r2, #8, #7
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 800b3b4:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 800b3b8:	70cd      	strb	r5, [r1, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800b3ba:	604c      	str	r4, [r1, #4]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800b3bc:	f002 4580 	and.w	r5, r2, #1073741824	; 0x40000000
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800b3c0:	f3c2 6405 	ubfx	r4, r2, #24, #6
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800b3c4:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800b3c8:	7008      	strb	r0, [r1, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800b3ca:	704f      	strb	r7, [r1, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 800b3cc:	708e      	strb	r6, [r1, #2]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800b3ce:	f881 4020 	strb.w	r4, [r1, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800b3d2:	61cd      	str	r5, [r1, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800b3d4:	614a      	str	r2, [r1, #20]
  if (Format == RTC_FORMAT_BIN)
 800b3d6:	b97b      	cbnz	r3, 800b3f8 <HAL_RTC_GetAlarm+0x76>
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800b3d8:	f7ff ff88 	bl	800b2ec <RTC_Bcd2ToByte>
 800b3dc:	7008      	strb	r0, [r1, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800b3de:	4638      	mov	r0, r7
 800b3e0:	f7ff ff84 	bl	800b2ec <RTC_Bcd2ToByte>
 800b3e4:	7048      	strb	r0, [r1, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f7ff ff80 	bl	800b2ec <RTC_Bcd2ToByte>
 800b3ec:	7088      	strb	r0, [r1, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f7ff ff7c 	bl	800b2ec <RTC_Bcd2ToByte>
 800b3f4:	f881 0020 	strb.w	r0, [r1, #32]
}
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3fc <SDADC_EnterInitMode>:
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800b3fc:	6802      	ldr	r2, [r0, #0]
{
 800b3fe:	b538      	push	{r3, r4, r5, lr}
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800b400:	6813      	ldr	r3, [r2, #0]
 800b402:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b406:	6013      	str	r3, [r2, #0]
{
 800b408:	4604      	mov	r4, r0

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 800b40a:	f7fd fbbf 	bl	8008b8c <HAL_GetTick>
 800b40e:	4605      	mov	r5, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	2b00      	cmp	r3, #0
 800b416:	da01      	bge.n	800b41c <SDADC_EnterInitMode+0x20>
      return HAL_TIMEOUT;
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 800b418:	2000      	movs	r0, #0
}
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 800b41c:	f7fd fbb6 	bl	8008b8c <HAL_GetTick>
 800b420:	1b40      	subs	r0, r0, r5
 800b422:	28c8      	cmp	r0, #200	; 0xc8
 800b424:	d9f4      	bls.n	800b410 <SDADC_EnterInitMode+0x14>
      return HAL_TIMEOUT;
 800b426:	2003      	movs	r0, #3
 800b428:	e7f7      	b.n	800b41a <SDADC_EnterInitMode+0x1e>

0800b42a <SDADC_ExitInitMode.isra.0>:
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800b42a:	6803      	ldr	r3, [r0, #0]
 800b42c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b430:	6003      	str	r3, [r0, #0]
}
 800b432:	4770      	bx	lr

0800b434 <SDADC_InjConvStart>:
static HAL_StatusTypeDef SDADC_InjConvStart(SDADC_HandleTypeDef* hsdadc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Initialize number of injected conversions remaining */
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800b434:	6a03      	ldr	r3, [r0, #32]
{
 800b436:	b510      	push	{r4, lr}
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800b438:	6243      	str	r3, [r0, #36]	; 0x24

  /* Check injected trigger */
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 800b43a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800b43c:	4604      	mov	r4, r0
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 800b43e:	b973      	cbnz	r3, 800b45e <SDADC_InjConvStart+0x2a>
  {
    /* Set JSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 800b440:	6802      	ldr	r2, [r0, #0]
 800b442:	6853      	ldr	r3, [r2, #4]
 800b444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b448:	6053      	str	r3, [r2, #4]
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 800b44a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b44e:	2b01      	cmp	r3, #1
 800b450:	bf0c      	ite	eq
 800b452:	2304      	moveq	r3, #4
 800b454:	2305      	movne	r3, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 800b456:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800b45a:	2000      	movs	r0, #0
 800b45c:	e006      	b.n	800b46c <SDADC_InjConvStart+0x38>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b45e:	f7ff ffcd 	bl	800b3fc <SDADC_EnterInitMode>
 800b462:	b120      	cbz	r0, 800b46e <SDADC_InjConvStart+0x3a>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b464:	23ff      	movs	r3, #255	; 0xff
 800b466:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b46a:	2003      	movs	r0, #3
  }
  /* Return function status */
  return status;
}
 800b46c:	bd10      	pop	{r4, pc}
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800b46e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800b470:	6820      	ldr	r0, [r4, #0]
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800b472:	2b01      	cmp	r3, #1
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800b474:	bf0d      	iteet	eq
 800b476:	6803      	ldreq	r3, [r0, #0]
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 800b478:	6843      	ldrne	r3, [r0, #4]
 800b47a:	6b22      	ldrne	r2, [r4, #48]	; 0x30
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800b47c:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 800b480:	bf16      	itet	ne
 800b482:	4313      	orrne	r3, r2
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 800b484:	6003      	streq	r3, [r0, #0]
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 800b486:	6043      	strne	r3, [r0, #4]
      SDADC_ExitInitMode(hsdadc);
 800b488:	f7ff ffcf 	bl	800b42a <SDADC_ExitInitMode.isra.0>
  if(status == HAL_OK)
 800b48c:	e7dd      	b.n	800b44a <SDADC_InjConvStart+0x16>
	...

0800b490 <HAL_SDADC_Init>:
{
 800b490:	b510      	push	{r4, lr}
 800b492:	2301      	movs	r3, #1
  if(hsdadc == NULL)
 800b494:	4604      	mov	r4, r0
 800b496:	2800      	cmp	r0, #0
 800b498:	d03e      	beq.n	800b518 <HAL_SDADC_Init+0x88>
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 800b49a:	2200      	movs	r2, #0
  hsdadc->InjConvRemaining    = 1U;
 800b49c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 800b4a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 800b4a4:	e9c0 320c 	strd	r3, r2, [r0, #48]	; 0x30
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 800b4a8:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 800b4ac:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 800b4b0:	6382      	str	r2, [r0, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 800b4b2:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_SDADC_MspInit(hsdadc);
 800b4b4:	f7fc ff5a 	bl	800836c <HAL_SDADC_MspInit>
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 800b4b8:	6823      	ldr	r3, [r4, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800b4ba:	68e0      	ldr	r0, [r4, #12]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800b4c2:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800b4c4:	6862      	ldr	r2, [r4, #4]
 800b4c6:	6819      	ldr	r1, [r3, #0]
 800b4c8:	4302      	orrs	r2, r0
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 800b4ce:	685a      	ldr	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 800b4d0:	68a1      	ldr	r1, [r4, #8]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 800b4d2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b4d6:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	605a      	str	r2, [r3, #4]
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 800b4de:	4b0f      	ldr	r3, [pc, #60]	; (800b51c <HAL_SDADC_Init+0x8c>)
 800b4e0:	6922      	ldr	r2, [r4, #16]
 800b4e2:	6819      	ldr	r1, [r3, #0]
 800b4e4:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800b4e8:	4291      	cmp	r1, r2
 800b4ea:	d009      	beq.n	800b500 <HAL_SDADC_Init+0x70>
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 800b4ec:	6819      	ldr	r1, [r3, #0]
 800b4ee:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800b4f2:	6019      	str	r1, [r3, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 800b4f4:	6819      	ldr	r1, [r3, #0]
 800b4f6:	430a      	orrs	r2, r1
 800b4f8:	601a      	str	r2, [r3, #0]
    HAL_Delay(2U);
 800b4fa:	2002      	movs	r0, #2
 800b4fc:	f7fd fb4c 	bl	8008b98 <HAL_Delay>
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 800b500:	6822      	ldr	r2, [r4, #0]
 800b502:	6853      	ldr	r3, [r2, #4]
 800b504:	f043 0301 	orr.w	r3, r3, #1
 800b508:	6053      	str	r3, [r2, #4]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 800b50a:	6893      	ldr	r3, [r2, #8]
 800b50c:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800b510:	d1fb      	bne.n	800b50a <HAL_SDADC_Init+0x7a>
  hsdadc->State = HAL_SDADC_STATE_READY;
 800b512:	2201      	movs	r2, #1
 800b514:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800b518:	4618      	mov	r0, r3
}
 800b51a:	bd10      	pop	{r4, pc}
 800b51c:	40016000 	.word	0x40016000

0800b520 <HAL_SDADC_PrepareChannelConfig>:
{
 800b520:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800b522:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b526:	2b01      	cmp	r3, #1
{
 800b528:	4606      	mov	r6, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	4615      	mov	r5, r2
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800b52e:	d117      	bne.n	800b560 <HAL_SDADC_PrepareChannelConfig+0x40>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b530:	f7ff ff64 	bl	800b3fc <SDADC_EnterInitMode>
 800b534:	4601      	mov	r1, r0
 800b536:	b128      	cbz	r0, 800b544 <HAL_SDADC_PrepareChannelConfig+0x24>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b538:	23ff      	movs	r3, #255	; 0xff
 800b53a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b53e:	2103      	movs	r1, #3
}
 800b540:	4608      	mov	r0, r1
 800b542:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800b544:	e9d5 3200 	ldrd	r3, r2, [r5]
 800b548:	4313      	orrs	r3, r2
                                             ConfParamStruct->Gain | \
 800b54a:	68aa      	ldr	r2, [r5, #8]
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 800b54c:	6830      	ldr	r0, [r6, #0]
                                             ConfParamStruct->Gain | \
 800b54e:	4313      	orrs	r3, r2
                       (uint32_t)(ConfIndex << 2UL));
 800b550:	00a4      	lsls	r4, r4, #2
                                             ConfParamStruct->CommonMode | \
 800b552:	68ea      	ldr	r2, [r5, #12]
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 800b554:	3420      	adds	r4, #32
                                             ConfParamStruct->CommonMode | \
 800b556:	4313      	orrs	r3, r2
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800b558:	5103      	str	r3, [r0, r4]
      SDADC_ExitInitMode(hsdadc);
 800b55a:	f7ff ff66 	bl	800b42a <SDADC_ExitInitMode.isra.0>
 800b55e:	e7ef      	b.n	800b540 <HAL_SDADC_PrepareChannelConfig+0x20>
    status = HAL_ERROR;
 800b560:	2101      	movs	r1, #1
 800b562:	e7ed      	b.n	800b540 <HAL_SDADC_PrepareChannelConfig+0x20>

0800b564 <HAL_SDADC_AssociateChannelConfig>:
{
 800b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800b566:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b56a:	2b01      	cmp	r3, #1
{
 800b56c:	4606      	mov	r6, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	4617      	mov	r7, r2
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800b572:	d120      	bne.n	800b5b6 <HAL_SDADC_AssociateChannelConfig+0x52>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b574:	f7ff ff42 	bl	800b3fc <SDADC_EnterInitMode>
 800b578:	4605      	mov	r5, r0
 800b57a:	b128      	cbz	r0, 800b588 <HAL_SDADC_AssociateChannelConfig+0x24>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b57c:	23ff      	movs	r3, #255	; 0xff
 800b57e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b582:	2503      	movs	r5, #3
}
 800b584:	4628      	mov	r0, r5
 800b586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Channel != SDADC_CHANNEL_8)
 800b588:	4b0c      	ldr	r3, [pc, #48]	; (800b5bc <HAL_SDADC_AssociateChannelConfig+0x58>)
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 800b58a:	6830      	ldr	r0, [r6, #0]
      if(Channel != SDADC_CHANNEL_8)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d010      	beq.n	800b5b2 <HAL_SDADC_AssociateChannelConfig+0x4e>
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 800b590:	0ba1      	lsrs	r1, r4, #14
 800b592:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b594:	f001 041c 	and.w	r4, r1, #28
 800b598:	2203      	movs	r2, #3
 800b59a:	40a2      	lsls	r2, r4
 800b59c:	ea23 0302 	bic.w	r3, r3, r2
 800b5a0:	6403      	str	r3, [r0, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 800b5a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b5a4:	fa07 f404 	lsl.w	r4, r7, r4
 800b5a8:	4314      	orrs	r4, r2
 800b5aa:	6404      	str	r4, [r0, #64]	; 0x40
      SDADC_ExitInitMode(hsdadc);
 800b5ac:	f7ff ff3d 	bl	800b42a <SDADC_ExitInitMode.isra.0>
 800b5b0:	e7e8      	b.n	800b584 <HAL_SDADC_AssociateChannelConfig+0x20>
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 800b5b2:	6447      	str	r7, [r0, #68]	; 0x44
 800b5b4:	e7fa      	b.n	800b5ac <HAL_SDADC_AssociateChannelConfig+0x48>
    status = HAL_ERROR;
 800b5b6:	2501      	movs	r5, #1
 800b5b8:	e7e4      	b.n	800b584 <HAL_SDADC_AssociateChannelConfig+0x20>
 800b5ba:	bf00      	nop
 800b5bc:	00080100 	.word	0x00080100

0800b5c0 <HAL_SDADC_InjectedConfigChannel>:
{
 800b5c0:	b510      	push	{r4, lr}
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 800b5c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2bfd      	cmp	r3, #253	; 0xfd
 800b5cc:	d817      	bhi.n	800b5fe <HAL_SDADC_InjectedConfigChannel+0x3e>
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 800b5ce:	6803      	ldr	r3, [r0, #0]
 800b5d0:	b289      	uxth	r1, r1
 800b5d2:	6159      	str	r1, [r3, #20]
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 800b5d4:	685c      	ldr	r4, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 800b5d6:	2a01      	cmp	r2, #1
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 800b5d8:	bf0c      	ite	eq
 800b5da:	f044 0420 	orreq.w	r4, r4, #32
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 800b5de:	f024 0420 	bicne.w	r4, r4, #32
 800b5e2:	605c      	str	r4, [r3, #4]
    hsdadc->InjectedContMode = ContinuousMode;
 800b5e4:	61c2      	str	r2, [r0, #28]
 800b5e6:	2309      	movs	r3, #9
  uint32_t nbChannels = 0UL;
 800b5e8:	2200      	movs	r2, #0
    if((tmp & 0x00000001UL) != 0UL)
 800b5ea:	07cc      	lsls	r4, r1, #31
      nbChannels++;
 800b5ec:	bf48      	it	mi
 800b5ee:	3201      	addmi	r2, #1
  for(i = 0UL ; i < 9UL ; i++)
 800b5f0:	3b01      	subs	r3, #1
    tmp = (uint32_t) (tmp >> 1UL);
 800b5f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
  for(i = 0UL ; i < 9UL ; i++)
 800b5f6:	d1f8      	bne.n	800b5ea <HAL_SDADC_InjectedConfigChannel+0x2a>
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 800b5f8:	6202      	str	r2, [r0, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800b5fa:	4618      	mov	r0, r3
}
 800b5fc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800b5fe:	2001      	movs	r0, #1
 800b600:	e7fc      	b.n	800b5fc <HAL_SDADC_InjectedConfigChannel+0x3c>
	...

0800b604 <HAL_SDADC_SelectInjectedTrigger>:
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 800b604:	6802      	ldr	r2, [r0, #0]
 800b606:	4b07      	ldr	r3, [pc, #28]	; (800b624 <HAL_SDADC_SelectInjectedTrigger+0x20>)
 800b608:	429a      	cmp	r2, r3
 800b60a:	d101      	bne.n	800b610 <HAL_SDADC_SelectInjectedTrigger+0xc>
 800b60c:	2901      	cmp	r1, #1
 800b60e:	d007      	beq.n	800b620 <HAL_SDADC_SelectInjectedTrigger+0x1c>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 800b610:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800b614:	3b01      	subs	r3, #1
 800b616:	2b02      	cmp	r3, #2
 800b618:	d802      	bhi.n	800b620 <HAL_SDADC_SelectInjectedTrigger+0x1c>
    hsdadc->InjectedTrigger = Trigger;
 800b61a:	62c1      	str	r1, [r0, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 800b61c:	2000      	movs	r0, #0
 800b61e:	4770      	bx	lr
    status = HAL_ERROR;
 800b620:	2001      	movs	r0, #1
}
 800b622:	4770      	bx	lr
 800b624:	40016000 	.word	0x40016000

0800b628 <HAL_SDADC_SelectInjectedExtTrigger>:
{
 800b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b62a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b62e:	2b01      	cmp	r3, #1
{
 800b630:	4605      	mov	r5, r0
 800b632:	460f      	mov	r7, r1
 800b634:	4616      	mov	r6, r2
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b636:	d115      	bne.n	800b664 <HAL_SDADC_SelectInjectedExtTrigger+0x3c>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b638:	f7ff fee0 	bl	800b3fc <SDADC_EnterInitMode>
 800b63c:	4604      	mov	r4, r0
 800b63e:	b128      	cbz	r0, 800b64c <HAL_SDADC_SelectInjectedExtTrigger+0x24>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b640:	23ff      	movs	r3, #255	; 0xff
 800b642:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b646:	2403      	movs	r4, #3
}
 800b648:	4620      	mov	r0, r4
 800b64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTSEL);
 800b64c:	6828      	ldr	r0, [r5, #0]
 800b64e:	6843      	ldr	r3, [r0, #4]
 800b650:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b654:	6043      	str	r3, [r0, #4]
      hsdadc->Instance->CR2 |= InjectedExtTrigger;
 800b656:	6843      	ldr	r3, [r0, #4]
 800b658:	433b      	orrs	r3, r7
 800b65a:	6043      	str	r3, [r0, #4]
      hsdadc->ExtTriggerEdge = ExtTriggerEdge;
 800b65c:	632e      	str	r6, [r5, #48]	; 0x30
      SDADC_ExitInitMode(hsdadc);
 800b65e:	f7ff fee4 	bl	800b42a <SDADC_ExitInitMode.isra.0>
 800b662:	e7f1      	b.n	800b648 <HAL_SDADC_SelectInjectedExtTrigger+0x20>
    status = HAL_ERROR;
 800b664:	2401      	movs	r4, #1
 800b666:	e7ef      	b.n	800b648 <HAL_SDADC_SelectInjectedExtTrigger+0x20>

0800b668 <HAL_SDADC_SelectInjectedDelay>:
{
 800b668:	b538      	push	{r3, r4, r5, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b66a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b66e:	2b01      	cmp	r3, #1
{
 800b670:	4604      	mov	r4, r0
 800b672:	460d      	mov	r5, r1
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b674:	d114      	bne.n	800b6a0 <HAL_SDADC_SelectInjectedDelay+0x38>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b676:	f7ff fec1 	bl	800b3fc <SDADC_EnterInitMode>
 800b67a:	4602      	mov	r2, r0
 800b67c:	b128      	cbz	r0, 800b68a <HAL_SDADC_SelectInjectedDelay+0x22>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b67e:	23ff      	movs	r3, #255	; 0xff
 800b680:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b684:	2203      	movs	r2, #3
}
 800b686:	4610      	mov	r0, r2
 800b688:	bd38      	pop	{r3, r4, r5, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 800b68a:	6820      	ldr	r0, [r4, #0]
 800b68c:	6843      	ldr	r3, [r0, #4]
 800b68e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b692:	6043      	str	r3, [r0, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 800b694:	6843      	ldr	r3, [r0, #4]
 800b696:	432b      	orrs	r3, r5
 800b698:	6043      	str	r3, [r0, #4]
      SDADC_ExitInitMode(hsdadc);
 800b69a:	f7ff fec6 	bl	800b42a <SDADC_ExitInitMode.isra.0>
 800b69e:	e7f2      	b.n	800b686 <HAL_SDADC_SelectInjectedDelay+0x1e>
    status = HAL_ERROR;
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	e7f0      	b.n	800b686 <HAL_SDADC_SelectInjectedDelay+0x1e>

0800b6a4 <HAL_SDADC_CalibrationStart>:
{
 800b6a4:	b538      	push	{r3, r4, r5, lr}
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b6a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b6aa:	2b01      	cmp	r3, #1
{
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	460d      	mov	r5, r1
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800b6b0:	d11c      	bne.n	800b6ec <HAL_SDADC_CalibrationStart+0x48>
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800b6b2:	f7ff fea3 	bl	800b3fc <SDADC_EnterInitMode>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	b128      	cbz	r0, 800b6c6 <HAL_SDADC_CalibrationStart+0x22>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b6ba:	23ff      	movs	r3, #255	; 0xff
 800b6bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800b6c0:	2203      	movs	r2, #3
}
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	bd38      	pop	{r3, r4, r5, pc}
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 800b6c6:	6820      	ldr	r0, [r4, #0]
 800b6c8:	6843      	ldr	r3, [r0, #4]
 800b6ca:	f023 0306 	bic.w	r3, r3, #6
 800b6ce:	6043      	str	r3, [r0, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 800b6d0:	6843      	ldr	r3, [r0, #4]
 800b6d2:	432b      	orrs	r3, r5
 800b6d4:	6043      	str	r3, [r0, #4]
      SDADC_ExitInitMode(hsdadc);
 800b6d6:	f7ff fea8 	bl	800b42a <SDADC_ExitInitMode.isra.0>
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 800b6da:	6821      	ldr	r1, [r4, #0]
 800b6dc:	684b      	ldr	r3, [r1, #4]
 800b6de:	f043 0310 	orr.w	r3, r3, #16
 800b6e2:	604b      	str	r3, [r1, #4]
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800b6ea:	e7ea      	b.n	800b6c2 <HAL_SDADC_CalibrationStart+0x1e>
    status = HAL_ERROR;
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	e7e8      	b.n	800b6c2 <HAL_SDADC_CalibrationStart+0x1e>

0800b6f0 <HAL_SDADC_PollForCalibEvent>:
{
 800b6f0:	b570      	push	{r4, r5, r6, lr}
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800b6f2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b6f6:	2b02      	cmp	r3, #2
{
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	460d      	mov	r5, r1
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800b6fc:	d11a      	bne.n	800b734 <HAL_SDADC_PollForCalibEvent+0x44>
    tickstart = HAL_GetTick();  
 800b6fe:	f7fd fa45 	bl	8008b8c <HAL_GetTick>
 800b702:	4606      	mov	r6, r0
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	689a      	ldr	r2, [r3, #8]
 800b708:	07d2      	lsls	r2, r2, #31
 800b70a:	d508      	bpl.n	800b71e <HAL_SDADC_PollForCalibEvent+0x2e>
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 800b70c:	68da      	ldr	r2, [r3, #12]
 800b70e:	f042 0201 	orr.w	r2, r2, #1
 800b712:	60da      	str	r2, [r3, #12]
    hsdadc->State = HAL_SDADC_STATE_READY;
 800b714:	2301      	movs	r3, #1
 800b716:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800b71a:	2000      	movs	r0, #0
}
 800b71c:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 800b71e:	1c69      	adds	r1, r5, #1
 800b720:	d0f1      	beq.n	800b706 <HAL_SDADC_PollForCalibEvent+0x16>
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 800b722:	f7fd fa33 	bl	8008b8c <HAL_GetTick>
 800b726:	1b80      	subs	r0, r0, r6
 800b728:	42a8      	cmp	r0, r5
 800b72a:	d801      	bhi.n	800b730 <HAL_SDADC_PollForCalibEvent+0x40>
 800b72c:	2d00      	cmp	r5, #0
 800b72e:	d1e9      	bne.n	800b704 <HAL_SDADC_PollForCalibEvent+0x14>
          return HAL_TIMEOUT;
 800b730:	2003      	movs	r0, #3
 800b732:	e7f3      	b.n	800b71c <HAL_SDADC_PollForCalibEvent+0x2c>
    return HAL_ERROR;
 800b734:	2001      	movs	r0, #1
 800b736:	e7f1      	b.n	800b71c <HAL_SDADC_PollForCalibEvent+0x2c>

0800b738 <HAL_SDADC_InjectedStart_DMA>:
{
 800b738:	b558      	push	{r3, r4, r6, lr}
 800b73a:	460e      	mov	r6, r1
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 800b73c:	6801      	ldr	r1, [r0, #0]
{
 800b73e:	4613      	mov	r3, r2
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 800b740:	680a      	ldr	r2, [r1, #0]
 800b742:	0392      	lsls	r2, r2, #14
{
 800b744:	4604      	mov	r4, r0
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 800b746:	d428      	bmi.n	800b79a <HAL_SDADC_InjectedStart_DMA+0x62>
  else if((hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800b748:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b74a:	b952      	cbnz	r2, 800b762 <HAL_SDADC_InjectedStart_DMA+0x2a>
 800b74c:	69c2      	ldr	r2, [r0, #28]
 800b74e:	b942      	cbnz	r2, 800b762 <HAL_SDADC_InjectedStart_DMA+0x2a>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 800b750:	6942      	ldr	r2, [r0, #20]
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800b752:	6990      	ldr	r0, [r2, #24]
 800b754:	b910      	cbnz	r0, 800b75c <HAL_SDADC_InjectedStart_DMA+0x24>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 800b756:	6a20      	ldr	r0, [r4, #32]
 800b758:	4298      	cmp	r0, r3
 800b75a:	d31e      	bcc.n	800b79a <HAL_SDADC_InjectedStart_DMA+0x62>
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800b75c:	6992      	ldr	r2, [r2, #24]
 800b75e:	2a20      	cmp	r2, #32
 800b760:	d01b      	beq.n	800b79a <HAL_SDADC_InjectedStart_DMA+0x62>
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800b762:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800b766:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800b76a:	2a01      	cmp	r2, #1
 800b76c:	d115      	bne.n	800b79a <HAL_SDADC_InjectedStart_DMA+0x62>
    hsdadc->hdma->XferCpltCallback = SDADC_DMAInjectedConvCplt;
 800b76e:	6960      	ldr	r0, [r4, #20]
 800b770:	4a0d      	ldr	r2, [pc, #52]	; (800b7a8 <HAL_SDADC_InjectedStart_DMA+0x70>)
 800b772:	6282      	str	r2, [r0, #40]	; 0x28
    hsdadc->hdma->XferErrorCallback = SDADC_DMAError;
 800b774:	4a0d      	ldr	r2, [pc, #52]	; (800b7ac <HAL_SDADC_InjectedStart_DMA+0x74>)
 800b776:	6302      	str	r2, [r0, #48]	; 0x30
    if(hsdadc->hdma->Init.Mode == DMA_CIRCULAR)
 800b778:	6982      	ldr	r2, [r0, #24]
 800b77a:	2a20      	cmp	r2, #32
      hsdadc->hdma->XferHalfCpltCallback = SDADC_DMAInjectedHalfConvCplt;
 800b77c:	bf04      	itt	eq
 800b77e:	4a0c      	ldreq	r2, [pc, #48]	; (800b7b0 <HAL_SDADC_InjectedStart_DMA+0x78>)
 800b780:	62c2      	streq	r2, [r0, #44]	; 0x2c
    hsdadc->Instance->CR1 |= SDADC_CR1_JDMAEN;
 800b782:	680a      	ldr	r2, [r1, #0]
 800b784:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b788:	f841 2b60 	str.w	r2, [r1], #96
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->JDATAR, \
 800b78c:	4632      	mov	r2, r6
 800b78e:	f7fd fe2a 	bl	80093e6 <HAL_DMA_Start_IT>
 800b792:	b120      	cbz	r0, 800b79e <HAL_SDADC_InjectedStart_DMA+0x66>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800b794:	23ff      	movs	r3, #255	; 0xff
 800b796:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b79a:	2001      	movs	r0, #1
 800b79c:	bd58      	pop	{r3, r4, r6, pc}
      status = SDADC_InjConvStart(hsdadc);
 800b79e:	4620      	mov	r0, r4
}
 800b7a0:	e8bd 4058 	ldmia.w	sp!, {r3, r4, r6, lr}
      status = SDADC_InjConvStart(hsdadc);
 800b7a4:	f7ff be46 	b.w	800b434 <SDADC_InjConvStart>
 800b7a8:	0800b7c3 	.word	0x0800b7c3
 800b7ac:	0800b7cf 	.word	0x0800b7cf
 800b7b0:	0800b7b7 	.word	0x0800b7b7

0800b7b4 <HAL_SDADC_InjectedConvHalfCpltCallback>:
 800b7b4:	4770      	bx	lr

0800b7b6 <SDADC_DMAInjectedHalfConvCplt>:
{
 800b7b6:	b508      	push	{r3, lr}
  HAL_SDADC_InjectedConvHalfCpltCallback(hsdadc);
 800b7b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b7ba:	f7ff fffb 	bl	800b7b4 <HAL_SDADC_InjectedConvHalfCpltCallback>
}
 800b7be:	bd08      	pop	{r3, pc}

0800b7c0 <HAL_SDADC_InjectedConvCpltCallback>:
 800b7c0:	4770      	bx	lr

0800b7c2 <SDADC_DMAInjectedConvCplt>:
{
 800b7c2:	b508      	push	{r3, lr}
  HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 800b7c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b7c6:	f7ff fffb 	bl	800b7c0 <HAL_SDADC_InjectedConvCpltCallback>
}
 800b7ca:	bd08      	pop	{r3, pc}

0800b7cc <HAL_SDADC_ErrorCallback>:
 800b7cc:	4770      	bx	lr

0800b7ce <SDADC_DMAError>:
{
 800b7ce:	b508      	push	{r3, lr}
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800b7d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hsdadc->ErrorCode = SDADC_ERROR_DMA;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_SDADC_ErrorCallback(hsdadc);
 800b7d6:	f7ff fff9 	bl	800b7cc <HAL_SDADC_ErrorCallback>
}
 800b7da:	bd08      	pop	{r3, pc}

0800b7dc <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800b7dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7e0:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b7e2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800b7e4:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800b7e6:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800b7ea:	4605      	mov	r5, r0
 800b7ec:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b7ee:	f7fd f9cd 	bl	8008b8c <HAL_GetTick>
 800b7f2:	44b8      	add	r8, r7
 800b7f4:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 800b7f8:	f7fd f9c8 	bl	8008b8c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b7fc:	4b29      	ldr	r3, [pc, #164]	; (800b8a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b7fe:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2223      	movs	r2, #35	; 0x23
 800b806:	4353      	muls	r3, r2
 800b808:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 800b80a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b80c:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 800b80e:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 800b810:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800b812:	6893      	ldr	r3, [r2, #8]
 800b814:	4033      	ands	r3, r6
 800b816:	d101      	bne.n	800b81c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
    }
  }

  return HAL_OK;
 800b818:	4618      	mov	r0, r3
 800b81a:	e038      	b.n	800b88e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b81c:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg8 = *ptmpreg8;
 800b820:	bf01      	itttt	eq
 800b822:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 800b826:	b2db      	uxtbeq	r3, r3
 800b828:	f88d 3003 	strbeq.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800b82c:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 800b830:	1c7b      	adds	r3, r7, #1
 800b832:	d0ee      	beq.n	800b812 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b834:	f7fd f9aa 	bl	8008b8c <HAL_GetTick>
 800b838:	eba0 0008 	sub.w	r0, r0, r8
 800b83c:	42a0      	cmp	r0, r4
 800b83e:	d329      	bcc.n	800b894 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b840:	682b      	ldr	r3, [r5, #0]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b848:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b84a:	686a      	ldr	r2, [r5, #4]
 800b84c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b850:	d10a      	bne.n	800b868 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
 800b852:	68aa      	ldr	r2, [r5, #8]
 800b854:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b858:	d002      	beq.n	800b860 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b85a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b85e:	d103      	bne.n	800b868 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
          __HAL_SPI_DISABLE(hspi);
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b866:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b868:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b86a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b86e:	d107      	bne.n	800b880 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          SPI_RESET_CRC(hspi);
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b876:	601a      	str	r2, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b87e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b880:	2301      	movs	r3, #1
 800b882:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b886:	2300      	movs	r3, #0
 800b888:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800b88c:	2003      	movs	r0, #3
}
 800b88e:	b003      	add	sp, #12
 800b890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(count == 0U)
 800b894:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800b896:	2b00      	cmp	r3, #0
      count--;
 800b898:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800b89a:	bf08      	it	eq
 800b89c:	2400      	moveq	r4, #0
      count--;
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	e7b5      	b.n	800b80e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 800b8a2:	bf00      	nop
 800b8a4:	20000008 	.word	0x20000008

0800b8a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800b8a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8aa:	460e      	mov	r6, r1
 800b8ac:	4617      	mov	r7, r2
 800b8ae:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b8b0:	f7fd f96c 	bl	8008b8c <HAL_GetTick>
 800b8b4:	4437      	add	r7, r6
 800b8b6:	1a3c      	subs	r4, r7, r0
  tmp_tickstart = HAL_GetTick();
 800b8b8:	f7fd f968 	bl	8008b8c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b8bc:	4b22      	ldr	r3, [pc, #136]	; (800b948 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 800b8c4:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b8c6:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8c8:	682a      	ldr	r2, [r5, #0]
      count--;
 800b8ca:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8cc:	6893      	ldr	r3, [r2, #8]
 800b8ce:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800b8d2:	d101      	bne.n	800b8d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
  return HAL_OK;
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	e02d      	b.n	800b934 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 800b8d8:	1c73      	adds	r3, r6, #1
 800b8da:	d0f7      	beq.n	800b8cc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b8dc:	f7fd f956 	bl	8008b8c <HAL_GetTick>
 800b8e0:	1bc0      	subs	r0, r0, r7
 800b8e2:	42a0      	cmp	r0, r4
 800b8e4:	d328      	bcc.n	800b938 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b8e6:	682b      	ldr	r3, [r5, #0]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b8ee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8f0:	686a      	ldr	r2, [r5, #4]
 800b8f2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b8f6:	d10a      	bne.n	800b90e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 800b8f8:	68aa      	ldr	r2, [r5, #8]
 800b8fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b8fe:	d002      	beq.n	800b906 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b900:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b904:	d103      	bne.n	800b90e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b90c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b90e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b910:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b914:	d107      	bne.n	800b926 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b924:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b926:	2301      	movs	r3, #1
 800b928:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800b92c:	2300      	movs	r3, #0
 800b92e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800b932:	2003      	movs	r0, #3
}
 800b934:	b003      	add	sp, #12
 800b936:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 800b938:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800b93a:	2b00      	cmp	r3, #0
      count--;
 800b93c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800b93e:	bf08      	it	eq
 800b940:	2400      	moveq	r4, #0
      count--;
 800b942:	3b01      	subs	r3, #1
 800b944:	e7c0      	b.n	800b8c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 800b946:	bf00      	nop
 800b948:	20000008 	.word	0x20000008

0800b94c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b94c:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b94e:	6842      	ldr	r2, [r0, #4]
 800b950:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800b954:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b956:	4604      	mov	r4, r0
 800b958:	460e      	mov	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b95a:	d10b      	bne.n	800b974 <SPI_EndRxTransaction+0x28>
 800b95c:	6882      	ldr	r2, [r0, #8]
 800b95e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b962:	d002      	beq.n	800b96a <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b964:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b968:	d104      	bne.n	800b974 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b96a:	6820      	ldr	r0, [r4, #0]
 800b96c:	6802      	ldr	r2, [r0, #0]
 800b96e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b972:	6002      	str	r2, [r0, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b974:	461a      	mov	r2, r3
 800b976:	4631      	mov	r1, r6
 800b978:	4620      	mov	r0, r4
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	f7ff ff94 	bl	800b8a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	4605      	mov	r5, r0
 800b984:	b128      	cbz	r0, 800b992 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b986:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b988:	f043 0320 	orr.w	r3, r3, #32
 800b98c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800b98e:	2503      	movs	r5, #3
 800b990:	e012      	b.n	800b9b8 <SPI_EndRxTransaction+0x6c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b992:	6862      	ldr	r2, [r4, #4]
 800b994:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b998:	d10e      	bne.n	800b9b8 <SPI_EndRxTransaction+0x6c>
 800b99a:	68a2      	ldr	r2, [r4, #8]
 800b99c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b9a0:	d002      	beq.n	800b9a8 <SPI_EndRxTransaction+0x5c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b9a6:	d107      	bne.n	800b9b8 <SPI_EndRxTransaction+0x6c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f7ff ff14 	bl	800b7dc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d1e6      	bne.n	800b986 <SPI_EndRxTransaction+0x3a>
    }
  }
  return HAL_OK;
}
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	b002      	add	sp, #8
 800b9bc:	bd70      	pop	{r4, r5, r6, pc}

0800b9be <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b9be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9c0:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9c2:	9201      	str	r2, [sp, #4]
{
 800b9c4:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9c6:	460a      	mov	r2, r1
 800b9c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800b9cc:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9ce:	f7ff ff05 	bl	800b7dc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800b9d2:	9b01      	ldr	r3, [sp, #4]
 800b9d4:	b128      	cbz	r0, 800b9e2 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b9d8:	f043 0320 	orr.w	r3, r3, #32
 800b9dc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b9de:	2003      	movs	r0, #3
 800b9e0:	e010      	b.n	800ba04 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	9301      	str	r3, [sp, #4]
 800b9ea:	f7ff ff5d 	bl	800b8a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800b9ee:	9b01      	ldr	r3, [sp, #4]
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d1f0      	bne.n	800b9d6 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f7ff feee 	bl	800b7dc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d1e8      	bne.n	800b9d6 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 800ba04:	b003      	add	sp, #12
 800ba06:	bd30      	pop	{r4, r5, pc}

0800ba08 <HAL_SPI_Init>:
{
 800ba08:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d063      	beq.n	800bad8 <HAL_SPI_Init+0xd0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ba10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d15c      	bne.n	800bad0 <HAL_SPI_Init+0xc8>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba16:	6842      	ldr	r2, [r0, #4]
 800ba18:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800ba1c:	d000      	beq.n	800ba20 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ba1e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba20:	2300      	movs	r3, #0
 800ba22:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba24:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800ba28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ba2c:	b923      	cbnz	r3, 800ba38 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800ba2e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7fc fd70 	bl	8008518 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800ba38:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba3a:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800ba42:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba44:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800ba48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba4c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba4e:	f04f 0300 	mov.w	r3, #0
 800ba52:	d843      	bhi.n	800badc <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ba54:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ba58:	d000      	beq.n	800ba5c <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba5a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ba5c:	6863      	ldr	r3, [r4, #4]
 800ba5e:	68a6      	ldr	r6, [r4, #8]
 800ba60:	69a1      	ldr	r1, [r4, #24]
 800ba62:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 800ba66:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800ba6a:	4333      	orrs	r3, r6
 800ba6c:	6926      	ldr	r6, [r4, #16]
 800ba6e:	f006 0602 	and.w	r6, r6, #2
 800ba72:	4333      	orrs	r3, r6
 800ba74:	6966      	ldr	r6, [r4, #20]
 800ba76:	f006 0601 	and.w	r6, r6, #1
 800ba7a:	4333      	orrs	r3, r6
 800ba7c:	f401 7600 	and.w	r6, r1, #512	; 0x200
 800ba80:	4333      	orrs	r3, r6
 800ba82:	69e6      	ldr	r6, [r4, #28]
 800ba84:	f006 0638 	and.w	r6, r6, #56	; 0x38
 800ba88:	4333      	orrs	r3, r6
 800ba8a:	6a26      	ldr	r6, [r4, #32]
 800ba8c:	f006 0680 	and.w	r6, r6, #128	; 0x80
 800ba90:	4333      	orrs	r3, r6
 800ba92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba94:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 800ba98:	4333      	orrs	r3, r6
 800ba9a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ba9c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ba9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baa0:	f006 0608 	and.w	r6, r6, #8
 800baa4:	f003 0310 	and.w	r3, r3, #16
 800baa8:	4333      	orrs	r3, r6
 800baaa:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 800baae:	0c09      	lsrs	r1, r1, #16
 800bab0:	4318      	orrs	r0, r3
 800bab2:	f001 0104 	and.w	r1, r1, #4
 800bab6:	4301      	orrs	r1, r0
 800bab8:	430d      	orrs	r5, r1
 800baba:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800babc:	69d3      	ldr	r3, [r2, #28]
 800babe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bac2:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bac4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800bac6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bac8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800baca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800bace:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bad0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bad6:	e7a3      	b.n	800ba20 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800bad8:	2001      	movs	r0, #1
 800bada:	e7f8      	b.n	800bace <HAL_SPI_Init+0xc6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800badc:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bade:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 800bae2:	e7b9      	b.n	800ba58 <HAL_SPI_Init+0x50>

0800bae4 <HAL_SPI_Transmit>:
{
 800bae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bae8:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800baea:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800baee:	2b01      	cmp	r3, #1
{
 800baf0:	4604      	mov	r4, r0
 800baf2:	460d      	mov	r5, r1
 800baf4:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800baf6:	f000 80bc 	beq.w	800bc72 <HAL_SPI_Transmit+0x18e>
 800bafa:	2301      	movs	r3, #1
 800bafc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800bb00:	f7fd f844 	bl	8008b8c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800bb04:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800bb08:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800bb0a:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800bb0c:	b2d8      	uxtb	r0, r3
 800bb0e:	f040 80ae 	bne.w	800bc6e <HAL_SPI_Transmit+0x18a>
  if ((pData == NULL) || (Size == 0U))
 800bb12:	2d00      	cmp	r5, #0
 800bb14:	d063      	beq.n	800bbde <HAL_SPI_Transmit+0xfa>
 800bb16:	f1b8 0f00 	cmp.w	r8, #0
 800bb1a:	d060      	beq.n	800bbde <HAL_SPI_Transmit+0xfa>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb22:	2300      	movs	r3, #0
 800bb24:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800bb26:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 800bb2a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bb2e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bb30:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bb34:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb38:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800bb3a:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bb3c:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800bb42:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb46:	d107      	bne.n	800bb58 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 800bb48:	6833      	ldr	r3, [r6, #0]
 800bb4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb4e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800bb50:	6833      	ldr	r3, [r6, #0]
 800bb52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb56:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb58:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb5a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb5c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800bb5e:	bf5e      	ittt	pl
 800bb60:	6833      	ldrpl	r3, [r6, #0]
 800bb62:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800bb66:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb68:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb6c:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb6e:	d942      	bls.n	800bbf6 <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb70:	b113      	cbz	r3, 800bb78 <HAL_SPI_Transmit+0x94>
 800bb72:	f1b8 0f01 	cmp.w	r8, #1
 800bb76:	d107      	bne.n	800bb88 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb78:	f835 3b02 	ldrh.w	r3, [r5], #2
 800bb7c:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb7e:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800bb80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bb82:	3b01      	subs	r3, #1
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800bb88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	b9a3      	cbnz	r3, 800bbb8 <HAL_SPI_Transmit+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb8e:	464a      	mov	r2, r9
 800bb90:	4639      	mov	r1, r7
 800bb92:	4620      	mov	r0, r4
 800bb94:	f7ff ff13 	bl	800b9be <SPI_EndRxTxTransaction>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d165      	bne.n	800bc68 <HAL_SPI_Transmit+0x184>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb9c:	68a3      	ldr	r3, [r4, #8]
 800bb9e:	b933      	cbnz	r3, 800bbae <HAL_SPI_Transmit+0xca>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	68da      	ldr	r2, [r3, #12]
 800bba6:	9201      	str	r2, [sp, #4]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbae:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800bbb0:	3800      	subs	r0, #0
 800bbb2:	bf18      	it	ne
 800bbb4:	2001      	movne	r0, #1
error:
 800bbb6:	e012      	b.n	800bbde <HAL_SPI_Transmit+0xfa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bbb8:	6822      	ldr	r2, [r4, #0]
 800bbba:	6893      	ldr	r3, [r2, #8]
 800bbbc:	079d      	lsls	r5, r3, #30
 800bbbe:	d505      	bpl.n	800bbcc <HAL_SPI_Transmit+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bbc2:	f833 1b02 	ldrh.w	r1, [r3], #2
 800bbc6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbc8:	63a3      	str	r3, [r4, #56]	; 0x38
 800bbca:	e7d9      	b.n	800bb80 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbcc:	f7fc ffde 	bl	8008b8c <HAL_GetTick>
 800bbd0:	eba0 0009 	sub.w	r0, r0, r9
 800bbd4:	42b8      	cmp	r0, r7
 800bbd6:	d30b      	bcc.n	800bbf0 <HAL_SPI_Transmit+0x10c>
 800bbd8:	1c78      	adds	r0, r7, #1
 800bbda:	d0d5      	beq.n	800bb88 <HAL_SPI_Transmit+0xa4>
          errorcode = HAL_TIMEOUT;
 800bbdc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800bbea:	b003      	add	sp, #12
 800bbec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbf0:	2f00      	cmp	r7, #0
 800bbf2:	d1c9      	bne.n	800bb88 <HAL_SPI_Transmit+0xa4>
 800bbf4:	e7f2      	b.n	800bbdc <HAL_SPI_Transmit+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bbf6:	b113      	cbz	r3, 800bbfe <HAL_SPI_Transmit+0x11a>
 800bbf8:	f1b8 0f01 	cmp.w	r8, #1
 800bbfc:	d113      	bne.n	800bc26 <HAL_SPI_Transmit+0x142>
      if (hspi->TxXferCount > 1U)
 800bbfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d906      	bls.n	800bc14 <HAL_SPI_Transmit+0x130>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc06:	f835 3b02 	ldrh.w	r3, [r5], #2
 800bc0a:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc0c:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bc0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bc10:	3b02      	subs	r3, #2
 800bc12:	e006      	b.n	800bc22 <HAL_SPI_Transmit+0x13e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bc14:	782b      	ldrb	r3, [r5, #0]
 800bc16:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 800bc18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800bc1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bc20:	3b01      	subs	r3, #1
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800bc26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d0af      	beq.n	800bb8e <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bc2e:	6822      	ldr	r2, [r4, #0]
 800bc30:	6893      	ldr	r3, [r2, #8]
 800bc32:	0799      	lsls	r1, r3, #30
 800bc34:	d50c      	bpl.n	800bc50 <HAL_SPI_Transmit+0x16c>
        if (hspi->TxXferCount > 1U)
 800bc36:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800bc3a:	b289      	uxth	r1, r1
 800bc3c:	2901      	cmp	r1, #1
 800bc3e:	d904      	bls.n	800bc4a <HAL_SPI_Transmit+0x166>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc40:	f833 1b02 	ldrh.w	r1, [r3], #2
 800bc44:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc46:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc48:	e7e1      	b.n	800bc0e <HAL_SPI_Transmit+0x12a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800bc4e:	e7e3      	b.n	800bc18 <HAL_SPI_Transmit+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc50:	f7fc ff9c 	bl	8008b8c <HAL_GetTick>
 800bc54:	eba0 0009 	sub.w	r0, r0, r9
 800bc58:	42b8      	cmp	r0, r7
 800bc5a:	d302      	bcc.n	800bc62 <HAL_SPI_Transmit+0x17e>
 800bc5c:	1c7b      	adds	r3, r7, #1
 800bc5e:	d0e2      	beq.n	800bc26 <HAL_SPI_Transmit+0x142>
 800bc60:	e7bc      	b.n	800bbdc <HAL_SPI_Transmit+0xf8>
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	d1df      	bne.n	800bc26 <HAL_SPI_Transmit+0x142>
 800bc66:	e7b9      	b.n	800bbdc <HAL_SPI_Transmit+0xf8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc68:	2320      	movs	r3, #32
 800bc6a:	6623      	str	r3, [r4, #96]	; 0x60
 800bc6c:	e796      	b.n	800bb9c <HAL_SPI_Transmit+0xb8>
    errorcode = HAL_BUSY;
 800bc6e:	2002      	movs	r0, #2
 800bc70:	e7b5      	b.n	800bbde <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800bc72:	2002      	movs	r0, #2
 800bc74:	e7b9      	b.n	800bbea <HAL_SPI_Transmit+0x106>

0800bc76 <HAL_SPI_TransmitReceive>:
{
 800bc76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc7a:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800bc7c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800bc80:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 800bc84:	2b01      	cmp	r3, #1
{
 800bc86:	4604      	mov	r4, r0
 800bc88:	460d      	mov	r5, r1
 800bc8a:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800bc8c:	f000 811d 	beq.w	800beca <HAL_SPI_TransmitReceive+0x254>
 800bc90:	2301      	movs	r3, #1
 800bc92:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800bc96:	f7fc ff79 	bl	8008b8c <HAL_GetTick>
  tmp_state           = hspi->State;
 800bc9a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800bc9e:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bca0:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 800bca2:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800bca4:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bca6:	d00a      	beq.n	800bcbe <HAL_SPI_TransmitReceive+0x48>
 800bca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcac:	f040 810b 	bne.w	800bec6 <HAL_SPI_TransmitReceive+0x250>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bcb0:	68a2      	ldr	r2, [r4, #8]
 800bcb2:	2a00      	cmp	r2, #0
 800bcb4:	f040 8107 	bne.w	800bec6 <HAL_SPI_TransmitReceive+0x250>
 800bcb8:	2904      	cmp	r1, #4
 800bcba:	f040 8104 	bne.w	800bec6 <HAL_SPI_TransmitReceive+0x250>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bcbe:	2d00      	cmp	r5, #0
 800bcc0:	d047      	beq.n	800bd52 <HAL_SPI_TransmitReceive+0xdc>
 800bcc2:	2e00      	cmp	r6, #0
 800bcc4:	d045      	beq.n	800bd52 <HAL_SPI_TransmitReceive+0xdc>
 800bcc6:	2f00      	cmp	r7, #0
 800bcc8:	d043      	beq.n	800bd52 <HAL_SPI_TransmitReceive+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bcca:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bcce:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bcd0:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bcd2:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bcd4:	bf1c      	itt	ne
 800bcd6:	2205      	movne	r2, #5
 800bcd8:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bcdc:	6826      	ldr	r6, [r4, #0]
  hspi->RxXferSize  = Size;
 800bcde:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bce2:	2200      	movs	r2, #0
 800bce4:	6622      	str	r2, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bce6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->RxXferCount = Size;
 800bcea:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800bcee:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bcf0:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bcf4:	63a5      	str	r5, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bcf6:	6872      	ldr	r2, [r6, #4]
  hspi->TxXferSize  = Size;
 800bcf8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bcfa:	d801      	bhi.n	800bd00 <HAL_SPI_TransmitReceive+0x8a>
 800bcfc:	2f01      	cmp	r7, #1
 800bcfe:	d02a      	beq.n	800bd56 <HAL_SPI_TransmitReceive+0xe0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bd00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bd04:	6072      	str	r2, [r6, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd06:	6832      	ldr	r2, [r6, #0]
 800bd08:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800bd0a:	bf5e      	ittt	pl
 800bd0c:	6832      	ldrpl	r2, [r6, #0]
 800bd0e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800bd12:	6032      	strpl	r2, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bd18:	d958      	bls.n	800bdcc <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd1a:	b10b      	cbz	r3, 800bd20 <HAL_SPI_TransmitReceive+0xaa>
 800bd1c:	2f01      	cmp	r7, #1
 800bd1e:	d107      	bne.n	800bd30 <HAL_SPI_TransmitReceive+0xba>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd20:	f835 3b02 	ldrh.w	r3, [r5], #2
 800bd24:	60f3      	str	r3, [r6, #12]
      hspi->TxXferCount--;
 800bd26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd28:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800bd30:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	b98b      	cbnz	r3, 800bd5c <HAL_SPI_TransmitReceive+0xe6>
 800bd38:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	b96b      	cbnz	r3, 800bd5c <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd40:	464a      	mov	r2, r9
 800bd42:	4641      	mov	r1, r8
 800bd44:	4620      	mov	r0, r4
 800bd46:	f7ff fe3a 	bl	800b9be <SPI_EndRxTxTransaction>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d036      	beq.n	800bdbc <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd4e:	2320      	movs	r3, #32
 800bd50:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bd52:	2001      	movs	r0, #1
 800bd54:	e032      	b.n	800bdbc <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bd56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bd5a:	e7d3      	b.n	800bd04 <HAL_SPI_TransmitReceive+0x8e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd5c:	6821      	ldr	r1, [r4, #0]
 800bd5e:	688b      	ldr	r3, [r1, #8]
 800bd60:	079a      	lsls	r2, r3, #30
 800bd62:	d50d      	bpl.n	800bd80 <HAL_SPI_TransmitReceive+0x10a>
 800bd64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	b153      	cbz	r3, 800bd80 <HAL_SPI_TransmitReceive+0x10a>
 800bd6a:	b14d      	cbz	r5, 800bd80 <HAL_SPI_TransmitReceive+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd6e:	f833 2b02 	ldrh.w	r2, [r3], #2
 800bd72:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd74:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800bd76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800bd7e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd80:	688a      	ldr	r2, [r1, #8]
 800bd82:	f012 0201 	ands.w	r2, r2, #1
 800bd86:	d00f      	beq.n	800bda8 <HAL_SPI_TransmitReceive+0x132>
 800bd88:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	b15b      	cbz	r3, 800bda8 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd92:	68c9      	ldr	r1, [r1, #12]
 800bd94:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd98:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800bd9a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800bda6:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bda8:	f7fc fef0 	bl	8008b8c <HAL_GetTick>
 800bdac:	eba0 0009 	sub.w	r0, r0, r9
 800bdb0:	4540      	cmp	r0, r8
 800bdb2:	d3be      	bcc.n	800bd32 <HAL_SPI_TransmitReceive+0xbc>
 800bdb4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bdb8:	d0bb      	beq.n	800bd32 <HAL_SPI_TransmitReceive+0xbc>
        errorcode = HAL_TIMEOUT;
 800bdba:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800bdc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdcc:	b10b      	cbz	r3, 800bdd2 <HAL_SPI_TransmitReceive+0x15c>
 800bdce:	2f01      	cmp	r7, #1
 800bdd0:	d10b      	bne.n	800bdea <HAL_SPI_TransmitReceive+0x174>
      if (hspi->TxXferCount > 1U)
 800bdd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d909      	bls.n	800bdee <HAL_SPI_TransmitReceive+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdda:	f835 3b02 	ldrh.w	r3, [r5], #2
 800bdde:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount -= 2U;
 800bde0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bde2:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bde4:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800bdea:	2501      	movs	r5, #1
 800bdec:	e049      	b.n	800be82 <HAL_SPI_TransmitReceive+0x20c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bdee:	782b      	ldrb	r3, [r5, #0]
 800bdf0:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr++;
 800bdf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800bdf8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	e7f3      	b.n	800bde6 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bdfe:	6822      	ldr	r2, [r4, #0]
 800be00:	6893      	ldr	r3, [r2, #8]
 800be02:	079b      	lsls	r3, r3, #30
 800be04:	d511      	bpl.n	800be2a <HAL_SPI_TransmitReceive+0x1b4>
 800be06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800be08:	b29b      	uxth	r3, r3
 800be0a:	b173      	cbz	r3, 800be2a <HAL_SPI_TransmitReceive+0x1b4>
 800be0c:	b16d      	cbz	r5, 800be2a <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 800be0e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800be12:	b289      	uxth	r1, r1
 800be14:	2901      	cmp	r1, #1
 800be16:	d93e      	bls.n	800be96 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be18:	f833 1b02 	ldrh.w	r1, [r3], #2
 800be1c:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800be1e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800be20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800be22:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800be24:	b29b      	uxth	r3, r3
 800be26:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800be28:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be2a:	6822      	ldr	r2, [r4, #0]
 800be2c:	6893      	ldr	r3, [r2, #8]
 800be2e:	f013 0301 	ands.w	r3, r3, #1
 800be32:	d01d      	beq.n	800be70 <HAL_SPI_TransmitReceive+0x1fa>
 800be34:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800be38:	b289      	uxth	r1, r1
 800be3a:	b1c9      	cbz	r1, 800be70 <HAL_SPI_TransmitReceive+0x1fa>
        if (hspi->RxXferCount > 1U)
 800be3c:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be40:	6c21      	ldr	r1, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 800be42:	b280      	uxth	r0, r0
 800be44:	2801      	cmp	r0, #1
 800be46:	d92e      	bls.n	800bea6 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be48:	68d0      	ldr	r0, [r2, #12]
 800be4a:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be4e:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800be50:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800be54:	3902      	subs	r1, #2
 800be56:	b289      	uxth	r1, r1
 800be58:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800be5c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800be60:	b289      	uxth	r1, r1
 800be62:	2901      	cmp	r1, #1
 800be64:	d803      	bhi.n	800be6e <HAL_SPI_TransmitReceive+0x1f8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be66:	6851      	ldr	r1, [r2, #4]
 800be68:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800be6c:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 800be6e:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800be70:	f7fc fe8c 	bl	8008b8c <HAL_GetTick>
 800be74:	eba0 0009 	sub.w	r0, r0, r9
 800be78:	4540      	cmp	r0, r8
 800be7a:	d320      	bcc.n	800bebe <HAL_SPI_TransmitReceive+0x248>
 800be7c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800be80:	d19b      	bne.n	800bdba <HAL_SPI_TransmitReceive+0x144>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800be84:	b29b      	uxth	r3, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1b9      	bne.n	800bdfe <HAL_SPI_TransmitReceive+0x188>
 800be8a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800be8e:	b29b      	uxth	r3, r3
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1b4      	bne.n	800bdfe <HAL_SPI_TransmitReceive+0x188>
 800be94:	e754      	b.n	800bd40 <HAL_SPI_TransmitReceive+0xca>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800be9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be9c:	3301      	adds	r3, #1
 800be9e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800bea0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800bea2:	3b01      	subs	r3, #1
 800bea4:	e7be      	b.n	800be24 <HAL_SPI_TransmitReceive+0x1ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bea6:	7b12      	ldrb	r2, [r2, #12]
 800bea8:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 800beaa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800beac:	3201      	adds	r2, #1
 800beae:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800beb0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800beb4:	3a01      	subs	r2, #1
 800beb6:	b292      	uxth	r2, r2
 800beb8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 800bebc:	e7d7      	b.n	800be6e <HAL_SPI_TransmitReceive+0x1f8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bebe:	f1b8 0f00 	cmp.w	r8, #0
 800bec2:	d1de      	bne.n	800be82 <HAL_SPI_TransmitReceive+0x20c>
 800bec4:	e779      	b.n	800bdba <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_BUSY;
 800bec6:	2002      	movs	r0, #2
 800bec8:	e778      	b.n	800bdbc <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 800beca:	2002      	movs	r0, #2
 800becc:	e77c      	b.n	800bdc8 <HAL_SPI_TransmitReceive+0x152>

0800bece <HAL_SPI_Receive>:
{
 800bece:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bed2:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bed4:	6843      	ldr	r3, [r0, #4]
 800bed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800beda:	4604      	mov	r4, r0
 800bedc:	4689      	mov	r9, r1
 800bede:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bee0:	d10c      	bne.n	800befc <HAL_SPI_Receive+0x2e>
 800bee2:	6883      	ldr	r3, [r0, #8]
 800bee4:	b953      	cbnz	r3, 800befc <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bee6:	2304      	movs	r3, #4
 800bee8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800beec:	4613      	mov	r3, r2
 800beee:	9600      	str	r6, [sp, #0]
 800bef0:	460a      	mov	r2, r1
 800bef2:	f7ff fec0 	bl	800bc76 <HAL_SPI_TransmitReceive>
}
 800bef6:	b003      	add	sp, #12
 800bef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800befc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	f000 809a 	beq.w	800c03a <HAL_SPI_Receive+0x16c>
 800bf06:	2301      	movs	r3, #1
 800bf08:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800bf0c:	f7fc fe3e 	bl	8008b8c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800bf10:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800bf14:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800bf16:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800bf18:	b2d8      	uxtb	r0, r3
 800bf1a:	f040 808c 	bne.w	800c036 <HAL_SPI_Receive+0x168>
  if ((pData == NULL) || (Size == 0U))
 800bf1e:	f1b9 0f00 	cmp.w	r9, #0
 800bf22:	d06f      	beq.n	800c004 <HAL_SPI_Receive+0x136>
 800bf24:	2f00      	cmp	r7, #0
 800bf26:	d06d      	beq.n	800c004 <HAL_SPI_Receive+0x136>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf28:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bf2a:	2304      	movs	r3, #4
 800bf2c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->TxISR       = NULL;
 800bf30:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf34:	6625      	str	r5, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bf36:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bf38:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 800bf3c:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800bf3e:	87e5      	strh	r5, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf40:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf42:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf44:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bf46:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf4a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf4e:	bf8c      	ite	hi
 800bf50:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf54:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
  hspi->RxXferSize  = Size;
 800bf58:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf5c:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf5e:	68a3      	ldr	r3, [r4, #8]
 800bf60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf64:	d107      	bne.n	800bf76 <HAL_SPI_Receive+0xa8>
    __HAL_SPI_DISABLE(hspi);
 800bf66:	682b      	ldr	r3, [r5, #0]
 800bf68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf6c:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf74:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf76:	682b      	ldr	r3, [r5, #0]
 800bf78:	065f      	lsls	r7, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800bf7a:	bf5e      	ittt	pl
 800bf7c:	682b      	ldrpl	r3, [r5, #0]
 800bf7e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800bf82:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800bf84:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800bf88:	d923      	bls.n	800bfd2 <HAL_SPI_Receive+0x104>
    while (hspi->RxXferCount > 0U)
 800bf8a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	b323      	cbz	r3, 800bfdc <HAL_SPI_Receive+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	689a      	ldr	r2, [r3, #8]
 800bf96:	07d2      	lsls	r2, r2, #31
 800bf98:	d53e      	bpl.n	800c018 <HAL_SPI_Receive+0x14a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf9e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfa2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800bfa4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800bfb0:	e7eb      	b.n	800bf8a <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bfb2:	6823      	ldr	r3, [r4, #0]
 800bfb4:	689a      	ldr	r2, [r3, #8]
 800bfb6:	07d0      	lsls	r0, r2, #31
 800bfb8:	d51b      	bpl.n	800bff2 <HAL_SPI_Receive+0x124>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bfba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bfbc:	7b1b      	ldrb	r3, [r3, #12]
 800bfbe:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bfc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800bfc6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800bfd2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1ea      	bne.n	800bfb2 <HAL_SPI_Receive+0xe4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfdc:	4642      	mov	r2, r8
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f7ff fcb3 	bl	800b94c <SPI_EndRxTransaction>
 800bfe6:	bb18      	cbnz	r0, 800c030 <HAL_SPI_Receive+0x162>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfe8:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800bfea:	3800      	subs	r0, #0
 800bfec:	bf18      	it	ne
 800bfee:	2001      	movne	r0, #1
error :
 800bff0:	e008      	b.n	800c004 <HAL_SPI_Receive+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bff2:	f7fc fdcb 	bl	8008b8c <HAL_GetTick>
 800bff6:	eba0 0008 	sub.w	r0, r0, r8
 800bffa:	42b0      	cmp	r0, r6
 800bffc:	d309      	bcc.n	800c012 <HAL_SPI_Receive+0x144>
 800bffe:	1c71      	adds	r1, r6, #1
 800c000:	d0e7      	beq.n	800bfd2 <HAL_SPI_Receive+0x104>
          errorcode = HAL_TIMEOUT;
 800c002:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800c004:	2301      	movs	r3, #1
 800c006:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c00a:	2300      	movs	r3, #0
 800c00c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800c010:	e771      	b.n	800bef6 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c012:	2e00      	cmp	r6, #0
 800c014:	d1dd      	bne.n	800bfd2 <HAL_SPI_Receive+0x104>
 800c016:	e7f4      	b.n	800c002 <HAL_SPI_Receive+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c018:	f7fc fdb8 	bl	8008b8c <HAL_GetTick>
 800c01c:	eba0 0008 	sub.w	r0, r0, r8
 800c020:	42b0      	cmp	r0, r6
 800c022:	d302      	bcc.n	800c02a <HAL_SPI_Receive+0x15c>
 800c024:	1c73      	adds	r3, r6, #1
 800c026:	d0b0      	beq.n	800bf8a <HAL_SPI_Receive+0xbc>
 800c028:	e7eb      	b.n	800c002 <HAL_SPI_Receive+0x134>
 800c02a:	2e00      	cmp	r6, #0
 800c02c:	d1ad      	bne.n	800bf8a <HAL_SPI_Receive+0xbc>
 800c02e:	e7e8      	b.n	800c002 <HAL_SPI_Receive+0x134>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c030:	2320      	movs	r3, #32
 800c032:	6623      	str	r3, [r4, #96]	; 0x60
 800c034:	e7d8      	b.n	800bfe8 <HAL_SPI_Receive+0x11a>
    errorcode = HAL_BUSY;
 800c036:	2002      	movs	r0, #2
 800c038:	e7e4      	b.n	800c004 <HAL_SPI_Receive+0x136>
  __HAL_LOCK(hspi);
 800c03a:	2002      	movs	r0, #2
 800c03c:	e75b      	b.n	800bef6 <HAL_SPI_Receive+0x28>
	...

0800c040 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c040:	6a03      	ldr	r3, [r0, #32]
 800c042:	f023 0301 	bic.w	r3, r3, #1
 800c046:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c048:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c04a:	6842      	ldr	r2, [r0, #4]
{
 800c04c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c04e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c050:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c052:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c056:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c058:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800c05a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800c05e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c060:	4d12      	ldr	r5, [pc, #72]	; (800c0ac <TIM_OC1_SetConfig+0x6c>)
 800c062:	42a8      	cmp	r0, r5
 800c064:	d006      	beq.n	800c074 <TIM_OC1_SetConfig+0x34>
 800c066:	4e12      	ldr	r6, [pc, #72]	; (800c0b0 <TIM_OC1_SetConfig+0x70>)
 800c068:	42b0      	cmp	r0, r6
 800c06a:	d003      	beq.n	800c074 <TIM_OC1_SetConfig+0x34>
 800c06c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c070:	42b0      	cmp	r0, r6
 800c072:	d114      	bne.n	800c09e <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c074:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800c076:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800c07a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c07c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800c07e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c082:	d006      	beq.n	800c092 <TIM_OC1_SetConfig+0x52>
 800c084:	4d0a      	ldr	r5, [pc, #40]	; (800c0b0 <TIM_OC1_SetConfig+0x70>)
 800c086:	42a8      	cmp	r0, r5
 800c088:	d003      	beq.n	800c092 <TIM_OC1_SetConfig+0x52>
 800c08a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c08e:	42a8      	cmp	r0, r5
 800c090:	d105      	bne.n	800c09e <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c092:	f422 7540 	bic.w	r5, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c096:	e9d1 2605 	ldrd	r2, r6, [r1, #20]
 800c09a:	4332      	orrs	r2, r6
 800c09c:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c09e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0a0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c0a2:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800c0a4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0a6:	6203      	str	r3, [r0, #32]
}
 800c0a8:	bd70      	pop	{r4, r5, r6, pc}
 800c0aa:	bf00      	nop
 800c0ac:	40014000 	.word	0x40014000
 800c0b0:	40014400 	.word	0x40014400

0800c0b4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c0b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d128      	bne.n	800c10e <HAL_TIM_Base_Start+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800c0bc:	2302      	movs	r3, #2
 800c0be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0c2:	6803      	ldr	r3, [r0, #0]
 800c0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0c8:	d016      	beq.n	800c0f8 <HAL_TIM_Base_Start+0x44>
 800c0ca:	4a12      	ldr	r2, [pc, #72]	; (800c114 <HAL_TIM_Base_Start+0x60>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d013      	beq.n	800c0f8 <HAL_TIM_Base_Start+0x44>
 800c0d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d00f      	beq.n	800c0f8 <HAL_TIM_Base_Start+0x44>
 800c0d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d00b      	beq.n	800c0f8 <HAL_TIM_Base_Start+0x44>
 800c0e0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d007      	beq.n	800c0f8 <HAL_TIM_Base_Start+0x44>
 800c0e8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d003      	beq.n	800c0f8 <HAL_TIM_Base_Start+0x44>
 800c0f0:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d104      	bne.n	800c102 <HAL_TIM_Base_Start+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0f8:	689a      	ldr	r2, [r3, #8]
 800c0fa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0fe:	2a06      	cmp	r2, #6
 800c100:	d003      	beq.n	800c10a <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	f042 0201 	orr.w	r2, r2, #1
 800c108:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c10a:	2000      	movs	r0, #0
}
 800c10c:	4770      	bx	lr
    return HAL_ERROR;
 800c10e:	2001      	movs	r0, #1
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	40000400 	.word	0x40000400

0800c118 <HAL_TIM_OC_MspInit>:
 800c118:	4770      	bx	lr

0800c11a <HAL_TIM_PWM_MspInit>:
 800c11a:	4770      	bx	lr

0800c11c <HAL_TIM_IC_MspInit>:
 800c11c:	4770      	bx	lr

0800c11e <HAL_TIM_Encoder_Start>:
{
 800c11e:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c120:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c124:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c128:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c12c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c130:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c132:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c134:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c136:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 800c138:	b9c9      	cbnz	r1, 800c16e <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c13a:	2a01      	cmp	r2, #1
 800c13c:	d146      	bne.n	800c1cc <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c13e:	2d01      	cmp	r5, #1
 800c140:	d146      	bne.n	800c1d0 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c142:	2302      	movs	r3, #2
 800c144:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c148:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c14c:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c14e:	6a1a      	ldr	r2, [r3, #32]
 800c150:	f022 0201 	bic.w	r2, r2, #1
 800c154:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c156:	6a1a      	ldr	r2, [r3, #32]
 800c158:	f042 0201 	orr.w	r2, r2, #1
 800c15c:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800c15e:	6802      	ldr	r2, [r0, #0]
 800c160:	6813      	ldr	r3, [r2, #0]
 800c162:	f043 0301 	orr.w	r3, r3, #1
 800c166:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 800c16e:	2904      	cmp	r1, #4
 800c170:	d111      	bne.n	800c196 <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c172:	2b01      	cmp	r3, #1
 800c174:	d12a      	bne.n	800c1cc <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c176:	2c01      	cmp	r4, #1
 800c178:	d1f7      	bne.n	800c16a <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c17a:	2302      	movs	r3, #2
 800c17c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c180:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c184:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800c186:	6a1a      	ldr	r2, [r3, #32]
 800c188:	f022 0210 	bic.w	r2, r2, #16
 800c18c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c18e:	6a1a      	ldr	r2, [r3, #32]
 800c190:	f042 0210 	orr.w	r2, r2, #16
 800c194:	e7e2      	b.n	800c15c <HAL_TIM_Encoder_Start+0x3e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c196:	2a01      	cmp	r2, #1
 800c198:	d118      	bne.n	800c1cc <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d118      	bne.n	800c1d0 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c19e:	2d01      	cmp	r5, #1
 800c1a0:	d1e3      	bne.n	800c16a <HAL_TIM_Encoder_Start+0x4c>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c1a2:	2c01      	cmp	r4, #1
 800c1a4:	d1e1      	bne.n	800c16a <HAL_TIM_Encoder_Start+0x4c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1ac:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1b0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1b4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c1b8:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800c1ba:	6a1a      	ldr	r2, [r3, #32]
 800c1bc:	f022 0201 	bic.w	r2, r2, #1
 800c1c0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c1c2:	6a1a      	ldr	r2, [r3, #32]
 800c1c4:	f042 0201 	orr.w	r2, r2, #1
 800c1c8:	621a      	str	r2, [r3, #32]
 800c1ca:	e7dc      	b.n	800c186 <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e7cc      	b.n	800c16a <HAL_TIM_Encoder_Start+0x4c>
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	e7ca      	b.n	800c16a <HAL_TIM_Encoder_Start+0x4c>

0800c1d4 <HAL_TIM_PeriodElapsedCallback>:
 800c1d4:	4770      	bx	lr

0800c1d6 <HAL_TIM_OC_DelayElapsedCallback>:
 800c1d6:	4770      	bx	lr

0800c1d8 <TIM_DMACaptureCplt>:
{
 800c1d8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1da:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c1dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c1de:	4282      	cmp	r2, r0
 800c1e0:	d10d      	bne.n	800c1fe <TIM_DMACaptureCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c1e6:	6992      	ldr	r2, [r2, #24]
 800c1e8:	b91a      	cbnz	r2, 800c1f2 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c1ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c1ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f7f5 fb76 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	7723      	strb	r3, [r4, #28]
}
 800c1fc:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c1fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c200:	4283      	cmp	r3, r0
 800c202:	d10a      	bne.n	800c21a <TIM_DMACaptureCplt+0x42>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c204:	2202      	movs	r2, #2
 800c206:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c208:	699b      	ldr	r3, [r3, #24]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1f1      	bne.n	800c1f2 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c20e:	2301      	movs	r3, #1
 800c210:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c218:	e7eb      	b.n	800c1f2 <TIM_DMACaptureCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c21a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c21c:	4283      	cmp	r3, r0
 800c21e:	d10a      	bne.n	800c236 <TIM_DMACaptureCplt+0x5e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c220:	2204      	movs	r2, #4
 800c222:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1e3      	bne.n	800c1f2 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c22a:	2301      	movs	r3, #1
 800c22c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c230:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c234:	e7dd      	b.n	800c1f2 <TIM_DMACaptureCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c236:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c238:	4283      	cmp	r3, r0
 800c23a:	d1da      	bne.n	800c1f2 <TIM_DMACaptureCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c23c:	2208      	movs	r2, #8
 800c23e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1d5      	bne.n	800c1f2 <TIM_DMACaptureCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c246:	2301      	movs	r3, #1
 800c248:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c24c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800c250:	e7cf      	b.n	800c1f2 <TIM_DMACaptureCplt+0x1a>

0800c252 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800c252:	4770      	bx	lr

0800c254 <TIM_DMACaptureHalfCplt>:
{
 800c254:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c256:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c25a:	4283      	cmp	r3, r0
 800c25c:	d107      	bne.n	800c26e <TIM_DMACaptureHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c25e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c260:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c262:	4620      	mov	r0, r4
 800c264:	f7ff fff5 	bl	800c252 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c268:	2300      	movs	r3, #0
 800c26a:	7723      	strb	r3, [r4, #28]
}
 800c26c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c26e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c270:	4283      	cmp	r3, r0
 800c272:	d101      	bne.n	800c278 <TIM_DMACaptureHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c274:	2302      	movs	r3, #2
 800c276:	e7f3      	b.n	800c260 <TIM_DMACaptureHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c278:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c27a:	4283      	cmp	r3, r0
 800c27c:	d101      	bne.n	800c282 <TIM_DMACaptureHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c27e:	2304      	movs	r3, #4
 800c280:	e7ee      	b.n	800c260 <TIM_DMACaptureHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c282:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c284:	4283      	cmp	r3, r0
 800c286:	d1ec      	bne.n	800c262 <TIM_DMACaptureHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c288:	2308      	movs	r3, #8
 800c28a:	e7e9      	b.n	800c260 <TIM_DMACaptureHalfCplt+0xc>

0800c28c <HAL_TIM_PWM_PulseFinishedCallback>:
 800c28c:	4770      	bx	lr

0800c28e <HAL_TIM_TriggerCallback>:
 800c28e:	4770      	bx	lr

0800c290 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c290:	6803      	ldr	r3, [r0, #0]
 800c292:	691a      	ldr	r2, [r3, #16]
 800c294:	0791      	lsls	r1, r2, #30
{
 800c296:	b510      	push	{r4, lr}
 800c298:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c29a:	d50e      	bpl.n	800c2ba <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	0792      	lsls	r2, r2, #30
 800c2a0:	d50b      	bpl.n	800c2ba <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c2a2:	f06f 0202 	mvn.w	r2, #2
 800c2a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	079b      	lsls	r3, r3, #30
 800c2b0:	d077      	beq.n	800c3a2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800c2b2:	f7f5 fb17 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	691a      	ldr	r2, [r3, #16]
 800c2be:	0750      	lsls	r0, r2, #29
 800c2c0:	d510      	bpl.n	800c2e4 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c2c2:	68da      	ldr	r2, [r3, #12]
 800c2c4:	0751      	lsls	r1, r2, #29
 800c2c6:	d50d      	bpl.n	800c2e4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c2c8:	f06f 0204 	mvn.w	r2, #4
 800c2cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800c2d8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2da:	d068      	beq.n	800c3ae <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800c2dc:	f7f5 fb02 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	691a      	ldr	r2, [r3, #16]
 800c2e8:	0712      	lsls	r2, r2, #28
 800c2ea:	d50f      	bpl.n	800c30c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2ec:	68da      	ldr	r2, [r3, #12]
 800c2ee:	0710      	lsls	r0, r2, #28
 800c2f0:	d50c      	bpl.n	800c30c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2f2:	f06f 0208 	mvn.w	r2, #8
 800c2f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2f8:	2204      	movs	r2, #4
 800c2fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2fc:	69db      	ldr	r3, [r3, #28]
 800c2fe:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800c300:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c302:	d05a      	beq.n	800c3ba <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c304:	f7f5 faee 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c308:	2300      	movs	r3, #0
 800c30a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	691a      	ldr	r2, [r3, #16]
 800c310:	06d2      	lsls	r2, r2, #27
 800c312:	d510      	bpl.n	800c336 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c314:	68da      	ldr	r2, [r3, #12]
 800c316:	06d0      	lsls	r0, r2, #27
 800c318:	d50d      	bpl.n	800c336 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c31a:	f06f 0210 	mvn.w	r2, #16
 800c31e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c320:	2208      	movs	r2, #8
 800c322:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c324:	69db      	ldr	r3, [r3, #28]
 800c326:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800c32a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c32c:	d04b      	beq.n	800c3c6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800c32e:	f7f5 fad9 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c332:	2300      	movs	r3, #0
 800c334:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	691a      	ldr	r2, [r3, #16]
 800c33a:	07d1      	lsls	r1, r2, #31
 800c33c:	d508      	bpl.n	800c350 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	07d2      	lsls	r2, r2, #31
 800c342:	d505      	bpl.n	800c350 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c344:	f06f 0201 	mvn.w	r2, #1
 800c348:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c34a:	4620      	mov	r0, r4
 800c34c:	f7ff ff42 	bl	800c1d4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	691a      	ldr	r2, [r3, #16]
 800c354:	0610      	lsls	r0, r2, #24
 800c356:	d508      	bpl.n	800c36a <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c358:	68da      	ldr	r2, [r3, #12]
 800c35a:	0611      	lsls	r1, r2, #24
 800c35c:	d505      	bpl.n	800c36a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c35e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c362:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c364:	4620      	mov	r0, r4
 800c366:	f000 fe50 	bl	800d00a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	691a      	ldr	r2, [r3, #16]
 800c36e:	0652      	lsls	r2, r2, #25
 800c370:	d508      	bpl.n	800c384 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c372:	68da      	ldr	r2, [r3, #12]
 800c374:	0650      	lsls	r0, r2, #25
 800c376:	d505      	bpl.n	800c384 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c37c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c37e:	4620      	mov	r0, r4
 800c380:	f7ff ff85 	bl	800c28e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	691a      	ldr	r2, [r3, #16]
 800c388:	0691      	lsls	r1, r2, #26
 800c38a:	d522      	bpl.n	800c3d2 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c38c:	68da      	ldr	r2, [r3, #12]
 800c38e:	0692      	lsls	r2, r2, #26
 800c390:	d51f      	bpl.n	800c3d2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c392:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c396:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c398:	611a      	str	r2, [r3, #16]
}
 800c39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c39e:	f000 be33 	b.w	800d008 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3a2:	f7ff ff18 	bl	800c1d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f7ff ff70 	bl	800c28c <HAL_TIM_PWM_PulseFinishedCallback>
 800c3ac:	e783      	b.n	800c2b6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3ae:	f7ff ff12 	bl	800c1d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f7ff ff6a 	bl	800c28c <HAL_TIM_PWM_PulseFinishedCallback>
 800c3b8:	e792      	b.n	800c2e0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3ba:	f7ff ff0c 	bl	800c1d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f7ff ff64 	bl	800c28c <HAL_TIM_PWM_PulseFinishedCallback>
 800c3c4:	e7a0      	b.n	800c308 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3c6:	f7ff ff06 	bl	800c1d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f7ff ff5e 	bl	800c28c <HAL_TIM_PWM_PulseFinishedCallback>
 800c3d0:	e7af      	b.n	800c332 <HAL_TIM_IRQHandler+0xa2>
}
 800c3d2:	bd10      	pop	{r4, pc}

0800c3d4 <HAL_TIM_ErrorCallback>:
 800c3d4:	4770      	bx	lr

0800c3d6 <TIM_DMAError>:
{
 800c3d6:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c3da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3dc:	4283      	cmp	r3, r0
 800c3de:	d109      	bne.n	800c3f4 <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c3e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f7ff fff3 	bl	800c3d4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	7723      	strb	r3, [r4, #28]
}
 800c3f2:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c3f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c3f6:	4283      	cmp	r3, r0
 800c3f8:	d105      	bne.n	800c406 <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c3fe:	2301      	movs	r3, #1
 800c400:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c404:	e7f0      	b.n	800c3e8 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c406:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c408:	4283      	cmp	r3, r0
 800c40a:	f04f 0301 	mov.w	r3, #1
 800c40e:	d104      	bne.n	800c41a <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c410:	2204      	movs	r2, #4
 800c412:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c414:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c418:	e7e6      	b.n	800c3e8 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c41a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c41c:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c41e:	bf03      	ittte	eq
 800c420:	2208      	moveq	r2, #8
 800c422:	7722      	strbeq	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c424:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->State = HAL_TIM_STATE_READY;
 800c428:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 800c42c:	e7dc      	b.n	800c3e8 <TIM_DMAError+0x12>
	...

0800c430 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c430:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800c434:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c436:	d00e      	beq.n	800c456 <TIM_Base_SetConfig+0x26>
 800c438:	4a2c      	ldr	r2, [pc, #176]	; (800c4ec <TIM_Base_SetConfig+0xbc>)
 800c43a:	4290      	cmp	r0, r2
 800c43c:	d00b      	beq.n	800c456 <TIM_Base_SetConfig+0x26>
 800c43e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c442:	4290      	cmp	r0, r2
 800c444:	d007      	beq.n	800c456 <TIM_Base_SetConfig+0x26>
 800c446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c44a:	4290      	cmp	r0, r2
 800c44c:	d003      	beq.n	800c456 <TIM_Base_SetConfig+0x26>
 800c44e:	f502 32a8 	add.w	r2, r2, #86016	; 0x15000
 800c452:	4290      	cmp	r0, r2
 800c454:	d112      	bne.n	800c47c <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 800c456:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c45c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 800c460:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c464:	d025      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c466:	4a21      	ldr	r2, [pc, #132]	; (800c4ec <TIM_Base_SetConfig+0xbc>)
 800c468:	4290      	cmp	r0, r2
 800c46a:	d022      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c46c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c470:	4290      	cmp	r0, r2
 800c472:	d01e      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c478:	4290      	cmp	r0, r2
 800c47a:	d01a      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c47c:	4a1c      	ldr	r2, [pc, #112]	; (800c4f0 <TIM_Base_SetConfig+0xc0>)
 800c47e:	4290      	cmp	r0, r2
 800c480:	d017      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c486:	4290      	cmp	r0, r2
 800c488:	d013      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c48a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c48e:	4290      	cmp	r0, r2
 800c490:	d00f      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c492:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800c496:	4290      	cmp	r0, r2
 800c498:	d00b      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c49a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c49e:	4290      	cmp	r0, r2
 800c4a0:	d007      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c4a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4a6:	4290      	cmp	r0, r2
 800c4a8:	d003      	beq.n	800c4b2 <TIM_Base_SetConfig+0x82>
 800c4aa:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800c4ae:	4290      	cmp	r0, r2
 800c4b0:	d103      	bne.n	800c4ba <TIM_Base_SetConfig+0x8a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4b2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4ba:	694a      	ldr	r2, [r1, #20]
 800c4bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c4c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4c4:	688b      	ldr	r3, [r1, #8]
 800c4c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c4c8:	680b      	ldr	r3, [r1, #0]
 800c4ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4cc:	4b09      	ldr	r3, [pc, #36]	; (800c4f4 <TIM_Base_SetConfig+0xc4>)
 800c4ce:	4298      	cmp	r0, r3
 800c4d0:	d007      	beq.n	800c4e2 <TIM_Base_SetConfig+0xb2>
 800c4d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4d6:	4298      	cmp	r0, r3
 800c4d8:	d003      	beq.n	800c4e2 <TIM_Base_SetConfig+0xb2>
 800c4da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4de:	4298      	cmp	r0, r3
 800c4e0:	d101      	bne.n	800c4e6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
 800c4e2:	690b      	ldr	r3, [r1, #16]
 800c4e4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	6143      	str	r3, [r0, #20]
}
 800c4ea:	4770      	bx	lr
 800c4ec:	40000400 	.word	0x40000400
 800c4f0:	40001800 	.word	0x40001800
 800c4f4:	40014000 	.word	0x40014000

0800c4f8 <HAL_TIM_Base_Init>:
{
 800c4f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	b330      	cbz	r0, 800c54c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c4fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c502:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c506:	b91b      	cbnz	r3, 800c510 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c508:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c50c:	f7fc f84e 	bl	80085ac <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c510:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c512:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c514:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c518:	1d21      	adds	r1, r4, #4
 800c51a:	f7ff ff89 	bl	800c430 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c51e:	2301      	movs	r3, #1
 800c520:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c524:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c526:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c52a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c52e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c532:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c536:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c53a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c53e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c542:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c546:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c54a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c54c:	2001      	movs	r0, #1
 800c54e:	e7fc      	b.n	800c54a <HAL_TIM_Base_Init+0x52>

0800c550 <HAL_TIM_OC_Init>:
{
 800c550:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c552:	4604      	mov	r4, r0
 800c554:	b330      	cbz	r0, 800c5a4 <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c556:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c55a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c55e:	b91b      	cbnz	r3, 800c568 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c560:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800c564:	f7ff fdd8 	bl	800c118 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c568:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c56a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c56c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c570:	1d21      	adds	r1, r4, #4
 800c572:	f7ff ff5d 	bl	800c430 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c576:	2301      	movs	r3, #1
 800c578:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c57c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c57e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c582:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c586:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c58a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c58e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c596:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c59a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c59e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c5a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c5a4:	2001      	movs	r0, #1
 800c5a6:	e7fc      	b.n	800c5a2 <HAL_TIM_OC_Init+0x52>

0800c5a8 <HAL_TIM_PWM_Init>:
{
 800c5a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	b330      	cbz	r0, 800c5fc <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c5ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c5b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c5b6:	b91b      	cbnz	r3, 800c5c0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c5b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c5bc:	f7ff fdad 	bl	800c11a <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5c2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5c8:	1d21      	adds	r1, r4, #4
 800c5ca:	f7ff ff31 	bl	800c430 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c5d4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c5da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c5de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c5e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c5ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c5f2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c5f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c5fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c5fc:	2001      	movs	r0, #1
 800c5fe:	e7fc      	b.n	800c5fa <HAL_TIM_PWM_Init+0x52>

0800c600 <HAL_TIM_IC_Init>:
{
 800c600:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c602:	4604      	mov	r4, r0
 800c604:	b330      	cbz	r0, 800c654 <HAL_TIM_IC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c606:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c60a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c60e:	b91b      	cbnz	r3, 800c618 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c610:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800c614:	f7ff fd82 	bl	800c11c <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c618:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c61a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c61c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c620:	1d21      	adds	r1, r4, #4
 800c622:	f7ff ff05 	bl	800c430 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c626:	2301      	movs	r3, #1
 800c628:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c62c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c62e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c632:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c636:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c63a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c63e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c646:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c64a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c64e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c652:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c654:	2001      	movs	r0, #1
 800c656:	e7fc      	b.n	800c652 <HAL_TIM_IC_Init+0x52>

0800c658 <HAL_TIM_Encoder_Init>:
{
 800c658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65a:	460d      	mov	r5, r1
  if (htim == NULL)
 800c65c:	4604      	mov	r4, r0
 800c65e:	2800      	cmp	r0, #0
 800c660:	d04d      	beq.n	800c6fe <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c662:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c666:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c66a:	b91b      	cbnz	r3, 800c674 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800c66c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800c670:	f7fc f8bc 	bl	80087ec <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c674:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800c676:	2302      	movs	r3, #2
 800c678:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c67c:	f851 0b04 	ldr.w	r0, [r1], #4
 800c680:	6883      	ldr	r3, [r0, #8]
 800c682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c686:	f023 0307 	bic.w	r3, r3, #7
 800c68a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c68c:	f7ff fed0 	bl	800c430 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800c690:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800c692:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 800c694:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800c696:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c698:	68a9      	ldr	r1, [r5, #8]
  tmpccer = htim->Instance->CCER;
 800c69a:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800c69c:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c69e:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c6a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c6a4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c6a8:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c6ac:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c6ae:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c6b2:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c6b4:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c6bc:	68e9      	ldr	r1, [r5, #12]
 800c6be:	430b      	orrs	r3, r1
 800c6c0:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c6c2:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c6c6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800c6ca:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c6cc:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c6ce:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c6d2:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 800c6d4:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c6d6:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800c6da:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c6dc:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6de:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800c6e0:	6207      	str	r7, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6e2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800c6e6:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c6e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c6ec:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c6f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c6f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800c6f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800c6fe:	2001      	movs	r0, #1
 800c700:	e7fc      	b.n	800c6fc <HAL_TIM_Encoder_Init+0xa4>
	...

0800c704 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c704:	6a03      	ldr	r3, [r0, #32]
 800c706:	f023 0310 	bic.w	r3, r3, #16
 800c70a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c70c:	6a03      	ldr	r3, [r0, #32]
{
 800c70e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800c710:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c712:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c714:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c716:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c71a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c71e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800c720:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c724:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c728:	4d0b      	ldr	r5, [pc, #44]	; (800c758 <TIM_OC2_SetConfig+0x54>)
 800c72a:	42a8      	cmp	r0, r5
 800c72c:	d007      	beq.n	800c73e <TIM_OC2_SetConfig+0x3a>
 800c72e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c732:	42a8      	cmp	r0, r5
 800c734:	d003      	beq.n	800c73e <TIM_OC2_SetConfig+0x3a>
 800c736:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c73a:	42a8      	cmp	r0, r5
 800c73c:	d106      	bne.n	800c74c <TIM_OC2_SetConfig+0x48>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c73e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c742:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c746:	4335      	orrs	r5, r6
 800c748:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800c74c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c74e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c750:	684a      	ldr	r2, [r1, #4]
 800c752:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800c754:	6203      	str	r3, [r0, #32]
}
 800c756:	bd70      	pop	{r4, r5, r6, pc}
 800c758:	40014000 	.word	0x40014000

0800c75c <HAL_TIM_OC_ConfigChannel>:
{
 800c75c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800c75e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c762:	2b01      	cmp	r3, #1
{
 800c764:	4605      	mov	r5, r0
 800c766:	460e      	mov	r6, r1
  __HAL_LOCK(htim);
 800c768:	d045      	beq.n	800c7f6 <HAL_TIM_OC_ConfigChannel+0x9a>
 800c76a:	2001      	movs	r0, #1
  switch (Channel)
 800c76c:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800c76e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 800c772:	d029      	beq.n	800c7c8 <HAL_TIM_OC_ConfigChannel+0x6c>
 800c774:	d806      	bhi.n	800c784 <HAL_TIM_OC_ConfigChannel+0x28>
 800c776:	b1f2      	cbz	r2, 800c7b6 <HAL_TIM_OC_ConfigChannel+0x5a>
 800c778:	2a04      	cmp	r2, #4
 800c77a:	d021      	beq.n	800c7c0 <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_UNLOCK(htim);
 800c77c:	2300      	movs	r3, #0
 800c77e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800c782:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800c784:	2a0c      	cmp	r2, #12
 800c786:	d1f9      	bne.n	800c77c <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c788:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c78a:	6834      	ldr	r4, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c78c:	6a1a      	ldr	r2, [r3, #32]
 800c78e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c792:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800c794:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800c796:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800c798:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c79a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c79e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7a2:	68b4      	ldr	r4, [r6, #8]
  TIMx->CR2 = tmpcr2;
 800c7a4:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800c7a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  TIMx->CCMR2 = tmpccmrx;
 800c7aa:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800c7ac:	6871      	ldr	r1, [r6, #4]
 800c7ae:	6419      	str	r1, [r3, #64]	; 0x40
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7b0:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 800c7b4:	e01d      	b.n	800c7f2 <HAL_TIM_OC_ConfigChannel+0x96>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c7b6:	6828      	ldr	r0, [r5, #0]
 800c7b8:	f7ff fc42 	bl	800c040 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800c7bc:	2000      	movs	r0, #0
}
 800c7be:	e7dd      	b.n	800c77c <HAL_TIM_OC_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7c0:	6828      	ldr	r0, [r5, #0]
 800c7c2:	f7ff ff9f 	bl	800c704 <TIM_OC2_SetConfig>
      break;
 800c7c6:	e7f9      	b.n	800c7bc <HAL_TIM_OC_ConfigChannel+0x60>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7c8:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 800c7ca:	6834      	ldr	r4, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7cc:	6a1a      	ldr	r2, [r3, #32]
 800c7ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7d2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800c7d4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800c7d6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800c7d8:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7da:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c7de:	4321      	orrs	r1, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7e0:	68b4      	ldr	r4, [r6, #8]
  TIMx->CR2 = tmpcr2;
 800c7e2:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 800c7e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 800c7e8:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800c7ea:	6871      	ldr	r1, [r6, #4]
 800c7ec:	63d9      	str	r1, [r3, #60]	; 0x3c
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c7ee:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  TIMx->CCER = tmpccer;
 800c7f2:	621a      	str	r2, [r3, #32]
 800c7f4:	e7e2      	b.n	800c7bc <HAL_TIM_OC_ConfigChannel+0x60>
  __HAL_LOCK(htim);
 800c7f6:	2002      	movs	r0, #2
 800c7f8:	e7c3      	b.n	800c782 <HAL_TIM_OC_ConfigChannel+0x26>

0800c7fa <HAL_TIM_PWM_ConfigChannel>:
{
 800c7fa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800c7fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c800:	2b01      	cmp	r3, #1
{
 800c802:	4606      	mov	r6, r0
 800c804:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800c806:	d078      	beq.n	800c8fa <HAL_TIM_PWM_ConfigChannel+0x100>
 800c808:	2001      	movs	r0, #1
  switch (Channel)
 800c80a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800c80c:	f886 003c 	strb.w	r0, [r6, #60]	; 0x3c
  switch (Channel)
 800c810:	d050      	beq.n	800c8b4 <HAL_TIM_PWM_ConfigChannel+0xba>
 800c812:	d806      	bhi.n	800c822 <HAL_TIM_PWM_ConfigChannel+0x28>
 800c814:	b35a      	cbz	r2, 800c86e <HAL_TIM_PWM_ConfigChannel+0x74>
 800c816:	2a04      	cmp	r2, #4
 800c818:	d03b      	beq.n	800c892 <HAL_TIM_PWM_ConfigChannel+0x98>
  __HAL_UNLOCK(htim);
 800c81a:	2300      	movs	r3, #0
 800c81c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
}
 800c820:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800c822:	2a0c      	cmp	r2, #12
 800c824:	d1f9      	bne.n	800c81a <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c826:	6833      	ldr	r3, [r6, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c828:	682c      	ldr	r4, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c82a:	6a1a      	ldr	r2, [r3, #32]
 800c82c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c830:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800c832:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800c834:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800c836:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c838:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c83c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c840:	68ac      	ldr	r4, [r5, #8]
  TIMx->CR2 = tmpcr2;
 800c842:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800c844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  TIMx->CCMR2 = tmpccmrx;
 800c848:	61d9      	str	r1, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c84a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 800c84e:	6869      	ldr	r1, [r5, #4]
 800c850:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800c852:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c854:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c856:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c85c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c85e:	69da      	ldr	r2, [r3, #28]
 800c860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c866:	69da      	ldr	r2, [r3, #28]
 800c868:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c86c:	e043      	b.n	800c8f6 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c86e:	6830      	ldr	r0, [r6, #0]
 800c870:	f7ff fbe6 	bl	800c040 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c874:	6833      	ldr	r3, [r6, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c876:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c878:	699a      	ldr	r2, [r3, #24]
 800c87a:	f042 0208 	orr.w	r2, r2, #8
 800c87e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c880:	699a      	ldr	r2, [r3, #24]
 800c882:	f022 0204 	bic.w	r2, r2, #4
 800c886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c888:	699a      	ldr	r2, [r3, #24]
 800c88a:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c88c:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800c88e:	2000      	movs	r0, #0
      break;
 800c890:	e7c3      	b.n	800c81a <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c892:	6830      	ldr	r0, [r6, #0]
 800c894:	f7ff ff36 	bl	800c704 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c898:	6833      	ldr	r3, [r6, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c89a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c89c:	699a      	ldr	r2, [r3, #24]
 800c89e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c8a4:	699a      	ldr	r2, [r3, #24]
 800c8a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8ac:	699a      	ldr	r2, [r3, #24]
 800c8ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c8b2:	e7eb      	b.n	800c88c <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c8b4:	6833      	ldr	r3, [r6, #0]
  tmpccmrx |= OC_Config->OCMode;
 800c8b6:	682c      	ldr	r4, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8b8:	6a1a      	ldr	r2, [r3, #32]
 800c8ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8be:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800c8c0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800c8c2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800c8c4:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8c6:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c8ca:	4321      	orrs	r1, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8cc:	68ac      	ldr	r4, [r5, #8]
  TIMx->CR2 = tmpcr2;
 800c8ce:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 800c8d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 800c8d4:	61d9      	str	r1, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8d6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 800c8da:	6869      	ldr	r1, [r5, #4]
 800c8dc:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800c8de:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8e0:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8e2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8e4:	f042 0208 	orr.w	r2, r2, #8
 800c8e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c8ea:	69da      	ldr	r2, [r3, #28]
 800c8ec:	f022 0204 	bic.w	r2, r2, #4
 800c8f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8f2:	69da      	ldr	r2, [r3, #28]
 800c8f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c8f6:	61da      	str	r2, [r3, #28]
 800c8f8:	e7c9      	b.n	800c88e <HAL_TIM_PWM_ConfigChannel+0x94>
  __HAL_LOCK(htim);
 800c8fa:	2002      	movs	r0, #2
 800c8fc:	e790      	b.n	800c820 <HAL_TIM_PWM_ConfigChannel+0x26>
	...

0800c900 <TIM_TI1_SetConfig>:
{
 800c900:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c902:	6a04      	ldr	r4, [r0, #32]
 800c904:	f024 0401 	bic.w	r4, r4, #1
 800c908:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c90a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpccmr1 = TIMx->CCMR1;
 800c90e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800c910:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c912:	d025      	beq.n	800c960 <TIM_TI1_SetConfig+0x60>
 800c914:	4e14      	ldr	r6, [pc, #80]	; (800c968 <TIM_TI1_SetConfig+0x68>)
 800c916:	42b0      	cmp	r0, r6
 800c918:	d022      	beq.n	800c960 <TIM_TI1_SetConfig+0x60>
 800c91a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c91e:	42b0      	cmp	r0, r6
 800c920:	d01e      	beq.n	800c960 <TIM_TI1_SetConfig+0x60>
 800c922:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c926:	42b0      	cmp	r0, r6
 800c928:	d01a      	beq.n	800c960 <TIM_TI1_SetConfig+0x60>
 800c92a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800c92e:	42b0      	cmp	r0, r6
 800c930:	d016      	beq.n	800c960 <TIM_TI1_SetConfig+0x60>
 800c932:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800c936:	42b0      	cmp	r0, r6
 800c938:	d012      	beq.n	800c960 <TIM_TI1_SetConfig+0x60>
 800c93a:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 800c93e:	42b0      	cmp	r0, r6
 800c940:	d00e      	beq.n	800c960 <TIM_TI1_SetConfig+0x60>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c942:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c946:	011b      	lsls	r3, r3, #4
 800c948:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c94a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c94e:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c950:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c954:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c958:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 800c95a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800c95c:	6201      	str	r1, [r0, #32]
}
 800c95e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c960:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800c964:	4322      	orrs	r2, r4
 800c966:	e7ee      	b.n	800c946 <TIM_TI1_SetConfig+0x46>
 800c968:	40000400 	.word	0x40000400

0800c96c <HAL_TIM_IC_ConfigChannel>:
{
 800c96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800c96e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c972:	2b01      	cmp	r3, #1
{
 800c974:	4605      	mov	r5, r0
 800c976:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 800c978:	f000 8089 	beq.w	800ca8e <HAL_TIM_IC_ConfigChannel+0x122>
 800c97c:	2001      	movs	r0, #1
 800c97e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800c982:	b99a      	cbnz	r2, 800c9ac <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI1_SetConfig(htim->Instance,
 800c984:	68cb      	ldr	r3, [r1, #12]
 800c986:	6828      	ldr	r0, [r5, #0]
 800c988:	e9d1 1200 	ldrd	r1, r2, [r1]
 800c98c:	f7ff ffb8 	bl	800c900 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c990:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c992:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c994:	699a      	ldr	r2, [r3, #24]
 800c996:	f022 020c 	bic.w	r2, r2, #12
 800c99a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c99c:	699a      	ldr	r2, [r3, #24]
 800c99e:	430a      	orrs	r2, r1
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c9a0:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800c9a2:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800c9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800c9ac:	2a04      	cmp	r2, #4
 800c9ae:	d123      	bne.n	800c9f8 <HAL_TIM_IC_ConfigChannel+0x8c>
    TIM_TI2_SetConfig(htim->Instance,
 800c9b0:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9b2:	6a1e      	ldr	r6, [r3, #32]
 800c9b4:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance,
 800c9b8:	e9d1 2700 	ldrd	r2, r7, [r1]
 800c9bc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9be:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9c0:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 800c9c2:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c9c4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c9c8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c9cc:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9ce:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c9d2:	b289      	uxth	r1, r1
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c9d4:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c9d6:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c9d8:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9dc:	f026 00a0 	bic.w	r0, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c9e0:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800c9e2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9e4:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c9e6:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c9e8:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c9ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c9ee:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c9f0:	699a      	ldr	r2, [r3, #24]
 800c9f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c9f6:	e7d3      	b.n	800c9a0 <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_3)
 800c9f8:	2a08      	cmp	r2, #8
 800c9fa:	d122      	bne.n	800ca42 <HAL_TIM_IC_ConfigChannel+0xd6>
    TIM_TI3_SetConfig(htim->Instance,
 800c9fc:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9fe:	6a1e      	ldr	r6, [r3, #32]
 800ca00:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800ca04:	e9d1 2000 	ldrd	r2, r0, [r1]
 800ca08:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca0a:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ca0c:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 800ca0e:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ca10:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800ca14:	4338      	orrs	r0, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ca16:	0109      	lsls	r1, r1, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ca18:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ca1c:	b2c9      	uxtb	r1, r1
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ca1e:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ca20:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ca22:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ca26:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ca2a:	4302      	orrs	r2, r0
  TIMx->CCMR2 = tmpccmr2;
 800ca2c:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 800ca2e:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ca30:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ca32:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ca34:	f022 020c 	bic.w	r2, r2, #12
 800ca38:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ca3a:	69da      	ldr	r2, [r3, #28]
 800ca3c:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ca3e:	61da      	str	r2, [r3, #28]
 800ca40:	e7af      	b.n	800c9a2 <HAL_TIM_IC_ConfigChannel+0x36>
  else if (Channel == TIM_CHANNEL_4)
 800ca42:	2a0c      	cmp	r2, #12
 800ca44:	d1ae      	bne.n	800c9a4 <HAL_TIM_IC_ConfigChannel+0x38>
    TIM_TI4_SetConfig(htim->Instance,
 800ca46:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca48:	6a1e      	ldr	r6, [r3, #32]
 800ca4a:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800ca4e:	e9d1 2700 	ldrd	r2, r7, [r1]
 800ca52:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca54:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ca56:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 800ca58:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ca5a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ca5e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ca62:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ca64:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ca68:	b289      	uxth	r1, r1
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ca6a:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ca6c:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ca6e:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ca72:	f426 4020 	bic.w	r0, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ca76:	4302      	orrs	r2, r0
  TIMx->CCMR2 = tmpccmr2;
 800ca78:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ca7a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ca7c:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ca7e:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ca80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ca84:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ca86:	69da      	ldr	r2, [r3, #28]
 800ca88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ca8c:	e7d7      	b.n	800ca3e <HAL_TIM_IC_ConfigChannel+0xd2>
  __HAL_LOCK(htim);
 800ca8e:	2002      	movs	r0, #2
 800ca90:	e78b      	b.n	800c9aa <HAL_TIM_IC_ConfigChannel+0x3e>

0800ca92 <TIM_ETR_SetConfig>:
{
 800ca92:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 800ca94:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca96:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca98:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca9c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800caa0:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 800caa2:	6083      	str	r3, [r0, #8]
}
 800caa4:	bd10      	pop	{r4, pc}

0800caa6 <HAL_TIM_ConfigClockSource>:
{
 800caa6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800caa8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800caac:	2b01      	cmp	r3, #1
{
 800caae:	4604      	mov	r4, r0
 800cab0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800cab4:	f000 8091 	beq.w	800cbda <HAL_TIM_ConfigClockSource+0x134>
 800cab8:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800caba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800cabe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800cac2:	6800      	ldr	r0, [r0, #0]
 800cac4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800caca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800cace:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800cad0:	680b      	ldr	r3, [r1, #0]
 800cad2:	2b60      	cmp	r3, #96	; 0x60
 800cad4:	d052      	beq.n	800cb7c <HAL_TIM_ConfigClockSource+0xd6>
 800cad6:	d833      	bhi.n	800cb40 <HAL_TIM_ConfigClockSource+0x9a>
 800cad8:	2b40      	cmp	r3, #64	; 0x40
 800cada:	d067      	beq.n	800cbac <HAL_TIM_ConfigClockSource+0x106>
 800cadc:	d816      	bhi.n	800cb0c <HAL_TIM_ConfigClockSource+0x66>
 800cade:	2b20      	cmp	r3, #32
 800cae0:	d00d      	beq.n	800cafe <HAL_TIM_ConfigClockSource+0x58>
 800cae2:	d80a      	bhi.n	800cafa <HAL_TIM_ConfigClockSource+0x54>
 800cae4:	f033 0110 	bics.w	r1, r3, #16
 800cae8:	d009      	beq.n	800cafe <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 800caea:	2301      	movs	r3, #1
 800caec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800caf0:	2300      	movs	r3, #0
 800caf2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800caf6:	4610      	mov	r0, r2
 800caf8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800cafa:	2b30      	cmp	r3, #48	; 0x30
 800cafc:	d1f5      	bne.n	800caea <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 800cafe:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb04:	4313      	orrs	r3, r2
 800cb06:	f043 0307 	orr.w	r3, r3, #7
 800cb0a:	e017      	b.n	800cb3c <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 800cb0c:	2b50      	cmp	r3, #80	; 0x50
 800cb0e:	d1ec      	bne.n	800caea <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb10:	684a      	ldr	r2, [r1, #4]
 800cb12:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800cb14:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb16:	6a05      	ldr	r5, [r0, #32]
 800cb18:	f025 0501 	bic.w	r5, r5, #1
 800cb1c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb1e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb20:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb28:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800cb2c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800cb2e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800cb30:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800cb32:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb38:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800cb3c:	6083      	str	r3, [r0, #8]
 800cb3e:	e011      	b.n	800cb64 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800cb40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb44:	d00e      	beq.n	800cb64 <HAL_TIM_ConfigClockSource+0xbe>
 800cb46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb4a:	d00d      	beq.n	800cb68 <HAL_TIM_ConfigClockSource+0xc2>
 800cb4c:	2b70      	cmp	r3, #112	; 0x70
 800cb4e:	d1cc      	bne.n	800caea <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800cb50:	68cb      	ldr	r3, [r1, #12]
 800cb52:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800cb56:	f7ff ff9c 	bl	800ca92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cb5a:	6822      	ldr	r2, [r4, #0]
 800cb5c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb62:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cb64:	2200      	movs	r2, #0
 800cb66:	e7c0      	b.n	800caea <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800cb68:	68cb      	ldr	r3, [r1, #12]
 800cb6a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800cb6e:	f7ff ff90 	bl	800ca92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb72:	6822      	ldr	r2, [r4, #0]
 800cb74:	6893      	ldr	r3, [r2, #8]
 800cb76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb7a:	e7f2      	b.n	800cb62 <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb7c:	684d      	ldr	r5, [r1, #4]
 800cb7e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb80:	6a01      	ldr	r1, [r0, #32]
 800cb82:	f021 0110 	bic.w	r1, r1, #16
 800cb86:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb88:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800cb8a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb8c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb98:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800cb9c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800cb9e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800cba0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cba6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800cbaa:	e7c7      	b.n	800cb3c <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbac:	684a      	ldr	r2, [r1, #4]
 800cbae:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800cbb0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbb2:	6a05      	ldr	r5, [r0, #32]
 800cbb4:	f025 0501 	bic.w	r5, r5, #1
 800cbb8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbba:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbbc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbc4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800cbc8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800cbca:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800cbcc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800cbce:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cbd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cbd4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800cbd8:	e7b0      	b.n	800cb3c <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800cbda:	461a      	mov	r2, r3
 800cbdc:	e78b      	b.n	800caf6 <HAL_TIM_ConfigClockSource+0x50>

0800cbde <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800cbde:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbe0:	f001 011f 	and.w	r1, r1, #31
{
 800cbe4:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbe6:	2401      	movs	r4, #1
 800cbe8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800cbea:	ea23 0304 	bic.w	r3, r3, r4
 800cbee:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbf0:	6a03      	ldr	r3, [r0, #32]
 800cbf2:	408a      	lsls	r2, r1
 800cbf4:	431a      	orrs	r2, r3
 800cbf6:	6202      	str	r2, [r0, #32]
}
 800cbf8:	bd10      	pop	{r4, pc}
	...

0800cbfc <HAL_TIM_OC_Start>:
{
 800cbfc:	b510      	push	{r4, lr}
 800cbfe:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc00:	b929      	cbnz	r1, 800cc0e <HAL_TIM_OC_Start+0x12>
 800cc02:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d01d      	beq.n	800cc46 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 800cc0a:	2001      	movs	r0, #1
}
 800cc0c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc0e:	2904      	cmp	r1, #4
 800cc10:	d107      	bne.n	800cc22 <HAL_TIM_OC_Start+0x26>
 800cc12:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d1f7      	bne.n	800cc0a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc1a:	2302      	movs	r3, #2
 800cc1c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800cc20:	e014      	b.n	800cc4c <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc22:	2908      	cmp	r1, #8
 800cc24:	d107      	bne.n	800cc36 <HAL_TIM_OC_Start+0x3a>
 800cc26:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d1ed      	bne.n	800cc0a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc2e:	2302      	movs	r3, #2
 800cc30:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800cc34:	e00a      	b.n	800cc4c <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d1e5      	bne.n	800cc0a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc3e:	2302      	movs	r3, #2
 800cc40:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800cc44:	e002      	b.n	800cc4c <HAL_TIM_OC_Start+0x50>
 800cc46:	2302      	movs	r3, #2
 800cc48:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	6820      	ldr	r0, [r4, #0]
 800cc50:	f7ff ffc5 	bl	800cbde <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc54:	6823      	ldr	r3, [r4, #0]
 800cc56:	4a1a      	ldr	r2, [pc, #104]	; (800ccc0 <HAL_TIM_OC_Start+0xc4>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d007      	beq.n	800cc6c <HAL_TIM_OC_Start+0x70>
 800cc5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d003      	beq.n	800cc6c <HAL_TIM_OC_Start+0x70>
 800cc64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d103      	bne.n	800cc74 <HAL_TIM_OC_Start+0x78>
    __HAL_TIM_MOE_ENABLE(htim);
 800cc6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc72:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc78:	d016      	beq.n	800cca8 <HAL_TIM_OC_Start+0xac>
 800cc7a:	4a12      	ldr	r2, [pc, #72]	; (800ccc4 <HAL_TIM_OC_Start+0xc8>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d013      	beq.n	800cca8 <HAL_TIM_OC_Start+0xac>
 800cc80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d00f      	beq.n	800cca8 <HAL_TIM_OC_Start+0xac>
 800cc88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00b      	beq.n	800cca8 <HAL_TIM_OC_Start+0xac>
 800cc90:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d007      	beq.n	800cca8 <HAL_TIM_OC_Start+0xac>
 800cc98:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d003      	beq.n	800cca8 <HAL_TIM_OC_Start+0xac>
 800cca0:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d104      	bne.n	800ccb2 <HAL_TIM_OC_Start+0xb6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cca8:	689a      	ldr	r2, [r3, #8]
 800ccaa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccae:	2a06      	cmp	r2, #6
 800ccb0:	d003      	beq.n	800ccba <HAL_TIM_OC_Start+0xbe>
    __HAL_TIM_ENABLE(htim);
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	f042 0201 	orr.w	r2, r2, #1
 800ccb8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ccba:	2000      	movs	r0, #0
 800ccbc:	e7a6      	b.n	800cc0c <HAL_TIM_OC_Start+0x10>
 800ccbe:	bf00      	nop
 800ccc0:	40014000 	.word	0x40014000
 800ccc4:	40000400 	.word	0x40000400

0800ccc8 <HAL_TIM_PWM_Start>:
 800ccc8:	f7ff bf98 	b.w	800cbfc <HAL_TIM_OC_Start>

0800cccc <HAL_TIM_IC_Start_IT>:
{
 800cccc:	b510      	push	{r4, lr}
 800ccce:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ccd0:	2900      	cmp	r1, #0
 800ccd2:	d13f      	bne.n	800cd54 <HAL_TIM_IC_Start_IT+0x88>
 800ccd4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ccd8:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ccdc:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800ccde:	2b01      	cmp	r3, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cce0:	b2c0      	uxtb	r0, r0
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800cce2:	d16e      	bne.n	800cdc2 <HAL_TIM_IC_Start_IT+0xf6>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800cce4:	2801      	cmp	r0, #1
 800cce6:	d16c      	bne.n	800cdc2 <HAL_TIM_IC_Start_IT+0xf6>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cce8:	2302      	movs	r3, #2
 800ccea:	2900      	cmp	r1, #0
 800ccec:	d148      	bne.n	800cd80 <HAL_TIM_IC_Start_IT+0xb4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ccee:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccf0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccf4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ccf8:	68d3      	ldr	r3, [r2, #12]
 800ccfa:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ccfe:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cd00:	6820      	ldr	r0, [r4, #0]
 800cd02:	2201      	movs	r2, #1
 800cd04:	f7ff ff6b 	bl	800cbde <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd08:	6823      	ldr	r3, [r4, #0]
 800cd0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd0e:	d016      	beq.n	800cd3e <HAL_TIM_IC_Start_IT+0x72>
 800cd10:	4a2d      	ldr	r2, [pc, #180]	; (800cdc8 <HAL_TIM_IC_Start_IT+0xfc>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d013      	beq.n	800cd3e <HAL_TIM_IC_Start_IT+0x72>
 800cd16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d00f      	beq.n	800cd3e <HAL_TIM_IC_Start_IT+0x72>
 800cd1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d00b      	beq.n	800cd3e <HAL_TIM_IC_Start_IT+0x72>
 800cd26:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d007      	beq.n	800cd3e <HAL_TIM_IC_Start_IT+0x72>
 800cd2e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d003      	beq.n	800cd3e <HAL_TIM_IC_Start_IT+0x72>
 800cd36:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d104      	bne.n	800cd48 <HAL_TIM_IC_Start_IT+0x7c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd3e:	689a      	ldr	r2, [r3, #8]
 800cd40:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd44:	2a06      	cmp	r2, #6
 800cd46:	d003      	beq.n	800cd50 <HAL_TIM_IC_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	f042 0201 	orr.w	r2, r2, #1
 800cd4e:	601a      	str	r2, [r3, #0]
 800cd50:	2000      	movs	r0, #0
 800cd52:	e037      	b.n	800cdc4 <HAL_TIM_IC_Start_IT+0xf8>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cd54:	2904      	cmp	r1, #4
 800cd56:	d105      	bne.n	800cd64 <HAL_TIM_IC_Start_IT+0x98>
 800cd58:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cd5c:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cd60:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cd62:	e7bc      	b.n	800ccde <HAL_TIM_IC_Start_IT+0x12>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cd64:	2908      	cmp	r1, #8
 800cd66:	bf0b      	itete	eq
 800cd68:	f890 3040 	ldrbeq.w	r3, [r0, #64]	; 0x40
 800cd6c:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cd70:	f890 0046 	ldrbeq.w	r0, [r0, #70]	; 0x46
 800cd74:	f894 0047 	ldrbne.w	r0, [r4, #71]	; 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cd78:	bf0c      	ite	eq
 800cd7a:	b2db      	uxtbeq	r3, r3
 800cd7c:	b2db      	uxtbne	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cd7e:	e7ae      	b.n	800ccde <HAL_TIM_IC_Start_IT+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd80:	2904      	cmp	r1, #4
 800cd82:	d108      	bne.n	800cd96 <HAL_TIM_IC_Start_IT+0xca>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cd84:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cd8e:	68d3      	ldr	r3, [r2, #12]
 800cd90:	f043 0304 	orr.w	r3, r3, #4
 800cd94:	e7b3      	b.n	800ccfe <HAL_TIM_IC_Start_IT+0x32>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd96:	2908      	cmp	r1, #8
 800cd98:	d108      	bne.n	800cdac <HAL_TIM_IC_Start_IT+0xe0>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cd9a:	6822      	ldr	r2, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cda0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cda4:	68d3      	ldr	r3, [r2, #12]
 800cda6:	f043 0308 	orr.w	r3, r3, #8
 800cdaa:	e7a8      	b.n	800ccfe <HAL_TIM_IC_Start_IT+0x32>
  switch (Channel)
 800cdac:	290c      	cmp	r1, #12
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdb2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  switch (Channel)
 800cdb6:	d105      	bne.n	800cdc4 <HAL_TIM_IC_Start_IT+0xf8>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cdb8:	6822      	ldr	r2, [r4, #0]
 800cdba:	68d3      	ldr	r3, [r2, #12]
 800cdbc:	f043 0310 	orr.w	r3, r3, #16
 800cdc0:	e79d      	b.n	800ccfe <HAL_TIM_IC_Start_IT+0x32>
    return HAL_ERROR;
 800cdc2:	2001      	movs	r0, #1
}
 800cdc4:	bd10      	pop	{r4, pc}
 800cdc6:	bf00      	nop
 800cdc8:	40000400 	.word	0x40000400

0800cdcc <HAL_TIM_IC_Start_DMA>:
{
 800cdcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cdd0:	4605      	mov	r5, r0
 800cdd2:	4617      	mov	r7, r2
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cdd4:	4688      	mov	r8, r1
 800cdd6:	b989      	cbnz	r1, 800cdfc <HAL_TIM_IC_Start_DMA+0x30>
 800cdd8:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cddc:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cde0:	b2f6      	uxtb	r6, r6
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800cde2:	2e02      	cmp	r6, #2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cde4:	b2c4      	uxtb	r4, r0
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800cde6:	f000 80cb 	beq.w	800cf80 <HAL_TIM_IC_Start_DMA+0x1b4>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800cdea:	2c02      	cmp	r4, #2
 800cdec:	d002      	beq.n	800cdf4 <HAL_TIM_IC_Start_DMA+0x28>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800cdee:	2e01      	cmp	r6, #1
 800cdf0:	d01a      	beq.n	800ce28 <HAL_TIM_IC_Start_DMA+0x5c>
    return HAL_ERROR;
 800cdf2:	2401      	movs	r4, #1
}
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	b002      	add	sp, #8
 800cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cdfc:	2904      	cmp	r1, #4
 800cdfe:	d105      	bne.n	800ce0c <HAL_TIM_IC_Start_DMA+0x40>
 800ce00:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ce04:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ce08:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ce0a:	e7ea      	b.n	800cde2 <HAL_TIM_IC_Start_DMA+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ce0c:	2908      	cmp	r1, #8
 800ce0e:	bf0b      	itete	eq
 800ce10:	f890 6040 	ldrbeq.w	r6, [r0, #64]	; 0x40
 800ce14:	f895 6041 	ldrbne.w	r6, [r5, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ce18:	f890 0046 	ldrbeq.w	r0, [r0, #70]	; 0x46
 800ce1c:	f895 0047 	ldrbne.w	r0, [r5, #71]	; 0x47
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ce20:	bf0c      	ite	eq
 800ce22:	b2f6      	uxtbeq	r6, r6
 800ce24:	b2f6      	uxtbne	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ce26:	e7dc      	b.n	800cde2 <HAL_TIM_IC_Start_DMA+0x16>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800ce28:	2c01      	cmp	r4, #1
 800ce2a:	d1e2      	bne.n	800cdf2 <HAL_TIM_IC_Start_DMA+0x26>
    if ((pData == NULL) && (Length > 0U))
 800ce2c:	b90f      	cbnz	r7, 800ce32 <HAL_TIM_IC_Start_DMA+0x66>
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1df      	bne.n	800cdf2 <HAL_TIM_IC_Start_DMA+0x26>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ce32:	2202      	movs	r2, #2
 800ce34:	f1b8 0f00 	cmp.w	r8, #0
 800ce38:	d13a      	bne.n	800ceb0 <HAL_TIM_IC_Start_DMA+0xe4>
 800ce3a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ce3e:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce42:	4641      	mov	r1, r8
 800ce44:	6828      	ldr	r0, [r5, #0]
 800ce46:	9301      	str	r3, [sp, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f7ff fec8 	bl	800cbde <TIM_CCxChannelCmd>
  switch (Channel)
 800ce4e:	f1b8 0f08 	cmp.w	r8, #8
 800ce52:	6829      	ldr	r1, [r5, #0]
 800ce54:	9b01      	ldr	r3, [sp, #4]
 800ce56:	d07f      	beq.n	800cf58 <HAL_TIM_IC_Start_DMA+0x18c>
 800ce58:	d83e      	bhi.n	800ced8 <HAL_TIM_IC_Start_DMA+0x10c>
 800ce5a:	f1b8 0f00 	cmp.w	r8, #0
 800ce5e:	d052      	beq.n	800cf06 <HAL_TIM_IC_Start_DMA+0x13a>
 800ce60:	f1b8 0f04 	cmp.w	r8, #4
 800ce64:	d064      	beq.n	800cf30 <HAL_TIM_IC_Start_DMA+0x164>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce66:	682b      	ldr	r3, [r5, #0]
 800ce68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce6c:	d016      	beq.n	800ce9c <HAL_TIM_IC_Start_DMA+0xd0>
 800ce6e:	4a45      	ldr	r2, [pc, #276]	; (800cf84 <HAL_TIM_IC_Start_DMA+0x1b8>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d013      	beq.n	800ce9c <HAL_TIM_IC_Start_DMA+0xd0>
 800ce74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d00f      	beq.n	800ce9c <HAL_TIM_IC_Start_DMA+0xd0>
 800ce7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d00b      	beq.n	800ce9c <HAL_TIM_IC_Start_DMA+0xd0>
 800ce84:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d007      	beq.n	800ce9c <HAL_TIM_IC_Start_DMA+0xd0>
 800ce8c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d003      	beq.n	800ce9c <HAL_TIM_IC_Start_DMA+0xd0>
 800ce94:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d104      	bne.n	800cea6 <HAL_TIM_IC_Start_DMA+0xda>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce9c:	689a      	ldr	r2, [r3, #8]
 800ce9e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cea2:	2a06      	cmp	r2, #6
 800cea4:	d0a6      	beq.n	800cdf4 <HAL_TIM_IC_Start_DMA+0x28>
    __HAL_TIM_ENABLE(htim);
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	f042 0201 	orr.w	r2, r2, #1
 800ceac:	601a      	str	r2, [r3, #0]
 800ceae:	e7a1      	b.n	800cdf4 <HAL_TIM_IC_Start_DMA+0x28>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ceb0:	f1b8 0f04 	cmp.w	r8, #4
 800ceb4:	d104      	bne.n	800cec0 <HAL_TIM_IC_Start_DMA+0xf4>
 800ceb6:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ceba:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
 800cebe:	e7c0      	b.n	800ce42 <HAL_TIM_IC_Start_DMA+0x76>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cec0:	f1b8 0f08 	cmp.w	r8, #8
 800cec4:	bf0b      	itete	eq
 800cec6:	f885 2040 	strbeq.w	r2, [r5, #64]	; 0x40
 800ceca:	f885 2041 	strbne.w	r2, [r5, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cece:	f885 2046 	strbeq.w	r2, [r5, #70]	; 0x46
 800ced2:	f885 2047 	strbne.w	r2, [r5, #71]	; 0x47
 800ced6:	e7b4      	b.n	800ce42 <HAL_TIM_IC_Start_DMA+0x76>
  switch (Channel)
 800ced8:	f1b8 0f0c 	cmp.w	r8, #12
 800cedc:	d1c3      	bne.n	800ce66 <HAL_TIM_IC_Start_DMA+0x9a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800cede:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800cee0:	4a29      	ldr	r2, [pc, #164]	; (800cf88 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800cee2:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cee4:	4a29      	ldr	r2, [pc, #164]	; (800cf8c <HAL_TIM_IC_Start_DMA+0x1c0>)
 800cee6:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800cee8:	4a29      	ldr	r2, [pc, #164]	; (800cf90 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800ceea:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800ceec:	3140      	adds	r1, #64	; 0x40
 800ceee:	463a      	mov	r2, r7
 800cef0:	f7fc fa79 	bl	80093e6 <HAL_DMA_Start_IT>
 800cef4:	4604      	mov	r4, r0
 800cef6:	2800      	cmp	r0, #0
 800cef8:	f47f af7b 	bne.w	800cdf2 <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800cefc:	682a      	ldr	r2, [r5, #0]
 800cefe:	68d3      	ldr	r3, [r2, #12]
 800cf00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cf04:	e012      	b.n	800cf2c <HAL_TIM_IC_Start_DMA+0x160>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800cf06:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800cf08:	4a1f      	ldr	r2, [pc, #124]	; (800cf88 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800cf0a:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cf0c:	4a1f      	ldr	r2, [pc, #124]	; (800cf8c <HAL_TIM_IC_Start_DMA+0x1c0>)
 800cf0e:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800cf10:	4a1f      	ldr	r2, [pc, #124]	; (800cf90 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800cf12:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800cf14:	3134      	adds	r1, #52	; 0x34
 800cf16:	463a      	mov	r2, r7
 800cf18:	f7fc fa65 	bl	80093e6 <HAL_DMA_Start_IT>
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	f47f af67 	bne.w	800cdf2 <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800cf24:	682a      	ldr	r2, [r5, #0]
 800cf26:	68d3      	ldr	r3, [r2, #12]
 800cf28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800cf2c:	60d3      	str	r3, [r2, #12]
      break;
 800cf2e:	e79a      	b.n	800ce66 <HAL_TIM_IC_Start_DMA+0x9a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800cf30:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800cf32:	4a15      	ldr	r2, [pc, #84]	; (800cf88 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800cf34:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cf36:	4a15      	ldr	r2, [pc, #84]	; (800cf8c <HAL_TIM_IC_Start_DMA+0x1c0>)
 800cf38:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800cf3a:	4a15      	ldr	r2, [pc, #84]	; (800cf90 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800cf3c:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800cf3e:	3138      	adds	r1, #56	; 0x38
 800cf40:	463a      	mov	r2, r7
 800cf42:	f7fc fa50 	bl	80093e6 <HAL_DMA_Start_IT>
 800cf46:	4604      	mov	r4, r0
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	f47f af52 	bne.w	800cdf2 <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800cf4e:	682a      	ldr	r2, [r5, #0]
 800cf50:	68d3      	ldr	r3, [r2, #12]
 800cf52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cf56:	e7e9      	b.n	800cf2c <HAL_TIM_IC_Start_DMA+0x160>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800cf58:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800cf5a:	4a0b      	ldr	r2, [pc, #44]	; (800cf88 <HAL_TIM_IC_Start_DMA+0x1bc>)
 800cf5c:	6282      	str	r2, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cf5e:	4a0b      	ldr	r2, [pc, #44]	; (800cf8c <HAL_TIM_IC_Start_DMA+0x1c0>)
 800cf60:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800cf62:	4a0b      	ldr	r2, [pc, #44]	; (800cf90 <HAL_TIM_IC_Start_DMA+0x1c4>)
 800cf64:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800cf66:	313c      	adds	r1, #60	; 0x3c
 800cf68:	463a      	mov	r2, r7
 800cf6a:	f7fc fa3c 	bl	80093e6 <HAL_DMA_Start_IT>
 800cf6e:	4604      	mov	r4, r0
 800cf70:	2800      	cmp	r0, #0
 800cf72:	f47f af3e 	bne.w	800cdf2 <HAL_TIM_IC_Start_DMA+0x26>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800cf76:	682a      	ldr	r2, [r5, #0]
 800cf78:	68d3      	ldr	r3, [r2, #12]
 800cf7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cf7e:	e7d5      	b.n	800cf2c <HAL_TIM_IC_Start_DMA+0x160>
    return HAL_BUSY;
 800cf80:	4634      	mov	r4, r6
 800cf82:	e737      	b.n	800cdf4 <HAL_TIM_IC_Start_DMA+0x28>
 800cf84:	40000400 	.word	0x40000400
 800cf88:	0800c1d9 	.word	0x0800c1d9
 800cf8c:	0800c255 	.word	0x0800c255
 800cf90:	0800c3d7 	.word	0x0800c3d7

0800cf94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf94:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	f04f 0302 	mov.w	r3, #2
 800cfa0:	d02e      	beq.n	800d000 <HAL_TIMEx_MasterConfigSynchronization+0x6c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfa2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfa6:	6803      	ldr	r3, [r0, #0]
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfa8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800cfaa:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800cfac:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfae:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfb2:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800cfb8:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfba:	d016      	beq.n	800cfea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cfbc:	4c11      	ldr	r4, [pc, #68]	; (800d004 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800cfbe:	42a3      	cmp	r3, r4
 800cfc0:	d013      	beq.n	800cfea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cfc2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cfc6:	42a3      	cmp	r3, r4
 800cfc8:	d00f      	beq.n	800cfea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cfca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cfce:	42a3      	cmp	r3, r4
 800cfd0:	d00b      	beq.n	800cfea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cfd2:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800cfd6:	42a3      	cmp	r3, r4
 800cfd8:	d007      	beq.n	800cfea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cfda:	f504 3494 	add.w	r4, r4, #75776	; 0x12800
 800cfde:	42a3      	cmp	r3, r4
 800cfe0:	d003      	beq.n	800cfea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cfe2:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800cfe6:	42a3      	cmp	r3, r4
 800cfe8:	d104      	bne.n	800cff4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfea:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cff0:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cff4:	2301      	movs	r3, #1
 800cff6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cffa:	2300      	movs	r3, #0
 800cffc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800d000:	4618      	mov	r0, r3

  return HAL_OK;
}
 800d002:	bd30      	pop	{r4, r5, pc}
 800d004:	40000400 	.word	0x40000400

0800d008 <HAL_TIMEx_CommutCallback>:
 800d008:	4770      	bx	lr

0800d00a <HAL_TIMEx_BreakCallback>:
 800d00a:	4770      	bx	lr

0800d00c <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d00c:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d00e:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800d012:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800d016:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	4770      	bx	lr

0800d01e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d01e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800d022:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d026:	045b      	lsls	r3, r3, #17
 800d028:	0c5b      	lsrs	r3, r3, #17
 800d02a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800d02e:	2000      	movs	r0, #0
 800d030:	4770      	bx	lr

0800d032 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d032:	b084      	sub	sp, #16
 800d034:	b510      	push	{r4, lr}
 800d036:	ac03      	add	r4, sp, #12
 800d038:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800d03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d040:	2301      	movs	r3, #1
 800d042:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 800d046:	2300      	movs	r3, #0
 800d048:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800d04c:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 800d04e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800d052:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800d056:	4618      	mov	r0, r3
 800d058:	4770      	bx	lr
	...

0800d05c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d05c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d05e:	f891 e000 	ldrb.w	lr, [r1]

  /* initialize Endpoint */
  switch (ep->type)
 800d062:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d064:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 800d068:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800d06c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d070:	0412      	lsls	r2, r2, #16
 800d072:	4673      	mov	r3, lr
 800d074:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 800d076:	2d03      	cmp	r5, #3
 800d078:	d84c      	bhi.n	800d114 <USB_ActivateEndpoint+0xb8>
 800d07a:	e8df f005 	tbb	[pc, r5]
 800d07e:	4802      	.short	0x4802
 800d080:	4446      	.short	0x4446
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 800d086:	462c      	mov	r4, r5
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d088:	f248 0780 	movw	r7, #32896	; 0x8080
 800d08c:	433a      	orrs	r2, r7
 800d08e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d092:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 800d096:	f8df c26c 	ldr.w	ip, [pc, #620]	; 800d304 <USB_ActivateEndpoint+0x2a8>
 800d09a:	b2b6      	uxth	r6, r6
 800d09c:	ea06 060c 	and.w	r6, r6, ip
 800d0a0:	ea46 060e 	orr.w	r6, r6, lr
 800d0a4:	433e      	orrs	r6, r7
 800d0a6:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]

  if (ep->doublebuffer == 0U)
 800d0aa:	7b0a      	ldrb	r2, [r1, #12]
 800d0ac:	eb00 1e0e 	add.w	lr, r0, lr, lsl #4
 800d0b0:	2a00      	cmp	r2, #0
 800d0b2:	d17c      	bne.n	800d1ae <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d0b4:	88ca      	ldrh	r2, [r1, #6]
    if (ep->is_in != 0U)
 800d0b6:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d0b8:	0852      	lsrs	r2, r2, #1
 800d0ba:	0052      	lsls	r2, r2, #1
    if (ep->is_in != 0U)
 800d0bc:	b366      	cbz	r6, 800d118 <USB_ActivateEndpoint+0xbc>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d0be:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800d0c2:	fa1e fe81 	uxtah	lr, lr, r1
 800d0c6:	f8ae 2400 	strh.w	r2, [lr, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d0ce:	0656      	lsls	r6, r2, #25
 800d0d0:	d50a      	bpl.n	800d0e8 <USB_ActivateEndpoint+0x8c>
 800d0d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d0d6:	b292      	uxth	r2, r2
 800d0d8:	ea02 020c 	and.w	r2, r2, ip
 800d0dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d0e0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d0e4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d0e8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d0ec:	4983      	ldr	r1, [pc, #524]	; (800d2fc <USB_ActivateEndpoint+0x2a0>)
 800d0ee:	b292      	uxth	r2, r2
      if (ep->type != EP_TYPE_ISOC)
 800d0f0:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d0f2:	ea02 0201 	and.w	r2, r2, r1
      if (ep->type != EP_TYPE_ISOC)
 800d0f6:	d001      	beq.n	800d0fc <USB_ActivateEndpoint+0xa0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d0f8:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d0fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d104:	e0b1      	b.n	800d26a <USB_ActivateEndpoint+0x20e>
      wEpRegVal |= USB_EP_INTERRUPT;
 800d106:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800d10a:	2400      	movs	r4, #0
      break;
 800d10c:	e7bc      	b.n	800d088 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d10e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 800d112:	e7fa      	b.n	800d10a <USB_ActivateEndpoint+0xae>
  switch (ep->type)
 800d114:	2401      	movs	r4, #1
 800d116:	e7b7      	b.n	800d088 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d118:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d11c:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d11e:	fa1e f585 	uxtah	r5, lr, r5
 800d122:	f8a5 2408 	strh.w	r2, [r5, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d126:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800d12a:	fa1e fe82 	uxtah	lr, lr, r2
 800d12e:	bb69      	cbnz	r1, 800d18c <USB_ActivateEndpoint+0x130>
 800d130:	f8be 240c 	ldrh.w	r2, [lr, #1036]	; 0x40c
 800d134:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d138:	0412      	lsls	r2, r2, #16
 800d13a:	0c12      	lsrs	r2, r2, #16
 800d13c:	f8ae 240c 	strh.w	r2, [lr, #1036]	; 0x40c
 800d140:	f8be 240c 	ldrh.w	r2, [lr, #1036]	; 0x40c
 800d144:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d148:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d14c:	b292      	uxth	r2, r2
 800d14e:	f8ae 240c 	strh.w	r2, [lr, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d152:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d156:	0457      	lsls	r7, r2, #17
 800d158:	d50d      	bpl.n	800d176 <USB_ActivateEndpoint+0x11a>
 800d15a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d15e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d162:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d166:	0412      	lsls	r2, r2, #16
 800d168:	0c12      	lsrs	r2, r2, #16
 800d16a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d16e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d172:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d176:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d17a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d17e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d182:	0412      	lsls	r2, r2, #16
 800d184:	0c12      	lsrs	r2, r2, #16
 800d186:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800d18a:	e7b7      	b.n	800d0fc <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d18c:	293e      	cmp	r1, #62	; 0x3e
 800d18e:	d805      	bhi.n	800d19c <USB_ActivateEndpoint+0x140>
 800d190:	084a      	lsrs	r2, r1, #1
 800d192:	07c9      	lsls	r1, r1, #31
 800d194:	bf48      	it	mi
 800d196:	3201      	addmi	r2, #1
 800d198:	0292      	lsls	r2, r2, #10
 800d19a:	e7d7      	b.n	800d14c <USB_ActivateEndpoint+0xf0>
 800d19c:	094d      	lsrs	r5, r1, #5
 800d19e:	06ca      	lsls	r2, r1, #27
 800d1a0:	4a57      	ldr	r2, [pc, #348]	; (800d300 <USB_ActivateEndpoint+0x2a4>)
 800d1a2:	bf08      	it	eq
 800d1a4:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800d1a8:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800d1ac:	e7ce      	b.n	800d14c <USB_ActivateEndpoint+0xf0>
    if (ep->type == EP_TYPE_BULK)
 800d1ae:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d1b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 800d1b4:	d15d      	bne.n	800d272 <USB_ActivateEndpoint+0x216>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d1b6:	b292      	uxth	r2, r2
 800d1b8:	ea02 020c 	and.w	r2, r2, ip
 800d1bc:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800d1c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d1c4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d1c8:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800d1cc:	890a      	ldrh	r2, [r1, #8]
 800d1ce:	fa1e f686 	uxtah	r6, lr, r6
 800d1d2:	0852      	lsrs	r2, r2, #1
 800d1d4:	0052      	lsls	r2, r2, #1
 800d1d6:	f8a6 2400 	strh.w	r2, [r6, #1024]	; 0x400
 800d1da:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800d1de:	fa1e fe82 	uxtah	lr, lr, r2
 800d1e2:	894a      	ldrh	r2, [r1, #10]
 800d1e4:	0852      	lsrs	r2, r2, #1
 800d1e6:	0052      	lsls	r2, r2, #1
 800d1e8:	f8ae 2408 	strh.w	r2, [lr, #1032]	; 0x408
    if (ep->is_in == 0U)
 800d1ec:	784a      	ldrb	r2, [r1, #1]
 800d1ee:	2a00      	cmp	r2, #0
 800d1f0:	d147      	bne.n	800d282 <USB_ActivateEndpoint+0x226>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d1f2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d1f6:	0456      	lsls	r6, r2, #17
 800d1f8:	d50d      	bpl.n	800d216 <USB_ActivateEndpoint+0x1ba>
 800d1fa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d1fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d202:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d206:	0412      	lsls	r2, r2, #16
 800d208:	0c12      	lsrs	r2, r2, #16
 800d20a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d20e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d212:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d216:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d21a:	0655      	lsls	r5, r2, #25
 800d21c:	d50d      	bpl.n	800d23a <USB_ActivateEndpoint+0x1de>
 800d21e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d222:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d226:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d22a:	0412      	lsls	r2, r2, #16
 800d22c:	0c12      	lsrs	r2, r2, #16
 800d22e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d232:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d236:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d23a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d23e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d242:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d246:	0412      	lsls	r2, r2, #16
 800d248:	0c12      	lsrs	r2, r2, #16
 800d24a:	f248 0180 	movw	r1, #32896	; 0x8080
 800d24e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800d252:	430a      	orrs	r2, r1
 800d254:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d258:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d25c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d264:	0412      	lsls	r2, r2, #16
 800d266:	0c12      	lsrs	r2, r2, #16
 800d268:	430a      	orrs	r2, r1
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d26a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }

  return ret;
}
 800d26e:	4620      	mov	r0, r4
 800d270:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d272:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800d276:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d27a:	0412      	lsls	r2, r2, #16
 800d27c:	0c12      	lsrs	r2, r2, #16
 800d27e:	433a      	orrs	r2, r7
 800d280:	e7a0      	b.n	800d1c4 <USB_ActivateEndpoint+0x168>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d282:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d286:	0451      	lsls	r1, r2, #17
 800d288:	d50d      	bpl.n	800d2a6 <USB_ActivateEndpoint+0x24a>
 800d28a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d28e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d292:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d296:	0412      	lsls	r2, r2, #16
 800d298:	0c12      	lsrs	r2, r2, #16
 800d29a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d29e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d2a2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d2a6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d2aa:	0652      	lsls	r2, r2, #25
 800d2ac:	d50d      	bpl.n	800d2ca <USB_ActivateEndpoint+0x26e>
 800d2ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d2b2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d2b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d2ba:	0412      	lsls	r2, r2, #16
 800d2bc:	0c12      	lsrs	r2, r2, #16
 800d2be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2c2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d2c6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d2ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d2ce:	490b      	ldr	r1, [pc, #44]	; (800d2fc <USB_ActivateEndpoint+0x2a0>)
 800d2d0:	b292      	uxth	r2, r2
 800d2d2:	400a      	ands	r2, r1
      if (ep->type != EP_TYPE_ISOC)
 800d2d4:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d2d6:	bf18      	it	ne
 800d2d8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d2dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d2e4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d2e8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d2ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d2f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d2f4:	0412      	lsls	r2, r2, #16
 800d2f6:	0c12      	lsrs	r2, r2, #16
 800d2f8:	e700      	b.n	800d0fc <USB_ActivateEndpoint+0xa0>
 800d2fa:	bf00      	nop
 800d2fc:	ffff8fbf 	.word	0xffff8fbf
 800d300:	ffff8000 	.word	0xffff8000
 800d304:	ffff8f8f 	.word	0xffff8f8f

0800d308 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 800d308:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d30a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 800d30c:	7b09      	ldrb	r1, [r1, #12]
 800d30e:	bbd9      	cbnz	r1, 800d388 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 800d310:	b30a      	cbz	r2, 800d356 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d312:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d316:	0651      	lsls	r1, r2, #25
 800d318:	d50d      	bpl.n	800d336 <USB_DeactivateEndpoint+0x2e>
 800d31a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d31e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d322:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d326:	0412      	lsls	r2, r2, #16
 800d328:	0c12      	lsrs	r2, r2, #16
 800d32a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d32e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d332:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d336:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d33a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d33e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d342:	0412      	lsls	r2, r2, #16
 800d344:	0c12      	lsrs	r2, r2, #16
 800d346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d34a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d34e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }

  return HAL_OK;
}
 800d352:	2000      	movs	r0, #0
 800d354:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d356:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d35a:	0452      	lsls	r2, r2, #17
 800d35c:	d50d      	bpl.n	800d37a <USB_DeactivateEndpoint+0x72>
 800d35e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d362:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d366:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d36a:	0412      	lsls	r2, r2, #16
 800d36c:	0c12      	lsrs	r2, r2, #16
 800d36e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d376:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d37a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d37e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d382:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d386:	e7dc      	b.n	800d342 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800d388:	2a00      	cmp	r2, #0
 800d38a:	d148      	bne.n	800d41e <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d38c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d390:	0451      	lsls	r1, r2, #17
 800d392:	d50d      	bpl.n	800d3b0 <USB_DeactivateEndpoint+0xa8>
 800d394:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d398:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d39c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d3a0:	0412      	lsls	r2, r2, #16
 800d3a2:	0c12      	lsrs	r2, r2, #16
 800d3a4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d3a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3ac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d3b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d3b4:	0652      	lsls	r2, r2, #25
 800d3b6:	d50d      	bpl.n	800d3d4 <USB_DeactivateEndpoint+0xcc>
 800d3b8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d3bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d3c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d3c4:	0412      	lsls	r2, r2, #16
 800d3c6:	0c12      	lsrs	r2, r2, #16
 800d3c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3cc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d3d0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800d3d4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d3d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d3dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d3e0:	0412      	lsls	r2, r2, #16
 800d3e2:	0c12      	lsrs	r2, r2, #16
 800d3e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3e8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d3ec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d3f0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d3f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d3f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d3fc:	0412      	lsls	r2, r2, #16
 800d3fe:	0c12      	lsrs	r2, r2, #16
 800d400:	f248 0180 	movw	r1, #32896	; 0x8080
 800d404:	430a      	orrs	r2, r1
 800d406:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d40a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d40e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d416:	0412      	lsls	r2, r2, #16
 800d418:	0c12      	lsrs	r2, r2, #16
 800d41a:	430a      	orrs	r2, r1
 800d41c:	e797      	b.n	800d34e <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d41e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d422:	0451      	lsls	r1, r2, #17
 800d424:	d50d      	bpl.n	800d442 <USB_DeactivateEndpoint+0x13a>
 800d426:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d42a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d42e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d432:	0412      	lsls	r2, r2, #16
 800d434:	0c12      	lsrs	r2, r2, #16
 800d436:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d43a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d43e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d442:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d446:	0652      	lsls	r2, r2, #25
 800d448:	d50d      	bpl.n	800d466 <USB_DeactivateEndpoint+0x15e>
 800d44a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d44e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d452:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d456:	0412      	lsls	r2, r2, #16
 800d458:	0c12      	lsrs	r2, r2, #16
 800d45a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d45e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d462:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800d466:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d46a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d46e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d472:	0412      	lsls	r2, r2, #16
 800d474:	0c12      	lsrs	r2, r2, #16
 800d476:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d47a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d47e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d482:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d486:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d48a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d48e:	0412      	lsls	r2, r2, #16
 800d490:	0c12      	lsrs	r2, r2, #16
 800d492:	f248 0180 	movw	r1, #32896	; 0x8080
 800d496:	430a      	orrs	r2, r1
 800d498:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d49c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800d4a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d4a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d4a8:	e7b5      	b.n	800d416 <USB_DeactivateEndpoint+0x10e>

0800d4aa <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800d4aa:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d4ac:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800d4ae:	b18b      	cbz	r3, 800d4d4 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d4b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d4b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4bc:	041b      	lsls	r3, r3, #16
 800d4be:	0c1b      	lsrs	r3, r3, #16
 800d4c0:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d4c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d4d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d4d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4e0:	041b      	lsls	r3, r3, #16
 800d4e2:	0c1b      	lsrs	r3, r3, #16
 800d4e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d4e8:	e7ec      	b.n	800d4c4 <USB_EPSetStall+0x1a>

0800d4ea <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800d4ea:	7b0b      	ldrb	r3, [r1, #12]
 800d4ec:	bb3b      	cbnz	r3, 800d53e <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800d4ee:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d4f0:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800d4f2:	b333      	cbz	r3, 800d542 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d4f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d4f8:	065b      	lsls	r3, r3, #25
 800d4fa:	d50d      	bpl.n	800d518 <USB_EPClearStall+0x2e>
 800d4fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d508:	041b      	lsls	r3, r3, #16
 800d50a:	0c1b      	lsrs	r3, r3, #16
 800d50c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d514:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800d518:	78cb      	ldrb	r3, [r1, #3]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d00f      	beq.n	800d53e <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d51e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d52a:	041b      	lsls	r3, r3, #16
 800d52c:	0c1b      	lsrs	r3, r3, #16
 800d52e:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d53a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800d53e:	2000      	movs	r0, #0
 800d540:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d542:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d546:	045b      	lsls	r3, r3, #17
 800d548:	d50d      	bpl.n	800d566 <USB_EPClearStall+0x7c>
 800d54a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d54e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d556:	041b      	lsls	r3, r3, #16
 800d558:	0c1b      	lsrs	r3, r3, #16
 800d55a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d562:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d566:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800d56a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d572:	041b      	lsls	r3, r3, #16
 800d574:	0c1b      	lsrs	r3, r3, #16
 800d576:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800d57a:	e7da      	b.n	800d532 <USB_EPClearStall+0x48>

0800d57c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800d57c:	b911      	cbnz	r1, 800d584 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d57e:	2380      	movs	r3, #128	; 0x80
 800d580:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800d584:	2000      	movs	r0, #0
 800d586:	4770      	bx	lr

0800d588 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800d588:	2000      	movs	r0, #0
 800d58a:	4770      	bx	lr

0800d58c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d58c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800d590:	b280      	uxth	r0, r0
 800d592:	4770      	bx	lr

0800d594 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d594:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d598:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d59a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d59e:	085b      	lsrs	r3, r3, #1
 800d5a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d100      	bne.n	800d5aa <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800d5a8:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d5aa:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800d5ae:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 800d5b2:	e7f7      	b.n	800d5a4 <USB_WritePMA+0x10>

0800d5b4 <USB_EPStartXfer>:
{
 800d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b8:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800d5ba:	7849      	ldrb	r1, [r1, #1]
    if (ep->doublebuffer == 0U)
 800d5bc:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 800d5be:	2901      	cmp	r1, #1
{
 800d5c0:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800d5c2:	f040 811e 	bne.w	800d802 <USB_EPStartXfer+0x24e>
    if (ep->xfer_len > ep->maxpacket)
 800d5c6:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800d5ca:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d5cc:	6961      	ldr	r1, [r4, #20]
 800d5ce:	4576      	cmp	r6, lr
 800d5d0:	bf28      	it	cs
 800d5d2:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 800d5d4:	bb12      	cbnz	r2, 800d61c <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d5d6:	b2b6      	uxth	r6, r6
 800d5d8:	88e2      	ldrh	r2, [r4, #6]
 800d5da:	4633      	mov	r3, r6
 800d5dc:	f7ff ffda 	bl	800d594 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d5e0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d5e4:	7823      	ldrb	r3, [r4, #0]
 800d5e6:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800d5ea:	fa11 f282 	uxtah	r2, r1, r2
 800d5ee:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800d5f2:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d5f4:	7822      	ldrb	r2, [r4, #0]
 800d5f6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d5fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d602:	041b      	lsls	r3, r3, #16
 800d604:	0c1b      	lsrs	r3, r3, #16
 800d606:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d60a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d612:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800d616:	2000      	movs	r0, #0
}
 800d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 800d61c:	78e2      	ldrb	r2, [r4, #3]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d61e:	f894 c000 	ldrb.w	ip, [r4]
        if (ep->xfer_len_db > ep->maxpacket)
 800d622:	6a23      	ldr	r3, [r4, #32]
      if (ep->type == EP_TYPE_BULK)
 800d624:	2a02      	cmp	r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d626:	ea4f 170c 	mov.w	r7, ip, lsl #4
      if (ep->type == EP_TYPE_BULK)
 800d62a:	f040 80d4 	bne.w	800d7d6 <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 800d62e:	459e      	cmp	lr, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d630:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800d634:	f080 80b9 	bcs.w	800d7aa <USB_EPStartXfer+0x1f6>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d638:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d63c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d640:	0412      	lsls	r2, r2, #16
 800d642:	0c12      	lsrs	r2, r2, #16
 800d644:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800d648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d64c:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d650:	f830 802c 	ldrh.w	r8, [r0, ip, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d654:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 800d658:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d65a:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 800d65e:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d660:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d662:	d052      	beq.n	800d70a <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d664:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 800d668:	fa1c f282 	uxtah	r2, ip, r2
 800d66c:	53d3      	strh	r3, [r2, r7]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d66e:	8962      	ldrh	r2, [r4, #10]
 800d670:	f7ff ff90 	bl	800d594 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800d674:	6a22      	ldr	r2, [r4, #32]
 800d676:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800d678:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d67a:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800d67c:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800d67e:	bf8c      	ite	hi
 800d680:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800d682:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 800d684:	4431      	add	r1, r6
 800d686:	bf88      	it	hi
 800d688:	4632      	movhi	r2, r6
 800d68a:	6223      	str	r3, [r4, #32]
 800d68c:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d68e:	b293      	uxth	r3, r2
 800d690:	bb70      	cbnz	r0, 800d6f0 <USB_EPStartXfer+0x13c>
 800d692:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800d696:	7820      	ldrb	r0, [r4, #0]
 800d698:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800d69c:	fa17 f686 	uxtah	r6, r7, r6
 800d6a0:	eb06 1600 	add.w	r6, r6, r0, lsl #4
 800d6a4:	b96a      	cbnz	r2, 800d6c2 <USB_EPStartXfer+0x10e>
 800d6a6:	8832      	ldrh	r2, [r6, #0]
 800d6a8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d6ac:	0412      	lsls	r2, r2, #16
 800d6ae:	0c12      	lsrs	r2, r2, #16
 800d6b0:	8032      	strh	r2, [r6, #0]
 800d6b2:	8832      	ldrh	r2, [r6, #0]
 800d6b4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d6b8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d6bc:	b292      	uxth	r2, r2
 800d6be:	8032      	strh	r2, [r6, #0]
 800d6c0:	e008      	b.n	800d6d4 <USB_EPStartXfer+0x120>
 800d6c2:	2a3e      	cmp	r2, #62	; 0x3e
 800d6c4:	d80b      	bhi.n	800d6de <USB_EPStartXfer+0x12a>
 800d6c6:	0850      	lsrs	r0, r2, #1
 800d6c8:	07d7      	lsls	r7, r2, #31
 800d6ca:	bf48      	it	mi
 800d6cc:	3001      	addmi	r0, #1
 800d6ce:	0280      	lsls	r0, r0, #10
 800d6d0:	b280      	uxth	r0, r0
 800d6d2:	8030      	strh	r0, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d6d4:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d6d6:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d6d8:	f7ff ff5c 	bl	800d594 <USB_WritePMA>
 800d6dc:	e78a      	b.n	800d5f4 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d6de:	0950      	lsrs	r0, r2, #5
 800d6e0:	06d2      	lsls	r2, r2, #27
 800d6e2:	4aad      	ldr	r2, [pc, #692]	; (800d998 <USB_EPStartXfer+0x3e4>)
 800d6e4:	bf08      	it	eq
 800d6e6:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800d6ea:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800d6ee:	e7e5      	b.n	800d6bc <USB_EPStartXfer+0x108>
 800d6f0:	2801      	cmp	r0, #1
 800d6f2:	d1ef      	bne.n	800d6d4 <USB_EPStartXfer+0x120>
 800d6f4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d6f8:	7820      	ldrb	r0, [r4, #0]
 800d6fa:	f205 4604 	addw	r6, r5, #1028	; 0x404
 800d6fe:	fa16 f282 	uxtah	r2, r6, r2
 800d702:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800d706:	8013      	strh	r3, [r2, #0]
 800d708:	e7e4      	b.n	800d6d4 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d70a:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800d70e:	fa1c f282 	uxtah	r2, ip, r2
 800d712:	53d3      	strh	r3, [r2, r7]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d714:	8922      	ldrh	r2, [r4, #8]
 800d716:	f7ff ff3d 	bl	800d594 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800d71a:	6a22      	ldr	r2, [r4, #32]
 800d71c:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800d71e:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d720:	7860      	ldrb	r0, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 800d722:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800d724:	bf8c      	ite	hi
 800d726:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800d728:	4643      	movls	r3, r8
            ep->xfer_buff += len;
 800d72a:	4431      	add	r1, r6
 800d72c:	bf88      	it	hi
 800d72e:	4632      	movhi	r2, r6
 800d730:	6223      	str	r3, [r4, #32]
 800d732:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d734:	b293      	uxth	r3, r2
 800d736:	bb58      	cbnz	r0, 800d790 <USB_EPStartXfer+0x1dc>
 800d738:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800d73c:	7820      	ldrb	r0, [r4, #0]
 800d73e:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 800d742:	fa17 f686 	uxtah	r6, r7, r6
 800d746:	eb06 1600 	add.w	r6, r6, r0, lsl #4
 800d74a:	b96a      	cbnz	r2, 800d768 <USB_EPStartXfer+0x1b4>
 800d74c:	8832      	ldrh	r2, [r6, #0]
 800d74e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d752:	0412      	lsls	r2, r2, #16
 800d754:	0c12      	lsrs	r2, r2, #16
 800d756:	8032      	strh	r2, [r6, #0]
 800d758:	8832      	ldrh	r2, [r6, #0]
 800d75a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d75e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d762:	b292      	uxth	r2, r2
 800d764:	8032      	strh	r2, [r6, #0]
 800d766:	e008      	b.n	800d77a <USB_EPStartXfer+0x1c6>
 800d768:	2a3e      	cmp	r2, #62	; 0x3e
 800d76a:	d808      	bhi.n	800d77e <USB_EPStartXfer+0x1ca>
 800d76c:	0850      	lsrs	r0, r2, #1
 800d76e:	07d7      	lsls	r7, r2, #31
 800d770:	bf48      	it	mi
 800d772:	3001      	addmi	r0, #1
 800d774:	0280      	lsls	r0, r0, #10
 800d776:	b280      	uxth	r0, r0
 800d778:	8030      	strh	r0, [r6, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d77a:	8962      	ldrh	r2, [r4, #10]
 800d77c:	e7ab      	b.n	800d6d6 <USB_EPStartXfer+0x122>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d77e:	0950      	lsrs	r0, r2, #5
 800d780:	06d2      	lsls	r2, r2, #27
 800d782:	4a85      	ldr	r2, [pc, #532]	; (800d998 <USB_EPStartXfer+0x3e4>)
 800d784:	bf08      	it	eq
 800d786:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800d78a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800d78e:	e7e8      	b.n	800d762 <USB_EPStartXfer+0x1ae>
 800d790:	2801      	cmp	r0, #1
 800d792:	d1f2      	bne.n	800d77a <USB_EPStartXfer+0x1c6>
 800d794:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800d798:	7820      	ldrb	r0, [r4, #0]
 800d79a:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 800d79e:	fa16 f282 	uxtah	r2, r6, r2
 800d7a2:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800d7a6:	8013      	strh	r3, [r2, #0]
 800d7a8:	e7e7      	b.n	800d77a <USB_EPStartXfer+0x1c6>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d7aa:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800d7ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d7b2:	0412      	lsls	r2, r2, #16
 800d7b4:	0c12      	lsrs	r2, r2, #16
 800d7b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d7ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d7be:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d7c2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800d7c6:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800d7ca:	fa16 f282 	uxtah	r2, r6, r2
 800d7ce:	b29b      	uxth	r3, r3
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d7d0:	53d3      	strh	r3, [r2, r7]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d7d2:	8922      	ldrh	r2, [r4, #8]
 800d7d4:	e780      	b.n	800d6d8 <USB_EPStartXfer+0x124>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d7d6:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        ep->xfer_len_db -= len;
 800d7da:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d7dc:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 800d7e0:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d7e2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d7e6:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d7e8:	d006      	beq.n	800d7f8 <USB_EPStartXfer+0x244>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d7ea:	f200 460c 	addw	r6, r0, #1036	; 0x40c
 800d7ee:	fa16 f282 	uxtah	r2, r6, r2
 800d7f2:	53d3      	strh	r3, [r2, r7]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d7f4:	8962      	ldrh	r2, [r4, #10]
 800d7f6:	e76f      	b.n	800d6d8 <USB_EPStartXfer+0x124>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d7f8:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800d7fc:	fa16 f282 	uxtah	r2, r6, r2
 800d800:	e7e6      	b.n	800d7d0 <USB_EPStartXfer+0x21c>
    if (ep->doublebuffer == 0U)
 800d802:	b9f2      	cbnz	r2, 800d842 <USB_EPStartXfer+0x28e>
      if (ep->xfer_len > ep->maxpacket)
 800d804:	69a3      	ldr	r3, [r4, #24]
 800d806:	6921      	ldr	r1, [r4, #16]
 800d808:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800d80a:	bf88      	it	hi
 800d80c:	1a5a      	subhi	r2, r3, r1
 800d80e:	61a2      	str	r2, [r4, #24]
 800d810:	bf88      	it	hi
 800d812:	460b      	movhi	r3, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d814:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800d818:	7822      	ldrb	r2, [r4, #0]
 800d81a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800d81e:	fa10 f181 	uxtah	r1, r0, r1
 800d822:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d826:	2b00      	cmp	r3, #0
 800d828:	f000 80c1 	beq.w	800d9ae <USB_EPStartXfer+0x3fa>
 800d82c:	2b3e      	cmp	r3, #62	; 0x3e
 800d82e:	f200 80cc 	bhi.w	800d9ca <USB_EPStartXfer+0x416>
 800d832:	085a      	lsrs	r2, r3, #1
 800d834:	07d8      	lsls	r0, r3, #31
 800d836:	bf48      	it	mi
 800d838:	3201      	addmi	r2, #1
 800d83a:	0292      	lsls	r2, r2, #10
 800d83c:	b292      	uxth	r2, r2
 800d83e:	800a      	strh	r2, [r1, #0]
 800d840:	e04a      	b.n	800d8d8 <USB_EPStartXfer+0x324>
      if (ep->type == EP_TYPE_BULK)
 800d842:	78e3      	ldrb	r3, [r4, #3]
 800d844:	2b02      	cmp	r3, #2
 800d846:	d17b      	bne.n	800d940 <USB_EPStartXfer+0x38c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d848:	bb61      	cbnz	r1, 800d8a4 <USB_EPStartXfer+0x2f0>
 800d84a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800d84e:	7823      	ldrb	r3, [r4, #0]
 800d850:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800d854:	fa12 f181 	uxtah	r1, r2, r1
 800d858:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800d85c:	6923      	ldr	r3, [r4, #16]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d146      	bne.n	800d8f0 <USB_EPStartXfer+0x33c>
 800d862:	880a      	ldrh	r2, [r1, #0]
 800d864:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d868:	0412      	lsls	r2, r2, #16
 800d86a:	0c12      	lsrs	r2, r2, #16
 800d86c:	800a      	strh	r2, [r1, #0]
 800d86e:	880a      	ldrh	r2, [r1, #0]
 800d870:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d874:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d878:	b292      	uxth	r2, r2
 800d87a:	800a      	strh	r2, [r1, #0]
 800d87c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800d880:	7822      	ldrb	r2, [r4, #0]
 800d882:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800d886:	fa10 f181 	uxtah	r1, r0, r1
 800d88a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d03f      	beq.n	800d912 <USB_EPStartXfer+0x35e>
 800d892:	2b3e      	cmp	r3, #62	; 0x3e
 800d894:	d84b      	bhi.n	800d92e <USB_EPStartXfer+0x37a>
 800d896:	085a      	lsrs	r2, r3, #1
 800d898:	07d8      	lsls	r0, r3, #31
 800d89a:	bf48      	it	mi
 800d89c:	3201      	addmi	r2, #1
 800d89e:	0292      	lsls	r2, r2, #10
 800d8a0:	b292      	uxth	r2, r2
 800d8a2:	800a      	strh	r2, [r1, #0]
        if (ep->xfer_count != 0U)
 800d8a4:	69e3      	ldr	r3, [r4, #28]
 800d8a6:	b1bb      	cbz	r3, 800d8d8 <USB_EPStartXfer+0x324>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d8a8:	7822      	ldrb	r2, [r4, #0]
 800d8aa:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d8ae:	f244 0340 	movw	r3, #16448	; 0x4040
 800d8b2:	ea03 0001 	and.w	r0, r3, r1
 800d8b6:	438b      	bics	r3, r1
 800d8b8:	d000      	beq.n	800d8bc <USB_EPStartXfer+0x308>
 800d8ba:	b968      	cbnz	r0, 800d8d8 <USB_EPStartXfer+0x324>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800d8bc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d8c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8c8:	041b      	lsls	r3, r3, #16
 800d8ca:	0c1b      	lsrs	r3, r3, #16
 800d8cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d8d4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d8d8:	7822      	ldrb	r2, [r4, #0]
 800d8da:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800d8de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8e6:	041b      	lsls	r3, r3, #16
 800d8e8:	0c1b      	lsrs	r3, r3, #16
 800d8ea:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800d8ee:	e68c      	b.n	800d60a <USB_EPStartXfer+0x56>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d8f0:	2b3e      	cmp	r3, #62	; 0x3e
 800d8f2:	d805      	bhi.n	800d900 <USB_EPStartXfer+0x34c>
 800d8f4:	085a      	lsrs	r2, r3, #1
 800d8f6:	07df      	lsls	r7, r3, #31
 800d8f8:	bf48      	it	mi
 800d8fa:	3201      	addmi	r2, #1
 800d8fc:	0292      	lsls	r2, r2, #10
 800d8fe:	e7bb      	b.n	800d878 <USB_EPStartXfer+0x2c4>
 800d900:	0958      	lsrs	r0, r3, #5
 800d902:	4a25      	ldr	r2, [pc, #148]	; (800d998 <USB_EPStartXfer+0x3e4>)
 800d904:	06de      	lsls	r6, r3, #27
 800d906:	bf08      	it	eq
 800d908:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800d90c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800d910:	e7b2      	b.n	800d878 <USB_EPStartXfer+0x2c4>
 800d912:	880b      	ldrh	r3, [r1, #0]
 800d914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d918:	041b      	lsls	r3, r3, #16
 800d91a:	0c1b      	lsrs	r3, r3, #16
 800d91c:	800b      	strh	r3, [r1, #0]
 800d91e:	880b      	ldrh	r3, [r1, #0]
 800d920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d928:	b29b      	uxth	r3, r3
 800d92a:	800b      	strh	r3, [r1, #0]
 800d92c:	e7ba      	b.n	800d8a4 <USB_EPStartXfer+0x2f0>
 800d92e:	095a      	lsrs	r2, r3, #5
 800d930:	06db      	lsls	r3, r3, #27
 800d932:	4b19      	ldr	r3, [pc, #100]	; (800d998 <USB_EPStartXfer+0x3e4>)
 800d934:	bf08      	it	eq
 800d936:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800d93a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800d93e:	e7f3      	b.n	800d928 <USB_EPStartXfer+0x374>
      else if (ep->type == EP_TYPE_ISOC)
 800d940:	2b01      	cmp	r3, #1
 800d942:	d14b      	bne.n	800d9dc <USB_EPStartXfer+0x428>
        if (ep->xfer_len > ep->maxpacket)
 800d944:	69a3      	ldr	r3, [r4, #24]
 800d946:	6922      	ldr	r2, [r4, #16]
 800d948:	4293      	cmp	r3, r2
          ep->xfer_len -= len;
 800d94a:	bf8a      	itet	hi
 800d94c:	1a98      	subhi	r0, r3, r2
          ep->xfer_len = 0U;
 800d94e:	2000      	movls	r0, #0
 800d950:	4613      	movhi	r3, r2
 800d952:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d954:	2900      	cmp	r1, #0
 800d956:	d1bf      	bne.n	800d8d8 <USB_EPStartXfer+0x324>
 800d958:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800d95c:	7822      	ldrb	r2, [r4, #0]
 800d95e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800d962:	fa10 f181 	uxtah	r1, r0, r1
 800d966:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d96a:	b96b      	cbnz	r3, 800d988 <USB_EPStartXfer+0x3d4>
 800d96c:	880a      	ldrh	r2, [r1, #0]
 800d96e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d972:	0412      	lsls	r2, r2, #16
 800d974:	0c12      	lsrs	r2, r2, #16
 800d976:	800a      	strh	r2, [r1, #0]
 800d978:	880a      	ldrh	r2, [r1, #0]
 800d97a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800d97e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800d982:	b292      	uxth	r2, r2
 800d984:	800a      	strh	r2, [r1, #0]
 800d986:	e745      	b.n	800d814 <USB_EPStartXfer+0x260>
 800d988:	2b3e      	cmp	r3, #62	; 0x3e
 800d98a:	d807      	bhi.n	800d99c <USB_EPStartXfer+0x3e8>
 800d98c:	085a      	lsrs	r2, r3, #1
 800d98e:	07df      	lsls	r7, r3, #31
 800d990:	bf48      	it	mi
 800d992:	3201      	addmi	r2, #1
 800d994:	0292      	lsls	r2, r2, #10
 800d996:	e7f4      	b.n	800d982 <USB_EPStartXfer+0x3ce>
 800d998:	ffff8000 	.word	0xffff8000
 800d99c:	0958      	lsrs	r0, r3, #5
 800d99e:	4a10      	ldr	r2, [pc, #64]	; (800d9e0 <USB_EPStartXfer+0x42c>)
 800d9a0:	06de      	lsls	r6, r3, #27
 800d9a2:	bf08      	it	eq
 800d9a4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800d9a8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800d9ac:	e7e9      	b.n	800d982 <USB_EPStartXfer+0x3ce>
 800d9ae:	880b      	ldrh	r3, [r1, #0]
 800d9b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d9b4:	041b      	lsls	r3, r3, #16
 800d9b6:	0c1b      	lsrs	r3, r3, #16
 800d9b8:	800b      	strh	r3, [r1, #0]
 800d9ba:	880b      	ldrh	r3, [r1, #0]
 800d9bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	800b      	strh	r3, [r1, #0]
 800d9c8:	e786      	b.n	800d8d8 <USB_EPStartXfer+0x324>
 800d9ca:	095a      	lsrs	r2, r3, #5
 800d9cc:	06db      	lsls	r3, r3, #27
 800d9ce:	4b04      	ldr	r3, [pc, #16]	; (800d9e0 <USB_EPStartXfer+0x42c>)
 800d9d0:	bf08      	it	eq
 800d9d2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800d9d6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800d9da:	e7f3      	b.n	800d9c4 <USB_EPStartXfer+0x410>
        return HAL_ERROR;
 800d9dc:	2001      	movs	r0, #1
 800d9de:	e61b      	b.n	800d618 <USB_EPStartXfer+0x64>
 800d9e0:	ffff8000 	.word	0xffff8000

0800d9e4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d9e4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 800d9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d9ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d9ee:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 800d9f0:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d9f2:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 800d9f4:	462e      	mov	r6, r5
 800d9f6:	3402      	adds	r4, #2
 800d9f8:	b936      	cbnz	r6, 800da08 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800d9fa:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800d9fc:	bf44      	itt	mi
 800d9fe:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800da02:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800da06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 800da08:	f837 0b04 	ldrh.w	r0, [r7], #4
 800da0c:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800da0e:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800da12:	0a00      	lsrs	r0, r0, #8
 800da14:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 800da18:	3e01      	subs	r6, #1
 800da1a:	e7ec      	b.n	800d9f6 <USB_ReadPMA+0x12>

0800da1c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800da1c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800da20:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800da22:	b16b      	cbz	r3, 800da40 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800da24:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800da28:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800da2c:	28ff      	cmp	r0, #255	; 0xff
 800da2e:	d007      	beq.n	800da40 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800da36:	4621      	mov	r1, r4
 800da38:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800da3a:	23ff      	movs	r3, #255	; 0xff
 800da3c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800da40:	2000      	movs	r0, #0
 800da42:	bd10      	pop	{r4, pc}

0800da44 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800da44:	2343      	movs	r3, #67	; 0x43
 800da46:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800da48:	4800      	ldr	r0, [pc, #0]	; (800da4c <USBD_CDC_GetFSCfgDesc+0x8>)
 800da4a:	4770      	bx	lr
 800da4c:	2000004c 	.word	0x2000004c

0800da50 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800da50:	2343      	movs	r3, #67	; 0x43
 800da52:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800da54:	4800      	ldr	r0, [pc, #0]	; (800da58 <USBD_CDC_GetHSCfgDesc+0x8>)
 800da56:	4770      	bx	lr
 800da58:	20000090 	.word	0x20000090

0800da5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800da5c:	2343      	movs	r3, #67	; 0x43
 800da5e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800da60:	4800      	ldr	r0, [pc, #0]	; (800da64 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800da62:	4770      	bx	lr
 800da64:	200000e0 	.word	0x200000e0

0800da68 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800da68:	230a      	movs	r3, #10
 800da6a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800da6c:	4800      	ldr	r0, [pc, #0]	; (800da70 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800da6e:	4770      	bx	lr
 800da70:	200000d4 	.word	0x200000d4

0800da74 <USBD_CDC_DataOut>:
{
 800da74:	b538      	push	{r3, r4, r5, lr}
 800da76:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800da78:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800da7c:	f000 fee6 	bl	800e84c <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800da80:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800da84:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800da88:	b14b      	cbz	r3, 800da9e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800da8a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800da8e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800da98:	4798      	blx	r3
    return USBD_OK;
 800da9a:	2000      	movs	r0, #0
}
 800da9c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800da9e:	2002      	movs	r0, #2
 800daa0:	e7fc      	b.n	800da9c <USBD_CDC_DataOut+0x28>

0800daa2 <USBD_CDC_DataIn>:
{
 800daa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800daa4:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 800daa8:	b1d6      	cbz	r6, 800dae0 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800daaa:	2214      	movs	r2, #20
 800daac:	fb02 0201 	mla	r2, r2, r1, r0
 800dab0:	69d4      	ldr	r4, [r2, #28]
 800dab2:	b18c      	cbz	r4, 800dad8 <USBD_CDC_DataIn+0x36>
 800dab4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800dab8:	2728      	movs	r7, #40	; 0x28
 800daba:	fb07 3501 	mla	r5, r7, r1, r3
 800dabe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800dac0:	fbb4 f5f3 	udiv	r5, r4, r3
 800dac4:	fb03 4415 	mls	r4, r3, r5, r4
 800dac8:	b934      	cbnz	r4, 800dad8 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800daca:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dacc:	4623      	mov	r3, r4
 800dace:	4622      	mov	r2, r4
 800dad0:	f000 feaa 	bl	800e828 <USBD_LL_Transmit>
    return USBD_OK;
 800dad4:	4620      	mov	r0, r4
}
 800dad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800dad8:	2000      	movs	r0, #0
 800dada:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800dade:	e7fa      	b.n	800dad6 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 800dae0:	2002      	movs	r0, #2
 800dae2:	e7f8      	b.n	800dad6 <USBD_CDC_DataIn+0x34>

0800dae4 <USBD_CDC_Setup>:
{
 800dae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dae8:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800daea:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800daee:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800daf2:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 800daf6:	4605      	mov	r5, r0
 800daf8:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 800dafa:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800dafe:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db02:	d028      	beq.n	800db56 <USBD_CDC_Setup+0x72>
 800db04:	2c20      	cmp	r4, #32
 800db06:	d142      	bne.n	800db8e <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 800db08:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db0a:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 800db0c:	b1e4      	cbz	r4, 800db48 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 800db0e:	0612      	lsls	r2, r2, #24
 800db10:	d511      	bpl.n	800db36 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db12:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800db16:	4639      	mov	r1, r7
 800db18:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800db1c:	4618      	mov	r0, r3
 800db1e:	4622      	mov	r2, r4
 800db20:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800db22:	88f2      	ldrh	r2, [r6, #6]
 800db24:	4639      	mov	r1, r7
 800db26:	4628      	mov	r0, r5
 800db28:	f000 fc48 	bl	800e3bc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800db2c:	4644      	mov	r4, r8
}
 800db2e:	4620      	mov	r0, r4
 800db30:	b003      	add	sp, #12
 800db32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 800db36:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800db3a:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800db3e:	4622      	mov	r2, r4
 800db40:	4639      	mov	r1, r7
 800db42:	f000 fc50 	bl	800e3e6 <USBD_CtlPrepareRx>
 800db46:	e7f1      	b.n	800db2c <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db48:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800db4c:	4618      	mov	r0, r3
 800db4e:	6895      	ldr	r5, [r2, #8]
 800db50:	4622      	mov	r2, r4
 800db52:	47a8      	blx	r5
 800db54:	e7eb      	b.n	800db2e <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800db56:	784b      	ldrb	r3, [r1, #1]
 800db58:	2b0a      	cmp	r3, #10
 800db5a:	d00c      	beq.n	800db76 <USBD_CDC_Setup+0x92>
 800db5c:	2b0b      	cmp	r3, #11
 800db5e:	d012      	beq.n	800db86 <USBD_CDC_Setup+0xa2>
 800db60:	b9ab      	cbnz	r3, 800db8e <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db62:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800db66:	2b03      	cmp	r3, #3
 800db68:	d111      	bne.n	800db8e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800db6a:	2202      	movs	r2, #2
 800db6c:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800db70:	f000 fc24 	bl	800e3bc <USBD_CtlSendData>
 800db74:	e7db      	b.n	800db2e <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d107      	bne.n	800db8e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800db7e:	2201      	movs	r2, #1
 800db80:	f10d 0105 	add.w	r1, sp, #5
 800db84:	e7f4      	b.n	800db70 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800db86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800db8a:	2b03      	cmp	r3, #3
 800db8c:	d0cf      	beq.n	800db2e <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 800db8e:	4631      	mov	r1, r6
 800db90:	4628      	mov	r0, r5
 800db92:	f000 fbec 	bl	800e36e <USBD_CtlError>
          ret = USBD_FAIL;
 800db96:	2402      	movs	r4, #2
          break;
 800db98:	e7c9      	b.n	800db2e <USBD_CDC_Setup+0x4a>

0800db9a <USBD_CDC_DeInit>:
{
 800db9a:	b538      	push	{r3, r4, r5, lr}
 800db9c:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800db9e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dba0:	2181      	movs	r1, #129	; 0x81
 800dba2:	f000 fe0a 	bl	800e7ba <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dba6:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dba8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f000 fe05 	bl	800e7ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dbb0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dbb4:	2182      	movs	r1, #130	; 0x82
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f000 fdff 	bl	800e7ba <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800dbbc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dbc0:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800dbc2:	b14b      	cbz	r3, 800dbd8 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dbc4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800dbcc:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800dbd0:	f000 fe44 	bl	800e85c <USBD_static_free>
    pdev->pClassData = NULL;
 800dbd4:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800dbd8:	2000      	movs	r0, #0
 800dbda:	bd38      	pop	{r3, r4, r5, pc}

0800dbdc <USBD_CDC_Init>:
{
 800dbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbe0:	7c03      	ldrb	r3, [r0, #16]
{
 800dbe2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbe4:	bbbb      	cbnz	r3, 800dc56 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dbe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbea:	2202      	movs	r2, #2
 800dbec:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dbee:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dbf0:	f000 fdd7 	bl	800e7a2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dbf4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dbf6:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	2202      	movs	r2, #2
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f000 fdcf 	bl	800e7a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dc04:	2701      	movs	r7, #1
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dc06:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dc0a:	2308      	movs	r3, #8
 800dc0c:	2203      	movs	r2, #3
 800dc0e:	2182      	movs	r1, #130	; 0x82
 800dc10:	4620      	mov	r0, r4
 800dc12:	f000 fdc6 	bl	800e7a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dc16:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dc18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dc1c:	f000 fe1a 	bl	800e854 <USBD_static_malloc>
 800dc20:	4605      	mov	r5, r0
 800dc22:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800dc26:	b340      	cbz	r0, 800dc7a <USBD_CDC_Init+0x9e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dc28:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hcdc->TxState = 0U;
 800dc2c:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4798      	blx	r3
    hcdc->TxState = 0U;
 800dc34:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800dc38:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc3c:	7c26      	ldrb	r6, [r4, #16]
 800dc3e:	b99e      	cbnz	r6, 800dc68 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dc40:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800dc44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc48:	4639      	mov	r1, r7
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f000 fdf5 	bl	800e83a <USBD_LL_PrepareReceive>
}
 800dc50:	4630      	mov	r0, r6
 800dc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dc56:	2340      	movs	r3, #64	; 0x40
 800dc58:	2202      	movs	r2, #2
 800dc5a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dc5c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dc5e:	f000 fda0 	bl	800e7a2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dc62:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dc64:	2340      	movs	r3, #64	; 0x40
 800dc66:	e7c8      	b.n	800dbfa <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dc68:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800dc6c:	2340      	movs	r3, #64	; 0x40
 800dc6e:	4639      	mov	r1, r7
 800dc70:	4620      	mov	r0, r4
 800dc72:	f000 fde2 	bl	800e83a <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800dc76:	4646      	mov	r6, r8
 800dc78:	e7ea      	b.n	800dc50 <USBD_CDC_Init+0x74>
    ret = 1U;
 800dc7a:	463e      	mov	r6, r7
 800dc7c:	e7e8      	b.n	800dc50 <USBD_CDC_Init+0x74>

0800dc7e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800dc7e:	b119      	cbz	r1, 800dc88 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800dc80:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800dc84:	2000      	movs	r0, #0
 800dc86:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800dc88:	2002      	movs	r0, #2
  }

  return ret;
}
 800dc8a:	4770      	bx	lr

0800dc8c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800dc8c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800dc90:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800dc92:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dc96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800dc9a:	4770      	bx	lr

0800dc9c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800dc9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 800dca0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800dca2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800dca6:	4770      	bx	lr

0800dca8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800dca8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800dcac:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800dcae:	b182      	cbz	r2, 800dcd2 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 800dcb0:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	b974      	cbnz	r4, 800dcd6 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800dcb8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dcbc:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800dcc0:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800dcc2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	2181      	movs	r1, #129	; 0x81
 800dcca:	f000 fdad 	bl	800e828 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800dcce:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800dcd0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800dcd2:	2002      	movs	r0, #2
 800dcd4:	e7fc      	b.n	800dcd0 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	e7fa      	b.n	800dcd0 <USBD_CDC_TransmitPacket+0x28>

0800dcda <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800dcda:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800dcde:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800dce0:	b182      	cbz	r2, 800dd04 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dce2:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800dce4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dce8:	b934      	cbnz	r4, 800dcf8 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800dcea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcee:	2101      	movs	r1, #1
 800dcf0:	f000 fda3 	bl	800e83a <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800dcf8:	2340      	movs	r3, #64	; 0x40
 800dcfa:	2101      	movs	r1, #1
 800dcfc:	f000 fd9d 	bl	800e83a <USBD_LL_PrepareReceive>
    return USBD_OK;
 800dd00:	2400      	movs	r4, #0
 800dd02:	e7f7      	b.n	800dcf4 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800dd04:	2402      	movs	r4, #2
 800dd06:	e7f5      	b.n	800dcf4 <USBD_CDC_ReceivePacket+0x1a>

0800dd08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dd08:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dd0a:	b180      	cbz	r0, 800dd2e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800dd0c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dd10:	b113      	cbz	r3, 800dd18 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dd18:	b109      	cbz	r1, 800dd1e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800dd1a:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800dd24:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800dd26:	f000 fcf1 	bl	800e70c <USBD_LL_Init>

  return USBD_OK;
 800dd2a:	2000      	movs	r0, #0
}
 800dd2c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800dd2e:	2002      	movs	r0, #2
 800dd30:	e7fc      	b.n	800dd2c <USBD_Init+0x24>

0800dd32 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800dd32:	b119      	cbz	r1, 800dd3c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800dd34:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800dd38:	2000      	movs	r0, #0
 800dd3a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800dd3c:	2002      	movs	r0, #2
  }

  return status;
}
 800dd3e:	4770      	bx	lr

0800dd40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dd40:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800dd42:	f000 fd25 	bl	800e790 <USBD_LL_Start>

  return USBD_OK;
}
 800dd46:	2000      	movs	r0, #0
 800dd48:	bd08      	pop	{r3, pc}

0800dd4a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800dd4a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800dd4c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dd50:	b90b      	cbnz	r3, 800dd56 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dd52:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800dd54:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4798      	blx	r3
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d0fa      	beq.n	800dd54 <USBD_SetClassConfig+0xa>
 800dd5e:	e7f8      	b.n	800dd52 <USBD_SetClassConfig+0x8>

0800dd60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800dd60:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800dd62:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	4798      	blx	r3

  return USBD_OK;
}
 800dd6a:	2000      	movs	r0, #0
 800dd6c:	bd08      	pop	{r3, pc}

0800dd6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dd6e:	b538      	push	{r3, r4, r5, lr}
 800dd70:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dd72:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800dd76:	4628      	mov	r0, r5
 800dd78:	f000 fae5 	bl	800e346 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dd7c:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800dd7e:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800dd82:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800dd86:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800dd8a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800dd8e:	f001 031f 	and.w	r3, r1, #31
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d008      	beq.n	800dda8 <USBD_LL_SetupStage+0x3a>
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d00b      	beq.n	800ddb2 <USBD_LL_SetupStage+0x44>
 800dd9a:	b97b      	cbnz	r3, 800ddbc <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f000 f8fc 	bl	800df9c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 800dda4:	2000      	movs	r0, #0
 800dda6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800dda8:	4629      	mov	r1, r5
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f000 fa1e 	bl	800e1ec <USBD_StdItfReq>
      break;
 800ddb0:	e7f8      	b.n	800dda4 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 fa3d 	bl	800e234 <USBD_StdEPReq>
      break;
 800ddba:	e7f3      	b.n	800dda4 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ddbc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f000 fd03 	bl	800e7cc <USBD_LL_StallEP>
      break;
 800ddc6:	e7ed      	b.n	800dda4 <USBD_LL_SetupStage+0x36>

0800ddc8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddca:	4604      	mov	r4, r0
 800ddcc:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ddce:	460d      	mov	r5, r1
 800ddd0:	bb39      	cbnz	r1, 800de22 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ddd2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800ddd6:	2b03      	cmp	r3, #3
 800ddd8:	d11c      	bne.n	800de14 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ddda:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 800ddde:	4296      	cmp	r6, r2
 800dde0:	d90b      	bls.n	800ddfa <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800dde2:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 800dde4:	42b2      	cmp	r2, r6
        pep->rem_length -= pep->maxpacket;
 800dde6:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800ddea:	bf8c      	ite	hi
 800ddec:	b2b2      	uxthhi	r2, r6
 800ddee:	b292      	uxthls	r2, r2
 800ddf0:	4639      	mov	r1, r7
 800ddf2:	f000 fb05 	bl	800e400 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ddfa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ddfe:	691b      	ldr	r3, [r3, #16]
 800de00:	b123      	cbz	r3, 800de0c <USBD_LL_DataOutStage+0x44>
 800de02:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800de06:	2a03      	cmp	r2, #3
 800de08:	d100      	bne.n	800de0c <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800de0a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800de0c:	4620      	mov	r0, r4
 800de0e:	f000 faff 	bl	800e410 <USBD_CtlSendStatus>
 800de12:	e7f0      	b.n	800ddf6 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800de14:	2b05      	cmp	r3, #5
 800de16:	d1ee      	bne.n	800ddf6 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 800de18:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800de1c:	f000 fcd6 	bl	800e7cc <USBD_LL_StallEP>
 800de20:	e7e9      	b.n	800ddf6 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800de22:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800de26:	699b      	ldr	r3, [r3, #24]
 800de28:	b133      	cbz	r3, 800de38 <USBD_LL_DataOutStage+0x70>
 800de2a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800de2e:	2a03      	cmp	r2, #3
 800de30:	d102      	bne.n	800de38 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800de32:	4798      	blx	r3
  return USBD_OK;
 800de34:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 800de36:	e7de      	b.n	800ddf6 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 800de38:	2502      	movs	r5, #2
 800de3a:	e7dc      	b.n	800ddf6 <USBD_LL_DataOutStage+0x2e>

0800de3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3e:	4604      	mov	r4, r0
 800de40:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800de42:	460d      	mov	r5, r1
 800de44:	2900      	cmp	r1, #0
 800de46:	d147      	bne.n	800ded8 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800de48:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800de4c:	2b02      	cmp	r3, #2
 800de4e:	d13c      	bne.n	800deca <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800de50:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800de54:	429e      	cmp	r6, r3
 800de56:	d914      	bls.n	800de82 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800de58:	1af3      	subs	r3, r6, r3
 800de5a:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	4639      	mov	r1, r7
 800de60:	f000 fab9 	bl	800e3d6 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de64:	462b      	mov	r3, r5
 800de66:	462a      	mov	r2, r5
 800de68:	4629      	mov	r1, r5
 800de6a:	4620      	mov	r0, r4
 800de6c:	f000 fce5 	bl	800e83a <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800de70:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800de74:	2b01      	cmp	r3, #1
 800de76:	d102      	bne.n	800de7e <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800de78:	2300      	movs	r3, #0
 800de7a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800de7e:	4628      	mov	r0, r5
 800de80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800de82:	69c2      	ldr	r2, [r0, #28]
 800de84:	fbb2 f6f3 	udiv	r6, r2, r3
 800de88:	fb03 2616 	mls	r6, r3, r6, r2
 800de8c:	b95e      	cbnz	r6, 800dea6 <USBD_LL_DataInStage+0x6a>
 800de8e:	4293      	cmp	r3, r2
 800de90:	d809      	bhi.n	800dea6 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800de92:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800de96:	429a      	cmp	r2, r3
 800de98:	d205      	bcs.n	800dea6 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800de9a:	460a      	mov	r2, r1
 800de9c:	f000 fa9b 	bl	800e3d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dea0:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800dea4:	e7de      	b.n	800de64 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dea6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	b12b      	cbz	r3, 800deba <USBD_LL_DataInStage+0x7e>
 800deae:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800deb2:	2a03      	cmp	r2, #3
 800deb4:	d101      	bne.n	800deba <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800deb6:	4620      	mov	r0, r4
 800deb8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800deba:	2180      	movs	r1, #128	; 0x80
 800debc:	4620      	mov	r0, r4
 800debe:	f000 fc85 	bl	800e7cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800dec2:	4620      	mov	r0, r4
 800dec4:	f000 faaf 	bl	800e426 <USBD_CtlReceiveStatus>
 800dec8:	e7d2      	b.n	800de70 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800deca:	f033 0304 	bics.w	r3, r3, #4
 800dece:	d1cf      	bne.n	800de70 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800ded0:	2180      	movs	r1, #128	; 0x80
 800ded2:	f000 fc7b 	bl	800e7cc <USBD_LL_StallEP>
 800ded6:	e7cb      	b.n	800de70 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 800ded8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	b133      	cbz	r3, 800deee <USBD_LL_DataInStage+0xb2>
 800dee0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dee4:	2a03      	cmp	r2, #3
 800dee6:	d102      	bne.n	800deee <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800dee8:	4798      	blx	r3
  return USBD_OK;
 800deea:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 800deec:	e7c7      	b.n	800de7e <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 800deee:	2502      	movs	r5, #2
 800def0:	e7c5      	b.n	800de7e <USBD_LL_DataInStage+0x42>

0800def2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800def2:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800def4:	2200      	movs	r2, #0
{
 800def6:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800def8:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800defa:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800defc:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800defe:	2340      	movs	r3, #64	; 0x40
 800df00:	f000 fc4f 	bl	800e7a2 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df04:	4633      	mov	r3, r6
 800df06:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800df08:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800df0c:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df10:	2200      	movs	r2, #0
 800df12:	4620      	mov	r0, r4
 800df14:	f000 fc45 	bl	800e7a2 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800df18:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800df1c:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800df1e:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800df20:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df22:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800df26:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800df2a:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800df2c:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800df30:	b123      	cbz	r3, 800df3c <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800df32:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800df36:	4620      	mov	r0, r4
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800df3c:	2000      	movs	r0, #0
 800df3e:	bd70      	pop	{r4, r5, r6, pc}

0800df40 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800df40:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800df42:	2000      	movs	r0, #0
 800df44:	4770      	bx	lr

0800df46 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800df46:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800df4a:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800df4e:	2304      	movs	r3, #4
 800df50:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800df54:	2000      	movs	r0, #0
 800df56:	4770      	bx	lr

0800df58 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800df58:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800df5c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800df5e:	bf04      	itt	eq
 800df60:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800df64:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800df68:	2000      	movs	r0, #0
 800df6a:	4770      	bx	lr

0800df6c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df6c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df6e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800df72:	2a03      	cmp	r2, #3
 800df74:	d104      	bne.n	800df80 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800df76:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800df7a:	69db      	ldr	r3, [r3, #28]
 800df7c:	b103      	cbz	r3, 800df80 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800df7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800df80:	2000      	movs	r0, #0
 800df82:	bd08      	pop	{r3, pc}

0800df84 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800df84:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800df86:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800df88:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800df8a:	f000 fc1f 	bl	800e7cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800df8e:	4620      	mov	r0, r4
 800df90:	2100      	movs	r1, #0
}
 800df92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800df96:	f000 bc19 	b.w	800e7cc <USBD_LL_StallEP>
	...

0800df9c <USBD_StdDevReq>:
{
 800df9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df9e:	780b      	ldrb	r3, [r1, #0]
 800dfa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfa4:	2b20      	cmp	r3, #32
{
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfaa:	d012      	beq.n	800dfd2 <USBD_StdDevReq+0x36>
 800dfac:	2b40      	cmp	r3, #64	; 0x40
 800dfae:	d010      	beq.n	800dfd2 <USBD_StdDevReq+0x36>
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d151      	bne.n	800e058 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 800dfb4:	784b      	ldrb	r3, [r1, #1]
 800dfb6:	2b09      	cmp	r3, #9
 800dfb8:	d84e      	bhi.n	800e058 <USBD_StdDevReq+0xbc>
 800dfba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dfbe:	00ee      	.short	0x00ee
 800dfc0:	004d0109 	.word	0x004d0109
 800dfc4:	004d0102 	.word	0x004d0102
 800dfc8:	00130087 	.word	0x00130087
 800dfcc:	00d6004d 	.word	0x00d6004d
 800dfd0:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 800dfd2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800dfd6:	4629      	mov	r1, r5
 800dfd8:	689b      	ldr	r3, [r3, #8]
 800dfda:	4620      	mov	r0, r4
 800dfdc:	4798      	blx	r3
}
 800dfde:	2000      	movs	r0, #0
 800dfe0:	b003      	add	sp, #12
 800dfe2:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800dfea:	884b      	ldrh	r3, [r1, #2]
 800dfec:	0a1a      	lsrs	r2, r3, #8
 800dfee:	3a01      	subs	r2, #1
 800dff0:	2a06      	cmp	r2, #6
 800dff2:	d831      	bhi.n	800e058 <USBD_StdDevReq+0xbc>
 800dff4:	e8df f002 	tbb	[pc, r2]
 800dff8:	30231604 	.word	0x30231604
 800dffc:	4830      	.short	0x4830
 800dffe:	52          	.byte	0x52
 800dfff:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e000:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800e004:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e006:	7c20      	ldrb	r0, [r4, #16]
 800e008:	f10d 0106 	add.w	r1, sp, #6
 800e00c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800e00e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e012:	2a00      	cmp	r2, #0
 800e014:	d056      	beq.n	800e0c4 <USBD_StdDevReq+0x128>
 800e016:	88eb      	ldrh	r3, [r5, #6]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d14a      	bne.n	800e0b2 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800e01c:	4620      	mov	r0, r4
 800e01e:	f000 f9f7 	bl	800e410 <USBD_CtlSendStatus>
 800e022:	e7dc      	b.n	800dfde <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e024:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800e026:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e02a:	b932      	cbnz	r2, 800e03a <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e02e:	f10d 0006 	add.w	r0, sp, #6
 800e032:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e034:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e036:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800e038:	e7e9      	b.n	800e00e <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03c:	e7f7      	b.n	800e02e <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b05      	cmp	r3, #5
 800e042:	d809      	bhi.n	800e058 <USBD_StdDevReq+0xbc>
 800e044:	e8df f003 	tbb	[pc, r3]
 800e048:	14100c03 	.word	0x14100c03
 800e04c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e04e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800e052:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1d6      	bne.n	800e006 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 800e058:	4620      	mov	r0, r4
 800e05a:	f7ff ff93 	bl	800df84 <USBD_CtlError.constprop.0>
        break;
 800e05e:	e7be      	b.n	800dfde <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e060:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	e7f5      	b.n	800e054 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e068:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	e7f1      	b.n	800e054 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e070:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	e7ed      	b.n	800e054 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e078:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800e07c:	695b      	ldr	r3, [r3, #20]
 800e07e:	e7e9      	b.n	800e054 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e080:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800e084:	699b      	ldr	r3, [r3, #24]
 800e086:	e7e5      	b.n	800e054 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e088:	7c03      	ldrb	r3, [r0, #16]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1e4      	bne.n	800e058 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e08e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e092:	f10d 0006 	add.w	r0, sp, #6
 800e096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e098:	4798      	blx	r3
  if (err != 0U)
 800e09a:	e7b8      	b.n	800e00e <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e09c:	7c03      	ldrb	r3, [r0, #16]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d1da      	bne.n	800e058 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e0a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e0a6:	f10d 0006 	add.w	r0, sp, #6
 800e0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ac:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e0ae:	2307      	movs	r3, #7
 800e0b0:	e7c1      	b.n	800e036 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	bf28      	it	cs
 800e0b6:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e0b8:	4601      	mov	r1, r0
 800e0ba:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800e0bc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e0c0:	f000 f97c 	bl	800e3bc <USBD_CtlSendData>
    if (req->wLength == 0U)
 800e0c4:	88eb      	ldrh	r3, [r5, #6]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d189      	bne.n	800dfde <USBD_StdDevReq+0x42>
 800e0ca:	e7a7      	b.n	800e01c <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e0cc:	888b      	ldrh	r3, [r1, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1c2      	bne.n	800e058 <USBD_StdDevReq+0xbc>
 800e0d2:	88cb      	ldrh	r3, [r1, #6]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d1bf      	bne.n	800e058 <USBD_StdDevReq+0xbc>
 800e0d8:	884d      	ldrh	r5, [r1, #2]
 800e0da:	2d7f      	cmp	r5, #127	; 0x7f
 800e0dc:	d8bc      	bhi.n	800e058 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d0b8      	beq.n	800e058 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e0e6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800e0e8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e0ec:	f000 fb93 	bl	800e816 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f000 f98d 	bl	800e410 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800e0f6:	b11d      	cbz	r5, 800e100 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0f8:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e0fa:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800e0fe:	e76e      	b.n	800dfde <USBD_StdDevReq+0x42>
 800e100:	2301      	movs	r3, #1
 800e102:	e7fa      	b.n	800e0fa <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 800e104:	7889      	ldrb	r1, [r1, #2]
 800e106:	4d38      	ldr	r5, [pc, #224]	; (800e1e8 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e108:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800e10a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e10c:	d8a4      	bhi.n	800e058 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800e10e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e112:	2b02      	cmp	r3, #2
 800e114:	d008      	beq.n	800e128 <USBD_StdDevReq+0x18c>
 800e116:	2b03      	cmp	r3, #3
 800e118:	d015      	beq.n	800e146 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800e11a:	f7ff ff33 	bl	800df84 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e11e:	7829      	ldrb	r1, [r5, #0]
 800e120:	4620      	mov	r0, r4
 800e122:	f7ff fe1d 	bl	800dd60 <USBD_ClrClassConfig>
        break;
 800e126:	e75a      	b.n	800dfde <USBD_StdDevReq+0x42>
        if (cfgidx)
 800e128:	2900      	cmp	r1, #0
 800e12a:	f43f af77 	beq.w	800e01c <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800e12e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e130:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800e132:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e134:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e138:	4620      	mov	r0, r4
 800e13a:	f7ff fe06 	bl	800dd4a <USBD_SetClassConfig>
 800e13e:	2802      	cmp	r0, #2
 800e140:	f47f af6c 	bne.w	800e01c <USBD_StdDevReq+0x80>
 800e144:	e788      	b.n	800e058 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 800e146:	b931      	cbnz	r1, 800e156 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e148:	2302      	movs	r3, #2
 800e14a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800e14e:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e150:	f7ff fe06 	bl	800dd60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e154:	e762      	b.n	800e01c <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 800e156:	6841      	ldr	r1, [r0, #4]
 800e158:	2901      	cmp	r1, #1
 800e15a:	f43f af5f 	beq.w	800e01c <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e15e:	b2c9      	uxtb	r1, r1
 800e160:	f7ff fdfe 	bl	800dd60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e164:	7829      	ldrb	r1, [r5, #0]
 800e166:	6061      	str	r1, [r4, #4]
 800e168:	e7e6      	b.n	800e138 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800e16a:	88ca      	ldrh	r2, [r1, #6]
 800e16c:	2a01      	cmp	r2, #1
 800e16e:	f47f af73 	bne.w	800e058 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800e172:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e176:	2b02      	cmp	r3, #2
 800e178:	d80a      	bhi.n	800e190 <USBD_StdDevReq+0x1f4>
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f43f af6c 	beq.w	800e058 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 800e180:	4601      	mov	r1, r0
 800e182:	2300      	movs	r3, #0
 800e184:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e188:	4620      	mov	r0, r4
 800e18a:	f000 f917 	bl	800e3bc <USBD_CtlSendData>
      break;
 800e18e:	e726      	b.n	800dfde <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 800e190:	2b03      	cmp	r3, #3
 800e192:	f47f af61 	bne.w	800e058 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e196:	1d01      	adds	r1, r0, #4
 800e198:	e7f6      	b.n	800e188 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800e19a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	f63f af59 	bhi.w	800e058 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800e1a6:	88ca      	ldrh	r2, [r1, #6]
 800e1a8:	2a02      	cmp	r2, #2
 800e1aa:	f47f af55 	bne.w	800e058 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 800e1ae:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e1b2:	4601      	mov	r1, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	bf14      	ite	ne
 800e1b8:	4613      	movne	r3, r2
 800e1ba:	2300      	moveq	r3, #0
 800e1bc:	f841 3f0c 	str.w	r3, [r1, #12]!
 800e1c0:	e7e2      	b.n	800e188 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1c2:	884b      	ldrh	r3, [r1, #2]
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	f47f af0a 	bne.w	800dfde <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800e1ca:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800e1ce:	e725      	b.n	800e01c <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800e1d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	f63f af3e 	bhi.w	800e058 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1dc:	884b      	ldrh	r3, [r1, #2]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	f47f aefd 	bne.w	800dfde <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	e7f0      	b.n	800e1ca <USBD_StdDevReq+0x22e>
 800e1e8:	200027a0 	.word	0x200027a0

0800e1ec <USBD_StdItfReq>:
{
 800e1ec:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1ee:	780b      	ldrb	r3, [r1, #0]
 800e1f0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800e1f4:	2a40      	cmp	r2, #64	; 0x40
{
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1fa:	d001      	beq.n	800e200 <USBD_StdItfReq+0x14>
 800e1fc:	065b      	lsls	r3, r3, #25
 800e1fe:	d415      	bmi.n	800e22c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800e200:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e204:	3b01      	subs	r3, #1
 800e206:	2b02      	cmp	r3, #2
 800e208:	d810      	bhi.n	800e22c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e20a:	792b      	ldrb	r3, [r5, #4]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d80d      	bhi.n	800e22c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e210:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800e214:	4629      	mov	r1, r5
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	4620      	mov	r0, r4
 800e21a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e21c:	88eb      	ldrh	r3, [r5, #6]
 800e21e:	b91b      	cbnz	r3, 800e228 <USBD_StdItfReq+0x3c>
 800e220:	b910      	cbnz	r0, 800e228 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800e222:	4620      	mov	r0, r4
 800e224:	f000 f8f4 	bl	800e410 <USBD_CtlSendStatus>
}
 800e228:	2000      	movs	r0, #0
 800e22a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800e22c:	4620      	mov	r0, r4
 800e22e:	f7ff fea9 	bl	800df84 <USBD_CtlError.constprop.0>
          break;
 800e232:	e7f9      	b.n	800e228 <USBD_StdItfReq+0x3c>

0800e234 <USBD_StdEPReq>:
{
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	780a      	ldrb	r2, [r1, #0]
 800e238:	f002 0260 	and.w	r2, r2, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e23c:	2a20      	cmp	r2, #32
{
 800e23e:	4604      	mov	r4, r0
 800e240:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e242:	d028      	beq.n	800e296 <USBD_StdEPReq+0x62>
 800e244:	2a40      	cmp	r2, #64	; 0x40
 800e246:	d026      	beq.n	800e296 <USBD_StdEPReq+0x62>
 800e248:	bb9a      	cbnz	r2, 800e2b2 <USBD_StdEPReq+0x7e>
      switch (req->bRequest)
 800e24a:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800e24c:	888d      	ldrh	r5, [r1, #4]
 800e24e:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 800e250:	2a01      	cmp	r2, #1
 800e252:	d03e      	beq.n	800e2d2 <USBD_StdEPReq+0x9e>
 800e254:	2a03      	cmp	r2, #3
 800e256:	d026      	beq.n	800e2a6 <USBD_StdEPReq+0x72>
 800e258:	bb5a      	cbnz	r2, 800e2b2 <USBD_StdEPReq+0x7e>
          switch (pdev->dev_state)
 800e25a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e25e:	2b02      	cmp	r3, #2
 800e260:	d04e      	beq.n	800e300 <USBD_StdEPReq+0xcc>
 800e262:	2b03      	cmp	r3, #3
 800e264:	d125      	bne.n	800e2b2 <USBD_StdEPReq+0x7e>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e266:	f001 030f 	and.w	r3, r1, #15
 800e26a:	2214      	movs	r2, #20
              if ((ep_addr & 0x80U) == 0x80U)
 800e26c:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e270:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800e274:	d053      	beq.n	800e31e <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e276:	699b      	ldr	r3, [r3, #24]
 800e278:	b1db      	cbz	r3, 800e2b2 <USBD_StdEPReq+0x7e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e27a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e27e:	3501      	adds	r5, #1
 800e280:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e284:	eb00 0585 	add.w	r5, r0, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e288:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800e28c:	d153      	bne.n	800e336 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 800e28e:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e290:	2202      	movs	r2, #2
 800e292:	4629      	mov	r1, r5
 800e294:	e03f      	b.n	800e316 <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 800e296:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800e29a:	4619      	mov	r1, r3
 800e29c:	6892      	ldr	r2, [r2, #8]
 800e29e:	4620      	mov	r0, r4
 800e2a0:	4790      	blx	r2
}
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 800e2a6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e2aa:	2a02      	cmp	r2, #2
 800e2ac:	d01f      	beq.n	800e2ee <USBD_StdEPReq+0xba>
 800e2ae:	2a03      	cmp	r2, #3
 800e2b0:	d003      	beq.n	800e2ba <USBD_StdEPReq+0x86>
              USBD_CtlError(pdev, req);
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f7ff fe66 	bl	800df84 <USBD_CtlError.constprop.0>
              break;
 800e2b8:	e7f3      	b.n	800e2a2 <USBD_StdEPReq+0x6e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2ba:	885a      	ldrh	r2, [r3, #2]
 800e2bc:	b92a      	cbnz	r2, 800e2ca <USBD_StdEPReq+0x96>
                if ((ep_addr != 0x00U) &&
 800e2be:	064a      	lsls	r2, r1, #25
 800e2c0:	d003      	beq.n	800e2ca <USBD_StdEPReq+0x96>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e2c2:	88db      	ldrh	r3, [r3, #6]
 800e2c4:	b90b      	cbnz	r3, 800e2ca <USBD_StdEPReq+0x96>
                  USBD_LL_StallEP(pdev, ep_addr);
 800e2c6:	f000 fa81 	bl	800e7cc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 f8a0 	bl	800e410 <USBD_CtlSendStatus>
              break;
 800e2d0:	e7e7      	b.n	800e2a2 <USBD_StdEPReq+0x6e>
          switch (pdev->dev_state)
 800e2d2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e2d6:	2a02      	cmp	r2, #2
 800e2d8:	d009      	beq.n	800e2ee <USBD_StdEPReq+0xba>
 800e2da:	2a03      	cmp	r2, #3
 800e2dc:	d1e9      	bne.n	800e2b2 <USBD_StdEPReq+0x7e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2de:	885b      	ldrh	r3, [r3, #2]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d1de      	bne.n	800e2a2 <USBD_StdEPReq+0x6e>
                if ((ep_addr & 0x7FU) != 0x00U)
 800e2e4:	064d      	lsls	r5, r1, #25
 800e2e6:	d0f0      	beq.n	800e2ca <USBD_StdEPReq+0x96>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800e2e8:	f000 fa79 	bl	800e7de <USBD_LL_ClearStallEP>
 800e2ec:	e7ed      	b.n	800e2ca <USBD_StdEPReq+0x96>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2ee:	064b      	lsls	r3, r1, #25
 800e2f0:	d0df      	beq.n	800e2b2 <USBD_StdEPReq+0x7e>
                USBD_LL_StallEP(pdev, ep_addr);
 800e2f2:	f000 fa6b 	bl	800e7cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800e2f6:	2180      	movs	r1, #128	; 0x80
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f000 fa67 	bl	800e7cc <USBD_LL_StallEP>
 800e2fe:	e7d0      	b.n	800e2a2 <USBD_StdEPReq+0x6e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e300:	064a      	lsls	r2, r1, #25
 800e302:	d1d6      	bne.n	800e2b2 <USBD_StdEPReq+0x7e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e304:	062b      	lsls	r3, r5, #24
 800e306:	bf4c      	ite	mi
 800e308:	f100 0114 	addmi.w	r1, r0, #20
 800e30c:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800e310:	2300      	movs	r3, #0
 800e312:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e314:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e316:	4620      	mov	r0, r4
 800e318:	f000 f850 	bl	800e3bc <USBD_CtlSendData>
              break;
 800e31c:	e7c1      	b.n	800e2a2 <USBD_StdEPReq+0x6e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e31e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e322:	2b00      	cmp	r3, #0
 800e324:	d0c5      	beq.n	800e2b2 <USBD_StdEPReq+0x7e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e326:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e32a:	2314      	movs	r3, #20
 800e32c:	fb03 0505 	mla	r5, r3, r5, r0
 800e330:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800e334:	e7a8      	b.n	800e288 <USBD_StdEPReq+0x54>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800e336:	4620      	mov	r0, r4
 800e338:	f000 fa5a 	bl	800e7f0 <USBD_LL_IsStallEP>
 800e33c:	b108      	cbz	r0, 800e342 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 800e33e:	2301      	movs	r3, #1
 800e340:	e7a5      	b.n	800e28e <USBD_StdEPReq+0x5a>
                pep->status = 0x0000U;
 800e342:	6028      	str	r0, [r5, #0]
 800e344:	e7a4      	b.n	800e290 <USBD_StdEPReq+0x5c>

0800e346 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800e346:	780b      	ldrb	r3, [r1, #0]
 800e348:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e34a:	784b      	ldrb	r3, [r1, #1]
 800e34c:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e34e:	78ca      	ldrb	r2, [r1, #3]
 800e350:	788b      	ldrb	r3, [r1, #2]
 800e352:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e356:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e358:	794a      	ldrb	r2, [r1, #5]
 800e35a:	790b      	ldrb	r3, [r1, #4]
 800e35c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e360:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e362:	79ca      	ldrb	r2, [r1, #7]
 800e364:	798b      	ldrb	r3, [r1, #6]
 800e366:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e36a:	80c3      	strh	r3, [r0, #6]
}
 800e36c:	4770      	bx	lr

0800e36e <USBD_CtlError>:
{
 800e36e:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 800e370:	2180      	movs	r1, #128	; 0x80
{
 800e372:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800e374:	f000 fa2a 	bl	800e7cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e378:	4620      	mov	r0, r4
 800e37a:	2100      	movs	r1, #0
}
 800e37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800e380:	f000 ba24 	b.w	800e7cc <USBD_LL_StallEP>

0800e384 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e384:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800e386:	b188      	cbz	r0, 800e3ac <USBD_GetString+0x28>
 800e388:	2400      	movs	r4, #0
 800e38a:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800e38c:	4623      	mov	r3, r4
 800e38e:	3401      	adds	r4, #1
 800e390:	5d05      	ldrb	r5, [r0, r4]
 800e392:	2d00      	cmp	r5, #0
 800e394:	d1fa      	bne.n	800e38c <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e396:	b2db      	uxtb	r3, r3
 800e398:	3301      	adds	r3, #1
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e39e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e3a0:	2303      	movs	r3, #3
 800e3a2:	704b      	strb	r3, [r1, #1]
 800e3a4:	2302      	movs	r3, #2
    while (*desc != '\0')
 800e3a6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800e3aa:	b904      	cbnz	r4, 800e3ae <USBD_GetString+0x2a>
}
 800e3ac:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800e3ae:	1c5a      	adds	r2, r3, #1
 800e3b0:	b2d2      	uxtb	r2, r2
 800e3b2:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800e3b4:	3302      	adds	r3, #2
 800e3b6:	548d      	strb	r5, [r1, r2]
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	e7f4      	b.n	800e3a6 <USBD_GetString+0x22>

0800e3bc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e3bc:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e3be:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3c0:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length   = len;
 800e3c2:	e9c0 2207 	strd	r2, r2, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e3c6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3ca:	460a      	mov	r2, r1
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	f000 fa2b 	bl	800e828 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e3d2:	2000      	movs	r0, #0
 800e3d4:	bd10      	pop	{r4, pc}

0800e3d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e3d6:	b508      	push	{r3, lr}
 800e3d8:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3da:	460a      	mov	r2, r1
 800e3dc:	2100      	movs	r1, #0
 800e3de:	f000 fa23 	bl	800e828 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	bd08      	pop	{r3, pc}

0800e3e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e3e6:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e3e8:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3ea:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length   = len;
 800e3ec:	e9c0 2257 	strd	r2, r2, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e3f0:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3f4:	460a      	mov	r2, r1
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	f000 fa1f 	bl	800e83a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	bd10      	pop	{r4, pc}

0800e400 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e400:	b508      	push	{r3, lr}
 800e402:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e404:	460a      	mov	r2, r1
 800e406:	2100      	movs	r1, #0
 800e408:	f000 fa17 	bl	800e83a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e40c:	2000      	movs	r0, #0
 800e40e:	bd08      	pop	{r3, pc}

0800e410 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e410:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e412:	2304      	movs	r3, #4
 800e414:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e418:	2300      	movs	r3, #0
 800e41a:	461a      	mov	r2, r3
 800e41c:	4619      	mov	r1, r3
 800e41e:	f000 fa03 	bl	800e828 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e422:	2000      	movs	r0, #0
 800e424:	bd08      	pop	{r3, pc}

0800e426 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e426:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e428:	2305      	movs	r3, #5
 800e42a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e42e:	2300      	movs	r3, #0
 800e430:	461a      	mov	r2, r3
 800e432:	4619      	mov	r1, r3
 800e434:	f000 fa01 	bl	800e83a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e438:	2000      	movs	r0, #0
 800e43a:	bd08      	pop	{r3, pc}

0800e43c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e43c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e43e:	490f      	ldr	r1, [pc, #60]	; (800e47c <MX_USB_DEVICE_Init+0x40>)
 800e440:	480f      	ldr	r0, [pc, #60]	; (800e480 <MX_USB_DEVICE_Init+0x44>)
 800e442:	2200      	movs	r2, #0
 800e444:	f7ff fc60 	bl	800dd08 <USBD_Init>
 800e448:	b108      	cbz	r0, 800e44e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800e44a:	f7f9 f827 	bl	800749c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e44e:	490d      	ldr	r1, [pc, #52]	; (800e484 <MX_USB_DEVICE_Init+0x48>)
 800e450:	480b      	ldr	r0, [pc, #44]	; (800e480 <MX_USB_DEVICE_Init+0x44>)
 800e452:	f7ff fc6e 	bl	800dd32 <USBD_RegisterClass>
 800e456:	b108      	cbz	r0, 800e45c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800e458:	f7f9 f820 	bl	800749c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e45c:	490a      	ldr	r1, [pc, #40]	; (800e488 <MX_USB_DEVICE_Init+0x4c>)
 800e45e:	4808      	ldr	r0, [pc, #32]	; (800e480 <MX_USB_DEVICE_Init+0x44>)
 800e460:	f7ff fc0d 	bl	800dc7e <USBD_CDC_RegisterInterface>
 800e464:	b108      	cbz	r0, 800e46a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800e466:	f7f9 f819 	bl	800749c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e46a:	4805      	ldr	r0, [pc, #20]	; (800e480 <MX_USB_DEVICE_Init+0x44>)
 800e46c:	f7ff fc68 	bl	800dd40 <USBD_Start>
 800e470:	b118      	cbz	r0, 800e47a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800e476:	f7f9 b811 	b.w	800749c <Error_Handler>
}
 800e47a:	bd08      	pop	{r3, pc}
 800e47c:	20000134 	.word	0x20000134
 800e480:	200027a4 	.word	0x200027a4
 800e484:	20000014 	.word	0x20000014
 800e488:	20000124 	.word	0x20000124

0800e48c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800e48c:	2000      	movs	r0, #0
 800e48e:	4770      	bx	lr

0800e490 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800e490:	2000      	movs	r0, #0
 800e492:	4770      	bx	lr

0800e494 <CDC_Init_FS>:
{
 800e494:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e496:	4c06      	ldr	r4, [pc, #24]	; (800e4b0 <CDC_Init_FS+0x1c>)
 800e498:	4906      	ldr	r1, [pc, #24]	; (800e4b4 <CDC_Init_FS+0x20>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	4620      	mov	r0, r4
 800e49e:	f7ff fbf5 	bl	800dc8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e4a2:	4905      	ldr	r1, [pc, #20]	; (800e4b8 <CDC_Init_FS+0x24>)
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f7ff fbf9 	bl	800dc9c <USBD_CDC_SetRxBuffer>
}
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	bd10      	pop	{r4, pc}
 800e4ae:	bf00      	nop
 800e4b0:	200027a4 	.word	0x200027a4
 800e4b4:	20002e50 	.word	0x20002e50
 800e4b8:	20002a68 	.word	0x20002a68

0800e4bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e4bc:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e4be:	4c09      	ldr	r4, [pc, #36]	; (800e4e4 <CDC_Transmit_FS+0x28>)
 800e4c0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800e4c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 800e4c8:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 800e4ca:	b943      	cbnz	r3, 800e4de <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e4cc:	4601      	mov	r1, r0
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f7ff fbdc 	bl	800dc8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e4d4:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800e4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e4da:	f7ff bbe5 	b.w	800dca8 <USBD_CDC_TransmitPacket>
}
 800e4de:	2001      	movs	r0, #1
 800e4e0:	bd10      	pop	{r4, pc}
 800e4e2:	bf00      	nop
 800e4e4:	200027a4 	.word	0x200027a4

0800e4e8 <CDC_Receive_FS>:
{
 800e4e8:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e4ea:	4e08      	ldr	r6, [pc, #32]	; (800e50c <CDC_Receive_FS+0x24>)
{
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e4f0:	4601      	mov	r1, r0
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f7ff fbd2 	bl	800dc9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f7ff fbee 	bl	800dcda <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 800e4fe:	4620      	mov	r0, r4
 800e500:	6829      	ldr	r1, [r5, #0]
 800e502:	f7f3 fd71 	bl	8001fe8 <CDC_ReceiveCallback>
}
 800e506:	2000      	movs	r0, #0
 800e508:	bd70      	pop	{r4, r5, r6, pc}
 800e50a:	bf00      	nop
 800e50c:	200027a4 	.word	0x200027a4

0800e510 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e510:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800e512:	4801      	ldr	r0, [pc, #4]	; (800e518 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800e514:	800b      	strh	r3, [r1, #0]
}
 800e516:	4770      	bx	lr
 800e518:	20000150 	.word	0x20000150

0800e51c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e51c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800e51e:	4801      	ldr	r0, [pc, #4]	; (800e524 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800e520:	800b      	strh	r3, [r1, #0]
}
 800e522:	4770      	bx	lr
 800e524:	20000164 	.word	0x20000164

0800e528 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e528:	2300      	movs	r3, #0
 800e52a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800e52c:	1c4d      	adds	r5, r1, #1
 800e52e:	461e      	mov	r6, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 800e530:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800e532:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800e536:	bf34      	ite	cc
 800e538:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e53a:	3437      	addcs	r4, #55	; 0x37
 800e53c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800e540:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800e544:	3301      	adds	r3, #1
 800e546:	b2dc      	uxtb	r4, r3
 800e548:	42a2      	cmp	r2, r4
    value = value << 4;
 800e54a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800e54e:	d8ef      	bhi.n	800e530 <IntToUnicode+0x8>
  }
}
 800e550:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e554 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800e554:	231a      	movs	r3, #26
{
 800e556:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800e558:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e55a:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <USBD_FS_SerialStrDescriptor+0x30>)
 800e55c:	f8d3 07ac 	ldr.w	r0, [r3, #1964]	; 0x7ac
  deviceserial0 += deviceserial2;
 800e560:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
  if (deviceserial0 != 0)
 800e564:	1880      	adds	r0, r0, r2
 800e566:	d00a      	beq.n	800e57e <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e568:	f8d3 47b0 	ldr.w	r4, [r3, #1968]	; 0x7b0
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e56c:	4906      	ldr	r1, [pc, #24]	; (800e588 <USBD_FS_SerialStrDescriptor+0x34>)
 800e56e:	2208      	movs	r2, #8
 800e570:	f7ff ffda 	bl	800e528 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e574:	2204      	movs	r2, #4
 800e576:	3110      	adds	r1, #16
 800e578:	4620      	mov	r0, r4
 800e57a:	f7ff ffd5 	bl	800e528 <IntToUnicode>
}
 800e57e:	4803      	ldr	r0, [pc, #12]	; (800e58c <USBD_FS_SerialStrDescriptor+0x38>)
 800e580:	bd10      	pop	{r4, pc}
 800e582:	bf00      	nop
 800e584:	1ffff000 	.word	0x1ffff000
 800e588:	2000016a 	.word	0x2000016a
 800e58c:	20000168 	.word	0x20000168

0800e590 <USBD_FS_ManufacturerStrDescriptor>:
{
 800e590:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e592:	4c04      	ldr	r4, [pc, #16]	; (800e5a4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800e594:	4804      	ldr	r0, [pc, #16]	; (800e5a8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 800e596:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e598:	4621      	mov	r1, r4
 800e59a:	f7ff fef3 	bl	800e384 <USBD_GetString>
}
 800e59e:	4620      	mov	r0, r4
 800e5a0:	bd10      	pop	{r4, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20003238 	.word	0x20003238
 800e5a8:	08014d44 	.word	0x08014d44

0800e5ac <USBD_FS_ProductStrDescriptor>:
{
 800e5ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5ae:	4c04      	ldr	r4, [pc, #16]	; (800e5c0 <USBD_FS_ProductStrDescriptor+0x14>)
 800e5b0:	4804      	ldr	r0, [pc, #16]	; (800e5c4 <USBD_FS_ProductStrDescriptor+0x18>)
{
 800e5b2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5b4:	4621      	mov	r1, r4
 800e5b6:	f7ff fee5 	bl	800e384 <USBD_GetString>
}
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	bd10      	pop	{r4, pc}
 800e5be:	bf00      	nop
 800e5c0:	20003238 	.word	0x20003238
 800e5c4:	08014d57 	.word	0x08014d57

0800e5c8 <USBD_FS_ConfigStrDescriptor>:
{
 800e5c8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5ca:	4c04      	ldr	r4, [pc, #16]	; (800e5dc <USBD_FS_ConfigStrDescriptor+0x14>)
 800e5cc:	4804      	ldr	r0, [pc, #16]	; (800e5e0 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 800e5ce:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5d0:	4621      	mov	r1, r4
 800e5d2:	f7ff fed7 	bl	800e384 <USBD_GetString>
}
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	bd10      	pop	{r4, pc}
 800e5da:	bf00      	nop
 800e5dc:	20003238 	.word	0x20003238
 800e5e0:	08014d6d 	.word	0x08014d6d

0800e5e4 <USBD_FS_InterfaceStrDescriptor>:
{
 800e5e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e5e6:	4c04      	ldr	r4, [pc, #16]	; (800e5f8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800e5e8:	4804      	ldr	r0, [pc, #16]	; (800e5fc <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 800e5ea:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	f7ff fec9 	bl	800e384 <USBD_GetString>
}
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	bd10      	pop	{r4, pc}
 800e5f6:	bf00      	nop
 800e5f8:	20003238 	.word	0x20003238
 800e5fc:	08014d78 	.word	0x08014d78

0800e600 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800e600:	2803      	cmp	r0, #3
 800e602:	bf9a      	itte	ls
 800e604:	4b01      	ldrls	r3, [pc, #4]	; (800e60c <USBD_Get_USB_Status+0xc>)
 800e606:	5c18      	ldrbls	r0, [r3, r0]
{
 800e608:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800e60a:	4770      	bx	lr
 800e60c:	08014d86 	.word	0x08014d86

0800e610 <HAL_PCD_MspInit>:
{
 800e610:	b510      	push	{r4, lr}
 800e612:	4604      	mov	r4, r0
 800e614:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e616:	2214      	movs	r2, #20
 800e618:	2100      	movs	r1, #0
 800e61a:	a803      	add	r0, sp, #12
 800e61c:	f000 f976 	bl	800e90c <memset>
  if(pcdHandle->Instance==USB)
 800e620:	6822      	ldr	r2, [r4, #0]
 800e622:	4b17      	ldr	r3, [pc, #92]	; (800e680 <HAL_PCD_MspInit+0x70>)
 800e624:	429a      	cmp	r2, r3
 800e626:	d128      	bne.n	800e67a <HAL_PCD_MspInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e628:	4c16      	ldr	r4, [pc, #88]	; (800e684 <HAL_PCD_MspInit+0x74>)
 800e62a:	6963      	ldr	r3, [r4, #20]
 800e62c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e630:	6163      	str	r3, [r4, #20]
 800e632:	6963      	ldr	r3, [r4, #20]
 800e634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e638:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e63a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e63e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e640:	2302      	movs	r3, #2
 800e642:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800e646:	2103      	movs	r1, #3
 800e648:	230e      	movs	r3, #14
 800e64a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e64e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e652:	a903      	add	r1, sp, #12
 800e654:	f7fb f86a 	bl	800972c <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 800e658:	69e3      	ldr	r3, [r4, #28]
 800e65a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e65e:	61e3      	str	r3, [r4, #28]
 800e660:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e662:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800e664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e668:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e66a:	204b      	movs	r0, #75	; 0x4b
 800e66c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800e66e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e670:	f7fa fdb2 	bl	80091d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e674:	204b      	movs	r0, #75	; 0x4b
 800e676:	f7fa fde1 	bl	800923c <HAL_NVIC_EnableIRQ>
}
 800e67a:	b008      	add	sp, #32
 800e67c:	bd10      	pop	{r4, pc}
 800e67e:	bf00      	nop
 800e680:	40005c00 	.word	0x40005c00
 800e684:	40021000 	.word	0x40021000

0800e688 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e688:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800e68c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e690:	f7ff bb6d 	b.w	800dd6e <USBD_LL_SetupStage>

0800e694 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e694:	2328      	movs	r3, #40	; 0x28
 800e696:	fb03 0301 	mla	r3, r3, r1, r0
 800e69a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e69e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800e6a2:	f7ff bb91 	b.w	800ddc8 <USBD_LL_DataOutStage>

0800e6a6 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e6a6:	2328      	movs	r3, #40	; 0x28
 800e6a8:	fb03 0301 	mla	r3, r3, r1, r0
 800e6ac:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e6b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6b2:	f7ff bbc3 	b.w	800de3c <USBD_LL_DataInStage>

0800e6b6 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e6b6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e6ba:	f7ff bc57 	b.w	800df6c <USBD_LL_SOF>

0800e6be <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e6be:	6883      	ldr	r3, [r0, #8]
 800e6c0:	2b02      	cmp	r3, #2
{
 800e6c2:	b510      	push	{r4, lr}
 800e6c4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e6c6:	d001      	beq.n	800e6cc <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800e6c8:	f7f8 fee8 	bl	800749c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e6cc:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	f7ff fc35 	bl	800df40 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e6d6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800e6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e6de:	f7ff bc08 	b.w	800def2 <USBD_LL_Reset>
	...

0800e6e4 <HAL_PCD_SuspendCallback>:
{
 800e6e4:	b510      	push	{r4, lr}
 800e6e6:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e6e8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e6ec:	f7ff fc2b 	bl	800df46 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800e6f0:	69a3      	ldr	r3, [r4, #24]
 800e6f2:	b123      	cbz	r3, 800e6fe <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6f4:	4a02      	ldr	r2, [pc, #8]	; (800e700 <HAL_PCD_SuspendCallback+0x1c>)
 800e6f6:	6913      	ldr	r3, [r2, #16]
 800e6f8:	f043 0306 	orr.w	r3, r3, #6
 800e6fc:	6113      	str	r3, [r2, #16]
}
 800e6fe:	bd10      	pop	{r4, pc}
 800e700:	e000ed00 	.word	0xe000ed00

0800e704 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e704:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800e708:	f7ff bc26 	b.w	800df58 <USBD_LL_Resume>

0800e70c <USBD_LL_Init>:
{
 800e70c:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e70e:	4a1e      	ldr	r2, [pc, #120]	; (800e788 <USBD_LL_Init+0x7c>)
{
 800e710:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800e712:	481e      	ldr	r0, [pc, #120]	; (800e78c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e714:	2308      	movs	r3, #8
 800e716:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e71a:	2302      	movs	r3, #2
  hpcd_USB_FS.pData = pdev;
 800e71c:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e720:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e722:	6103      	str	r3, [r0, #16]
  pdev->pData = &hpcd_USB_FS;
 800e724:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e728:	2300      	movs	r3, #0
 800e72a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e72c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e72e:	f7fb f8d5 	bl	80098dc <HAL_PCD_Init>
 800e732:	b108      	cbz	r0, 800e738 <USBD_LL_Init+0x2c>
    Error_Handler( );
 800e734:	f7f8 feb2 	bl	800749c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e738:	2200      	movs	r2, #0
 800e73a:	4611      	mov	r1, r2
 800e73c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e740:	2318      	movs	r3, #24
 800e742:	f7fb ff22 	bl	800a58a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e746:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e74a:	2358      	movs	r3, #88	; 0x58
 800e74c:	2200      	movs	r2, #0
 800e74e:	2180      	movs	r1, #128	; 0x80
 800e750:	f7fb ff1b 	bl	800a58a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e754:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e758:	23c0      	movs	r3, #192	; 0xc0
 800e75a:	2200      	movs	r2, #0
 800e75c:	2181      	movs	r1, #129	; 0x81
 800e75e:	f7fb ff14 	bl	800a58a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e762:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e766:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e76a:	2200      	movs	r2, #0
 800e76c:	2101      	movs	r1, #1
 800e76e:	f7fb ff0c 	bl	800a58a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e772:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800e776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e77a:	2200      	movs	r2, #0
 800e77c:	2182      	movs	r1, #130	; 0x82
 800e77e:	f7fb ff04 	bl	800a58a <HAL_PCDEx_PMAConfig>
}
 800e782:	2000      	movs	r0, #0
 800e784:	bd10      	pop	{r4, pc}
 800e786:	bf00      	nop
 800e788:	40005c00 	.word	0x40005c00
 800e78c:	20003438 	.word	0x20003438

0800e790 <USBD_LL_Start>:
{
 800e790:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e792:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e796:	f7fb f8f8 	bl	800998a <HAL_PCD_Start>
}
 800e79a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e79e:	f7ff bf2f 	b.w	800e600 <USBD_Get_USB_Status>

0800e7a2 <USBD_LL_OpenEP>:
{
 800e7a2:	b510      	push	{r4, lr}
 800e7a4:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7a6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 800e7aa:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7ac:	4623      	mov	r3, r4
 800e7ae:	f7fb fde3 	bl	800a378 <HAL_PCD_EP_Open>
}
 800e7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7b6:	f7ff bf23 	b.w	800e600 <USBD_Get_USB_Status>

0800e7ba <USBD_LL_CloseEP>:
{
 800e7ba:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e7c0:	f7fb fe10 	bl	800a3e4 <HAL_PCD_EP_Close>
}
 800e7c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7c8:	f7ff bf1a 	b.w	800e600 <USBD_Get_USB_Status>

0800e7cc <USBD_LL_StallEP>:
{
 800e7cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e7ce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e7d2:	f7fb fe72 	bl	800a4ba <HAL_PCD_EP_SetStall>
}
 800e7d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7da:	f7ff bf11 	b.w	800e600 <USBD_Get_USB_Status>

0800e7de <USBD_LL_ClearStallEP>:
{
 800e7de:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e7e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e7e4:	f7fb fe9b 	bl	800a51e <HAL_PCD_EP_ClrStall>
}
 800e7e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7ec:	f7ff bf08 	b.w	800e600 <USBD_Get_USB_Status>

0800e7f0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800e7f0:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e7f4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800e7f8:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e7fc:	bf1d      	ittte	ne
 800e7fe:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800e802:	fb01 2102 	mlane	r1, r1, r2, r2
 800e806:	185b      	addne	r3, r3, r1
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e808:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e80c:	bf14      	ite	ne
 800e80e:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e810:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 800e814:	4770      	bx	lr

0800e816 <USBD_LL_SetUSBAddress>:
{
 800e816:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e818:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e81c:	f7fb f8ce 	bl	80099bc <HAL_PCD_SetAddress>
}
 800e820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e824:	f7ff beec 	b.w	800e600 <USBD_Get_USB_Status>

0800e828 <USBD_LL_Transmit>:
{
 800e828:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e82a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e82e:	f7fb fe24 	bl	800a47a <HAL_PCD_EP_Transmit>
}
 800e832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e836:	f7ff bee3 	b.w	800e600 <USBD_Get_USB_Status>

0800e83a <USBD_LL_PrepareReceive>:
{
 800e83a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e83c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e840:	f7fb fdfd 	bl	800a43e <HAL_PCD_EP_Receive>
}
 800e844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e848:	f7ff beda 	b.w	800e600 <USBD_Get_USB_Status>

0800e84c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e84c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800e850:	f7fb be0b 	b.w	800a46a <HAL_PCD_EP_GetRxCount>

0800e854 <USBD_static_malloc>:
}
 800e854:	4800      	ldr	r0, [pc, #0]	; (800e858 <USBD_static_malloc+0x4>)
 800e856:	4770      	bx	lr
 800e858:	20003724 	.word	0x20003724

0800e85c <USBD_static_free>:
}
 800e85c:	4770      	bx	lr

0800e85e <HAL_PCDEx_SetConnectionState>:
}
 800e85e:	4770      	bx	lr

0800e860 <atoff>:
 800e860:	2100      	movs	r1, #0
 800e862:	f001 bb0f 	b.w	800fe84 <strtof>
	...

0800e868 <__errno>:
 800e868:	4b01      	ldr	r3, [pc, #4]	; (800e870 <__errno+0x8>)
 800e86a:	6818      	ldr	r0, [r3, #0]
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000184 	.word	0x20000184

0800e874 <__libc_init_array>:
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	4d0d      	ldr	r5, [pc, #52]	; (800e8ac <__libc_init_array+0x38>)
 800e878:	4c0d      	ldr	r4, [pc, #52]	; (800e8b0 <__libc_init_array+0x3c>)
 800e87a:	1b64      	subs	r4, r4, r5
 800e87c:	10a4      	asrs	r4, r4, #2
 800e87e:	2600      	movs	r6, #0
 800e880:	42a6      	cmp	r6, r4
 800e882:	d109      	bne.n	800e898 <__libc_init_array+0x24>
 800e884:	4d0b      	ldr	r5, [pc, #44]	; (800e8b4 <__libc_init_array+0x40>)
 800e886:	4c0c      	ldr	r4, [pc, #48]	; (800e8b8 <__libc_init_array+0x44>)
 800e888:	f004 fa5a 	bl	8012d40 <_init>
 800e88c:	1b64      	subs	r4, r4, r5
 800e88e:	10a4      	asrs	r4, r4, #2
 800e890:	2600      	movs	r6, #0
 800e892:	42a6      	cmp	r6, r4
 800e894:	d105      	bne.n	800e8a2 <__libc_init_array+0x2e>
 800e896:	bd70      	pop	{r4, r5, r6, pc}
 800e898:	f855 3b04 	ldr.w	r3, [r5], #4
 800e89c:	4798      	blx	r3
 800e89e:	3601      	adds	r6, #1
 800e8a0:	e7ee      	b.n	800e880 <__libc_init_array+0xc>
 800e8a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8a6:	4798      	blx	r3
 800e8a8:	3601      	adds	r6, #1
 800e8aa:	e7f2      	b.n	800e892 <__libc_init_array+0x1e>
 800e8ac:	0801522c 	.word	0x0801522c
 800e8b0:	0801522c 	.word	0x0801522c
 800e8b4:	0801522c 	.word	0x0801522c
 800e8b8:	08015230 	.word	0x08015230

0800e8bc <memcpy>:
 800e8bc:	440a      	add	r2, r1
 800e8be:	4291      	cmp	r1, r2
 800e8c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8c4:	d100      	bne.n	800e8c8 <memcpy+0xc>
 800e8c6:	4770      	bx	lr
 800e8c8:	b510      	push	{r4, lr}
 800e8ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8d2:	4291      	cmp	r1, r2
 800e8d4:	d1f9      	bne.n	800e8ca <memcpy+0xe>
 800e8d6:	bd10      	pop	{r4, pc}

0800e8d8 <memmove>:
 800e8d8:	4288      	cmp	r0, r1
 800e8da:	b510      	push	{r4, lr}
 800e8dc:	eb01 0402 	add.w	r4, r1, r2
 800e8e0:	d902      	bls.n	800e8e8 <memmove+0x10>
 800e8e2:	4284      	cmp	r4, r0
 800e8e4:	4623      	mov	r3, r4
 800e8e6:	d807      	bhi.n	800e8f8 <memmove+0x20>
 800e8e8:	1e43      	subs	r3, r0, #1
 800e8ea:	42a1      	cmp	r1, r4
 800e8ec:	d008      	beq.n	800e900 <memmove+0x28>
 800e8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8f6:	e7f8      	b.n	800e8ea <memmove+0x12>
 800e8f8:	4402      	add	r2, r0
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	428a      	cmp	r2, r1
 800e8fe:	d100      	bne.n	800e902 <memmove+0x2a>
 800e900:	bd10      	pop	{r4, pc}
 800e902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e90a:	e7f7      	b.n	800e8fc <memmove+0x24>

0800e90c <memset>:
 800e90c:	4402      	add	r2, r0
 800e90e:	4603      	mov	r3, r0
 800e910:	4293      	cmp	r3, r2
 800e912:	d100      	bne.n	800e916 <memset+0xa>
 800e914:	4770      	bx	lr
 800e916:	f803 1b01 	strb.w	r1, [r3], #1
 800e91a:	e7f9      	b.n	800e910 <memset+0x4>

0800e91c <__cvt>:
 800e91c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e920:	ec55 4b10 	vmov	r4, r5, d0
 800e924:	2d00      	cmp	r5, #0
 800e926:	460e      	mov	r6, r1
 800e928:	4619      	mov	r1, r3
 800e92a:	462b      	mov	r3, r5
 800e92c:	bfbb      	ittet	lt
 800e92e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e932:	461d      	movlt	r5, r3
 800e934:	2300      	movge	r3, #0
 800e936:	232d      	movlt	r3, #45	; 0x2d
 800e938:	700b      	strb	r3, [r1, #0]
 800e93a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e93c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e940:	4691      	mov	r9, r2
 800e942:	f023 0820 	bic.w	r8, r3, #32
 800e946:	bfbc      	itt	lt
 800e948:	4622      	movlt	r2, r4
 800e94a:	4614      	movlt	r4, r2
 800e94c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e950:	d005      	beq.n	800e95e <__cvt+0x42>
 800e952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e956:	d100      	bne.n	800e95a <__cvt+0x3e>
 800e958:	3601      	adds	r6, #1
 800e95a:	2102      	movs	r1, #2
 800e95c:	e000      	b.n	800e960 <__cvt+0x44>
 800e95e:	2103      	movs	r1, #3
 800e960:	ab03      	add	r3, sp, #12
 800e962:	9301      	str	r3, [sp, #4]
 800e964:	ab02      	add	r3, sp, #8
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	ec45 4b10 	vmov	d0, r4, r5
 800e96c:	4653      	mov	r3, sl
 800e96e:	4632      	mov	r2, r6
 800e970:	f001 fb72 	bl	8010058 <_dtoa_r>
 800e974:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e978:	4607      	mov	r7, r0
 800e97a:	d102      	bne.n	800e982 <__cvt+0x66>
 800e97c:	f019 0f01 	tst.w	r9, #1
 800e980:	d022      	beq.n	800e9c8 <__cvt+0xac>
 800e982:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e986:	eb07 0906 	add.w	r9, r7, r6
 800e98a:	d110      	bne.n	800e9ae <__cvt+0x92>
 800e98c:	783b      	ldrb	r3, [r7, #0]
 800e98e:	2b30      	cmp	r3, #48	; 0x30
 800e990:	d10a      	bne.n	800e9a8 <__cvt+0x8c>
 800e992:	2200      	movs	r2, #0
 800e994:	2300      	movs	r3, #0
 800e996:	4620      	mov	r0, r4
 800e998:	4629      	mov	r1, r5
 800e99a:	f7f2 f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800e99e:	b918      	cbnz	r0, 800e9a8 <__cvt+0x8c>
 800e9a0:	f1c6 0601 	rsb	r6, r6, #1
 800e9a4:	f8ca 6000 	str.w	r6, [sl]
 800e9a8:	f8da 3000 	ldr.w	r3, [sl]
 800e9ac:	4499      	add	r9, r3
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	f7f2 f887 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9ba:	b108      	cbz	r0, 800e9c0 <__cvt+0xa4>
 800e9bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9c0:	2230      	movs	r2, #48	; 0x30
 800e9c2:	9b03      	ldr	r3, [sp, #12]
 800e9c4:	454b      	cmp	r3, r9
 800e9c6:	d307      	bcc.n	800e9d8 <__cvt+0xbc>
 800e9c8:	9b03      	ldr	r3, [sp, #12]
 800e9ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9cc:	1bdb      	subs	r3, r3, r7
 800e9ce:	4638      	mov	r0, r7
 800e9d0:	6013      	str	r3, [r2, #0]
 800e9d2:	b004      	add	sp, #16
 800e9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9d8:	1c59      	adds	r1, r3, #1
 800e9da:	9103      	str	r1, [sp, #12]
 800e9dc:	701a      	strb	r2, [r3, #0]
 800e9de:	e7f0      	b.n	800e9c2 <__cvt+0xa6>

0800e9e0 <__exponent>:
 800e9e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2900      	cmp	r1, #0
 800e9e6:	bfb8      	it	lt
 800e9e8:	4249      	neglt	r1, r1
 800e9ea:	f803 2b02 	strb.w	r2, [r3], #2
 800e9ee:	bfb4      	ite	lt
 800e9f0:	222d      	movlt	r2, #45	; 0x2d
 800e9f2:	222b      	movge	r2, #43	; 0x2b
 800e9f4:	2909      	cmp	r1, #9
 800e9f6:	7042      	strb	r2, [r0, #1]
 800e9f8:	dd2a      	ble.n	800ea50 <__exponent+0x70>
 800e9fa:	f10d 0407 	add.w	r4, sp, #7
 800e9fe:	46a4      	mov	ip, r4
 800ea00:	270a      	movs	r7, #10
 800ea02:	46a6      	mov	lr, r4
 800ea04:	460a      	mov	r2, r1
 800ea06:	fb91 f6f7 	sdiv	r6, r1, r7
 800ea0a:	fb07 1516 	mls	r5, r7, r6, r1
 800ea0e:	3530      	adds	r5, #48	; 0x30
 800ea10:	2a63      	cmp	r2, #99	; 0x63
 800ea12:	f104 34ff 	add.w	r4, r4, #4294967295
 800ea16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ea1a:	4631      	mov	r1, r6
 800ea1c:	dcf1      	bgt.n	800ea02 <__exponent+0x22>
 800ea1e:	3130      	adds	r1, #48	; 0x30
 800ea20:	f1ae 0502 	sub.w	r5, lr, #2
 800ea24:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ea28:	1c44      	adds	r4, r0, #1
 800ea2a:	4629      	mov	r1, r5
 800ea2c:	4561      	cmp	r1, ip
 800ea2e:	d30a      	bcc.n	800ea46 <__exponent+0x66>
 800ea30:	f10d 0209 	add.w	r2, sp, #9
 800ea34:	eba2 020e 	sub.w	r2, r2, lr
 800ea38:	4565      	cmp	r5, ip
 800ea3a:	bf88      	it	hi
 800ea3c:	2200      	movhi	r2, #0
 800ea3e:	4413      	add	r3, r2
 800ea40:	1a18      	subs	r0, r3, r0
 800ea42:	b003      	add	sp, #12
 800ea44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ea4e:	e7ed      	b.n	800ea2c <__exponent+0x4c>
 800ea50:	2330      	movs	r3, #48	; 0x30
 800ea52:	3130      	adds	r1, #48	; 0x30
 800ea54:	7083      	strb	r3, [r0, #2]
 800ea56:	70c1      	strb	r1, [r0, #3]
 800ea58:	1d03      	adds	r3, r0, #4
 800ea5a:	e7f1      	b.n	800ea40 <__exponent+0x60>

0800ea5c <_printf_float>:
 800ea5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea60:	ed2d 8b02 	vpush	{d8}
 800ea64:	b08d      	sub	sp, #52	; 0x34
 800ea66:	460c      	mov	r4, r1
 800ea68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ea6c:	4616      	mov	r6, r2
 800ea6e:	461f      	mov	r7, r3
 800ea70:	4605      	mov	r5, r0
 800ea72:	f002 fc4f 	bl	8011314 <_localeconv_r>
 800ea76:	f8d0 a000 	ldr.w	sl, [r0]
 800ea7a:	4650      	mov	r0, sl
 800ea7c:	f7f1 fba8 	bl	80001d0 <strlen>
 800ea80:	2300      	movs	r3, #0
 800ea82:	930a      	str	r3, [sp, #40]	; 0x28
 800ea84:	6823      	ldr	r3, [r4, #0]
 800ea86:	9305      	str	r3, [sp, #20]
 800ea88:	f8d8 3000 	ldr.w	r3, [r8]
 800ea8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ea90:	3307      	adds	r3, #7
 800ea92:	f023 0307 	bic.w	r3, r3, #7
 800ea96:	f103 0208 	add.w	r2, r3, #8
 800ea9a:	f8c8 2000 	str.w	r2, [r8]
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eaa6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eaaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eaae:	9307      	str	r3, [sp, #28]
 800eab0:	f8cd 8018 	str.w	r8, [sp, #24]
 800eab4:	ee08 0a10 	vmov	s16, r0
 800eab8:	4b9f      	ldr	r3, [pc, #636]	; (800ed38 <_printf_float+0x2dc>)
 800eaba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eabe:	f04f 32ff 	mov.w	r2, #4294967295
 800eac2:	f7f2 f833 	bl	8000b2c <__aeabi_dcmpun>
 800eac6:	bb88      	cbnz	r0, 800eb2c <_printf_float+0xd0>
 800eac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eacc:	4b9a      	ldr	r3, [pc, #616]	; (800ed38 <_printf_float+0x2dc>)
 800eace:	f04f 32ff 	mov.w	r2, #4294967295
 800ead2:	f7f2 f80d 	bl	8000af0 <__aeabi_dcmple>
 800ead6:	bb48      	cbnz	r0, 800eb2c <_printf_float+0xd0>
 800ead8:	2200      	movs	r2, #0
 800eada:	2300      	movs	r3, #0
 800eadc:	4640      	mov	r0, r8
 800eade:	4649      	mov	r1, r9
 800eae0:	f7f1 fffc 	bl	8000adc <__aeabi_dcmplt>
 800eae4:	b110      	cbz	r0, 800eaec <_printf_float+0x90>
 800eae6:	232d      	movs	r3, #45	; 0x2d
 800eae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eaec:	4b93      	ldr	r3, [pc, #588]	; (800ed3c <_printf_float+0x2e0>)
 800eaee:	4894      	ldr	r0, [pc, #592]	; (800ed40 <_printf_float+0x2e4>)
 800eaf0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eaf4:	bf94      	ite	ls
 800eaf6:	4698      	movls	r8, r3
 800eaf8:	4680      	movhi	r8, r0
 800eafa:	2303      	movs	r3, #3
 800eafc:	6123      	str	r3, [r4, #16]
 800eafe:	9b05      	ldr	r3, [sp, #20]
 800eb00:	f023 0204 	bic.w	r2, r3, #4
 800eb04:	6022      	str	r2, [r4, #0]
 800eb06:	f04f 0900 	mov.w	r9, #0
 800eb0a:	9700      	str	r7, [sp, #0]
 800eb0c:	4633      	mov	r3, r6
 800eb0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800eb10:	4621      	mov	r1, r4
 800eb12:	4628      	mov	r0, r5
 800eb14:	f000 f9d8 	bl	800eec8 <_printf_common>
 800eb18:	3001      	adds	r0, #1
 800eb1a:	f040 8090 	bne.w	800ec3e <_printf_float+0x1e2>
 800eb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb22:	b00d      	add	sp, #52	; 0x34
 800eb24:	ecbd 8b02 	vpop	{d8}
 800eb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb2c:	4642      	mov	r2, r8
 800eb2e:	464b      	mov	r3, r9
 800eb30:	4640      	mov	r0, r8
 800eb32:	4649      	mov	r1, r9
 800eb34:	f7f1 fffa 	bl	8000b2c <__aeabi_dcmpun>
 800eb38:	b140      	cbz	r0, 800eb4c <_printf_float+0xf0>
 800eb3a:	464b      	mov	r3, r9
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	bfbc      	itt	lt
 800eb40:	232d      	movlt	r3, #45	; 0x2d
 800eb42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb46:	487f      	ldr	r0, [pc, #508]	; (800ed44 <_printf_float+0x2e8>)
 800eb48:	4b7f      	ldr	r3, [pc, #508]	; (800ed48 <_printf_float+0x2ec>)
 800eb4a:	e7d1      	b.n	800eaf0 <_printf_float+0x94>
 800eb4c:	6863      	ldr	r3, [r4, #4]
 800eb4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eb52:	9206      	str	r2, [sp, #24]
 800eb54:	1c5a      	adds	r2, r3, #1
 800eb56:	d13f      	bne.n	800ebd8 <_printf_float+0x17c>
 800eb58:	2306      	movs	r3, #6
 800eb5a:	6063      	str	r3, [r4, #4]
 800eb5c:	9b05      	ldr	r3, [sp, #20]
 800eb5e:	6861      	ldr	r1, [r4, #4]
 800eb60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb64:	2300      	movs	r3, #0
 800eb66:	9303      	str	r3, [sp, #12]
 800eb68:	ab0a      	add	r3, sp, #40	; 0x28
 800eb6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eb6e:	ab09      	add	r3, sp, #36	; 0x24
 800eb70:	ec49 8b10 	vmov	d0, r8, r9
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	6022      	str	r2, [r4, #0]
 800eb78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	f7ff fecd 	bl	800e91c <__cvt>
 800eb82:	9b06      	ldr	r3, [sp, #24]
 800eb84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb86:	2b47      	cmp	r3, #71	; 0x47
 800eb88:	4680      	mov	r8, r0
 800eb8a:	d108      	bne.n	800eb9e <_printf_float+0x142>
 800eb8c:	1cc8      	adds	r0, r1, #3
 800eb8e:	db02      	blt.n	800eb96 <_printf_float+0x13a>
 800eb90:	6863      	ldr	r3, [r4, #4]
 800eb92:	4299      	cmp	r1, r3
 800eb94:	dd41      	ble.n	800ec1a <_printf_float+0x1be>
 800eb96:	f1ab 0b02 	sub.w	fp, fp, #2
 800eb9a:	fa5f fb8b 	uxtb.w	fp, fp
 800eb9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eba2:	d820      	bhi.n	800ebe6 <_printf_float+0x18a>
 800eba4:	3901      	subs	r1, #1
 800eba6:	465a      	mov	r2, fp
 800eba8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ebac:	9109      	str	r1, [sp, #36]	; 0x24
 800ebae:	f7ff ff17 	bl	800e9e0 <__exponent>
 800ebb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebb4:	1813      	adds	r3, r2, r0
 800ebb6:	2a01      	cmp	r2, #1
 800ebb8:	4681      	mov	r9, r0
 800ebba:	6123      	str	r3, [r4, #16]
 800ebbc:	dc02      	bgt.n	800ebc4 <_printf_float+0x168>
 800ebbe:	6822      	ldr	r2, [r4, #0]
 800ebc0:	07d2      	lsls	r2, r2, #31
 800ebc2:	d501      	bpl.n	800ebc8 <_printf_float+0x16c>
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	6123      	str	r3, [r4, #16]
 800ebc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d09c      	beq.n	800eb0a <_printf_float+0xae>
 800ebd0:	232d      	movs	r3, #45	; 0x2d
 800ebd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebd6:	e798      	b.n	800eb0a <_printf_float+0xae>
 800ebd8:	9a06      	ldr	r2, [sp, #24]
 800ebda:	2a47      	cmp	r2, #71	; 0x47
 800ebdc:	d1be      	bne.n	800eb5c <_printf_float+0x100>
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1bc      	bne.n	800eb5c <_printf_float+0x100>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e7b9      	b.n	800eb5a <_printf_float+0xfe>
 800ebe6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ebea:	d118      	bne.n	800ec1e <_printf_float+0x1c2>
 800ebec:	2900      	cmp	r1, #0
 800ebee:	6863      	ldr	r3, [r4, #4]
 800ebf0:	dd0b      	ble.n	800ec0a <_printf_float+0x1ae>
 800ebf2:	6121      	str	r1, [r4, #16]
 800ebf4:	b913      	cbnz	r3, 800ebfc <_printf_float+0x1a0>
 800ebf6:	6822      	ldr	r2, [r4, #0]
 800ebf8:	07d0      	lsls	r0, r2, #31
 800ebfa:	d502      	bpl.n	800ec02 <_printf_float+0x1a6>
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	440b      	add	r3, r1
 800ec00:	6123      	str	r3, [r4, #16]
 800ec02:	65a1      	str	r1, [r4, #88]	; 0x58
 800ec04:	f04f 0900 	mov.w	r9, #0
 800ec08:	e7de      	b.n	800ebc8 <_printf_float+0x16c>
 800ec0a:	b913      	cbnz	r3, 800ec12 <_printf_float+0x1b6>
 800ec0c:	6822      	ldr	r2, [r4, #0]
 800ec0e:	07d2      	lsls	r2, r2, #31
 800ec10:	d501      	bpl.n	800ec16 <_printf_float+0x1ba>
 800ec12:	3302      	adds	r3, #2
 800ec14:	e7f4      	b.n	800ec00 <_printf_float+0x1a4>
 800ec16:	2301      	movs	r3, #1
 800ec18:	e7f2      	b.n	800ec00 <_printf_float+0x1a4>
 800ec1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ec1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec20:	4299      	cmp	r1, r3
 800ec22:	db05      	blt.n	800ec30 <_printf_float+0x1d4>
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	6121      	str	r1, [r4, #16]
 800ec28:	07d8      	lsls	r0, r3, #31
 800ec2a:	d5ea      	bpl.n	800ec02 <_printf_float+0x1a6>
 800ec2c:	1c4b      	adds	r3, r1, #1
 800ec2e:	e7e7      	b.n	800ec00 <_printf_float+0x1a4>
 800ec30:	2900      	cmp	r1, #0
 800ec32:	bfd4      	ite	le
 800ec34:	f1c1 0202 	rsble	r2, r1, #2
 800ec38:	2201      	movgt	r2, #1
 800ec3a:	4413      	add	r3, r2
 800ec3c:	e7e0      	b.n	800ec00 <_printf_float+0x1a4>
 800ec3e:	6823      	ldr	r3, [r4, #0]
 800ec40:	055a      	lsls	r2, r3, #21
 800ec42:	d407      	bmi.n	800ec54 <_printf_float+0x1f8>
 800ec44:	6923      	ldr	r3, [r4, #16]
 800ec46:	4642      	mov	r2, r8
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	47b8      	blx	r7
 800ec4e:	3001      	adds	r0, #1
 800ec50:	d12c      	bne.n	800ecac <_printf_float+0x250>
 800ec52:	e764      	b.n	800eb1e <_printf_float+0xc2>
 800ec54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec58:	f240 80e0 	bls.w	800ee1c <_printf_float+0x3c0>
 800ec5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec60:	2200      	movs	r2, #0
 800ec62:	2300      	movs	r3, #0
 800ec64:	f7f1 ff30 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d034      	beq.n	800ecd6 <_printf_float+0x27a>
 800ec6c:	4a37      	ldr	r2, [pc, #220]	; (800ed4c <_printf_float+0x2f0>)
 800ec6e:	2301      	movs	r3, #1
 800ec70:	4631      	mov	r1, r6
 800ec72:	4628      	mov	r0, r5
 800ec74:	47b8      	blx	r7
 800ec76:	3001      	adds	r0, #1
 800ec78:	f43f af51 	beq.w	800eb1e <_printf_float+0xc2>
 800ec7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec80:	429a      	cmp	r2, r3
 800ec82:	db02      	blt.n	800ec8a <_printf_float+0x22e>
 800ec84:	6823      	ldr	r3, [r4, #0]
 800ec86:	07d8      	lsls	r0, r3, #31
 800ec88:	d510      	bpl.n	800ecac <_printf_float+0x250>
 800ec8a:	ee18 3a10 	vmov	r3, s16
 800ec8e:	4652      	mov	r2, sl
 800ec90:	4631      	mov	r1, r6
 800ec92:	4628      	mov	r0, r5
 800ec94:	47b8      	blx	r7
 800ec96:	3001      	adds	r0, #1
 800ec98:	f43f af41 	beq.w	800eb1e <_printf_float+0xc2>
 800ec9c:	f04f 0800 	mov.w	r8, #0
 800eca0:	f104 091a 	add.w	r9, r4, #26
 800eca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eca6:	3b01      	subs	r3, #1
 800eca8:	4543      	cmp	r3, r8
 800ecaa:	dc09      	bgt.n	800ecc0 <_printf_float+0x264>
 800ecac:	6823      	ldr	r3, [r4, #0]
 800ecae:	079b      	lsls	r3, r3, #30
 800ecb0:	f100 8105 	bmi.w	800eebe <_printf_float+0x462>
 800ecb4:	68e0      	ldr	r0, [r4, #12]
 800ecb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecb8:	4298      	cmp	r0, r3
 800ecba:	bfb8      	it	lt
 800ecbc:	4618      	movlt	r0, r3
 800ecbe:	e730      	b.n	800eb22 <_printf_float+0xc6>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	464a      	mov	r2, r9
 800ecc4:	4631      	mov	r1, r6
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	47b8      	blx	r7
 800ecca:	3001      	adds	r0, #1
 800eccc:	f43f af27 	beq.w	800eb1e <_printf_float+0xc2>
 800ecd0:	f108 0801 	add.w	r8, r8, #1
 800ecd4:	e7e6      	b.n	800eca4 <_printf_float+0x248>
 800ecd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	dc39      	bgt.n	800ed50 <_printf_float+0x2f4>
 800ecdc:	4a1b      	ldr	r2, [pc, #108]	; (800ed4c <_printf_float+0x2f0>)
 800ecde:	2301      	movs	r3, #1
 800ece0:	4631      	mov	r1, r6
 800ece2:	4628      	mov	r0, r5
 800ece4:	47b8      	blx	r7
 800ece6:	3001      	adds	r0, #1
 800ece8:	f43f af19 	beq.w	800eb1e <_printf_float+0xc2>
 800ecec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	d102      	bne.n	800ecfa <_printf_float+0x29e>
 800ecf4:	6823      	ldr	r3, [r4, #0]
 800ecf6:	07d9      	lsls	r1, r3, #31
 800ecf8:	d5d8      	bpl.n	800ecac <_printf_float+0x250>
 800ecfa:	ee18 3a10 	vmov	r3, s16
 800ecfe:	4652      	mov	r2, sl
 800ed00:	4631      	mov	r1, r6
 800ed02:	4628      	mov	r0, r5
 800ed04:	47b8      	blx	r7
 800ed06:	3001      	adds	r0, #1
 800ed08:	f43f af09 	beq.w	800eb1e <_printf_float+0xc2>
 800ed0c:	f04f 0900 	mov.w	r9, #0
 800ed10:	f104 0a1a 	add.w	sl, r4, #26
 800ed14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed16:	425b      	negs	r3, r3
 800ed18:	454b      	cmp	r3, r9
 800ed1a:	dc01      	bgt.n	800ed20 <_printf_float+0x2c4>
 800ed1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed1e:	e792      	b.n	800ec46 <_printf_float+0x1ea>
 800ed20:	2301      	movs	r3, #1
 800ed22:	4652      	mov	r2, sl
 800ed24:	4631      	mov	r1, r6
 800ed26:	4628      	mov	r0, r5
 800ed28:	47b8      	blx	r7
 800ed2a:	3001      	adds	r0, #1
 800ed2c:	f43f aef7 	beq.w	800eb1e <_printf_float+0xc2>
 800ed30:	f109 0901 	add.w	r9, r9, #1
 800ed34:	e7ee      	b.n	800ed14 <_printf_float+0x2b8>
 800ed36:	bf00      	nop
 800ed38:	7fefffff 	.word	0x7fefffff
 800ed3c:	08014d90 	.word	0x08014d90
 800ed40:	08014d94 	.word	0x08014d94
 800ed44:	08014d9c 	.word	0x08014d9c
 800ed48:	08014d98 	.word	0x08014d98
 800ed4c:	0801316e 	.word	0x0801316e
 800ed50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed54:	429a      	cmp	r2, r3
 800ed56:	bfa8      	it	ge
 800ed58:	461a      	movge	r2, r3
 800ed5a:	2a00      	cmp	r2, #0
 800ed5c:	4691      	mov	r9, r2
 800ed5e:	dc37      	bgt.n	800edd0 <_printf_float+0x374>
 800ed60:	f04f 0b00 	mov.w	fp, #0
 800ed64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed68:	f104 021a 	add.w	r2, r4, #26
 800ed6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed6e:	9305      	str	r3, [sp, #20]
 800ed70:	eba3 0309 	sub.w	r3, r3, r9
 800ed74:	455b      	cmp	r3, fp
 800ed76:	dc33      	bgt.n	800ede0 <_printf_float+0x384>
 800ed78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	db3b      	blt.n	800edf8 <_printf_float+0x39c>
 800ed80:	6823      	ldr	r3, [r4, #0]
 800ed82:	07da      	lsls	r2, r3, #31
 800ed84:	d438      	bmi.n	800edf8 <_printf_float+0x39c>
 800ed86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed88:	9a05      	ldr	r2, [sp, #20]
 800ed8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed8c:	1a9a      	subs	r2, r3, r2
 800ed8e:	eba3 0901 	sub.w	r9, r3, r1
 800ed92:	4591      	cmp	r9, r2
 800ed94:	bfa8      	it	ge
 800ed96:	4691      	movge	r9, r2
 800ed98:	f1b9 0f00 	cmp.w	r9, #0
 800ed9c:	dc35      	bgt.n	800ee0a <_printf_float+0x3ae>
 800ed9e:	f04f 0800 	mov.w	r8, #0
 800eda2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eda6:	f104 0a1a 	add.w	sl, r4, #26
 800edaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800edae:	1a9b      	subs	r3, r3, r2
 800edb0:	eba3 0309 	sub.w	r3, r3, r9
 800edb4:	4543      	cmp	r3, r8
 800edb6:	f77f af79 	ble.w	800ecac <_printf_float+0x250>
 800edba:	2301      	movs	r3, #1
 800edbc:	4652      	mov	r2, sl
 800edbe:	4631      	mov	r1, r6
 800edc0:	4628      	mov	r0, r5
 800edc2:	47b8      	blx	r7
 800edc4:	3001      	adds	r0, #1
 800edc6:	f43f aeaa 	beq.w	800eb1e <_printf_float+0xc2>
 800edca:	f108 0801 	add.w	r8, r8, #1
 800edce:	e7ec      	b.n	800edaa <_printf_float+0x34e>
 800edd0:	4613      	mov	r3, r2
 800edd2:	4631      	mov	r1, r6
 800edd4:	4642      	mov	r2, r8
 800edd6:	4628      	mov	r0, r5
 800edd8:	47b8      	blx	r7
 800edda:	3001      	adds	r0, #1
 800eddc:	d1c0      	bne.n	800ed60 <_printf_float+0x304>
 800edde:	e69e      	b.n	800eb1e <_printf_float+0xc2>
 800ede0:	2301      	movs	r3, #1
 800ede2:	4631      	mov	r1, r6
 800ede4:	4628      	mov	r0, r5
 800ede6:	9205      	str	r2, [sp, #20]
 800ede8:	47b8      	blx	r7
 800edea:	3001      	adds	r0, #1
 800edec:	f43f ae97 	beq.w	800eb1e <_printf_float+0xc2>
 800edf0:	9a05      	ldr	r2, [sp, #20]
 800edf2:	f10b 0b01 	add.w	fp, fp, #1
 800edf6:	e7b9      	b.n	800ed6c <_printf_float+0x310>
 800edf8:	ee18 3a10 	vmov	r3, s16
 800edfc:	4652      	mov	r2, sl
 800edfe:	4631      	mov	r1, r6
 800ee00:	4628      	mov	r0, r5
 800ee02:	47b8      	blx	r7
 800ee04:	3001      	adds	r0, #1
 800ee06:	d1be      	bne.n	800ed86 <_printf_float+0x32a>
 800ee08:	e689      	b.n	800eb1e <_printf_float+0xc2>
 800ee0a:	9a05      	ldr	r2, [sp, #20]
 800ee0c:	464b      	mov	r3, r9
 800ee0e:	4442      	add	r2, r8
 800ee10:	4631      	mov	r1, r6
 800ee12:	4628      	mov	r0, r5
 800ee14:	47b8      	blx	r7
 800ee16:	3001      	adds	r0, #1
 800ee18:	d1c1      	bne.n	800ed9e <_printf_float+0x342>
 800ee1a:	e680      	b.n	800eb1e <_printf_float+0xc2>
 800ee1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee1e:	2a01      	cmp	r2, #1
 800ee20:	dc01      	bgt.n	800ee26 <_printf_float+0x3ca>
 800ee22:	07db      	lsls	r3, r3, #31
 800ee24:	d538      	bpl.n	800ee98 <_printf_float+0x43c>
 800ee26:	2301      	movs	r3, #1
 800ee28:	4642      	mov	r2, r8
 800ee2a:	4631      	mov	r1, r6
 800ee2c:	4628      	mov	r0, r5
 800ee2e:	47b8      	blx	r7
 800ee30:	3001      	adds	r0, #1
 800ee32:	f43f ae74 	beq.w	800eb1e <_printf_float+0xc2>
 800ee36:	ee18 3a10 	vmov	r3, s16
 800ee3a:	4652      	mov	r2, sl
 800ee3c:	4631      	mov	r1, r6
 800ee3e:	4628      	mov	r0, r5
 800ee40:	47b8      	blx	r7
 800ee42:	3001      	adds	r0, #1
 800ee44:	f43f ae6b 	beq.w	800eb1e <_printf_float+0xc2>
 800ee48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f7f1 fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee54:	b9d8      	cbnz	r0, 800ee8e <_printf_float+0x432>
 800ee56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee58:	f108 0201 	add.w	r2, r8, #1
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	4631      	mov	r1, r6
 800ee60:	4628      	mov	r0, r5
 800ee62:	47b8      	blx	r7
 800ee64:	3001      	adds	r0, #1
 800ee66:	d10e      	bne.n	800ee86 <_printf_float+0x42a>
 800ee68:	e659      	b.n	800eb1e <_printf_float+0xc2>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	4652      	mov	r2, sl
 800ee6e:	4631      	mov	r1, r6
 800ee70:	4628      	mov	r0, r5
 800ee72:	47b8      	blx	r7
 800ee74:	3001      	adds	r0, #1
 800ee76:	f43f ae52 	beq.w	800eb1e <_printf_float+0xc2>
 800ee7a:	f108 0801 	add.w	r8, r8, #1
 800ee7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee80:	3b01      	subs	r3, #1
 800ee82:	4543      	cmp	r3, r8
 800ee84:	dcf1      	bgt.n	800ee6a <_printf_float+0x40e>
 800ee86:	464b      	mov	r3, r9
 800ee88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee8c:	e6dc      	b.n	800ec48 <_printf_float+0x1ec>
 800ee8e:	f04f 0800 	mov.w	r8, #0
 800ee92:	f104 0a1a 	add.w	sl, r4, #26
 800ee96:	e7f2      	b.n	800ee7e <_printf_float+0x422>
 800ee98:	2301      	movs	r3, #1
 800ee9a:	4642      	mov	r2, r8
 800ee9c:	e7df      	b.n	800ee5e <_printf_float+0x402>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	464a      	mov	r2, r9
 800eea2:	4631      	mov	r1, r6
 800eea4:	4628      	mov	r0, r5
 800eea6:	47b8      	blx	r7
 800eea8:	3001      	adds	r0, #1
 800eeaa:	f43f ae38 	beq.w	800eb1e <_printf_float+0xc2>
 800eeae:	f108 0801 	add.w	r8, r8, #1
 800eeb2:	68e3      	ldr	r3, [r4, #12]
 800eeb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eeb6:	1a5b      	subs	r3, r3, r1
 800eeb8:	4543      	cmp	r3, r8
 800eeba:	dcf0      	bgt.n	800ee9e <_printf_float+0x442>
 800eebc:	e6fa      	b.n	800ecb4 <_printf_float+0x258>
 800eebe:	f04f 0800 	mov.w	r8, #0
 800eec2:	f104 0919 	add.w	r9, r4, #25
 800eec6:	e7f4      	b.n	800eeb2 <_printf_float+0x456>

0800eec8 <_printf_common>:
 800eec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eecc:	4616      	mov	r6, r2
 800eece:	4699      	mov	r9, r3
 800eed0:	688a      	ldr	r2, [r1, #8]
 800eed2:	690b      	ldr	r3, [r1, #16]
 800eed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eed8:	4293      	cmp	r3, r2
 800eeda:	bfb8      	it	lt
 800eedc:	4613      	movlt	r3, r2
 800eede:	6033      	str	r3, [r6, #0]
 800eee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eee4:	4607      	mov	r7, r0
 800eee6:	460c      	mov	r4, r1
 800eee8:	b10a      	cbz	r2, 800eeee <_printf_common+0x26>
 800eeea:	3301      	adds	r3, #1
 800eeec:	6033      	str	r3, [r6, #0]
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	0699      	lsls	r1, r3, #26
 800eef2:	bf42      	ittt	mi
 800eef4:	6833      	ldrmi	r3, [r6, #0]
 800eef6:	3302      	addmi	r3, #2
 800eef8:	6033      	strmi	r3, [r6, #0]
 800eefa:	6825      	ldr	r5, [r4, #0]
 800eefc:	f015 0506 	ands.w	r5, r5, #6
 800ef00:	d106      	bne.n	800ef10 <_printf_common+0x48>
 800ef02:	f104 0a19 	add.w	sl, r4, #25
 800ef06:	68e3      	ldr	r3, [r4, #12]
 800ef08:	6832      	ldr	r2, [r6, #0]
 800ef0a:	1a9b      	subs	r3, r3, r2
 800ef0c:	42ab      	cmp	r3, r5
 800ef0e:	dc26      	bgt.n	800ef5e <_printf_common+0x96>
 800ef10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef14:	1e13      	subs	r3, r2, #0
 800ef16:	6822      	ldr	r2, [r4, #0]
 800ef18:	bf18      	it	ne
 800ef1a:	2301      	movne	r3, #1
 800ef1c:	0692      	lsls	r2, r2, #26
 800ef1e:	d42b      	bmi.n	800ef78 <_printf_common+0xb0>
 800ef20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef24:	4649      	mov	r1, r9
 800ef26:	4638      	mov	r0, r7
 800ef28:	47c0      	blx	r8
 800ef2a:	3001      	adds	r0, #1
 800ef2c:	d01e      	beq.n	800ef6c <_printf_common+0xa4>
 800ef2e:	6823      	ldr	r3, [r4, #0]
 800ef30:	68e5      	ldr	r5, [r4, #12]
 800ef32:	6832      	ldr	r2, [r6, #0]
 800ef34:	f003 0306 	and.w	r3, r3, #6
 800ef38:	2b04      	cmp	r3, #4
 800ef3a:	bf08      	it	eq
 800ef3c:	1aad      	subeq	r5, r5, r2
 800ef3e:	68a3      	ldr	r3, [r4, #8]
 800ef40:	6922      	ldr	r2, [r4, #16]
 800ef42:	bf0c      	ite	eq
 800ef44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef48:	2500      	movne	r5, #0
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	bfc4      	itt	gt
 800ef4e:	1a9b      	subgt	r3, r3, r2
 800ef50:	18ed      	addgt	r5, r5, r3
 800ef52:	2600      	movs	r6, #0
 800ef54:	341a      	adds	r4, #26
 800ef56:	42b5      	cmp	r5, r6
 800ef58:	d11a      	bne.n	800ef90 <_printf_common+0xc8>
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	e008      	b.n	800ef70 <_printf_common+0xa8>
 800ef5e:	2301      	movs	r3, #1
 800ef60:	4652      	mov	r2, sl
 800ef62:	4649      	mov	r1, r9
 800ef64:	4638      	mov	r0, r7
 800ef66:	47c0      	blx	r8
 800ef68:	3001      	adds	r0, #1
 800ef6a:	d103      	bne.n	800ef74 <_printf_common+0xac>
 800ef6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef74:	3501      	adds	r5, #1
 800ef76:	e7c6      	b.n	800ef06 <_printf_common+0x3e>
 800ef78:	18e1      	adds	r1, r4, r3
 800ef7a:	1c5a      	adds	r2, r3, #1
 800ef7c:	2030      	movs	r0, #48	; 0x30
 800ef7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef82:	4422      	add	r2, r4
 800ef84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef8c:	3302      	adds	r3, #2
 800ef8e:	e7c7      	b.n	800ef20 <_printf_common+0x58>
 800ef90:	2301      	movs	r3, #1
 800ef92:	4622      	mov	r2, r4
 800ef94:	4649      	mov	r1, r9
 800ef96:	4638      	mov	r0, r7
 800ef98:	47c0      	blx	r8
 800ef9a:	3001      	adds	r0, #1
 800ef9c:	d0e6      	beq.n	800ef6c <_printf_common+0xa4>
 800ef9e:	3601      	adds	r6, #1
 800efa0:	e7d9      	b.n	800ef56 <_printf_common+0x8e>
	...

0800efa4 <_printf_i>:
 800efa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efa8:	7e0f      	ldrb	r7, [r1, #24]
 800efaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800efac:	2f78      	cmp	r7, #120	; 0x78
 800efae:	4691      	mov	r9, r2
 800efb0:	4680      	mov	r8, r0
 800efb2:	460c      	mov	r4, r1
 800efb4:	469a      	mov	sl, r3
 800efb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800efba:	d807      	bhi.n	800efcc <_printf_i+0x28>
 800efbc:	2f62      	cmp	r7, #98	; 0x62
 800efbe:	d80a      	bhi.n	800efd6 <_printf_i+0x32>
 800efc0:	2f00      	cmp	r7, #0
 800efc2:	f000 80d8 	beq.w	800f176 <_printf_i+0x1d2>
 800efc6:	2f58      	cmp	r7, #88	; 0x58
 800efc8:	f000 80a3 	beq.w	800f112 <_printf_i+0x16e>
 800efcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efd4:	e03a      	b.n	800f04c <_printf_i+0xa8>
 800efd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efda:	2b15      	cmp	r3, #21
 800efdc:	d8f6      	bhi.n	800efcc <_printf_i+0x28>
 800efde:	a101      	add	r1, pc, #4	; (adr r1, 800efe4 <_printf_i+0x40>)
 800efe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800efe4:	0800f03d 	.word	0x0800f03d
 800efe8:	0800f051 	.word	0x0800f051
 800efec:	0800efcd 	.word	0x0800efcd
 800eff0:	0800efcd 	.word	0x0800efcd
 800eff4:	0800efcd 	.word	0x0800efcd
 800eff8:	0800efcd 	.word	0x0800efcd
 800effc:	0800f051 	.word	0x0800f051
 800f000:	0800efcd 	.word	0x0800efcd
 800f004:	0800efcd 	.word	0x0800efcd
 800f008:	0800efcd 	.word	0x0800efcd
 800f00c:	0800efcd 	.word	0x0800efcd
 800f010:	0800f15d 	.word	0x0800f15d
 800f014:	0800f081 	.word	0x0800f081
 800f018:	0800f13f 	.word	0x0800f13f
 800f01c:	0800efcd 	.word	0x0800efcd
 800f020:	0800efcd 	.word	0x0800efcd
 800f024:	0800f17f 	.word	0x0800f17f
 800f028:	0800efcd 	.word	0x0800efcd
 800f02c:	0800f081 	.word	0x0800f081
 800f030:	0800efcd 	.word	0x0800efcd
 800f034:	0800efcd 	.word	0x0800efcd
 800f038:	0800f147 	.word	0x0800f147
 800f03c:	682b      	ldr	r3, [r5, #0]
 800f03e:	1d1a      	adds	r2, r3, #4
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	602a      	str	r2, [r5, #0]
 800f044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f04c:	2301      	movs	r3, #1
 800f04e:	e0a3      	b.n	800f198 <_printf_i+0x1f4>
 800f050:	6820      	ldr	r0, [r4, #0]
 800f052:	6829      	ldr	r1, [r5, #0]
 800f054:	0606      	lsls	r6, r0, #24
 800f056:	f101 0304 	add.w	r3, r1, #4
 800f05a:	d50a      	bpl.n	800f072 <_printf_i+0xce>
 800f05c:	680e      	ldr	r6, [r1, #0]
 800f05e:	602b      	str	r3, [r5, #0]
 800f060:	2e00      	cmp	r6, #0
 800f062:	da03      	bge.n	800f06c <_printf_i+0xc8>
 800f064:	232d      	movs	r3, #45	; 0x2d
 800f066:	4276      	negs	r6, r6
 800f068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f06c:	485e      	ldr	r0, [pc, #376]	; (800f1e8 <_printf_i+0x244>)
 800f06e:	230a      	movs	r3, #10
 800f070:	e019      	b.n	800f0a6 <_printf_i+0x102>
 800f072:	680e      	ldr	r6, [r1, #0]
 800f074:	602b      	str	r3, [r5, #0]
 800f076:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f07a:	bf18      	it	ne
 800f07c:	b236      	sxthne	r6, r6
 800f07e:	e7ef      	b.n	800f060 <_printf_i+0xbc>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	6820      	ldr	r0, [r4, #0]
 800f084:	1d19      	adds	r1, r3, #4
 800f086:	6029      	str	r1, [r5, #0]
 800f088:	0601      	lsls	r1, r0, #24
 800f08a:	d501      	bpl.n	800f090 <_printf_i+0xec>
 800f08c:	681e      	ldr	r6, [r3, #0]
 800f08e:	e002      	b.n	800f096 <_printf_i+0xf2>
 800f090:	0646      	lsls	r6, r0, #25
 800f092:	d5fb      	bpl.n	800f08c <_printf_i+0xe8>
 800f094:	881e      	ldrh	r6, [r3, #0]
 800f096:	4854      	ldr	r0, [pc, #336]	; (800f1e8 <_printf_i+0x244>)
 800f098:	2f6f      	cmp	r7, #111	; 0x6f
 800f09a:	bf0c      	ite	eq
 800f09c:	2308      	moveq	r3, #8
 800f09e:	230a      	movne	r3, #10
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0a6:	6865      	ldr	r5, [r4, #4]
 800f0a8:	60a5      	str	r5, [r4, #8]
 800f0aa:	2d00      	cmp	r5, #0
 800f0ac:	bfa2      	ittt	ge
 800f0ae:	6821      	ldrge	r1, [r4, #0]
 800f0b0:	f021 0104 	bicge.w	r1, r1, #4
 800f0b4:	6021      	strge	r1, [r4, #0]
 800f0b6:	b90e      	cbnz	r6, 800f0bc <_printf_i+0x118>
 800f0b8:	2d00      	cmp	r5, #0
 800f0ba:	d04d      	beq.n	800f158 <_printf_i+0x1b4>
 800f0bc:	4615      	mov	r5, r2
 800f0be:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0c2:	fb03 6711 	mls	r7, r3, r1, r6
 800f0c6:	5dc7      	ldrb	r7, [r0, r7]
 800f0c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f0cc:	4637      	mov	r7, r6
 800f0ce:	42bb      	cmp	r3, r7
 800f0d0:	460e      	mov	r6, r1
 800f0d2:	d9f4      	bls.n	800f0be <_printf_i+0x11a>
 800f0d4:	2b08      	cmp	r3, #8
 800f0d6:	d10b      	bne.n	800f0f0 <_printf_i+0x14c>
 800f0d8:	6823      	ldr	r3, [r4, #0]
 800f0da:	07de      	lsls	r6, r3, #31
 800f0dc:	d508      	bpl.n	800f0f0 <_printf_i+0x14c>
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	6861      	ldr	r1, [r4, #4]
 800f0e2:	4299      	cmp	r1, r3
 800f0e4:	bfde      	ittt	le
 800f0e6:	2330      	movle	r3, #48	; 0x30
 800f0e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f0ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f0f0:	1b52      	subs	r2, r2, r5
 800f0f2:	6122      	str	r2, [r4, #16]
 800f0f4:	f8cd a000 	str.w	sl, [sp]
 800f0f8:	464b      	mov	r3, r9
 800f0fa:	aa03      	add	r2, sp, #12
 800f0fc:	4621      	mov	r1, r4
 800f0fe:	4640      	mov	r0, r8
 800f100:	f7ff fee2 	bl	800eec8 <_printf_common>
 800f104:	3001      	adds	r0, #1
 800f106:	d14c      	bne.n	800f1a2 <_printf_i+0x1fe>
 800f108:	f04f 30ff 	mov.w	r0, #4294967295
 800f10c:	b004      	add	sp, #16
 800f10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f112:	4835      	ldr	r0, [pc, #212]	; (800f1e8 <_printf_i+0x244>)
 800f114:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f118:	6829      	ldr	r1, [r5, #0]
 800f11a:	6823      	ldr	r3, [r4, #0]
 800f11c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f120:	6029      	str	r1, [r5, #0]
 800f122:	061d      	lsls	r5, r3, #24
 800f124:	d514      	bpl.n	800f150 <_printf_i+0x1ac>
 800f126:	07df      	lsls	r7, r3, #31
 800f128:	bf44      	itt	mi
 800f12a:	f043 0320 	orrmi.w	r3, r3, #32
 800f12e:	6023      	strmi	r3, [r4, #0]
 800f130:	b91e      	cbnz	r6, 800f13a <_printf_i+0x196>
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	f023 0320 	bic.w	r3, r3, #32
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	2310      	movs	r3, #16
 800f13c:	e7b0      	b.n	800f0a0 <_printf_i+0xfc>
 800f13e:	6823      	ldr	r3, [r4, #0]
 800f140:	f043 0320 	orr.w	r3, r3, #32
 800f144:	6023      	str	r3, [r4, #0]
 800f146:	2378      	movs	r3, #120	; 0x78
 800f148:	4828      	ldr	r0, [pc, #160]	; (800f1ec <_printf_i+0x248>)
 800f14a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f14e:	e7e3      	b.n	800f118 <_printf_i+0x174>
 800f150:	0659      	lsls	r1, r3, #25
 800f152:	bf48      	it	mi
 800f154:	b2b6      	uxthmi	r6, r6
 800f156:	e7e6      	b.n	800f126 <_printf_i+0x182>
 800f158:	4615      	mov	r5, r2
 800f15a:	e7bb      	b.n	800f0d4 <_printf_i+0x130>
 800f15c:	682b      	ldr	r3, [r5, #0]
 800f15e:	6826      	ldr	r6, [r4, #0]
 800f160:	6961      	ldr	r1, [r4, #20]
 800f162:	1d18      	adds	r0, r3, #4
 800f164:	6028      	str	r0, [r5, #0]
 800f166:	0635      	lsls	r5, r6, #24
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	d501      	bpl.n	800f170 <_printf_i+0x1cc>
 800f16c:	6019      	str	r1, [r3, #0]
 800f16e:	e002      	b.n	800f176 <_printf_i+0x1d2>
 800f170:	0670      	lsls	r0, r6, #25
 800f172:	d5fb      	bpl.n	800f16c <_printf_i+0x1c8>
 800f174:	8019      	strh	r1, [r3, #0]
 800f176:	2300      	movs	r3, #0
 800f178:	6123      	str	r3, [r4, #16]
 800f17a:	4615      	mov	r5, r2
 800f17c:	e7ba      	b.n	800f0f4 <_printf_i+0x150>
 800f17e:	682b      	ldr	r3, [r5, #0]
 800f180:	1d1a      	adds	r2, r3, #4
 800f182:	602a      	str	r2, [r5, #0]
 800f184:	681d      	ldr	r5, [r3, #0]
 800f186:	6862      	ldr	r2, [r4, #4]
 800f188:	2100      	movs	r1, #0
 800f18a:	4628      	mov	r0, r5
 800f18c:	f7f1 f828 	bl	80001e0 <memchr>
 800f190:	b108      	cbz	r0, 800f196 <_printf_i+0x1f2>
 800f192:	1b40      	subs	r0, r0, r5
 800f194:	6060      	str	r0, [r4, #4]
 800f196:	6863      	ldr	r3, [r4, #4]
 800f198:	6123      	str	r3, [r4, #16]
 800f19a:	2300      	movs	r3, #0
 800f19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1a0:	e7a8      	b.n	800f0f4 <_printf_i+0x150>
 800f1a2:	6923      	ldr	r3, [r4, #16]
 800f1a4:	462a      	mov	r2, r5
 800f1a6:	4649      	mov	r1, r9
 800f1a8:	4640      	mov	r0, r8
 800f1aa:	47d0      	blx	sl
 800f1ac:	3001      	adds	r0, #1
 800f1ae:	d0ab      	beq.n	800f108 <_printf_i+0x164>
 800f1b0:	6823      	ldr	r3, [r4, #0]
 800f1b2:	079b      	lsls	r3, r3, #30
 800f1b4:	d413      	bmi.n	800f1de <_printf_i+0x23a>
 800f1b6:	68e0      	ldr	r0, [r4, #12]
 800f1b8:	9b03      	ldr	r3, [sp, #12]
 800f1ba:	4298      	cmp	r0, r3
 800f1bc:	bfb8      	it	lt
 800f1be:	4618      	movlt	r0, r3
 800f1c0:	e7a4      	b.n	800f10c <_printf_i+0x168>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	4649      	mov	r1, r9
 800f1c8:	4640      	mov	r0, r8
 800f1ca:	47d0      	blx	sl
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	d09b      	beq.n	800f108 <_printf_i+0x164>
 800f1d0:	3501      	adds	r5, #1
 800f1d2:	68e3      	ldr	r3, [r4, #12]
 800f1d4:	9903      	ldr	r1, [sp, #12]
 800f1d6:	1a5b      	subs	r3, r3, r1
 800f1d8:	42ab      	cmp	r3, r5
 800f1da:	dcf2      	bgt.n	800f1c2 <_printf_i+0x21e>
 800f1dc:	e7eb      	b.n	800f1b6 <_printf_i+0x212>
 800f1de:	2500      	movs	r5, #0
 800f1e0:	f104 0619 	add.w	r6, r4, #25
 800f1e4:	e7f5      	b.n	800f1d2 <_printf_i+0x22e>
 800f1e6:	bf00      	nop
 800f1e8:	08014da0 	.word	0x08014da0
 800f1ec:	08014db1 	.word	0x08014db1

0800f1f0 <siprintf>:
 800f1f0:	b40e      	push	{r1, r2, r3}
 800f1f2:	b500      	push	{lr}
 800f1f4:	b09c      	sub	sp, #112	; 0x70
 800f1f6:	ab1d      	add	r3, sp, #116	; 0x74
 800f1f8:	9002      	str	r0, [sp, #8]
 800f1fa:	9006      	str	r0, [sp, #24]
 800f1fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f200:	4809      	ldr	r0, [pc, #36]	; (800f228 <siprintf+0x38>)
 800f202:	9107      	str	r1, [sp, #28]
 800f204:	9104      	str	r1, [sp, #16]
 800f206:	4909      	ldr	r1, [pc, #36]	; (800f22c <siprintf+0x3c>)
 800f208:	f853 2b04 	ldr.w	r2, [r3], #4
 800f20c:	9105      	str	r1, [sp, #20]
 800f20e:	6800      	ldr	r0, [r0, #0]
 800f210:	9301      	str	r3, [sp, #4]
 800f212:	a902      	add	r1, sp, #8
 800f214:	f002 feb0 	bl	8011f78 <_svfiprintf_r>
 800f218:	9b02      	ldr	r3, [sp, #8]
 800f21a:	2200      	movs	r2, #0
 800f21c:	701a      	strb	r2, [r3, #0]
 800f21e:	b01c      	add	sp, #112	; 0x70
 800f220:	f85d eb04 	ldr.w	lr, [sp], #4
 800f224:	b003      	add	sp, #12
 800f226:	4770      	bx	lr
 800f228:	20000184 	.word	0x20000184
 800f22c:	ffff0208 	.word	0xffff0208

0800f230 <strcpy>:
 800f230:	4603      	mov	r3, r0
 800f232:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f236:	f803 2b01 	strb.w	r2, [r3], #1
 800f23a:	2a00      	cmp	r2, #0
 800f23c:	d1f9      	bne.n	800f232 <strcpy+0x2>
 800f23e:	4770      	bx	lr

0800f240 <sulp>:
 800f240:	b570      	push	{r4, r5, r6, lr}
 800f242:	4604      	mov	r4, r0
 800f244:	460d      	mov	r5, r1
 800f246:	ec45 4b10 	vmov	d0, r4, r5
 800f24a:	4616      	mov	r6, r2
 800f24c:	f002 fbf2 	bl	8011a34 <__ulp>
 800f250:	ec51 0b10 	vmov	r0, r1, d0
 800f254:	b17e      	cbz	r6, 800f276 <sulp+0x36>
 800f256:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f25a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f25e:	2b00      	cmp	r3, #0
 800f260:	dd09      	ble.n	800f276 <sulp+0x36>
 800f262:	051b      	lsls	r3, r3, #20
 800f264:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f268:	2400      	movs	r4, #0
 800f26a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f26e:	4622      	mov	r2, r4
 800f270:	462b      	mov	r3, r5
 800f272:	f7f1 f9c1 	bl	80005f8 <__aeabi_dmul>
 800f276:	bd70      	pop	{r4, r5, r6, pc}

0800f278 <_strtod_l>:
 800f278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f27c:	ed2d 8b02 	vpush	{d8}
 800f280:	b09d      	sub	sp, #116	; 0x74
 800f282:	461f      	mov	r7, r3
 800f284:	2300      	movs	r3, #0
 800f286:	9318      	str	r3, [sp, #96]	; 0x60
 800f288:	4ba2      	ldr	r3, [pc, #648]	; (800f514 <_strtod_l+0x29c>)
 800f28a:	9213      	str	r2, [sp, #76]	; 0x4c
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	9305      	str	r3, [sp, #20]
 800f290:	4604      	mov	r4, r0
 800f292:	4618      	mov	r0, r3
 800f294:	4688      	mov	r8, r1
 800f296:	f7f0 ff9b 	bl	80001d0 <strlen>
 800f29a:	f04f 0a00 	mov.w	sl, #0
 800f29e:	4605      	mov	r5, r0
 800f2a0:	f04f 0b00 	mov.w	fp, #0
 800f2a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f2a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f2aa:	781a      	ldrb	r2, [r3, #0]
 800f2ac:	2a2b      	cmp	r2, #43	; 0x2b
 800f2ae:	d04e      	beq.n	800f34e <_strtod_l+0xd6>
 800f2b0:	d83b      	bhi.n	800f32a <_strtod_l+0xb2>
 800f2b2:	2a0d      	cmp	r2, #13
 800f2b4:	d834      	bhi.n	800f320 <_strtod_l+0xa8>
 800f2b6:	2a08      	cmp	r2, #8
 800f2b8:	d834      	bhi.n	800f324 <_strtod_l+0xac>
 800f2ba:	2a00      	cmp	r2, #0
 800f2bc:	d03e      	beq.n	800f33c <_strtod_l+0xc4>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	930a      	str	r3, [sp, #40]	; 0x28
 800f2c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f2c4:	7833      	ldrb	r3, [r6, #0]
 800f2c6:	2b30      	cmp	r3, #48	; 0x30
 800f2c8:	f040 80b0 	bne.w	800f42c <_strtod_l+0x1b4>
 800f2cc:	7873      	ldrb	r3, [r6, #1]
 800f2ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f2d2:	2b58      	cmp	r3, #88	; 0x58
 800f2d4:	d168      	bne.n	800f3a8 <_strtod_l+0x130>
 800f2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d8:	9301      	str	r3, [sp, #4]
 800f2da:	ab18      	add	r3, sp, #96	; 0x60
 800f2dc:	9702      	str	r7, [sp, #8]
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	4a8d      	ldr	r2, [pc, #564]	; (800f518 <_strtod_l+0x2a0>)
 800f2e2:	ab19      	add	r3, sp, #100	; 0x64
 800f2e4:	a917      	add	r1, sp, #92	; 0x5c
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f001 fd0c 	bl	8010d04 <__gethex>
 800f2ec:	f010 0707 	ands.w	r7, r0, #7
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	d005      	beq.n	800f300 <_strtod_l+0x88>
 800f2f4:	2f06      	cmp	r7, #6
 800f2f6:	d12c      	bne.n	800f352 <_strtod_l+0xda>
 800f2f8:	3601      	adds	r6, #1
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	9617      	str	r6, [sp, #92]	; 0x5c
 800f2fe:	930a      	str	r3, [sp, #40]	; 0x28
 800f300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f302:	2b00      	cmp	r3, #0
 800f304:	f040 8590 	bne.w	800fe28 <_strtod_l+0xbb0>
 800f308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f30a:	b1eb      	cbz	r3, 800f348 <_strtod_l+0xd0>
 800f30c:	4652      	mov	r2, sl
 800f30e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f312:	ec43 2b10 	vmov	d0, r2, r3
 800f316:	b01d      	add	sp, #116	; 0x74
 800f318:	ecbd 8b02 	vpop	{d8}
 800f31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f320:	2a20      	cmp	r2, #32
 800f322:	d1cc      	bne.n	800f2be <_strtod_l+0x46>
 800f324:	3301      	adds	r3, #1
 800f326:	9317      	str	r3, [sp, #92]	; 0x5c
 800f328:	e7be      	b.n	800f2a8 <_strtod_l+0x30>
 800f32a:	2a2d      	cmp	r2, #45	; 0x2d
 800f32c:	d1c7      	bne.n	800f2be <_strtod_l+0x46>
 800f32e:	2201      	movs	r2, #1
 800f330:	920a      	str	r2, [sp, #40]	; 0x28
 800f332:	1c5a      	adds	r2, r3, #1
 800f334:	9217      	str	r2, [sp, #92]	; 0x5c
 800f336:	785b      	ldrb	r3, [r3, #1]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1c2      	bne.n	800f2c2 <_strtod_l+0x4a>
 800f33c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f33e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f342:	2b00      	cmp	r3, #0
 800f344:	f040 856e 	bne.w	800fe24 <_strtod_l+0xbac>
 800f348:	4652      	mov	r2, sl
 800f34a:	465b      	mov	r3, fp
 800f34c:	e7e1      	b.n	800f312 <_strtod_l+0x9a>
 800f34e:	2200      	movs	r2, #0
 800f350:	e7ee      	b.n	800f330 <_strtod_l+0xb8>
 800f352:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f354:	b13a      	cbz	r2, 800f366 <_strtod_l+0xee>
 800f356:	2135      	movs	r1, #53	; 0x35
 800f358:	a81a      	add	r0, sp, #104	; 0x68
 800f35a:	f002 fc76 	bl	8011c4a <__copybits>
 800f35e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f360:	4620      	mov	r0, r4
 800f362:	f002 f835 	bl	80113d0 <_Bfree>
 800f366:	3f01      	subs	r7, #1
 800f368:	2f04      	cmp	r7, #4
 800f36a:	d806      	bhi.n	800f37a <_strtod_l+0x102>
 800f36c:	e8df f007 	tbb	[pc, r7]
 800f370:	1714030a 	.word	0x1714030a
 800f374:	0a          	.byte	0x0a
 800f375:	00          	.byte	0x00
 800f376:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f37a:	0728      	lsls	r0, r5, #28
 800f37c:	d5c0      	bpl.n	800f300 <_strtod_l+0x88>
 800f37e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f382:	e7bd      	b.n	800f300 <_strtod_l+0x88>
 800f384:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f388:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f38a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f38e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f392:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f396:	e7f0      	b.n	800f37a <_strtod_l+0x102>
 800f398:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f51c <_strtod_l+0x2a4>
 800f39c:	e7ed      	b.n	800f37a <_strtod_l+0x102>
 800f39e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f3a2:	f04f 3aff 	mov.w	sl, #4294967295
 800f3a6:	e7e8      	b.n	800f37a <_strtod_l+0x102>
 800f3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3aa:	1c5a      	adds	r2, r3, #1
 800f3ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800f3ae:	785b      	ldrb	r3, [r3, #1]
 800f3b0:	2b30      	cmp	r3, #48	; 0x30
 800f3b2:	d0f9      	beq.n	800f3a8 <_strtod_l+0x130>
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0a3      	beq.n	800f300 <_strtod_l+0x88>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	f04f 0900 	mov.w	r9, #0
 800f3be:	9304      	str	r3, [sp, #16]
 800f3c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3c2:	9308      	str	r3, [sp, #32]
 800f3c4:	f8cd 901c 	str.w	r9, [sp, #28]
 800f3c8:	464f      	mov	r7, r9
 800f3ca:	220a      	movs	r2, #10
 800f3cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f3ce:	7806      	ldrb	r6, [r0, #0]
 800f3d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f3d4:	b2d9      	uxtb	r1, r3
 800f3d6:	2909      	cmp	r1, #9
 800f3d8:	d92a      	bls.n	800f430 <_strtod_l+0x1b8>
 800f3da:	9905      	ldr	r1, [sp, #20]
 800f3dc:	462a      	mov	r2, r5
 800f3de:	f002 fee9 	bl	80121b4 <strncmp>
 800f3e2:	b398      	cbz	r0, 800f44c <_strtod_l+0x1d4>
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	4632      	mov	r2, r6
 800f3e8:	463d      	mov	r5, r7
 800f3ea:	9005      	str	r0, [sp, #20]
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2a65      	cmp	r2, #101	; 0x65
 800f3f0:	d001      	beq.n	800f3f6 <_strtod_l+0x17e>
 800f3f2:	2a45      	cmp	r2, #69	; 0x45
 800f3f4:	d118      	bne.n	800f428 <_strtod_l+0x1b0>
 800f3f6:	b91d      	cbnz	r5, 800f400 <_strtod_l+0x188>
 800f3f8:	9a04      	ldr	r2, [sp, #16]
 800f3fa:	4302      	orrs	r2, r0
 800f3fc:	d09e      	beq.n	800f33c <_strtod_l+0xc4>
 800f3fe:	2500      	movs	r5, #0
 800f400:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f404:	f108 0201 	add.w	r2, r8, #1
 800f408:	9217      	str	r2, [sp, #92]	; 0x5c
 800f40a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f40e:	2a2b      	cmp	r2, #43	; 0x2b
 800f410:	d075      	beq.n	800f4fe <_strtod_l+0x286>
 800f412:	2a2d      	cmp	r2, #45	; 0x2d
 800f414:	d07b      	beq.n	800f50e <_strtod_l+0x296>
 800f416:	f04f 0c00 	mov.w	ip, #0
 800f41a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f41e:	2909      	cmp	r1, #9
 800f420:	f240 8082 	bls.w	800f528 <_strtod_l+0x2b0>
 800f424:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f428:	2600      	movs	r6, #0
 800f42a:	e09d      	b.n	800f568 <_strtod_l+0x2f0>
 800f42c:	2300      	movs	r3, #0
 800f42e:	e7c4      	b.n	800f3ba <_strtod_l+0x142>
 800f430:	2f08      	cmp	r7, #8
 800f432:	bfd8      	it	le
 800f434:	9907      	ldrle	r1, [sp, #28]
 800f436:	f100 0001 	add.w	r0, r0, #1
 800f43a:	bfda      	itte	le
 800f43c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f440:	9307      	strle	r3, [sp, #28]
 800f442:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f446:	3701      	adds	r7, #1
 800f448:	9017      	str	r0, [sp, #92]	; 0x5c
 800f44a:	e7bf      	b.n	800f3cc <_strtod_l+0x154>
 800f44c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f44e:	195a      	adds	r2, r3, r5
 800f450:	9217      	str	r2, [sp, #92]	; 0x5c
 800f452:	5d5a      	ldrb	r2, [r3, r5]
 800f454:	2f00      	cmp	r7, #0
 800f456:	d037      	beq.n	800f4c8 <_strtod_l+0x250>
 800f458:	9005      	str	r0, [sp, #20]
 800f45a:	463d      	mov	r5, r7
 800f45c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f460:	2b09      	cmp	r3, #9
 800f462:	d912      	bls.n	800f48a <_strtod_l+0x212>
 800f464:	2301      	movs	r3, #1
 800f466:	e7c2      	b.n	800f3ee <_strtod_l+0x176>
 800f468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f46e:	785a      	ldrb	r2, [r3, #1]
 800f470:	3001      	adds	r0, #1
 800f472:	2a30      	cmp	r2, #48	; 0x30
 800f474:	d0f8      	beq.n	800f468 <_strtod_l+0x1f0>
 800f476:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f47a:	2b08      	cmp	r3, #8
 800f47c:	f200 84d9 	bhi.w	800fe32 <_strtod_l+0xbba>
 800f480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f482:	9005      	str	r0, [sp, #20]
 800f484:	2000      	movs	r0, #0
 800f486:	9308      	str	r3, [sp, #32]
 800f488:	4605      	mov	r5, r0
 800f48a:	3a30      	subs	r2, #48	; 0x30
 800f48c:	f100 0301 	add.w	r3, r0, #1
 800f490:	d014      	beq.n	800f4bc <_strtod_l+0x244>
 800f492:	9905      	ldr	r1, [sp, #20]
 800f494:	4419      	add	r1, r3
 800f496:	9105      	str	r1, [sp, #20]
 800f498:	462b      	mov	r3, r5
 800f49a:	eb00 0e05 	add.w	lr, r0, r5
 800f49e:	210a      	movs	r1, #10
 800f4a0:	4573      	cmp	r3, lr
 800f4a2:	d113      	bne.n	800f4cc <_strtod_l+0x254>
 800f4a4:	182b      	adds	r3, r5, r0
 800f4a6:	2b08      	cmp	r3, #8
 800f4a8:	f105 0501 	add.w	r5, r5, #1
 800f4ac:	4405      	add	r5, r0
 800f4ae:	dc1c      	bgt.n	800f4ea <_strtod_l+0x272>
 800f4b0:	9907      	ldr	r1, [sp, #28]
 800f4b2:	230a      	movs	r3, #10
 800f4b4:	fb03 2301 	mla	r3, r3, r1, r2
 800f4b8:	9307      	str	r3, [sp, #28]
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f4be:	1c51      	adds	r1, r2, #1
 800f4c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800f4c2:	7852      	ldrb	r2, [r2, #1]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	e7c9      	b.n	800f45c <_strtod_l+0x1e4>
 800f4c8:	4638      	mov	r0, r7
 800f4ca:	e7d2      	b.n	800f472 <_strtod_l+0x1fa>
 800f4cc:	2b08      	cmp	r3, #8
 800f4ce:	dc04      	bgt.n	800f4da <_strtod_l+0x262>
 800f4d0:	9e07      	ldr	r6, [sp, #28]
 800f4d2:	434e      	muls	r6, r1
 800f4d4:	9607      	str	r6, [sp, #28]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	e7e2      	b.n	800f4a0 <_strtod_l+0x228>
 800f4da:	f103 0c01 	add.w	ip, r3, #1
 800f4de:	f1bc 0f10 	cmp.w	ip, #16
 800f4e2:	bfd8      	it	le
 800f4e4:	fb01 f909 	mulle.w	r9, r1, r9
 800f4e8:	e7f5      	b.n	800f4d6 <_strtod_l+0x25e>
 800f4ea:	2d10      	cmp	r5, #16
 800f4ec:	bfdc      	itt	le
 800f4ee:	230a      	movle	r3, #10
 800f4f0:	fb03 2909 	mlale	r9, r3, r9, r2
 800f4f4:	e7e1      	b.n	800f4ba <_strtod_l+0x242>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	9305      	str	r3, [sp, #20]
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e77c      	b.n	800f3f8 <_strtod_l+0x180>
 800f4fe:	f04f 0c00 	mov.w	ip, #0
 800f502:	f108 0202 	add.w	r2, r8, #2
 800f506:	9217      	str	r2, [sp, #92]	; 0x5c
 800f508:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f50c:	e785      	b.n	800f41a <_strtod_l+0x1a2>
 800f50e:	f04f 0c01 	mov.w	ip, #1
 800f512:	e7f6      	b.n	800f502 <_strtod_l+0x28a>
 800f514:	08014f0c 	.word	0x08014f0c
 800f518:	08014dc4 	.word	0x08014dc4
 800f51c:	7ff00000 	.word	0x7ff00000
 800f520:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f522:	1c51      	adds	r1, r2, #1
 800f524:	9117      	str	r1, [sp, #92]	; 0x5c
 800f526:	7852      	ldrb	r2, [r2, #1]
 800f528:	2a30      	cmp	r2, #48	; 0x30
 800f52a:	d0f9      	beq.n	800f520 <_strtod_l+0x2a8>
 800f52c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f530:	2908      	cmp	r1, #8
 800f532:	f63f af79 	bhi.w	800f428 <_strtod_l+0x1b0>
 800f536:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f53a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f53c:	9206      	str	r2, [sp, #24]
 800f53e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f540:	1c51      	adds	r1, r2, #1
 800f542:	9117      	str	r1, [sp, #92]	; 0x5c
 800f544:	7852      	ldrb	r2, [r2, #1]
 800f546:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f54a:	2e09      	cmp	r6, #9
 800f54c:	d937      	bls.n	800f5be <_strtod_l+0x346>
 800f54e:	9e06      	ldr	r6, [sp, #24]
 800f550:	1b89      	subs	r1, r1, r6
 800f552:	2908      	cmp	r1, #8
 800f554:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f558:	dc02      	bgt.n	800f560 <_strtod_l+0x2e8>
 800f55a:	4576      	cmp	r6, lr
 800f55c:	bfa8      	it	ge
 800f55e:	4676      	movge	r6, lr
 800f560:	f1bc 0f00 	cmp.w	ip, #0
 800f564:	d000      	beq.n	800f568 <_strtod_l+0x2f0>
 800f566:	4276      	negs	r6, r6
 800f568:	2d00      	cmp	r5, #0
 800f56a:	d14d      	bne.n	800f608 <_strtod_l+0x390>
 800f56c:	9904      	ldr	r1, [sp, #16]
 800f56e:	4301      	orrs	r1, r0
 800f570:	f47f aec6 	bne.w	800f300 <_strtod_l+0x88>
 800f574:	2b00      	cmp	r3, #0
 800f576:	f47f aee1 	bne.w	800f33c <_strtod_l+0xc4>
 800f57a:	2a69      	cmp	r2, #105	; 0x69
 800f57c:	d027      	beq.n	800f5ce <_strtod_l+0x356>
 800f57e:	dc24      	bgt.n	800f5ca <_strtod_l+0x352>
 800f580:	2a49      	cmp	r2, #73	; 0x49
 800f582:	d024      	beq.n	800f5ce <_strtod_l+0x356>
 800f584:	2a4e      	cmp	r2, #78	; 0x4e
 800f586:	f47f aed9 	bne.w	800f33c <_strtod_l+0xc4>
 800f58a:	499f      	ldr	r1, [pc, #636]	; (800f808 <_strtod_l+0x590>)
 800f58c:	a817      	add	r0, sp, #92	; 0x5c
 800f58e:	f001 fe11 	bl	80111b4 <__match>
 800f592:	2800      	cmp	r0, #0
 800f594:	f43f aed2 	beq.w	800f33c <_strtod_l+0xc4>
 800f598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	2b28      	cmp	r3, #40	; 0x28
 800f59e:	d12d      	bne.n	800f5fc <_strtod_l+0x384>
 800f5a0:	499a      	ldr	r1, [pc, #616]	; (800f80c <_strtod_l+0x594>)
 800f5a2:	aa1a      	add	r2, sp, #104	; 0x68
 800f5a4:	a817      	add	r0, sp, #92	; 0x5c
 800f5a6:	f001 fe19 	bl	80111dc <__hexnan>
 800f5aa:	2805      	cmp	r0, #5
 800f5ac:	d126      	bne.n	800f5fc <_strtod_l+0x384>
 800f5ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f5b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f5b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f5bc:	e6a0      	b.n	800f300 <_strtod_l+0x88>
 800f5be:	210a      	movs	r1, #10
 800f5c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f5c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f5c8:	e7b9      	b.n	800f53e <_strtod_l+0x2c6>
 800f5ca:	2a6e      	cmp	r2, #110	; 0x6e
 800f5cc:	e7db      	b.n	800f586 <_strtod_l+0x30e>
 800f5ce:	4990      	ldr	r1, [pc, #576]	; (800f810 <_strtod_l+0x598>)
 800f5d0:	a817      	add	r0, sp, #92	; 0x5c
 800f5d2:	f001 fdef 	bl	80111b4 <__match>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	f43f aeb0 	beq.w	800f33c <_strtod_l+0xc4>
 800f5dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5de:	498d      	ldr	r1, [pc, #564]	; (800f814 <_strtod_l+0x59c>)
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	a817      	add	r0, sp, #92	; 0x5c
 800f5e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800f5e6:	f001 fde5 	bl	80111b4 <__match>
 800f5ea:	b910      	cbnz	r0, 800f5f2 <_strtod_l+0x37a>
 800f5ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800f5f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f824 <_strtod_l+0x5ac>
 800f5f6:	f04f 0a00 	mov.w	sl, #0
 800f5fa:	e681      	b.n	800f300 <_strtod_l+0x88>
 800f5fc:	4886      	ldr	r0, [pc, #536]	; (800f818 <_strtod_l+0x5a0>)
 800f5fe:	f002 fdbb 	bl	8012178 <nan>
 800f602:	ec5b ab10 	vmov	sl, fp, d0
 800f606:	e67b      	b.n	800f300 <_strtod_l+0x88>
 800f608:	9b05      	ldr	r3, [sp, #20]
 800f60a:	9807      	ldr	r0, [sp, #28]
 800f60c:	1af3      	subs	r3, r6, r3
 800f60e:	2f00      	cmp	r7, #0
 800f610:	bf08      	it	eq
 800f612:	462f      	moveq	r7, r5
 800f614:	2d10      	cmp	r5, #16
 800f616:	9306      	str	r3, [sp, #24]
 800f618:	46a8      	mov	r8, r5
 800f61a:	bfa8      	it	ge
 800f61c:	f04f 0810 	movge.w	r8, #16
 800f620:	f7f0 ff70 	bl	8000504 <__aeabi_ui2d>
 800f624:	2d09      	cmp	r5, #9
 800f626:	4682      	mov	sl, r0
 800f628:	468b      	mov	fp, r1
 800f62a:	dd13      	ble.n	800f654 <_strtod_l+0x3dc>
 800f62c:	4b7b      	ldr	r3, [pc, #492]	; (800f81c <_strtod_l+0x5a4>)
 800f62e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f636:	f7f0 ffdf 	bl	80005f8 <__aeabi_dmul>
 800f63a:	4682      	mov	sl, r0
 800f63c:	4648      	mov	r0, r9
 800f63e:	468b      	mov	fp, r1
 800f640:	f7f0 ff60 	bl	8000504 <__aeabi_ui2d>
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	4650      	mov	r0, sl
 800f64a:	4659      	mov	r1, fp
 800f64c:	f7f0 fe1e 	bl	800028c <__adddf3>
 800f650:	4682      	mov	sl, r0
 800f652:	468b      	mov	fp, r1
 800f654:	2d0f      	cmp	r5, #15
 800f656:	dc38      	bgt.n	800f6ca <_strtod_l+0x452>
 800f658:	9b06      	ldr	r3, [sp, #24]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f43f ae50 	beq.w	800f300 <_strtod_l+0x88>
 800f660:	dd24      	ble.n	800f6ac <_strtod_l+0x434>
 800f662:	2b16      	cmp	r3, #22
 800f664:	dc0b      	bgt.n	800f67e <_strtod_l+0x406>
 800f666:	496d      	ldr	r1, [pc, #436]	; (800f81c <_strtod_l+0x5a4>)
 800f668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f670:	4652      	mov	r2, sl
 800f672:	465b      	mov	r3, fp
 800f674:	f7f0 ffc0 	bl	80005f8 <__aeabi_dmul>
 800f678:	4682      	mov	sl, r0
 800f67a:	468b      	mov	fp, r1
 800f67c:	e640      	b.n	800f300 <_strtod_l+0x88>
 800f67e:	9a06      	ldr	r2, [sp, #24]
 800f680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f684:	4293      	cmp	r3, r2
 800f686:	db20      	blt.n	800f6ca <_strtod_l+0x452>
 800f688:	4c64      	ldr	r4, [pc, #400]	; (800f81c <_strtod_l+0x5a4>)
 800f68a:	f1c5 050f 	rsb	r5, r5, #15
 800f68e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f692:	4652      	mov	r2, sl
 800f694:	465b      	mov	r3, fp
 800f696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69a:	f7f0 ffad 	bl	80005f8 <__aeabi_dmul>
 800f69e:	9b06      	ldr	r3, [sp, #24]
 800f6a0:	1b5d      	subs	r5, r3, r5
 800f6a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f6a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f6aa:	e7e3      	b.n	800f674 <_strtod_l+0x3fc>
 800f6ac:	9b06      	ldr	r3, [sp, #24]
 800f6ae:	3316      	adds	r3, #22
 800f6b0:	db0b      	blt.n	800f6ca <_strtod_l+0x452>
 800f6b2:	9b05      	ldr	r3, [sp, #20]
 800f6b4:	1b9e      	subs	r6, r3, r6
 800f6b6:	4b59      	ldr	r3, [pc, #356]	; (800f81c <_strtod_l+0x5a4>)
 800f6b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f6bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f6c0:	4650      	mov	r0, sl
 800f6c2:	4659      	mov	r1, fp
 800f6c4:	f7f1 f8c2 	bl	800084c <__aeabi_ddiv>
 800f6c8:	e7d6      	b.n	800f678 <_strtod_l+0x400>
 800f6ca:	9b06      	ldr	r3, [sp, #24]
 800f6cc:	eba5 0808 	sub.w	r8, r5, r8
 800f6d0:	4498      	add	r8, r3
 800f6d2:	f1b8 0f00 	cmp.w	r8, #0
 800f6d6:	dd74      	ble.n	800f7c2 <_strtod_l+0x54a>
 800f6d8:	f018 030f 	ands.w	r3, r8, #15
 800f6dc:	d00a      	beq.n	800f6f4 <_strtod_l+0x47c>
 800f6de:	494f      	ldr	r1, [pc, #316]	; (800f81c <_strtod_l+0x5a4>)
 800f6e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f6e4:	4652      	mov	r2, sl
 800f6e6:	465b      	mov	r3, fp
 800f6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6ec:	f7f0 ff84 	bl	80005f8 <__aeabi_dmul>
 800f6f0:	4682      	mov	sl, r0
 800f6f2:	468b      	mov	fp, r1
 800f6f4:	f038 080f 	bics.w	r8, r8, #15
 800f6f8:	d04f      	beq.n	800f79a <_strtod_l+0x522>
 800f6fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f6fe:	dd22      	ble.n	800f746 <_strtod_l+0x4ce>
 800f700:	2500      	movs	r5, #0
 800f702:	462e      	mov	r6, r5
 800f704:	9507      	str	r5, [sp, #28]
 800f706:	9505      	str	r5, [sp, #20]
 800f708:	2322      	movs	r3, #34	; 0x22
 800f70a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f824 <_strtod_l+0x5ac>
 800f70e:	6023      	str	r3, [r4, #0]
 800f710:	f04f 0a00 	mov.w	sl, #0
 800f714:	9b07      	ldr	r3, [sp, #28]
 800f716:	2b00      	cmp	r3, #0
 800f718:	f43f adf2 	beq.w	800f300 <_strtod_l+0x88>
 800f71c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f71e:	4620      	mov	r0, r4
 800f720:	f001 fe56 	bl	80113d0 <_Bfree>
 800f724:	9905      	ldr	r1, [sp, #20]
 800f726:	4620      	mov	r0, r4
 800f728:	f001 fe52 	bl	80113d0 <_Bfree>
 800f72c:	4631      	mov	r1, r6
 800f72e:	4620      	mov	r0, r4
 800f730:	f001 fe4e 	bl	80113d0 <_Bfree>
 800f734:	9907      	ldr	r1, [sp, #28]
 800f736:	4620      	mov	r0, r4
 800f738:	f001 fe4a 	bl	80113d0 <_Bfree>
 800f73c:	4629      	mov	r1, r5
 800f73e:	4620      	mov	r0, r4
 800f740:	f001 fe46 	bl	80113d0 <_Bfree>
 800f744:	e5dc      	b.n	800f300 <_strtod_l+0x88>
 800f746:	4b36      	ldr	r3, [pc, #216]	; (800f820 <_strtod_l+0x5a8>)
 800f748:	9304      	str	r3, [sp, #16]
 800f74a:	2300      	movs	r3, #0
 800f74c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f750:	4650      	mov	r0, sl
 800f752:	4659      	mov	r1, fp
 800f754:	4699      	mov	r9, r3
 800f756:	f1b8 0f01 	cmp.w	r8, #1
 800f75a:	dc21      	bgt.n	800f7a0 <_strtod_l+0x528>
 800f75c:	b10b      	cbz	r3, 800f762 <_strtod_l+0x4ea>
 800f75e:	4682      	mov	sl, r0
 800f760:	468b      	mov	fp, r1
 800f762:	4b2f      	ldr	r3, [pc, #188]	; (800f820 <_strtod_l+0x5a8>)
 800f764:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f768:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f76c:	4652      	mov	r2, sl
 800f76e:	465b      	mov	r3, fp
 800f770:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f774:	f7f0 ff40 	bl	80005f8 <__aeabi_dmul>
 800f778:	4b2a      	ldr	r3, [pc, #168]	; (800f824 <_strtod_l+0x5ac>)
 800f77a:	460a      	mov	r2, r1
 800f77c:	400b      	ands	r3, r1
 800f77e:	492a      	ldr	r1, [pc, #168]	; (800f828 <_strtod_l+0x5b0>)
 800f780:	428b      	cmp	r3, r1
 800f782:	4682      	mov	sl, r0
 800f784:	d8bc      	bhi.n	800f700 <_strtod_l+0x488>
 800f786:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f78a:	428b      	cmp	r3, r1
 800f78c:	bf86      	itte	hi
 800f78e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f82c <_strtod_l+0x5b4>
 800f792:	f04f 3aff 	movhi.w	sl, #4294967295
 800f796:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f79a:	2300      	movs	r3, #0
 800f79c:	9304      	str	r3, [sp, #16]
 800f79e:	e084      	b.n	800f8aa <_strtod_l+0x632>
 800f7a0:	f018 0f01 	tst.w	r8, #1
 800f7a4:	d005      	beq.n	800f7b2 <_strtod_l+0x53a>
 800f7a6:	9b04      	ldr	r3, [sp, #16]
 800f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ac:	f7f0 ff24 	bl	80005f8 <__aeabi_dmul>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	9a04      	ldr	r2, [sp, #16]
 800f7b4:	3208      	adds	r2, #8
 800f7b6:	f109 0901 	add.w	r9, r9, #1
 800f7ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f7be:	9204      	str	r2, [sp, #16]
 800f7c0:	e7c9      	b.n	800f756 <_strtod_l+0x4de>
 800f7c2:	d0ea      	beq.n	800f79a <_strtod_l+0x522>
 800f7c4:	f1c8 0800 	rsb	r8, r8, #0
 800f7c8:	f018 020f 	ands.w	r2, r8, #15
 800f7cc:	d00a      	beq.n	800f7e4 <_strtod_l+0x56c>
 800f7ce:	4b13      	ldr	r3, [pc, #76]	; (800f81c <_strtod_l+0x5a4>)
 800f7d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7d4:	4650      	mov	r0, sl
 800f7d6:	4659      	mov	r1, fp
 800f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7dc:	f7f1 f836 	bl	800084c <__aeabi_ddiv>
 800f7e0:	4682      	mov	sl, r0
 800f7e2:	468b      	mov	fp, r1
 800f7e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f7e8:	d0d7      	beq.n	800f79a <_strtod_l+0x522>
 800f7ea:	f1b8 0f1f 	cmp.w	r8, #31
 800f7ee:	dd1f      	ble.n	800f830 <_strtod_l+0x5b8>
 800f7f0:	2500      	movs	r5, #0
 800f7f2:	462e      	mov	r6, r5
 800f7f4:	9507      	str	r5, [sp, #28]
 800f7f6:	9505      	str	r5, [sp, #20]
 800f7f8:	2322      	movs	r3, #34	; 0x22
 800f7fa:	f04f 0a00 	mov.w	sl, #0
 800f7fe:	f04f 0b00 	mov.w	fp, #0
 800f802:	6023      	str	r3, [r4, #0]
 800f804:	e786      	b.n	800f714 <_strtod_l+0x49c>
 800f806:	bf00      	nop
 800f808:	08014d9d 	.word	0x08014d9d
 800f80c:	08014dd8 	.word	0x08014dd8
 800f810:	08014d95 	.word	0x08014d95
 800f814:	08014e1b 	.word	0x08014e1b
 800f818:	080150c8 	.word	0x080150c8
 800f81c:	08014fa8 	.word	0x08014fa8
 800f820:	08014f80 	.word	0x08014f80
 800f824:	7ff00000 	.word	0x7ff00000
 800f828:	7ca00000 	.word	0x7ca00000
 800f82c:	7fefffff 	.word	0x7fefffff
 800f830:	f018 0310 	ands.w	r3, r8, #16
 800f834:	bf18      	it	ne
 800f836:	236a      	movne	r3, #106	; 0x6a
 800f838:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800fbe8 <_strtod_l+0x970>
 800f83c:	9304      	str	r3, [sp, #16]
 800f83e:	4650      	mov	r0, sl
 800f840:	4659      	mov	r1, fp
 800f842:	2300      	movs	r3, #0
 800f844:	f018 0f01 	tst.w	r8, #1
 800f848:	d004      	beq.n	800f854 <_strtod_l+0x5dc>
 800f84a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f84e:	f7f0 fed3 	bl	80005f8 <__aeabi_dmul>
 800f852:	2301      	movs	r3, #1
 800f854:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f858:	f109 0908 	add.w	r9, r9, #8
 800f85c:	d1f2      	bne.n	800f844 <_strtod_l+0x5cc>
 800f85e:	b10b      	cbz	r3, 800f864 <_strtod_l+0x5ec>
 800f860:	4682      	mov	sl, r0
 800f862:	468b      	mov	fp, r1
 800f864:	9b04      	ldr	r3, [sp, #16]
 800f866:	b1c3      	cbz	r3, 800f89a <_strtod_l+0x622>
 800f868:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f86c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f870:	2b00      	cmp	r3, #0
 800f872:	4659      	mov	r1, fp
 800f874:	dd11      	ble.n	800f89a <_strtod_l+0x622>
 800f876:	2b1f      	cmp	r3, #31
 800f878:	f340 8124 	ble.w	800fac4 <_strtod_l+0x84c>
 800f87c:	2b34      	cmp	r3, #52	; 0x34
 800f87e:	bfde      	ittt	le
 800f880:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f884:	f04f 33ff 	movle.w	r3, #4294967295
 800f888:	fa03 f202 	lslle.w	r2, r3, r2
 800f88c:	f04f 0a00 	mov.w	sl, #0
 800f890:	bfcc      	ite	gt
 800f892:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f896:	ea02 0b01 	andle.w	fp, r2, r1
 800f89a:	2200      	movs	r2, #0
 800f89c:	2300      	movs	r3, #0
 800f89e:	4650      	mov	r0, sl
 800f8a0:	4659      	mov	r1, fp
 800f8a2:	f7f1 f911 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	d1a2      	bne.n	800f7f0 <_strtod_l+0x578>
 800f8aa:	9b07      	ldr	r3, [sp, #28]
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	9908      	ldr	r1, [sp, #32]
 800f8b0:	462b      	mov	r3, r5
 800f8b2:	463a      	mov	r2, r7
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	f001 fdf3 	bl	80114a0 <__s2b>
 800f8ba:	9007      	str	r0, [sp, #28]
 800f8bc:	2800      	cmp	r0, #0
 800f8be:	f43f af1f 	beq.w	800f700 <_strtod_l+0x488>
 800f8c2:	9b05      	ldr	r3, [sp, #20]
 800f8c4:	1b9e      	subs	r6, r3, r6
 800f8c6:	9b06      	ldr	r3, [sp, #24]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	bfb4      	ite	lt
 800f8cc:	4633      	movlt	r3, r6
 800f8ce:	2300      	movge	r3, #0
 800f8d0:	930c      	str	r3, [sp, #48]	; 0x30
 800f8d2:	9b06      	ldr	r3, [sp, #24]
 800f8d4:	2500      	movs	r5, #0
 800f8d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f8da:	9312      	str	r3, [sp, #72]	; 0x48
 800f8dc:	462e      	mov	r6, r5
 800f8de:	9b07      	ldr	r3, [sp, #28]
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	6859      	ldr	r1, [r3, #4]
 800f8e4:	f001 fd34 	bl	8011350 <_Balloc>
 800f8e8:	9005      	str	r0, [sp, #20]
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	f43f af0c 	beq.w	800f708 <_strtod_l+0x490>
 800f8f0:	9b07      	ldr	r3, [sp, #28]
 800f8f2:	691a      	ldr	r2, [r3, #16]
 800f8f4:	3202      	adds	r2, #2
 800f8f6:	f103 010c 	add.w	r1, r3, #12
 800f8fa:	0092      	lsls	r2, r2, #2
 800f8fc:	300c      	adds	r0, #12
 800f8fe:	f7fe ffdd 	bl	800e8bc <memcpy>
 800f902:	ec4b ab10 	vmov	d0, sl, fp
 800f906:	aa1a      	add	r2, sp, #104	; 0x68
 800f908:	a919      	add	r1, sp, #100	; 0x64
 800f90a:	4620      	mov	r0, r4
 800f90c:	f002 f90e 	bl	8011b2c <__d2b>
 800f910:	ec4b ab18 	vmov	d8, sl, fp
 800f914:	9018      	str	r0, [sp, #96]	; 0x60
 800f916:	2800      	cmp	r0, #0
 800f918:	f43f aef6 	beq.w	800f708 <_strtod_l+0x490>
 800f91c:	2101      	movs	r1, #1
 800f91e:	4620      	mov	r0, r4
 800f920:	f001 fe58 	bl	80115d4 <__i2b>
 800f924:	4606      	mov	r6, r0
 800f926:	2800      	cmp	r0, #0
 800f928:	f43f aeee 	beq.w	800f708 <_strtod_l+0x490>
 800f92c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f92e:	9904      	ldr	r1, [sp, #16]
 800f930:	2b00      	cmp	r3, #0
 800f932:	bfab      	itete	ge
 800f934:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f936:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f938:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f93a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f93e:	bfac      	ite	ge
 800f940:	eb03 0902 	addge.w	r9, r3, r2
 800f944:	1ad7      	sublt	r7, r2, r3
 800f946:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f948:	eba3 0801 	sub.w	r8, r3, r1
 800f94c:	4490      	add	r8, r2
 800f94e:	4ba1      	ldr	r3, [pc, #644]	; (800fbd4 <_strtod_l+0x95c>)
 800f950:	f108 38ff 	add.w	r8, r8, #4294967295
 800f954:	4598      	cmp	r8, r3
 800f956:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f95a:	f280 80c7 	bge.w	800faec <_strtod_l+0x874>
 800f95e:	eba3 0308 	sub.w	r3, r3, r8
 800f962:	2b1f      	cmp	r3, #31
 800f964:	eba2 0203 	sub.w	r2, r2, r3
 800f968:	f04f 0101 	mov.w	r1, #1
 800f96c:	f300 80b1 	bgt.w	800fad2 <_strtod_l+0x85a>
 800f970:	fa01 f303 	lsl.w	r3, r1, r3
 800f974:	930d      	str	r3, [sp, #52]	; 0x34
 800f976:	2300      	movs	r3, #0
 800f978:	9308      	str	r3, [sp, #32]
 800f97a:	eb09 0802 	add.w	r8, r9, r2
 800f97e:	9b04      	ldr	r3, [sp, #16]
 800f980:	45c1      	cmp	r9, r8
 800f982:	4417      	add	r7, r2
 800f984:	441f      	add	r7, r3
 800f986:	464b      	mov	r3, r9
 800f988:	bfa8      	it	ge
 800f98a:	4643      	movge	r3, r8
 800f98c:	42bb      	cmp	r3, r7
 800f98e:	bfa8      	it	ge
 800f990:	463b      	movge	r3, r7
 800f992:	2b00      	cmp	r3, #0
 800f994:	bfc2      	ittt	gt
 800f996:	eba8 0803 	subgt.w	r8, r8, r3
 800f99a:	1aff      	subgt	r7, r7, r3
 800f99c:	eba9 0903 	subgt.w	r9, r9, r3
 800f9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	dd17      	ble.n	800f9d6 <_strtod_l+0x75e>
 800f9a6:	4631      	mov	r1, r6
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	f001 fed2 	bl	8011754 <__pow5mult>
 800f9b0:	4606      	mov	r6, r0
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	f43f aea8 	beq.w	800f708 <_strtod_l+0x490>
 800f9b8:	4601      	mov	r1, r0
 800f9ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f9bc:	4620      	mov	r0, r4
 800f9be:	f001 fe1f 	bl	8011600 <__multiply>
 800f9c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	f43f ae9f 	beq.w	800f708 <_strtod_l+0x490>
 800f9ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	f001 fcff 	bl	80113d0 <_Bfree>
 800f9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9d4:	9318      	str	r3, [sp, #96]	; 0x60
 800f9d6:	f1b8 0f00 	cmp.w	r8, #0
 800f9da:	f300 808c 	bgt.w	800faf6 <_strtod_l+0x87e>
 800f9de:	9b06      	ldr	r3, [sp, #24]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	dd08      	ble.n	800f9f6 <_strtod_l+0x77e>
 800f9e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f9e6:	9905      	ldr	r1, [sp, #20]
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f001 feb3 	bl	8011754 <__pow5mult>
 800f9ee:	9005      	str	r0, [sp, #20]
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	f43f ae89 	beq.w	800f708 <_strtod_l+0x490>
 800f9f6:	2f00      	cmp	r7, #0
 800f9f8:	dd08      	ble.n	800fa0c <_strtod_l+0x794>
 800f9fa:	9905      	ldr	r1, [sp, #20]
 800f9fc:	463a      	mov	r2, r7
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f001 ff02 	bl	8011808 <__lshift>
 800fa04:	9005      	str	r0, [sp, #20]
 800fa06:	2800      	cmp	r0, #0
 800fa08:	f43f ae7e 	beq.w	800f708 <_strtod_l+0x490>
 800fa0c:	f1b9 0f00 	cmp.w	r9, #0
 800fa10:	dd08      	ble.n	800fa24 <_strtod_l+0x7ac>
 800fa12:	4631      	mov	r1, r6
 800fa14:	464a      	mov	r2, r9
 800fa16:	4620      	mov	r0, r4
 800fa18:	f001 fef6 	bl	8011808 <__lshift>
 800fa1c:	4606      	mov	r6, r0
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	f43f ae72 	beq.w	800f708 <_strtod_l+0x490>
 800fa24:	9a05      	ldr	r2, [sp, #20]
 800fa26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f001 ff79 	bl	8011920 <__mdiff>
 800fa2e:	4605      	mov	r5, r0
 800fa30:	2800      	cmp	r0, #0
 800fa32:	f43f ae69 	beq.w	800f708 <_strtod_l+0x490>
 800fa36:	68c3      	ldr	r3, [r0, #12]
 800fa38:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	60c3      	str	r3, [r0, #12]
 800fa3e:	4631      	mov	r1, r6
 800fa40:	f001 ff52 	bl	80118e8 <__mcmp>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	da60      	bge.n	800fb0a <_strtod_l+0x892>
 800fa48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa4a:	ea53 030a 	orrs.w	r3, r3, sl
 800fa4e:	f040 8082 	bne.w	800fb56 <_strtod_l+0x8de>
 800fa52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d17d      	bne.n	800fb56 <_strtod_l+0x8de>
 800fa5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa5e:	0d1b      	lsrs	r3, r3, #20
 800fa60:	051b      	lsls	r3, r3, #20
 800fa62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fa66:	d976      	bls.n	800fb56 <_strtod_l+0x8de>
 800fa68:	696b      	ldr	r3, [r5, #20]
 800fa6a:	b913      	cbnz	r3, 800fa72 <_strtod_l+0x7fa>
 800fa6c:	692b      	ldr	r3, [r5, #16]
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	dd71      	ble.n	800fb56 <_strtod_l+0x8de>
 800fa72:	4629      	mov	r1, r5
 800fa74:	2201      	movs	r2, #1
 800fa76:	4620      	mov	r0, r4
 800fa78:	f001 fec6 	bl	8011808 <__lshift>
 800fa7c:	4631      	mov	r1, r6
 800fa7e:	4605      	mov	r5, r0
 800fa80:	f001 ff32 	bl	80118e8 <__mcmp>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	dd66      	ble.n	800fb56 <_strtod_l+0x8de>
 800fa88:	9904      	ldr	r1, [sp, #16]
 800fa8a:	4a53      	ldr	r2, [pc, #332]	; (800fbd8 <_strtod_l+0x960>)
 800fa8c:	465b      	mov	r3, fp
 800fa8e:	2900      	cmp	r1, #0
 800fa90:	f000 8081 	beq.w	800fb96 <_strtod_l+0x91e>
 800fa94:	ea02 010b 	and.w	r1, r2, fp
 800fa98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fa9c:	dc7b      	bgt.n	800fb96 <_strtod_l+0x91e>
 800fa9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800faa2:	f77f aea9 	ble.w	800f7f8 <_strtod_l+0x580>
 800faa6:	4b4d      	ldr	r3, [pc, #308]	; (800fbdc <_strtod_l+0x964>)
 800faa8:	4650      	mov	r0, sl
 800faaa:	4659      	mov	r1, fp
 800faac:	2200      	movs	r2, #0
 800faae:	f7f0 fda3 	bl	80005f8 <__aeabi_dmul>
 800fab2:	460b      	mov	r3, r1
 800fab4:	4303      	orrs	r3, r0
 800fab6:	bf08      	it	eq
 800fab8:	2322      	moveq	r3, #34	; 0x22
 800faba:	4682      	mov	sl, r0
 800fabc:	468b      	mov	fp, r1
 800fabe:	bf08      	it	eq
 800fac0:	6023      	streq	r3, [r4, #0]
 800fac2:	e62b      	b.n	800f71c <_strtod_l+0x4a4>
 800fac4:	f04f 32ff 	mov.w	r2, #4294967295
 800fac8:	fa02 f303 	lsl.w	r3, r2, r3
 800facc:	ea03 0a0a 	and.w	sl, r3, sl
 800fad0:	e6e3      	b.n	800f89a <_strtod_l+0x622>
 800fad2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fad6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fae2:	fa01 f308 	lsl.w	r3, r1, r8
 800fae6:	9308      	str	r3, [sp, #32]
 800fae8:	910d      	str	r1, [sp, #52]	; 0x34
 800faea:	e746      	b.n	800f97a <_strtod_l+0x702>
 800faec:	2300      	movs	r3, #0
 800faee:	9308      	str	r3, [sp, #32]
 800faf0:	2301      	movs	r3, #1
 800faf2:	930d      	str	r3, [sp, #52]	; 0x34
 800faf4:	e741      	b.n	800f97a <_strtod_l+0x702>
 800faf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800faf8:	4642      	mov	r2, r8
 800fafa:	4620      	mov	r0, r4
 800fafc:	f001 fe84 	bl	8011808 <__lshift>
 800fb00:	9018      	str	r0, [sp, #96]	; 0x60
 800fb02:	2800      	cmp	r0, #0
 800fb04:	f47f af6b 	bne.w	800f9de <_strtod_l+0x766>
 800fb08:	e5fe      	b.n	800f708 <_strtod_l+0x490>
 800fb0a:	465f      	mov	r7, fp
 800fb0c:	d16e      	bne.n	800fbec <_strtod_l+0x974>
 800fb0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb14:	b342      	cbz	r2, 800fb68 <_strtod_l+0x8f0>
 800fb16:	4a32      	ldr	r2, [pc, #200]	; (800fbe0 <_strtod_l+0x968>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d128      	bne.n	800fb6e <_strtod_l+0x8f6>
 800fb1c:	9b04      	ldr	r3, [sp, #16]
 800fb1e:	4651      	mov	r1, sl
 800fb20:	b1eb      	cbz	r3, 800fb5e <_strtod_l+0x8e6>
 800fb22:	4b2d      	ldr	r3, [pc, #180]	; (800fbd8 <_strtod_l+0x960>)
 800fb24:	403b      	ands	r3, r7
 800fb26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fb2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2e:	d819      	bhi.n	800fb64 <_strtod_l+0x8ec>
 800fb30:	0d1b      	lsrs	r3, r3, #20
 800fb32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fb36:	fa02 f303 	lsl.w	r3, r2, r3
 800fb3a:	4299      	cmp	r1, r3
 800fb3c:	d117      	bne.n	800fb6e <_strtod_l+0x8f6>
 800fb3e:	4b29      	ldr	r3, [pc, #164]	; (800fbe4 <_strtod_l+0x96c>)
 800fb40:	429f      	cmp	r7, r3
 800fb42:	d102      	bne.n	800fb4a <_strtod_l+0x8d2>
 800fb44:	3101      	adds	r1, #1
 800fb46:	f43f addf 	beq.w	800f708 <_strtod_l+0x490>
 800fb4a:	4b23      	ldr	r3, [pc, #140]	; (800fbd8 <_strtod_l+0x960>)
 800fb4c:	403b      	ands	r3, r7
 800fb4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fb52:	f04f 0a00 	mov.w	sl, #0
 800fb56:	9b04      	ldr	r3, [sp, #16]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d1a4      	bne.n	800faa6 <_strtod_l+0x82e>
 800fb5c:	e5de      	b.n	800f71c <_strtod_l+0x4a4>
 800fb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb62:	e7ea      	b.n	800fb3a <_strtod_l+0x8c2>
 800fb64:	4613      	mov	r3, r2
 800fb66:	e7e8      	b.n	800fb3a <_strtod_l+0x8c2>
 800fb68:	ea53 030a 	orrs.w	r3, r3, sl
 800fb6c:	d08c      	beq.n	800fa88 <_strtod_l+0x810>
 800fb6e:	9b08      	ldr	r3, [sp, #32]
 800fb70:	b1db      	cbz	r3, 800fbaa <_strtod_l+0x932>
 800fb72:	423b      	tst	r3, r7
 800fb74:	d0ef      	beq.n	800fb56 <_strtod_l+0x8de>
 800fb76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb78:	9a04      	ldr	r2, [sp, #16]
 800fb7a:	4650      	mov	r0, sl
 800fb7c:	4659      	mov	r1, fp
 800fb7e:	b1c3      	cbz	r3, 800fbb2 <_strtod_l+0x93a>
 800fb80:	f7ff fb5e 	bl	800f240 <sulp>
 800fb84:	4602      	mov	r2, r0
 800fb86:	460b      	mov	r3, r1
 800fb88:	ec51 0b18 	vmov	r0, r1, d8
 800fb8c:	f7f0 fb7e 	bl	800028c <__adddf3>
 800fb90:	4682      	mov	sl, r0
 800fb92:	468b      	mov	fp, r1
 800fb94:	e7df      	b.n	800fb56 <_strtod_l+0x8de>
 800fb96:	4013      	ands	r3, r2
 800fb98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fb9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fba4:	f04f 3aff 	mov.w	sl, #4294967295
 800fba8:	e7d5      	b.n	800fb56 <_strtod_l+0x8de>
 800fbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbac:	ea13 0f0a 	tst.w	r3, sl
 800fbb0:	e7e0      	b.n	800fb74 <_strtod_l+0x8fc>
 800fbb2:	f7ff fb45 	bl	800f240 <sulp>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	ec51 0b18 	vmov	r0, r1, d8
 800fbbe:	f7f0 fb63 	bl	8000288 <__aeabi_dsub>
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	4682      	mov	sl, r0
 800fbc8:	468b      	mov	fp, r1
 800fbca:	f7f0 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d0c1      	beq.n	800fb56 <_strtod_l+0x8de>
 800fbd2:	e611      	b.n	800f7f8 <_strtod_l+0x580>
 800fbd4:	fffffc02 	.word	0xfffffc02
 800fbd8:	7ff00000 	.word	0x7ff00000
 800fbdc:	39500000 	.word	0x39500000
 800fbe0:	000fffff 	.word	0x000fffff
 800fbe4:	7fefffff 	.word	0x7fefffff
 800fbe8:	08014df0 	.word	0x08014df0
 800fbec:	4631      	mov	r1, r6
 800fbee:	4628      	mov	r0, r5
 800fbf0:	f001 fff8 	bl	8011be4 <__ratio>
 800fbf4:	ec59 8b10 	vmov	r8, r9, d0
 800fbf8:	ee10 0a10 	vmov	r0, s0
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc02:	4649      	mov	r1, r9
 800fc04:	f7f0 ff74 	bl	8000af0 <__aeabi_dcmple>
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	d07a      	beq.n	800fd02 <_strtod_l+0xa8a>
 800fc0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d04a      	beq.n	800fca8 <_strtod_l+0xa30>
 800fc12:	4b95      	ldr	r3, [pc, #596]	; (800fe68 <_strtod_l+0xbf0>)
 800fc14:	2200      	movs	r2, #0
 800fc16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fc1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fe68 <_strtod_l+0xbf0>
 800fc1e:	f04f 0800 	mov.w	r8, #0
 800fc22:	4b92      	ldr	r3, [pc, #584]	; (800fe6c <_strtod_l+0xbf4>)
 800fc24:	403b      	ands	r3, r7
 800fc26:	930d      	str	r3, [sp, #52]	; 0x34
 800fc28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc2a:	4b91      	ldr	r3, [pc, #580]	; (800fe70 <_strtod_l+0xbf8>)
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	f040 80b0 	bne.w	800fd92 <_strtod_l+0xb1a>
 800fc32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fc36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fc3a:	ec4b ab10 	vmov	d0, sl, fp
 800fc3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fc42:	f001 fef7 	bl	8011a34 <__ulp>
 800fc46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fc4a:	ec53 2b10 	vmov	r2, r3, d0
 800fc4e:	f7f0 fcd3 	bl	80005f8 <__aeabi_dmul>
 800fc52:	4652      	mov	r2, sl
 800fc54:	465b      	mov	r3, fp
 800fc56:	f7f0 fb19 	bl	800028c <__adddf3>
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	4983      	ldr	r1, [pc, #524]	; (800fe6c <_strtod_l+0xbf4>)
 800fc5e:	4a85      	ldr	r2, [pc, #532]	; (800fe74 <_strtod_l+0xbfc>)
 800fc60:	4019      	ands	r1, r3
 800fc62:	4291      	cmp	r1, r2
 800fc64:	4682      	mov	sl, r0
 800fc66:	d960      	bls.n	800fd2a <_strtod_l+0xab2>
 800fc68:	ee18 3a90 	vmov	r3, s17
 800fc6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d104      	bne.n	800fc7e <_strtod_l+0xa06>
 800fc74:	ee18 3a10 	vmov	r3, s16
 800fc78:	3301      	adds	r3, #1
 800fc7a:	f43f ad45 	beq.w	800f708 <_strtod_l+0x490>
 800fc7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fe80 <_strtod_l+0xc08>
 800fc82:	f04f 3aff 	mov.w	sl, #4294967295
 800fc86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f001 fba1 	bl	80113d0 <_Bfree>
 800fc8e:	9905      	ldr	r1, [sp, #20]
 800fc90:	4620      	mov	r0, r4
 800fc92:	f001 fb9d 	bl	80113d0 <_Bfree>
 800fc96:	4631      	mov	r1, r6
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f001 fb99 	bl	80113d0 <_Bfree>
 800fc9e:	4629      	mov	r1, r5
 800fca0:	4620      	mov	r0, r4
 800fca2:	f001 fb95 	bl	80113d0 <_Bfree>
 800fca6:	e61a      	b.n	800f8de <_strtod_l+0x666>
 800fca8:	f1ba 0f00 	cmp.w	sl, #0
 800fcac:	d11b      	bne.n	800fce6 <_strtod_l+0xa6e>
 800fcae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcb2:	b9f3      	cbnz	r3, 800fcf2 <_strtod_l+0xa7a>
 800fcb4:	4b6c      	ldr	r3, [pc, #432]	; (800fe68 <_strtod_l+0xbf0>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	4640      	mov	r0, r8
 800fcba:	4649      	mov	r1, r9
 800fcbc:	f7f0 ff0e 	bl	8000adc <__aeabi_dcmplt>
 800fcc0:	b9d0      	cbnz	r0, 800fcf8 <_strtod_l+0xa80>
 800fcc2:	4640      	mov	r0, r8
 800fcc4:	4649      	mov	r1, r9
 800fcc6:	4b6c      	ldr	r3, [pc, #432]	; (800fe78 <_strtod_l+0xc00>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f7f0 fc95 	bl	80005f8 <__aeabi_dmul>
 800fcce:	4680      	mov	r8, r0
 800fcd0:	4689      	mov	r9, r1
 800fcd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fcd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800fcda:	9315      	str	r3, [sp, #84]	; 0x54
 800fcdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fce4:	e79d      	b.n	800fc22 <_strtod_l+0x9aa>
 800fce6:	f1ba 0f01 	cmp.w	sl, #1
 800fcea:	d102      	bne.n	800fcf2 <_strtod_l+0xa7a>
 800fcec:	2f00      	cmp	r7, #0
 800fcee:	f43f ad83 	beq.w	800f7f8 <_strtod_l+0x580>
 800fcf2:	4b62      	ldr	r3, [pc, #392]	; (800fe7c <_strtod_l+0xc04>)
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	e78e      	b.n	800fc16 <_strtod_l+0x99e>
 800fcf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fe78 <_strtod_l+0xc00>
 800fcfc:	f04f 0800 	mov.w	r8, #0
 800fd00:	e7e7      	b.n	800fcd2 <_strtod_l+0xa5a>
 800fd02:	4b5d      	ldr	r3, [pc, #372]	; (800fe78 <_strtod_l+0xc00>)
 800fd04:	4640      	mov	r0, r8
 800fd06:	4649      	mov	r1, r9
 800fd08:	2200      	movs	r2, #0
 800fd0a:	f7f0 fc75 	bl	80005f8 <__aeabi_dmul>
 800fd0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd10:	4680      	mov	r8, r0
 800fd12:	4689      	mov	r9, r1
 800fd14:	b933      	cbnz	r3, 800fd24 <_strtod_l+0xaac>
 800fd16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd1a:	900e      	str	r0, [sp, #56]	; 0x38
 800fd1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fd22:	e7dd      	b.n	800fce0 <_strtod_l+0xa68>
 800fd24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800fd28:	e7f9      	b.n	800fd1e <_strtod_l+0xaa6>
 800fd2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fd2e:	9b04      	ldr	r3, [sp, #16]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d1a8      	bne.n	800fc86 <_strtod_l+0xa0e>
 800fd34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd3a:	0d1b      	lsrs	r3, r3, #20
 800fd3c:	051b      	lsls	r3, r3, #20
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d1a1      	bne.n	800fc86 <_strtod_l+0xa0e>
 800fd42:	4640      	mov	r0, r8
 800fd44:	4649      	mov	r1, r9
 800fd46:	f7f0 ff9f 	bl	8000c88 <__aeabi_d2lz>
 800fd4a:	f7f0 fc27 	bl	800059c <__aeabi_l2d>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	460b      	mov	r3, r1
 800fd52:	4640      	mov	r0, r8
 800fd54:	4649      	mov	r1, r9
 800fd56:	f7f0 fa97 	bl	8000288 <__aeabi_dsub>
 800fd5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd60:	ea43 030a 	orr.w	r3, r3, sl
 800fd64:	4313      	orrs	r3, r2
 800fd66:	4680      	mov	r8, r0
 800fd68:	4689      	mov	r9, r1
 800fd6a:	d055      	beq.n	800fe18 <_strtod_l+0xba0>
 800fd6c:	a336      	add	r3, pc, #216	; (adr r3, 800fe48 <_strtod_l+0xbd0>)
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	f7f0 feb3 	bl	8000adc <__aeabi_dcmplt>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	f47f acd0 	bne.w	800f71c <_strtod_l+0x4a4>
 800fd7c:	a334      	add	r3, pc, #208	; (adr r3, 800fe50 <_strtod_l+0xbd8>)
 800fd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd82:	4640      	mov	r0, r8
 800fd84:	4649      	mov	r1, r9
 800fd86:	f7f0 fec7 	bl	8000b18 <__aeabi_dcmpgt>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	f43f af7b 	beq.w	800fc86 <_strtod_l+0xa0e>
 800fd90:	e4c4      	b.n	800f71c <_strtod_l+0x4a4>
 800fd92:	9b04      	ldr	r3, [sp, #16]
 800fd94:	b333      	cbz	r3, 800fde4 <_strtod_l+0xb6c>
 800fd96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fd9c:	d822      	bhi.n	800fde4 <_strtod_l+0xb6c>
 800fd9e:	a32e      	add	r3, pc, #184	; (adr r3, 800fe58 <_strtod_l+0xbe0>)
 800fda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda4:	4640      	mov	r0, r8
 800fda6:	4649      	mov	r1, r9
 800fda8:	f7f0 fea2 	bl	8000af0 <__aeabi_dcmple>
 800fdac:	b1a0      	cbz	r0, 800fdd8 <_strtod_l+0xb60>
 800fdae:	4649      	mov	r1, r9
 800fdb0:	4640      	mov	r0, r8
 800fdb2:	f7f0 fef9 	bl	8000ba8 <__aeabi_d2uiz>
 800fdb6:	2801      	cmp	r0, #1
 800fdb8:	bf38      	it	cc
 800fdba:	2001      	movcc	r0, #1
 800fdbc:	f7f0 fba2 	bl	8000504 <__aeabi_ui2d>
 800fdc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdc2:	4680      	mov	r8, r0
 800fdc4:	4689      	mov	r9, r1
 800fdc6:	bb23      	cbnz	r3, 800fe12 <_strtod_l+0xb9a>
 800fdc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdcc:	9010      	str	r0, [sp, #64]	; 0x40
 800fdce:	9311      	str	r3, [sp, #68]	; 0x44
 800fdd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fdd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fddc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fde0:	1a9b      	subs	r3, r3, r2
 800fde2:	9309      	str	r3, [sp, #36]	; 0x24
 800fde4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fde8:	eeb0 0a48 	vmov.f32	s0, s16
 800fdec:	eef0 0a68 	vmov.f32	s1, s17
 800fdf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fdf4:	f001 fe1e 	bl	8011a34 <__ulp>
 800fdf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fdfc:	ec53 2b10 	vmov	r2, r3, d0
 800fe00:	f7f0 fbfa 	bl	80005f8 <__aeabi_dmul>
 800fe04:	ec53 2b18 	vmov	r2, r3, d8
 800fe08:	f7f0 fa40 	bl	800028c <__adddf3>
 800fe0c:	4682      	mov	sl, r0
 800fe0e:	468b      	mov	fp, r1
 800fe10:	e78d      	b.n	800fd2e <_strtod_l+0xab6>
 800fe12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fe16:	e7db      	b.n	800fdd0 <_strtod_l+0xb58>
 800fe18:	a311      	add	r3, pc, #68	; (adr r3, 800fe60 <_strtod_l+0xbe8>)
 800fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1e:	f7f0 fe5d 	bl	8000adc <__aeabi_dcmplt>
 800fe22:	e7b2      	b.n	800fd8a <_strtod_l+0xb12>
 800fe24:	2300      	movs	r3, #0
 800fe26:	930a      	str	r3, [sp, #40]	; 0x28
 800fe28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fe2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe2c:	6013      	str	r3, [r2, #0]
 800fe2e:	f7ff ba6b 	b.w	800f308 <_strtod_l+0x90>
 800fe32:	2a65      	cmp	r2, #101	; 0x65
 800fe34:	f43f ab5f 	beq.w	800f4f6 <_strtod_l+0x27e>
 800fe38:	2a45      	cmp	r2, #69	; 0x45
 800fe3a:	f43f ab5c 	beq.w	800f4f6 <_strtod_l+0x27e>
 800fe3e:	2301      	movs	r3, #1
 800fe40:	f7ff bb94 	b.w	800f56c <_strtod_l+0x2f4>
 800fe44:	f3af 8000 	nop.w
 800fe48:	94a03595 	.word	0x94a03595
 800fe4c:	3fdfffff 	.word	0x3fdfffff
 800fe50:	35afe535 	.word	0x35afe535
 800fe54:	3fe00000 	.word	0x3fe00000
 800fe58:	ffc00000 	.word	0xffc00000
 800fe5c:	41dfffff 	.word	0x41dfffff
 800fe60:	94a03595 	.word	0x94a03595
 800fe64:	3fcfffff 	.word	0x3fcfffff
 800fe68:	3ff00000 	.word	0x3ff00000
 800fe6c:	7ff00000 	.word	0x7ff00000
 800fe70:	7fe00000 	.word	0x7fe00000
 800fe74:	7c9fffff 	.word	0x7c9fffff
 800fe78:	3fe00000 	.word	0x3fe00000
 800fe7c:	bff00000 	.word	0xbff00000
 800fe80:	7fefffff 	.word	0x7fefffff

0800fe84 <strtof>:
 800fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe88:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800ff38 <strtof+0xb4>
 800fe8c:	4b26      	ldr	r3, [pc, #152]	; (800ff28 <strtof+0xa4>)
 800fe8e:	460a      	mov	r2, r1
 800fe90:	ed2d 8b02 	vpush	{d8}
 800fe94:	4601      	mov	r1, r0
 800fe96:	f8d8 0000 	ldr.w	r0, [r8]
 800fe9a:	f7ff f9ed 	bl	800f278 <_strtod_l>
 800fe9e:	ec55 4b10 	vmov	r4, r5, d0
 800fea2:	ee10 2a10 	vmov	r2, s0
 800fea6:	ee10 0a10 	vmov	r0, s0
 800feaa:	462b      	mov	r3, r5
 800feac:	4629      	mov	r1, r5
 800feae:	f7f0 fe3d 	bl	8000b2c <__aeabi_dcmpun>
 800feb2:	b190      	cbz	r0, 800feda <strtof+0x56>
 800feb4:	2d00      	cmp	r5, #0
 800feb6:	481d      	ldr	r0, [pc, #116]	; (800ff2c <strtof+0xa8>)
 800feb8:	da09      	bge.n	800fece <strtof+0x4a>
 800feba:	f002 f975 	bl	80121a8 <nanf>
 800febe:	eeb1 8a40 	vneg.f32	s16, s0
 800fec2:	eeb0 0a48 	vmov.f32	s0, s16
 800fec6:	ecbd 8b02 	vpop	{d8}
 800feca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fece:	ecbd 8b02 	vpop	{d8}
 800fed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fed6:	f002 b967 	b.w	80121a8 <nanf>
 800feda:	4620      	mov	r0, r4
 800fedc:	4629      	mov	r1, r5
 800fede:	f7f0 fe83 	bl	8000be8 <__aeabi_d2f>
 800fee2:	ee08 0a10 	vmov	s16, r0
 800fee6:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ff30 <strtof+0xac>
 800feea:	eeb0 7ac8 	vabs.f32	s14, s16
 800feee:	eeb4 7a67 	vcmp.f32	s14, s15
 800fef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef6:	dde4      	ble.n	800fec2 <strtof+0x3e>
 800fef8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800fefc:	4b0d      	ldr	r3, [pc, #52]	; (800ff34 <strtof+0xb0>)
 800fefe:	f04f 32ff 	mov.w	r2, #4294967295
 800ff02:	4620      	mov	r0, r4
 800ff04:	4639      	mov	r1, r7
 800ff06:	f7f0 fe11 	bl	8000b2c <__aeabi_dcmpun>
 800ff0a:	b940      	cbnz	r0, 800ff1e <strtof+0x9a>
 800ff0c:	4b09      	ldr	r3, [pc, #36]	; (800ff34 <strtof+0xb0>)
 800ff0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff12:	4620      	mov	r0, r4
 800ff14:	4639      	mov	r1, r7
 800ff16:	f7f0 fdeb 	bl	8000af0 <__aeabi_dcmple>
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	d0d1      	beq.n	800fec2 <strtof+0x3e>
 800ff1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff22:	2222      	movs	r2, #34	; 0x22
 800ff24:	601a      	str	r2, [r3, #0]
 800ff26:	e7cc      	b.n	800fec2 <strtof+0x3e>
 800ff28:	200001ec 	.word	0x200001ec
 800ff2c:	080150c8 	.word	0x080150c8
 800ff30:	7f7fffff 	.word	0x7f7fffff
 800ff34:	7fefffff 	.word	0x7fefffff
 800ff38:	20000184 	.word	0x20000184

0800ff3c <quorem>:
 800ff3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff40:	6903      	ldr	r3, [r0, #16]
 800ff42:	690c      	ldr	r4, [r1, #16]
 800ff44:	42a3      	cmp	r3, r4
 800ff46:	4607      	mov	r7, r0
 800ff48:	f2c0 8081 	blt.w	801004e <quorem+0x112>
 800ff4c:	3c01      	subs	r4, #1
 800ff4e:	f101 0814 	add.w	r8, r1, #20
 800ff52:	f100 0514 	add.w	r5, r0, #20
 800ff56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff5a:	9301      	str	r3, [sp, #4]
 800ff5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ff60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff64:	3301      	adds	r3, #1
 800ff66:	429a      	cmp	r2, r3
 800ff68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ff6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ff70:	fbb2 f6f3 	udiv	r6, r2, r3
 800ff74:	d331      	bcc.n	800ffda <quorem+0x9e>
 800ff76:	f04f 0e00 	mov.w	lr, #0
 800ff7a:	4640      	mov	r0, r8
 800ff7c:	46ac      	mov	ip, r5
 800ff7e:	46f2      	mov	sl, lr
 800ff80:	f850 2b04 	ldr.w	r2, [r0], #4
 800ff84:	b293      	uxth	r3, r2
 800ff86:	fb06 e303 	mla	r3, r6, r3, lr
 800ff8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	ebaa 0303 	sub.w	r3, sl, r3
 800ff94:	f8dc a000 	ldr.w	sl, [ip]
 800ff98:	0c12      	lsrs	r2, r2, #16
 800ff9a:	fa13 f38a 	uxtah	r3, r3, sl
 800ff9e:	fb06 e202 	mla	r2, r6, r2, lr
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	9b00      	ldr	r3, [sp, #0]
 800ffa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ffaa:	b292      	uxth	r2, r2
 800ffac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ffb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ffb4:	f8bd 3000 	ldrh.w	r3, [sp]
 800ffb8:	4581      	cmp	r9, r0
 800ffba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffbe:	f84c 3b04 	str.w	r3, [ip], #4
 800ffc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ffc6:	d2db      	bcs.n	800ff80 <quorem+0x44>
 800ffc8:	f855 300b 	ldr.w	r3, [r5, fp]
 800ffcc:	b92b      	cbnz	r3, 800ffda <quorem+0x9e>
 800ffce:	9b01      	ldr	r3, [sp, #4]
 800ffd0:	3b04      	subs	r3, #4
 800ffd2:	429d      	cmp	r5, r3
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	d32e      	bcc.n	8010036 <quorem+0xfa>
 800ffd8:	613c      	str	r4, [r7, #16]
 800ffda:	4638      	mov	r0, r7
 800ffdc:	f001 fc84 	bl	80118e8 <__mcmp>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	db24      	blt.n	801002e <quorem+0xf2>
 800ffe4:	3601      	adds	r6, #1
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	f04f 0c00 	mov.w	ip, #0
 800ffec:	f858 2b04 	ldr.w	r2, [r8], #4
 800fff0:	f8d0 e000 	ldr.w	lr, [r0]
 800fff4:	b293      	uxth	r3, r2
 800fff6:	ebac 0303 	sub.w	r3, ip, r3
 800fffa:	0c12      	lsrs	r2, r2, #16
 800fffc:	fa13 f38e 	uxtah	r3, r3, lr
 8010000:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010004:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010008:	b29b      	uxth	r3, r3
 801000a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801000e:	45c1      	cmp	r9, r8
 8010010:	f840 3b04 	str.w	r3, [r0], #4
 8010014:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010018:	d2e8      	bcs.n	800ffec <quorem+0xb0>
 801001a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801001e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010022:	b922      	cbnz	r2, 801002e <quorem+0xf2>
 8010024:	3b04      	subs	r3, #4
 8010026:	429d      	cmp	r5, r3
 8010028:	461a      	mov	r2, r3
 801002a:	d30a      	bcc.n	8010042 <quorem+0x106>
 801002c:	613c      	str	r4, [r7, #16]
 801002e:	4630      	mov	r0, r6
 8010030:	b003      	add	sp, #12
 8010032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010036:	6812      	ldr	r2, [r2, #0]
 8010038:	3b04      	subs	r3, #4
 801003a:	2a00      	cmp	r2, #0
 801003c:	d1cc      	bne.n	800ffd8 <quorem+0x9c>
 801003e:	3c01      	subs	r4, #1
 8010040:	e7c7      	b.n	800ffd2 <quorem+0x96>
 8010042:	6812      	ldr	r2, [r2, #0]
 8010044:	3b04      	subs	r3, #4
 8010046:	2a00      	cmp	r2, #0
 8010048:	d1f0      	bne.n	801002c <quorem+0xf0>
 801004a:	3c01      	subs	r4, #1
 801004c:	e7eb      	b.n	8010026 <quorem+0xea>
 801004e:	2000      	movs	r0, #0
 8010050:	e7ee      	b.n	8010030 <quorem+0xf4>
 8010052:	0000      	movs	r0, r0
 8010054:	0000      	movs	r0, r0
	...

08010058 <_dtoa_r>:
 8010058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	ed2d 8b04 	vpush	{d8-d9}
 8010060:	ec57 6b10 	vmov	r6, r7, d0
 8010064:	b093      	sub	sp, #76	; 0x4c
 8010066:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010068:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801006c:	9106      	str	r1, [sp, #24]
 801006e:	ee10 aa10 	vmov	sl, s0
 8010072:	4604      	mov	r4, r0
 8010074:	9209      	str	r2, [sp, #36]	; 0x24
 8010076:	930c      	str	r3, [sp, #48]	; 0x30
 8010078:	46bb      	mov	fp, r7
 801007a:	b975      	cbnz	r5, 801009a <_dtoa_r+0x42>
 801007c:	2010      	movs	r0, #16
 801007e:	f001 f94d 	bl	801131c <malloc>
 8010082:	4602      	mov	r2, r0
 8010084:	6260      	str	r0, [r4, #36]	; 0x24
 8010086:	b920      	cbnz	r0, 8010092 <_dtoa_r+0x3a>
 8010088:	4ba7      	ldr	r3, [pc, #668]	; (8010328 <_dtoa_r+0x2d0>)
 801008a:	21ea      	movs	r1, #234	; 0xea
 801008c:	48a7      	ldr	r0, [pc, #668]	; (801032c <_dtoa_r+0x2d4>)
 801008e:	f002 f8b3 	bl	80121f8 <__assert_func>
 8010092:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010096:	6005      	str	r5, [r0, #0]
 8010098:	60c5      	str	r5, [r0, #12]
 801009a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801009c:	6819      	ldr	r1, [r3, #0]
 801009e:	b151      	cbz	r1, 80100b6 <_dtoa_r+0x5e>
 80100a0:	685a      	ldr	r2, [r3, #4]
 80100a2:	604a      	str	r2, [r1, #4]
 80100a4:	2301      	movs	r3, #1
 80100a6:	4093      	lsls	r3, r2
 80100a8:	608b      	str	r3, [r1, #8]
 80100aa:	4620      	mov	r0, r4
 80100ac:	f001 f990 	bl	80113d0 <_Bfree>
 80100b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100b2:	2200      	movs	r2, #0
 80100b4:	601a      	str	r2, [r3, #0]
 80100b6:	1e3b      	subs	r3, r7, #0
 80100b8:	bfaa      	itet	ge
 80100ba:	2300      	movge	r3, #0
 80100bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80100c0:	f8c8 3000 	strge.w	r3, [r8]
 80100c4:	4b9a      	ldr	r3, [pc, #616]	; (8010330 <_dtoa_r+0x2d8>)
 80100c6:	bfbc      	itt	lt
 80100c8:	2201      	movlt	r2, #1
 80100ca:	f8c8 2000 	strlt.w	r2, [r8]
 80100ce:	ea33 030b 	bics.w	r3, r3, fp
 80100d2:	d11b      	bne.n	801010c <_dtoa_r+0xb4>
 80100d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80100d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80100da:	6013      	str	r3, [r2, #0]
 80100dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100e0:	4333      	orrs	r3, r6
 80100e2:	f000 8592 	beq.w	8010c0a <_dtoa_r+0xbb2>
 80100e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100e8:	b963      	cbnz	r3, 8010104 <_dtoa_r+0xac>
 80100ea:	4b92      	ldr	r3, [pc, #584]	; (8010334 <_dtoa_r+0x2dc>)
 80100ec:	e022      	b.n	8010134 <_dtoa_r+0xdc>
 80100ee:	4b92      	ldr	r3, [pc, #584]	; (8010338 <_dtoa_r+0x2e0>)
 80100f0:	9301      	str	r3, [sp, #4]
 80100f2:	3308      	adds	r3, #8
 80100f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80100f6:	6013      	str	r3, [r2, #0]
 80100f8:	9801      	ldr	r0, [sp, #4]
 80100fa:	b013      	add	sp, #76	; 0x4c
 80100fc:	ecbd 8b04 	vpop	{d8-d9}
 8010100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010104:	4b8b      	ldr	r3, [pc, #556]	; (8010334 <_dtoa_r+0x2dc>)
 8010106:	9301      	str	r3, [sp, #4]
 8010108:	3303      	adds	r3, #3
 801010a:	e7f3      	b.n	80100f4 <_dtoa_r+0x9c>
 801010c:	2200      	movs	r2, #0
 801010e:	2300      	movs	r3, #0
 8010110:	4650      	mov	r0, sl
 8010112:	4659      	mov	r1, fp
 8010114:	f7f0 fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8010118:	ec4b ab19 	vmov	d9, sl, fp
 801011c:	4680      	mov	r8, r0
 801011e:	b158      	cbz	r0, 8010138 <_dtoa_r+0xe0>
 8010120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010122:	2301      	movs	r3, #1
 8010124:	6013      	str	r3, [r2, #0]
 8010126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010128:	2b00      	cmp	r3, #0
 801012a:	f000 856b 	beq.w	8010c04 <_dtoa_r+0xbac>
 801012e:	4883      	ldr	r0, [pc, #524]	; (801033c <_dtoa_r+0x2e4>)
 8010130:	6018      	str	r0, [r3, #0]
 8010132:	1e43      	subs	r3, r0, #1
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	e7df      	b.n	80100f8 <_dtoa_r+0xa0>
 8010138:	ec4b ab10 	vmov	d0, sl, fp
 801013c:	aa10      	add	r2, sp, #64	; 0x40
 801013e:	a911      	add	r1, sp, #68	; 0x44
 8010140:	4620      	mov	r0, r4
 8010142:	f001 fcf3 	bl	8011b2c <__d2b>
 8010146:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801014a:	ee08 0a10 	vmov	s16, r0
 801014e:	2d00      	cmp	r5, #0
 8010150:	f000 8084 	beq.w	801025c <_dtoa_r+0x204>
 8010154:	ee19 3a90 	vmov	r3, s19
 8010158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801015c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010160:	4656      	mov	r6, sl
 8010162:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801016a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801016e:	4b74      	ldr	r3, [pc, #464]	; (8010340 <_dtoa_r+0x2e8>)
 8010170:	2200      	movs	r2, #0
 8010172:	4630      	mov	r0, r6
 8010174:	4639      	mov	r1, r7
 8010176:	f7f0 f887 	bl	8000288 <__aeabi_dsub>
 801017a:	a365      	add	r3, pc, #404	; (adr r3, 8010310 <_dtoa_r+0x2b8>)
 801017c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010180:	f7f0 fa3a 	bl	80005f8 <__aeabi_dmul>
 8010184:	a364      	add	r3, pc, #400	; (adr r3, 8010318 <_dtoa_r+0x2c0>)
 8010186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018a:	f7f0 f87f 	bl	800028c <__adddf3>
 801018e:	4606      	mov	r6, r0
 8010190:	4628      	mov	r0, r5
 8010192:	460f      	mov	r7, r1
 8010194:	f7f0 f9c6 	bl	8000524 <__aeabi_i2d>
 8010198:	a361      	add	r3, pc, #388	; (adr r3, 8010320 <_dtoa_r+0x2c8>)
 801019a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019e:	f7f0 fa2b 	bl	80005f8 <__aeabi_dmul>
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	4630      	mov	r0, r6
 80101a8:	4639      	mov	r1, r7
 80101aa:	f7f0 f86f 	bl	800028c <__adddf3>
 80101ae:	4606      	mov	r6, r0
 80101b0:	460f      	mov	r7, r1
 80101b2:	f7f0 fcd1 	bl	8000b58 <__aeabi_d2iz>
 80101b6:	2200      	movs	r2, #0
 80101b8:	9000      	str	r0, [sp, #0]
 80101ba:	2300      	movs	r3, #0
 80101bc:	4630      	mov	r0, r6
 80101be:	4639      	mov	r1, r7
 80101c0:	f7f0 fc8c 	bl	8000adc <__aeabi_dcmplt>
 80101c4:	b150      	cbz	r0, 80101dc <_dtoa_r+0x184>
 80101c6:	9800      	ldr	r0, [sp, #0]
 80101c8:	f7f0 f9ac 	bl	8000524 <__aeabi_i2d>
 80101cc:	4632      	mov	r2, r6
 80101ce:	463b      	mov	r3, r7
 80101d0:	f7f0 fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80101d4:	b910      	cbnz	r0, 80101dc <_dtoa_r+0x184>
 80101d6:	9b00      	ldr	r3, [sp, #0]
 80101d8:	3b01      	subs	r3, #1
 80101da:	9300      	str	r3, [sp, #0]
 80101dc:	9b00      	ldr	r3, [sp, #0]
 80101de:	2b16      	cmp	r3, #22
 80101e0:	d85a      	bhi.n	8010298 <_dtoa_r+0x240>
 80101e2:	9a00      	ldr	r2, [sp, #0]
 80101e4:	4b57      	ldr	r3, [pc, #348]	; (8010344 <_dtoa_r+0x2ec>)
 80101e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ee:	ec51 0b19 	vmov	r0, r1, d9
 80101f2:	f7f0 fc73 	bl	8000adc <__aeabi_dcmplt>
 80101f6:	2800      	cmp	r0, #0
 80101f8:	d050      	beq.n	801029c <_dtoa_r+0x244>
 80101fa:	9b00      	ldr	r3, [sp, #0]
 80101fc:	3b01      	subs	r3, #1
 80101fe:	9300      	str	r3, [sp, #0]
 8010200:	2300      	movs	r3, #0
 8010202:	930b      	str	r3, [sp, #44]	; 0x2c
 8010204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010206:	1b5d      	subs	r5, r3, r5
 8010208:	1e6b      	subs	r3, r5, #1
 801020a:	9305      	str	r3, [sp, #20]
 801020c:	bf45      	ittet	mi
 801020e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010212:	9304      	strmi	r3, [sp, #16]
 8010214:	2300      	movpl	r3, #0
 8010216:	2300      	movmi	r3, #0
 8010218:	bf4c      	ite	mi
 801021a:	9305      	strmi	r3, [sp, #20]
 801021c:	9304      	strpl	r3, [sp, #16]
 801021e:	9b00      	ldr	r3, [sp, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	db3d      	blt.n	80102a0 <_dtoa_r+0x248>
 8010224:	9b05      	ldr	r3, [sp, #20]
 8010226:	9a00      	ldr	r2, [sp, #0]
 8010228:	920a      	str	r2, [sp, #40]	; 0x28
 801022a:	4413      	add	r3, r2
 801022c:	9305      	str	r3, [sp, #20]
 801022e:	2300      	movs	r3, #0
 8010230:	9307      	str	r3, [sp, #28]
 8010232:	9b06      	ldr	r3, [sp, #24]
 8010234:	2b09      	cmp	r3, #9
 8010236:	f200 8089 	bhi.w	801034c <_dtoa_r+0x2f4>
 801023a:	2b05      	cmp	r3, #5
 801023c:	bfc4      	itt	gt
 801023e:	3b04      	subgt	r3, #4
 8010240:	9306      	strgt	r3, [sp, #24]
 8010242:	9b06      	ldr	r3, [sp, #24]
 8010244:	f1a3 0302 	sub.w	r3, r3, #2
 8010248:	bfcc      	ite	gt
 801024a:	2500      	movgt	r5, #0
 801024c:	2501      	movle	r5, #1
 801024e:	2b03      	cmp	r3, #3
 8010250:	f200 8087 	bhi.w	8010362 <_dtoa_r+0x30a>
 8010254:	e8df f003 	tbb	[pc, r3]
 8010258:	59383a2d 	.word	0x59383a2d
 801025c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010260:	441d      	add	r5, r3
 8010262:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010266:	2b20      	cmp	r3, #32
 8010268:	bfc1      	itttt	gt
 801026a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801026e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010272:	fa0b f303 	lslgt.w	r3, fp, r3
 8010276:	fa26 f000 	lsrgt.w	r0, r6, r0
 801027a:	bfda      	itte	le
 801027c:	f1c3 0320 	rsble	r3, r3, #32
 8010280:	fa06 f003 	lslle.w	r0, r6, r3
 8010284:	4318      	orrgt	r0, r3
 8010286:	f7f0 f93d 	bl	8000504 <__aeabi_ui2d>
 801028a:	2301      	movs	r3, #1
 801028c:	4606      	mov	r6, r0
 801028e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010292:	3d01      	subs	r5, #1
 8010294:	930e      	str	r3, [sp, #56]	; 0x38
 8010296:	e76a      	b.n	801016e <_dtoa_r+0x116>
 8010298:	2301      	movs	r3, #1
 801029a:	e7b2      	b.n	8010202 <_dtoa_r+0x1aa>
 801029c:	900b      	str	r0, [sp, #44]	; 0x2c
 801029e:	e7b1      	b.n	8010204 <_dtoa_r+0x1ac>
 80102a0:	9b04      	ldr	r3, [sp, #16]
 80102a2:	9a00      	ldr	r2, [sp, #0]
 80102a4:	1a9b      	subs	r3, r3, r2
 80102a6:	9304      	str	r3, [sp, #16]
 80102a8:	4253      	negs	r3, r2
 80102aa:	9307      	str	r3, [sp, #28]
 80102ac:	2300      	movs	r3, #0
 80102ae:	930a      	str	r3, [sp, #40]	; 0x28
 80102b0:	e7bf      	b.n	8010232 <_dtoa_r+0x1da>
 80102b2:	2300      	movs	r3, #0
 80102b4:	9308      	str	r3, [sp, #32]
 80102b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	dc55      	bgt.n	8010368 <_dtoa_r+0x310>
 80102bc:	2301      	movs	r3, #1
 80102be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80102c2:	461a      	mov	r2, r3
 80102c4:	9209      	str	r2, [sp, #36]	; 0x24
 80102c6:	e00c      	b.n	80102e2 <_dtoa_r+0x28a>
 80102c8:	2301      	movs	r3, #1
 80102ca:	e7f3      	b.n	80102b4 <_dtoa_r+0x25c>
 80102cc:	2300      	movs	r3, #0
 80102ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102d0:	9308      	str	r3, [sp, #32]
 80102d2:	9b00      	ldr	r3, [sp, #0]
 80102d4:	4413      	add	r3, r2
 80102d6:	9302      	str	r3, [sp, #8]
 80102d8:	3301      	adds	r3, #1
 80102da:	2b01      	cmp	r3, #1
 80102dc:	9303      	str	r3, [sp, #12]
 80102de:	bfb8      	it	lt
 80102e0:	2301      	movlt	r3, #1
 80102e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80102e4:	2200      	movs	r2, #0
 80102e6:	6042      	str	r2, [r0, #4]
 80102e8:	2204      	movs	r2, #4
 80102ea:	f102 0614 	add.w	r6, r2, #20
 80102ee:	429e      	cmp	r6, r3
 80102f0:	6841      	ldr	r1, [r0, #4]
 80102f2:	d93d      	bls.n	8010370 <_dtoa_r+0x318>
 80102f4:	4620      	mov	r0, r4
 80102f6:	f001 f82b 	bl	8011350 <_Balloc>
 80102fa:	9001      	str	r0, [sp, #4]
 80102fc:	2800      	cmp	r0, #0
 80102fe:	d13b      	bne.n	8010378 <_dtoa_r+0x320>
 8010300:	4b11      	ldr	r3, [pc, #68]	; (8010348 <_dtoa_r+0x2f0>)
 8010302:	4602      	mov	r2, r0
 8010304:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010308:	e6c0      	b.n	801008c <_dtoa_r+0x34>
 801030a:	2301      	movs	r3, #1
 801030c:	e7df      	b.n	80102ce <_dtoa_r+0x276>
 801030e:	bf00      	nop
 8010310:	636f4361 	.word	0x636f4361
 8010314:	3fd287a7 	.word	0x3fd287a7
 8010318:	8b60c8b3 	.word	0x8b60c8b3
 801031c:	3fc68a28 	.word	0x3fc68a28
 8010320:	509f79fb 	.word	0x509f79fb
 8010324:	3fd34413 	.word	0x3fd34413
 8010328:	08014e25 	.word	0x08014e25
 801032c:	08014e3c 	.word	0x08014e3c
 8010330:	7ff00000 	.word	0x7ff00000
 8010334:	08014e21 	.word	0x08014e21
 8010338:	08014e18 	.word	0x08014e18
 801033c:	0801316f 	.word	0x0801316f
 8010340:	3ff80000 	.word	0x3ff80000
 8010344:	08014fa8 	.word	0x08014fa8
 8010348:	08014e97 	.word	0x08014e97
 801034c:	2501      	movs	r5, #1
 801034e:	2300      	movs	r3, #0
 8010350:	9306      	str	r3, [sp, #24]
 8010352:	9508      	str	r5, [sp, #32]
 8010354:	f04f 33ff 	mov.w	r3, #4294967295
 8010358:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801035c:	2200      	movs	r2, #0
 801035e:	2312      	movs	r3, #18
 8010360:	e7b0      	b.n	80102c4 <_dtoa_r+0x26c>
 8010362:	2301      	movs	r3, #1
 8010364:	9308      	str	r3, [sp, #32]
 8010366:	e7f5      	b.n	8010354 <_dtoa_r+0x2fc>
 8010368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801036a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801036e:	e7b8      	b.n	80102e2 <_dtoa_r+0x28a>
 8010370:	3101      	adds	r1, #1
 8010372:	6041      	str	r1, [r0, #4]
 8010374:	0052      	lsls	r2, r2, #1
 8010376:	e7b8      	b.n	80102ea <_dtoa_r+0x292>
 8010378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801037a:	9a01      	ldr	r2, [sp, #4]
 801037c:	601a      	str	r2, [r3, #0]
 801037e:	9b03      	ldr	r3, [sp, #12]
 8010380:	2b0e      	cmp	r3, #14
 8010382:	f200 809d 	bhi.w	80104c0 <_dtoa_r+0x468>
 8010386:	2d00      	cmp	r5, #0
 8010388:	f000 809a 	beq.w	80104c0 <_dtoa_r+0x468>
 801038c:	9b00      	ldr	r3, [sp, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	dd32      	ble.n	80103f8 <_dtoa_r+0x3a0>
 8010392:	4ab7      	ldr	r2, [pc, #732]	; (8010670 <_dtoa_r+0x618>)
 8010394:	f003 030f 	and.w	r3, r3, #15
 8010398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801039c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80103a0:	9b00      	ldr	r3, [sp, #0]
 80103a2:	05d8      	lsls	r0, r3, #23
 80103a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80103a8:	d516      	bpl.n	80103d8 <_dtoa_r+0x380>
 80103aa:	4bb2      	ldr	r3, [pc, #712]	; (8010674 <_dtoa_r+0x61c>)
 80103ac:	ec51 0b19 	vmov	r0, r1, d9
 80103b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80103b4:	f7f0 fa4a 	bl	800084c <__aeabi_ddiv>
 80103b8:	f007 070f 	and.w	r7, r7, #15
 80103bc:	4682      	mov	sl, r0
 80103be:	468b      	mov	fp, r1
 80103c0:	2503      	movs	r5, #3
 80103c2:	4eac      	ldr	r6, [pc, #688]	; (8010674 <_dtoa_r+0x61c>)
 80103c4:	b957      	cbnz	r7, 80103dc <_dtoa_r+0x384>
 80103c6:	4642      	mov	r2, r8
 80103c8:	464b      	mov	r3, r9
 80103ca:	4650      	mov	r0, sl
 80103cc:	4659      	mov	r1, fp
 80103ce:	f7f0 fa3d 	bl	800084c <__aeabi_ddiv>
 80103d2:	4682      	mov	sl, r0
 80103d4:	468b      	mov	fp, r1
 80103d6:	e028      	b.n	801042a <_dtoa_r+0x3d2>
 80103d8:	2502      	movs	r5, #2
 80103da:	e7f2      	b.n	80103c2 <_dtoa_r+0x36a>
 80103dc:	07f9      	lsls	r1, r7, #31
 80103de:	d508      	bpl.n	80103f2 <_dtoa_r+0x39a>
 80103e0:	4640      	mov	r0, r8
 80103e2:	4649      	mov	r1, r9
 80103e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80103e8:	f7f0 f906 	bl	80005f8 <__aeabi_dmul>
 80103ec:	3501      	adds	r5, #1
 80103ee:	4680      	mov	r8, r0
 80103f0:	4689      	mov	r9, r1
 80103f2:	107f      	asrs	r7, r7, #1
 80103f4:	3608      	adds	r6, #8
 80103f6:	e7e5      	b.n	80103c4 <_dtoa_r+0x36c>
 80103f8:	f000 809b 	beq.w	8010532 <_dtoa_r+0x4da>
 80103fc:	9b00      	ldr	r3, [sp, #0]
 80103fe:	4f9d      	ldr	r7, [pc, #628]	; (8010674 <_dtoa_r+0x61c>)
 8010400:	425e      	negs	r6, r3
 8010402:	4b9b      	ldr	r3, [pc, #620]	; (8010670 <_dtoa_r+0x618>)
 8010404:	f006 020f 	and.w	r2, r6, #15
 8010408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801040c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010410:	ec51 0b19 	vmov	r0, r1, d9
 8010414:	f7f0 f8f0 	bl	80005f8 <__aeabi_dmul>
 8010418:	1136      	asrs	r6, r6, #4
 801041a:	4682      	mov	sl, r0
 801041c:	468b      	mov	fp, r1
 801041e:	2300      	movs	r3, #0
 8010420:	2502      	movs	r5, #2
 8010422:	2e00      	cmp	r6, #0
 8010424:	d17a      	bne.n	801051c <_dtoa_r+0x4c4>
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1d3      	bne.n	80103d2 <_dtoa_r+0x37a>
 801042a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801042c:	2b00      	cmp	r3, #0
 801042e:	f000 8082 	beq.w	8010536 <_dtoa_r+0x4de>
 8010432:	4b91      	ldr	r3, [pc, #580]	; (8010678 <_dtoa_r+0x620>)
 8010434:	2200      	movs	r2, #0
 8010436:	4650      	mov	r0, sl
 8010438:	4659      	mov	r1, fp
 801043a:	f7f0 fb4f 	bl	8000adc <__aeabi_dcmplt>
 801043e:	2800      	cmp	r0, #0
 8010440:	d079      	beq.n	8010536 <_dtoa_r+0x4de>
 8010442:	9b03      	ldr	r3, [sp, #12]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d076      	beq.n	8010536 <_dtoa_r+0x4de>
 8010448:	9b02      	ldr	r3, [sp, #8]
 801044a:	2b00      	cmp	r3, #0
 801044c:	dd36      	ble.n	80104bc <_dtoa_r+0x464>
 801044e:	9b00      	ldr	r3, [sp, #0]
 8010450:	4650      	mov	r0, sl
 8010452:	4659      	mov	r1, fp
 8010454:	1e5f      	subs	r7, r3, #1
 8010456:	2200      	movs	r2, #0
 8010458:	4b88      	ldr	r3, [pc, #544]	; (801067c <_dtoa_r+0x624>)
 801045a:	f7f0 f8cd 	bl	80005f8 <__aeabi_dmul>
 801045e:	9e02      	ldr	r6, [sp, #8]
 8010460:	4682      	mov	sl, r0
 8010462:	468b      	mov	fp, r1
 8010464:	3501      	adds	r5, #1
 8010466:	4628      	mov	r0, r5
 8010468:	f7f0 f85c 	bl	8000524 <__aeabi_i2d>
 801046c:	4652      	mov	r2, sl
 801046e:	465b      	mov	r3, fp
 8010470:	f7f0 f8c2 	bl	80005f8 <__aeabi_dmul>
 8010474:	4b82      	ldr	r3, [pc, #520]	; (8010680 <_dtoa_r+0x628>)
 8010476:	2200      	movs	r2, #0
 8010478:	f7ef ff08 	bl	800028c <__adddf3>
 801047c:	46d0      	mov	r8, sl
 801047e:	46d9      	mov	r9, fp
 8010480:	4682      	mov	sl, r0
 8010482:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010486:	2e00      	cmp	r6, #0
 8010488:	d158      	bne.n	801053c <_dtoa_r+0x4e4>
 801048a:	4b7e      	ldr	r3, [pc, #504]	; (8010684 <_dtoa_r+0x62c>)
 801048c:	2200      	movs	r2, #0
 801048e:	4640      	mov	r0, r8
 8010490:	4649      	mov	r1, r9
 8010492:	f7ef fef9 	bl	8000288 <__aeabi_dsub>
 8010496:	4652      	mov	r2, sl
 8010498:	465b      	mov	r3, fp
 801049a:	4680      	mov	r8, r0
 801049c:	4689      	mov	r9, r1
 801049e:	f7f0 fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 80104a2:	2800      	cmp	r0, #0
 80104a4:	f040 8295 	bne.w	80109d2 <_dtoa_r+0x97a>
 80104a8:	4652      	mov	r2, sl
 80104aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80104ae:	4640      	mov	r0, r8
 80104b0:	4649      	mov	r1, r9
 80104b2:	f7f0 fb13 	bl	8000adc <__aeabi_dcmplt>
 80104b6:	2800      	cmp	r0, #0
 80104b8:	f040 8289 	bne.w	80109ce <_dtoa_r+0x976>
 80104bc:	ec5b ab19 	vmov	sl, fp, d9
 80104c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	f2c0 8148 	blt.w	8010758 <_dtoa_r+0x700>
 80104c8:	9a00      	ldr	r2, [sp, #0]
 80104ca:	2a0e      	cmp	r2, #14
 80104cc:	f300 8144 	bgt.w	8010758 <_dtoa_r+0x700>
 80104d0:	4b67      	ldr	r3, [pc, #412]	; (8010670 <_dtoa_r+0x618>)
 80104d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80104da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f280 80d5 	bge.w	801068c <_dtoa_r+0x634>
 80104e2:	9b03      	ldr	r3, [sp, #12]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f300 80d1 	bgt.w	801068c <_dtoa_r+0x634>
 80104ea:	f040 826f 	bne.w	80109cc <_dtoa_r+0x974>
 80104ee:	4b65      	ldr	r3, [pc, #404]	; (8010684 <_dtoa_r+0x62c>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	4640      	mov	r0, r8
 80104f4:	4649      	mov	r1, r9
 80104f6:	f7f0 f87f 	bl	80005f8 <__aeabi_dmul>
 80104fa:	4652      	mov	r2, sl
 80104fc:	465b      	mov	r3, fp
 80104fe:	f7f0 fb01 	bl	8000b04 <__aeabi_dcmpge>
 8010502:	9e03      	ldr	r6, [sp, #12]
 8010504:	4637      	mov	r7, r6
 8010506:	2800      	cmp	r0, #0
 8010508:	f040 8245 	bne.w	8010996 <_dtoa_r+0x93e>
 801050c:	9d01      	ldr	r5, [sp, #4]
 801050e:	2331      	movs	r3, #49	; 0x31
 8010510:	f805 3b01 	strb.w	r3, [r5], #1
 8010514:	9b00      	ldr	r3, [sp, #0]
 8010516:	3301      	adds	r3, #1
 8010518:	9300      	str	r3, [sp, #0]
 801051a:	e240      	b.n	801099e <_dtoa_r+0x946>
 801051c:	07f2      	lsls	r2, r6, #31
 801051e:	d505      	bpl.n	801052c <_dtoa_r+0x4d4>
 8010520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010524:	f7f0 f868 	bl	80005f8 <__aeabi_dmul>
 8010528:	3501      	adds	r5, #1
 801052a:	2301      	movs	r3, #1
 801052c:	1076      	asrs	r6, r6, #1
 801052e:	3708      	adds	r7, #8
 8010530:	e777      	b.n	8010422 <_dtoa_r+0x3ca>
 8010532:	2502      	movs	r5, #2
 8010534:	e779      	b.n	801042a <_dtoa_r+0x3d2>
 8010536:	9f00      	ldr	r7, [sp, #0]
 8010538:	9e03      	ldr	r6, [sp, #12]
 801053a:	e794      	b.n	8010466 <_dtoa_r+0x40e>
 801053c:	9901      	ldr	r1, [sp, #4]
 801053e:	4b4c      	ldr	r3, [pc, #304]	; (8010670 <_dtoa_r+0x618>)
 8010540:	4431      	add	r1, r6
 8010542:	910d      	str	r1, [sp, #52]	; 0x34
 8010544:	9908      	ldr	r1, [sp, #32]
 8010546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801054a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801054e:	2900      	cmp	r1, #0
 8010550:	d043      	beq.n	80105da <_dtoa_r+0x582>
 8010552:	494d      	ldr	r1, [pc, #308]	; (8010688 <_dtoa_r+0x630>)
 8010554:	2000      	movs	r0, #0
 8010556:	f7f0 f979 	bl	800084c <__aeabi_ddiv>
 801055a:	4652      	mov	r2, sl
 801055c:	465b      	mov	r3, fp
 801055e:	f7ef fe93 	bl	8000288 <__aeabi_dsub>
 8010562:	9d01      	ldr	r5, [sp, #4]
 8010564:	4682      	mov	sl, r0
 8010566:	468b      	mov	fp, r1
 8010568:	4649      	mov	r1, r9
 801056a:	4640      	mov	r0, r8
 801056c:	f7f0 faf4 	bl	8000b58 <__aeabi_d2iz>
 8010570:	4606      	mov	r6, r0
 8010572:	f7ef ffd7 	bl	8000524 <__aeabi_i2d>
 8010576:	4602      	mov	r2, r0
 8010578:	460b      	mov	r3, r1
 801057a:	4640      	mov	r0, r8
 801057c:	4649      	mov	r1, r9
 801057e:	f7ef fe83 	bl	8000288 <__aeabi_dsub>
 8010582:	3630      	adds	r6, #48	; 0x30
 8010584:	f805 6b01 	strb.w	r6, [r5], #1
 8010588:	4652      	mov	r2, sl
 801058a:	465b      	mov	r3, fp
 801058c:	4680      	mov	r8, r0
 801058e:	4689      	mov	r9, r1
 8010590:	f7f0 faa4 	bl	8000adc <__aeabi_dcmplt>
 8010594:	2800      	cmp	r0, #0
 8010596:	d163      	bne.n	8010660 <_dtoa_r+0x608>
 8010598:	4642      	mov	r2, r8
 801059a:	464b      	mov	r3, r9
 801059c:	4936      	ldr	r1, [pc, #216]	; (8010678 <_dtoa_r+0x620>)
 801059e:	2000      	movs	r0, #0
 80105a0:	f7ef fe72 	bl	8000288 <__aeabi_dsub>
 80105a4:	4652      	mov	r2, sl
 80105a6:	465b      	mov	r3, fp
 80105a8:	f7f0 fa98 	bl	8000adc <__aeabi_dcmplt>
 80105ac:	2800      	cmp	r0, #0
 80105ae:	f040 80b5 	bne.w	801071c <_dtoa_r+0x6c4>
 80105b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105b4:	429d      	cmp	r5, r3
 80105b6:	d081      	beq.n	80104bc <_dtoa_r+0x464>
 80105b8:	4b30      	ldr	r3, [pc, #192]	; (801067c <_dtoa_r+0x624>)
 80105ba:	2200      	movs	r2, #0
 80105bc:	4650      	mov	r0, sl
 80105be:	4659      	mov	r1, fp
 80105c0:	f7f0 f81a 	bl	80005f8 <__aeabi_dmul>
 80105c4:	4b2d      	ldr	r3, [pc, #180]	; (801067c <_dtoa_r+0x624>)
 80105c6:	4682      	mov	sl, r0
 80105c8:	468b      	mov	fp, r1
 80105ca:	4640      	mov	r0, r8
 80105cc:	4649      	mov	r1, r9
 80105ce:	2200      	movs	r2, #0
 80105d0:	f7f0 f812 	bl	80005f8 <__aeabi_dmul>
 80105d4:	4680      	mov	r8, r0
 80105d6:	4689      	mov	r9, r1
 80105d8:	e7c6      	b.n	8010568 <_dtoa_r+0x510>
 80105da:	4650      	mov	r0, sl
 80105dc:	4659      	mov	r1, fp
 80105de:	f7f0 f80b 	bl	80005f8 <__aeabi_dmul>
 80105e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105e4:	9d01      	ldr	r5, [sp, #4]
 80105e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80105e8:	4682      	mov	sl, r0
 80105ea:	468b      	mov	fp, r1
 80105ec:	4649      	mov	r1, r9
 80105ee:	4640      	mov	r0, r8
 80105f0:	f7f0 fab2 	bl	8000b58 <__aeabi_d2iz>
 80105f4:	4606      	mov	r6, r0
 80105f6:	f7ef ff95 	bl	8000524 <__aeabi_i2d>
 80105fa:	3630      	adds	r6, #48	; 0x30
 80105fc:	4602      	mov	r2, r0
 80105fe:	460b      	mov	r3, r1
 8010600:	4640      	mov	r0, r8
 8010602:	4649      	mov	r1, r9
 8010604:	f7ef fe40 	bl	8000288 <__aeabi_dsub>
 8010608:	f805 6b01 	strb.w	r6, [r5], #1
 801060c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801060e:	429d      	cmp	r5, r3
 8010610:	4680      	mov	r8, r0
 8010612:	4689      	mov	r9, r1
 8010614:	f04f 0200 	mov.w	r2, #0
 8010618:	d124      	bne.n	8010664 <_dtoa_r+0x60c>
 801061a:	4b1b      	ldr	r3, [pc, #108]	; (8010688 <_dtoa_r+0x630>)
 801061c:	4650      	mov	r0, sl
 801061e:	4659      	mov	r1, fp
 8010620:	f7ef fe34 	bl	800028c <__adddf3>
 8010624:	4602      	mov	r2, r0
 8010626:	460b      	mov	r3, r1
 8010628:	4640      	mov	r0, r8
 801062a:	4649      	mov	r1, r9
 801062c:	f7f0 fa74 	bl	8000b18 <__aeabi_dcmpgt>
 8010630:	2800      	cmp	r0, #0
 8010632:	d173      	bne.n	801071c <_dtoa_r+0x6c4>
 8010634:	4652      	mov	r2, sl
 8010636:	465b      	mov	r3, fp
 8010638:	4913      	ldr	r1, [pc, #76]	; (8010688 <_dtoa_r+0x630>)
 801063a:	2000      	movs	r0, #0
 801063c:	f7ef fe24 	bl	8000288 <__aeabi_dsub>
 8010640:	4602      	mov	r2, r0
 8010642:	460b      	mov	r3, r1
 8010644:	4640      	mov	r0, r8
 8010646:	4649      	mov	r1, r9
 8010648:	f7f0 fa48 	bl	8000adc <__aeabi_dcmplt>
 801064c:	2800      	cmp	r0, #0
 801064e:	f43f af35 	beq.w	80104bc <_dtoa_r+0x464>
 8010652:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010654:	1e6b      	subs	r3, r5, #1
 8010656:	930f      	str	r3, [sp, #60]	; 0x3c
 8010658:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801065c:	2b30      	cmp	r3, #48	; 0x30
 801065e:	d0f8      	beq.n	8010652 <_dtoa_r+0x5fa>
 8010660:	9700      	str	r7, [sp, #0]
 8010662:	e049      	b.n	80106f8 <_dtoa_r+0x6a0>
 8010664:	4b05      	ldr	r3, [pc, #20]	; (801067c <_dtoa_r+0x624>)
 8010666:	f7ef ffc7 	bl	80005f8 <__aeabi_dmul>
 801066a:	4680      	mov	r8, r0
 801066c:	4689      	mov	r9, r1
 801066e:	e7bd      	b.n	80105ec <_dtoa_r+0x594>
 8010670:	08014fa8 	.word	0x08014fa8
 8010674:	08014f80 	.word	0x08014f80
 8010678:	3ff00000 	.word	0x3ff00000
 801067c:	40240000 	.word	0x40240000
 8010680:	401c0000 	.word	0x401c0000
 8010684:	40140000 	.word	0x40140000
 8010688:	3fe00000 	.word	0x3fe00000
 801068c:	9d01      	ldr	r5, [sp, #4]
 801068e:	4656      	mov	r6, sl
 8010690:	465f      	mov	r7, fp
 8010692:	4642      	mov	r2, r8
 8010694:	464b      	mov	r3, r9
 8010696:	4630      	mov	r0, r6
 8010698:	4639      	mov	r1, r7
 801069a:	f7f0 f8d7 	bl	800084c <__aeabi_ddiv>
 801069e:	f7f0 fa5b 	bl	8000b58 <__aeabi_d2iz>
 80106a2:	4682      	mov	sl, r0
 80106a4:	f7ef ff3e 	bl	8000524 <__aeabi_i2d>
 80106a8:	4642      	mov	r2, r8
 80106aa:	464b      	mov	r3, r9
 80106ac:	f7ef ffa4 	bl	80005f8 <__aeabi_dmul>
 80106b0:	4602      	mov	r2, r0
 80106b2:	460b      	mov	r3, r1
 80106b4:	4630      	mov	r0, r6
 80106b6:	4639      	mov	r1, r7
 80106b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80106bc:	f7ef fde4 	bl	8000288 <__aeabi_dsub>
 80106c0:	f805 6b01 	strb.w	r6, [r5], #1
 80106c4:	9e01      	ldr	r6, [sp, #4]
 80106c6:	9f03      	ldr	r7, [sp, #12]
 80106c8:	1bae      	subs	r6, r5, r6
 80106ca:	42b7      	cmp	r7, r6
 80106cc:	4602      	mov	r2, r0
 80106ce:	460b      	mov	r3, r1
 80106d0:	d135      	bne.n	801073e <_dtoa_r+0x6e6>
 80106d2:	f7ef fddb 	bl	800028c <__adddf3>
 80106d6:	4642      	mov	r2, r8
 80106d8:	464b      	mov	r3, r9
 80106da:	4606      	mov	r6, r0
 80106dc:	460f      	mov	r7, r1
 80106de:	f7f0 fa1b 	bl	8000b18 <__aeabi_dcmpgt>
 80106e2:	b9d0      	cbnz	r0, 801071a <_dtoa_r+0x6c2>
 80106e4:	4642      	mov	r2, r8
 80106e6:	464b      	mov	r3, r9
 80106e8:	4630      	mov	r0, r6
 80106ea:	4639      	mov	r1, r7
 80106ec:	f7f0 f9ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80106f0:	b110      	cbz	r0, 80106f8 <_dtoa_r+0x6a0>
 80106f2:	f01a 0f01 	tst.w	sl, #1
 80106f6:	d110      	bne.n	801071a <_dtoa_r+0x6c2>
 80106f8:	4620      	mov	r0, r4
 80106fa:	ee18 1a10 	vmov	r1, s16
 80106fe:	f000 fe67 	bl	80113d0 <_Bfree>
 8010702:	2300      	movs	r3, #0
 8010704:	9800      	ldr	r0, [sp, #0]
 8010706:	702b      	strb	r3, [r5, #0]
 8010708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801070a:	3001      	adds	r0, #1
 801070c:	6018      	str	r0, [r3, #0]
 801070e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010710:	2b00      	cmp	r3, #0
 8010712:	f43f acf1 	beq.w	80100f8 <_dtoa_r+0xa0>
 8010716:	601d      	str	r5, [r3, #0]
 8010718:	e4ee      	b.n	80100f8 <_dtoa_r+0xa0>
 801071a:	9f00      	ldr	r7, [sp, #0]
 801071c:	462b      	mov	r3, r5
 801071e:	461d      	mov	r5, r3
 8010720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010724:	2a39      	cmp	r2, #57	; 0x39
 8010726:	d106      	bne.n	8010736 <_dtoa_r+0x6de>
 8010728:	9a01      	ldr	r2, [sp, #4]
 801072a:	429a      	cmp	r2, r3
 801072c:	d1f7      	bne.n	801071e <_dtoa_r+0x6c6>
 801072e:	9901      	ldr	r1, [sp, #4]
 8010730:	2230      	movs	r2, #48	; 0x30
 8010732:	3701      	adds	r7, #1
 8010734:	700a      	strb	r2, [r1, #0]
 8010736:	781a      	ldrb	r2, [r3, #0]
 8010738:	3201      	adds	r2, #1
 801073a:	701a      	strb	r2, [r3, #0]
 801073c:	e790      	b.n	8010660 <_dtoa_r+0x608>
 801073e:	4ba6      	ldr	r3, [pc, #664]	; (80109d8 <_dtoa_r+0x980>)
 8010740:	2200      	movs	r2, #0
 8010742:	f7ef ff59 	bl	80005f8 <__aeabi_dmul>
 8010746:	2200      	movs	r2, #0
 8010748:	2300      	movs	r3, #0
 801074a:	4606      	mov	r6, r0
 801074c:	460f      	mov	r7, r1
 801074e:	f7f0 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8010752:	2800      	cmp	r0, #0
 8010754:	d09d      	beq.n	8010692 <_dtoa_r+0x63a>
 8010756:	e7cf      	b.n	80106f8 <_dtoa_r+0x6a0>
 8010758:	9a08      	ldr	r2, [sp, #32]
 801075a:	2a00      	cmp	r2, #0
 801075c:	f000 80d7 	beq.w	801090e <_dtoa_r+0x8b6>
 8010760:	9a06      	ldr	r2, [sp, #24]
 8010762:	2a01      	cmp	r2, #1
 8010764:	f300 80ba 	bgt.w	80108dc <_dtoa_r+0x884>
 8010768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801076a:	2a00      	cmp	r2, #0
 801076c:	f000 80b2 	beq.w	80108d4 <_dtoa_r+0x87c>
 8010770:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010774:	9e07      	ldr	r6, [sp, #28]
 8010776:	9d04      	ldr	r5, [sp, #16]
 8010778:	9a04      	ldr	r2, [sp, #16]
 801077a:	441a      	add	r2, r3
 801077c:	9204      	str	r2, [sp, #16]
 801077e:	9a05      	ldr	r2, [sp, #20]
 8010780:	2101      	movs	r1, #1
 8010782:	441a      	add	r2, r3
 8010784:	4620      	mov	r0, r4
 8010786:	9205      	str	r2, [sp, #20]
 8010788:	f000 ff24 	bl	80115d4 <__i2b>
 801078c:	4607      	mov	r7, r0
 801078e:	2d00      	cmp	r5, #0
 8010790:	dd0c      	ble.n	80107ac <_dtoa_r+0x754>
 8010792:	9b05      	ldr	r3, [sp, #20]
 8010794:	2b00      	cmp	r3, #0
 8010796:	dd09      	ble.n	80107ac <_dtoa_r+0x754>
 8010798:	42ab      	cmp	r3, r5
 801079a:	9a04      	ldr	r2, [sp, #16]
 801079c:	bfa8      	it	ge
 801079e:	462b      	movge	r3, r5
 80107a0:	1ad2      	subs	r2, r2, r3
 80107a2:	9204      	str	r2, [sp, #16]
 80107a4:	9a05      	ldr	r2, [sp, #20]
 80107a6:	1aed      	subs	r5, r5, r3
 80107a8:	1ad3      	subs	r3, r2, r3
 80107aa:	9305      	str	r3, [sp, #20]
 80107ac:	9b07      	ldr	r3, [sp, #28]
 80107ae:	b31b      	cbz	r3, 80107f8 <_dtoa_r+0x7a0>
 80107b0:	9b08      	ldr	r3, [sp, #32]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f000 80af 	beq.w	8010916 <_dtoa_r+0x8be>
 80107b8:	2e00      	cmp	r6, #0
 80107ba:	dd13      	ble.n	80107e4 <_dtoa_r+0x78c>
 80107bc:	4639      	mov	r1, r7
 80107be:	4632      	mov	r2, r6
 80107c0:	4620      	mov	r0, r4
 80107c2:	f000 ffc7 	bl	8011754 <__pow5mult>
 80107c6:	ee18 2a10 	vmov	r2, s16
 80107ca:	4601      	mov	r1, r0
 80107cc:	4607      	mov	r7, r0
 80107ce:	4620      	mov	r0, r4
 80107d0:	f000 ff16 	bl	8011600 <__multiply>
 80107d4:	ee18 1a10 	vmov	r1, s16
 80107d8:	4680      	mov	r8, r0
 80107da:	4620      	mov	r0, r4
 80107dc:	f000 fdf8 	bl	80113d0 <_Bfree>
 80107e0:	ee08 8a10 	vmov	s16, r8
 80107e4:	9b07      	ldr	r3, [sp, #28]
 80107e6:	1b9a      	subs	r2, r3, r6
 80107e8:	d006      	beq.n	80107f8 <_dtoa_r+0x7a0>
 80107ea:	ee18 1a10 	vmov	r1, s16
 80107ee:	4620      	mov	r0, r4
 80107f0:	f000 ffb0 	bl	8011754 <__pow5mult>
 80107f4:	ee08 0a10 	vmov	s16, r0
 80107f8:	2101      	movs	r1, #1
 80107fa:	4620      	mov	r0, r4
 80107fc:	f000 feea 	bl	80115d4 <__i2b>
 8010800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010802:	2b00      	cmp	r3, #0
 8010804:	4606      	mov	r6, r0
 8010806:	f340 8088 	ble.w	801091a <_dtoa_r+0x8c2>
 801080a:	461a      	mov	r2, r3
 801080c:	4601      	mov	r1, r0
 801080e:	4620      	mov	r0, r4
 8010810:	f000 ffa0 	bl	8011754 <__pow5mult>
 8010814:	9b06      	ldr	r3, [sp, #24]
 8010816:	2b01      	cmp	r3, #1
 8010818:	4606      	mov	r6, r0
 801081a:	f340 8081 	ble.w	8010920 <_dtoa_r+0x8c8>
 801081e:	f04f 0800 	mov.w	r8, #0
 8010822:	6933      	ldr	r3, [r6, #16]
 8010824:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010828:	6918      	ldr	r0, [r3, #16]
 801082a:	f000 fe83 	bl	8011534 <__hi0bits>
 801082e:	f1c0 0020 	rsb	r0, r0, #32
 8010832:	9b05      	ldr	r3, [sp, #20]
 8010834:	4418      	add	r0, r3
 8010836:	f010 001f 	ands.w	r0, r0, #31
 801083a:	f000 8092 	beq.w	8010962 <_dtoa_r+0x90a>
 801083e:	f1c0 0320 	rsb	r3, r0, #32
 8010842:	2b04      	cmp	r3, #4
 8010844:	f340 808a 	ble.w	801095c <_dtoa_r+0x904>
 8010848:	f1c0 001c 	rsb	r0, r0, #28
 801084c:	9b04      	ldr	r3, [sp, #16]
 801084e:	4403      	add	r3, r0
 8010850:	9304      	str	r3, [sp, #16]
 8010852:	9b05      	ldr	r3, [sp, #20]
 8010854:	4403      	add	r3, r0
 8010856:	4405      	add	r5, r0
 8010858:	9305      	str	r3, [sp, #20]
 801085a:	9b04      	ldr	r3, [sp, #16]
 801085c:	2b00      	cmp	r3, #0
 801085e:	dd07      	ble.n	8010870 <_dtoa_r+0x818>
 8010860:	ee18 1a10 	vmov	r1, s16
 8010864:	461a      	mov	r2, r3
 8010866:	4620      	mov	r0, r4
 8010868:	f000 ffce 	bl	8011808 <__lshift>
 801086c:	ee08 0a10 	vmov	s16, r0
 8010870:	9b05      	ldr	r3, [sp, #20]
 8010872:	2b00      	cmp	r3, #0
 8010874:	dd05      	ble.n	8010882 <_dtoa_r+0x82a>
 8010876:	4631      	mov	r1, r6
 8010878:	461a      	mov	r2, r3
 801087a:	4620      	mov	r0, r4
 801087c:	f000 ffc4 	bl	8011808 <__lshift>
 8010880:	4606      	mov	r6, r0
 8010882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010884:	2b00      	cmp	r3, #0
 8010886:	d06e      	beq.n	8010966 <_dtoa_r+0x90e>
 8010888:	ee18 0a10 	vmov	r0, s16
 801088c:	4631      	mov	r1, r6
 801088e:	f001 f82b 	bl	80118e8 <__mcmp>
 8010892:	2800      	cmp	r0, #0
 8010894:	da67      	bge.n	8010966 <_dtoa_r+0x90e>
 8010896:	9b00      	ldr	r3, [sp, #0]
 8010898:	3b01      	subs	r3, #1
 801089a:	ee18 1a10 	vmov	r1, s16
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	220a      	movs	r2, #10
 80108a2:	2300      	movs	r3, #0
 80108a4:	4620      	mov	r0, r4
 80108a6:	f000 fdb5 	bl	8011414 <__multadd>
 80108aa:	9b08      	ldr	r3, [sp, #32]
 80108ac:	ee08 0a10 	vmov	s16, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 81b1 	beq.w	8010c18 <_dtoa_r+0xbc0>
 80108b6:	2300      	movs	r3, #0
 80108b8:	4639      	mov	r1, r7
 80108ba:	220a      	movs	r2, #10
 80108bc:	4620      	mov	r0, r4
 80108be:	f000 fda9 	bl	8011414 <__multadd>
 80108c2:	9b02      	ldr	r3, [sp, #8]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	4607      	mov	r7, r0
 80108c8:	f300 808e 	bgt.w	80109e8 <_dtoa_r+0x990>
 80108cc:	9b06      	ldr	r3, [sp, #24]
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	dc51      	bgt.n	8010976 <_dtoa_r+0x91e>
 80108d2:	e089      	b.n	80109e8 <_dtoa_r+0x990>
 80108d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80108d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80108da:	e74b      	b.n	8010774 <_dtoa_r+0x71c>
 80108dc:	9b03      	ldr	r3, [sp, #12]
 80108de:	1e5e      	subs	r6, r3, #1
 80108e0:	9b07      	ldr	r3, [sp, #28]
 80108e2:	42b3      	cmp	r3, r6
 80108e4:	bfbf      	itttt	lt
 80108e6:	9b07      	ldrlt	r3, [sp, #28]
 80108e8:	9607      	strlt	r6, [sp, #28]
 80108ea:	1af2      	sublt	r2, r6, r3
 80108ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80108ee:	bfb6      	itet	lt
 80108f0:	189b      	addlt	r3, r3, r2
 80108f2:	1b9e      	subge	r6, r3, r6
 80108f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80108f6:	9b03      	ldr	r3, [sp, #12]
 80108f8:	bfb8      	it	lt
 80108fa:	2600      	movlt	r6, #0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	bfb7      	itett	lt
 8010900:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010904:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010908:	1a9d      	sublt	r5, r3, r2
 801090a:	2300      	movlt	r3, #0
 801090c:	e734      	b.n	8010778 <_dtoa_r+0x720>
 801090e:	9e07      	ldr	r6, [sp, #28]
 8010910:	9d04      	ldr	r5, [sp, #16]
 8010912:	9f08      	ldr	r7, [sp, #32]
 8010914:	e73b      	b.n	801078e <_dtoa_r+0x736>
 8010916:	9a07      	ldr	r2, [sp, #28]
 8010918:	e767      	b.n	80107ea <_dtoa_r+0x792>
 801091a:	9b06      	ldr	r3, [sp, #24]
 801091c:	2b01      	cmp	r3, #1
 801091e:	dc18      	bgt.n	8010952 <_dtoa_r+0x8fa>
 8010920:	f1ba 0f00 	cmp.w	sl, #0
 8010924:	d115      	bne.n	8010952 <_dtoa_r+0x8fa>
 8010926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801092a:	b993      	cbnz	r3, 8010952 <_dtoa_r+0x8fa>
 801092c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010930:	0d1b      	lsrs	r3, r3, #20
 8010932:	051b      	lsls	r3, r3, #20
 8010934:	b183      	cbz	r3, 8010958 <_dtoa_r+0x900>
 8010936:	9b04      	ldr	r3, [sp, #16]
 8010938:	3301      	adds	r3, #1
 801093a:	9304      	str	r3, [sp, #16]
 801093c:	9b05      	ldr	r3, [sp, #20]
 801093e:	3301      	adds	r3, #1
 8010940:	9305      	str	r3, [sp, #20]
 8010942:	f04f 0801 	mov.w	r8, #1
 8010946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010948:	2b00      	cmp	r3, #0
 801094a:	f47f af6a 	bne.w	8010822 <_dtoa_r+0x7ca>
 801094e:	2001      	movs	r0, #1
 8010950:	e76f      	b.n	8010832 <_dtoa_r+0x7da>
 8010952:	f04f 0800 	mov.w	r8, #0
 8010956:	e7f6      	b.n	8010946 <_dtoa_r+0x8ee>
 8010958:	4698      	mov	r8, r3
 801095a:	e7f4      	b.n	8010946 <_dtoa_r+0x8ee>
 801095c:	f43f af7d 	beq.w	801085a <_dtoa_r+0x802>
 8010960:	4618      	mov	r0, r3
 8010962:	301c      	adds	r0, #28
 8010964:	e772      	b.n	801084c <_dtoa_r+0x7f4>
 8010966:	9b03      	ldr	r3, [sp, #12]
 8010968:	2b00      	cmp	r3, #0
 801096a:	dc37      	bgt.n	80109dc <_dtoa_r+0x984>
 801096c:	9b06      	ldr	r3, [sp, #24]
 801096e:	2b02      	cmp	r3, #2
 8010970:	dd34      	ble.n	80109dc <_dtoa_r+0x984>
 8010972:	9b03      	ldr	r3, [sp, #12]
 8010974:	9302      	str	r3, [sp, #8]
 8010976:	9b02      	ldr	r3, [sp, #8]
 8010978:	b96b      	cbnz	r3, 8010996 <_dtoa_r+0x93e>
 801097a:	4631      	mov	r1, r6
 801097c:	2205      	movs	r2, #5
 801097e:	4620      	mov	r0, r4
 8010980:	f000 fd48 	bl	8011414 <__multadd>
 8010984:	4601      	mov	r1, r0
 8010986:	4606      	mov	r6, r0
 8010988:	ee18 0a10 	vmov	r0, s16
 801098c:	f000 ffac 	bl	80118e8 <__mcmp>
 8010990:	2800      	cmp	r0, #0
 8010992:	f73f adbb 	bgt.w	801050c <_dtoa_r+0x4b4>
 8010996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010998:	9d01      	ldr	r5, [sp, #4]
 801099a:	43db      	mvns	r3, r3
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	f04f 0800 	mov.w	r8, #0
 80109a2:	4631      	mov	r1, r6
 80109a4:	4620      	mov	r0, r4
 80109a6:	f000 fd13 	bl	80113d0 <_Bfree>
 80109aa:	2f00      	cmp	r7, #0
 80109ac:	f43f aea4 	beq.w	80106f8 <_dtoa_r+0x6a0>
 80109b0:	f1b8 0f00 	cmp.w	r8, #0
 80109b4:	d005      	beq.n	80109c2 <_dtoa_r+0x96a>
 80109b6:	45b8      	cmp	r8, r7
 80109b8:	d003      	beq.n	80109c2 <_dtoa_r+0x96a>
 80109ba:	4641      	mov	r1, r8
 80109bc:	4620      	mov	r0, r4
 80109be:	f000 fd07 	bl	80113d0 <_Bfree>
 80109c2:	4639      	mov	r1, r7
 80109c4:	4620      	mov	r0, r4
 80109c6:	f000 fd03 	bl	80113d0 <_Bfree>
 80109ca:	e695      	b.n	80106f8 <_dtoa_r+0x6a0>
 80109cc:	2600      	movs	r6, #0
 80109ce:	4637      	mov	r7, r6
 80109d0:	e7e1      	b.n	8010996 <_dtoa_r+0x93e>
 80109d2:	9700      	str	r7, [sp, #0]
 80109d4:	4637      	mov	r7, r6
 80109d6:	e599      	b.n	801050c <_dtoa_r+0x4b4>
 80109d8:	40240000 	.word	0x40240000
 80109dc:	9b08      	ldr	r3, [sp, #32]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	f000 80ca 	beq.w	8010b78 <_dtoa_r+0xb20>
 80109e4:	9b03      	ldr	r3, [sp, #12]
 80109e6:	9302      	str	r3, [sp, #8]
 80109e8:	2d00      	cmp	r5, #0
 80109ea:	dd05      	ble.n	80109f8 <_dtoa_r+0x9a0>
 80109ec:	4639      	mov	r1, r7
 80109ee:	462a      	mov	r2, r5
 80109f0:	4620      	mov	r0, r4
 80109f2:	f000 ff09 	bl	8011808 <__lshift>
 80109f6:	4607      	mov	r7, r0
 80109f8:	f1b8 0f00 	cmp.w	r8, #0
 80109fc:	d05b      	beq.n	8010ab6 <_dtoa_r+0xa5e>
 80109fe:	6879      	ldr	r1, [r7, #4]
 8010a00:	4620      	mov	r0, r4
 8010a02:	f000 fca5 	bl	8011350 <_Balloc>
 8010a06:	4605      	mov	r5, r0
 8010a08:	b928      	cbnz	r0, 8010a16 <_dtoa_r+0x9be>
 8010a0a:	4b87      	ldr	r3, [pc, #540]	; (8010c28 <_dtoa_r+0xbd0>)
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010a12:	f7ff bb3b 	b.w	801008c <_dtoa_r+0x34>
 8010a16:	693a      	ldr	r2, [r7, #16]
 8010a18:	3202      	adds	r2, #2
 8010a1a:	0092      	lsls	r2, r2, #2
 8010a1c:	f107 010c 	add.w	r1, r7, #12
 8010a20:	300c      	adds	r0, #12
 8010a22:	f7fd ff4b 	bl	800e8bc <memcpy>
 8010a26:	2201      	movs	r2, #1
 8010a28:	4629      	mov	r1, r5
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	f000 feec 	bl	8011808 <__lshift>
 8010a30:	9b01      	ldr	r3, [sp, #4]
 8010a32:	f103 0901 	add.w	r9, r3, #1
 8010a36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	9305      	str	r3, [sp, #20]
 8010a3e:	f00a 0301 	and.w	r3, sl, #1
 8010a42:	46b8      	mov	r8, r7
 8010a44:	9304      	str	r3, [sp, #16]
 8010a46:	4607      	mov	r7, r0
 8010a48:	4631      	mov	r1, r6
 8010a4a:	ee18 0a10 	vmov	r0, s16
 8010a4e:	f7ff fa75 	bl	800ff3c <quorem>
 8010a52:	4641      	mov	r1, r8
 8010a54:	9002      	str	r0, [sp, #8]
 8010a56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010a5a:	ee18 0a10 	vmov	r0, s16
 8010a5e:	f000 ff43 	bl	80118e8 <__mcmp>
 8010a62:	463a      	mov	r2, r7
 8010a64:	9003      	str	r0, [sp, #12]
 8010a66:	4631      	mov	r1, r6
 8010a68:	4620      	mov	r0, r4
 8010a6a:	f000 ff59 	bl	8011920 <__mdiff>
 8010a6e:	68c2      	ldr	r2, [r0, #12]
 8010a70:	f109 3bff 	add.w	fp, r9, #4294967295
 8010a74:	4605      	mov	r5, r0
 8010a76:	bb02      	cbnz	r2, 8010aba <_dtoa_r+0xa62>
 8010a78:	4601      	mov	r1, r0
 8010a7a:	ee18 0a10 	vmov	r0, s16
 8010a7e:	f000 ff33 	bl	80118e8 <__mcmp>
 8010a82:	4602      	mov	r2, r0
 8010a84:	4629      	mov	r1, r5
 8010a86:	4620      	mov	r0, r4
 8010a88:	9207      	str	r2, [sp, #28]
 8010a8a:	f000 fca1 	bl	80113d0 <_Bfree>
 8010a8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010a92:	ea43 0102 	orr.w	r1, r3, r2
 8010a96:	9b04      	ldr	r3, [sp, #16]
 8010a98:	430b      	orrs	r3, r1
 8010a9a:	464d      	mov	r5, r9
 8010a9c:	d10f      	bne.n	8010abe <_dtoa_r+0xa66>
 8010a9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010aa2:	d02a      	beq.n	8010afa <_dtoa_r+0xaa2>
 8010aa4:	9b03      	ldr	r3, [sp, #12]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	dd02      	ble.n	8010ab0 <_dtoa_r+0xa58>
 8010aaa:	9b02      	ldr	r3, [sp, #8]
 8010aac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010ab0:	f88b a000 	strb.w	sl, [fp]
 8010ab4:	e775      	b.n	80109a2 <_dtoa_r+0x94a>
 8010ab6:	4638      	mov	r0, r7
 8010ab8:	e7ba      	b.n	8010a30 <_dtoa_r+0x9d8>
 8010aba:	2201      	movs	r2, #1
 8010abc:	e7e2      	b.n	8010a84 <_dtoa_r+0xa2c>
 8010abe:	9b03      	ldr	r3, [sp, #12]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	db04      	blt.n	8010ace <_dtoa_r+0xa76>
 8010ac4:	9906      	ldr	r1, [sp, #24]
 8010ac6:	430b      	orrs	r3, r1
 8010ac8:	9904      	ldr	r1, [sp, #16]
 8010aca:	430b      	orrs	r3, r1
 8010acc:	d122      	bne.n	8010b14 <_dtoa_r+0xabc>
 8010ace:	2a00      	cmp	r2, #0
 8010ad0:	ddee      	ble.n	8010ab0 <_dtoa_r+0xa58>
 8010ad2:	ee18 1a10 	vmov	r1, s16
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f000 fe95 	bl	8011808 <__lshift>
 8010ade:	4631      	mov	r1, r6
 8010ae0:	ee08 0a10 	vmov	s16, r0
 8010ae4:	f000 ff00 	bl	80118e8 <__mcmp>
 8010ae8:	2800      	cmp	r0, #0
 8010aea:	dc03      	bgt.n	8010af4 <_dtoa_r+0xa9c>
 8010aec:	d1e0      	bne.n	8010ab0 <_dtoa_r+0xa58>
 8010aee:	f01a 0f01 	tst.w	sl, #1
 8010af2:	d0dd      	beq.n	8010ab0 <_dtoa_r+0xa58>
 8010af4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010af8:	d1d7      	bne.n	8010aaa <_dtoa_r+0xa52>
 8010afa:	2339      	movs	r3, #57	; 0x39
 8010afc:	f88b 3000 	strb.w	r3, [fp]
 8010b00:	462b      	mov	r3, r5
 8010b02:	461d      	mov	r5, r3
 8010b04:	3b01      	subs	r3, #1
 8010b06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010b0a:	2a39      	cmp	r2, #57	; 0x39
 8010b0c:	d071      	beq.n	8010bf2 <_dtoa_r+0xb9a>
 8010b0e:	3201      	adds	r2, #1
 8010b10:	701a      	strb	r2, [r3, #0]
 8010b12:	e746      	b.n	80109a2 <_dtoa_r+0x94a>
 8010b14:	2a00      	cmp	r2, #0
 8010b16:	dd07      	ble.n	8010b28 <_dtoa_r+0xad0>
 8010b18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010b1c:	d0ed      	beq.n	8010afa <_dtoa_r+0xaa2>
 8010b1e:	f10a 0301 	add.w	r3, sl, #1
 8010b22:	f88b 3000 	strb.w	r3, [fp]
 8010b26:	e73c      	b.n	80109a2 <_dtoa_r+0x94a>
 8010b28:	9b05      	ldr	r3, [sp, #20]
 8010b2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010b2e:	4599      	cmp	r9, r3
 8010b30:	d047      	beq.n	8010bc2 <_dtoa_r+0xb6a>
 8010b32:	ee18 1a10 	vmov	r1, s16
 8010b36:	2300      	movs	r3, #0
 8010b38:	220a      	movs	r2, #10
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f000 fc6a 	bl	8011414 <__multadd>
 8010b40:	45b8      	cmp	r8, r7
 8010b42:	ee08 0a10 	vmov	s16, r0
 8010b46:	f04f 0300 	mov.w	r3, #0
 8010b4a:	f04f 020a 	mov.w	r2, #10
 8010b4e:	4641      	mov	r1, r8
 8010b50:	4620      	mov	r0, r4
 8010b52:	d106      	bne.n	8010b62 <_dtoa_r+0xb0a>
 8010b54:	f000 fc5e 	bl	8011414 <__multadd>
 8010b58:	4680      	mov	r8, r0
 8010b5a:	4607      	mov	r7, r0
 8010b5c:	f109 0901 	add.w	r9, r9, #1
 8010b60:	e772      	b.n	8010a48 <_dtoa_r+0x9f0>
 8010b62:	f000 fc57 	bl	8011414 <__multadd>
 8010b66:	4639      	mov	r1, r7
 8010b68:	4680      	mov	r8, r0
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	220a      	movs	r2, #10
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f000 fc50 	bl	8011414 <__multadd>
 8010b74:	4607      	mov	r7, r0
 8010b76:	e7f1      	b.n	8010b5c <_dtoa_r+0xb04>
 8010b78:	9b03      	ldr	r3, [sp, #12]
 8010b7a:	9302      	str	r3, [sp, #8]
 8010b7c:	9d01      	ldr	r5, [sp, #4]
 8010b7e:	ee18 0a10 	vmov	r0, s16
 8010b82:	4631      	mov	r1, r6
 8010b84:	f7ff f9da 	bl	800ff3c <quorem>
 8010b88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010b8c:	9b01      	ldr	r3, [sp, #4]
 8010b8e:	f805 ab01 	strb.w	sl, [r5], #1
 8010b92:	1aea      	subs	r2, r5, r3
 8010b94:	9b02      	ldr	r3, [sp, #8]
 8010b96:	4293      	cmp	r3, r2
 8010b98:	dd09      	ble.n	8010bae <_dtoa_r+0xb56>
 8010b9a:	ee18 1a10 	vmov	r1, s16
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	220a      	movs	r2, #10
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f000 fc36 	bl	8011414 <__multadd>
 8010ba8:	ee08 0a10 	vmov	s16, r0
 8010bac:	e7e7      	b.n	8010b7e <_dtoa_r+0xb26>
 8010bae:	9b02      	ldr	r3, [sp, #8]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	bfc8      	it	gt
 8010bb4:	461d      	movgt	r5, r3
 8010bb6:	9b01      	ldr	r3, [sp, #4]
 8010bb8:	bfd8      	it	le
 8010bba:	2501      	movle	r5, #1
 8010bbc:	441d      	add	r5, r3
 8010bbe:	f04f 0800 	mov.w	r8, #0
 8010bc2:	ee18 1a10 	vmov	r1, s16
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f000 fe1d 	bl	8011808 <__lshift>
 8010bce:	4631      	mov	r1, r6
 8010bd0:	ee08 0a10 	vmov	s16, r0
 8010bd4:	f000 fe88 	bl	80118e8 <__mcmp>
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	dc91      	bgt.n	8010b00 <_dtoa_r+0xaa8>
 8010bdc:	d102      	bne.n	8010be4 <_dtoa_r+0xb8c>
 8010bde:	f01a 0f01 	tst.w	sl, #1
 8010be2:	d18d      	bne.n	8010b00 <_dtoa_r+0xaa8>
 8010be4:	462b      	mov	r3, r5
 8010be6:	461d      	mov	r5, r3
 8010be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bec:	2a30      	cmp	r2, #48	; 0x30
 8010bee:	d0fa      	beq.n	8010be6 <_dtoa_r+0xb8e>
 8010bf0:	e6d7      	b.n	80109a2 <_dtoa_r+0x94a>
 8010bf2:	9a01      	ldr	r2, [sp, #4]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d184      	bne.n	8010b02 <_dtoa_r+0xaaa>
 8010bf8:	9b00      	ldr	r3, [sp, #0]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	9300      	str	r3, [sp, #0]
 8010bfe:	2331      	movs	r3, #49	; 0x31
 8010c00:	7013      	strb	r3, [r2, #0]
 8010c02:	e6ce      	b.n	80109a2 <_dtoa_r+0x94a>
 8010c04:	4b09      	ldr	r3, [pc, #36]	; (8010c2c <_dtoa_r+0xbd4>)
 8010c06:	f7ff ba95 	b.w	8010134 <_dtoa_r+0xdc>
 8010c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	f47f aa6e 	bne.w	80100ee <_dtoa_r+0x96>
 8010c12:	4b07      	ldr	r3, [pc, #28]	; (8010c30 <_dtoa_r+0xbd8>)
 8010c14:	f7ff ba8e 	b.w	8010134 <_dtoa_r+0xdc>
 8010c18:	9b02      	ldr	r3, [sp, #8]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	dcae      	bgt.n	8010b7c <_dtoa_r+0xb24>
 8010c1e:	9b06      	ldr	r3, [sp, #24]
 8010c20:	2b02      	cmp	r3, #2
 8010c22:	f73f aea8 	bgt.w	8010976 <_dtoa_r+0x91e>
 8010c26:	e7a9      	b.n	8010b7c <_dtoa_r+0xb24>
 8010c28:	08014e97 	.word	0x08014e97
 8010c2c:	0801316e 	.word	0x0801316e
 8010c30:	08014e18 	.word	0x08014e18

08010c34 <rshift>:
 8010c34:	6903      	ldr	r3, [r0, #16]
 8010c36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010c3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010c42:	f100 0414 	add.w	r4, r0, #20
 8010c46:	dd45      	ble.n	8010cd4 <rshift+0xa0>
 8010c48:	f011 011f 	ands.w	r1, r1, #31
 8010c4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010c50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010c54:	d10c      	bne.n	8010c70 <rshift+0x3c>
 8010c56:	f100 0710 	add.w	r7, r0, #16
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	42b1      	cmp	r1, r6
 8010c5e:	d334      	bcc.n	8010cca <rshift+0x96>
 8010c60:	1a9b      	subs	r3, r3, r2
 8010c62:	009b      	lsls	r3, r3, #2
 8010c64:	1eea      	subs	r2, r5, #3
 8010c66:	4296      	cmp	r6, r2
 8010c68:	bf38      	it	cc
 8010c6a:	2300      	movcc	r3, #0
 8010c6c:	4423      	add	r3, r4
 8010c6e:	e015      	b.n	8010c9c <rshift+0x68>
 8010c70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010c74:	f1c1 0820 	rsb	r8, r1, #32
 8010c78:	40cf      	lsrs	r7, r1
 8010c7a:	f105 0e04 	add.w	lr, r5, #4
 8010c7e:	46a1      	mov	r9, r4
 8010c80:	4576      	cmp	r6, lr
 8010c82:	46f4      	mov	ip, lr
 8010c84:	d815      	bhi.n	8010cb2 <rshift+0x7e>
 8010c86:	1a9a      	subs	r2, r3, r2
 8010c88:	0092      	lsls	r2, r2, #2
 8010c8a:	3a04      	subs	r2, #4
 8010c8c:	3501      	adds	r5, #1
 8010c8e:	42ae      	cmp	r6, r5
 8010c90:	bf38      	it	cc
 8010c92:	2200      	movcc	r2, #0
 8010c94:	18a3      	adds	r3, r4, r2
 8010c96:	50a7      	str	r7, [r4, r2]
 8010c98:	b107      	cbz	r7, 8010c9c <rshift+0x68>
 8010c9a:	3304      	adds	r3, #4
 8010c9c:	1b1a      	subs	r2, r3, r4
 8010c9e:	42a3      	cmp	r3, r4
 8010ca0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010ca4:	bf08      	it	eq
 8010ca6:	2300      	moveq	r3, #0
 8010ca8:	6102      	str	r2, [r0, #16]
 8010caa:	bf08      	it	eq
 8010cac:	6143      	streq	r3, [r0, #20]
 8010cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cb2:	f8dc c000 	ldr.w	ip, [ip]
 8010cb6:	fa0c fc08 	lsl.w	ip, ip, r8
 8010cba:	ea4c 0707 	orr.w	r7, ip, r7
 8010cbe:	f849 7b04 	str.w	r7, [r9], #4
 8010cc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010cc6:	40cf      	lsrs	r7, r1
 8010cc8:	e7da      	b.n	8010c80 <rshift+0x4c>
 8010cca:	f851 cb04 	ldr.w	ip, [r1], #4
 8010cce:	f847 cf04 	str.w	ip, [r7, #4]!
 8010cd2:	e7c3      	b.n	8010c5c <rshift+0x28>
 8010cd4:	4623      	mov	r3, r4
 8010cd6:	e7e1      	b.n	8010c9c <rshift+0x68>

08010cd8 <__hexdig_fun>:
 8010cd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010cdc:	2b09      	cmp	r3, #9
 8010cde:	d802      	bhi.n	8010ce6 <__hexdig_fun+0xe>
 8010ce0:	3820      	subs	r0, #32
 8010ce2:	b2c0      	uxtb	r0, r0
 8010ce4:	4770      	bx	lr
 8010ce6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010cea:	2b05      	cmp	r3, #5
 8010cec:	d801      	bhi.n	8010cf2 <__hexdig_fun+0x1a>
 8010cee:	3847      	subs	r0, #71	; 0x47
 8010cf0:	e7f7      	b.n	8010ce2 <__hexdig_fun+0xa>
 8010cf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010cf6:	2b05      	cmp	r3, #5
 8010cf8:	d801      	bhi.n	8010cfe <__hexdig_fun+0x26>
 8010cfa:	3827      	subs	r0, #39	; 0x27
 8010cfc:	e7f1      	b.n	8010ce2 <__hexdig_fun+0xa>
 8010cfe:	2000      	movs	r0, #0
 8010d00:	4770      	bx	lr
	...

08010d04 <__gethex>:
 8010d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d08:	ed2d 8b02 	vpush	{d8}
 8010d0c:	b089      	sub	sp, #36	; 0x24
 8010d0e:	ee08 0a10 	vmov	s16, r0
 8010d12:	9304      	str	r3, [sp, #16]
 8010d14:	4bb4      	ldr	r3, [pc, #720]	; (8010fe8 <__gethex+0x2e4>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	9301      	str	r3, [sp, #4]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	468b      	mov	fp, r1
 8010d1e:	4690      	mov	r8, r2
 8010d20:	f7ef fa56 	bl	80001d0 <strlen>
 8010d24:	9b01      	ldr	r3, [sp, #4]
 8010d26:	f8db 2000 	ldr.w	r2, [fp]
 8010d2a:	4403      	add	r3, r0
 8010d2c:	4682      	mov	sl, r0
 8010d2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010d32:	9305      	str	r3, [sp, #20]
 8010d34:	1c93      	adds	r3, r2, #2
 8010d36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010d3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010d3e:	32fe      	adds	r2, #254	; 0xfe
 8010d40:	18d1      	adds	r1, r2, r3
 8010d42:	461f      	mov	r7, r3
 8010d44:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d48:	9100      	str	r1, [sp, #0]
 8010d4a:	2830      	cmp	r0, #48	; 0x30
 8010d4c:	d0f8      	beq.n	8010d40 <__gethex+0x3c>
 8010d4e:	f7ff ffc3 	bl	8010cd8 <__hexdig_fun>
 8010d52:	4604      	mov	r4, r0
 8010d54:	2800      	cmp	r0, #0
 8010d56:	d13a      	bne.n	8010dce <__gethex+0xca>
 8010d58:	9901      	ldr	r1, [sp, #4]
 8010d5a:	4652      	mov	r2, sl
 8010d5c:	4638      	mov	r0, r7
 8010d5e:	f001 fa29 	bl	80121b4 <strncmp>
 8010d62:	4605      	mov	r5, r0
 8010d64:	2800      	cmp	r0, #0
 8010d66:	d168      	bne.n	8010e3a <__gethex+0x136>
 8010d68:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010d6c:	eb07 060a 	add.w	r6, r7, sl
 8010d70:	f7ff ffb2 	bl	8010cd8 <__hexdig_fun>
 8010d74:	2800      	cmp	r0, #0
 8010d76:	d062      	beq.n	8010e3e <__gethex+0x13a>
 8010d78:	4633      	mov	r3, r6
 8010d7a:	7818      	ldrb	r0, [r3, #0]
 8010d7c:	2830      	cmp	r0, #48	; 0x30
 8010d7e:	461f      	mov	r7, r3
 8010d80:	f103 0301 	add.w	r3, r3, #1
 8010d84:	d0f9      	beq.n	8010d7a <__gethex+0x76>
 8010d86:	f7ff ffa7 	bl	8010cd8 <__hexdig_fun>
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	fab0 f480 	clz	r4, r0
 8010d90:	0964      	lsrs	r4, r4, #5
 8010d92:	4635      	mov	r5, r6
 8010d94:	9300      	str	r3, [sp, #0]
 8010d96:	463a      	mov	r2, r7
 8010d98:	4616      	mov	r6, r2
 8010d9a:	3201      	adds	r2, #1
 8010d9c:	7830      	ldrb	r0, [r6, #0]
 8010d9e:	f7ff ff9b 	bl	8010cd8 <__hexdig_fun>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	d1f8      	bne.n	8010d98 <__gethex+0x94>
 8010da6:	9901      	ldr	r1, [sp, #4]
 8010da8:	4652      	mov	r2, sl
 8010daa:	4630      	mov	r0, r6
 8010dac:	f001 fa02 	bl	80121b4 <strncmp>
 8010db0:	b980      	cbnz	r0, 8010dd4 <__gethex+0xd0>
 8010db2:	b94d      	cbnz	r5, 8010dc8 <__gethex+0xc4>
 8010db4:	eb06 050a 	add.w	r5, r6, sl
 8010db8:	462a      	mov	r2, r5
 8010dba:	4616      	mov	r6, r2
 8010dbc:	3201      	adds	r2, #1
 8010dbe:	7830      	ldrb	r0, [r6, #0]
 8010dc0:	f7ff ff8a 	bl	8010cd8 <__hexdig_fun>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d1f8      	bne.n	8010dba <__gethex+0xb6>
 8010dc8:	1bad      	subs	r5, r5, r6
 8010dca:	00ad      	lsls	r5, r5, #2
 8010dcc:	e004      	b.n	8010dd8 <__gethex+0xd4>
 8010dce:	2400      	movs	r4, #0
 8010dd0:	4625      	mov	r5, r4
 8010dd2:	e7e0      	b.n	8010d96 <__gethex+0x92>
 8010dd4:	2d00      	cmp	r5, #0
 8010dd6:	d1f7      	bne.n	8010dc8 <__gethex+0xc4>
 8010dd8:	7833      	ldrb	r3, [r6, #0]
 8010dda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010dde:	2b50      	cmp	r3, #80	; 0x50
 8010de0:	d13b      	bne.n	8010e5a <__gethex+0x156>
 8010de2:	7873      	ldrb	r3, [r6, #1]
 8010de4:	2b2b      	cmp	r3, #43	; 0x2b
 8010de6:	d02c      	beq.n	8010e42 <__gethex+0x13e>
 8010de8:	2b2d      	cmp	r3, #45	; 0x2d
 8010dea:	d02e      	beq.n	8010e4a <__gethex+0x146>
 8010dec:	1c71      	adds	r1, r6, #1
 8010dee:	f04f 0900 	mov.w	r9, #0
 8010df2:	7808      	ldrb	r0, [r1, #0]
 8010df4:	f7ff ff70 	bl	8010cd8 <__hexdig_fun>
 8010df8:	1e43      	subs	r3, r0, #1
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	2b18      	cmp	r3, #24
 8010dfe:	d82c      	bhi.n	8010e5a <__gethex+0x156>
 8010e00:	f1a0 0210 	sub.w	r2, r0, #16
 8010e04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e08:	f7ff ff66 	bl	8010cd8 <__hexdig_fun>
 8010e0c:	1e43      	subs	r3, r0, #1
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	2b18      	cmp	r3, #24
 8010e12:	d91d      	bls.n	8010e50 <__gethex+0x14c>
 8010e14:	f1b9 0f00 	cmp.w	r9, #0
 8010e18:	d000      	beq.n	8010e1c <__gethex+0x118>
 8010e1a:	4252      	negs	r2, r2
 8010e1c:	4415      	add	r5, r2
 8010e1e:	f8cb 1000 	str.w	r1, [fp]
 8010e22:	b1e4      	cbz	r4, 8010e5e <__gethex+0x15a>
 8010e24:	9b00      	ldr	r3, [sp, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	bf14      	ite	ne
 8010e2a:	2700      	movne	r7, #0
 8010e2c:	2706      	moveq	r7, #6
 8010e2e:	4638      	mov	r0, r7
 8010e30:	b009      	add	sp, #36	; 0x24
 8010e32:	ecbd 8b02 	vpop	{d8}
 8010e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e3a:	463e      	mov	r6, r7
 8010e3c:	4625      	mov	r5, r4
 8010e3e:	2401      	movs	r4, #1
 8010e40:	e7ca      	b.n	8010dd8 <__gethex+0xd4>
 8010e42:	f04f 0900 	mov.w	r9, #0
 8010e46:	1cb1      	adds	r1, r6, #2
 8010e48:	e7d3      	b.n	8010df2 <__gethex+0xee>
 8010e4a:	f04f 0901 	mov.w	r9, #1
 8010e4e:	e7fa      	b.n	8010e46 <__gethex+0x142>
 8010e50:	230a      	movs	r3, #10
 8010e52:	fb03 0202 	mla	r2, r3, r2, r0
 8010e56:	3a10      	subs	r2, #16
 8010e58:	e7d4      	b.n	8010e04 <__gethex+0x100>
 8010e5a:	4631      	mov	r1, r6
 8010e5c:	e7df      	b.n	8010e1e <__gethex+0x11a>
 8010e5e:	1bf3      	subs	r3, r6, r7
 8010e60:	3b01      	subs	r3, #1
 8010e62:	4621      	mov	r1, r4
 8010e64:	2b07      	cmp	r3, #7
 8010e66:	dc0b      	bgt.n	8010e80 <__gethex+0x17c>
 8010e68:	ee18 0a10 	vmov	r0, s16
 8010e6c:	f000 fa70 	bl	8011350 <_Balloc>
 8010e70:	4604      	mov	r4, r0
 8010e72:	b940      	cbnz	r0, 8010e86 <__gethex+0x182>
 8010e74:	4b5d      	ldr	r3, [pc, #372]	; (8010fec <__gethex+0x2e8>)
 8010e76:	4602      	mov	r2, r0
 8010e78:	21de      	movs	r1, #222	; 0xde
 8010e7a:	485d      	ldr	r0, [pc, #372]	; (8010ff0 <__gethex+0x2ec>)
 8010e7c:	f001 f9bc 	bl	80121f8 <__assert_func>
 8010e80:	3101      	adds	r1, #1
 8010e82:	105b      	asrs	r3, r3, #1
 8010e84:	e7ee      	b.n	8010e64 <__gethex+0x160>
 8010e86:	f100 0914 	add.w	r9, r0, #20
 8010e8a:	f04f 0b00 	mov.w	fp, #0
 8010e8e:	f1ca 0301 	rsb	r3, sl, #1
 8010e92:	f8cd 9008 	str.w	r9, [sp, #8]
 8010e96:	f8cd b000 	str.w	fp, [sp]
 8010e9a:	9306      	str	r3, [sp, #24]
 8010e9c:	42b7      	cmp	r7, r6
 8010e9e:	d340      	bcc.n	8010f22 <__gethex+0x21e>
 8010ea0:	9802      	ldr	r0, [sp, #8]
 8010ea2:	9b00      	ldr	r3, [sp, #0]
 8010ea4:	f840 3b04 	str.w	r3, [r0], #4
 8010ea8:	eba0 0009 	sub.w	r0, r0, r9
 8010eac:	1080      	asrs	r0, r0, #2
 8010eae:	0146      	lsls	r6, r0, #5
 8010eb0:	6120      	str	r0, [r4, #16]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f000 fb3e 	bl	8011534 <__hi0bits>
 8010eb8:	1a30      	subs	r0, r6, r0
 8010eba:	f8d8 6000 	ldr.w	r6, [r8]
 8010ebe:	42b0      	cmp	r0, r6
 8010ec0:	dd63      	ble.n	8010f8a <__gethex+0x286>
 8010ec2:	1b87      	subs	r7, r0, r6
 8010ec4:	4639      	mov	r1, r7
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f000 fee2 	bl	8011c90 <__any_on>
 8010ecc:	4682      	mov	sl, r0
 8010ece:	b1a8      	cbz	r0, 8010efc <__gethex+0x1f8>
 8010ed0:	1e7b      	subs	r3, r7, #1
 8010ed2:	1159      	asrs	r1, r3, #5
 8010ed4:	f003 021f 	and.w	r2, r3, #31
 8010ed8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010edc:	f04f 0a01 	mov.w	sl, #1
 8010ee0:	fa0a f202 	lsl.w	r2, sl, r2
 8010ee4:	420a      	tst	r2, r1
 8010ee6:	d009      	beq.n	8010efc <__gethex+0x1f8>
 8010ee8:	4553      	cmp	r3, sl
 8010eea:	dd05      	ble.n	8010ef8 <__gethex+0x1f4>
 8010eec:	1eb9      	subs	r1, r7, #2
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f000 fece 	bl	8011c90 <__any_on>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d145      	bne.n	8010f84 <__gethex+0x280>
 8010ef8:	f04f 0a02 	mov.w	sl, #2
 8010efc:	4639      	mov	r1, r7
 8010efe:	4620      	mov	r0, r4
 8010f00:	f7ff fe98 	bl	8010c34 <rshift>
 8010f04:	443d      	add	r5, r7
 8010f06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f0a:	42ab      	cmp	r3, r5
 8010f0c:	da4c      	bge.n	8010fa8 <__gethex+0x2a4>
 8010f0e:	ee18 0a10 	vmov	r0, s16
 8010f12:	4621      	mov	r1, r4
 8010f14:	f000 fa5c 	bl	80113d0 <_Bfree>
 8010f18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	6013      	str	r3, [r2, #0]
 8010f1e:	27a3      	movs	r7, #163	; 0xa3
 8010f20:	e785      	b.n	8010e2e <__gethex+0x12a>
 8010f22:	1e73      	subs	r3, r6, #1
 8010f24:	9a05      	ldr	r2, [sp, #20]
 8010f26:	9303      	str	r3, [sp, #12]
 8010f28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d019      	beq.n	8010f64 <__gethex+0x260>
 8010f30:	f1bb 0f20 	cmp.w	fp, #32
 8010f34:	d107      	bne.n	8010f46 <__gethex+0x242>
 8010f36:	9b02      	ldr	r3, [sp, #8]
 8010f38:	9a00      	ldr	r2, [sp, #0]
 8010f3a:	f843 2b04 	str.w	r2, [r3], #4
 8010f3e:	9302      	str	r3, [sp, #8]
 8010f40:	2300      	movs	r3, #0
 8010f42:	9300      	str	r3, [sp, #0]
 8010f44:	469b      	mov	fp, r3
 8010f46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010f4a:	f7ff fec5 	bl	8010cd8 <__hexdig_fun>
 8010f4e:	9b00      	ldr	r3, [sp, #0]
 8010f50:	f000 000f 	and.w	r0, r0, #15
 8010f54:	fa00 f00b 	lsl.w	r0, r0, fp
 8010f58:	4303      	orrs	r3, r0
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	f10b 0b04 	add.w	fp, fp, #4
 8010f60:	9b03      	ldr	r3, [sp, #12]
 8010f62:	e00d      	b.n	8010f80 <__gethex+0x27c>
 8010f64:	9b03      	ldr	r3, [sp, #12]
 8010f66:	9a06      	ldr	r2, [sp, #24]
 8010f68:	4413      	add	r3, r2
 8010f6a:	42bb      	cmp	r3, r7
 8010f6c:	d3e0      	bcc.n	8010f30 <__gethex+0x22c>
 8010f6e:	4618      	mov	r0, r3
 8010f70:	9901      	ldr	r1, [sp, #4]
 8010f72:	9307      	str	r3, [sp, #28]
 8010f74:	4652      	mov	r2, sl
 8010f76:	f001 f91d 	bl	80121b4 <strncmp>
 8010f7a:	9b07      	ldr	r3, [sp, #28]
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	d1d7      	bne.n	8010f30 <__gethex+0x22c>
 8010f80:	461e      	mov	r6, r3
 8010f82:	e78b      	b.n	8010e9c <__gethex+0x198>
 8010f84:	f04f 0a03 	mov.w	sl, #3
 8010f88:	e7b8      	b.n	8010efc <__gethex+0x1f8>
 8010f8a:	da0a      	bge.n	8010fa2 <__gethex+0x29e>
 8010f8c:	1a37      	subs	r7, r6, r0
 8010f8e:	4621      	mov	r1, r4
 8010f90:	ee18 0a10 	vmov	r0, s16
 8010f94:	463a      	mov	r2, r7
 8010f96:	f000 fc37 	bl	8011808 <__lshift>
 8010f9a:	1bed      	subs	r5, r5, r7
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	f100 0914 	add.w	r9, r0, #20
 8010fa2:	f04f 0a00 	mov.w	sl, #0
 8010fa6:	e7ae      	b.n	8010f06 <__gethex+0x202>
 8010fa8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010fac:	42a8      	cmp	r0, r5
 8010fae:	dd72      	ble.n	8011096 <__gethex+0x392>
 8010fb0:	1b45      	subs	r5, r0, r5
 8010fb2:	42ae      	cmp	r6, r5
 8010fb4:	dc36      	bgt.n	8011024 <__gethex+0x320>
 8010fb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010fba:	2b02      	cmp	r3, #2
 8010fbc:	d02a      	beq.n	8011014 <__gethex+0x310>
 8010fbe:	2b03      	cmp	r3, #3
 8010fc0:	d02c      	beq.n	801101c <__gethex+0x318>
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d11c      	bne.n	8011000 <__gethex+0x2fc>
 8010fc6:	42ae      	cmp	r6, r5
 8010fc8:	d11a      	bne.n	8011000 <__gethex+0x2fc>
 8010fca:	2e01      	cmp	r6, #1
 8010fcc:	d112      	bne.n	8010ff4 <__gethex+0x2f0>
 8010fce:	9a04      	ldr	r2, [sp, #16]
 8010fd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010fd4:	6013      	str	r3, [r2, #0]
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	6123      	str	r3, [r4, #16]
 8010fda:	f8c9 3000 	str.w	r3, [r9]
 8010fde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010fe0:	2762      	movs	r7, #98	; 0x62
 8010fe2:	601c      	str	r4, [r3, #0]
 8010fe4:	e723      	b.n	8010e2e <__gethex+0x12a>
 8010fe6:	bf00      	nop
 8010fe8:	08014f0c 	.word	0x08014f0c
 8010fec:	08014e97 	.word	0x08014e97
 8010ff0:	08014ea8 	.word	0x08014ea8
 8010ff4:	1e71      	subs	r1, r6, #1
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	f000 fe4a 	bl	8011c90 <__any_on>
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	d1e6      	bne.n	8010fce <__gethex+0x2ca>
 8011000:	ee18 0a10 	vmov	r0, s16
 8011004:	4621      	mov	r1, r4
 8011006:	f000 f9e3 	bl	80113d0 <_Bfree>
 801100a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801100c:	2300      	movs	r3, #0
 801100e:	6013      	str	r3, [r2, #0]
 8011010:	2750      	movs	r7, #80	; 0x50
 8011012:	e70c      	b.n	8010e2e <__gethex+0x12a>
 8011014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1f2      	bne.n	8011000 <__gethex+0x2fc>
 801101a:	e7d8      	b.n	8010fce <__gethex+0x2ca>
 801101c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801101e:	2b00      	cmp	r3, #0
 8011020:	d1d5      	bne.n	8010fce <__gethex+0x2ca>
 8011022:	e7ed      	b.n	8011000 <__gethex+0x2fc>
 8011024:	1e6f      	subs	r7, r5, #1
 8011026:	f1ba 0f00 	cmp.w	sl, #0
 801102a:	d131      	bne.n	8011090 <__gethex+0x38c>
 801102c:	b127      	cbz	r7, 8011038 <__gethex+0x334>
 801102e:	4639      	mov	r1, r7
 8011030:	4620      	mov	r0, r4
 8011032:	f000 fe2d 	bl	8011c90 <__any_on>
 8011036:	4682      	mov	sl, r0
 8011038:	117b      	asrs	r3, r7, #5
 801103a:	2101      	movs	r1, #1
 801103c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011040:	f007 071f 	and.w	r7, r7, #31
 8011044:	fa01 f707 	lsl.w	r7, r1, r7
 8011048:	421f      	tst	r7, r3
 801104a:	4629      	mov	r1, r5
 801104c:	4620      	mov	r0, r4
 801104e:	bf18      	it	ne
 8011050:	f04a 0a02 	orrne.w	sl, sl, #2
 8011054:	1b76      	subs	r6, r6, r5
 8011056:	f7ff fded 	bl	8010c34 <rshift>
 801105a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801105e:	2702      	movs	r7, #2
 8011060:	f1ba 0f00 	cmp.w	sl, #0
 8011064:	d048      	beq.n	80110f8 <__gethex+0x3f4>
 8011066:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801106a:	2b02      	cmp	r3, #2
 801106c:	d015      	beq.n	801109a <__gethex+0x396>
 801106e:	2b03      	cmp	r3, #3
 8011070:	d017      	beq.n	80110a2 <__gethex+0x39e>
 8011072:	2b01      	cmp	r3, #1
 8011074:	d109      	bne.n	801108a <__gethex+0x386>
 8011076:	f01a 0f02 	tst.w	sl, #2
 801107a:	d006      	beq.n	801108a <__gethex+0x386>
 801107c:	f8d9 0000 	ldr.w	r0, [r9]
 8011080:	ea4a 0a00 	orr.w	sl, sl, r0
 8011084:	f01a 0f01 	tst.w	sl, #1
 8011088:	d10e      	bne.n	80110a8 <__gethex+0x3a4>
 801108a:	f047 0710 	orr.w	r7, r7, #16
 801108e:	e033      	b.n	80110f8 <__gethex+0x3f4>
 8011090:	f04f 0a01 	mov.w	sl, #1
 8011094:	e7d0      	b.n	8011038 <__gethex+0x334>
 8011096:	2701      	movs	r7, #1
 8011098:	e7e2      	b.n	8011060 <__gethex+0x35c>
 801109a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801109c:	f1c3 0301 	rsb	r3, r3, #1
 80110a0:	9315      	str	r3, [sp, #84]	; 0x54
 80110a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d0f0      	beq.n	801108a <__gethex+0x386>
 80110a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80110ac:	f104 0314 	add.w	r3, r4, #20
 80110b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80110b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80110b8:	f04f 0c00 	mov.w	ip, #0
 80110bc:	4618      	mov	r0, r3
 80110be:	f853 2b04 	ldr.w	r2, [r3], #4
 80110c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80110c6:	d01c      	beq.n	8011102 <__gethex+0x3fe>
 80110c8:	3201      	adds	r2, #1
 80110ca:	6002      	str	r2, [r0, #0]
 80110cc:	2f02      	cmp	r7, #2
 80110ce:	f104 0314 	add.w	r3, r4, #20
 80110d2:	d13f      	bne.n	8011154 <__gethex+0x450>
 80110d4:	f8d8 2000 	ldr.w	r2, [r8]
 80110d8:	3a01      	subs	r2, #1
 80110da:	42b2      	cmp	r2, r6
 80110dc:	d10a      	bne.n	80110f4 <__gethex+0x3f0>
 80110de:	1171      	asrs	r1, r6, #5
 80110e0:	2201      	movs	r2, #1
 80110e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110e6:	f006 061f 	and.w	r6, r6, #31
 80110ea:	fa02 f606 	lsl.w	r6, r2, r6
 80110ee:	421e      	tst	r6, r3
 80110f0:	bf18      	it	ne
 80110f2:	4617      	movne	r7, r2
 80110f4:	f047 0720 	orr.w	r7, r7, #32
 80110f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110fa:	601c      	str	r4, [r3, #0]
 80110fc:	9b04      	ldr	r3, [sp, #16]
 80110fe:	601d      	str	r5, [r3, #0]
 8011100:	e695      	b.n	8010e2e <__gethex+0x12a>
 8011102:	4299      	cmp	r1, r3
 8011104:	f843 cc04 	str.w	ip, [r3, #-4]
 8011108:	d8d8      	bhi.n	80110bc <__gethex+0x3b8>
 801110a:	68a3      	ldr	r3, [r4, #8]
 801110c:	459b      	cmp	fp, r3
 801110e:	db19      	blt.n	8011144 <__gethex+0x440>
 8011110:	6861      	ldr	r1, [r4, #4]
 8011112:	ee18 0a10 	vmov	r0, s16
 8011116:	3101      	adds	r1, #1
 8011118:	f000 f91a 	bl	8011350 <_Balloc>
 801111c:	4681      	mov	r9, r0
 801111e:	b918      	cbnz	r0, 8011128 <__gethex+0x424>
 8011120:	4b1a      	ldr	r3, [pc, #104]	; (801118c <__gethex+0x488>)
 8011122:	4602      	mov	r2, r0
 8011124:	2184      	movs	r1, #132	; 0x84
 8011126:	e6a8      	b.n	8010e7a <__gethex+0x176>
 8011128:	6922      	ldr	r2, [r4, #16]
 801112a:	3202      	adds	r2, #2
 801112c:	f104 010c 	add.w	r1, r4, #12
 8011130:	0092      	lsls	r2, r2, #2
 8011132:	300c      	adds	r0, #12
 8011134:	f7fd fbc2 	bl	800e8bc <memcpy>
 8011138:	4621      	mov	r1, r4
 801113a:	ee18 0a10 	vmov	r0, s16
 801113e:	f000 f947 	bl	80113d0 <_Bfree>
 8011142:	464c      	mov	r4, r9
 8011144:	6923      	ldr	r3, [r4, #16]
 8011146:	1c5a      	adds	r2, r3, #1
 8011148:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801114c:	6122      	str	r2, [r4, #16]
 801114e:	2201      	movs	r2, #1
 8011150:	615a      	str	r2, [r3, #20]
 8011152:	e7bb      	b.n	80110cc <__gethex+0x3c8>
 8011154:	6922      	ldr	r2, [r4, #16]
 8011156:	455a      	cmp	r2, fp
 8011158:	dd0b      	ble.n	8011172 <__gethex+0x46e>
 801115a:	2101      	movs	r1, #1
 801115c:	4620      	mov	r0, r4
 801115e:	f7ff fd69 	bl	8010c34 <rshift>
 8011162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011166:	3501      	adds	r5, #1
 8011168:	42ab      	cmp	r3, r5
 801116a:	f6ff aed0 	blt.w	8010f0e <__gethex+0x20a>
 801116e:	2701      	movs	r7, #1
 8011170:	e7c0      	b.n	80110f4 <__gethex+0x3f0>
 8011172:	f016 061f 	ands.w	r6, r6, #31
 8011176:	d0fa      	beq.n	801116e <__gethex+0x46a>
 8011178:	4453      	add	r3, sl
 801117a:	f1c6 0620 	rsb	r6, r6, #32
 801117e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011182:	f000 f9d7 	bl	8011534 <__hi0bits>
 8011186:	42b0      	cmp	r0, r6
 8011188:	dbe7      	blt.n	801115a <__gethex+0x456>
 801118a:	e7f0      	b.n	801116e <__gethex+0x46a>
 801118c:	08014e97 	.word	0x08014e97

08011190 <L_shift>:
 8011190:	f1c2 0208 	rsb	r2, r2, #8
 8011194:	0092      	lsls	r2, r2, #2
 8011196:	b570      	push	{r4, r5, r6, lr}
 8011198:	f1c2 0620 	rsb	r6, r2, #32
 801119c:	6843      	ldr	r3, [r0, #4]
 801119e:	6804      	ldr	r4, [r0, #0]
 80111a0:	fa03 f506 	lsl.w	r5, r3, r6
 80111a4:	432c      	orrs	r4, r5
 80111a6:	40d3      	lsrs	r3, r2
 80111a8:	6004      	str	r4, [r0, #0]
 80111aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80111ae:	4288      	cmp	r0, r1
 80111b0:	d3f4      	bcc.n	801119c <L_shift+0xc>
 80111b2:	bd70      	pop	{r4, r5, r6, pc}

080111b4 <__match>:
 80111b4:	b530      	push	{r4, r5, lr}
 80111b6:	6803      	ldr	r3, [r0, #0]
 80111b8:	3301      	adds	r3, #1
 80111ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111be:	b914      	cbnz	r4, 80111c6 <__match+0x12>
 80111c0:	6003      	str	r3, [r0, #0]
 80111c2:	2001      	movs	r0, #1
 80111c4:	bd30      	pop	{r4, r5, pc}
 80111c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80111ce:	2d19      	cmp	r5, #25
 80111d0:	bf98      	it	ls
 80111d2:	3220      	addls	r2, #32
 80111d4:	42a2      	cmp	r2, r4
 80111d6:	d0f0      	beq.n	80111ba <__match+0x6>
 80111d8:	2000      	movs	r0, #0
 80111da:	e7f3      	b.n	80111c4 <__match+0x10>

080111dc <__hexnan>:
 80111dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e0:	680b      	ldr	r3, [r1, #0]
 80111e2:	115e      	asrs	r6, r3, #5
 80111e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80111e8:	f013 031f 	ands.w	r3, r3, #31
 80111ec:	b087      	sub	sp, #28
 80111ee:	bf18      	it	ne
 80111f0:	3604      	addne	r6, #4
 80111f2:	2500      	movs	r5, #0
 80111f4:	1f37      	subs	r7, r6, #4
 80111f6:	4690      	mov	r8, r2
 80111f8:	6802      	ldr	r2, [r0, #0]
 80111fa:	9301      	str	r3, [sp, #4]
 80111fc:	4682      	mov	sl, r0
 80111fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8011202:	46b9      	mov	r9, r7
 8011204:	463c      	mov	r4, r7
 8011206:	9502      	str	r5, [sp, #8]
 8011208:	46ab      	mov	fp, r5
 801120a:	7851      	ldrb	r1, [r2, #1]
 801120c:	1c53      	adds	r3, r2, #1
 801120e:	9303      	str	r3, [sp, #12]
 8011210:	b341      	cbz	r1, 8011264 <__hexnan+0x88>
 8011212:	4608      	mov	r0, r1
 8011214:	9205      	str	r2, [sp, #20]
 8011216:	9104      	str	r1, [sp, #16]
 8011218:	f7ff fd5e 	bl	8010cd8 <__hexdig_fun>
 801121c:	2800      	cmp	r0, #0
 801121e:	d14f      	bne.n	80112c0 <__hexnan+0xe4>
 8011220:	9904      	ldr	r1, [sp, #16]
 8011222:	9a05      	ldr	r2, [sp, #20]
 8011224:	2920      	cmp	r1, #32
 8011226:	d818      	bhi.n	801125a <__hexnan+0x7e>
 8011228:	9b02      	ldr	r3, [sp, #8]
 801122a:	459b      	cmp	fp, r3
 801122c:	dd13      	ble.n	8011256 <__hexnan+0x7a>
 801122e:	454c      	cmp	r4, r9
 8011230:	d206      	bcs.n	8011240 <__hexnan+0x64>
 8011232:	2d07      	cmp	r5, #7
 8011234:	dc04      	bgt.n	8011240 <__hexnan+0x64>
 8011236:	462a      	mov	r2, r5
 8011238:	4649      	mov	r1, r9
 801123a:	4620      	mov	r0, r4
 801123c:	f7ff ffa8 	bl	8011190 <L_shift>
 8011240:	4544      	cmp	r4, r8
 8011242:	d950      	bls.n	80112e6 <__hexnan+0x10a>
 8011244:	2300      	movs	r3, #0
 8011246:	f1a4 0904 	sub.w	r9, r4, #4
 801124a:	f844 3c04 	str.w	r3, [r4, #-4]
 801124e:	f8cd b008 	str.w	fp, [sp, #8]
 8011252:	464c      	mov	r4, r9
 8011254:	461d      	mov	r5, r3
 8011256:	9a03      	ldr	r2, [sp, #12]
 8011258:	e7d7      	b.n	801120a <__hexnan+0x2e>
 801125a:	2929      	cmp	r1, #41	; 0x29
 801125c:	d156      	bne.n	801130c <__hexnan+0x130>
 801125e:	3202      	adds	r2, #2
 8011260:	f8ca 2000 	str.w	r2, [sl]
 8011264:	f1bb 0f00 	cmp.w	fp, #0
 8011268:	d050      	beq.n	801130c <__hexnan+0x130>
 801126a:	454c      	cmp	r4, r9
 801126c:	d206      	bcs.n	801127c <__hexnan+0xa0>
 801126e:	2d07      	cmp	r5, #7
 8011270:	dc04      	bgt.n	801127c <__hexnan+0xa0>
 8011272:	462a      	mov	r2, r5
 8011274:	4649      	mov	r1, r9
 8011276:	4620      	mov	r0, r4
 8011278:	f7ff ff8a 	bl	8011190 <L_shift>
 801127c:	4544      	cmp	r4, r8
 801127e:	d934      	bls.n	80112ea <__hexnan+0x10e>
 8011280:	f1a8 0204 	sub.w	r2, r8, #4
 8011284:	4623      	mov	r3, r4
 8011286:	f853 1b04 	ldr.w	r1, [r3], #4
 801128a:	f842 1f04 	str.w	r1, [r2, #4]!
 801128e:	429f      	cmp	r7, r3
 8011290:	d2f9      	bcs.n	8011286 <__hexnan+0xaa>
 8011292:	1b3b      	subs	r3, r7, r4
 8011294:	f023 0303 	bic.w	r3, r3, #3
 8011298:	3304      	adds	r3, #4
 801129a:	3401      	adds	r4, #1
 801129c:	3e03      	subs	r6, #3
 801129e:	42b4      	cmp	r4, r6
 80112a0:	bf88      	it	hi
 80112a2:	2304      	movhi	r3, #4
 80112a4:	4443      	add	r3, r8
 80112a6:	2200      	movs	r2, #0
 80112a8:	f843 2b04 	str.w	r2, [r3], #4
 80112ac:	429f      	cmp	r7, r3
 80112ae:	d2fb      	bcs.n	80112a8 <__hexnan+0xcc>
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	b91b      	cbnz	r3, 80112bc <__hexnan+0xe0>
 80112b4:	4547      	cmp	r7, r8
 80112b6:	d127      	bne.n	8011308 <__hexnan+0x12c>
 80112b8:	2301      	movs	r3, #1
 80112ba:	603b      	str	r3, [r7, #0]
 80112bc:	2005      	movs	r0, #5
 80112be:	e026      	b.n	801130e <__hexnan+0x132>
 80112c0:	3501      	adds	r5, #1
 80112c2:	2d08      	cmp	r5, #8
 80112c4:	f10b 0b01 	add.w	fp, fp, #1
 80112c8:	dd06      	ble.n	80112d8 <__hexnan+0xfc>
 80112ca:	4544      	cmp	r4, r8
 80112cc:	d9c3      	bls.n	8011256 <__hexnan+0x7a>
 80112ce:	2300      	movs	r3, #0
 80112d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80112d4:	2501      	movs	r5, #1
 80112d6:	3c04      	subs	r4, #4
 80112d8:	6822      	ldr	r2, [r4, #0]
 80112da:	f000 000f 	and.w	r0, r0, #15
 80112de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80112e2:	6022      	str	r2, [r4, #0]
 80112e4:	e7b7      	b.n	8011256 <__hexnan+0x7a>
 80112e6:	2508      	movs	r5, #8
 80112e8:	e7b5      	b.n	8011256 <__hexnan+0x7a>
 80112ea:	9b01      	ldr	r3, [sp, #4]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d0df      	beq.n	80112b0 <__hexnan+0xd4>
 80112f0:	f04f 32ff 	mov.w	r2, #4294967295
 80112f4:	f1c3 0320 	rsb	r3, r3, #32
 80112f8:	fa22 f303 	lsr.w	r3, r2, r3
 80112fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011300:	401a      	ands	r2, r3
 8011302:	f846 2c04 	str.w	r2, [r6, #-4]
 8011306:	e7d3      	b.n	80112b0 <__hexnan+0xd4>
 8011308:	3f04      	subs	r7, #4
 801130a:	e7d1      	b.n	80112b0 <__hexnan+0xd4>
 801130c:	2004      	movs	r0, #4
 801130e:	b007      	add	sp, #28
 8011310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011314 <_localeconv_r>:
 8011314:	4800      	ldr	r0, [pc, #0]	; (8011318 <_localeconv_r+0x4>)
 8011316:	4770      	bx	lr
 8011318:	200002dc 	.word	0x200002dc

0801131c <malloc>:
 801131c:	4b02      	ldr	r3, [pc, #8]	; (8011328 <malloc+0xc>)
 801131e:	4601      	mov	r1, r0
 8011320:	6818      	ldr	r0, [r3, #0]
 8011322:	f000 bd59 	b.w	8011dd8 <_malloc_r>
 8011326:	bf00      	nop
 8011328:	20000184 	.word	0x20000184

0801132c <__ascii_mbtowc>:
 801132c:	b082      	sub	sp, #8
 801132e:	b901      	cbnz	r1, 8011332 <__ascii_mbtowc+0x6>
 8011330:	a901      	add	r1, sp, #4
 8011332:	b142      	cbz	r2, 8011346 <__ascii_mbtowc+0x1a>
 8011334:	b14b      	cbz	r3, 801134a <__ascii_mbtowc+0x1e>
 8011336:	7813      	ldrb	r3, [r2, #0]
 8011338:	600b      	str	r3, [r1, #0]
 801133a:	7812      	ldrb	r2, [r2, #0]
 801133c:	1e10      	subs	r0, r2, #0
 801133e:	bf18      	it	ne
 8011340:	2001      	movne	r0, #1
 8011342:	b002      	add	sp, #8
 8011344:	4770      	bx	lr
 8011346:	4610      	mov	r0, r2
 8011348:	e7fb      	b.n	8011342 <__ascii_mbtowc+0x16>
 801134a:	f06f 0001 	mvn.w	r0, #1
 801134e:	e7f8      	b.n	8011342 <__ascii_mbtowc+0x16>

08011350 <_Balloc>:
 8011350:	b570      	push	{r4, r5, r6, lr}
 8011352:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011354:	4604      	mov	r4, r0
 8011356:	460d      	mov	r5, r1
 8011358:	b976      	cbnz	r6, 8011378 <_Balloc+0x28>
 801135a:	2010      	movs	r0, #16
 801135c:	f7ff ffde 	bl	801131c <malloc>
 8011360:	4602      	mov	r2, r0
 8011362:	6260      	str	r0, [r4, #36]	; 0x24
 8011364:	b920      	cbnz	r0, 8011370 <_Balloc+0x20>
 8011366:	4b18      	ldr	r3, [pc, #96]	; (80113c8 <_Balloc+0x78>)
 8011368:	4818      	ldr	r0, [pc, #96]	; (80113cc <_Balloc+0x7c>)
 801136a:	2166      	movs	r1, #102	; 0x66
 801136c:	f000 ff44 	bl	80121f8 <__assert_func>
 8011370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011374:	6006      	str	r6, [r0, #0]
 8011376:	60c6      	str	r6, [r0, #12]
 8011378:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801137a:	68f3      	ldr	r3, [r6, #12]
 801137c:	b183      	cbz	r3, 80113a0 <_Balloc+0x50>
 801137e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011386:	b9b8      	cbnz	r0, 80113b8 <_Balloc+0x68>
 8011388:	2101      	movs	r1, #1
 801138a:	fa01 f605 	lsl.w	r6, r1, r5
 801138e:	1d72      	adds	r2, r6, #5
 8011390:	0092      	lsls	r2, r2, #2
 8011392:	4620      	mov	r0, r4
 8011394:	f000 fc9d 	bl	8011cd2 <_calloc_r>
 8011398:	b160      	cbz	r0, 80113b4 <_Balloc+0x64>
 801139a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801139e:	e00e      	b.n	80113be <_Balloc+0x6e>
 80113a0:	2221      	movs	r2, #33	; 0x21
 80113a2:	2104      	movs	r1, #4
 80113a4:	4620      	mov	r0, r4
 80113a6:	f000 fc94 	bl	8011cd2 <_calloc_r>
 80113aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113ac:	60f0      	str	r0, [r6, #12]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d1e4      	bne.n	801137e <_Balloc+0x2e>
 80113b4:	2000      	movs	r0, #0
 80113b6:	bd70      	pop	{r4, r5, r6, pc}
 80113b8:	6802      	ldr	r2, [r0, #0]
 80113ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113be:	2300      	movs	r3, #0
 80113c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113c4:	e7f7      	b.n	80113b6 <_Balloc+0x66>
 80113c6:	bf00      	nop
 80113c8:	08014e25 	.word	0x08014e25
 80113cc:	08014f1e 	.word	0x08014f1e

080113d0 <_Bfree>:
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80113d4:	4605      	mov	r5, r0
 80113d6:	460c      	mov	r4, r1
 80113d8:	b976      	cbnz	r6, 80113f8 <_Bfree+0x28>
 80113da:	2010      	movs	r0, #16
 80113dc:	f7ff ff9e 	bl	801131c <malloc>
 80113e0:	4602      	mov	r2, r0
 80113e2:	6268      	str	r0, [r5, #36]	; 0x24
 80113e4:	b920      	cbnz	r0, 80113f0 <_Bfree+0x20>
 80113e6:	4b09      	ldr	r3, [pc, #36]	; (801140c <_Bfree+0x3c>)
 80113e8:	4809      	ldr	r0, [pc, #36]	; (8011410 <_Bfree+0x40>)
 80113ea:	218a      	movs	r1, #138	; 0x8a
 80113ec:	f000 ff04 	bl	80121f8 <__assert_func>
 80113f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113f4:	6006      	str	r6, [r0, #0]
 80113f6:	60c6      	str	r6, [r0, #12]
 80113f8:	b13c      	cbz	r4, 801140a <_Bfree+0x3a>
 80113fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80113fc:	6862      	ldr	r2, [r4, #4]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011404:	6021      	str	r1, [r4, #0]
 8011406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801140a:	bd70      	pop	{r4, r5, r6, pc}
 801140c:	08014e25 	.word	0x08014e25
 8011410:	08014f1e 	.word	0x08014f1e

08011414 <__multadd>:
 8011414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011418:	690d      	ldr	r5, [r1, #16]
 801141a:	4607      	mov	r7, r0
 801141c:	460c      	mov	r4, r1
 801141e:	461e      	mov	r6, r3
 8011420:	f101 0c14 	add.w	ip, r1, #20
 8011424:	2000      	movs	r0, #0
 8011426:	f8dc 3000 	ldr.w	r3, [ip]
 801142a:	b299      	uxth	r1, r3
 801142c:	fb02 6101 	mla	r1, r2, r1, r6
 8011430:	0c1e      	lsrs	r6, r3, #16
 8011432:	0c0b      	lsrs	r3, r1, #16
 8011434:	fb02 3306 	mla	r3, r2, r6, r3
 8011438:	b289      	uxth	r1, r1
 801143a:	3001      	adds	r0, #1
 801143c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011440:	4285      	cmp	r5, r0
 8011442:	f84c 1b04 	str.w	r1, [ip], #4
 8011446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801144a:	dcec      	bgt.n	8011426 <__multadd+0x12>
 801144c:	b30e      	cbz	r6, 8011492 <__multadd+0x7e>
 801144e:	68a3      	ldr	r3, [r4, #8]
 8011450:	42ab      	cmp	r3, r5
 8011452:	dc19      	bgt.n	8011488 <__multadd+0x74>
 8011454:	6861      	ldr	r1, [r4, #4]
 8011456:	4638      	mov	r0, r7
 8011458:	3101      	adds	r1, #1
 801145a:	f7ff ff79 	bl	8011350 <_Balloc>
 801145e:	4680      	mov	r8, r0
 8011460:	b928      	cbnz	r0, 801146e <__multadd+0x5a>
 8011462:	4602      	mov	r2, r0
 8011464:	4b0c      	ldr	r3, [pc, #48]	; (8011498 <__multadd+0x84>)
 8011466:	480d      	ldr	r0, [pc, #52]	; (801149c <__multadd+0x88>)
 8011468:	21b5      	movs	r1, #181	; 0xb5
 801146a:	f000 fec5 	bl	80121f8 <__assert_func>
 801146e:	6922      	ldr	r2, [r4, #16]
 8011470:	3202      	adds	r2, #2
 8011472:	f104 010c 	add.w	r1, r4, #12
 8011476:	0092      	lsls	r2, r2, #2
 8011478:	300c      	adds	r0, #12
 801147a:	f7fd fa1f 	bl	800e8bc <memcpy>
 801147e:	4621      	mov	r1, r4
 8011480:	4638      	mov	r0, r7
 8011482:	f7ff ffa5 	bl	80113d0 <_Bfree>
 8011486:	4644      	mov	r4, r8
 8011488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801148c:	3501      	adds	r5, #1
 801148e:	615e      	str	r6, [r3, #20]
 8011490:	6125      	str	r5, [r4, #16]
 8011492:	4620      	mov	r0, r4
 8011494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011498:	08014e97 	.word	0x08014e97
 801149c:	08014f1e 	.word	0x08014f1e

080114a0 <__s2b>:
 80114a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a4:	460c      	mov	r4, r1
 80114a6:	4615      	mov	r5, r2
 80114a8:	461f      	mov	r7, r3
 80114aa:	2209      	movs	r2, #9
 80114ac:	3308      	adds	r3, #8
 80114ae:	4606      	mov	r6, r0
 80114b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80114b4:	2100      	movs	r1, #0
 80114b6:	2201      	movs	r2, #1
 80114b8:	429a      	cmp	r2, r3
 80114ba:	db09      	blt.n	80114d0 <__s2b+0x30>
 80114bc:	4630      	mov	r0, r6
 80114be:	f7ff ff47 	bl	8011350 <_Balloc>
 80114c2:	b940      	cbnz	r0, 80114d6 <__s2b+0x36>
 80114c4:	4602      	mov	r2, r0
 80114c6:	4b19      	ldr	r3, [pc, #100]	; (801152c <__s2b+0x8c>)
 80114c8:	4819      	ldr	r0, [pc, #100]	; (8011530 <__s2b+0x90>)
 80114ca:	21ce      	movs	r1, #206	; 0xce
 80114cc:	f000 fe94 	bl	80121f8 <__assert_func>
 80114d0:	0052      	lsls	r2, r2, #1
 80114d2:	3101      	adds	r1, #1
 80114d4:	e7f0      	b.n	80114b8 <__s2b+0x18>
 80114d6:	9b08      	ldr	r3, [sp, #32]
 80114d8:	6143      	str	r3, [r0, #20]
 80114da:	2d09      	cmp	r5, #9
 80114dc:	f04f 0301 	mov.w	r3, #1
 80114e0:	6103      	str	r3, [r0, #16]
 80114e2:	dd16      	ble.n	8011512 <__s2b+0x72>
 80114e4:	f104 0909 	add.w	r9, r4, #9
 80114e8:	46c8      	mov	r8, r9
 80114ea:	442c      	add	r4, r5
 80114ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80114f0:	4601      	mov	r1, r0
 80114f2:	3b30      	subs	r3, #48	; 0x30
 80114f4:	220a      	movs	r2, #10
 80114f6:	4630      	mov	r0, r6
 80114f8:	f7ff ff8c 	bl	8011414 <__multadd>
 80114fc:	45a0      	cmp	r8, r4
 80114fe:	d1f5      	bne.n	80114ec <__s2b+0x4c>
 8011500:	f1a5 0408 	sub.w	r4, r5, #8
 8011504:	444c      	add	r4, r9
 8011506:	1b2d      	subs	r5, r5, r4
 8011508:	1963      	adds	r3, r4, r5
 801150a:	42bb      	cmp	r3, r7
 801150c:	db04      	blt.n	8011518 <__s2b+0x78>
 801150e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011512:	340a      	adds	r4, #10
 8011514:	2509      	movs	r5, #9
 8011516:	e7f6      	b.n	8011506 <__s2b+0x66>
 8011518:	f814 3b01 	ldrb.w	r3, [r4], #1
 801151c:	4601      	mov	r1, r0
 801151e:	3b30      	subs	r3, #48	; 0x30
 8011520:	220a      	movs	r2, #10
 8011522:	4630      	mov	r0, r6
 8011524:	f7ff ff76 	bl	8011414 <__multadd>
 8011528:	e7ee      	b.n	8011508 <__s2b+0x68>
 801152a:	bf00      	nop
 801152c:	08014e97 	.word	0x08014e97
 8011530:	08014f1e 	.word	0x08014f1e

08011534 <__hi0bits>:
 8011534:	0c03      	lsrs	r3, r0, #16
 8011536:	041b      	lsls	r3, r3, #16
 8011538:	b9d3      	cbnz	r3, 8011570 <__hi0bits+0x3c>
 801153a:	0400      	lsls	r0, r0, #16
 801153c:	2310      	movs	r3, #16
 801153e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011542:	bf04      	itt	eq
 8011544:	0200      	lsleq	r0, r0, #8
 8011546:	3308      	addeq	r3, #8
 8011548:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801154c:	bf04      	itt	eq
 801154e:	0100      	lsleq	r0, r0, #4
 8011550:	3304      	addeq	r3, #4
 8011552:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011556:	bf04      	itt	eq
 8011558:	0080      	lsleq	r0, r0, #2
 801155a:	3302      	addeq	r3, #2
 801155c:	2800      	cmp	r0, #0
 801155e:	db05      	blt.n	801156c <__hi0bits+0x38>
 8011560:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011564:	f103 0301 	add.w	r3, r3, #1
 8011568:	bf08      	it	eq
 801156a:	2320      	moveq	r3, #32
 801156c:	4618      	mov	r0, r3
 801156e:	4770      	bx	lr
 8011570:	2300      	movs	r3, #0
 8011572:	e7e4      	b.n	801153e <__hi0bits+0xa>

08011574 <__lo0bits>:
 8011574:	6803      	ldr	r3, [r0, #0]
 8011576:	f013 0207 	ands.w	r2, r3, #7
 801157a:	4601      	mov	r1, r0
 801157c:	d00b      	beq.n	8011596 <__lo0bits+0x22>
 801157e:	07da      	lsls	r2, r3, #31
 8011580:	d423      	bmi.n	80115ca <__lo0bits+0x56>
 8011582:	0798      	lsls	r0, r3, #30
 8011584:	bf49      	itett	mi
 8011586:	085b      	lsrmi	r3, r3, #1
 8011588:	089b      	lsrpl	r3, r3, #2
 801158a:	2001      	movmi	r0, #1
 801158c:	600b      	strmi	r3, [r1, #0]
 801158e:	bf5c      	itt	pl
 8011590:	600b      	strpl	r3, [r1, #0]
 8011592:	2002      	movpl	r0, #2
 8011594:	4770      	bx	lr
 8011596:	b298      	uxth	r0, r3
 8011598:	b9a8      	cbnz	r0, 80115c6 <__lo0bits+0x52>
 801159a:	0c1b      	lsrs	r3, r3, #16
 801159c:	2010      	movs	r0, #16
 801159e:	b2da      	uxtb	r2, r3
 80115a0:	b90a      	cbnz	r2, 80115a6 <__lo0bits+0x32>
 80115a2:	3008      	adds	r0, #8
 80115a4:	0a1b      	lsrs	r3, r3, #8
 80115a6:	071a      	lsls	r2, r3, #28
 80115a8:	bf04      	itt	eq
 80115aa:	091b      	lsreq	r3, r3, #4
 80115ac:	3004      	addeq	r0, #4
 80115ae:	079a      	lsls	r2, r3, #30
 80115b0:	bf04      	itt	eq
 80115b2:	089b      	lsreq	r3, r3, #2
 80115b4:	3002      	addeq	r0, #2
 80115b6:	07da      	lsls	r2, r3, #31
 80115b8:	d403      	bmi.n	80115c2 <__lo0bits+0x4e>
 80115ba:	085b      	lsrs	r3, r3, #1
 80115bc:	f100 0001 	add.w	r0, r0, #1
 80115c0:	d005      	beq.n	80115ce <__lo0bits+0x5a>
 80115c2:	600b      	str	r3, [r1, #0]
 80115c4:	4770      	bx	lr
 80115c6:	4610      	mov	r0, r2
 80115c8:	e7e9      	b.n	801159e <__lo0bits+0x2a>
 80115ca:	2000      	movs	r0, #0
 80115cc:	4770      	bx	lr
 80115ce:	2020      	movs	r0, #32
 80115d0:	4770      	bx	lr
	...

080115d4 <__i2b>:
 80115d4:	b510      	push	{r4, lr}
 80115d6:	460c      	mov	r4, r1
 80115d8:	2101      	movs	r1, #1
 80115da:	f7ff feb9 	bl	8011350 <_Balloc>
 80115de:	4602      	mov	r2, r0
 80115e0:	b928      	cbnz	r0, 80115ee <__i2b+0x1a>
 80115e2:	4b05      	ldr	r3, [pc, #20]	; (80115f8 <__i2b+0x24>)
 80115e4:	4805      	ldr	r0, [pc, #20]	; (80115fc <__i2b+0x28>)
 80115e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80115ea:	f000 fe05 	bl	80121f8 <__assert_func>
 80115ee:	2301      	movs	r3, #1
 80115f0:	6144      	str	r4, [r0, #20]
 80115f2:	6103      	str	r3, [r0, #16]
 80115f4:	bd10      	pop	{r4, pc}
 80115f6:	bf00      	nop
 80115f8:	08014e97 	.word	0x08014e97
 80115fc:	08014f1e 	.word	0x08014f1e

08011600 <__multiply>:
 8011600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011604:	4691      	mov	r9, r2
 8011606:	690a      	ldr	r2, [r1, #16]
 8011608:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801160c:	429a      	cmp	r2, r3
 801160e:	bfb8      	it	lt
 8011610:	460b      	movlt	r3, r1
 8011612:	460c      	mov	r4, r1
 8011614:	bfbc      	itt	lt
 8011616:	464c      	movlt	r4, r9
 8011618:	4699      	movlt	r9, r3
 801161a:	6927      	ldr	r7, [r4, #16]
 801161c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011620:	68a3      	ldr	r3, [r4, #8]
 8011622:	6861      	ldr	r1, [r4, #4]
 8011624:	eb07 060a 	add.w	r6, r7, sl
 8011628:	42b3      	cmp	r3, r6
 801162a:	b085      	sub	sp, #20
 801162c:	bfb8      	it	lt
 801162e:	3101      	addlt	r1, #1
 8011630:	f7ff fe8e 	bl	8011350 <_Balloc>
 8011634:	b930      	cbnz	r0, 8011644 <__multiply+0x44>
 8011636:	4602      	mov	r2, r0
 8011638:	4b44      	ldr	r3, [pc, #272]	; (801174c <__multiply+0x14c>)
 801163a:	4845      	ldr	r0, [pc, #276]	; (8011750 <__multiply+0x150>)
 801163c:	f240 115d 	movw	r1, #349	; 0x15d
 8011640:	f000 fdda 	bl	80121f8 <__assert_func>
 8011644:	f100 0514 	add.w	r5, r0, #20
 8011648:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801164c:	462b      	mov	r3, r5
 801164e:	2200      	movs	r2, #0
 8011650:	4543      	cmp	r3, r8
 8011652:	d321      	bcc.n	8011698 <__multiply+0x98>
 8011654:	f104 0314 	add.w	r3, r4, #20
 8011658:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801165c:	f109 0314 	add.w	r3, r9, #20
 8011660:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011664:	9202      	str	r2, [sp, #8]
 8011666:	1b3a      	subs	r2, r7, r4
 8011668:	3a15      	subs	r2, #21
 801166a:	f022 0203 	bic.w	r2, r2, #3
 801166e:	3204      	adds	r2, #4
 8011670:	f104 0115 	add.w	r1, r4, #21
 8011674:	428f      	cmp	r7, r1
 8011676:	bf38      	it	cc
 8011678:	2204      	movcc	r2, #4
 801167a:	9201      	str	r2, [sp, #4]
 801167c:	9a02      	ldr	r2, [sp, #8]
 801167e:	9303      	str	r3, [sp, #12]
 8011680:	429a      	cmp	r2, r3
 8011682:	d80c      	bhi.n	801169e <__multiply+0x9e>
 8011684:	2e00      	cmp	r6, #0
 8011686:	dd03      	ble.n	8011690 <__multiply+0x90>
 8011688:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801168c:	2b00      	cmp	r3, #0
 801168e:	d05a      	beq.n	8011746 <__multiply+0x146>
 8011690:	6106      	str	r6, [r0, #16]
 8011692:	b005      	add	sp, #20
 8011694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011698:	f843 2b04 	str.w	r2, [r3], #4
 801169c:	e7d8      	b.n	8011650 <__multiply+0x50>
 801169e:	f8b3 a000 	ldrh.w	sl, [r3]
 80116a2:	f1ba 0f00 	cmp.w	sl, #0
 80116a6:	d024      	beq.n	80116f2 <__multiply+0xf2>
 80116a8:	f104 0e14 	add.w	lr, r4, #20
 80116ac:	46a9      	mov	r9, r5
 80116ae:	f04f 0c00 	mov.w	ip, #0
 80116b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80116b6:	f8d9 1000 	ldr.w	r1, [r9]
 80116ba:	fa1f fb82 	uxth.w	fp, r2
 80116be:	b289      	uxth	r1, r1
 80116c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80116c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80116c8:	f8d9 2000 	ldr.w	r2, [r9]
 80116cc:	4461      	add	r1, ip
 80116ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80116d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80116d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80116da:	b289      	uxth	r1, r1
 80116dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80116e0:	4577      	cmp	r7, lr
 80116e2:	f849 1b04 	str.w	r1, [r9], #4
 80116e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80116ea:	d8e2      	bhi.n	80116b2 <__multiply+0xb2>
 80116ec:	9a01      	ldr	r2, [sp, #4]
 80116ee:	f845 c002 	str.w	ip, [r5, r2]
 80116f2:	9a03      	ldr	r2, [sp, #12]
 80116f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80116f8:	3304      	adds	r3, #4
 80116fa:	f1b9 0f00 	cmp.w	r9, #0
 80116fe:	d020      	beq.n	8011742 <__multiply+0x142>
 8011700:	6829      	ldr	r1, [r5, #0]
 8011702:	f104 0c14 	add.w	ip, r4, #20
 8011706:	46ae      	mov	lr, r5
 8011708:	f04f 0a00 	mov.w	sl, #0
 801170c:	f8bc b000 	ldrh.w	fp, [ip]
 8011710:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011714:	fb09 220b 	mla	r2, r9, fp, r2
 8011718:	4492      	add	sl, r2
 801171a:	b289      	uxth	r1, r1
 801171c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011720:	f84e 1b04 	str.w	r1, [lr], #4
 8011724:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011728:	f8be 1000 	ldrh.w	r1, [lr]
 801172c:	0c12      	lsrs	r2, r2, #16
 801172e:	fb09 1102 	mla	r1, r9, r2, r1
 8011732:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011736:	4567      	cmp	r7, ip
 8011738:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801173c:	d8e6      	bhi.n	801170c <__multiply+0x10c>
 801173e:	9a01      	ldr	r2, [sp, #4]
 8011740:	50a9      	str	r1, [r5, r2]
 8011742:	3504      	adds	r5, #4
 8011744:	e79a      	b.n	801167c <__multiply+0x7c>
 8011746:	3e01      	subs	r6, #1
 8011748:	e79c      	b.n	8011684 <__multiply+0x84>
 801174a:	bf00      	nop
 801174c:	08014e97 	.word	0x08014e97
 8011750:	08014f1e 	.word	0x08014f1e

08011754 <__pow5mult>:
 8011754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011758:	4615      	mov	r5, r2
 801175a:	f012 0203 	ands.w	r2, r2, #3
 801175e:	4606      	mov	r6, r0
 8011760:	460f      	mov	r7, r1
 8011762:	d007      	beq.n	8011774 <__pow5mult+0x20>
 8011764:	4c25      	ldr	r4, [pc, #148]	; (80117fc <__pow5mult+0xa8>)
 8011766:	3a01      	subs	r2, #1
 8011768:	2300      	movs	r3, #0
 801176a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801176e:	f7ff fe51 	bl	8011414 <__multadd>
 8011772:	4607      	mov	r7, r0
 8011774:	10ad      	asrs	r5, r5, #2
 8011776:	d03d      	beq.n	80117f4 <__pow5mult+0xa0>
 8011778:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801177a:	b97c      	cbnz	r4, 801179c <__pow5mult+0x48>
 801177c:	2010      	movs	r0, #16
 801177e:	f7ff fdcd 	bl	801131c <malloc>
 8011782:	4602      	mov	r2, r0
 8011784:	6270      	str	r0, [r6, #36]	; 0x24
 8011786:	b928      	cbnz	r0, 8011794 <__pow5mult+0x40>
 8011788:	4b1d      	ldr	r3, [pc, #116]	; (8011800 <__pow5mult+0xac>)
 801178a:	481e      	ldr	r0, [pc, #120]	; (8011804 <__pow5mult+0xb0>)
 801178c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011790:	f000 fd32 	bl	80121f8 <__assert_func>
 8011794:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011798:	6004      	str	r4, [r0, #0]
 801179a:	60c4      	str	r4, [r0, #12]
 801179c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80117a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117a4:	b94c      	cbnz	r4, 80117ba <__pow5mult+0x66>
 80117a6:	f240 2171 	movw	r1, #625	; 0x271
 80117aa:	4630      	mov	r0, r6
 80117ac:	f7ff ff12 	bl	80115d4 <__i2b>
 80117b0:	2300      	movs	r3, #0
 80117b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80117b6:	4604      	mov	r4, r0
 80117b8:	6003      	str	r3, [r0, #0]
 80117ba:	f04f 0900 	mov.w	r9, #0
 80117be:	07eb      	lsls	r3, r5, #31
 80117c0:	d50a      	bpl.n	80117d8 <__pow5mult+0x84>
 80117c2:	4639      	mov	r1, r7
 80117c4:	4622      	mov	r2, r4
 80117c6:	4630      	mov	r0, r6
 80117c8:	f7ff ff1a 	bl	8011600 <__multiply>
 80117cc:	4639      	mov	r1, r7
 80117ce:	4680      	mov	r8, r0
 80117d0:	4630      	mov	r0, r6
 80117d2:	f7ff fdfd 	bl	80113d0 <_Bfree>
 80117d6:	4647      	mov	r7, r8
 80117d8:	106d      	asrs	r5, r5, #1
 80117da:	d00b      	beq.n	80117f4 <__pow5mult+0xa0>
 80117dc:	6820      	ldr	r0, [r4, #0]
 80117de:	b938      	cbnz	r0, 80117f0 <__pow5mult+0x9c>
 80117e0:	4622      	mov	r2, r4
 80117e2:	4621      	mov	r1, r4
 80117e4:	4630      	mov	r0, r6
 80117e6:	f7ff ff0b 	bl	8011600 <__multiply>
 80117ea:	6020      	str	r0, [r4, #0]
 80117ec:	f8c0 9000 	str.w	r9, [r0]
 80117f0:	4604      	mov	r4, r0
 80117f2:	e7e4      	b.n	80117be <__pow5mult+0x6a>
 80117f4:	4638      	mov	r0, r7
 80117f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117fa:	bf00      	nop
 80117fc:	08015070 	.word	0x08015070
 8011800:	08014e25 	.word	0x08014e25
 8011804:	08014f1e 	.word	0x08014f1e

08011808 <__lshift>:
 8011808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801180c:	460c      	mov	r4, r1
 801180e:	6849      	ldr	r1, [r1, #4]
 8011810:	6923      	ldr	r3, [r4, #16]
 8011812:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011816:	68a3      	ldr	r3, [r4, #8]
 8011818:	4607      	mov	r7, r0
 801181a:	4691      	mov	r9, r2
 801181c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011820:	f108 0601 	add.w	r6, r8, #1
 8011824:	42b3      	cmp	r3, r6
 8011826:	db0b      	blt.n	8011840 <__lshift+0x38>
 8011828:	4638      	mov	r0, r7
 801182a:	f7ff fd91 	bl	8011350 <_Balloc>
 801182e:	4605      	mov	r5, r0
 8011830:	b948      	cbnz	r0, 8011846 <__lshift+0x3e>
 8011832:	4602      	mov	r2, r0
 8011834:	4b2a      	ldr	r3, [pc, #168]	; (80118e0 <__lshift+0xd8>)
 8011836:	482b      	ldr	r0, [pc, #172]	; (80118e4 <__lshift+0xdc>)
 8011838:	f240 11d9 	movw	r1, #473	; 0x1d9
 801183c:	f000 fcdc 	bl	80121f8 <__assert_func>
 8011840:	3101      	adds	r1, #1
 8011842:	005b      	lsls	r3, r3, #1
 8011844:	e7ee      	b.n	8011824 <__lshift+0x1c>
 8011846:	2300      	movs	r3, #0
 8011848:	f100 0114 	add.w	r1, r0, #20
 801184c:	f100 0210 	add.w	r2, r0, #16
 8011850:	4618      	mov	r0, r3
 8011852:	4553      	cmp	r3, sl
 8011854:	db37      	blt.n	80118c6 <__lshift+0xbe>
 8011856:	6920      	ldr	r0, [r4, #16]
 8011858:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801185c:	f104 0314 	add.w	r3, r4, #20
 8011860:	f019 091f 	ands.w	r9, r9, #31
 8011864:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011868:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801186c:	d02f      	beq.n	80118ce <__lshift+0xc6>
 801186e:	f1c9 0e20 	rsb	lr, r9, #32
 8011872:	468a      	mov	sl, r1
 8011874:	f04f 0c00 	mov.w	ip, #0
 8011878:	681a      	ldr	r2, [r3, #0]
 801187a:	fa02 f209 	lsl.w	r2, r2, r9
 801187e:	ea42 020c 	orr.w	r2, r2, ip
 8011882:	f84a 2b04 	str.w	r2, [sl], #4
 8011886:	f853 2b04 	ldr.w	r2, [r3], #4
 801188a:	4298      	cmp	r0, r3
 801188c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011890:	d8f2      	bhi.n	8011878 <__lshift+0x70>
 8011892:	1b03      	subs	r3, r0, r4
 8011894:	3b15      	subs	r3, #21
 8011896:	f023 0303 	bic.w	r3, r3, #3
 801189a:	3304      	adds	r3, #4
 801189c:	f104 0215 	add.w	r2, r4, #21
 80118a0:	4290      	cmp	r0, r2
 80118a2:	bf38      	it	cc
 80118a4:	2304      	movcc	r3, #4
 80118a6:	f841 c003 	str.w	ip, [r1, r3]
 80118aa:	f1bc 0f00 	cmp.w	ip, #0
 80118ae:	d001      	beq.n	80118b4 <__lshift+0xac>
 80118b0:	f108 0602 	add.w	r6, r8, #2
 80118b4:	3e01      	subs	r6, #1
 80118b6:	4638      	mov	r0, r7
 80118b8:	612e      	str	r6, [r5, #16]
 80118ba:	4621      	mov	r1, r4
 80118bc:	f7ff fd88 	bl	80113d0 <_Bfree>
 80118c0:	4628      	mov	r0, r5
 80118c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80118ca:	3301      	adds	r3, #1
 80118cc:	e7c1      	b.n	8011852 <__lshift+0x4a>
 80118ce:	3904      	subs	r1, #4
 80118d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80118d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80118d8:	4298      	cmp	r0, r3
 80118da:	d8f9      	bhi.n	80118d0 <__lshift+0xc8>
 80118dc:	e7ea      	b.n	80118b4 <__lshift+0xac>
 80118de:	bf00      	nop
 80118e0:	08014e97 	.word	0x08014e97
 80118e4:	08014f1e 	.word	0x08014f1e

080118e8 <__mcmp>:
 80118e8:	b530      	push	{r4, r5, lr}
 80118ea:	6902      	ldr	r2, [r0, #16]
 80118ec:	690c      	ldr	r4, [r1, #16]
 80118ee:	1b12      	subs	r2, r2, r4
 80118f0:	d10e      	bne.n	8011910 <__mcmp+0x28>
 80118f2:	f100 0314 	add.w	r3, r0, #20
 80118f6:	3114      	adds	r1, #20
 80118f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80118fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011900:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011904:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011908:	42a5      	cmp	r5, r4
 801190a:	d003      	beq.n	8011914 <__mcmp+0x2c>
 801190c:	d305      	bcc.n	801191a <__mcmp+0x32>
 801190e:	2201      	movs	r2, #1
 8011910:	4610      	mov	r0, r2
 8011912:	bd30      	pop	{r4, r5, pc}
 8011914:	4283      	cmp	r3, r0
 8011916:	d3f3      	bcc.n	8011900 <__mcmp+0x18>
 8011918:	e7fa      	b.n	8011910 <__mcmp+0x28>
 801191a:	f04f 32ff 	mov.w	r2, #4294967295
 801191e:	e7f7      	b.n	8011910 <__mcmp+0x28>

08011920 <__mdiff>:
 8011920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011924:	460c      	mov	r4, r1
 8011926:	4606      	mov	r6, r0
 8011928:	4611      	mov	r1, r2
 801192a:	4620      	mov	r0, r4
 801192c:	4690      	mov	r8, r2
 801192e:	f7ff ffdb 	bl	80118e8 <__mcmp>
 8011932:	1e05      	subs	r5, r0, #0
 8011934:	d110      	bne.n	8011958 <__mdiff+0x38>
 8011936:	4629      	mov	r1, r5
 8011938:	4630      	mov	r0, r6
 801193a:	f7ff fd09 	bl	8011350 <_Balloc>
 801193e:	b930      	cbnz	r0, 801194e <__mdiff+0x2e>
 8011940:	4b3a      	ldr	r3, [pc, #232]	; (8011a2c <__mdiff+0x10c>)
 8011942:	4602      	mov	r2, r0
 8011944:	f240 2132 	movw	r1, #562	; 0x232
 8011948:	4839      	ldr	r0, [pc, #228]	; (8011a30 <__mdiff+0x110>)
 801194a:	f000 fc55 	bl	80121f8 <__assert_func>
 801194e:	2301      	movs	r3, #1
 8011950:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011958:	bfa4      	itt	ge
 801195a:	4643      	movge	r3, r8
 801195c:	46a0      	movge	r8, r4
 801195e:	4630      	mov	r0, r6
 8011960:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011964:	bfa6      	itte	ge
 8011966:	461c      	movge	r4, r3
 8011968:	2500      	movge	r5, #0
 801196a:	2501      	movlt	r5, #1
 801196c:	f7ff fcf0 	bl	8011350 <_Balloc>
 8011970:	b920      	cbnz	r0, 801197c <__mdiff+0x5c>
 8011972:	4b2e      	ldr	r3, [pc, #184]	; (8011a2c <__mdiff+0x10c>)
 8011974:	4602      	mov	r2, r0
 8011976:	f44f 7110 	mov.w	r1, #576	; 0x240
 801197a:	e7e5      	b.n	8011948 <__mdiff+0x28>
 801197c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011980:	6926      	ldr	r6, [r4, #16]
 8011982:	60c5      	str	r5, [r0, #12]
 8011984:	f104 0914 	add.w	r9, r4, #20
 8011988:	f108 0514 	add.w	r5, r8, #20
 801198c:	f100 0e14 	add.w	lr, r0, #20
 8011990:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011994:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011998:	f108 0210 	add.w	r2, r8, #16
 801199c:	46f2      	mov	sl, lr
 801199e:	2100      	movs	r1, #0
 80119a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80119a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80119a8:	fa1f f883 	uxth.w	r8, r3
 80119ac:	fa11 f18b 	uxtah	r1, r1, fp
 80119b0:	0c1b      	lsrs	r3, r3, #16
 80119b2:	eba1 0808 	sub.w	r8, r1, r8
 80119b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80119ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80119be:	fa1f f888 	uxth.w	r8, r8
 80119c2:	1419      	asrs	r1, r3, #16
 80119c4:	454e      	cmp	r6, r9
 80119c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80119ca:	f84a 3b04 	str.w	r3, [sl], #4
 80119ce:	d8e7      	bhi.n	80119a0 <__mdiff+0x80>
 80119d0:	1b33      	subs	r3, r6, r4
 80119d2:	3b15      	subs	r3, #21
 80119d4:	f023 0303 	bic.w	r3, r3, #3
 80119d8:	3304      	adds	r3, #4
 80119da:	3415      	adds	r4, #21
 80119dc:	42a6      	cmp	r6, r4
 80119de:	bf38      	it	cc
 80119e0:	2304      	movcc	r3, #4
 80119e2:	441d      	add	r5, r3
 80119e4:	4473      	add	r3, lr
 80119e6:	469e      	mov	lr, r3
 80119e8:	462e      	mov	r6, r5
 80119ea:	4566      	cmp	r6, ip
 80119ec:	d30e      	bcc.n	8011a0c <__mdiff+0xec>
 80119ee:	f10c 0203 	add.w	r2, ip, #3
 80119f2:	1b52      	subs	r2, r2, r5
 80119f4:	f022 0203 	bic.w	r2, r2, #3
 80119f8:	3d03      	subs	r5, #3
 80119fa:	45ac      	cmp	ip, r5
 80119fc:	bf38      	it	cc
 80119fe:	2200      	movcc	r2, #0
 8011a00:	441a      	add	r2, r3
 8011a02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011a06:	b17b      	cbz	r3, 8011a28 <__mdiff+0x108>
 8011a08:	6107      	str	r7, [r0, #16]
 8011a0a:	e7a3      	b.n	8011954 <__mdiff+0x34>
 8011a0c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011a10:	fa11 f288 	uxtah	r2, r1, r8
 8011a14:	1414      	asrs	r4, r2, #16
 8011a16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011a1a:	b292      	uxth	r2, r2
 8011a1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011a20:	f84e 2b04 	str.w	r2, [lr], #4
 8011a24:	1421      	asrs	r1, r4, #16
 8011a26:	e7e0      	b.n	80119ea <__mdiff+0xca>
 8011a28:	3f01      	subs	r7, #1
 8011a2a:	e7ea      	b.n	8011a02 <__mdiff+0xe2>
 8011a2c:	08014e97 	.word	0x08014e97
 8011a30:	08014f1e 	.word	0x08014f1e

08011a34 <__ulp>:
 8011a34:	b082      	sub	sp, #8
 8011a36:	ed8d 0b00 	vstr	d0, [sp]
 8011a3a:	9b01      	ldr	r3, [sp, #4]
 8011a3c:	4912      	ldr	r1, [pc, #72]	; (8011a88 <__ulp+0x54>)
 8011a3e:	4019      	ands	r1, r3
 8011a40:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011a44:	2900      	cmp	r1, #0
 8011a46:	dd05      	ble.n	8011a54 <__ulp+0x20>
 8011a48:	2200      	movs	r2, #0
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	ec43 2b10 	vmov	d0, r2, r3
 8011a50:	b002      	add	sp, #8
 8011a52:	4770      	bx	lr
 8011a54:	4249      	negs	r1, r1
 8011a56:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011a5a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011a5e:	f04f 0200 	mov.w	r2, #0
 8011a62:	f04f 0300 	mov.w	r3, #0
 8011a66:	da04      	bge.n	8011a72 <__ulp+0x3e>
 8011a68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011a6c:	fa41 f300 	asr.w	r3, r1, r0
 8011a70:	e7ec      	b.n	8011a4c <__ulp+0x18>
 8011a72:	f1a0 0114 	sub.w	r1, r0, #20
 8011a76:	291e      	cmp	r1, #30
 8011a78:	bfda      	itte	le
 8011a7a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011a7e:	fa20 f101 	lsrle.w	r1, r0, r1
 8011a82:	2101      	movgt	r1, #1
 8011a84:	460a      	mov	r2, r1
 8011a86:	e7e1      	b.n	8011a4c <__ulp+0x18>
 8011a88:	7ff00000 	.word	0x7ff00000

08011a8c <__b2d>:
 8011a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a8e:	6905      	ldr	r5, [r0, #16]
 8011a90:	f100 0714 	add.w	r7, r0, #20
 8011a94:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011a98:	1f2e      	subs	r6, r5, #4
 8011a9a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f7ff fd48 	bl	8011534 <__hi0bits>
 8011aa4:	f1c0 0320 	rsb	r3, r0, #32
 8011aa8:	280a      	cmp	r0, #10
 8011aaa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011b28 <__b2d+0x9c>
 8011aae:	600b      	str	r3, [r1, #0]
 8011ab0:	dc14      	bgt.n	8011adc <__b2d+0x50>
 8011ab2:	f1c0 0e0b 	rsb	lr, r0, #11
 8011ab6:	fa24 f10e 	lsr.w	r1, r4, lr
 8011aba:	42b7      	cmp	r7, r6
 8011abc:	ea41 030c 	orr.w	r3, r1, ip
 8011ac0:	bf34      	ite	cc
 8011ac2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011ac6:	2100      	movcs	r1, #0
 8011ac8:	3015      	adds	r0, #21
 8011aca:	fa04 f000 	lsl.w	r0, r4, r0
 8011ace:	fa21 f10e 	lsr.w	r1, r1, lr
 8011ad2:	ea40 0201 	orr.w	r2, r0, r1
 8011ad6:	ec43 2b10 	vmov	d0, r2, r3
 8011ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011adc:	42b7      	cmp	r7, r6
 8011ade:	bf3a      	itte	cc
 8011ae0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011ae4:	f1a5 0608 	subcc.w	r6, r5, #8
 8011ae8:	2100      	movcs	r1, #0
 8011aea:	380b      	subs	r0, #11
 8011aec:	d017      	beq.n	8011b1e <__b2d+0x92>
 8011aee:	f1c0 0c20 	rsb	ip, r0, #32
 8011af2:	fa04 f500 	lsl.w	r5, r4, r0
 8011af6:	42be      	cmp	r6, r7
 8011af8:	fa21 f40c 	lsr.w	r4, r1, ip
 8011afc:	ea45 0504 	orr.w	r5, r5, r4
 8011b00:	bf8c      	ite	hi
 8011b02:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011b06:	2400      	movls	r4, #0
 8011b08:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011b0c:	fa01 f000 	lsl.w	r0, r1, r0
 8011b10:	fa24 f40c 	lsr.w	r4, r4, ip
 8011b14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011b18:	ea40 0204 	orr.w	r2, r0, r4
 8011b1c:	e7db      	b.n	8011ad6 <__b2d+0x4a>
 8011b1e:	ea44 030c 	orr.w	r3, r4, ip
 8011b22:	460a      	mov	r2, r1
 8011b24:	e7d7      	b.n	8011ad6 <__b2d+0x4a>
 8011b26:	bf00      	nop
 8011b28:	3ff00000 	.word	0x3ff00000

08011b2c <__d2b>:
 8011b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b30:	4689      	mov	r9, r1
 8011b32:	2101      	movs	r1, #1
 8011b34:	ec57 6b10 	vmov	r6, r7, d0
 8011b38:	4690      	mov	r8, r2
 8011b3a:	f7ff fc09 	bl	8011350 <_Balloc>
 8011b3e:	4604      	mov	r4, r0
 8011b40:	b930      	cbnz	r0, 8011b50 <__d2b+0x24>
 8011b42:	4602      	mov	r2, r0
 8011b44:	4b25      	ldr	r3, [pc, #148]	; (8011bdc <__d2b+0xb0>)
 8011b46:	4826      	ldr	r0, [pc, #152]	; (8011be0 <__d2b+0xb4>)
 8011b48:	f240 310a 	movw	r1, #778	; 0x30a
 8011b4c:	f000 fb54 	bl	80121f8 <__assert_func>
 8011b50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011b54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011b58:	bb35      	cbnz	r5, 8011ba8 <__d2b+0x7c>
 8011b5a:	2e00      	cmp	r6, #0
 8011b5c:	9301      	str	r3, [sp, #4]
 8011b5e:	d028      	beq.n	8011bb2 <__d2b+0x86>
 8011b60:	4668      	mov	r0, sp
 8011b62:	9600      	str	r6, [sp, #0]
 8011b64:	f7ff fd06 	bl	8011574 <__lo0bits>
 8011b68:	9900      	ldr	r1, [sp, #0]
 8011b6a:	b300      	cbz	r0, 8011bae <__d2b+0x82>
 8011b6c:	9a01      	ldr	r2, [sp, #4]
 8011b6e:	f1c0 0320 	rsb	r3, r0, #32
 8011b72:	fa02 f303 	lsl.w	r3, r2, r3
 8011b76:	430b      	orrs	r3, r1
 8011b78:	40c2      	lsrs	r2, r0
 8011b7a:	6163      	str	r3, [r4, #20]
 8011b7c:	9201      	str	r2, [sp, #4]
 8011b7e:	9b01      	ldr	r3, [sp, #4]
 8011b80:	61a3      	str	r3, [r4, #24]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	bf14      	ite	ne
 8011b86:	2202      	movne	r2, #2
 8011b88:	2201      	moveq	r2, #1
 8011b8a:	6122      	str	r2, [r4, #16]
 8011b8c:	b1d5      	cbz	r5, 8011bc4 <__d2b+0x98>
 8011b8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011b92:	4405      	add	r5, r0
 8011b94:	f8c9 5000 	str.w	r5, [r9]
 8011b98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011b9c:	f8c8 0000 	str.w	r0, [r8]
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	b003      	add	sp, #12
 8011ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011bac:	e7d5      	b.n	8011b5a <__d2b+0x2e>
 8011bae:	6161      	str	r1, [r4, #20]
 8011bb0:	e7e5      	b.n	8011b7e <__d2b+0x52>
 8011bb2:	a801      	add	r0, sp, #4
 8011bb4:	f7ff fcde 	bl	8011574 <__lo0bits>
 8011bb8:	9b01      	ldr	r3, [sp, #4]
 8011bba:	6163      	str	r3, [r4, #20]
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	6122      	str	r2, [r4, #16]
 8011bc0:	3020      	adds	r0, #32
 8011bc2:	e7e3      	b.n	8011b8c <__d2b+0x60>
 8011bc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011bc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011bcc:	f8c9 0000 	str.w	r0, [r9]
 8011bd0:	6918      	ldr	r0, [r3, #16]
 8011bd2:	f7ff fcaf 	bl	8011534 <__hi0bits>
 8011bd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011bda:	e7df      	b.n	8011b9c <__d2b+0x70>
 8011bdc:	08014e97 	.word	0x08014e97
 8011be0:	08014f1e 	.word	0x08014f1e

08011be4 <__ratio>:
 8011be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be8:	4688      	mov	r8, r1
 8011bea:	4669      	mov	r1, sp
 8011bec:	4681      	mov	r9, r0
 8011bee:	f7ff ff4d 	bl	8011a8c <__b2d>
 8011bf2:	a901      	add	r1, sp, #4
 8011bf4:	4640      	mov	r0, r8
 8011bf6:	ec55 4b10 	vmov	r4, r5, d0
 8011bfa:	f7ff ff47 	bl	8011a8c <__b2d>
 8011bfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011c06:	eba3 0c02 	sub.w	ip, r3, r2
 8011c0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011c0e:	1a9b      	subs	r3, r3, r2
 8011c10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011c14:	ec51 0b10 	vmov	r0, r1, d0
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	bfd6      	itet	le
 8011c1c:	460a      	movle	r2, r1
 8011c1e:	462a      	movgt	r2, r5
 8011c20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011c24:	468b      	mov	fp, r1
 8011c26:	462f      	mov	r7, r5
 8011c28:	bfd4      	ite	le
 8011c2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011c2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011c32:	4620      	mov	r0, r4
 8011c34:	ee10 2a10 	vmov	r2, s0
 8011c38:	465b      	mov	r3, fp
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	f7ee fe06 	bl	800084c <__aeabi_ddiv>
 8011c40:	ec41 0b10 	vmov	d0, r0, r1
 8011c44:	b003      	add	sp, #12
 8011c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c4a <__copybits>:
 8011c4a:	3901      	subs	r1, #1
 8011c4c:	b570      	push	{r4, r5, r6, lr}
 8011c4e:	1149      	asrs	r1, r1, #5
 8011c50:	6914      	ldr	r4, [r2, #16]
 8011c52:	3101      	adds	r1, #1
 8011c54:	f102 0314 	add.w	r3, r2, #20
 8011c58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011c5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011c60:	1f05      	subs	r5, r0, #4
 8011c62:	42a3      	cmp	r3, r4
 8011c64:	d30c      	bcc.n	8011c80 <__copybits+0x36>
 8011c66:	1aa3      	subs	r3, r4, r2
 8011c68:	3b11      	subs	r3, #17
 8011c6a:	f023 0303 	bic.w	r3, r3, #3
 8011c6e:	3211      	adds	r2, #17
 8011c70:	42a2      	cmp	r2, r4
 8011c72:	bf88      	it	hi
 8011c74:	2300      	movhi	r3, #0
 8011c76:	4418      	add	r0, r3
 8011c78:	2300      	movs	r3, #0
 8011c7a:	4288      	cmp	r0, r1
 8011c7c:	d305      	bcc.n	8011c8a <__copybits+0x40>
 8011c7e:	bd70      	pop	{r4, r5, r6, pc}
 8011c80:	f853 6b04 	ldr.w	r6, [r3], #4
 8011c84:	f845 6f04 	str.w	r6, [r5, #4]!
 8011c88:	e7eb      	b.n	8011c62 <__copybits+0x18>
 8011c8a:	f840 3b04 	str.w	r3, [r0], #4
 8011c8e:	e7f4      	b.n	8011c7a <__copybits+0x30>

08011c90 <__any_on>:
 8011c90:	f100 0214 	add.w	r2, r0, #20
 8011c94:	6900      	ldr	r0, [r0, #16]
 8011c96:	114b      	asrs	r3, r1, #5
 8011c98:	4298      	cmp	r0, r3
 8011c9a:	b510      	push	{r4, lr}
 8011c9c:	db11      	blt.n	8011cc2 <__any_on+0x32>
 8011c9e:	dd0a      	ble.n	8011cb6 <__any_on+0x26>
 8011ca0:	f011 011f 	ands.w	r1, r1, #31
 8011ca4:	d007      	beq.n	8011cb6 <__any_on+0x26>
 8011ca6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011caa:	fa24 f001 	lsr.w	r0, r4, r1
 8011cae:	fa00 f101 	lsl.w	r1, r0, r1
 8011cb2:	428c      	cmp	r4, r1
 8011cb4:	d10b      	bne.n	8011cce <__any_on+0x3e>
 8011cb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d803      	bhi.n	8011cc6 <__any_on+0x36>
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	bd10      	pop	{r4, pc}
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	e7f7      	b.n	8011cb6 <__any_on+0x26>
 8011cc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011cca:	2900      	cmp	r1, #0
 8011ccc:	d0f5      	beq.n	8011cba <__any_on+0x2a>
 8011cce:	2001      	movs	r0, #1
 8011cd0:	e7f6      	b.n	8011cc0 <__any_on+0x30>

08011cd2 <_calloc_r>:
 8011cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cd4:	fba1 2402 	umull	r2, r4, r1, r2
 8011cd8:	b94c      	cbnz	r4, 8011cee <_calloc_r+0x1c>
 8011cda:	4611      	mov	r1, r2
 8011cdc:	9201      	str	r2, [sp, #4]
 8011cde:	f000 f87b 	bl	8011dd8 <_malloc_r>
 8011ce2:	9a01      	ldr	r2, [sp, #4]
 8011ce4:	4605      	mov	r5, r0
 8011ce6:	b930      	cbnz	r0, 8011cf6 <_calloc_r+0x24>
 8011ce8:	4628      	mov	r0, r5
 8011cea:	b003      	add	sp, #12
 8011cec:	bd30      	pop	{r4, r5, pc}
 8011cee:	220c      	movs	r2, #12
 8011cf0:	6002      	str	r2, [r0, #0]
 8011cf2:	2500      	movs	r5, #0
 8011cf4:	e7f8      	b.n	8011ce8 <_calloc_r+0x16>
 8011cf6:	4621      	mov	r1, r4
 8011cf8:	f7fc fe08 	bl	800e90c <memset>
 8011cfc:	e7f4      	b.n	8011ce8 <_calloc_r+0x16>
	...

08011d00 <_free_r>:
 8011d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d02:	2900      	cmp	r1, #0
 8011d04:	d044      	beq.n	8011d90 <_free_r+0x90>
 8011d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d0a:	9001      	str	r0, [sp, #4]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	f1a1 0404 	sub.w	r4, r1, #4
 8011d12:	bfb8      	it	lt
 8011d14:	18e4      	addlt	r4, r4, r3
 8011d16:	f000 fa9f 	bl	8012258 <__malloc_lock>
 8011d1a:	4a1e      	ldr	r2, [pc, #120]	; (8011d94 <_free_r+0x94>)
 8011d1c:	9801      	ldr	r0, [sp, #4]
 8011d1e:	6813      	ldr	r3, [r2, #0]
 8011d20:	b933      	cbnz	r3, 8011d30 <_free_r+0x30>
 8011d22:	6063      	str	r3, [r4, #4]
 8011d24:	6014      	str	r4, [r2, #0]
 8011d26:	b003      	add	sp, #12
 8011d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d2c:	f000 ba9a 	b.w	8012264 <__malloc_unlock>
 8011d30:	42a3      	cmp	r3, r4
 8011d32:	d908      	bls.n	8011d46 <_free_r+0x46>
 8011d34:	6825      	ldr	r5, [r4, #0]
 8011d36:	1961      	adds	r1, r4, r5
 8011d38:	428b      	cmp	r3, r1
 8011d3a:	bf01      	itttt	eq
 8011d3c:	6819      	ldreq	r1, [r3, #0]
 8011d3e:	685b      	ldreq	r3, [r3, #4]
 8011d40:	1949      	addeq	r1, r1, r5
 8011d42:	6021      	streq	r1, [r4, #0]
 8011d44:	e7ed      	b.n	8011d22 <_free_r+0x22>
 8011d46:	461a      	mov	r2, r3
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	b10b      	cbz	r3, 8011d50 <_free_r+0x50>
 8011d4c:	42a3      	cmp	r3, r4
 8011d4e:	d9fa      	bls.n	8011d46 <_free_r+0x46>
 8011d50:	6811      	ldr	r1, [r2, #0]
 8011d52:	1855      	adds	r5, r2, r1
 8011d54:	42a5      	cmp	r5, r4
 8011d56:	d10b      	bne.n	8011d70 <_free_r+0x70>
 8011d58:	6824      	ldr	r4, [r4, #0]
 8011d5a:	4421      	add	r1, r4
 8011d5c:	1854      	adds	r4, r2, r1
 8011d5e:	42a3      	cmp	r3, r4
 8011d60:	6011      	str	r1, [r2, #0]
 8011d62:	d1e0      	bne.n	8011d26 <_free_r+0x26>
 8011d64:	681c      	ldr	r4, [r3, #0]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	6053      	str	r3, [r2, #4]
 8011d6a:	4421      	add	r1, r4
 8011d6c:	6011      	str	r1, [r2, #0]
 8011d6e:	e7da      	b.n	8011d26 <_free_r+0x26>
 8011d70:	d902      	bls.n	8011d78 <_free_r+0x78>
 8011d72:	230c      	movs	r3, #12
 8011d74:	6003      	str	r3, [r0, #0]
 8011d76:	e7d6      	b.n	8011d26 <_free_r+0x26>
 8011d78:	6825      	ldr	r5, [r4, #0]
 8011d7a:	1961      	adds	r1, r4, r5
 8011d7c:	428b      	cmp	r3, r1
 8011d7e:	bf04      	itt	eq
 8011d80:	6819      	ldreq	r1, [r3, #0]
 8011d82:	685b      	ldreq	r3, [r3, #4]
 8011d84:	6063      	str	r3, [r4, #4]
 8011d86:	bf04      	itt	eq
 8011d88:	1949      	addeq	r1, r1, r5
 8011d8a:	6021      	streq	r1, [r4, #0]
 8011d8c:	6054      	str	r4, [r2, #4]
 8011d8e:	e7ca      	b.n	8011d26 <_free_r+0x26>
 8011d90:	b003      	add	sp, #12
 8011d92:	bd30      	pop	{r4, r5, pc}
 8011d94:	20003944 	.word	0x20003944

08011d98 <sbrk_aligned>:
 8011d98:	b570      	push	{r4, r5, r6, lr}
 8011d9a:	4e0e      	ldr	r6, [pc, #56]	; (8011dd4 <sbrk_aligned+0x3c>)
 8011d9c:	460c      	mov	r4, r1
 8011d9e:	6831      	ldr	r1, [r6, #0]
 8011da0:	4605      	mov	r5, r0
 8011da2:	b911      	cbnz	r1, 8011daa <sbrk_aligned+0x12>
 8011da4:	f000 f9f0 	bl	8012188 <_sbrk_r>
 8011da8:	6030      	str	r0, [r6, #0]
 8011daa:	4621      	mov	r1, r4
 8011dac:	4628      	mov	r0, r5
 8011dae:	f000 f9eb 	bl	8012188 <_sbrk_r>
 8011db2:	1c43      	adds	r3, r0, #1
 8011db4:	d00a      	beq.n	8011dcc <sbrk_aligned+0x34>
 8011db6:	1cc4      	adds	r4, r0, #3
 8011db8:	f024 0403 	bic.w	r4, r4, #3
 8011dbc:	42a0      	cmp	r0, r4
 8011dbe:	d007      	beq.n	8011dd0 <sbrk_aligned+0x38>
 8011dc0:	1a21      	subs	r1, r4, r0
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	f000 f9e0 	bl	8012188 <_sbrk_r>
 8011dc8:	3001      	adds	r0, #1
 8011dca:	d101      	bne.n	8011dd0 <sbrk_aligned+0x38>
 8011dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	bd70      	pop	{r4, r5, r6, pc}
 8011dd4:	20003948 	.word	0x20003948

08011dd8 <_malloc_r>:
 8011dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ddc:	1ccd      	adds	r5, r1, #3
 8011dde:	f025 0503 	bic.w	r5, r5, #3
 8011de2:	3508      	adds	r5, #8
 8011de4:	2d0c      	cmp	r5, #12
 8011de6:	bf38      	it	cc
 8011de8:	250c      	movcc	r5, #12
 8011dea:	2d00      	cmp	r5, #0
 8011dec:	4607      	mov	r7, r0
 8011dee:	db01      	blt.n	8011df4 <_malloc_r+0x1c>
 8011df0:	42a9      	cmp	r1, r5
 8011df2:	d905      	bls.n	8011e00 <_malloc_r+0x28>
 8011df4:	230c      	movs	r3, #12
 8011df6:	603b      	str	r3, [r7, #0]
 8011df8:	2600      	movs	r6, #0
 8011dfa:	4630      	mov	r0, r6
 8011dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e00:	4e2e      	ldr	r6, [pc, #184]	; (8011ebc <_malloc_r+0xe4>)
 8011e02:	f000 fa29 	bl	8012258 <__malloc_lock>
 8011e06:	6833      	ldr	r3, [r6, #0]
 8011e08:	461c      	mov	r4, r3
 8011e0a:	bb34      	cbnz	r4, 8011e5a <_malloc_r+0x82>
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	4638      	mov	r0, r7
 8011e10:	f7ff ffc2 	bl	8011d98 <sbrk_aligned>
 8011e14:	1c43      	adds	r3, r0, #1
 8011e16:	4604      	mov	r4, r0
 8011e18:	d14d      	bne.n	8011eb6 <_malloc_r+0xde>
 8011e1a:	6834      	ldr	r4, [r6, #0]
 8011e1c:	4626      	mov	r6, r4
 8011e1e:	2e00      	cmp	r6, #0
 8011e20:	d140      	bne.n	8011ea4 <_malloc_r+0xcc>
 8011e22:	6823      	ldr	r3, [r4, #0]
 8011e24:	4631      	mov	r1, r6
 8011e26:	4638      	mov	r0, r7
 8011e28:	eb04 0803 	add.w	r8, r4, r3
 8011e2c:	f000 f9ac 	bl	8012188 <_sbrk_r>
 8011e30:	4580      	cmp	r8, r0
 8011e32:	d13a      	bne.n	8011eaa <_malloc_r+0xd2>
 8011e34:	6821      	ldr	r1, [r4, #0]
 8011e36:	3503      	adds	r5, #3
 8011e38:	1a6d      	subs	r5, r5, r1
 8011e3a:	f025 0503 	bic.w	r5, r5, #3
 8011e3e:	3508      	adds	r5, #8
 8011e40:	2d0c      	cmp	r5, #12
 8011e42:	bf38      	it	cc
 8011e44:	250c      	movcc	r5, #12
 8011e46:	4629      	mov	r1, r5
 8011e48:	4638      	mov	r0, r7
 8011e4a:	f7ff ffa5 	bl	8011d98 <sbrk_aligned>
 8011e4e:	3001      	adds	r0, #1
 8011e50:	d02b      	beq.n	8011eaa <_malloc_r+0xd2>
 8011e52:	6823      	ldr	r3, [r4, #0]
 8011e54:	442b      	add	r3, r5
 8011e56:	6023      	str	r3, [r4, #0]
 8011e58:	e00e      	b.n	8011e78 <_malloc_r+0xa0>
 8011e5a:	6822      	ldr	r2, [r4, #0]
 8011e5c:	1b52      	subs	r2, r2, r5
 8011e5e:	d41e      	bmi.n	8011e9e <_malloc_r+0xc6>
 8011e60:	2a0b      	cmp	r2, #11
 8011e62:	d916      	bls.n	8011e92 <_malloc_r+0xba>
 8011e64:	1961      	adds	r1, r4, r5
 8011e66:	42a3      	cmp	r3, r4
 8011e68:	6025      	str	r5, [r4, #0]
 8011e6a:	bf18      	it	ne
 8011e6c:	6059      	strne	r1, [r3, #4]
 8011e6e:	6863      	ldr	r3, [r4, #4]
 8011e70:	bf08      	it	eq
 8011e72:	6031      	streq	r1, [r6, #0]
 8011e74:	5162      	str	r2, [r4, r5]
 8011e76:	604b      	str	r3, [r1, #4]
 8011e78:	4638      	mov	r0, r7
 8011e7a:	f104 060b 	add.w	r6, r4, #11
 8011e7e:	f000 f9f1 	bl	8012264 <__malloc_unlock>
 8011e82:	f026 0607 	bic.w	r6, r6, #7
 8011e86:	1d23      	adds	r3, r4, #4
 8011e88:	1af2      	subs	r2, r6, r3
 8011e8a:	d0b6      	beq.n	8011dfa <_malloc_r+0x22>
 8011e8c:	1b9b      	subs	r3, r3, r6
 8011e8e:	50a3      	str	r3, [r4, r2]
 8011e90:	e7b3      	b.n	8011dfa <_malloc_r+0x22>
 8011e92:	6862      	ldr	r2, [r4, #4]
 8011e94:	42a3      	cmp	r3, r4
 8011e96:	bf0c      	ite	eq
 8011e98:	6032      	streq	r2, [r6, #0]
 8011e9a:	605a      	strne	r2, [r3, #4]
 8011e9c:	e7ec      	b.n	8011e78 <_malloc_r+0xa0>
 8011e9e:	4623      	mov	r3, r4
 8011ea0:	6864      	ldr	r4, [r4, #4]
 8011ea2:	e7b2      	b.n	8011e0a <_malloc_r+0x32>
 8011ea4:	4634      	mov	r4, r6
 8011ea6:	6876      	ldr	r6, [r6, #4]
 8011ea8:	e7b9      	b.n	8011e1e <_malloc_r+0x46>
 8011eaa:	230c      	movs	r3, #12
 8011eac:	603b      	str	r3, [r7, #0]
 8011eae:	4638      	mov	r0, r7
 8011eb0:	f000 f9d8 	bl	8012264 <__malloc_unlock>
 8011eb4:	e7a1      	b.n	8011dfa <_malloc_r+0x22>
 8011eb6:	6025      	str	r5, [r4, #0]
 8011eb8:	e7de      	b.n	8011e78 <_malloc_r+0xa0>
 8011eba:	bf00      	nop
 8011ebc:	20003944 	.word	0x20003944

08011ec0 <__ssputs_r>:
 8011ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ec4:	688e      	ldr	r6, [r1, #8]
 8011ec6:	429e      	cmp	r6, r3
 8011ec8:	4682      	mov	sl, r0
 8011eca:	460c      	mov	r4, r1
 8011ecc:	4690      	mov	r8, r2
 8011ece:	461f      	mov	r7, r3
 8011ed0:	d838      	bhi.n	8011f44 <__ssputs_r+0x84>
 8011ed2:	898a      	ldrh	r2, [r1, #12]
 8011ed4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ed8:	d032      	beq.n	8011f40 <__ssputs_r+0x80>
 8011eda:	6825      	ldr	r5, [r4, #0]
 8011edc:	6909      	ldr	r1, [r1, #16]
 8011ede:	eba5 0901 	sub.w	r9, r5, r1
 8011ee2:	6965      	ldr	r5, [r4, #20]
 8011ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011eec:	3301      	adds	r3, #1
 8011eee:	444b      	add	r3, r9
 8011ef0:	106d      	asrs	r5, r5, #1
 8011ef2:	429d      	cmp	r5, r3
 8011ef4:	bf38      	it	cc
 8011ef6:	461d      	movcc	r5, r3
 8011ef8:	0553      	lsls	r3, r2, #21
 8011efa:	d531      	bpl.n	8011f60 <__ssputs_r+0xa0>
 8011efc:	4629      	mov	r1, r5
 8011efe:	f7ff ff6b 	bl	8011dd8 <_malloc_r>
 8011f02:	4606      	mov	r6, r0
 8011f04:	b950      	cbnz	r0, 8011f1c <__ssputs_r+0x5c>
 8011f06:	230c      	movs	r3, #12
 8011f08:	f8ca 3000 	str.w	r3, [sl]
 8011f0c:	89a3      	ldrh	r3, [r4, #12]
 8011f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f12:	81a3      	strh	r3, [r4, #12]
 8011f14:	f04f 30ff 	mov.w	r0, #4294967295
 8011f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f1c:	6921      	ldr	r1, [r4, #16]
 8011f1e:	464a      	mov	r2, r9
 8011f20:	f7fc fccc 	bl	800e8bc <memcpy>
 8011f24:	89a3      	ldrh	r3, [r4, #12]
 8011f26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f2e:	81a3      	strh	r3, [r4, #12]
 8011f30:	6126      	str	r6, [r4, #16]
 8011f32:	6165      	str	r5, [r4, #20]
 8011f34:	444e      	add	r6, r9
 8011f36:	eba5 0509 	sub.w	r5, r5, r9
 8011f3a:	6026      	str	r6, [r4, #0]
 8011f3c:	60a5      	str	r5, [r4, #8]
 8011f3e:	463e      	mov	r6, r7
 8011f40:	42be      	cmp	r6, r7
 8011f42:	d900      	bls.n	8011f46 <__ssputs_r+0x86>
 8011f44:	463e      	mov	r6, r7
 8011f46:	6820      	ldr	r0, [r4, #0]
 8011f48:	4632      	mov	r2, r6
 8011f4a:	4641      	mov	r1, r8
 8011f4c:	f7fc fcc4 	bl	800e8d8 <memmove>
 8011f50:	68a3      	ldr	r3, [r4, #8]
 8011f52:	1b9b      	subs	r3, r3, r6
 8011f54:	60a3      	str	r3, [r4, #8]
 8011f56:	6823      	ldr	r3, [r4, #0]
 8011f58:	4433      	add	r3, r6
 8011f5a:	6023      	str	r3, [r4, #0]
 8011f5c:	2000      	movs	r0, #0
 8011f5e:	e7db      	b.n	8011f18 <__ssputs_r+0x58>
 8011f60:	462a      	mov	r2, r5
 8011f62:	f000 f985 	bl	8012270 <_realloc_r>
 8011f66:	4606      	mov	r6, r0
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d1e1      	bne.n	8011f30 <__ssputs_r+0x70>
 8011f6c:	6921      	ldr	r1, [r4, #16]
 8011f6e:	4650      	mov	r0, sl
 8011f70:	f7ff fec6 	bl	8011d00 <_free_r>
 8011f74:	e7c7      	b.n	8011f06 <__ssputs_r+0x46>
	...

08011f78 <_svfiprintf_r>:
 8011f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7c:	4698      	mov	r8, r3
 8011f7e:	898b      	ldrh	r3, [r1, #12]
 8011f80:	061b      	lsls	r3, r3, #24
 8011f82:	b09d      	sub	sp, #116	; 0x74
 8011f84:	4607      	mov	r7, r0
 8011f86:	460d      	mov	r5, r1
 8011f88:	4614      	mov	r4, r2
 8011f8a:	d50e      	bpl.n	8011faa <_svfiprintf_r+0x32>
 8011f8c:	690b      	ldr	r3, [r1, #16]
 8011f8e:	b963      	cbnz	r3, 8011faa <_svfiprintf_r+0x32>
 8011f90:	2140      	movs	r1, #64	; 0x40
 8011f92:	f7ff ff21 	bl	8011dd8 <_malloc_r>
 8011f96:	6028      	str	r0, [r5, #0]
 8011f98:	6128      	str	r0, [r5, #16]
 8011f9a:	b920      	cbnz	r0, 8011fa6 <_svfiprintf_r+0x2e>
 8011f9c:	230c      	movs	r3, #12
 8011f9e:	603b      	str	r3, [r7, #0]
 8011fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa4:	e0d1      	b.n	801214a <_svfiprintf_r+0x1d2>
 8011fa6:	2340      	movs	r3, #64	; 0x40
 8011fa8:	616b      	str	r3, [r5, #20]
 8011faa:	2300      	movs	r3, #0
 8011fac:	9309      	str	r3, [sp, #36]	; 0x24
 8011fae:	2320      	movs	r3, #32
 8011fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fb8:	2330      	movs	r3, #48	; 0x30
 8011fba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012164 <_svfiprintf_r+0x1ec>
 8011fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fc2:	f04f 0901 	mov.w	r9, #1
 8011fc6:	4623      	mov	r3, r4
 8011fc8:	469a      	mov	sl, r3
 8011fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fce:	b10a      	cbz	r2, 8011fd4 <_svfiprintf_r+0x5c>
 8011fd0:	2a25      	cmp	r2, #37	; 0x25
 8011fd2:	d1f9      	bne.n	8011fc8 <_svfiprintf_r+0x50>
 8011fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8011fd8:	d00b      	beq.n	8011ff2 <_svfiprintf_r+0x7a>
 8011fda:	465b      	mov	r3, fp
 8011fdc:	4622      	mov	r2, r4
 8011fde:	4629      	mov	r1, r5
 8011fe0:	4638      	mov	r0, r7
 8011fe2:	f7ff ff6d 	bl	8011ec0 <__ssputs_r>
 8011fe6:	3001      	adds	r0, #1
 8011fe8:	f000 80aa 	beq.w	8012140 <_svfiprintf_r+0x1c8>
 8011fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fee:	445a      	add	r2, fp
 8011ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8011ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f000 80a2 	beq.w	8012140 <_svfiprintf_r+0x1c8>
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8012002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012006:	f10a 0a01 	add.w	sl, sl, #1
 801200a:	9304      	str	r3, [sp, #16]
 801200c:	9307      	str	r3, [sp, #28]
 801200e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012012:	931a      	str	r3, [sp, #104]	; 0x68
 8012014:	4654      	mov	r4, sl
 8012016:	2205      	movs	r2, #5
 8012018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801201c:	4851      	ldr	r0, [pc, #324]	; (8012164 <_svfiprintf_r+0x1ec>)
 801201e:	f7ee f8df 	bl	80001e0 <memchr>
 8012022:	9a04      	ldr	r2, [sp, #16]
 8012024:	b9d8      	cbnz	r0, 801205e <_svfiprintf_r+0xe6>
 8012026:	06d0      	lsls	r0, r2, #27
 8012028:	bf44      	itt	mi
 801202a:	2320      	movmi	r3, #32
 801202c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012030:	0711      	lsls	r1, r2, #28
 8012032:	bf44      	itt	mi
 8012034:	232b      	movmi	r3, #43	; 0x2b
 8012036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801203a:	f89a 3000 	ldrb.w	r3, [sl]
 801203e:	2b2a      	cmp	r3, #42	; 0x2a
 8012040:	d015      	beq.n	801206e <_svfiprintf_r+0xf6>
 8012042:	9a07      	ldr	r2, [sp, #28]
 8012044:	4654      	mov	r4, sl
 8012046:	2000      	movs	r0, #0
 8012048:	f04f 0c0a 	mov.w	ip, #10
 801204c:	4621      	mov	r1, r4
 801204e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012052:	3b30      	subs	r3, #48	; 0x30
 8012054:	2b09      	cmp	r3, #9
 8012056:	d94e      	bls.n	80120f6 <_svfiprintf_r+0x17e>
 8012058:	b1b0      	cbz	r0, 8012088 <_svfiprintf_r+0x110>
 801205a:	9207      	str	r2, [sp, #28]
 801205c:	e014      	b.n	8012088 <_svfiprintf_r+0x110>
 801205e:	eba0 0308 	sub.w	r3, r0, r8
 8012062:	fa09 f303 	lsl.w	r3, r9, r3
 8012066:	4313      	orrs	r3, r2
 8012068:	9304      	str	r3, [sp, #16]
 801206a:	46a2      	mov	sl, r4
 801206c:	e7d2      	b.n	8012014 <_svfiprintf_r+0x9c>
 801206e:	9b03      	ldr	r3, [sp, #12]
 8012070:	1d19      	adds	r1, r3, #4
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	9103      	str	r1, [sp, #12]
 8012076:	2b00      	cmp	r3, #0
 8012078:	bfbb      	ittet	lt
 801207a:	425b      	neglt	r3, r3
 801207c:	f042 0202 	orrlt.w	r2, r2, #2
 8012080:	9307      	strge	r3, [sp, #28]
 8012082:	9307      	strlt	r3, [sp, #28]
 8012084:	bfb8      	it	lt
 8012086:	9204      	strlt	r2, [sp, #16]
 8012088:	7823      	ldrb	r3, [r4, #0]
 801208a:	2b2e      	cmp	r3, #46	; 0x2e
 801208c:	d10c      	bne.n	80120a8 <_svfiprintf_r+0x130>
 801208e:	7863      	ldrb	r3, [r4, #1]
 8012090:	2b2a      	cmp	r3, #42	; 0x2a
 8012092:	d135      	bne.n	8012100 <_svfiprintf_r+0x188>
 8012094:	9b03      	ldr	r3, [sp, #12]
 8012096:	1d1a      	adds	r2, r3, #4
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	9203      	str	r2, [sp, #12]
 801209c:	2b00      	cmp	r3, #0
 801209e:	bfb8      	it	lt
 80120a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80120a4:	3402      	adds	r4, #2
 80120a6:	9305      	str	r3, [sp, #20]
 80120a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012174 <_svfiprintf_r+0x1fc>
 80120ac:	7821      	ldrb	r1, [r4, #0]
 80120ae:	2203      	movs	r2, #3
 80120b0:	4650      	mov	r0, sl
 80120b2:	f7ee f895 	bl	80001e0 <memchr>
 80120b6:	b140      	cbz	r0, 80120ca <_svfiprintf_r+0x152>
 80120b8:	2340      	movs	r3, #64	; 0x40
 80120ba:	eba0 000a 	sub.w	r0, r0, sl
 80120be:	fa03 f000 	lsl.w	r0, r3, r0
 80120c2:	9b04      	ldr	r3, [sp, #16]
 80120c4:	4303      	orrs	r3, r0
 80120c6:	3401      	adds	r4, #1
 80120c8:	9304      	str	r3, [sp, #16]
 80120ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ce:	4826      	ldr	r0, [pc, #152]	; (8012168 <_svfiprintf_r+0x1f0>)
 80120d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120d4:	2206      	movs	r2, #6
 80120d6:	f7ee f883 	bl	80001e0 <memchr>
 80120da:	2800      	cmp	r0, #0
 80120dc:	d038      	beq.n	8012150 <_svfiprintf_r+0x1d8>
 80120de:	4b23      	ldr	r3, [pc, #140]	; (801216c <_svfiprintf_r+0x1f4>)
 80120e0:	bb1b      	cbnz	r3, 801212a <_svfiprintf_r+0x1b2>
 80120e2:	9b03      	ldr	r3, [sp, #12]
 80120e4:	3307      	adds	r3, #7
 80120e6:	f023 0307 	bic.w	r3, r3, #7
 80120ea:	3308      	adds	r3, #8
 80120ec:	9303      	str	r3, [sp, #12]
 80120ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f0:	4433      	add	r3, r6
 80120f2:	9309      	str	r3, [sp, #36]	; 0x24
 80120f4:	e767      	b.n	8011fc6 <_svfiprintf_r+0x4e>
 80120f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80120fa:	460c      	mov	r4, r1
 80120fc:	2001      	movs	r0, #1
 80120fe:	e7a5      	b.n	801204c <_svfiprintf_r+0xd4>
 8012100:	2300      	movs	r3, #0
 8012102:	3401      	adds	r4, #1
 8012104:	9305      	str	r3, [sp, #20]
 8012106:	4619      	mov	r1, r3
 8012108:	f04f 0c0a 	mov.w	ip, #10
 801210c:	4620      	mov	r0, r4
 801210e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012112:	3a30      	subs	r2, #48	; 0x30
 8012114:	2a09      	cmp	r2, #9
 8012116:	d903      	bls.n	8012120 <_svfiprintf_r+0x1a8>
 8012118:	2b00      	cmp	r3, #0
 801211a:	d0c5      	beq.n	80120a8 <_svfiprintf_r+0x130>
 801211c:	9105      	str	r1, [sp, #20]
 801211e:	e7c3      	b.n	80120a8 <_svfiprintf_r+0x130>
 8012120:	fb0c 2101 	mla	r1, ip, r1, r2
 8012124:	4604      	mov	r4, r0
 8012126:	2301      	movs	r3, #1
 8012128:	e7f0      	b.n	801210c <_svfiprintf_r+0x194>
 801212a:	ab03      	add	r3, sp, #12
 801212c:	9300      	str	r3, [sp, #0]
 801212e:	462a      	mov	r2, r5
 8012130:	4b0f      	ldr	r3, [pc, #60]	; (8012170 <_svfiprintf_r+0x1f8>)
 8012132:	a904      	add	r1, sp, #16
 8012134:	4638      	mov	r0, r7
 8012136:	f7fc fc91 	bl	800ea5c <_printf_float>
 801213a:	1c42      	adds	r2, r0, #1
 801213c:	4606      	mov	r6, r0
 801213e:	d1d6      	bne.n	80120ee <_svfiprintf_r+0x176>
 8012140:	89ab      	ldrh	r3, [r5, #12]
 8012142:	065b      	lsls	r3, r3, #25
 8012144:	f53f af2c 	bmi.w	8011fa0 <_svfiprintf_r+0x28>
 8012148:	9809      	ldr	r0, [sp, #36]	; 0x24
 801214a:	b01d      	add	sp, #116	; 0x74
 801214c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012150:	ab03      	add	r3, sp, #12
 8012152:	9300      	str	r3, [sp, #0]
 8012154:	462a      	mov	r2, r5
 8012156:	4b06      	ldr	r3, [pc, #24]	; (8012170 <_svfiprintf_r+0x1f8>)
 8012158:	a904      	add	r1, sp, #16
 801215a:	4638      	mov	r0, r7
 801215c:	f7fc ff22 	bl	800efa4 <_printf_i>
 8012160:	e7eb      	b.n	801213a <_svfiprintf_r+0x1c2>
 8012162:	bf00      	nop
 8012164:	0801507c 	.word	0x0801507c
 8012168:	08015086 	.word	0x08015086
 801216c:	0800ea5d 	.word	0x0800ea5d
 8012170:	08011ec1 	.word	0x08011ec1
 8012174:	08015082 	.word	0x08015082

08012178 <nan>:
 8012178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012180 <nan+0x8>
 801217c:	4770      	bx	lr
 801217e:	bf00      	nop
 8012180:	00000000 	.word	0x00000000
 8012184:	7ff80000 	.word	0x7ff80000

08012188 <_sbrk_r>:
 8012188:	b538      	push	{r3, r4, r5, lr}
 801218a:	4d06      	ldr	r5, [pc, #24]	; (80121a4 <_sbrk_r+0x1c>)
 801218c:	2300      	movs	r3, #0
 801218e:	4604      	mov	r4, r0
 8012190:	4608      	mov	r0, r1
 8012192:	602b      	str	r3, [r5, #0]
 8012194:	f7f6 fc64 	bl	8008a60 <_sbrk>
 8012198:	1c43      	adds	r3, r0, #1
 801219a:	d102      	bne.n	80121a2 <_sbrk_r+0x1a>
 801219c:	682b      	ldr	r3, [r5, #0]
 801219e:	b103      	cbz	r3, 80121a2 <_sbrk_r+0x1a>
 80121a0:	6023      	str	r3, [r4, #0]
 80121a2:	bd38      	pop	{r3, r4, r5, pc}
 80121a4:	2000394c 	.word	0x2000394c

080121a8 <nanf>:
 80121a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80121b0 <nanf+0x8>
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop
 80121b0:	7fc00000 	.word	0x7fc00000

080121b4 <strncmp>:
 80121b4:	b510      	push	{r4, lr}
 80121b6:	b17a      	cbz	r2, 80121d8 <strncmp+0x24>
 80121b8:	4603      	mov	r3, r0
 80121ba:	3901      	subs	r1, #1
 80121bc:	1884      	adds	r4, r0, r2
 80121be:	f813 0b01 	ldrb.w	r0, [r3], #1
 80121c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80121c6:	4290      	cmp	r0, r2
 80121c8:	d101      	bne.n	80121ce <strncmp+0x1a>
 80121ca:	42a3      	cmp	r3, r4
 80121cc:	d101      	bne.n	80121d2 <strncmp+0x1e>
 80121ce:	1a80      	subs	r0, r0, r2
 80121d0:	bd10      	pop	{r4, pc}
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d1f3      	bne.n	80121be <strncmp+0xa>
 80121d6:	e7fa      	b.n	80121ce <strncmp+0x1a>
 80121d8:	4610      	mov	r0, r2
 80121da:	e7f9      	b.n	80121d0 <strncmp+0x1c>

080121dc <__ascii_wctomb>:
 80121dc:	b149      	cbz	r1, 80121f2 <__ascii_wctomb+0x16>
 80121de:	2aff      	cmp	r2, #255	; 0xff
 80121e0:	bf85      	ittet	hi
 80121e2:	238a      	movhi	r3, #138	; 0x8a
 80121e4:	6003      	strhi	r3, [r0, #0]
 80121e6:	700a      	strbls	r2, [r1, #0]
 80121e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80121ec:	bf98      	it	ls
 80121ee:	2001      	movls	r0, #1
 80121f0:	4770      	bx	lr
 80121f2:	4608      	mov	r0, r1
 80121f4:	4770      	bx	lr
	...

080121f8 <__assert_func>:
 80121f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121fa:	4614      	mov	r4, r2
 80121fc:	461a      	mov	r2, r3
 80121fe:	4b09      	ldr	r3, [pc, #36]	; (8012224 <__assert_func+0x2c>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	4605      	mov	r5, r0
 8012204:	68d8      	ldr	r0, [r3, #12]
 8012206:	b14c      	cbz	r4, 801221c <__assert_func+0x24>
 8012208:	4b07      	ldr	r3, [pc, #28]	; (8012228 <__assert_func+0x30>)
 801220a:	9100      	str	r1, [sp, #0]
 801220c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012210:	4906      	ldr	r1, [pc, #24]	; (801222c <__assert_func+0x34>)
 8012212:	462b      	mov	r3, r5
 8012214:	f000 f80e 	bl	8012234 <fiprintf>
 8012218:	f000 fa72 	bl	8012700 <abort>
 801221c:	4b04      	ldr	r3, [pc, #16]	; (8012230 <__assert_func+0x38>)
 801221e:	461c      	mov	r4, r3
 8012220:	e7f3      	b.n	801220a <__assert_func+0x12>
 8012222:	bf00      	nop
 8012224:	20000184 	.word	0x20000184
 8012228:	0801508d 	.word	0x0801508d
 801222c:	0801509a 	.word	0x0801509a
 8012230:	080150c8 	.word	0x080150c8

08012234 <fiprintf>:
 8012234:	b40e      	push	{r1, r2, r3}
 8012236:	b503      	push	{r0, r1, lr}
 8012238:	4601      	mov	r1, r0
 801223a:	ab03      	add	r3, sp, #12
 801223c:	4805      	ldr	r0, [pc, #20]	; (8012254 <fiprintf+0x20>)
 801223e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012242:	6800      	ldr	r0, [r0, #0]
 8012244:	9301      	str	r3, [sp, #4]
 8012246:	f000 f86b 	bl	8012320 <_vfiprintf_r>
 801224a:	b002      	add	sp, #8
 801224c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012250:	b003      	add	sp, #12
 8012252:	4770      	bx	lr
 8012254:	20000184 	.word	0x20000184

08012258 <__malloc_lock>:
 8012258:	4801      	ldr	r0, [pc, #4]	; (8012260 <__malloc_lock+0x8>)
 801225a:	f000 bc11 	b.w	8012a80 <__retarget_lock_acquire_recursive>
 801225e:	bf00      	nop
 8012260:	20003950 	.word	0x20003950

08012264 <__malloc_unlock>:
 8012264:	4801      	ldr	r0, [pc, #4]	; (801226c <__malloc_unlock+0x8>)
 8012266:	f000 bc0c 	b.w	8012a82 <__retarget_lock_release_recursive>
 801226a:	bf00      	nop
 801226c:	20003950 	.word	0x20003950

08012270 <_realloc_r>:
 8012270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012274:	4680      	mov	r8, r0
 8012276:	4614      	mov	r4, r2
 8012278:	460e      	mov	r6, r1
 801227a:	b921      	cbnz	r1, 8012286 <_realloc_r+0x16>
 801227c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012280:	4611      	mov	r1, r2
 8012282:	f7ff bda9 	b.w	8011dd8 <_malloc_r>
 8012286:	b92a      	cbnz	r2, 8012294 <_realloc_r+0x24>
 8012288:	f7ff fd3a 	bl	8011d00 <_free_r>
 801228c:	4625      	mov	r5, r4
 801228e:	4628      	mov	r0, r5
 8012290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012294:	f000 fc5c 	bl	8012b50 <_malloc_usable_size_r>
 8012298:	4284      	cmp	r4, r0
 801229a:	4607      	mov	r7, r0
 801229c:	d802      	bhi.n	80122a4 <_realloc_r+0x34>
 801229e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80122a2:	d812      	bhi.n	80122ca <_realloc_r+0x5a>
 80122a4:	4621      	mov	r1, r4
 80122a6:	4640      	mov	r0, r8
 80122a8:	f7ff fd96 	bl	8011dd8 <_malloc_r>
 80122ac:	4605      	mov	r5, r0
 80122ae:	2800      	cmp	r0, #0
 80122b0:	d0ed      	beq.n	801228e <_realloc_r+0x1e>
 80122b2:	42bc      	cmp	r4, r7
 80122b4:	4622      	mov	r2, r4
 80122b6:	4631      	mov	r1, r6
 80122b8:	bf28      	it	cs
 80122ba:	463a      	movcs	r2, r7
 80122bc:	f7fc fafe 	bl	800e8bc <memcpy>
 80122c0:	4631      	mov	r1, r6
 80122c2:	4640      	mov	r0, r8
 80122c4:	f7ff fd1c 	bl	8011d00 <_free_r>
 80122c8:	e7e1      	b.n	801228e <_realloc_r+0x1e>
 80122ca:	4635      	mov	r5, r6
 80122cc:	e7df      	b.n	801228e <_realloc_r+0x1e>

080122ce <__sfputc_r>:
 80122ce:	6893      	ldr	r3, [r2, #8]
 80122d0:	3b01      	subs	r3, #1
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	b410      	push	{r4}
 80122d6:	6093      	str	r3, [r2, #8]
 80122d8:	da08      	bge.n	80122ec <__sfputc_r+0x1e>
 80122da:	6994      	ldr	r4, [r2, #24]
 80122dc:	42a3      	cmp	r3, r4
 80122de:	db01      	blt.n	80122e4 <__sfputc_r+0x16>
 80122e0:	290a      	cmp	r1, #10
 80122e2:	d103      	bne.n	80122ec <__sfputc_r+0x1e>
 80122e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122e8:	f000 b94a 	b.w	8012580 <__swbuf_r>
 80122ec:	6813      	ldr	r3, [r2, #0]
 80122ee:	1c58      	adds	r0, r3, #1
 80122f0:	6010      	str	r0, [r2, #0]
 80122f2:	7019      	strb	r1, [r3, #0]
 80122f4:	4608      	mov	r0, r1
 80122f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <__sfputs_r>:
 80122fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fe:	4606      	mov	r6, r0
 8012300:	460f      	mov	r7, r1
 8012302:	4614      	mov	r4, r2
 8012304:	18d5      	adds	r5, r2, r3
 8012306:	42ac      	cmp	r4, r5
 8012308:	d101      	bne.n	801230e <__sfputs_r+0x12>
 801230a:	2000      	movs	r0, #0
 801230c:	e007      	b.n	801231e <__sfputs_r+0x22>
 801230e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012312:	463a      	mov	r2, r7
 8012314:	4630      	mov	r0, r6
 8012316:	f7ff ffda 	bl	80122ce <__sfputc_r>
 801231a:	1c43      	adds	r3, r0, #1
 801231c:	d1f3      	bne.n	8012306 <__sfputs_r+0xa>
 801231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012320 <_vfiprintf_r>:
 8012320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012324:	460d      	mov	r5, r1
 8012326:	b09d      	sub	sp, #116	; 0x74
 8012328:	4614      	mov	r4, r2
 801232a:	4698      	mov	r8, r3
 801232c:	4606      	mov	r6, r0
 801232e:	b118      	cbz	r0, 8012338 <_vfiprintf_r+0x18>
 8012330:	6983      	ldr	r3, [r0, #24]
 8012332:	b90b      	cbnz	r3, 8012338 <_vfiprintf_r+0x18>
 8012334:	f000 fb06 	bl	8012944 <__sinit>
 8012338:	4b89      	ldr	r3, [pc, #548]	; (8012560 <_vfiprintf_r+0x240>)
 801233a:	429d      	cmp	r5, r3
 801233c:	d11b      	bne.n	8012376 <_vfiprintf_r+0x56>
 801233e:	6875      	ldr	r5, [r6, #4]
 8012340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012342:	07d9      	lsls	r1, r3, #31
 8012344:	d405      	bmi.n	8012352 <_vfiprintf_r+0x32>
 8012346:	89ab      	ldrh	r3, [r5, #12]
 8012348:	059a      	lsls	r2, r3, #22
 801234a:	d402      	bmi.n	8012352 <_vfiprintf_r+0x32>
 801234c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801234e:	f000 fb97 	bl	8012a80 <__retarget_lock_acquire_recursive>
 8012352:	89ab      	ldrh	r3, [r5, #12]
 8012354:	071b      	lsls	r3, r3, #28
 8012356:	d501      	bpl.n	801235c <_vfiprintf_r+0x3c>
 8012358:	692b      	ldr	r3, [r5, #16]
 801235a:	b9eb      	cbnz	r3, 8012398 <_vfiprintf_r+0x78>
 801235c:	4629      	mov	r1, r5
 801235e:	4630      	mov	r0, r6
 8012360:	f000 f960 	bl	8012624 <__swsetup_r>
 8012364:	b1c0      	cbz	r0, 8012398 <_vfiprintf_r+0x78>
 8012366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012368:	07dc      	lsls	r4, r3, #31
 801236a:	d50e      	bpl.n	801238a <_vfiprintf_r+0x6a>
 801236c:	f04f 30ff 	mov.w	r0, #4294967295
 8012370:	b01d      	add	sp, #116	; 0x74
 8012372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012376:	4b7b      	ldr	r3, [pc, #492]	; (8012564 <_vfiprintf_r+0x244>)
 8012378:	429d      	cmp	r5, r3
 801237a:	d101      	bne.n	8012380 <_vfiprintf_r+0x60>
 801237c:	68b5      	ldr	r5, [r6, #8]
 801237e:	e7df      	b.n	8012340 <_vfiprintf_r+0x20>
 8012380:	4b79      	ldr	r3, [pc, #484]	; (8012568 <_vfiprintf_r+0x248>)
 8012382:	429d      	cmp	r5, r3
 8012384:	bf08      	it	eq
 8012386:	68f5      	ldreq	r5, [r6, #12]
 8012388:	e7da      	b.n	8012340 <_vfiprintf_r+0x20>
 801238a:	89ab      	ldrh	r3, [r5, #12]
 801238c:	0598      	lsls	r0, r3, #22
 801238e:	d4ed      	bmi.n	801236c <_vfiprintf_r+0x4c>
 8012390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012392:	f000 fb76 	bl	8012a82 <__retarget_lock_release_recursive>
 8012396:	e7e9      	b.n	801236c <_vfiprintf_r+0x4c>
 8012398:	2300      	movs	r3, #0
 801239a:	9309      	str	r3, [sp, #36]	; 0x24
 801239c:	2320      	movs	r3, #32
 801239e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80123a6:	2330      	movs	r3, #48	; 0x30
 80123a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801256c <_vfiprintf_r+0x24c>
 80123ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123b0:	f04f 0901 	mov.w	r9, #1
 80123b4:	4623      	mov	r3, r4
 80123b6:	469a      	mov	sl, r3
 80123b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123bc:	b10a      	cbz	r2, 80123c2 <_vfiprintf_r+0xa2>
 80123be:	2a25      	cmp	r2, #37	; 0x25
 80123c0:	d1f9      	bne.n	80123b6 <_vfiprintf_r+0x96>
 80123c2:	ebba 0b04 	subs.w	fp, sl, r4
 80123c6:	d00b      	beq.n	80123e0 <_vfiprintf_r+0xc0>
 80123c8:	465b      	mov	r3, fp
 80123ca:	4622      	mov	r2, r4
 80123cc:	4629      	mov	r1, r5
 80123ce:	4630      	mov	r0, r6
 80123d0:	f7ff ff94 	bl	80122fc <__sfputs_r>
 80123d4:	3001      	adds	r0, #1
 80123d6:	f000 80aa 	beq.w	801252e <_vfiprintf_r+0x20e>
 80123da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123dc:	445a      	add	r2, fp
 80123de:	9209      	str	r2, [sp, #36]	; 0x24
 80123e0:	f89a 3000 	ldrb.w	r3, [sl]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	f000 80a2 	beq.w	801252e <_vfiprintf_r+0x20e>
 80123ea:	2300      	movs	r3, #0
 80123ec:	f04f 32ff 	mov.w	r2, #4294967295
 80123f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123f4:	f10a 0a01 	add.w	sl, sl, #1
 80123f8:	9304      	str	r3, [sp, #16]
 80123fa:	9307      	str	r3, [sp, #28]
 80123fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012400:	931a      	str	r3, [sp, #104]	; 0x68
 8012402:	4654      	mov	r4, sl
 8012404:	2205      	movs	r2, #5
 8012406:	f814 1b01 	ldrb.w	r1, [r4], #1
 801240a:	4858      	ldr	r0, [pc, #352]	; (801256c <_vfiprintf_r+0x24c>)
 801240c:	f7ed fee8 	bl	80001e0 <memchr>
 8012410:	9a04      	ldr	r2, [sp, #16]
 8012412:	b9d8      	cbnz	r0, 801244c <_vfiprintf_r+0x12c>
 8012414:	06d1      	lsls	r1, r2, #27
 8012416:	bf44      	itt	mi
 8012418:	2320      	movmi	r3, #32
 801241a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801241e:	0713      	lsls	r3, r2, #28
 8012420:	bf44      	itt	mi
 8012422:	232b      	movmi	r3, #43	; 0x2b
 8012424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012428:	f89a 3000 	ldrb.w	r3, [sl]
 801242c:	2b2a      	cmp	r3, #42	; 0x2a
 801242e:	d015      	beq.n	801245c <_vfiprintf_r+0x13c>
 8012430:	9a07      	ldr	r2, [sp, #28]
 8012432:	4654      	mov	r4, sl
 8012434:	2000      	movs	r0, #0
 8012436:	f04f 0c0a 	mov.w	ip, #10
 801243a:	4621      	mov	r1, r4
 801243c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012440:	3b30      	subs	r3, #48	; 0x30
 8012442:	2b09      	cmp	r3, #9
 8012444:	d94e      	bls.n	80124e4 <_vfiprintf_r+0x1c4>
 8012446:	b1b0      	cbz	r0, 8012476 <_vfiprintf_r+0x156>
 8012448:	9207      	str	r2, [sp, #28]
 801244a:	e014      	b.n	8012476 <_vfiprintf_r+0x156>
 801244c:	eba0 0308 	sub.w	r3, r0, r8
 8012450:	fa09 f303 	lsl.w	r3, r9, r3
 8012454:	4313      	orrs	r3, r2
 8012456:	9304      	str	r3, [sp, #16]
 8012458:	46a2      	mov	sl, r4
 801245a:	e7d2      	b.n	8012402 <_vfiprintf_r+0xe2>
 801245c:	9b03      	ldr	r3, [sp, #12]
 801245e:	1d19      	adds	r1, r3, #4
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	9103      	str	r1, [sp, #12]
 8012464:	2b00      	cmp	r3, #0
 8012466:	bfbb      	ittet	lt
 8012468:	425b      	neglt	r3, r3
 801246a:	f042 0202 	orrlt.w	r2, r2, #2
 801246e:	9307      	strge	r3, [sp, #28]
 8012470:	9307      	strlt	r3, [sp, #28]
 8012472:	bfb8      	it	lt
 8012474:	9204      	strlt	r2, [sp, #16]
 8012476:	7823      	ldrb	r3, [r4, #0]
 8012478:	2b2e      	cmp	r3, #46	; 0x2e
 801247a:	d10c      	bne.n	8012496 <_vfiprintf_r+0x176>
 801247c:	7863      	ldrb	r3, [r4, #1]
 801247e:	2b2a      	cmp	r3, #42	; 0x2a
 8012480:	d135      	bne.n	80124ee <_vfiprintf_r+0x1ce>
 8012482:	9b03      	ldr	r3, [sp, #12]
 8012484:	1d1a      	adds	r2, r3, #4
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	9203      	str	r2, [sp, #12]
 801248a:	2b00      	cmp	r3, #0
 801248c:	bfb8      	it	lt
 801248e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012492:	3402      	adds	r4, #2
 8012494:	9305      	str	r3, [sp, #20]
 8012496:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801257c <_vfiprintf_r+0x25c>
 801249a:	7821      	ldrb	r1, [r4, #0]
 801249c:	2203      	movs	r2, #3
 801249e:	4650      	mov	r0, sl
 80124a0:	f7ed fe9e 	bl	80001e0 <memchr>
 80124a4:	b140      	cbz	r0, 80124b8 <_vfiprintf_r+0x198>
 80124a6:	2340      	movs	r3, #64	; 0x40
 80124a8:	eba0 000a 	sub.w	r0, r0, sl
 80124ac:	fa03 f000 	lsl.w	r0, r3, r0
 80124b0:	9b04      	ldr	r3, [sp, #16]
 80124b2:	4303      	orrs	r3, r0
 80124b4:	3401      	adds	r4, #1
 80124b6:	9304      	str	r3, [sp, #16]
 80124b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124bc:	482c      	ldr	r0, [pc, #176]	; (8012570 <_vfiprintf_r+0x250>)
 80124be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124c2:	2206      	movs	r2, #6
 80124c4:	f7ed fe8c 	bl	80001e0 <memchr>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d03f      	beq.n	801254c <_vfiprintf_r+0x22c>
 80124cc:	4b29      	ldr	r3, [pc, #164]	; (8012574 <_vfiprintf_r+0x254>)
 80124ce:	bb1b      	cbnz	r3, 8012518 <_vfiprintf_r+0x1f8>
 80124d0:	9b03      	ldr	r3, [sp, #12]
 80124d2:	3307      	adds	r3, #7
 80124d4:	f023 0307 	bic.w	r3, r3, #7
 80124d8:	3308      	adds	r3, #8
 80124da:	9303      	str	r3, [sp, #12]
 80124dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124de:	443b      	add	r3, r7
 80124e0:	9309      	str	r3, [sp, #36]	; 0x24
 80124e2:	e767      	b.n	80123b4 <_vfiprintf_r+0x94>
 80124e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80124e8:	460c      	mov	r4, r1
 80124ea:	2001      	movs	r0, #1
 80124ec:	e7a5      	b.n	801243a <_vfiprintf_r+0x11a>
 80124ee:	2300      	movs	r3, #0
 80124f0:	3401      	adds	r4, #1
 80124f2:	9305      	str	r3, [sp, #20]
 80124f4:	4619      	mov	r1, r3
 80124f6:	f04f 0c0a 	mov.w	ip, #10
 80124fa:	4620      	mov	r0, r4
 80124fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012500:	3a30      	subs	r2, #48	; 0x30
 8012502:	2a09      	cmp	r2, #9
 8012504:	d903      	bls.n	801250e <_vfiprintf_r+0x1ee>
 8012506:	2b00      	cmp	r3, #0
 8012508:	d0c5      	beq.n	8012496 <_vfiprintf_r+0x176>
 801250a:	9105      	str	r1, [sp, #20]
 801250c:	e7c3      	b.n	8012496 <_vfiprintf_r+0x176>
 801250e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012512:	4604      	mov	r4, r0
 8012514:	2301      	movs	r3, #1
 8012516:	e7f0      	b.n	80124fa <_vfiprintf_r+0x1da>
 8012518:	ab03      	add	r3, sp, #12
 801251a:	9300      	str	r3, [sp, #0]
 801251c:	462a      	mov	r2, r5
 801251e:	4b16      	ldr	r3, [pc, #88]	; (8012578 <_vfiprintf_r+0x258>)
 8012520:	a904      	add	r1, sp, #16
 8012522:	4630      	mov	r0, r6
 8012524:	f7fc fa9a 	bl	800ea5c <_printf_float>
 8012528:	4607      	mov	r7, r0
 801252a:	1c78      	adds	r0, r7, #1
 801252c:	d1d6      	bne.n	80124dc <_vfiprintf_r+0x1bc>
 801252e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012530:	07d9      	lsls	r1, r3, #31
 8012532:	d405      	bmi.n	8012540 <_vfiprintf_r+0x220>
 8012534:	89ab      	ldrh	r3, [r5, #12]
 8012536:	059a      	lsls	r2, r3, #22
 8012538:	d402      	bmi.n	8012540 <_vfiprintf_r+0x220>
 801253a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801253c:	f000 faa1 	bl	8012a82 <__retarget_lock_release_recursive>
 8012540:	89ab      	ldrh	r3, [r5, #12]
 8012542:	065b      	lsls	r3, r3, #25
 8012544:	f53f af12 	bmi.w	801236c <_vfiprintf_r+0x4c>
 8012548:	9809      	ldr	r0, [sp, #36]	; 0x24
 801254a:	e711      	b.n	8012370 <_vfiprintf_r+0x50>
 801254c:	ab03      	add	r3, sp, #12
 801254e:	9300      	str	r3, [sp, #0]
 8012550:	462a      	mov	r2, r5
 8012552:	4b09      	ldr	r3, [pc, #36]	; (8012578 <_vfiprintf_r+0x258>)
 8012554:	a904      	add	r1, sp, #16
 8012556:	4630      	mov	r0, r6
 8012558:	f7fc fd24 	bl	800efa4 <_printf_i>
 801255c:	e7e4      	b.n	8012528 <_vfiprintf_r+0x208>
 801255e:	bf00      	nop
 8012560:	080151ec 	.word	0x080151ec
 8012564:	0801520c 	.word	0x0801520c
 8012568:	080151cc 	.word	0x080151cc
 801256c:	0801507c 	.word	0x0801507c
 8012570:	08015086 	.word	0x08015086
 8012574:	0800ea5d 	.word	0x0800ea5d
 8012578:	080122fd 	.word	0x080122fd
 801257c:	08015082 	.word	0x08015082

08012580 <__swbuf_r>:
 8012580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012582:	460e      	mov	r6, r1
 8012584:	4614      	mov	r4, r2
 8012586:	4605      	mov	r5, r0
 8012588:	b118      	cbz	r0, 8012592 <__swbuf_r+0x12>
 801258a:	6983      	ldr	r3, [r0, #24]
 801258c:	b90b      	cbnz	r3, 8012592 <__swbuf_r+0x12>
 801258e:	f000 f9d9 	bl	8012944 <__sinit>
 8012592:	4b21      	ldr	r3, [pc, #132]	; (8012618 <__swbuf_r+0x98>)
 8012594:	429c      	cmp	r4, r3
 8012596:	d12b      	bne.n	80125f0 <__swbuf_r+0x70>
 8012598:	686c      	ldr	r4, [r5, #4]
 801259a:	69a3      	ldr	r3, [r4, #24]
 801259c:	60a3      	str	r3, [r4, #8]
 801259e:	89a3      	ldrh	r3, [r4, #12]
 80125a0:	071a      	lsls	r2, r3, #28
 80125a2:	d52f      	bpl.n	8012604 <__swbuf_r+0x84>
 80125a4:	6923      	ldr	r3, [r4, #16]
 80125a6:	b36b      	cbz	r3, 8012604 <__swbuf_r+0x84>
 80125a8:	6923      	ldr	r3, [r4, #16]
 80125aa:	6820      	ldr	r0, [r4, #0]
 80125ac:	1ac0      	subs	r0, r0, r3
 80125ae:	6963      	ldr	r3, [r4, #20]
 80125b0:	b2f6      	uxtb	r6, r6
 80125b2:	4283      	cmp	r3, r0
 80125b4:	4637      	mov	r7, r6
 80125b6:	dc04      	bgt.n	80125c2 <__swbuf_r+0x42>
 80125b8:	4621      	mov	r1, r4
 80125ba:	4628      	mov	r0, r5
 80125bc:	f000 f92e 	bl	801281c <_fflush_r>
 80125c0:	bb30      	cbnz	r0, 8012610 <__swbuf_r+0x90>
 80125c2:	68a3      	ldr	r3, [r4, #8]
 80125c4:	3b01      	subs	r3, #1
 80125c6:	60a3      	str	r3, [r4, #8]
 80125c8:	6823      	ldr	r3, [r4, #0]
 80125ca:	1c5a      	adds	r2, r3, #1
 80125cc:	6022      	str	r2, [r4, #0]
 80125ce:	701e      	strb	r6, [r3, #0]
 80125d0:	6963      	ldr	r3, [r4, #20]
 80125d2:	3001      	adds	r0, #1
 80125d4:	4283      	cmp	r3, r0
 80125d6:	d004      	beq.n	80125e2 <__swbuf_r+0x62>
 80125d8:	89a3      	ldrh	r3, [r4, #12]
 80125da:	07db      	lsls	r3, r3, #31
 80125dc:	d506      	bpl.n	80125ec <__swbuf_r+0x6c>
 80125de:	2e0a      	cmp	r6, #10
 80125e0:	d104      	bne.n	80125ec <__swbuf_r+0x6c>
 80125e2:	4621      	mov	r1, r4
 80125e4:	4628      	mov	r0, r5
 80125e6:	f000 f919 	bl	801281c <_fflush_r>
 80125ea:	b988      	cbnz	r0, 8012610 <__swbuf_r+0x90>
 80125ec:	4638      	mov	r0, r7
 80125ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125f0:	4b0a      	ldr	r3, [pc, #40]	; (801261c <__swbuf_r+0x9c>)
 80125f2:	429c      	cmp	r4, r3
 80125f4:	d101      	bne.n	80125fa <__swbuf_r+0x7a>
 80125f6:	68ac      	ldr	r4, [r5, #8]
 80125f8:	e7cf      	b.n	801259a <__swbuf_r+0x1a>
 80125fa:	4b09      	ldr	r3, [pc, #36]	; (8012620 <__swbuf_r+0xa0>)
 80125fc:	429c      	cmp	r4, r3
 80125fe:	bf08      	it	eq
 8012600:	68ec      	ldreq	r4, [r5, #12]
 8012602:	e7ca      	b.n	801259a <__swbuf_r+0x1a>
 8012604:	4621      	mov	r1, r4
 8012606:	4628      	mov	r0, r5
 8012608:	f000 f80c 	bl	8012624 <__swsetup_r>
 801260c:	2800      	cmp	r0, #0
 801260e:	d0cb      	beq.n	80125a8 <__swbuf_r+0x28>
 8012610:	f04f 37ff 	mov.w	r7, #4294967295
 8012614:	e7ea      	b.n	80125ec <__swbuf_r+0x6c>
 8012616:	bf00      	nop
 8012618:	080151ec 	.word	0x080151ec
 801261c:	0801520c 	.word	0x0801520c
 8012620:	080151cc 	.word	0x080151cc

08012624 <__swsetup_r>:
 8012624:	4b32      	ldr	r3, [pc, #200]	; (80126f0 <__swsetup_r+0xcc>)
 8012626:	b570      	push	{r4, r5, r6, lr}
 8012628:	681d      	ldr	r5, [r3, #0]
 801262a:	4606      	mov	r6, r0
 801262c:	460c      	mov	r4, r1
 801262e:	b125      	cbz	r5, 801263a <__swsetup_r+0x16>
 8012630:	69ab      	ldr	r3, [r5, #24]
 8012632:	b913      	cbnz	r3, 801263a <__swsetup_r+0x16>
 8012634:	4628      	mov	r0, r5
 8012636:	f000 f985 	bl	8012944 <__sinit>
 801263a:	4b2e      	ldr	r3, [pc, #184]	; (80126f4 <__swsetup_r+0xd0>)
 801263c:	429c      	cmp	r4, r3
 801263e:	d10f      	bne.n	8012660 <__swsetup_r+0x3c>
 8012640:	686c      	ldr	r4, [r5, #4]
 8012642:	89a3      	ldrh	r3, [r4, #12]
 8012644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012648:	0719      	lsls	r1, r3, #28
 801264a:	d42c      	bmi.n	80126a6 <__swsetup_r+0x82>
 801264c:	06dd      	lsls	r5, r3, #27
 801264e:	d411      	bmi.n	8012674 <__swsetup_r+0x50>
 8012650:	2309      	movs	r3, #9
 8012652:	6033      	str	r3, [r6, #0]
 8012654:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012658:	81a3      	strh	r3, [r4, #12]
 801265a:	f04f 30ff 	mov.w	r0, #4294967295
 801265e:	e03e      	b.n	80126de <__swsetup_r+0xba>
 8012660:	4b25      	ldr	r3, [pc, #148]	; (80126f8 <__swsetup_r+0xd4>)
 8012662:	429c      	cmp	r4, r3
 8012664:	d101      	bne.n	801266a <__swsetup_r+0x46>
 8012666:	68ac      	ldr	r4, [r5, #8]
 8012668:	e7eb      	b.n	8012642 <__swsetup_r+0x1e>
 801266a:	4b24      	ldr	r3, [pc, #144]	; (80126fc <__swsetup_r+0xd8>)
 801266c:	429c      	cmp	r4, r3
 801266e:	bf08      	it	eq
 8012670:	68ec      	ldreq	r4, [r5, #12]
 8012672:	e7e6      	b.n	8012642 <__swsetup_r+0x1e>
 8012674:	0758      	lsls	r0, r3, #29
 8012676:	d512      	bpl.n	801269e <__swsetup_r+0x7a>
 8012678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801267a:	b141      	cbz	r1, 801268e <__swsetup_r+0x6a>
 801267c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012680:	4299      	cmp	r1, r3
 8012682:	d002      	beq.n	801268a <__swsetup_r+0x66>
 8012684:	4630      	mov	r0, r6
 8012686:	f7ff fb3b 	bl	8011d00 <_free_r>
 801268a:	2300      	movs	r3, #0
 801268c:	6363      	str	r3, [r4, #52]	; 0x34
 801268e:	89a3      	ldrh	r3, [r4, #12]
 8012690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012694:	81a3      	strh	r3, [r4, #12]
 8012696:	2300      	movs	r3, #0
 8012698:	6063      	str	r3, [r4, #4]
 801269a:	6923      	ldr	r3, [r4, #16]
 801269c:	6023      	str	r3, [r4, #0]
 801269e:	89a3      	ldrh	r3, [r4, #12]
 80126a0:	f043 0308 	orr.w	r3, r3, #8
 80126a4:	81a3      	strh	r3, [r4, #12]
 80126a6:	6923      	ldr	r3, [r4, #16]
 80126a8:	b94b      	cbnz	r3, 80126be <__swsetup_r+0x9a>
 80126aa:	89a3      	ldrh	r3, [r4, #12]
 80126ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80126b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126b4:	d003      	beq.n	80126be <__swsetup_r+0x9a>
 80126b6:	4621      	mov	r1, r4
 80126b8:	4630      	mov	r0, r6
 80126ba:	f000 fa09 	bl	8012ad0 <__smakebuf_r>
 80126be:	89a0      	ldrh	r0, [r4, #12]
 80126c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126c4:	f010 0301 	ands.w	r3, r0, #1
 80126c8:	d00a      	beq.n	80126e0 <__swsetup_r+0xbc>
 80126ca:	2300      	movs	r3, #0
 80126cc:	60a3      	str	r3, [r4, #8]
 80126ce:	6963      	ldr	r3, [r4, #20]
 80126d0:	425b      	negs	r3, r3
 80126d2:	61a3      	str	r3, [r4, #24]
 80126d4:	6923      	ldr	r3, [r4, #16]
 80126d6:	b943      	cbnz	r3, 80126ea <__swsetup_r+0xc6>
 80126d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80126dc:	d1ba      	bne.n	8012654 <__swsetup_r+0x30>
 80126de:	bd70      	pop	{r4, r5, r6, pc}
 80126e0:	0781      	lsls	r1, r0, #30
 80126e2:	bf58      	it	pl
 80126e4:	6963      	ldrpl	r3, [r4, #20]
 80126e6:	60a3      	str	r3, [r4, #8]
 80126e8:	e7f4      	b.n	80126d4 <__swsetup_r+0xb0>
 80126ea:	2000      	movs	r0, #0
 80126ec:	e7f7      	b.n	80126de <__swsetup_r+0xba>
 80126ee:	bf00      	nop
 80126f0:	20000184 	.word	0x20000184
 80126f4:	080151ec 	.word	0x080151ec
 80126f8:	0801520c 	.word	0x0801520c
 80126fc:	080151cc 	.word	0x080151cc

08012700 <abort>:
 8012700:	b508      	push	{r3, lr}
 8012702:	2006      	movs	r0, #6
 8012704:	f000 fa54 	bl	8012bb0 <raise>
 8012708:	2001      	movs	r0, #1
 801270a:	f7f6 f97b 	bl	8008a04 <_exit>
	...

08012710 <__sflush_r>:
 8012710:	898a      	ldrh	r2, [r1, #12]
 8012712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012716:	4605      	mov	r5, r0
 8012718:	0710      	lsls	r0, r2, #28
 801271a:	460c      	mov	r4, r1
 801271c:	d458      	bmi.n	80127d0 <__sflush_r+0xc0>
 801271e:	684b      	ldr	r3, [r1, #4]
 8012720:	2b00      	cmp	r3, #0
 8012722:	dc05      	bgt.n	8012730 <__sflush_r+0x20>
 8012724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012726:	2b00      	cmp	r3, #0
 8012728:	dc02      	bgt.n	8012730 <__sflush_r+0x20>
 801272a:	2000      	movs	r0, #0
 801272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012732:	2e00      	cmp	r6, #0
 8012734:	d0f9      	beq.n	801272a <__sflush_r+0x1a>
 8012736:	2300      	movs	r3, #0
 8012738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801273c:	682f      	ldr	r7, [r5, #0]
 801273e:	602b      	str	r3, [r5, #0]
 8012740:	d032      	beq.n	80127a8 <__sflush_r+0x98>
 8012742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012744:	89a3      	ldrh	r3, [r4, #12]
 8012746:	075a      	lsls	r2, r3, #29
 8012748:	d505      	bpl.n	8012756 <__sflush_r+0x46>
 801274a:	6863      	ldr	r3, [r4, #4]
 801274c:	1ac0      	subs	r0, r0, r3
 801274e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012750:	b10b      	cbz	r3, 8012756 <__sflush_r+0x46>
 8012752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012754:	1ac0      	subs	r0, r0, r3
 8012756:	2300      	movs	r3, #0
 8012758:	4602      	mov	r2, r0
 801275a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801275c:	6a21      	ldr	r1, [r4, #32]
 801275e:	4628      	mov	r0, r5
 8012760:	47b0      	blx	r6
 8012762:	1c43      	adds	r3, r0, #1
 8012764:	89a3      	ldrh	r3, [r4, #12]
 8012766:	d106      	bne.n	8012776 <__sflush_r+0x66>
 8012768:	6829      	ldr	r1, [r5, #0]
 801276a:	291d      	cmp	r1, #29
 801276c:	d82c      	bhi.n	80127c8 <__sflush_r+0xb8>
 801276e:	4a2a      	ldr	r2, [pc, #168]	; (8012818 <__sflush_r+0x108>)
 8012770:	40ca      	lsrs	r2, r1
 8012772:	07d6      	lsls	r6, r2, #31
 8012774:	d528      	bpl.n	80127c8 <__sflush_r+0xb8>
 8012776:	2200      	movs	r2, #0
 8012778:	6062      	str	r2, [r4, #4]
 801277a:	04d9      	lsls	r1, r3, #19
 801277c:	6922      	ldr	r2, [r4, #16]
 801277e:	6022      	str	r2, [r4, #0]
 8012780:	d504      	bpl.n	801278c <__sflush_r+0x7c>
 8012782:	1c42      	adds	r2, r0, #1
 8012784:	d101      	bne.n	801278a <__sflush_r+0x7a>
 8012786:	682b      	ldr	r3, [r5, #0]
 8012788:	b903      	cbnz	r3, 801278c <__sflush_r+0x7c>
 801278a:	6560      	str	r0, [r4, #84]	; 0x54
 801278c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801278e:	602f      	str	r7, [r5, #0]
 8012790:	2900      	cmp	r1, #0
 8012792:	d0ca      	beq.n	801272a <__sflush_r+0x1a>
 8012794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012798:	4299      	cmp	r1, r3
 801279a:	d002      	beq.n	80127a2 <__sflush_r+0x92>
 801279c:	4628      	mov	r0, r5
 801279e:	f7ff faaf 	bl	8011d00 <_free_r>
 80127a2:	2000      	movs	r0, #0
 80127a4:	6360      	str	r0, [r4, #52]	; 0x34
 80127a6:	e7c1      	b.n	801272c <__sflush_r+0x1c>
 80127a8:	6a21      	ldr	r1, [r4, #32]
 80127aa:	2301      	movs	r3, #1
 80127ac:	4628      	mov	r0, r5
 80127ae:	47b0      	blx	r6
 80127b0:	1c41      	adds	r1, r0, #1
 80127b2:	d1c7      	bne.n	8012744 <__sflush_r+0x34>
 80127b4:	682b      	ldr	r3, [r5, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d0c4      	beq.n	8012744 <__sflush_r+0x34>
 80127ba:	2b1d      	cmp	r3, #29
 80127bc:	d001      	beq.n	80127c2 <__sflush_r+0xb2>
 80127be:	2b16      	cmp	r3, #22
 80127c0:	d101      	bne.n	80127c6 <__sflush_r+0xb6>
 80127c2:	602f      	str	r7, [r5, #0]
 80127c4:	e7b1      	b.n	801272a <__sflush_r+0x1a>
 80127c6:	89a3      	ldrh	r3, [r4, #12]
 80127c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127cc:	81a3      	strh	r3, [r4, #12]
 80127ce:	e7ad      	b.n	801272c <__sflush_r+0x1c>
 80127d0:	690f      	ldr	r7, [r1, #16]
 80127d2:	2f00      	cmp	r7, #0
 80127d4:	d0a9      	beq.n	801272a <__sflush_r+0x1a>
 80127d6:	0793      	lsls	r3, r2, #30
 80127d8:	680e      	ldr	r6, [r1, #0]
 80127da:	bf08      	it	eq
 80127dc:	694b      	ldreq	r3, [r1, #20]
 80127de:	600f      	str	r7, [r1, #0]
 80127e0:	bf18      	it	ne
 80127e2:	2300      	movne	r3, #0
 80127e4:	eba6 0807 	sub.w	r8, r6, r7
 80127e8:	608b      	str	r3, [r1, #8]
 80127ea:	f1b8 0f00 	cmp.w	r8, #0
 80127ee:	dd9c      	ble.n	801272a <__sflush_r+0x1a>
 80127f0:	6a21      	ldr	r1, [r4, #32]
 80127f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80127f4:	4643      	mov	r3, r8
 80127f6:	463a      	mov	r2, r7
 80127f8:	4628      	mov	r0, r5
 80127fa:	47b0      	blx	r6
 80127fc:	2800      	cmp	r0, #0
 80127fe:	dc06      	bgt.n	801280e <__sflush_r+0xfe>
 8012800:	89a3      	ldrh	r3, [r4, #12]
 8012802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012806:	81a3      	strh	r3, [r4, #12]
 8012808:	f04f 30ff 	mov.w	r0, #4294967295
 801280c:	e78e      	b.n	801272c <__sflush_r+0x1c>
 801280e:	4407      	add	r7, r0
 8012810:	eba8 0800 	sub.w	r8, r8, r0
 8012814:	e7e9      	b.n	80127ea <__sflush_r+0xda>
 8012816:	bf00      	nop
 8012818:	20400001 	.word	0x20400001

0801281c <_fflush_r>:
 801281c:	b538      	push	{r3, r4, r5, lr}
 801281e:	690b      	ldr	r3, [r1, #16]
 8012820:	4605      	mov	r5, r0
 8012822:	460c      	mov	r4, r1
 8012824:	b913      	cbnz	r3, 801282c <_fflush_r+0x10>
 8012826:	2500      	movs	r5, #0
 8012828:	4628      	mov	r0, r5
 801282a:	bd38      	pop	{r3, r4, r5, pc}
 801282c:	b118      	cbz	r0, 8012836 <_fflush_r+0x1a>
 801282e:	6983      	ldr	r3, [r0, #24]
 8012830:	b90b      	cbnz	r3, 8012836 <_fflush_r+0x1a>
 8012832:	f000 f887 	bl	8012944 <__sinit>
 8012836:	4b14      	ldr	r3, [pc, #80]	; (8012888 <_fflush_r+0x6c>)
 8012838:	429c      	cmp	r4, r3
 801283a:	d11b      	bne.n	8012874 <_fflush_r+0x58>
 801283c:	686c      	ldr	r4, [r5, #4]
 801283e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d0ef      	beq.n	8012826 <_fflush_r+0xa>
 8012846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012848:	07d0      	lsls	r0, r2, #31
 801284a:	d404      	bmi.n	8012856 <_fflush_r+0x3a>
 801284c:	0599      	lsls	r1, r3, #22
 801284e:	d402      	bmi.n	8012856 <_fflush_r+0x3a>
 8012850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012852:	f000 f915 	bl	8012a80 <__retarget_lock_acquire_recursive>
 8012856:	4628      	mov	r0, r5
 8012858:	4621      	mov	r1, r4
 801285a:	f7ff ff59 	bl	8012710 <__sflush_r>
 801285e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012860:	07da      	lsls	r2, r3, #31
 8012862:	4605      	mov	r5, r0
 8012864:	d4e0      	bmi.n	8012828 <_fflush_r+0xc>
 8012866:	89a3      	ldrh	r3, [r4, #12]
 8012868:	059b      	lsls	r3, r3, #22
 801286a:	d4dd      	bmi.n	8012828 <_fflush_r+0xc>
 801286c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801286e:	f000 f908 	bl	8012a82 <__retarget_lock_release_recursive>
 8012872:	e7d9      	b.n	8012828 <_fflush_r+0xc>
 8012874:	4b05      	ldr	r3, [pc, #20]	; (801288c <_fflush_r+0x70>)
 8012876:	429c      	cmp	r4, r3
 8012878:	d101      	bne.n	801287e <_fflush_r+0x62>
 801287a:	68ac      	ldr	r4, [r5, #8]
 801287c:	e7df      	b.n	801283e <_fflush_r+0x22>
 801287e:	4b04      	ldr	r3, [pc, #16]	; (8012890 <_fflush_r+0x74>)
 8012880:	429c      	cmp	r4, r3
 8012882:	bf08      	it	eq
 8012884:	68ec      	ldreq	r4, [r5, #12]
 8012886:	e7da      	b.n	801283e <_fflush_r+0x22>
 8012888:	080151ec 	.word	0x080151ec
 801288c:	0801520c 	.word	0x0801520c
 8012890:	080151cc 	.word	0x080151cc

08012894 <std>:
 8012894:	2300      	movs	r3, #0
 8012896:	b510      	push	{r4, lr}
 8012898:	4604      	mov	r4, r0
 801289a:	e9c0 3300 	strd	r3, r3, [r0]
 801289e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80128a2:	6083      	str	r3, [r0, #8]
 80128a4:	8181      	strh	r1, [r0, #12]
 80128a6:	6643      	str	r3, [r0, #100]	; 0x64
 80128a8:	81c2      	strh	r2, [r0, #14]
 80128aa:	6183      	str	r3, [r0, #24]
 80128ac:	4619      	mov	r1, r3
 80128ae:	2208      	movs	r2, #8
 80128b0:	305c      	adds	r0, #92	; 0x5c
 80128b2:	f7fc f82b 	bl	800e90c <memset>
 80128b6:	4b05      	ldr	r3, [pc, #20]	; (80128cc <std+0x38>)
 80128b8:	6263      	str	r3, [r4, #36]	; 0x24
 80128ba:	4b05      	ldr	r3, [pc, #20]	; (80128d0 <std+0x3c>)
 80128bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80128be:	4b05      	ldr	r3, [pc, #20]	; (80128d4 <std+0x40>)
 80128c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80128c2:	4b05      	ldr	r3, [pc, #20]	; (80128d8 <std+0x44>)
 80128c4:	6224      	str	r4, [r4, #32]
 80128c6:	6323      	str	r3, [r4, #48]	; 0x30
 80128c8:	bd10      	pop	{r4, pc}
 80128ca:	bf00      	nop
 80128cc:	08012be9 	.word	0x08012be9
 80128d0:	08012c0b 	.word	0x08012c0b
 80128d4:	08012c43 	.word	0x08012c43
 80128d8:	08012c67 	.word	0x08012c67

080128dc <_cleanup_r>:
 80128dc:	4901      	ldr	r1, [pc, #4]	; (80128e4 <_cleanup_r+0x8>)
 80128de:	f000 b8af 	b.w	8012a40 <_fwalk_reent>
 80128e2:	bf00      	nop
 80128e4:	0801281d 	.word	0x0801281d

080128e8 <__sfmoreglue>:
 80128e8:	b570      	push	{r4, r5, r6, lr}
 80128ea:	2268      	movs	r2, #104	; 0x68
 80128ec:	1e4d      	subs	r5, r1, #1
 80128ee:	4355      	muls	r5, r2
 80128f0:	460e      	mov	r6, r1
 80128f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80128f6:	f7ff fa6f 	bl	8011dd8 <_malloc_r>
 80128fa:	4604      	mov	r4, r0
 80128fc:	b140      	cbz	r0, 8012910 <__sfmoreglue+0x28>
 80128fe:	2100      	movs	r1, #0
 8012900:	e9c0 1600 	strd	r1, r6, [r0]
 8012904:	300c      	adds	r0, #12
 8012906:	60a0      	str	r0, [r4, #8]
 8012908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801290c:	f7fb fffe 	bl	800e90c <memset>
 8012910:	4620      	mov	r0, r4
 8012912:	bd70      	pop	{r4, r5, r6, pc}

08012914 <__sfp_lock_acquire>:
 8012914:	4801      	ldr	r0, [pc, #4]	; (801291c <__sfp_lock_acquire+0x8>)
 8012916:	f000 b8b3 	b.w	8012a80 <__retarget_lock_acquire_recursive>
 801291a:	bf00      	nop
 801291c:	20003951 	.word	0x20003951

08012920 <__sfp_lock_release>:
 8012920:	4801      	ldr	r0, [pc, #4]	; (8012928 <__sfp_lock_release+0x8>)
 8012922:	f000 b8ae 	b.w	8012a82 <__retarget_lock_release_recursive>
 8012926:	bf00      	nop
 8012928:	20003951 	.word	0x20003951

0801292c <__sinit_lock_acquire>:
 801292c:	4801      	ldr	r0, [pc, #4]	; (8012934 <__sinit_lock_acquire+0x8>)
 801292e:	f000 b8a7 	b.w	8012a80 <__retarget_lock_acquire_recursive>
 8012932:	bf00      	nop
 8012934:	20003952 	.word	0x20003952

08012938 <__sinit_lock_release>:
 8012938:	4801      	ldr	r0, [pc, #4]	; (8012940 <__sinit_lock_release+0x8>)
 801293a:	f000 b8a2 	b.w	8012a82 <__retarget_lock_release_recursive>
 801293e:	bf00      	nop
 8012940:	20003952 	.word	0x20003952

08012944 <__sinit>:
 8012944:	b510      	push	{r4, lr}
 8012946:	4604      	mov	r4, r0
 8012948:	f7ff fff0 	bl	801292c <__sinit_lock_acquire>
 801294c:	69a3      	ldr	r3, [r4, #24]
 801294e:	b11b      	cbz	r3, 8012958 <__sinit+0x14>
 8012950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012954:	f7ff bff0 	b.w	8012938 <__sinit_lock_release>
 8012958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801295c:	6523      	str	r3, [r4, #80]	; 0x50
 801295e:	4b13      	ldr	r3, [pc, #76]	; (80129ac <__sinit+0x68>)
 8012960:	4a13      	ldr	r2, [pc, #76]	; (80129b0 <__sinit+0x6c>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	62a2      	str	r2, [r4, #40]	; 0x28
 8012966:	42a3      	cmp	r3, r4
 8012968:	bf04      	itt	eq
 801296a:	2301      	moveq	r3, #1
 801296c:	61a3      	streq	r3, [r4, #24]
 801296e:	4620      	mov	r0, r4
 8012970:	f000 f820 	bl	80129b4 <__sfp>
 8012974:	6060      	str	r0, [r4, #4]
 8012976:	4620      	mov	r0, r4
 8012978:	f000 f81c 	bl	80129b4 <__sfp>
 801297c:	60a0      	str	r0, [r4, #8]
 801297e:	4620      	mov	r0, r4
 8012980:	f000 f818 	bl	80129b4 <__sfp>
 8012984:	2200      	movs	r2, #0
 8012986:	60e0      	str	r0, [r4, #12]
 8012988:	2104      	movs	r1, #4
 801298a:	6860      	ldr	r0, [r4, #4]
 801298c:	f7ff ff82 	bl	8012894 <std>
 8012990:	68a0      	ldr	r0, [r4, #8]
 8012992:	2201      	movs	r2, #1
 8012994:	2109      	movs	r1, #9
 8012996:	f7ff ff7d 	bl	8012894 <std>
 801299a:	68e0      	ldr	r0, [r4, #12]
 801299c:	2202      	movs	r2, #2
 801299e:	2112      	movs	r1, #18
 80129a0:	f7ff ff78 	bl	8012894 <std>
 80129a4:	2301      	movs	r3, #1
 80129a6:	61a3      	str	r3, [r4, #24]
 80129a8:	e7d2      	b.n	8012950 <__sinit+0xc>
 80129aa:	bf00      	nop
 80129ac:	08014d8c 	.word	0x08014d8c
 80129b0:	080128dd 	.word	0x080128dd

080129b4 <__sfp>:
 80129b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b6:	4607      	mov	r7, r0
 80129b8:	f7ff ffac 	bl	8012914 <__sfp_lock_acquire>
 80129bc:	4b1e      	ldr	r3, [pc, #120]	; (8012a38 <__sfp+0x84>)
 80129be:	681e      	ldr	r6, [r3, #0]
 80129c0:	69b3      	ldr	r3, [r6, #24]
 80129c2:	b913      	cbnz	r3, 80129ca <__sfp+0x16>
 80129c4:	4630      	mov	r0, r6
 80129c6:	f7ff ffbd 	bl	8012944 <__sinit>
 80129ca:	3648      	adds	r6, #72	; 0x48
 80129cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80129d0:	3b01      	subs	r3, #1
 80129d2:	d503      	bpl.n	80129dc <__sfp+0x28>
 80129d4:	6833      	ldr	r3, [r6, #0]
 80129d6:	b30b      	cbz	r3, 8012a1c <__sfp+0x68>
 80129d8:	6836      	ldr	r6, [r6, #0]
 80129da:	e7f7      	b.n	80129cc <__sfp+0x18>
 80129dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80129e0:	b9d5      	cbnz	r5, 8012a18 <__sfp+0x64>
 80129e2:	4b16      	ldr	r3, [pc, #88]	; (8012a3c <__sfp+0x88>)
 80129e4:	60e3      	str	r3, [r4, #12]
 80129e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80129ea:	6665      	str	r5, [r4, #100]	; 0x64
 80129ec:	f000 f847 	bl	8012a7e <__retarget_lock_init_recursive>
 80129f0:	f7ff ff96 	bl	8012920 <__sfp_lock_release>
 80129f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80129f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80129fc:	6025      	str	r5, [r4, #0]
 80129fe:	61a5      	str	r5, [r4, #24]
 8012a00:	2208      	movs	r2, #8
 8012a02:	4629      	mov	r1, r5
 8012a04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012a08:	f7fb ff80 	bl	800e90c <memset>
 8012a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012a10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012a14:	4620      	mov	r0, r4
 8012a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a18:	3468      	adds	r4, #104	; 0x68
 8012a1a:	e7d9      	b.n	80129d0 <__sfp+0x1c>
 8012a1c:	2104      	movs	r1, #4
 8012a1e:	4638      	mov	r0, r7
 8012a20:	f7ff ff62 	bl	80128e8 <__sfmoreglue>
 8012a24:	4604      	mov	r4, r0
 8012a26:	6030      	str	r0, [r6, #0]
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d1d5      	bne.n	80129d8 <__sfp+0x24>
 8012a2c:	f7ff ff78 	bl	8012920 <__sfp_lock_release>
 8012a30:	230c      	movs	r3, #12
 8012a32:	603b      	str	r3, [r7, #0]
 8012a34:	e7ee      	b.n	8012a14 <__sfp+0x60>
 8012a36:	bf00      	nop
 8012a38:	08014d8c 	.word	0x08014d8c
 8012a3c:	ffff0001 	.word	0xffff0001

08012a40 <_fwalk_reent>:
 8012a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a44:	4606      	mov	r6, r0
 8012a46:	4688      	mov	r8, r1
 8012a48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012a4c:	2700      	movs	r7, #0
 8012a4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a52:	f1b9 0901 	subs.w	r9, r9, #1
 8012a56:	d505      	bpl.n	8012a64 <_fwalk_reent+0x24>
 8012a58:	6824      	ldr	r4, [r4, #0]
 8012a5a:	2c00      	cmp	r4, #0
 8012a5c:	d1f7      	bne.n	8012a4e <_fwalk_reent+0xe>
 8012a5e:	4638      	mov	r0, r7
 8012a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a64:	89ab      	ldrh	r3, [r5, #12]
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d907      	bls.n	8012a7a <_fwalk_reent+0x3a>
 8012a6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	d003      	beq.n	8012a7a <_fwalk_reent+0x3a>
 8012a72:	4629      	mov	r1, r5
 8012a74:	4630      	mov	r0, r6
 8012a76:	47c0      	blx	r8
 8012a78:	4307      	orrs	r7, r0
 8012a7a:	3568      	adds	r5, #104	; 0x68
 8012a7c:	e7e9      	b.n	8012a52 <_fwalk_reent+0x12>

08012a7e <__retarget_lock_init_recursive>:
 8012a7e:	4770      	bx	lr

08012a80 <__retarget_lock_acquire_recursive>:
 8012a80:	4770      	bx	lr

08012a82 <__retarget_lock_release_recursive>:
 8012a82:	4770      	bx	lr

08012a84 <__swhatbuf_r>:
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	460e      	mov	r6, r1
 8012a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a8c:	2900      	cmp	r1, #0
 8012a8e:	b096      	sub	sp, #88	; 0x58
 8012a90:	4614      	mov	r4, r2
 8012a92:	461d      	mov	r5, r3
 8012a94:	da08      	bge.n	8012aa8 <__swhatbuf_r+0x24>
 8012a96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	602a      	str	r2, [r5, #0]
 8012a9e:	061a      	lsls	r2, r3, #24
 8012aa0:	d410      	bmi.n	8012ac4 <__swhatbuf_r+0x40>
 8012aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012aa6:	e00e      	b.n	8012ac6 <__swhatbuf_r+0x42>
 8012aa8:	466a      	mov	r2, sp
 8012aaa:	f000 f903 	bl	8012cb4 <_fstat_r>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	dbf1      	blt.n	8012a96 <__swhatbuf_r+0x12>
 8012ab2:	9a01      	ldr	r2, [sp, #4]
 8012ab4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012ab8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012abc:	425a      	negs	r2, r3
 8012abe:	415a      	adcs	r2, r3
 8012ac0:	602a      	str	r2, [r5, #0]
 8012ac2:	e7ee      	b.n	8012aa2 <__swhatbuf_r+0x1e>
 8012ac4:	2340      	movs	r3, #64	; 0x40
 8012ac6:	2000      	movs	r0, #0
 8012ac8:	6023      	str	r3, [r4, #0]
 8012aca:	b016      	add	sp, #88	; 0x58
 8012acc:	bd70      	pop	{r4, r5, r6, pc}
	...

08012ad0 <__smakebuf_r>:
 8012ad0:	898b      	ldrh	r3, [r1, #12]
 8012ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012ad4:	079d      	lsls	r5, r3, #30
 8012ad6:	4606      	mov	r6, r0
 8012ad8:	460c      	mov	r4, r1
 8012ada:	d507      	bpl.n	8012aec <__smakebuf_r+0x1c>
 8012adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012ae0:	6023      	str	r3, [r4, #0]
 8012ae2:	6123      	str	r3, [r4, #16]
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	6163      	str	r3, [r4, #20]
 8012ae8:	b002      	add	sp, #8
 8012aea:	bd70      	pop	{r4, r5, r6, pc}
 8012aec:	ab01      	add	r3, sp, #4
 8012aee:	466a      	mov	r2, sp
 8012af0:	f7ff ffc8 	bl	8012a84 <__swhatbuf_r>
 8012af4:	9900      	ldr	r1, [sp, #0]
 8012af6:	4605      	mov	r5, r0
 8012af8:	4630      	mov	r0, r6
 8012afa:	f7ff f96d 	bl	8011dd8 <_malloc_r>
 8012afe:	b948      	cbnz	r0, 8012b14 <__smakebuf_r+0x44>
 8012b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b04:	059a      	lsls	r2, r3, #22
 8012b06:	d4ef      	bmi.n	8012ae8 <__smakebuf_r+0x18>
 8012b08:	f023 0303 	bic.w	r3, r3, #3
 8012b0c:	f043 0302 	orr.w	r3, r3, #2
 8012b10:	81a3      	strh	r3, [r4, #12]
 8012b12:	e7e3      	b.n	8012adc <__smakebuf_r+0xc>
 8012b14:	4b0d      	ldr	r3, [pc, #52]	; (8012b4c <__smakebuf_r+0x7c>)
 8012b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8012b18:	89a3      	ldrh	r3, [r4, #12]
 8012b1a:	6020      	str	r0, [r4, #0]
 8012b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b20:	81a3      	strh	r3, [r4, #12]
 8012b22:	9b00      	ldr	r3, [sp, #0]
 8012b24:	6163      	str	r3, [r4, #20]
 8012b26:	9b01      	ldr	r3, [sp, #4]
 8012b28:	6120      	str	r0, [r4, #16]
 8012b2a:	b15b      	cbz	r3, 8012b44 <__smakebuf_r+0x74>
 8012b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b30:	4630      	mov	r0, r6
 8012b32:	f000 f8d1 	bl	8012cd8 <_isatty_r>
 8012b36:	b128      	cbz	r0, 8012b44 <__smakebuf_r+0x74>
 8012b38:	89a3      	ldrh	r3, [r4, #12]
 8012b3a:	f023 0303 	bic.w	r3, r3, #3
 8012b3e:	f043 0301 	orr.w	r3, r3, #1
 8012b42:	81a3      	strh	r3, [r4, #12]
 8012b44:	89a0      	ldrh	r0, [r4, #12]
 8012b46:	4305      	orrs	r5, r0
 8012b48:	81a5      	strh	r5, [r4, #12]
 8012b4a:	e7cd      	b.n	8012ae8 <__smakebuf_r+0x18>
 8012b4c:	080128dd 	.word	0x080128dd

08012b50 <_malloc_usable_size_r>:
 8012b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b54:	1f18      	subs	r0, r3, #4
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	bfbc      	itt	lt
 8012b5a:	580b      	ldrlt	r3, [r1, r0]
 8012b5c:	18c0      	addlt	r0, r0, r3
 8012b5e:	4770      	bx	lr

08012b60 <_raise_r>:
 8012b60:	291f      	cmp	r1, #31
 8012b62:	b538      	push	{r3, r4, r5, lr}
 8012b64:	4604      	mov	r4, r0
 8012b66:	460d      	mov	r5, r1
 8012b68:	d904      	bls.n	8012b74 <_raise_r+0x14>
 8012b6a:	2316      	movs	r3, #22
 8012b6c:	6003      	str	r3, [r0, #0]
 8012b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b72:	bd38      	pop	{r3, r4, r5, pc}
 8012b74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b76:	b112      	cbz	r2, 8012b7e <_raise_r+0x1e>
 8012b78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b7c:	b94b      	cbnz	r3, 8012b92 <_raise_r+0x32>
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f000 f830 	bl	8012be4 <_getpid_r>
 8012b84:	462a      	mov	r2, r5
 8012b86:	4601      	mov	r1, r0
 8012b88:	4620      	mov	r0, r4
 8012b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b8e:	f000 b817 	b.w	8012bc0 <_kill_r>
 8012b92:	2b01      	cmp	r3, #1
 8012b94:	d00a      	beq.n	8012bac <_raise_r+0x4c>
 8012b96:	1c59      	adds	r1, r3, #1
 8012b98:	d103      	bne.n	8012ba2 <_raise_r+0x42>
 8012b9a:	2316      	movs	r3, #22
 8012b9c:	6003      	str	r3, [r0, #0]
 8012b9e:	2001      	movs	r0, #1
 8012ba0:	e7e7      	b.n	8012b72 <_raise_r+0x12>
 8012ba2:	2400      	movs	r4, #0
 8012ba4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ba8:	4628      	mov	r0, r5
 8012baa:	4798      	blx	r3
 8012bac:	2000      	movs	r0, #0
 8012bae:	e7e0      	b.n	8012b72 <_raise_r+0x12>

08012bb0 <raise>:
 8012bb0:	4b02      	ldr	r3, [pc, #8]	; (8012bbc <raise+0xc>)
 8012bb2:	4601      	mov	r1, r0
 8012bb4:	6818      	ldr	r0, [r3, #0]
 8012bb6:	f7ff bfd3 	b.w	8012b60 <_raise_r>
 8012bba:	bf00      	nop
 8012bbc:	20000184 	.word	0x20000184

08012bc0 <_kill_r>:
 8012bc0:	b538      	push	{r3, r4, r5, lr}
 8012bc2:	4d07      	ldr	r5, [pc, #28]	; (8012be0 <_kill_r+0x20>)
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	4608      	mov	r0, r1
 8012bca:	4611      	mov	r1, r2
 8012bcc:	602b      	str	r3, [r5, #0]
 8012bce:	f7f5 ff11 	bl	80089f4 <_kill>
 8012bd2:	1c43      	adds	r3, r0, #1
 8012bd4:	d102      	bne.n	8012bdc <_kill_r+0x1c>
 8012bd6:	682b      	ldr	r3, [r5, #0]
 8012bd8:	b103      	cbz	r3, 8012bdc <_kill_r+0x1c>
 8012bda:	6023      	str	r3, [r4, #0]
 8012bdc:	bd38      	pop	{r3, r4, r5, pc}
 8012bde:	bf00      	nop
 8012be0:	2000394c 	.word	0x2000394c

08012be4 <_getpid_r>:
 8012be4:	f7f5 bf04 	b.w	80089f0 <_getpid>

08012be8 <__sread>:
 8012be8:	b510      	push	{r4, lr}
 8012bea:	460c      	mov	r4, r1
 8012bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bf0:	f000 f894 	bl	8012d1c <_read_r>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	bfab      	itete	ge
 8012bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8012bfc:	181b      	addge	r3, r3, r0
 8012bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c02:	bfac      	ite	ge
 8012c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c06:	81a3      	strhlt	r3, [r4, #12]
 8012c08:	bd10      	pop	{r4, pc}

08012c0a <__swrite>:
 8012c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c0e:	461f      	mov	r7, r3
 8012c10:	898b      	ldrh	r3, [r1, #12]
 8012c12:	05db      	lsls	r3, r3, #23
 8012c14:	4605      	mov	r5, r0
 8012c16:	460c      	mov	r4, r1
 8012c18:	4616      	mov	r6, r2
 8012c1a:	d505      	bpl.n	8012c28 <__swrite+0x1e>
 8012c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c20:	2302      	movs	r3, #2
 8012c22:	2200      	movs	r2, #0
 8012c24:	f000 f868 	bl	8012cf8 <_lseek_r>
 8012c28:	89a3      	ldrh	r3, [r4, #12]
 8012c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c32:	81a3      	strh	r3, [r4, #12]
 8012c34:	4632      	mov	r2, r6
 8012c36:	463b      	mov	r3, r7
 8012c38:	4628      	mov	r0, r5
 8012c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c3e:	f000 b817 	b.w	8012c70 <_write_r>

08012c42 <__sseek>:
 8012c42:	b510      	push	{r4, lr}
 8012c44:	460c      	mov	r4, r1
 8012c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c4a:	f000 f855 	bl	8012cf8 <_lseek_r>
 8012c4e:	1c43      	adds	r3, r0, #1
 8012c50:	89a3      	ldrh	r3, [r4, #12]
 8012c52:	bf15      	itete	ne
 8012c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8012c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c5e:	81a3      	strheq	r3, [r4, #12]
 8012c60:	bf18      	it	ne
 8012c62:	81a3      	strhne	r3, [r4, #12]
 8012c64:	bd10      	pop	{r4, pc}

08012c66 <__sclose>:
 8012c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c6a:	f000 b813 	b.w	8012c94 <_close_r>
	...

08012c70 <_write_r>:
 8012c70:	b538      	push	{r3, r4, r5, lr}
 8012c72:	4d07      	ldr	r5, [pc, #28]	; (8012c90 <_write_r+0x20>)
 8012c74:	4604      	mov	r4, r0
 8012c76:	4608      	mov	r0, r1
 8012c78:	4611      	mov	r1, r2
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	602a      	str	r2, [r5, #0]
 8012c7e:	461a      	mov	r2, r3
 8012c80:	f7f5 fed4 	bl	8008a2c <_write>
 8012c84:	1c43      	adds	r3, r0, #1
 8012c86:	d102      	bne.n	8012c8e <_write_r+0x1e>
 8012c88:	682b      	ldr	r3, [r5, #0]
 8012c8a:	b103      	cbz	r3, 8012c8e <_write_r+0x1e>
 8012c8c:	6023      	str	r3, [r4, #0]
 8012c8e:	bd38      	pop	{r3, r4, r5, pc}
 8012c90:	2000394c 	.word	0x2000394c

08012c94 <_close_r>:
 8012c94:	b538      	push	{r3, r4, r5, lr}
 8012c96:	4d06      	ldr	r5, [pc, #24]	; (8012cb0 <_close_r+0x1c>)
 8012c98:	2300      	movs	r3, #0
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	4608      	mov	r0, r1
 8012c9e:	602b      	str	r3, [r5, #0]
 8012ca0:	f7f5 fed2 	bl	8008a48 <_close>
 8012ca4:	1c43      	adds	r3, r0, #1
 8012ca6:	d102      	bne.n	8012cae <_close_r+0x1a>
 8012ca8:	682b      	ldr	r3, [r5, #0]
 8012caa:	b103      	cbz	r3, 8012cae <_close_r+0x1a>
 8012cac:	6023      	str	r3, [r4, #0]
 8012cae:	bd38      	pop	{r3, r4, r5, pc}
 8012cb0:	2000394c 	.word	0x2000394c

08012cb4 <_fstat_r>:
 8012cb4:	b538      	push	{r3, r4, r5, lr}
 8012cb6:	4d07      	ldr	r5, [pc, #28]	; (8012cd4 <_fstat_r+0x20>)
 8012cb8:	2300      	movs	r3, #0
 8012cba:	4604      	mov	r4, r0
 8012cbc:	4608      	mov	r0, r1
 8012cbe:	4611      	mov	r1, r2
 8012cc0:	602b      	str	r3, [r5, #0]
 8012cc2:	f7f5 fec4 	bl	8008a4e <_fstat>
 8012cc6:	1c43      	adds	r3, r0, #1
 8012cc8:	d102      	bne.n	8012cd0 <_fstat_r+0x1c>
 8012cca:	682b      	ldr	r3, [r5, #0]
 8012ccc:	b103      	cbz	r3, 8012cd0 <_fstat_r+0x1c>
 8012cce:	6023      	str	r3, [r4, #0]
 8012cd0:	bd38      	pop	{r3, r4, r5, pc}
 8012cd2:	bf00      	nop
 8012cd4:	2000394c 	.word	0x2000394c

08012cd8 <_isatty_r>:
 8012cd8:	b538      	push	{r3, r4, r5, lr}
 8012cda:	4d06      	ldr	r5, [pc, #24]	; (8012cf4 <_isatty_r+0x1c>)
 8012cdc:	2300      	movs	r3, #0
 8012cde:	4604      	mov	r4, r0
 8012ce0:	4608      	mov	r0, r1
 8012ce2:	602b      	str	r3, [r5, #0]
 8012ce4:	f7f5 feb8 	bl	8008a58 <_isatty>
 8012ce8:	1c43      	adds	r3, r0, #1
 8012cea:	d102      	bne.n	8012cf2 <_isatty_r+0x1a>
 8012cec:	682b      	ldr	r3, [r5, #0]
 8012cee:	b103      	cbz	r3, 8012cf2 <_isatty_r+0x1a>
 8012cf0:	6023      	str	r3, [r4, #0]
 8012cf2:	bd38      	pop	{r3, r4, r5, pc}
 8012cf4:	2000394c 	.word	0x2000394c

08012cf8 <_lseek_r>:
 8012cf8:	b538      	push	{r3, r4, r5, lr}
 8012cfa:	4d07      	ldr	r5, [pc, #28]	; (8012d18 <_lseek_r+0x20>)
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	4608      	mov	r0, r1
 8012d00:	4611      	mov	r1, r2
 8012d02:	2200      	movs	r2, #0
 8012d04:	602a      	str	r2, [r5, #0]
 8012d06:	461a      	mov	r2, r3
 8012d08:	f7f5 fea8 	bl	8008a5c <_lseek>
 8012d0c:	1c43      	adds	r3, r0, #1
 8012d0e:	d102      	bne.n	8012d16 <_lseek_r+0x1e>
 8012d10:	682b      	ldr	r3, [r5, #0]
 8012d12:	b103      	cbz	r3, 8012d16 <_lseek_r+0x1e>
 8012d14:	6023      	str	r3, [r4, #0]
 8012d16:	bd38      	pop	{r3, r4, r5, pc}
 8012d18:	2000394c 	.word	0x2000394c

08012d1c <_read_r>:
 8012d1c:	b538      	push	{r3, r4, r5, lr}
 8012d1e:	4d07      	ldr	r5, [pc, #28]	; (8012d3c <_read_r+0x20>)
 8012d20:	4604      	mov	r4, r0
 8012d22:	4608      	mov	r0, r1
 8012d24:	4611      	mov	r1, r2
 8012d26:	2200      	movs	r2, #0
 8012d28:	602a      	str	r2, [r5, #0]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	f7f5 fe70 	bl	8008a10 <_read>
 8012d30:	1c43      	adds	r3, r0, #1
 8012d32:	d102      	bne.n	8012d3a <_read_r+0x1e>
 8012d34:	682b      	ldr	r3, [r5, #0]
 8012d36:	b103      	cbz	r3, 8012d3a <_read_r+0x1e>
 8012d38:	6023      	str	r3, [r4, #0]
 8012d3a:	bd38      	pop	{r3, r4, r5, pc}
 8012d3c:	2000394c 	.word	0x2000394c

08012d40 <_init>:
 8012d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d42:	bf00      	nop
 8012d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d46:	bc08      	pop	{r3}
 8012d48:	469e      	mov	lr, r3
 8012d4a:	4770      	bx	lr

08012d4c <_fini>:
 8012d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d4e:	bf00      	nop
 8012d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d52:	bc08      	pop	{r3}
 8012d54:	469e      	mov	lr, r3
 8012d56:	4770      	bx	lr
